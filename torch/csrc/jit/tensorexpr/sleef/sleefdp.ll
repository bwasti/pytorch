; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefdp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefdp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.ddi_t = type { %struct.Sleef_double2, i32 }
%struct.Sleef_double2 = type { double, double }
%struct.dd2 = type { %struct.Sleef_double2, %struct.Sleef_double2 }

@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_ldexp(double, i32) local_unnamed_addr #0 {
  %3 = icmp slt i32 %1, 2100
  %4 = select i1 %3, i32 %1, i32 2100
  %5 = icmp sgt i32 %4, -2100
  %6 = select i1 %5, i32 %4, i32 -2100
  %7 = ashr i32 %6, 2
  %8 = lshr i32 %6, 31
  %9 = add nsw i32 %7, %8
  %10 = add i32 %6, 99
  %11 = icmp ult i32 %10, 199
  %12 = select i1 %11, i32 0, i32 %9
  %13 = shl i32 %12, 2
  %14 = add nsw i32 %12, 1023
  %15 = zext i32 %14 to i64
  %16 = shl i64 %15, 52
  %17 = bitcast i64 %16 to double
  %18 = add i32 %6, 1023
  %19 = sub i32 %18, %13
  %20 = zext i32 %19 to i64
  %21 = shl i64 %20, 52
  %22 = bitcast i64 %21 to double
  %23 = fmul double %22, %0
  %24 = fmul double %23, %17
  %25 = fmul double %24, %17
  %26 = fmul double %25, %17
  %27 = fmul double %26, %17
  ret double %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_ilogb(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %6, double %4
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = select i1 %5, i32 -1323, i32 -1023
  %13 = add nsw i32 %11, %12
  %14 = fcmp oeq double %0, 0.000000e+00
  %15 = select i1 %14, i32 -2147483648, i32 %13
  %16 = fcmp uno double %0, 0.000000e+00
  %17 = fcmp oeq double %0, 0x7FF0000000000000
  %18 = fcmp oeq double %0, 0xFFF0000000000000
  %19 = or i1 %17, %18
  %20 = or i1 %16, %19
  %21 = select i1 %20, i32 2147483647, i32 %15
  ret i32 %21
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan2_u35(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %1, 0.000000e+00
  %7 = fsub double -0.000000e+00, %1
  %8 = select i1 %6, i32 -2, i32 0
  %9 = select i1 %6, double %7, double %1
  %10 = fcmp olt double %9, %5
  %11 = fsub double -0.000000e+00, %9
  %12 = zext i1 %10 to i32
  %13 = or i32 %8, %12
  %14 = select i1 %10, double %5, double %9
  %15 = select i1 %10, double %11, double %5
  %16 = fdiv double %15, %14
  %17 = fmul double %16, %16
  %18 = fmul double %17, %17
  %19 = fmul double %18, %18
  %20 = fmul double %19, %19
  %21 = fmul double %20, %20
  %22 = fmul double %17, 0x3F2B81666EB938AF
  %23 = fadd double %22, 0xBF521F657F3915DA
  %24 = fmul double %18, 0x3EF3CBF44A88555F
  %25 = fsub double %23, %24
  %26 = fmul double %17, 0x3F6E5005F4C78C20
  %27 = fadd double %26, 0xBF82399E74A75E56
  %28 = fmul double %17, 0x3F90FF6A2A0D2286
  %29 = fadd double %28, 0xBF9A1006DE22CDAC
  %30 = fmul double %18, %27
  %31 = fadd double %29, %30
  %32 = fmul double %17, 0x3FA14C4D24651F2E
  %33 = fadd double %32, 0xBFA4DEE09915F638
  %34 = fmul double %17, 0x3FA7E4B31D8A55AE
  %35 = fadd double %34, 0xBFAACFE938E04FCA
  %36 = fmul double %18, %33
  %37 = fadd double %35, %36
  %38 = fmul double %19, %31
  %39 = fadd double %37, %38
  %40 = fmul double %17, 0x3FAE16A933B73622
  %41 = fadd double %40, 0xBFB11074E45F93E0
  %42 = fmul double %17, 0x3FB3B1283C0CA0B1
  %43 = fadd double %42, 0xBFB745CFD878FEE8
  %44 = fmul double %18, %41
  %45 = fadd double %43, %44
  %46 = fmul double %17, 0x3FBC71C704FB4F9F
  %47 = fadd double %46, 0xBFC2492491E100BB
  %48 = fmul double %17, 0x3FC999999997B9DD
  %49 = fadd double %48, 0xBFD55555555553C5
  %50 = fmul double %18, %47
  %51 = fadd double %49, %50
  %52 = fmul double %19, %45
  %53 = fadd double %51, %52
  %54 = fmul double %20, %39
  %55 = fadd double %53, %54
  %56 = fmul double %25, %21
  %57 = fadd double %56, %55
  %58 = fmul double %17, %57
  %59 = fmul double %16, %58
  %60 = fadd double %16, %59
  %61 = sitofp i32 %13 to double
  %62 = fmul double %61, 0x3FF921FB54442D18
  %63 = fadd double %62, %60
  %64 = bitcast double %63 to i64
  %65 = bitcast double %1 to i64
  %66 = and i64 %65, -9223372036854775808
  %67 = xor i64 %66, %64
  %68 = bitcast i64 %67 to double
  %69 = fcmp oeq double %1, 0x7FF0000000000000
  %70 = fcmp oeq double %1, 0xFFF0000000000000
  %71 = or i1 %69, %70
  %72 = fcmp oeq double %1, 0.000000e+00
  %73 = or i1 %72, %71
  br i1 %73, label %74, label %82

; <label>:74:                                     ; preds = %2
  br i1 %71, label %75, label %79

; <label>:75:                                     ; preds = %74
  %76 = or i64 %66, 4607182418800017408
  %77 = bitcast i64 %76 to double
  %78 = fmul double %77, 0x3FF921FB54442D18
  br label %79

; <label>:79:                                     ; preds = %74, %75
  %80 = phi double [ %78, %75 ], [ 0.000000e+00, %74 ]
  %81 = fsub double 0x3FF921FB54442D18, %80
  br label %82

; <label>:82:                                     ; preds = %2, %79
  %83 = phi double [ %81, %79 ], [ %68, %2 ]
  %84 = fcmp une double %0, 0x7FF0000000000000
  %85 = fcmp une double %0, 0xFFF0000000000000
  %86 = and i1 %85, %84
  br i1 %86, label %95, label %87

; <label>:87:                                     ; preds = %82
  br i1 %71, label %88, label %92

; <label>:88:                                     ; preds = %87
  %89 = or i64 %66, 4607182418800017408
  %90 = bitcast i64 %89 to double
  %91 = fmul double %90, 0x3FE921FB54442D18
  br label %92

; <label>:92:                                     ; preds = %87, %88
  %93 = phi double [ %91, %88 ], [ 0.000000e+00, %87 ]
  %94 = fsub double 0x3FF921FB54442D18, %93
  br label %95

; <label>:95:                                     ; preds = %82, %92
  %96 = phi double [ %94, %92 ], [ %83, %82 ]
  %97 = fcmp oeq double %0, 0.000000e+00
  br i1 %97, label %98, label %103

; <label>:98:                                     ; preds = %95
  %99 = or i64 %66, 4607182418800017408
  %100 = bitcast i64 %99 to double
  %101 = fcmp oeq double %100, -1.000000e+00
  %102 = select i1 %101, double 0x400921FB54442D18, double 0.000000e+00
  br label %103

; <label>:103:                                    ; preds = %98, %95
  %104 = phi double [ %102, %98 ], [ %96, %95 ]
  %105 = fcmp ord double %0, %1
  br i1 %105, label %106, label %111

; <label>:106:                                    ; preds = %103
  %107 = bitcast double %104 to i64
  %108 = and i64 %3, -9223372036854775808
  %109 = xor i64 %108, %107
  %110 = bitcast i64 %109 to double
  br label %111

; <label>:111:                                    ; preds = %103, %106
  %112 = phi double [ %110, %106 ], [ 0x7FF8000000000000, %103 ]
  ret double %112
}

; Function Attrs: nounwind uwtable
define double @Sleef_asin_u35(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, %0
  br label %12

; <label>:8:                                      ; preds = %1
  %9 = fsub double 1.000000e+00, %4
  %10 = fmul double %9, 5.000000e-01
  %11 = tail call double @sqrt(double %10) #5
  br label %12

; <label>:12:                                     ; preds = %8, %6
  %13 = phi double [ %7, %6 ], [ %10, %8 ]
  %14 = phi double [ %4, %6 ], [ %11, %8 ]
  %15 = fmul double %13, %13
  %16 = fmul double %15, %15
  %17 = fmul double %16, %16
  %18 = insertelement <2 x double> undef, double %13, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %19, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %21 = fadd <2 x double> %20, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %22 = fmul <2 x double> %19, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %23 = fadd <2 x double> %22, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %24 = insertelement <2 x double> undef, double %15, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %25, %21
  %27 = fadd <2 x double> %23, %26
  %28 = fmul double %13, 0x3F9F1C72C5FD95BA
  %29 = fadd double %28, 0x3FA6DB6DB407C2B3
  %30 = fmul double %13, 0x3FB3333333375CD0
  %31 = fadd double %30, 0x3FC55555555552F4
  %32 = fmul double %15, %29
  %33 = fadd double %31, %32
  %34 = insertelement <2 x double> undef, double %17, i32 0
  %35 = insertelement <2 x double> %34, double %16, i32 1
  %36 = fmul <2 x double> %35, %27
  %37 = extractelement <2 x double> %36, i32 1
  %38 = fadd double %33, %37
  %39 = extractelement <2 x double> %36, i32 0
  %40 = fadd double %39, %38
  %41 = fmul double %13, %14
  %42 = fmul double %41, %40
  %43 = fadd double %14, %42
  %44 = fmul double %43, 2.000000e+00
  %45 = fsub double 0x3FF921FB54442D18, %44
  %46 = select i1 %5, double %43, double %45
  %47 = bitcast double %46 to i64
  %48 = and i64 %2, -9223372036854775808
  %49 = xor i64 %48, %47
  %50 = bitcast i64 %49 to double
  ret double %50
}

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define double @Sleef_acos_u35(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, %0
  br label %12

; <label>:8:                                      ; preds = %1
  %9 = fsub double 1.000000e+00, %4
  %10 = fmul double %9, 5.000000e-01
  %11 = tail call double @sqrt(double %10) #5
  br label %12

; <label>:12:                                     ; preds = %8, %6
  %13 = phi double [ %7, %6 ], [ %10, %8 ]
  %14 = phi double [ %4, %6 ], [ %11, %8 ]
  %15 = fcmp oeq double %4, 1.000000e+00
  %16 = select i1 %15, double 0.000000e+00, double %14
  %17 = fmul double %13, %13
  %18 = fmul double %17, %17
  %19 = fmul double %18, %18
  %20 = insertelement <2 x double> undef, double %13, i32 0
  %21 = shufflevector <2 x double> %20, <2 x double> undef, <2 x i32> zeroinitializer
  %22 = fmul <2 x double> %21, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %23 = fadd <2 x double> %22, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %24 = fmul <2 x double> %21, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %25 = fadd <2 x double> %24, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %26 = insertelement <2 x double> undef, double %17, i32 0
  %27 = shufflevector <2 x double> %26, <2 x double> undef, <2 x i32> zeroinitializer
  %28 = fmul <2 x double> %27, %23
  %29 = fadd <2 x double> %25, %28
  %30 = fmul double %13, 0x3F9F1C72C5FD95BA
  %31 = fadd double %30, 0x3FA6DB6DB407C2B3
  %32 = fmul double %13, 0x3FB3333333375CD0
  %33 = fadd double %32, 0x3FC55555555552F4
  %34 = fmul double %17, %31
  %35 = fadd double %33, %34
  %36 = insertelement <2 x double> undef, double %19, i32 0
  %37 = insertelement <2 x double> %36, double %18, i32 1
  %38 = fmul <2 x double> %37, %29
  %39 = extractelement <2 x double> %38, i32 1
  %40 = fadd double %35, %39
  %41 = extractelement <2 x double> %38, i32 0
  %42 = fadd double %41, %40
  %43 = fmul double %13, %16
  %44 = fmul double %43, %42
  %45 = bitcast double %16 to i64
  %46 = and i64 %2, -9223372036854775808
  %47 = xor i64 %46, %45
  %48 = bitcast i64 %47 to double
  %49 = bitcast double %44 to i64
  %50 = xor i64 %46, %49
  %51 = bitcast i64 %50 to double
  %52 = fadd double %48, %51
  %53 = fsub double 0x3FF921FB54442D18, %52
  %54 = fadd double %16, %44
  %55 = fmul double %54, 2.000000e+00
  %56 = select i1 %5, double %53, double %55
  %57 = xor i1 %5, true
  %58 = fcmp olt double %0, 0.000000e+00
  %59 = and i1 %58, %57
  %60 = fsub double 0x400921FB54442D18, %56
  %61 = select i1 %59, double %60, double %56
  ret double %61
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan_u35(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, -9223372036854775808
  %4 = or i64 %3, 4607182418800017408
  %5 = bitcast i64 %4 to double
  %6 = fcmp oeq double %5, -1.000000e+00
  %7 = fsub double -0.000000e+00, %0
  %8 = select i1 %6, i32 2, i32 0
  %9 = select i1 %6, double %7, double %0
  %10 = fcmp ogt double %9, 1.000000e+00
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %1
  %12 = fdiv double 1.000000e+00, %9
  %13 = or i32 %8, 1
  br label %14

; <label>:14:                                     ; preds = %11, %1
  %15 = phi i32 [ %13, %11 ], [ %8, %1 ]
  %16 = phi double [ %12, %11 ], [ %9, %1 ]
  %17 = fmul double %16, %16
  %18 = fmul double %17, %17
  %19 = fmul double %18, %18
  %20 = fmul double %19, %19
  %21 = fmul double %20, %20
  %22 = fmul double %17, 0x3F2B81666EB938AF
  %23 = fadd double %22, 0xBF521F657F3915DA
  %24 = fmul double %18, 0x3EF3CBF44A88555F
  %25 = fsub double %23, %24
  %26 = insertelement <2 x double> undef, double %17, i32 0
  %27 = shufflevector <2 x double> %26, <2 x double> undef, <2 x i32> zeroinitializer
  %28 = fmul <2 x double> %27, <double 0x3FAE16A933B73622, double 0x3F6E5005F4C78C20>
  %29 = fadd <2 x double> %28, <double 0xBFB11074E45F93E0, double 0xBF82399E74A75E56>
  %30 = fmul <2 x double> %27, <double 0x3FB3B1283C0CA0B1, double 0x3F90FF6A2A0D2286>
  %31 = fadd <2 x double> %30, <double 0xBFB745CFD878FEE8, double 0xBF9A1006DE22CDAC>
  %32 = insertelement <2 x double> undef, double %18, i32 0
  %33 = shufflevector <2 x double> %32, <2 x double> undef, <2 x i32> zeroinitializer
  %34 = fmul <2 x double> %33, %29
  %35 = fadd <2 x double> %31, %34
  %36 = fmul <2 x double> %27, <double 0x3FBC71C704FB4F9F, double 0x3FA14C4D24651F2E>
  %37 = fadd <2 x double> %36, <double 0xBFC2492491E100BB, double 0xBFA4DEE09915F638>
  %38 = fmul <2 x double> %27, <double 0x3FC999999997B9DD, double 0x3FA7E4B31D8A55AE>
  %39 = fadd <2 x double> %38, <double 0xBFD55555555553C5, double 0xBFAACFE938E04FCA>
  %40 = fmul <2 x double> %33, %37
  %41 = fadd <2 x double> %39, %40
  %42 = insertelement <2 x double> undef, double %19, i32 0
  %43 = shufflevector <2 x double> %42, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x double> %43, %35
  %45 = fadd <2 x double> %41, %44
  %46 = extractelement <2 x double> %45, i32 1
  %47 = fmul double %20, %46
  %48 = extractelement <2 x double> %45, i32 0
  %49 = fadd double %48, %47
  %50 = fmul double %25, %21
  %51 = fadd double %50, %49
  %52 = fmul double %17, %51
  %53 = fmul double %16, %52
  %54 = fadd double %16, %53
  %55 = and i32 %15, 1
  %56 = icmp eq i32 %55, 0
  %57 = fsub double 0x3FF921FB54442D18, %54
  %58 = select i1 %56, double %54, double %57
  %59 = fsub double -0.000000e+00, %58
  %60 = select i1 %6, double %59, double %58
  ret double %60
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan2_u10(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 0x4000000000001
  %7 = fmul double %0, 0x4340000000000000
  %8 = fmul double %1, 0x4340000000000000
  %9 = select i1 %6, double %8, double %1
  %10 = select i1 %6, double %7, double %0
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9223372036854775807
  %13 = bitcast i64 %12 to double
  %14 = tail call fastcc { double, double } @atan2k_u1(double %13, double 0.000000e+00, double %9, double 0.000000e+00)
  %15 = extractvalue { double, double } %14, 0
  %16 = extractvalue { double, double } %14, 1
  %17 = fadd double %15, %16
  %18 = bitcast double %17 to i64
  %19 = bitcast double %9 to i64
  %20 = and i64 %19, -9223372036854775808
  %21 = xor i64 %20, %18
  %22 = bitcast i64 %21 to double
  %23 = fcmp oeq double %9, 0x7FF0000000000000
  %24 = fcmp oeq double %9, 0xFFF0000000000000
  %25 = or i1 %23, %24
  %26 = fcmp oeq double %9, 0.000000e+00
  %27 = or i1 %26, %25
  br i1 %27, label %28, label %36

; <label>:28:                                     ; preds = %2
  br i1 %25, label %29, label %33

; <label>:29:                                     ; preds = %28
  %30 = or i64 %20, 4607182418800017408
  %31 = bitcast i64 %30 to double
  %32 = fmul double %31, 0x3FF921FB54442D18
  br label %33

; <label>:33:                                     ; preds = %28, %29
  %34 = phi double [ %32, %29 ], [ 0.000000e+00, %28 ]
  %35 = fsub double 0x3FF921FB54442D18, %34
  br label %36

; <label>:36:                                     ; preds = %2, %33
  %37 = phi double [ %35, %33 ], [ %22, %2 ]
  %38 = fcmp une double %10, 0x7FF0000000000000
  %39 = fcmp une double %10, 0xFFF0000000000000
  %40 = and i1 %39, %38
  br i1 %40, label %49, label %41

; <label>:41:                                     ; preds = %36
  br i1 %25, label %42, label %46

; <label>:42:                                     ; preds = %41
  %43 = or i64 %20, 4607182418800017408
  %44 = bitcast i64 %43 to double
  %45 = fmul double %44, 0x3FE921FB54442D18
  br label %46

; <label>:46:                                     ; preds = %41, %42
  %47 = phi double [ %45, %42 ], [ 0.000000e+00, %41 ]
  %48 = fsub double 0x3FF921FB54442D18, %47
  br label %49

; <label>:49:                                     ; preds = %36, %46
  %50 = phi double [ %48, %46 ], [ %37, %36 ]
  %51 = fcmp oeq double %10, 0.000000e+00
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %49
  %53 = or i64 %20, 4607182418800017408
  %54 = bitcast i64 %53 to double
  %55 = fcmp oeq double %54, -1.000000e+00
  %56 = select i1 %55, double 0x400921FB54442D18, double 0.000000e+00
  br label %57

; <label>:57:                                     ; preds = %52, %49
  %58 = phi double [ %56, %52 ], [ %50, %49 ]
  %59 = fcmp ord double %9, %10
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %57
  %61 = bitcast double %58 to i64
  %62 = and i64 %11, -9223372036854775808
  %63 = xor i64 %62, %61
  %64 = bitcast i64 %63 to double
  br label %65

; <label>:65:                                     ; preds = %57, %60
  %66 = phi double [ %64, %60 ], [ 0x7FF8000000000000, %57 ]
  ret double %66
}

; Function Attrs: norecurse nounwind readnone uwtable
define internal fastcc { double, double } @atan2k_u1(double, double, double, double) unnamed_addr #0 {
  %5 = fcmp olt double %2, 0.000000e+00
  %6 = fsub double -0.000000e+00, %2
  %7 = fsub double -0.000000e+00, %3
  %8 = select i1 %5, i32 -2, i32 0
  %9 = select i1 %5, double %6, double %2
  %10 = select i1 %5, double %7, double %3
  %11 = fcmp olt double %9, %0
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %4
  %13 = fsub double -0.000000e+00, %9
  %14 = fsub double -0.000000e+00, %10
  %15 = or i32 %8, 1
  br label %16

; <label>:16:                                     ; preds = %12, %4
  %17 = phi i32 [ %15, %12 ], [ %8, %4 ]
  %18 = phi double [ %0, %12 ], [ %9, %4 ]
  %19 = phi double [ %1, %12 ], [ %10, %4 ]
  %20 = phi double [ %13, %12 ], [ %0, %4 ]
  %21 = phi double [ %14, %12 ], [ %1, %4 ]
  %22 = fdiv double 1.000000e+00, %18
  %23 = bitcast double %18 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %18, %25
  %27 = bitcast double %22 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %22, %29
  %31 = bitcast double %20 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %20, %33
  %35 = fmul double %22, %20
  %36 = fmul double %29, %33
  %37 = fsub double %36, %35
  %38 = fmul double %30, %33
  %39 = fadd double %38, %37
  %40 = fmul double %34, %29
  %41 = fadd double %40, %39
  %42 = fmul double %30, %34
  %43 = fadd double %42, %41
  %44 = fmul double %25, %29
  %45 = fsub double 1.000000e+00, %44
  %46 = fmul double %30, %25
  %47 = fsub double %45, %46
  %48 = fmul double %26, %29
  %49 = fsub double %47, %48
  %50 = insertelement <2 x double> undef, double %19, i32 0
  %51 = insertelement <2 x double> %50, double %26, i32 1
  %52 = insertelement <2 x double> undef, double %35, i32 0
  %53 = insertelement <2 x double> %52, double %30, i32 1
  %54 = fmul <2 x double> %51, %53
  %55 = insertelement <2 x double> undef, double %21, i32 0
  %56 = insertelement <2 x double> %55, double %49, i32 1
  %57 = fsub <2 x double> %56, %54
  %58 = insertelement <2 x double> undef, double %22, i32 0
  %59 = insertelement <2 x double> %58, double %35, i32 1
  %60 = fmul <2 x double> %59, %57
  %61 = extractelement <2 x double> %60, i32 1
  %62 = fadd double %43, %61
  %63 = extractelement <2 x double> %60, i32 0
  %64 = fadd double %63, %62
  %65 = bitcast double %35 to i64
  %66 = and i64 %65, -134217728
  %67 = bitcast i64 %66 to double
  %68 = fsub double %35, %67
  %69 = fmul double %35, %35
  %70 = fmul double %67, %67
  %71 = fsub double %70, %69
  %72 = fadd double %67, %67
  %73 = fmul double %72, %68
  %74 = fadd double %71, %73
  %75 = fmul double %68, %68
  %76 = fadd double %75, %74
  %77 = fadd double %64, %64
  %78 = fmul double %35, %77
  %79 = fadd double %76, %78
  %80 = fadd double %69, %79
  %81 = fsub double %69, %80
  %82 = fadd double %79, %81
  %83 = fmul double %80, %80
  %84 = fmul double %83, %83
  %85 = fmul double %84, %84
  %86 = fmul double %80, 0x3EE64ADB3E06EE72
  %87 = fadd double %86, 0xBF2077212AA7D6CE
  %88 = fmul double %80, 0x3F471ECE4D9CED98
  %89 = fadd double %88, 0xBF64A20138B90CEE
  %90 = fmul double %83, %87
  %91 = fadd double %89, %90
  %92 = fmul double %80, 0x3F7A788EC28E9FB3
  %93 = fadd double %92, 0xBF8A45A2EA379DB5
  %94 = fmul double %80, 0x3F954D3ECCF8F320
  %95 = fadd double %94, 0xBF9D9805E7BA23E7
  %96 = fmul double %83, %93
  %97 = fadd double %95, %96
  %98 = fmul double %84, %91
  %99 = fadd double %97, %98
  %100 = fmul double %80, 0x3FA26BC6260B1BDD
  %101 = fadd double %100, 0xBFA56D2D526C0577
  %102 = fmul double %80, 0x3FA81B6EFB51F8A6
  %103 = fadd double %102, 0xBFAAE027D1895F2E
  %104 = fmul double %83, %101
  %105 = fadd double %103, %104
  %106 = fmul double %80, 0x3FAE1A556400767B
  %107 = fadd double %106, 0xBFB110C441E542D6
  %108 = fmul double %80, 0x3FB3B131F3B00D10
  %109 = fadd double %108, 0xBFB745D0AC14EFEC
  %110 = fmul double %83, %107
  %111 = fadd double %109, %110
  %112 = fmul double %84, %105
  %113 = fadd double %111, %112
  %114 = fmul double %85, %99
  %115 = fadd double %113, %114
  %116 = fmul double %80, %115
  %117 = fadd double %116, 0x3FBC71C710B37A0B
  %118 = fmul double %80, %117
  %119 = fadd double %118, 0xBFC249249211AFC7
  %120 = fmul double %80, %119
  %121 = fadd double %120, 0x3FC9999999987CF0
  %122 = fmul double %80, %121
  %123 = fadd double %122, 0xBFD555555555543A
  %124 = bitcast double %80 to i64
  %125 = and i64 %124, -134217728
  %126 = bitcast i64 %125 to double
  %127 = fsub double %80, %126
  %128 = fmul double %35, %80
  %129 = fmul double %67, %126
  %130 = fsub double %129, %128
  %131 = fmul double %68, %126
  %132 = fadd double %131, %130
  %133 = bitcast double %128 to i64
  %134 = and i64 %133, -134217728
  %135 = bitcast i64 %134 to double
  %136 = fsub double %128, %135
  %137 = bitcast double %123 to i64
  %138 = and i64 %137, -134217728
  %139 = bitcast i64 %138 to double
  %140 = fsub double %123, %139
  %141 = fmul double %128, %123
  %142 = insertelement <2 x double> undef, double %127, i32 0
  %143 = insertelement <2 x double> %142, double %135, i32 1
  %144 = insertelement <2 x double> undef, double %67, i32 0
  %145 = insertelement <2 x double> %144, double %139, i32 1
  %146 = fmul <2 x double> %143, %145
  %147 = insertelement <2 x double> undef, double %132, i32 0
  %148 = insertelement <2 x double> %147, double %141, i32 1
  %149 = fadd <2 x double> %146, %148
  %150 = fsub <2 x double> %146, %148
  %151 = shufflevector <2 x double> %149, <2 x double> %150, <2 x i32> <i32 0, i32 3>
  %152 = insertelement <2 x double> undef, double %68, i32 0
  %153 = insertelement <2 x double> %152, double %136, i32 1
  %154 = insertelement <2 x double> %142, double %139, i32 1
  %155 = fmul <2 x double> %153, %154
  %156 = fadd <2 x double> %155, %151
  %157 = insertelement <2 x double> %52, double %140, i32 1
  %158 = insertelement <2 x double> undef, double %82, i32 0
  %159 = insertelement <2 x double> %158, double %135, i32 1
  %160 = fmul <2 x double> %157, %159
  %161 = fadd <2 x double> %160, %156
  %162 = insertelement <2 x double> undef, double %64, i32 0
  %163 = insertelement <2 x double> %162, double %136, i32 1
  %164 = insertelement <2 x double> undef, double %80, i32 0
  %165 = insertelement <2 x double> %164, double %140, i32 1
  %166 = fmul <2 x double> %163, %165
  %167 = fadd <2 x double> %166, %161
  %168 = extractelement <2 x double> %167, i32 0
  %169 = fmul double %168, %123
  %170 = extractelement <2 x double> %167, i32 1
  %171 = fadd double %169, %170
  %172 = fadd double %35, %141
  %173 = fsub double %35, %172
  %174 = fadd double %141, %173
  %175 = fadd double %64, %174
  %176 = fadd double %175, %171
  %177 = and i64 %65, 9223372036854775807
  %178 = bitcast i64 %177 to double
  %179 = fcmp olt double %178, 0x16687E92154EF7AC
  %180 = select i1 %179, double %35, double %172
  %181 = select i1 %179, double %64, double %176
  %182 = sitofp i32 %17 to double
  %183 = bitcast double %182 to i64
  %184 = and i64 %183, -134217728
  %185 = bitcast i64 %184 to double
  %186 = fsub double %182, %185
  %187 = fmul double %182, 0x3FF921FB54442D18
  %188 = fmul double %185, 0x3FF921FB50000000
  %189 = fsub double %188, %187
  %190 = fmul double %185, 0x3E5110B460000000
  %191 = fadd double %190, %189
  %192 = fmul double %186, 0x3FF921FB50000000
  %193 = fadd double %192, %191
  %194 = fmul double %186, 0x3E5110B460000000
  %195 = fadd double %194, %193
  %196 = fmul double %182, 0x3C91A62633145C07
  %197 = fadd double %196, %195
  %198 = fadd double %187, %180
  %199 = fsub double %198, %187
  %200 = fsub double %198, %199
  %201 = fsub double %187, %200
  %202 = fsub double %180, %199
  %203 = fadd double %202, %201
  %204 = fadd double %197, %181
  %205 = fadd double %203, %204
  %206 = insertvalue { double, double } undef, double %198, 0
  %207 = insertvalue { double, double } %206, double %205, 1
  ret { double, double } %207
}

; Function Attrs: nounwind uwtable
define double @Sleef_asin_u10(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, %0
  br label %64

; <label>:8:                                      ; preds = %1
  %9 = fsub double 1.000000e+00, %4
  %10 = fmul double %9, 5.000000e-01
  %11 = tail call double @sqrt(double %10) #5
  %12 = bitcast double %11 to i64
  %13 = and i64 %12, -134217728
  %14 = bitcast i64 %13 to double
  %15 = fsub double %11, %14
  %16 = fmul double %11, %11
  %17 = fmul double %14, %14
  %18 = fsub double %17, %16
  %19 = fmul double %15, %14
  %20 = fadd double %19, %18
  %21 = fadd double %19, %20
  %22 = fmul double %15, %15
  %23 = fadd double %22, %21
  %24 = fadd double %10, %16
  %25 = fsub double %24, %10
  %26 = fsub double %24, %25
  %27 = fsub double %10, %26
  %28 = fsub double %16, %25
  %29 = fadd double %28, %27
  %30 = fadd double %29, %23
  %31 = fdiv double 1.000000e+00, %11
  %32 = bitcast double %31 to i64
  %33 = and i64 %32, -134217728
  %34 = bitcast i64 %33 to double
  %35 = fsub double %31, %34
  %36 = fmul double %14, %34
  %37 = fsub double 1.000000e+00, %36
  %38 = fmul double %35, %14
  %39 = fsub double %37, %38
  %40 = fmul double %15, %34
  %41 = fsub double %39, %40
  %42 = fmul double %15, %35
  %43 = fsub double %41, %42
  %44 = fmul double %31, %43
  %45 = bitcast double %24 to i64
  %46 = and i64 %45, -134217728
  %47 = bitcast i64 %46 to double
  %48 = fsub double %24, %47
  %49 = fmul double %31, %24
  %50 = fmul double %34, %47
  %51 = fsub double %50, %49
  %52 = fmul double %48, %34
  %53 = fadd double %52, %51
  %54 = fmul double %35, %47
  %55 = fadd double %54, %53
  %56 = fmul double %35, %48
  %57 = fadd double %56, %55
  %58 = fmul double %24, %44
  %59 = fadd double %57, %58
  %60 = fmul double %31, %30
  %61 = fadd double %60, %59
  %62 = fmul double %49, 5.000000e-01
  %63 = fmul double %61, 5.000000e-01
  br label %64

; <label>:64:                                     ; preds = %8, %6
  %65 = phi double [ %7, %6 ], [ %10, %8 ]
  %66 = phi double [ %4, %6 ], [ %62, %8 ]
  %67 = phi double [ 0.000000e+00, %6 ], [ %63, %8 ]
  %68 = fcmp oeq double %4, 1.000000e+00
  %69 = select i1 %68, double 0.000000e+00, double %66
  %70 = select i1 %68, double 0.000000e+00, double %67
  %71 = fmul double %65, %65
  %72 = fmul double %71, %71
  %73 = fmul double %72, %72
  %74 = insertelement <2 x double> undef, double %65, i32 0
  %75 = shufflevector <2 x double> %74, <2 x double> undef, <2 x i32> zeroinitializer
  %76 = fmul <2 x double> %75, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %77 = fadd <2 x double> %76, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %78 = fmul <2 x double> %75, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %79 = fadd <2 x double> %78, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %80 = insertelement <2 x double> undef, double %71, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> undef, <2 x i32> zeroinitializer
  %82 = fmul <2 x double> %81, %77
  %83 = fadd <2 x double> %79, %82
  %84 = fmul double %65, 0x3F9F1C72C5FD95BA
  %85 = fadd double %84, 0x3FA6DB6DB407C2B3
  %86 = fmul double %65, 0x3FB3333333375CD0
  %87 = fadd double %86, 0x3FC55555555552F4
  %88 = fmul double %71, %85
  %89 = fadd double %87, %88
  %90 = insertelement <2 x double> undef, double %73, i32 0
  %91 = insertelement <2 x double> %90, double %72, i32 1
  %92 = fmul <2 x double> %91, %83
  %93 = extractelement <2 x double> %92, i32 1
  %94 = fadd double %89, %93
  %95 = extractelement <2 x double> %92, i32 0
  %96 = fadd double %95, %94
  %97 = fmul double %65, %69
  %98 = fmul double %97, %96
  %99 = fsub double 0x3FE921FB54442D18, %69
  %100 = fsub double 0x3FE921FB54442D18, %99
  %101 = fsub double %100, %69
  %102 = fadd double %101, 0x3C81A62633145C07
  %103 = fsub double %102, %70
  %104 = fsub double %99, %98
  %105 = fsub double %99, %104
  %106 = fsub double %105, %98
  %107 = fadd double %103, %106
  %108 = fadd double %69, %98
  %109 = fadd double %104, %107
  %110 = fmul double %109, 2.000000e+00
  %111 = select i1 %5, double %108, double %110
  %112 = bitcast double %111 to i64
  %113 = and i64 %2, -9223372036854775808
  %114 = xor i64 %113, %112
  %115 = bitcast i64 %114 to double
  ret double %115
}

; Function Attrs: nounwind uwtable
define double @Sleef_acos_u10(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, %0
  br label %64

; <label>:8:                                      ; preds = %1
  %9 = fsub double 1.000000e+00, %4
  %10 = fmul double %9, 5.000000e-01
  %11 = tail call double @sqrt(double %10) #5
  %12 = bitcast double %11 to i64
  %13 = and i64 %12, -134217728
  %14 = bitcast i64 %13 to double
  %15 = fsub double %11, %14
  %16 = fmul double %11, %11
  %17 = fmul double %14, %14
  %18 = fsub double %17, %16
  %19 = fmul double %15, %14
  %20 = fadd double %19, %18
  %21 = fadd double %19, %20
  %22 = fmul double %15, %15
  %23 = fadd double %22, %21
  %24 = fadd double %10, %16
  %25 = fsub double %24, %10
  %26 = fsub double %24, %25
  %27 = fsub double %10, %26
  %28 = fsub double %16, %25
  %29 = fadd double %28, %27
  %30 = fadd double %29, %23
  %31 = fdiv double 1.000000e+00, %11
  %32 = bitcast double %31 to i64
  %33 = and i64 %32, -134217728
  %34 = bitcast i64 %33 to double
  %35 = fsub double %31, %34
  %36 = fmul double %14, %34
  %37 = fsub double 1.000000e+00, %36
  %38 = fmul double %35, %14
  %39 = fsub double %37, %38
  %40 = fmul double %15, %34
  %41 = fsub double %39, %40
  %42 = fmul double %15, %35
  %43 = fsub double %41, %42
  %44 = fmul double %31, %43
  %45 = bitcast double %24 to i64
  %46 = and i64 %45, -134217728
  %47 = bitcast i64 %46 to double
  %48 = fsub double %24, %47
  %49 = fmul double %31, %24
  %50 = fmul double %34, %47
  %51 = fsub double %50, %49
  %52 = fmul double %48, %34
  %53 = fadd double %52, %51
  %54 = fmul double %35, %47
  %55 = fadd double %54, %53
  %56 = fmul double %35, %48
  %57 = fadd double %56, %55
  %58 = fmul double %24, %44
  %59 = fadd double %57, %58
  %60 = fmul double %31, %30
  %61 = fadd double %60, %59
  %62 = fmul double %49, 5.000000e-01
  %63 = fmul double %61, 5.000000e-01
  br label %64

; <label>:64:                                     ; preds = %8, %6
  %65 = phi double [ %7, %6 ], [ %10, %8 ]
  %66 = phi double [ %4, %6 ], [ %62, %8 ]
  %67 = phi double [ 0.000000e+00, %6 ], [ %63, %8 ]
  %68 = fcmp oeq double %4, 1.000000e+00
  %69 = select i1 %68, double 0.000000e+00, double %66
  %70 = fmul double %65, %65
  %71 = fmul double %70, %70
  %72 = fmul double %71, %71
  %73 = fmul double %65, 0x3FA02FF4C7428A47
  %74 = fadd double %73, 0xBF9032E75CCD4AE8
  %75 = fmul double %65, 0x3F93C0E0817E9742
  %76 = fadd double %75, 0x3F7B0EF96B727E7E
  %77 = fmul double %70, %74
  %78 = fadd double %76, %77
  %79 = fmul double %65, 0x3F88E3FD48D0FB6F
  %80 = fadd double %79, 0x3F8C70DDF81249FC
  %81 = fmul double %65, 0x3F91C6B5042EC6B2
  %82 = fadd double %81, 0x3F96E89F8578B64E
  %83 = fmul double %70, %80
  %84 = fadd double %82, %83
  %85 = fmul double %65, 0x3F9F1C72C5FD95BA
  %86 = fadd double %85, 0x3FA6DB6DB407C2B3
  %87 = fmul double %65, 0x3FB3333333375CD0
  %88 = fadd double %87, 0x3FC55555555552F4
  %89 = fmul double %70, %86
  %90 = fadd double %88, %89
  %91 = fmul double %71, %84
  %92 = fadd double %90, %91
  %93 = fmul double %72, %78
  %94 = fadd double %93, %92
  %95 = fmul double %65, %69
  %96 = fmul double %95, %94
  %97 = bitcast double %69 to i64
  %98 = and i64 %2, -9223372036854775808
  %99 = xor i64 %98, %97
  %100 = bitcast i64 %99 to double
  %101 = bitcast double %96 to i64
  %102 = xor i64 %98, %101
  %103 = bitcast i64 %102 to double
  %104 = fadd double %100, %103
  %105 = fsub double %100, %104
  %106 = fadd double %105, %103
  %107 = fsub double 0x3FF921FB54442D18, %104
  %108 = fsub double 0x3FF921FB54442D18, %107
  %109 = fsub double %108, %104
  %110 = fadd double %109, 0x3C91A62633145C07
  %111 = fsub double %110, %106
  %112 = fadd double %69, %96
  br i1 %5, label %127, label %113

; <label>:113:                                    ; preds = %64
  %114 = fsub double %69, %112
  %115 = fadd double %96, %114
  %116 = select i1 %68, double 0.000000e+00, double %67
  %117 = fadd double %116, %115
  %118 = fmul double %112, 2.000000e+00
  %119 = fmul double %117, 2.000000e+00
  %120 = fcmp olt double %0, 0.000000e+00
  br i1 %120, label %121, label %127

; <label>:121:                                    ; preds = %113
  %122 = fsub double 0x400921FB54442D18, %118
  %123 = fsub double 0x400921FB54442D18, %122
  %124 = fsub double %123, %118
  %125 = fadd double %124, 0x3CA1A62633145C07
  %126 = fsub double %125, %119
  br label %127

; <label>:127:                                    ; preds = %64, %113, %121
  %128 = phi double [ %122, %121 ], [ %118, %113 ], [ %107, %64 ]
  %129 = phi double [ %126, %121 ], [ %119, %113 ], [ %111, %64 ]
  %130 = fadd double %128, %129
  ret double %130
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = tail call fastcc { double, double } @atan2k_u1(double %4, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00)
  %6 = extractvalue { double, double } %5, 0
  %7 = extractvalue { double, double } %5, 1
  %8 = fadd double %6, %7
  %9 = fcmp une double %0, 0x7FF0000000000000
  %10 = fcmp une double %0, 0xFFF0000000000000
  %11 = and i1 %10, %9
  %12 = bitcast double %8 to i64
  %13 = select i1 %11, i64 %12, i64 4609753056924675352
  %14 = and i64 %2, -9223372036854775808
  %15 = xor i64 %13, %14
  %16 = bitcast i64 %15 to double
  ret double %16
}

; Function Attrs: nounwind uwtable
define double @Sleef_sin_u35(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %18

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FD45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x400921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0x3CA1A62633145C07
  %17 = fsub double %15, %16
  br label %92

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt double %5, 1.000000e+14
  br i1 %19, label %20, label %47

; <label>:20:                                     ; preds = %18
  %21 = fmul double %0, 0x3E545F306DC9C883
  %22 = fptosi double %21 to i32
  %23 = sitofp i32 %22 to double
  %24 = fmul double %23, 0x4170000000000000
  %25 = fmul double %0, 0x3FD45F306DC9C883
  %26 = fsub double %25, %24
  %27 = fcmp olt double %26, 0.000000e+00
  %28 = select i1 %27, double -5.000000e-01, double 5.000000e-01
  %29 = fadd double %26, %28
  %30 = fptosi double %29 to i32
  %31 = fmul double %24, 0x400921FB50000000
  %32 = fsub double %0, %31
  %33 = sitofp i32 %30 to double
  %34 = fmul double %33, 0x400921FB50000000
  %35 = fsub double %32, %34
  %36 = fmul double %24, 0x3E6110B460000000
  %37 = fsub double %35, %36
  %38 = fmul double %33, 0x3E6110B460000000
  %39 = fsub double %37, %38
  %40 = fmul double %24, 0x3CA1A62630000000
  %41 = fsub double %39, %40
  %42 = fmul double %33, 0x3CA1A62630000000
  %43 = fsub double %41, %42
  %44 = fadd double %24, %33
  %45 = fmul double %44, 0x3AF8A2E03707344A
  %46 = fsub double %43, %45
  br label %92

; <label>:47:                                     ; preds = %18
  %48 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %49 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %50 = load i32, i32* %49, align 8, !tbaa !2
  %51 = shl i32 %50, 1
  %52 = and i32 %51, 6
  %53 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %54 = load double, double* %53, align 8, !tbaa !9
  %55 = fcmp ogt double %54, 0.000000e+00
  %56 = zext i1 %55 to i32
  %57 = or i32 %52, %56
  %58 = add nuw nsw i32 %57, 1
  %59 = lshr i32 %58, 2
  %60 = and i32 %50, 1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %79, label %62

; <label>:62:                                     ; preds = %47
  %63 = bitcast double %54 to i64
  %64 = and i64 %63, -9223372036854775808
  %65 = xor i64 %64, -4613618979930100456
  %66 = bitcast i64 %65 to double
  %67 = xor i64 %64, -4858919839960114169
  %68 = bitcast i64 %67 to double
  %69 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %70 = load double, double* %69, align 8
  %71 = fadd double %54, %66
  %72 = fsub double %71, %54
  %73 = fsub double %71, %72
  %74 = fsub double %54, %73
  %75 = fsub double %66, %72
  %76 = fadd double %75, %74
  %77 = fadd double %70, %68
  %78 = fadd double %76, %77
  store double %71, double* %53, align 8
  store double %78, double* %69, align 8
  br label %79

; <label>:79:                                     ; preds = %47, %62
  %80 = phi double [ %54, %47 ], [ %71, %62 ]
  %81 = fcmp une double %0, 0x7FF0000000000000
  %82 = fcmp une double %0, 0xFFF0000000000000
  %83 = and i1 %82, %81
  br i1 %83, label %84, label %89

; <label>:84:                                     ; preds = %79
  %85 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %86 = load double, double* %85, align 8, !tbaa !10
  %87 = fadd double %86, %80
  %88 = fcmp ord double %0, 0.000000e+00
  br i1 %88, label %90, label %89

; <label>:89:                                     ; preds = %84, %79
  br label %90

; <label>:90:                                     ; preds = %84, %89
  %91 = phi double [ 0x7FF8000000000000, %89 ], [ %87, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #5
  br label %92

; <label>:92:                                     ; preds = %20, %90, %7
  %93 = phi i32 [ %12, %7 ], [ %30, %20 ], [ %59, %90 ]
  %94 = phi double [ %17, %7 ], [ %46, %20 ], [ %91, %90 ]
  %95 = fmul double %94, %94
  %96 = and i32 %93, 1
  %97 = icmp eq i32 %96, 0
  %98 = fsub double -0.000000e+00, %94
  %99 = select i1 %97, double %94, double %98
  %100 = fmul double %95, %95
  %101 = fmul double %100, %100
  %102 = fmul double %95, 0x3C62622B22D526BE
  %103 = fsub double 0x3CE94FA618796592, %102
  %104 = fmul double %95, 0x3D6AE7EA531357BF
  %105 = fsub double 0x3DE6124601C23966, %104
  %106 = fmul double %100, %103
  %107 = fadd double %105, %106
  %108 = fmul double %95, 0x3E5AE64567CB5786
  %109 = fsub double 0x3EC71DE3A5568A50, %108
  %110 = fmul double %95, 0x3F2A01A01A019FC7
  %111 = fsub double 0x3F8111111111110F, %110
  %112 = fmul double %100, %109
  %113 = fadd double %111, %112
  %114 = fmul double %101, %107
  %115 = fadd double %113, %114
  %116 = fmul double %95, %115
  %117 = fadd double %116, 0xBFC5555555555555
  %118 = fmul double %99, %117
  %119 = fmul double %95, %118
  %120 = fadd double %99, %119
  %121 = icmp eq i64 %3, -9223372036854775808
  %122 = select i1 %121, double %0, double %120
  ret double %122
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @rempi(%struct.ddi_t* noalias nocapture, double) unnamed_addr #4 {
  %3 = bitcast double %1 to i64
  %4 = lshr i64 %3, 52
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 2047
  %7 = icmp ugt i32 %6, 1723
  %8 = select i1 %7, i64 -288230376151711744, i64 0
  %9 = add nsw i64 %8, %3
  %10 = bitcast i64 %9 to double
  %11 = icmp ult i32 %6, 1078
  %12 = shl nuw nsw i32 %6, 2
  %13 = add nsw i32 %12, -4312
  %14 = select i1 %11, i32 0, i32 %13
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !11
  %18 = and i64 %9, -134217728
  %19 = bitcast i64 %18 to double
  %20 = fsub double %10, %19
  %21 = bitcast double %17 to i64
  %22 = and i64 %21, -134217728
  %23 = bitcast i64 %22 to double
  %24 = fsub double %17, %23
  %25 = fmul double %17, %10
  %26 = fmul double %19, %23
  %27 = fsub double %26, %25
  %28 = fmul double %20, %23
  %29 = fadd double %28, %27
  %30 = fmul double %24, %19
  %31 = fadd double %30, %29
  %32 = fmul double %20, %24
  %33 = fadd double %32, %31
  %34 = bitcast double %25 to i64
  %35 = and i64 %34, -9223372036854775808
  %36 = or i64 %35, 4841369599423283200
  %37 = bitcast i64 %36 to double
  %38 = fmul double %25, 4.000000e+00
  %39 = bitcast double %38 to i64
  %40 = and i64 %39, 9223372036854775807
  %41 = bitcast i64 %40 to double
  %42 = fcmp ogt double %41, 0x4330000000000000
  br i1 %42, label %49, label %43

; <label>:43:                                     ; preds = %2
  %44 = fadd double %38, %37
  %45 = fsub double %44, %37
  %46 = bitcast double %45 to i64
  %47 = or i64 %35, %46
  %48 = bitcast i64 %47 to double
  br label %49

; <label>:49:                                     ; preds = %43, %2
  %50 = phi double [ %48, %43 ], [ %38, %2 ]
  %51 = and i64 %34, 9223372036854775807
  %52 = bitcast i64 %51 to double
  %53 = fcmp ogt double %52, 0x4330000000000000
  br i1 %53, label %61, label %54

; <label>:54:                                     ; preds = %49
  %55 = fadd double %25, %37
  %56 = fsub double %55, %37
  %57 = bitcast double %56 to i64
  %58 = or i64 %35, %57
  %59 = bitcast i64 %58 to double
  %60 = fmul double %59, 4.000000e+00
  br label %61

; <label>:61:                                     ; preds = %49, %54
  %62 = phi double [ %38, %49 ], [ %60, %54 ]
  %63 = fmul double %50, 2.500000e-01
  %64 = fsub double %25, %63
  %65 = fsub double %50, %62
  %66 = fptosi double %65 to i32
  %67 = fadd double %33, %64
  %68 = fsub double %64, %67
  %69 = fadd double %33, %68
  %70 = or i32 %14, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !11
  %74 = bitcast double %73 to i64
  %75 = and i64 %74, -134217728
  %76 = bitcast i64 %75 to double
  %77 = fsub double %73, %76
  %78 = fmul double %73, %10
  %79 = fmul double %19, %76
  %80 = fsub double %79, %78
  %81 = fmul double %20, %76
  %82 = fadd double %81, %80
  %83 = fmul double %77, %19
  %84 = fadd double %83, %82
  %85 = fmul double %20, %77
  %86 = fadd double %85, %84
  %87 = fadd double %67, %78
  %88 = fsub double %87, %67
  %89 = fsub double %87, %88
  %90 = fsub double %67, %89
  %91 = fsub double %78, %88
  %92 = fadd double %91, %90
  %93 = fadd double %69, %86
  %94 = fadd double %92, %93
  %95 = bitcast double %87 to i64
  %96 = and i64 %95, -9223372036854775808
  %97 = or i64 %96, 4841369599423283200
  %98 = bitcast i64 %97 to double
  %99 = fmul double %87, 4.000000e+00
  %100 = bitcast double %99 to i64
  %101 = and i64 %100, 9223372036854775807
  %102 = bitcast i64 %101 to double
  %103 = fcmp ogt double %102, 0x4330000000000000
  br i1 %103, label %110, label %104

; <label>:104:                                    ; preds = %61
  %105 = fadd double %99, %98
  %106 = fsub double %105, %98
  %107 = bitcast double %106 to i64
  %108 = or i64 %96, %107
  %109 = bitcast i64 %108 to double
  br label %110

; <label>:110:                                    ; preds = %104, %61
  %111 = phi double [ %109, %104 ], [ %99, %61 ]
  %112 = and i64 %95, 9223372036854775807
  %113 = bitcast i64 %112 to double
  %114 = fcmp ogt double %113, 0x4330000000000000
  br i1 %114, label %122, label %115

; <label>:115:                                    ; preds = %110
  %116 = fadd double %87, %98
  %117 = fsub double %116, %98
  %118 = bitcast double %117 to i64
  %119 = or i64 %96, %118
  %120 = bitcast i64 %119 to double
  %121 = fmul double %120, 4.000000e+00
  br label %122

; <label>:122:                                    ; preds = %110, %115
  %123 = phi double [ %99, %110 ], [ %121, %115 ]
  %124 = fmul double %111, 2.500000e-01
  %125 = fsub double %87, %124
  %126 = fsub double %111, %123
  %127 = fptosi double %126 to i32
  %128 = add nsw i32 %127, %66
  %129 = fadd double %94, %125
  %130 = fsub double %125, %129
  %131 = fadd double %94, %130
  %132 = or i32 %14, 2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %133
  %135 = load double, double* %134, align 8, !tbaa !11
  %136 = or i32 %14, 3
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %137
  %139 = load double, double* %138, align 8, !tbaa !11
  %140 = bitcast double %135 to i64
  %141 = and i64 %140, -134217728
  %142 = bitcast i64 %141 to double
  %143 = fsub double %135, %142
  %144 = fmul double %135, %10
  %145 = fmul double %19, %142
  %146 = fsub double %145, %144
  %147 = fmul double %143, %19
  %148 = fadd double %147, %146
  %149 = fmul double %20, %142
  %150 = fadd double %149, %148
  %151 = fmul double %20, %143
  %152 = fadd double %151, %150
  %153 = fmul double %139, %10
  %154 = fadd double %153, %152
  %155 = fadd double %129, %144
  %156 = fsub double %155, %129
  %157 = fsub double %155, %156
  %158 = fsub double %129, %157
  %159 = fsub double %144, %156
  %160 = fadd double %159, %158
  %161 = fadd double %131, %154
  %162 = fadd double %160, %161
  %163 = fadd double %155, %162
  %164 = fsub double %155, %163
  %165 = fadd double %162, %164
  %166 = bitcast double %163 to i64
  %167 = and i64 %166, -134217728
  %168 = bitcast i64 %167 to double
  %169 = fsub double %163, %168
  %170 = fmul double %163, 0x401921FB54442D18
  %171 = fmul double %168, 0x401921FB50000000
  %172 = fsub double %171, %170
  %173 = fmul double %169, 0x401921FB50000000
  %174 = fadd double %173, %172
  %175 = fmul double %168, 0x3E7110B460000000
  %176 = fadd double %175, %174
  %177 = fmul double %169, 0x3E7110B460000000
  %178 = fadd double %177, %176
  %179 = fmul double %163, 0x3CB1A62633145C07
  %180 = fadd double %179, %178
  %181 = fmul double %165, 0x401921FB54442D18
  %182 = fadd double %181, %180
  %183 = and i64 %9, 9223372036854775807
  %184 = bitcast i64 %183 to double
  %185 = fcmp olt double %184, 0x3FE6666666666666
  %186 = select i1 %185, double 0.000000e+00, double %182
  %187 = select i1 %185, double %10, double %170
  %188 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %0, i64 0, i32 0, i32 0
  store double %187, double* %188, align 8
  %189 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %0, i64 0, i32 0, i32 1
  store double %186, double* %189, align 8
  %190 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %0, i64 0, i32 1
  store i32 %128, i32* %190, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define double @Sleef_sin_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %20

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FD45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x400921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0xBCA1A62633145C07
  %17 = fadd double %16, %15
  %18 = fsub double %15, %17
  %19 = fadd double %16, %18
  br label %125

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt double %5, 1.000000e+14
  br i1 %21, label %22, label %78

; <label>:22:                                     ; preds = %20
  %23 = fmul double %0, 0x3E545F306DC9C883
  %24 = fptosi double %23 to i32
  %25 = sitofp i32 %24 to double
  %26 = fmul double %25, 0x4170000000000000
  %27 = fmul double %0, 0x3FD45F306DC9C883
  %28 = fsub double %27, %26
  %29 = fcmp olt double %28, 0.000000e+00
  %30 = select i1 %29, double -5.000000e-01, double 5.000000e-01
  %31 = fadd double %28, %30
  %32 = fptosi double %31 to i32
  %33 = fmul double %26, 0x400921FB50000000
  %34 = fsub double %0, %33
  %35 = sitofp i32 %32 to double
  %36 = fmul double %35, 0xC00921FB50000000
  %37 = fadd double %34, %36
  %38 = fsub double %34, %37
  %39 = fadd double %36, %38
  %40 = fmul double %26, 0xBE6110B460000000
  %41 = fadd double %40, %37
  %42 = fsub double %41, %37
  %43 = fsub double %41, %42
  %44 = fsub double %37, %43
  %45 = fsub double %40, %42
  %46 = fadd double %45, %44
  %47 = fadd double %39, %46
  %48 = fmul double %35, 0xBE6110B460000000
  %49 = fadd double %48, %41
  %50 = fsub double %49, %41
  %51 = fsub double %49, %50
  %52 = fsub double %41, %51
  %53 = fsub double %48, %50
  %54 = fadd double %53, %52
  %55 = fadd double %54, %47
  %56 = fmul double %26, 0xBCA1A62630000000
  %57 = fadd double %56, %49
  %58 = fsub double %57, %49
  %59 = fsub double %57, %58
  %60 = fsub double %49, %59
  %61 = fsub double %56, %58
  %62 = fadd double %61, %60
  %63 = fadd double %62, %55
  %64 = fmul double %35, 0xBCA1A62630000000
  %65 = fadd double %64, %57
  %66 = fsub double %65, %57
  %67 = fsub double %65, %66
  %68 = fsub double %57, %67
  %69 = fsub double %64, %66
  %70 = fadd double %69, %68
  %71 = fadd double %70, %63
  %72 = fadd double %26, %35
  %73 = fmul double %72, 0xBAF8A2E03707344A
  %74 = fadd double %73, %65
  %75 = fsub double %65, %74
  %76 = fadd double %73, %75
  %77 = fadd double %76, %71
  br label %125

; <label>:78:                                     ; preds = %20
  %79 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %80 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %81 = load i32, i32* %80, align 8, !tbaa !2
  %82 = shl i32 %81, 1
  %83 = and i32 %82, 6
  %84 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %85 = load double, double* %84, align 8, !tbaa !9
  %86 = fcmp ogt double %85, 0.000000e+00
  %87 = zext i1 %86 to i32
  %88 = or i32 %83, %87
  %89 = add nuw nsw i32 %88, 1
  %90 = lshr i32 %89, 2
  %91 = and i32 %81, 1
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %96

; <label>:93:                                     ; preds = %78
  %94 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %95 = load double, double* %94, align 8
  br label %113

; <label>:96:                                     ; preds = %78
  %97 = bitcast double %85 to i64
  %98 = and i64 %97, -9223372036854775808
  %99 = xor i64 %98, -4613618979930100456
  %100 = bitcast i64 %99 to double
  %101 = xor i64 %98, -4858919839960114169
  %102 = bitcast i64 %101 to double
  %103 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %104 = load double, double* %103, align 8
  %105 = fadd double %85, %100
  %106 = fsub double %105, %85
  %107 = fsub double %105, %106
  %108 = fsub double %85, %107
  %109 = fsub double %100, %106
  %110 = fadd double %109, %108
  %111 = fadd double %104, %102
  %112 = fadd double %110, %111
  store double %105, double* %84, align 8
  store double %112, double* %103, align 8
  br label %113

; <label>:113:                                    ; preds = %93, %96
  %114 = phi double [ %95, %93 ], [ %112, %96 ]
  %115 = phi double [ %85, %93 ], [ %105, %96 ]
  %116 = fadd double %115, %114
  %117 = fsub double %115, %116
  %118 = fadd double %114, %117
  %119 = fcmp une double %0, 0x7FF0000000000000
  %120 = fcmp une double %0, 0xFFF0000000000000
  %121 = and i1 %120, %119
  %122 = fcmp ord double %0, 0.000000e+00
  %123 = and i1 %122, %121
  %124 = select i1 %123, double %116, double 0x7FF8000000000000
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #5
  br label %125

; <label>:125:                                    ; preds = %22, %113, %7
  %126 = phi i32 [ %12, %7 ], [ %32, %22 ], [ %90, %113 ]
  %127 = phi double [ %17, %7 ], [ %74, %22 ], [ %124, %113 ]
  %128 = phi double [ %19, %7 ], [ %77, %22 ], [ %118, %113 ]
  %129 = bitcast double %127 to i64
  %130 = and i64 %129, -134217728
  %131 = bitcast i64 %130 to double
  %132 = fsub double %127, %131
  %133 = fmul double %127, %127
  %134 = fmul double %131, %131
  %135 = fsub double %134, %133
  %136 = fadd double %131, %131
  %137 = fmul double %136, %132
  %138 = fadd double %135, %137
  %139 = fmul double %132, %132
  %140 = fadd double %139, %138
  %141 = fadd double %128, %128
  %142 = fmul double %127, %141
  %143 = fadd double %142, %140
  %144 = fmul double %133, %133
  %145 = fmul double %144, %144
  %146 = fmul double %133, 0x3CE8811A03B2B11D
  %147 = fadd double %146, 0xBD6AE422BC319350
  %148 = fmul double %133, 0x3DE6123C74705F67
  %149 = fadd double %148, 0xBE5AE6454BAA2959
  %150 = fmul double %133, 0x3EC71DE3A525FBED
  %151 = fadd double %150, 0xBF2A01A01A014225
  %152 = fmul double %144, %149
  %153 = fadd double %151, %152
  %154 = fmul double %145, %147
  %155 = fadd double %154, %153
  %156 = fmul double %133, %155
  %157 = fadd double %156, 0x3F811111111110B9
  %158 = fmul double %133, %157
  %159 = fadd double %158, 0xBFC5555555555555
  %160 = fsub double 0xBFC5555555555555, %159
  %161 = fadd double %158, %160
  %162 = bitcast double %159 to i64
  %163 = and i64 %162, -134217728
  %164 = bitcast i64 %163 to double
  %165 = fsub double %159, %164
  %166 = bitcast double %133 to i64
  %167 = and i64 %166, -134217728
  %168 = bitcast i64 %167 to double
  %169 = fsub double %133, %168
  %170 = fmul double %133, %159
  %171 = fmul double %168, %164
  %172 = fsub double %171, %170
  %173 = fmul double %165, %168
  %174 = fadd double %173, %172
  %175 = fmul double %169, %164
  %176 = fadd double %175, %174
  %177 = fmul double %169, %165
  %178 = fadd double %177, %176
  %179 = fmul double %143, %159
  %180 = fadd double %179, %178
  %181 = fmul double %133, %161
  %182 = fadd double %181, %180
  %183 = fadd double %170, 1.000000e+00
  %184 = fsub double 1.000000e+00, %183
  %185 = fadd double %170, %184
  %186 = fadd double %185, %182
  %187 = bitcast double %183 to i64
  %188 = and i64 %187, -134217728
  %189 = bitcast i64 %188 to double
  %190 = fsub double %183, %189
  %191 = fmul double %128, %189
  %192 = fmul double %186, %131
  %193 = fadd double %191, %192
  %194 = fmul double %132, %190
  %195 = fadd double %194, %193
  %196 = fmul double %190, %131
  %197 = fadd double %196, %195
  %198 = fmul double %132, %189
  %199 = fadd double %198, %197
  %200 = fmul double %131, %189
  %201 = fadd double %200, %199
  %202 = and i32 %126, 1
  %203 = icmp eq i32 %202, 0
  %204 = fsub double -0.000000e+00, %201
  %205 = select i1 %203, double %201, double %204
  %206 = icmp eq i64 %3, -9223372036854775808
  %207 = select i1 %206, double %0, double %205
  ret double %207
}

; Function Attrs: nounwind uwtable
define double @Sleef_cos_u35(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %21

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FD45F306DC9C883
  %9 = fadd double %8, -5.000000e-01
  %10 = fcmp olt double %9, 0.000000e+00
  %11 = select i1 %10, double -5.000000e-01, double 5.000000e-01
  %12 = fadd double %9, %11
  %13 = fptosi double %12 to i32
  %14 = shl i32 %13, 1
  %15 = or i32 %14, 1
  %16 = sitofp i32 %15 to double
  %17 = fmul double %16, 0x3FF921FB54442D18
  %18 = fsub double %0, %17
  %19 = fmul double %16, 0x3C91A62633145C07
  %20 = fsub double %18, %19
  br label %99

; <label>:21:                                     ; preds = %1
  %22 = fcmp olt double %5, 1.000000e+14
  br i1 %22, label %23, label %55

; <label>:23:                                     ; preds = %21
  %24 = fmul double %0, 0x3E645F306DC9C883
  %25 = fadd double %24, 0xBE545F306DC9C883
  %26 = fptosi double %25 to i32
  %27 = sitofp i32 %26 to double
  %28 = fmul double %0, 0x3FD45F306DC9C883
  %29 = fadd double %28, -5.000000e-01
  %30 = fmul double %27, 0x4160000000000000
  %31 = fsub double %29, %30
  %32 = fcmp olt double %31, 0.000000e+00
  %33 = select i1 %32, double -5.000000e-01, double 5.000000e-01
  %34 = fadd double %31, %33
  %35 = fptosi double %34 to i32
  %36 = shl i32 %35, 1
  %37 = or i32 %36, 1
  %38 = fmul double %27, 0x4170000000000000
  %39 = fmul double %38, 0x3FF921FB50000000
  %40 = fsub double %0, %39
  %41 = sitofp i32 %37 to double
  %42 = fmul double %41, 0x3FF921FB50000000
  %43 = fsub double %40, %42
  %44 = fmul double %38, 0x3E5110B460000000
  %45 = fsub double %43, %44
  %46 = fmul double %41, 0x3E5110B460000000
  %47 = fsub double %45, %46
  %48 = fmul double %38, 0x3C91A62630000000
  %49 = fsub double %47, %48
  %50 = fmul double %41, 0x3C91A62630000000
  %51 = fsub double %49, %50
  %52 = fadd double %38, %41
  %53 = fmul double %52, 0x3AE8A2E03707344A
  %54 = fsub double %51, %53
  br label %99

; <label>:55:                                     ; preds = %21
  %56 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %57 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %58 = load i32, i32* %57, align 8, !tbaa !2
  %59 = shl i32 %58, 1
  %60 = and i32 %59, 6
  %61 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %62 = load double, double* %61, align 8, !tbaa !9
  %63 = fcmp ogt double %62, 0.000000e+00
  %64 = zext i1 %63 to i32
  %65 = or i32 %60, %64
  %66 = add nuw nsw i32 %65, 7
  %67 = lshr i32 %66, 1
  %68 = and i32 %58, 1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %86

; <label>:70:                                     ; preds = %55
  %71 = select i1 %63, i64 0, i64 -9223372036854775808
  %72 = xor i64 %71, -4613618979930100456
  %73 = bitcast i64 %72 to double
  %74 = xor i64 %71, -4858919839960114169
  %75 = bitcast i64 %74 to double
  %76 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %77 = load double, double* %76, align 8
  %78 = fadd double %62, %73
  %79 = fsub double %78, %62
  %80 = fsub double %78, %79
  %81 = fsub double %62, %80
  %82 = fsub double %73, %79
  %83 = fadd double %82, %81
  %84 = fadd double %77, %75
  %85 = fadd double %83, %84
  store double %78, double* %61, align 8
  store double %85, double* %76, align 8
  br label %86

; <label>:86:                                     ; preds = %70, %55
  %87 = phi double [ %78, %70 ], [ %62, %55 ]
  %88 = fcmp une double %0, 0x7FF0000000000000
  %89 = fcmp une double %0, 0xFFF0000000000000
  %90 = and i1 %89, %88
  br i1 %90, label %91, label %96

; <label>:91:                                     ; preds = %86
  %92 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %93 = load double, double* %92, align 8, !tbaa !10
  %94 = fadd double %93, %87
  %95 = fcmp ord double %0, 0.000000e+00
  br i1 %95, label %97, label %96

; <label>:96:                                     ; preds = %91, %86
  br label %97

; <label>:97:                                     ; preds = %91, %96
  %98 = phi double [ 0x7FF8000000000000, %96 ], [ %94, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #5
  br label %99

; <label>:99:                                     ; preds = %23, %97, %7
  %100 = phi i32 [ %15, %7 ], [ %37, %23 ], [ %67, %97 ]
  %101 = phi double [ %20, %7 ], [ %54, %23 ], [ %98, %97 ]
  %102 = fmul double %101, %101
  %103 = and i32 %100, 2
  %104 = icmp eq i32 %103, 0
  %105 = fsub double -0.000000e+00, %101
  %106 = select i1 %104, double %105, double %101
  %107 = fmul double %102, %102
  %108 = fmul double %107, %107
  %109 = fmul double %102, 0x3C62622B22D526BE
  %110 = fsub double 0x3CE94FA618796592, %109
  %111 = fmul double %102, 0x3D6AE7EA531357BF
  %112 = fsub double 0x3DE6124601C23966, %111
  %113 = fmul double %107, %110
  %114 = fadd double %112, %113
  %115 = fmul double %102, 0x3E5AE64567CB5786
  %116 = fsub double 0x3EC71DE3A5568A50, %115
  %117 = fmul double %102, 0x3F2A01A01A019FC7
  %118 = fsub double 0x3F8111111111110F, %117
  %119 = fmul double %107, %116
  %120 = fadd double %118, %119
  %121 = fmul double %108, %114
  %122 = fadd double %120, %121
  %123 = fmul double %102, %122
  %124 = fadd double %123, 0xBFC5555555555555
  %125 = fmul double %106, %124
  %126 = fmul double %102, %125
  %127 = fadd double %106, %126
  ret double %127
}

; Function Attrs: nounwind uwtable
define double @Sleef_cos_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %29

; <label>:7:                                      ; preds = %1
  %8 = fmul double %5, 0x3FD45F306DC9C883
  %9 = fadd double %8, -5.000000e-01
  %10 = fcmp olt double %9, 0.000000e+00
  %11 = select i1 %10, double -5.000000e-01, double 5.000000e-01
  %12 = fadd double %9, %11
  %13 = fptosi double %12 to i32
  %14 = shl i32 %13, 1
  %15 = or i32 %14, 1
  %16 = sitofp i32 %15 to double
  %17 = fmul double %16, 0xBFF921FB54442D18
  %18 = fadd double %17, %5
  %19 = fsub double %18, %5
  %20 = fsub double %18, %19
  %21 = fsub double %5, %20
  %22 = fsub double %17, %19
  %23 = fadd double %22, %21
  %24 = fmul double %16, 0xBC91A62633145C07
  %25 = fadd double %24, %18
  %26 = fsub double %18, %25
  %27 = fadd double %24, %26
  %28 = fadd double %27, %23
  br label %141

; <label>:29:                                     ; preds = %1
  %30 = fcmp olt double %5, 1.000000e+14
  br i1 %30, label %31, label %95

; <label>:31:                                     ; preds = %29
  %32 = fmul double %5, 0x3E645F306DC9C883
  %33 = fadd double %32, 0xBE545F306DC9C883
  %34 = fptosi double %33 to i32
  %35 = sitofp i32 %34 to double
  %36 = fmul double %5, 0x3FD45F306DC9C883
  %37 = fadd double %36, -5.000000e-01
  %38 = fmul double %35, 0x4160000000000000
  %39 = fsub double %37, %38
  %40 = fcmp olt double %39, 0.000000e+00
  %41 = select i1 %40, double -5.000000e-01, double 5.000000e-01
  %42 = fadd double %39, %41
  %43 = fptosi double %42 to i32
  %44 = shl i32 %43, 1
  %45 = or i32 %44, 1
  %46 = fmul double %35, 0x4170000000000000
  %47 = fmul double %46, 0x3FF921FB50000000
  %48 = fsub double %5, %47
  %49 = sitofp i32 %45 to double
  %50 = fmul double %49, 0xBFF921FB50000000
  %51 = fadd double %48, %50
  %52 = fsub double %51, %48
  %53 = fsub double %51, %52
  %54 = fsub double %48, %53
  %55 = fsub double %50, %52
  %56 = fadd double %55, %54
  %57 = fmul double %46, 0xBE5110B460000000
  %58 = fadd double %57, %51
  %59 = fsub double %58, %51
  %60 = fsub double %58, %59
  %61 = fsub double %51, %60
  %62 = fsub double %57, %59
  %63 = fadd double %62, %61
  %64 = fadd double %56, %63
  %65 = fmul double %49, 0xBE5110B460000000
  %66 = fadd double %65, %58
  %67 = fsub double %66, %58
  %68 = fsub double %66, %67
  %69 = fsub double %58, %68
  %70 = fsub double %65, %67
  %71 = fadd double %70, %69
  %72 = fadd double %71, %64
  %73 = fmul double %46, 0xBC91A62630000000
  %74 = fadd double %73, %66
  %75 = fsub double %74, %66
  %76 = fsub double %74, %75
  %77 = fsub double %66, %76
  %78 = fsub double %73, %75
  %79 = fadd double %78, %77
  %80 = fadd double %79, %72
  %81 = fmul double %49, 0xBC91A62630000000
  %82 = fadd double %81, %74
  %83 = fsub double %82, %74
  %84 = fsub double %82, %83
  %85 = fsub double %74, %84
  %86 = fsub double %81, %83
  %87 = fadd double %86, %85
  %88 = fadd double %87, %80
  %89 = fadd double %46, %49
  %90 = fmul double %89, 0xBAE8A2E03707344A
  %91 = fadd double %90, %82
  %92 = fsub double %82, %91
  %93 = fadd double %90, %92
  %94 = fadd double %93, %88
  br label %141

; <label>:95:                                     ; preds = %29
  %96 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %96) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %5)
  %97 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %98 = load i32, i32* %97, align 8, !tbaa !2
  %99 = shl i32 %98, 1
  %100 = and i32 %99, 6
  %101 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %102 = load double, double* %101, align 8, !tbaa !9
  %103 = fcmp ogt double %102, 0.000000e+00
  %104 = zext i1 %103 to i32
  %105 = or i32 %100, %104
  %106 = add nuw nsw i32 %105, 7
  %107 = lshr i32 %106, 1
  %108 = and i32 %98, 1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

; <label>:110:                                    ; preds = %95
  %111 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %112 = load double, double* %111, align 8
  br label %129

; <label>:113:                                    ; preds = %95
  %114 = select i1 %103, i64 0, i64 -9223372036854775808
  %115 = xor i64 %114, -4613618979930100456
  %116 = bitcast i64 %115 to double
  %117 = xor i64 %114, -4858919839960114169
  %118 = bitcast i64 %117 to double
  %119 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %120 = load double, double* %119, align 8
  %121 = fadd double %102, %116
  %122 = fsub double %121, %102
  %123 = fsub double %121, %122
  %124 = fsub double %102, %123
  %125 = fsub double %116, %122
  %126 = fadd double %125, %124
  %127 = fadd double %120, %118
  %128 = fadd double %126, %127
  store double %121, double* %101, align 8
  store double %128, double* %119, align 8
  br label %129

; <label>:129:                                    ; preds = %110, %113
  %130 = phi double [ %128, %113 ], [ %112, %110 ]
  %131 = phi double [ %121, %113 ], [ %102, %110 ]
  %132 = fadd double %131, %130
  %133 = fsub double %131, %132
  %134 = fadd double %130, %133
  %135 = fcmp une double %5, 0x7FF0000000000000
  %136 = fcmp une double %5, 0xFFF0000000000000
  %137 = and i1 %136, %135
  %138 = fcmp ord double %5, 0.000000e+00
  %139 = and i1 %138, %137
  %140 = select i1 %139, double %132, double 0x7FF8000000000000
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %96) #5
  br label %141

; <label>:141:                                    ; preds = %31, %129, %7
  %142 = phi i32 [ %15, %7 ], [ %45, %31 ], [ %107, %129 ]
  %143 = phi double [ %25, %7 ], [ %91, %31 ], [ %140, %129 ]
  %144 = phi double [ %28, %7 ], [ %94, %31 ], [ %134, %129 ]
  %145 = bitcast double %143 to i64
  %146 = and i64 %145, -134217728
  %147 = bitcast i64 %146 to double
  %148 = fsub double %143, %147
  %149 = fmul double %143, %143
  %150 = fmul double %147, %147
  %151 = fsub double %150, %149
  %152 = fadd double %147, %147
  %153 = fmul double %152, %148
  %154 = fadd double %151, %153
  %155 = fmul double %148, %148
  %156 = fadd double %155, %154
  %157 = fadd double %144, %144
  %158 = fmul double %143, %157
  %159 = fadd double %158, %156
  %160 = fmul double %149, %149
  %161 = fmul double %160, %160
  %162 = fmul double %149, 0x3CE8811A03B2B11D
  %163 = fadd double %162, 0xBD6AE422BC319350
  %164 = fmul double %149, 0x3DE6123C74705F67
  %165 = fadd double %164, 0xBE5AE6454BAA2959
  %166 = fmul double %149, 0x3EC71DE3A525FBED
  %167 = fadd double %166, 0xBF2A01A01A014225
  %168 = fmul double %160, %165
  %169 = fadd double %167, %168
  %170 = fmul double %161, %163
  %171 = fadd double %170, %169
  %172 = fmul double %149, %171
  %173 = fadd double %172, 0x3F811111111110B9
  %174 = fmul double %149, %173
  %175 = fadd double %174, 0xBFC5555555555555
  %176 = fsub double 0xBFC5555555555555, %175
  %177 = fadd double %174, %176
  %178 = bitcast double %175 to i64
  %179 = and i64 %178, -134217728
  %180 = bitcast i64 %179 to double
  %181 = fsub double %175, %180
  %182 = bitcast double %149 to i64
  %183 = and i64 %182, -134217728
  %184 = bitcast i64 %183 to double
  %185 = fsub double %149, %184
  %186 = fmul double %149, %175
  %187 = fmul double %184, %180
  %188 = fsub double %187, %186
  %189 = fmul double %181, %184
  %190 = fadd double %189, %188
  %191 = fmul double %185, %180
  %192 = fadd double %191, %190
  %193 = fmul double %185, %181
  %194 = fadd double %193, %192
  %195 = fmul double %159, %175
  %196 = fadd double %195, %194
  %197 = fmul double %149, %177
  %198 = fadd double %197, %196
  %199 = fadd double %186, 1.000000e+00
  %200 = fsub double 1.000000e+00, %199
  %201 = fadd double %186, %200
  %202 = fadd double %201, %198
  %203 = bitcast double %199 to i64
  %204 = and i64 %203, -134217728
  %205 = bitcast i64 %204 to double
  %206 = fsub double %199, %205
  %207 = fmul double %144, %205
  %208 = fmul double %202, %147
  %209 = fadd double %207, %208
  %210 = fmul double %148, %206
  %211 = fadd double %210, %209
  %212 = fmul double %206, %147
  %213 = fadd double %212, %211
  %214 = fmul double %148, %205
  %215 = fadd double %214, %213
  %216 = fmul double %147, %205
  %217 = fadd double %216, %215
  %218 = and i32 %142, 2
  %219 = icmp eq i32 %218, 0
  %220 = fsub double -0.000000e+00, %217
  %221 = select i1 %219, double %220, double %217
  ret double %221
}

; Function Attrs: nounwind uwtable
define { double, double } @Sleef_sincos_u35(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %18

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FE45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x3FF921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0x3C91A62633145C07
  %17 = fsub double %15, %16
  br label %64

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt double %5, 1.000000e+14
  br i1 %19, label %20, label %47

; <label>:20:                                     ; preds = %18
  %21 = fmul double %0, 0x3E645F306DC9C883
  %22 = fptosi double %21 to i32
  %23 = sitofp i32 %22 to double
  %24 = fmul double %23, 0x4170000000000000
  %25 = fmul double %0, 0x3FE45F306DC9C883
  %26 = fsub double %25, %24
  %27 = fcmp olt double %26, 0.000000e+00
  %28 = select i1 %27, double -5.000000e-01, double 5.000000e-01
  %29 = fadd double %26, %28
  %30 = fptosi double %29 to i32
  %31 = fmul double %24, 0x3FF921FB50000000
  %32 = fsub double %0, %31
  %33 = sitofp i32 %30 to double
  %34 = fmul double %33, 0x3FF921FB50000000
  %35 = fsub double %32, %34
  %36 = fmul double %24, 0x3E5110B460000000
  %37 = fsub double %35, %36
  %38 = fmul double %33, 0x3E5110B460000000
  %39 = fsub double %37, %38
  %40 = fmul double %24, 0x3C91A62630000000
  %41 = fsub double %39, %40
  %42 = fmul double %33, 0x3C91A62630000000
  %43 = fsub double %41, %42
  %44 = fadd double %24, %33
  %45 = fmul double %44, 0x3AE8A2E03707344A
  %46 = fsub double %43, %45
  br label %64

; <label>:47:                                     ; preds = %18
  %48 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %49 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %50 = load i32, i32* %49, align 8, !tbaa !2
  %51 = fcmp une double %0, 0x7FF0000000000000
  %52 = fcmp une double %0, 0xFFF0000000000000
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %61

; <label>:54:                                     ; preds = %47
  %55 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %56 = load double, double* %55, align 8, !tbaa !10
  %57 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %58 = load double, double* %57, align 8, !tbaa !9
  %59 = fadd double %56, %58
  %60 = fcmp ord double %0, 0.000000e+00
  br i1 %60, label %62, label %61

; <label>:61:                                     ; preds = %54, %47
  br label %62

; <label>:62:                                     ; preds = %54, %61
  %63 = phi double [ 0x7FF8000000000000, %61 ], [ %59, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #5
  br label %64

; <label>:64:                                     ; preds = %20, %62, %7
  %65 = phi double [ %17, %7 ], [ %46, %20 ], [ %63, %62 ]
  %66 = phi i32 [ %12, %7 ], [ %30, %20 ], [ %50, %62 ]
  %67 = fmul double %65, %65
  %68 = fmul double %67, 0x3DE5D82500BECB6B
  %69 = fadd double %68, 0xBE5AE5E1E6F6F6D8
  %70 = fmul double %67, %69
  %71 = fadd double %70, 0x3EC71DE3503EAE9C
  %72 = fmul double %67, %71
  %73 = fadd double %72, 0xBF2A01A019B64F6A
  %74 = fmul double %67, %73
  %75 = fadd double %74, 0x3F8111111110F135
  %76 = fmul double %67, %75
  %77 = fadd double %76, 0xBFC5555555555542
  %78 = fmul double %67, %77
  %79 = fmul double %65, %78
  %80 = fadd double %65, %79
  %81 = icmp eq i64 %3, -9223372036854775808
  %82 = select i1 %81, double -0.000000e+00, double %80
  %83 = fmul double %67, 0x3DA8FBF9C1BDB8CE
  %84 = fsub double 0x3E21EEA016409F05, %83
  %85 = fmul double %67, %84
  %86 = fadd double %85, 0xBE927E4F8130BE9C
  %87 = fmul double %67, %86
  %88 = fadd double %87, 0x3EFA01A019C8F025
  %89 = fmul double %67, %88
  %90 = fadd double %89, 0xBF56C16C16C14C96
  %91 = fmul double %67, %90
  %92 = fadd double %91, 0x3FA5555555555545
  %93 = fmul double %67, %92
  %94 = fadd double %93, -5.000000e-01
  %95 = fmul double %67, %94
  %96 = fadd double %95, 1.000000e+00
  %97 = and i32 %66, 1
  %98 = icmp eq i32 %97, 0
  %99 = select i1 %98, double %96, double %82
  %100 = select i1 %98, double %82, double %96
  %101 = and i32 %66, 2
  %102 = icmp eq i32 %101, 0
  %103 = fsub double -0.000000e+00, %100
  %104 = select i1 %102, double %100, double %103
  %105 = add nsw i32 %66, 1
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = fsub double -0.000000e+00, %99
  %109 = select i1 %107, double %99, double %108
  %110 = insertvalue { double, double } undef, double %104, 0
  %111 = insertvalue { double, double } %110, double %109, 1
  ret { double, double } %111
}

; Function Attrs: nounwind uwtable
define { double, double } @Sleef_sincos_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %20

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FE45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x3FF921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0xBC91A62633145C07
  %17 = fadd double %16, %15
  %18 = fsub double %15, %17
  %19 = fadd double %16, %18
  br label %95

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt double %5, 1.000000e+14
  br i1 %21, label %22, label %78

; <label>:22:                                     ; preds = %20
  %23 = fmul double %0, 0x3E645F306DC9C883
  %24 = fptosi double %23 to i32
  %25 = sitofp i32 %24 to double
  %26 = fmul double %25, 0x4170000000000000
  %27 = fmul double %0, 0x3FE45F306DC9C883
  %28 = fsub double %27, %26
  %29 = fcmp olt double %28, 0.000000e+00
  %30 = select i1 %29, double -5.000000e-01, double 5.000000e-01
  %31 = fadd double %28, %30
  %32 = fptosi double %31 to i32
  %33 = fmul double %26, 0x3FF921FB50000000
  %34 = fsub double %0, %33
  %35 = sitofp i32 %32 to double
  %36 = fmul double %35, 0xBFF921FB50000000
  %37 = fadd double %34, %36
  %38 = fsub double %34, %37
  %39 = fadd double %36, %38
  %40 = fmul double %26, 0xBE5110B460000000
  %41 = fadd double %40, %37
  %42 = fsub double %41, %37
  %43 = fsub double %41, %42
  %44 = fsub double %37, %43
  %45 = fsub double %40, %42
  %46 = fadd double %45, %44
  %47 = fadd double %39, %46
  %48 = fmul double %35, 0xBE5110B460000000
  %49 = fadd double %48, %41
  %50 = fsub double %49, %41
  %51 = fsub double %49, %50
  %52 = fsub double %41, %51
  %53 = fsub double %48, %50
  %54 = fadd double %53, %52
  %55 = fadd double %54, %47
  %56 = fmul double %26, 0xBC91A62630000000
  %57 = fadd double %56, %49
  %58 = fsub double %57, %49
  %59 = fsub double %57, %58
  %60 = fsub double %49, %59
  %61 = fsub double %56, %58
  %62 = fadd double %61, %60
  %63 = fadd double %62, %55
  %64 = fmul double %35, 0xBC91A62630000000
  %65 = fadd double %64, %57
  %66 = fsub double %65, %57
  %67 = fsub double %65, %66
  %68 = fsub double %57, %67
  %69 = fsub double %64, %66
  %70 = fadd double %69, %68
  %71 = fadd double %70, %63
  %72 = fadd double %26, %35
  %73 = fmul double %72, 0xBAE8A2E03707344A
  %74 = fadd double %73, %65
  %75 = fsub double %65, %74
  %76 = fadd double %73, %75
  %77 = fadd double %76, %71
  br label %95

; <label>:78:                                     ; preds = %20
  %79 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %80 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %81 = load i32, i32* %80, align 8, !tbaa !2
  %82 = fcmp une double %0, 0x7FF0000000000000
  %83 = fcmp une double %0, 0xFFF0000000000000
  %84 = and i1 %83, %82
  br i1 %84, label %85, label %91

; <label>:85:                                     ; preds = %78
  %86 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %87 = load double, double* %86, align 8
  %88 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %89 = load double, double* %88, align 8
  %90 = fcmp ord double %0, 0.000000e+00
  br i1 %90, label %92, label %91

; <label>:91:                                     ; preds = %85, %78
  br label %92

; <label>:92:                                     ; preds = %85, %91
  %93 = phi double [ 0x7FF8000000000000, %91 ], [ %89, %85 ]
  %94 = phi double [ 0x7FF8000000000000, %91 ], [ %87, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #5
  br label %95

; <label>:95:                                     ; preds = %22, %92, %7
  %96 = phi i32 [ %12, %7 ], [ %32, %22 ], [ %81, %92 ]
  %97 = phi double [ %17, %7 ], [ %74, %22 ], [ %93, %92 ]
  %98 = phi double [ %19, %7 ], [ %77, %22 ], [ %94, %92 ]
  %99 = bitcast double %97 to i64
  %100 = and i64 %99, -134217728
  %101 = bitcast i64 %100 to double
  %102 = fsub double %97, %101
  %103 = fmul double %98, %101
  %104 = fadd double %103, %103
  %105 = fmul double %102, %102
  %106 = fadd double %104, %105
  %107 = fmul double %102, %101
  %108 = fadd double %107, %107
  %109 = fadd double %106, %108
  %110 = fmul double %101, %101
  %111 = fadd double %110, %109
  %112 = fmul double %111, 0x3DE5D82500BECB6B
  %113 = fadd double %112, 0xBE5AE5E1E6F6F6D8
  %114 = fmul double %111, %113
  %115 = fadd double %114, 0x3EC71DE3503EAE9C
  %116 = fmul double %111, %115
  %117 = fadd double %116, 0xBF2A01A019B64F6A
  %118 = fmul double %111, %117
  %119 = fadd double %118, 0x3F8111111110F135
  %120 = fmul double %111, %119
  %121 = fadd double %120, 0xBFC5555555555542
  %122 = fmul double %97, %111
  %123 = fmul double %122, %121
  %124 = fadd double %97, %123
  %125 = fsub double %97, %124
  %126 = fadd double %123, %125
  %127 = fadd double %98, %126
  %128 = fadd double %124, %127
  %129 = icmp eq i64 %3, -9223372036854775808
  %130 = select i1 %129, double -0.000000e+00, double %128
  %131 = fmul double %111, 0x3DA8FBF9C1BDB8CE
  %132 = fsub double 0x3E21EEA016409F05, %131
  %133 = fmul double %111, %132
  %134 = fadd double %133, 0xBE927E4F8130BE9C
  %135 = fmul double %111, %134
  %136 = fadd double %135, 0x3EFA01A019C8F025
  %137 = fmul double %111, %136
  %138 = fadd double %137, 0xBF56C16C16C14C96
  %139 = fmul double %111, %138
  %140 = fadd double %139, 0x3FA5555555555545
  %141 = fmul double %111, %140
  %142 = fadd double %141, -5.000000e-01
  %143 = bitcast double %111 to i64
  %144 = and i64 %143, -134217728
  %145 = bitcast i64 %144 to double
  %146 = fsub double %111, %145
  %147 = bitcast double %142 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %142, %149
  %151 = fmul double %111, %142
  %152 = fmul double %145, %149
  %153 = fsub double %152, %151
  %154 = fmul double %146, %149
  %155 = fadd double %154, %153
  %156 = fmul double %150, %145
  %157 = fadd double %156, %155
  %158 = fmul double %146, %150
  %159 = fadd double %158, %157
  %160 = fadd double %151, 1.000000e+00
  %161 = fsub double 1.000000e+00, %160
  %162 = fadd double %151, %161
  %163 = fadd double %162, %159
  %164 = fadd double %160, %163
  %165 = and i32 %96, 1
  %166 = icmp eq i32 %165, 0
  %167 = select i1 %166, double %130, double %164
  %168 = select i1 %166, double %164, double %130
  %169 = and i32 %96, 2
  %170 = icmp eq i32 %169, 0
  %171 = fsub double -0.000000e+00, %167
  %172 = select i1 %170, double %167, double %171
  %173 = add nsw i32 %96, 1
  %174 = and i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = fsub double -0.000000e+00, %168
  %177 = select i1 %175, double %168, double %176
  %178 = insertvalue { double, double } undef, double %172, 0
  %179 = insertvalue { double, double } %178, double %177, 1
  ret { double, double } %179
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_sincospi_u05(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = fcmp uge double %2, 0.000000e+00
  %5 = zext i1 %4 to i32
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = fmul double %9, %9
  %11 = bitcast double %9 to i64
  %12 = and i64 %11, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %9, %13
  %15 = fmul double %10, 0x3D16CB8B645A2115
  %16 = fsub double 0x3D9E8EFF936BEB38, %15
  %17 = fmul double %10, %16
  %18 = fadd double %17, 0xBE1E3074CBC7E020
  %19 = fmul double %10, %18
  %20 = fadd double %19, 0x3E950783486A74C8
  %21 = fmul double %10, %20
  %22 = fadd double %21, 0xBF032D2CCE62B479
  %23 = fmul double %10, %22
  %24 = fadd double %23, 0x3F6466BC6775AADE
  %25 = fmul double %10, %24
  %26 = fadd double %25, 0xBFB4ABBCE625BE53
  %27 = fsub double %26, %25
  %28 = fsub double %26, %27
  %29 = fsub double %25, %28
  %30 = fsub double 0xBFB4ABBCE625BE53, %27
  %31 = fadd double %30, %29
  %32 = fadd double %31, 0x3C50B00000000000
  %33 = bitcast double %10 to i64
  %34 = and i64 %33, -134217728
  %35 = bitcast i64 %34 to double
  %36 = fsub double %10, %35
  %37 = bitcast double %26 to i64
  %38 = and i64 %37, -134217728
  %39 = bitcast i64 %38 to double
  %40 = fsub double %26, %39
  %41 = fmul double %10, %26
  %42 = fmul double %35, %39
  %43 = fsub double %42, %41
  %44 = insertelement <2 x double> undef, double %13, i32 0
  %45 = insertelement <2 x double> %44, double %36, i32 1
  %46 = insertelement <2 x double> %44, double %39, i32 1
  %47 = fmul <2 x double> %45, %46
  %48 = insertelement <2 x double> undef, double %10, i32 0
  %49 = insertelement <2 x double> %48, double %43, i32 1
  %50 = fsub <2 x double> %47, %49
  %51 = fadd <2 x double> %47, %49
  %52 = shufflevector <2 x double> %50, <2 x double> %51, <2 x i32> <i32 0, i32 3>
  %53 = fmul double %40, %35
  %54 = insertelement <2 x double> undef, double %14, i32 0
  %55 = insertelement <2 x double> %54, double %36, i32 1
  %56 = insertelement <2 x double> %44, double %40, i32 1
  %57 = fmul <2 x double> %55, %56
  %58 = extractelement <2 x double> %57, i32 0
  %59 = insertelement <2 x double> undef, double %58, i32 0
  %60 = insertelement <2 x double> %59, double %53, i32 1
  %61 = fadd <2 x double> %60, %52
  %62 = fadd <2 x double> %57, %61
  %63 = insertelement <2 x double> %54, double %10, i32 1
  %64 = insertelement <2 x double> %54, double %32, i32 1
  %65 = fmul <2 x double> %63, %64
  %66 = fadd <2 x double> %65, %62
  %67 = extractelement <2 x double> %66, i32 0
  %68 = fmul double %67, %26
  %69 = extractelement <2 x double> %66, i32 1
  %70 = fadd double %68, %69
  %71 = fadd double %41, 0x3FE921FB54442D18
  %72 = fsub double %71, %41
  %73 = fsub double %71, %72
  %74 = fsub double %41, %73
  %75 = fsub double 0x3FE921FB54442D18, %72
  %76 = fadd double %75, %74
  %77 = fadd double %70, 0x3C81A80000000000
  %78 = fadd double %76, %77
  %79 = bitcast double %71 to i64
  %80 = and i64 %79, -134217728
  %81 = bitcast i64 %80 to double
  %82 = fsub double %71, %81
  %83 = fmul double %9, %71
  %84 = fmul double %13, %81
  %85 = fsub double %84, %83
  %86 = fmul double %82, %13
  %87 = fadd double %86, %85
  %88 = fmul double %14, %81
  %89 = fadd double %88, %87
  %90 = fmul double %14, %82
  %91 = fadd double %90, %89
  %92 = fmul double %9, %78
  %93 = fadd double %91, %92
  %94 = fadd double %83, %93
  %95 = bitcast double %0 to i64
  %96 = icmp eq i64 %95, -9223372036854775808
  %97 = select i1 %96, double -0.000000e+00, double %94
  %98 = fmul double %10, 0x3CD1EA3B366CF50B
  %99 = fadd double %98, 0xBD5B6DF1CE46F480
  %100 = fmul double %10, %99
  %101 = fadd double %100, 0x3DDF9D387B282B12
  %102 = fmul double %10, %101
  %103 = fadd double %102, 0xBE5A6D1F2A0E516D
  %104 = fmul double %10, %103
  %105 = fadd double %104, 0x3ECE1F506891B1AB
  %106 = fmul double %10, %105
  %107 = fadd double %106, 0xBF355D3C7E3CBFF8
  %108 = fmul double %10, %107
  %109 = fadd double %108, 0x3F903C1F081B5AC4
  %110 = fsub double %109, %108
  %111 = fsub double %109, %110
  %112 = fsub double %108, %111
  %113 = fsub double 0x3F903C1F081B5AC4, %110
  %114 = fadd double %113, %112
  %115 = fadd double %114, 0xBC33500000000000
  %116 = bitcast double %109 to i64
  %117 = and i64 %116, -134217728
  %118 = bitcast i64 %117 to double
  %119 = fsub double %109, %118
  %120 = fmul double %10, %109
  %121 = fmul double %35, %118
  %122 = fsub double %121, %120
  %123 = fmul double %36, %118
  %124 = fadd double %123, %122
  %125 = fmul double %119, %35
  %126 = fadd double %125, %124
  %127 = fadd double %120, 0xBFD3BD3CC9BE45DE
  %128 = fsub double %127, %120
  %129 = fsub double %127, %128
  %130 = fsub double %120, %129
  %131 = fsub double 0xBFD3BD3CC9BE45DE, %128
  %132 = fadd double %131, %130
  %133 = bitcast double %127 to i64
  %134 = and i64 %133, -134217728
  %135 = bitcast i64 %134 to double
  %136 = fsub double %127, %135
  %137 = fmul double %10, %127
  %138 = insertelement <2 x double> undef, double %35, i32 0
  %139 = insertelement <2 x double> %138, double %36, i32 1
  %140 = insertelement <2 x double> undef, double %135, i32 0
  %141 = insertelement <2 x double> %140, double %119, i32 1
  %142 = fmul <2 x double> %139, %141
  %143 = insertelement <2 x double> undef, double %137, i32 0
  %144 = insertelement <2 x double> %143, double %126, i32 1
  %145 = fsub <2 x double> %142, %144
  %146 = fadd <2 x double> %142, %144
  %147 = shufflevector <2 x double> %145, <2 x double> %146, <2 x i32> <i32 0, i32 3>
  %148 = insertelement <2 x double> undef, double %136, i32 0
  %149 = insertelement <2 x double> %148, double %10, i32 1
  %150 = insertelement <2 x double> %138, double %115, i32 1
  %151 = fmul <2 x double> %149, %150
  %152 = fadd <2 x double> %151, %147
  %153 = insertelement <2 x double> undef, double %36, i32 0
  %154 = shufflevector <2 x double> %153, <2 x double> %66, <2 x i32> <i32 0, i32 2>
  %155 = insertelement <2 x double> %140, double %109, i32 1
  %156 = fmul <2 x double> %154, %155
  %157 = fadd <2 x double> %156, %152
  %158 = fmul double %36, %136
  %159 = insertelement <2 x double> <double undef, double 0xBC76900000000000>, double %158, i32 0
  %160 = fadd <2 x double> %159, %157
  %161 = fmul double %67, %127
  %162 = insertelement <2 x double> undef, double %161, i32 0
  %163 = insertelement <2 x double> %162, double %132, i32 1
  %164 = fadd <2 x double> %163, %160
  %165 = extractelement <2 x double> %164, i32 1
  %166 = fmul double %10, %165
  %167 = extractelement <2 x double> %164, i32 0
  %168 = fadd double %167, %166
  %169 = fadd double %137, 1.000000e+00
  %170 = fsub double %169, %137
  %171 = fsub double %169, %170
  %172 = fsub double %137, %171
  %173 = fsub double 1.000000e+00, %170
  %174 = fadd double %173, %172
  %175 = fadd double %174, %168
  %176 = fadd double %169, %175
  %177 = and i32 %6, 2
  %178 = icmp eq i32 %177, 0
  %179 = select i1 %178, double %97, double %176
  %180 = select i1 %178, double %176, double %97
  %181 = and i32 %6, 4
  %182 = icmp eq i32 %181, 0
  %183 = fsub double -0.000000e+00, %179
  %184 = select i1 %182, double %179, double %183
  %185 = add nsw i32 %7, 2
  %186 = and i32 %185, 4
  %187 = icmp eq i32 %186, 0
  %188 = fsub double -0.000000e+00, %180
  %189 = select i1 %187, double %180, double %188
  %190 = and i64 %95, 9223372036854775807
  %191 = bitcast i64 %190 to double
  %192 = fcmp ogt double %191, 2.500000e+08
  %193 = select i1 %192, double 0.000000e+00, double %184
  %194 = select i1 %192, double 1.000000e+00, double %189
  %195 = fcmp une double %0, 0x7FF0000000000000
  %196 = fcmp une double %0, 0xFFF0000000000000
  %197 = and i1 %196, %195
  %198 = select i1 %197, double %193, double 0x7FF8000000000000
  %199 = select i1 %197, double %194, double 0x7FF8000000000000
  %200 = insertvalue { double, double } undef, double %198, 0
  %201 = insertvalue { double, double } %200, double %199, 1
  ret { double, double } %201
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_sincospi_u35(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = fcmp uge double %2, 0.000000e+00
  %5 = zext i1 %4 to i32
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = fmul double %9, %9
  %11 = fmul double %10, 0x3D9E42E923057D6C
  %12 = fadd double %11, 0xBE1E3011CA3F21B5
  %13 = fmul double %10, %12
  %14 = fadd double %13, 0x3E9507830918116C
  %15 = fmul double %10, %14
  %16 = fadd double %15, 0xBF032D2CCE398CAE
  %17 = fmul double %10, %16
  %18 = fadd double %17, 0x3F6466BC677591C5
  %19 = fmul double %10, %18
  %20 = fadd double %19, 0xBFB4ABBCE625BE43
  %21 = fmul double %10, %20
  %22 = fadd double %21, 0x3FE921FB54442D18
  %23 = fmul double %9, %22
  %24 = fmul double %10, 0x3D5B29CFED2A85B3
  %25 = fsub double 0x3DDF9CD01C42C7CD, %24
  %26 = fmul double %10, %25
  %27 = fadd double %26, 0xBE5A6D1ED7B66707
  %28 = fmul double %10, %27
  %29 = fadd double %28, 0x3ECE1F50684AD332
  %30 = fmul double %10, %29
  %31 = fadd double %30, 0xBF355D3C7E3C9FCF
  %32 = fmul double %10, %31
  %33 = fadd double %32, 0x3F903C1F081B5AAA
  %34 = fmul double %10, %33
  %35 = fadd double %34, 0xBFD3BD3CC9BE45DE
  %36 = fmul double %10, %35
  %37 = fadd double %36, 1.000000e+00
  %38 = and i32 %6, 2
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, double %37, double %23
  %41 = select i1 %39, double %23, double %37
  %42 = and i32 %6, 4
  %43 = icmp eq i32 %42, 0
  %44 = fsub double -0.000000e+00, %41
  %45 = select i1 %43, double %41, double %44
  %46 = add nsw i32 %7, 2
  %47 = and i32 %46, 4
  %48 = icmp eq i32 %47, 0
  %49 = fsub double -0.000000e+00, %40
  %50 = select i1 %48, double %40, double %49
  %51 = bitcast double %0 to i64
  %52 = and i64 %51, 9223372036854775807
  %53 = bitcast i64 %52 to double
  %54 = fcmp ogt double %53, 2.500000e+08
  %55 = select i1 %54, double 1.000000e+00, double %50
  %56 = select i1 %54, double 0.000000e+00, double %45
  %57 = fcmp une double %0, 0x7FF0000000000000
  %58 = fcmp une double %0, 0xFFF0000000000000
  %59 = and i1 %58, %57
  %60 = select i1 %59, double %55, double 0x7FF8000000000000
  %61 = select i1 %59, double %56, double 0x7FF8000000000000
  %62 = insertvalue { double, double } undef, double %61, 0
  %63 = insertvalue { double, double } %62, double %60, 1
  ret { double, double } %63
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinpi_u05(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = fcmp uge double %2, 0.000000e+00
  %5 = zext i1 %4 to i32
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = and i32 %6, 2
  %9 = icmp ne i32 %8, 0
  %10 = sitofp i32 %7 to double
  %11 = fsub double %2, %10
  %12 = fmul double %11, %11
  %13 = bitcast double %11 to i64
  %14 = and i64 %13, -134217728
  %15 = bitcast i64 %14 to double
  %16 = fsub double %11, %15
  %17 = fmul double %15, %15
  %18 = fsub double %17, %12
  %19 = fmul double %16, %15
  %20 = fadd double %19, %18
  %21 = fadd double %19, %20
  %22 = fmul double %16, %16
  %23 = fadd double %22, %21
  %24 = select i1 %9, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115
  %25 = select i1 %9, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38
  %26 = fmul double %24, %12
  %27 = fadd double %25, %26
  %28 = select i1 %9, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020
  %29 = fmul double %12, %27
  %30 = fadd double %28, %29
  %31 = select i1 %9, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8
  %32 = fmul double %12, %30
  %33 = fadd double %31, %32
  %34 = select i1 %9, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479
  %35 = fmul double %12, %33
  %36 = fadd double %34, %35
  %37 = select i1 %9, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE
  %38 = fmul double %12, %36
  %39 = fadd double %37, %38
  %40 = fmul double %12, %39
  %41 = select i1 %9, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53
  %42 = select i1 %9, double 0xBC33500000000000, double 0x3C50B00000000000
  %43 = fadd double %41, %40
  %44 = fsub double %43, %40
  %45 = fsub double %43, %44
  %46 = fsub double %40, %45
  %47 = fsub double %41, %44
  %48 = fadd double %47, %46
  %49 = fadd double %42, %48
  %50 = bitcast double %12 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %12, %52
  %54 = bitcast double %43 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %43, %56
  %58 = fmul double %12, %43
  %59 = fmul double %52, %56
  %60 = fsub double %59, %58
  %61 = fmul double %53, %56
  %62 = fadd double %61, %60
  %63 = fmul double %57, %52
  %64 = fadd double %63, %62
  %65 = fmul double %53, %57
  %66 = fadd double %65, %64
  %67 = fmul double %12, %49
  %68 = fadd double %67, %66
  %69 = fmul double %23, %43
  %70 = fadd double %69, %68
  %71 = select i1 %9, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18
  %72 = select i1 %9, double 0xBC76900000000000, double 0x3C81A80000000000
  %73 = fadd double %71, %58
  %74 = fsub double %73, %58
  %75 = fsub double %73, %74
  %76 = fsub double %58, %75
  %77 = fsub double %71, %74
  %78 = fadd double %77, %76
  %79 = fadd double %72, %70
  %80 = fadd double %78, %79
  %81 = select i1 %9, double %23, double 0.000000e+00
  %82 = select i1 %9, double %12, double %11
  %83 = bitcast double %73 to i64
  %84 = and i64 %83, -134217728
  %85 = bitcast i64 %84 to double
  %86 = fsub double %73, %85
  %87 = bitcast double %82 to i64
  %88 = and i64 %87, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %82, %89
  %91 = fmul double %82, %73
  %92 = fmul double %89, %85
  %93 = fsub double %92, %91
  %94 = fmul double %86, %89
  %95 = fadd double %94, %93
  %96 = fmul double %90, %85
  %97 = fadd double %96, %95
  %98 = fmul double %90, %86
  %99 = fadd double %98, %97
  %100 = fmul double %81, %73
  %101 = fadd double %100, %99
  %102 = fmul double %82, %80
  %103 = fadd double %101, %102
  br i1 %9, label %104, label %112

; <label>:104:                                    ; preds = %1
  %105 = fadd double %91, 1.000000e+00
  %106 = fsub double %105, %91
  %107 = fsub double %105, %106
  %108 = fsub double %91, %107
  %109 = fsub double 1.000000e+00, %106
  %110 = fadd double %109, %108
  %111 = fadd double %110, %103
  br label %112

; <label>:112:                                    ; preds = %1, %104
  %113 = phi double [ %105, %104 ], [ %91, %1 ]
  %114 = phi double [ %111, %104 ], [ %103, %1 ]
  %115 = and i32 %6, 4
  %116 = icmp eq i32 %115, 0
  %117 = fsub double -0.000000e+00, %113
  %118 = fsub double -0.000000e+00, %114
  %119 = select i1 %116, double %113, double %117
  %120 = select i1 %116, double %114, double %118
  %121 = fadd double %119, %120
  %122 = bitcast double %0 to i64
  %123 = icmp eq i64 %122, -9223372036854775808
  %124 = select i1 %123, double -0.000000e+00, double %121
  %125 = and i64 %122, 9223372036854775807
  %126 = bitcast i64 %125 to double
  %127 = fcmp ogt double %126, 2.500000e+08
  %128 = select i1 %127, double 0.000000e+00, double %124
  %129 = fcmp une double %0, 0x7FF0000000000000
  %130 = fcmp une double %0, 0xFFF0000000000000
  %131 = and i1 %130, %129
  %132 = select i1 %131, double %128, double 0x7FF8000000000000
  ret double %132
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cospi_u05(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = fcmp uge double %2, 0.000000e+00
  %5 = zext i1 %4 to i32
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = and i32 %6, 2
  %9 = icmp eq i32 %8, 0
  %10 = sitofp i32 %7 to double
  %11 = fsub double %2, %10
  %12 = fmul double %11, %11
  %13 = bitcast double %11 to i64
  %14 = and i64 %13, -134217728
  %15 = bitcast i64 %14 to double
  %16 = fsub double %11, %15
  %17 = fmul double %15, %15
  %18 = fsub double %17, %12
  %19 = fmul double %16, %15
  %20 = fadd double %19, %18
  %21 = fadd double %19, %20
  %22 = fmul double %16, %16
  %23 = fadd double %22, %21
  %24 = select i1 %9, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115
  %25 = select i1 %9, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38
  %26 = fmul double %24, %12
  %27 = fadd double %25, %26
  %28 = select i1 %9, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020
  %29 = fmul double %12, %27
  %30 = fadd double %28, %29
  %31 = select i1 %9, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8
  %32 = fmul double %12, %30
  %33 = fadd double %31, %32
  %34 = select i1 %9, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479
  %35 = fmul double %12, %33
  %36 = fadd double %34, %35
  %37 = select i1 %9, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE
  %38 = fmul double %12, %36
  %39 = fadd double %37, %38
  %40 = fmul double %12, %39
  %41 = select i1 %9, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53
  %42 = select i1 %9, double 0xBC33500000000000, double 0x3C50B00000000000
  %43 = fadd double %41, %40
  %44 = fsub double %43, %40
  %45 = fsub double %43, %44
  %46 = fsub double %40, %45
  %47 = fsub double %41, %44
  %48 = fadd double %47, %46
  %49 = fadd double %42, %48
  %50 = bitcast double %12 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %12, %52
  %54 = bitcast double %43 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %43, %56
  %58 = fmul double %12, %43
  %59 = fmul double %52, %56
  %60 = fsub double %59, %58
  %61 = fmul double %53, %56
  %62 = fadd double %61, %60
  %63 = fmul double %57, %52
  %64 = fadd double %63, %62
  %65 = fmul double %53, %57
  %66 = fadd double %65, %64
  %67 = fmul double %12, %49
  %68 = fadd double %67, %66
  %69 = fmul double %23, %43
  %70 = fadd double %69, %68
  %71 = select i1 %9, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18
  %72 = select i1 %9, double 0xBC76900000000000, double 0x3C81A80000000000
  %73 = fadd double %71, %58
  %74 = fsub double %73, %58
  %75 = fsub double %73, %74
  %76 = fsub double %58, %75
  %77 = fsub double %71, %74
  %78 = fadd double %77, %76
  %79 = fadd double %72, %70
  %80 = fadd double %78, %79
  %81 = select i1 %9, double %23, double 0.000000e+00
  %82 = select i1 %9, double %12, double %11
  %83 = bitcast double %73 to i64
  %84 = and i64 %83, -134217728
  %85 = bitcast i64 %84 to double
  %86 = fsub double %73, %85
  %87 = bitcast double %82 to i64
  %88 = and i64 %87, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %82, %89
  %91 = fmul double %82, %73
  %92 = fmul double %89, %85
  %93 = fsub double %92, %91
  %94 = fmul double %86, %89
  %95 = fadd double %94, %93
  %96 = fmul double %90, %85
  %97 = fadd double %96, %95
  %98 = fmul double %90, %86
  %99 = fadd double %98, %97
  %100 = fmul double %81, %73
  %101 = fadd double %100, %99
  %102 = fmul double %82, %80
  %103 = fadd double %101, %102
  br i1 %9, label %104, label %112

; <label>:104:                                    ; preds = %1
  %105 = fadd double %91, 1.000000e+00
  %106 = fsub double %105, %91
  %107 = fsub double %105, %106
  %108 = fsub double %91, %107
  %109 = fsub double 1.000000e+00, %106
  %110 = fadd double %109, %108
  %111 = fadd double %110, %103
  br label %112

; <label>:112:                                    ; preds = %1, %104
  %113 = phi double [ %105, %104 ], [ %91, %1 ]
  %114 = phi double [ %111, %104 ], [ %103, %1 ]
  %115 = add nsw i32 %7, 2
  %116 = and i32 %115, 4
  %117 = icmp eq i32 %116, 0
  %118 = fsub double -0.000000e+00, %113
  %119 = fsub double -0.000000e+00, %114
  %120 = select i1 %117, double %113, double %118
  %121 = select i1 %117, double %114, double %119
  %122 = fadd double %120, %121
  %123 = bitcast double %0 to i64
  %124 = and i64 %123, 9223372036854775807
  %125 = bitcast i64 %124 to double
  %126 = fcmp ogt double %125, 2.500000e+08
  %127 = select i1 %126, double 1.000000e+00, double %122
  %128 = fcmp une double %0, 0x7FF0000000000000
  %129 = fcmp une double %0, 0xFFF0000000000000
  %130 = and i1 %129, %128
  %131 = select i1 %130, double %127, double 0x7FF8000000000000
  ret double %131
}

; Function Attrs: nounwind uwtable
define double @Sleef_tan_u35(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %18

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FE45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x3FF921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0x3C91A62633145C07
  %17 = fsub double %15, %16
  br label %64

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt double %5, 1.000000e+06
  br i1 %19, label %20, label %47

; <label>:20:                                     ; preds = %18
  %21 = fmul double %0, 0x3E645F306DC9C883
  %22 = fptosi double %21 to i32
  %23 = sitofp i32 %22 to double
  %24 = fmul double %23, 0x4170000000000000
  %25 = fmul double %0, 0x3FE45F306DC9C883
  %26 = fsub double %25, %24
  %27 = fcmp olt double %26, 0.000000e+00
  %28 = select i1 %27, double -5.000000e-01, double 5.000000e-01
  %29 = fadd double %26, %28
  %30 = fptosi double %29 to i32
  %31 = fmul double %24, 0x3FF921FB50000000
  %32 = fsub double %0, %31
  %33 = sitofp i32 %30 to double
  %34 = fmul double %33, 0x3FF921FB50000000
  %35 = fsub double %32, %34
  %36 = fmul double %24, 0x3E5110B460000000
  %37 = fsub double %35, %36
  %38 = fmul double %33, 0x3E5110B460000000
  %39 = fsub double %37, %38
  %40 = fmul double %24, 0x3C91A62630000000
  %41 = fsub double %39, %40
  %42 = fmul double %33, 0x3C91A62630000000
  %43 = fsub double %41, %42
  %44 = fadd double %24, %33
  %45 = fmul double %44, 0x3AE8A2E03707344A
  %46 = fsub double %43, %45
  br label %64

; <label>:47:                                     ; preds = %18
  %48 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %49 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %50 = load i32, i32* %49, align 8, !tbaa !2
  %51 = fcmp une double %0, 0x7FF0000000000000
  %52 = fcmp une double %0, 0xFFF0000000000000
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %61

; <label>:54:                                     ; preds = %47
  %55 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %56 = load double, double* %55, align 8, !tbaa !10
  %57 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %58 = load double, double* %57, align 8, !tbaa !9
  %59 = fadd double %56, %58
  %60 = fcmp ord double %0, 0.000000e+00
  br i1 %60, label %62, label %61

; <label>:61:                                     ; preds = %54, %47
  br label %62

; <label>:62:                                     ; preds = %54, %61
  %63 = phi double [ 0x7FF8000000000000, %61 ], [ %59, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #5
  br label %64

; <label>:64:                                     ; preds = %20, %62, %7
  %65 = phi i32 [ %12, %7 ], [ %30, %20 ], [ %50, %62 ]
  %66 = phi double [ %17, %7 ], [ %46, %20 ], [ %63, %62 ]
  %67 = fmul double %66, 5.000000e-01
  %68 = fmul double %67, %67
  %69 = fmul double %68, %68
  %70 = fmul double %69, %69
  %71 = fmul double %68, 0x3F35445F555134ED
  %72 = fadd double %71, 0x3F4269BE400DE3AF
  %73 = fmul double %68, 0x3F57EEF631E20B93
  %74 = fadd double %73, 0x3F6D6C27C371C959
  %75 = fmul double %69, %72
  %76 = fadd double %74, %75
  %77 = fmul double %68, 0x3F8226E7BFA35090
  %78 = fadd double %77, 0x3F9664F4729F98E5
  %79 = fmul double %68, 0x3FABA1BA1BDCEC06
  %80 = fadd double %79, 0x3FC111111110E933
  %81 = fmul double %69, %78
  %82 = fadd double %80, %81
  %83 = fmul double %70, %76
  %84 = fadd double %82, %83
  %85 = fmul double %68, %84
  %86 = fadd double %85, 0x3FD5555555555568
  %87 = fmul double %67, %86
  %88 = fmul double %68, %87
  %89 = fadd double %67, %88
  %90 = fmul double %89, %89
  %91 = fadd double %90, -1.000000e+00
  %92 = fmul double %89, -2.000000e+00
  %93 = and i32 %65, 1
  %94 = icmp eq i32 %93, 0
  %95 = fsub double -0.000000e+00, %92
  %96 = select i1 %94, double %91, double %95
  %97 = select i1 %94, double %92, double %91
  %98 = fdiv double %97, %96
  ret double %98
}

; Function Attrs: nounwind uwtable
define double @Sleef_tan_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.ddi_t, align 8
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.500000e+01
  br i1 %6, label %7, label %20

; <label>:7:                                      ; preds = %1
  %8 = fmul double %0, 0x3FE45F306DC9C883
  %9 = fcmp olt double %8, 0.000000e+00
  %10 = select i1 %9, double -5.000000e-01, double 5.000000e-01
  %11 = fadd double %8, %10
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x3FF921FB54442D18
  %15 = fsub double %0, %14
  %16 = fmul double %13, 0xBC91A62633145C07
  %17 = fadd double %16, %15
  %18 = fsub double %15, %17
  %19 = fadd double %16, %18
  br label %114

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt double %5, 1.000000e+14
  br i1 %21, label %22, label %98

; <label>:22:                                     ; preds = %20
  %23 = fmul double %0, 0x3E645F306DC9C883
  %24 = fptosi double %23 to i32
  %25 = sitofp i32 %24 to double
  %26 = fmul double %25, 0x4170000000000000
  %27 = and i64 %3, -134217728
  %28 = bitcast i64 %27 to double
  %29 = fsub double %0, %28
  %30 = fmul double %0, 0x3FE45F306DC9C883
  %31 = fmul double %28, 0x3FE45F3068000000
  %32 = fsub double %31, %30
  %33 = fmul double %28, 0x3E4727220C000000
  %34 = fadd double %33, %32
  %35 = fmul double %29, 0x3FE45F3068000000
  %36 = fadd double %35, %34
  %37 = fmul double %29, 0x3E4727220C000000
  %38 = fadd double %37, %36
  %39 = fmul double %0, 0x3C86B01EC5417056
  %40 = fsub double %38, %39
  %41 = fcmp olt double %0, 0.000000e+00
  %42 = select i1 %41, double -5.000000e-01, double 5.000000e-01
  %43 = fsub double %42, %26
  %44 = fadd double %30, %43
  %45 = fsub double %44, %30
  %46 = fsub double %44, %45
  %47 = fsub double %30, %46
  %48 = fsub double %43, %45
  %49 = fadd double %48, %47
  %50 = fadd double %40, %49
  %51 = fadd double %44, %50
  %52 = fptosi double %51 to i32
  %53 = fmul double %26, 0x3FF921FB50000000
  %54 = fsub double %0, %53
  %55 = sitofp i32 %52 to double
  %56 = fmul double %55, 0xBFF921FB50000000
  %57 = fadd double %54, %56
  %58 = fsub double %54, %57
  %59 = fadd double %56, %58
  %60 = fmul double %26, 0xBE5110B460000000
  %61 = fadd double %60, %57
  %62 = fsub double %61, %57
  %63 = fsub double %61, %62
  %64 = fsub double %57, %63
  %65 = fsub double %60, %62
  %66 = fadd double %65, %64
  %67 = fadd double %59, %66
  %68 = fmul double %55, 0xBE5110B460000000
  %69 = fadd double %68, %61
  %70 = fsub double %69, %61
  %71 = fsub double %69, %70
  %72 = fsub double %61, %71
  %73 = fsub double %68, %70
  %74 = fadd double %73, %72
  %75 = fadd double %74, %67
  %76 = fmul double %26, 0xBC91A62630000000
  %77 = fadd double %76, %69
  %78 = fsub double %77, %69
  %79 = fsub double %77, %78
  %80 = fsub double %69, %79
  %81 = fsub double %76, %78
  %82 = fadd double %81, %80
  %83 = fadd double %82, %75
  %84 = fmul double %55, 0xBC91A62630000000
  %85 = fadd double %84, %77
  %86 = fsub double %85, %77
  %87 = fsub double %85, %86
  %88 = fsub double %77, %87
  %89 = fsub double %84, %86
  %90 = fadd double %89, %88
  %91 = fadd double %90, %83
  %92 = fadd double %26, %55
  %93 = fmul double %92, 0xBAE8A2E03707344A
  %94 = fadd double %93, %85
  %95 = fsub double %85, %94
  %96 = fadd double %93, %95
  %97 = fadd double %96, %91
  br label %114

; <label>:98:                                     ; preds = %20
  %99 = bitcast %struct.ddi_t* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %99) #5
  call fastcc void @rempi(%struct.ddi_t* noalias nonnull %2, double %0)
  %100 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 1
  %101 = load i32, i32* %100, align 8, !tbaa !2
  %102 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 1
  %103 = load double, double* %102, align 8
  %104 = fcmp une double %0, 0x7FF0000000000000
  %105 = fcmp une double %0, 0xFFF0000000000000
  %106 = and i1 %105, %104
  br i1 %106, label %107, label %111

; <label>:107:                                    ; preds = %98
  %108 = getelementptr inbounds %struct.ddi_t, %struct.ddi_t* %2, i64 0, i32 0, i32 0
  %109 = load double, double* %108, align 8
  %110 = fcmp ord double %0, 0.000000e+00
  br i1 %110, label %112, label %111

; <label>:111:                                    ; preds = %107, %98
  br label %112

; <label>:112:                                    ; preds = %107, %111
  %113 = phi double [ 0x7FF8000000000000, %111 ], [ %109, %107 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %99) #5
  br label %114

; <label>:114:                                    ; preds = %22, %112, %7
  %115 = phi i32 [ %12, %7 ], [ %52, %22 ], [ %101, %112 ]
  %116 = phi double [ %17, %7 ], [ %94, %22 ], [ %113, %112 ]
  %117 = phi double [ %19, %7 ], [ %97, %22 ], [ %103, %112 ]
  %118 = fmul double %116, 5.000000e-01
  %119 = fmul double %117, 5.000000e-01
  %120 = bitcast double %118 to i64
  %121 = and i64 %120, -134217728
  %122 = bitcast i64 %121 to double
  %123 = fsub double %118, %122
  %124 = fmul double %118, %118
  %125 = fmul double %122, %122
  %126 = fsub double %125, %124
  %127 = fadd double %122, %122
  %128 = fmul double %127, %123
  %129 = fadd double %126, %128
  %130 = fmul double %123, %123
  %131 = fadd double %130, %129
  %132 = fadd double %119, %119
  %133 = fmul double %118, %132
  %134 = fadd double %133, %131
  %135 = fmul double %124, %124
  %136 = fmul double %135, %135
  %137 = fmul double %124, 0x3F35445F555134ED
  %138 = fadd double %137, 0x3F4269BE400DE3AF
  %139 = fmul double %124, 0x3F57EEF631E20B93
  %140 = fadd double %139, 0x3F6D6C27C371C959
  %141 = fmul double %135, %138
  %142 = fadd double %140, %141
  %143 = fmul double %124, 0x3F8226E7BFA35090
  %144 = fadd double %143, 0x3F9664F4729F98E5
  %145 = fmul double %124, 0x3FABA1BA1BDCEC06
  %146 = fadd double %145, 0x3FC111111110E933
  %147 = fmul double %135, %144
  %148 = fadd double %146, %147
  %149 = fmul double %136, %142
  %150 = fadd double %148, %149
  %151 = fmul double %124, %150
  %152 = fadd double %151, 0x3FD5555555555568
  %153 = bitcast double %124 to i64
  %154 = and i64 %153, -134217728
  %155 = bitcast i64 %154 to double
  %156 = fsub double %124, %155
  %157 = fmul double %118, %124
  %158 = fmul double %122, %155
  %159 = fsub double %158, %157
  %160 = fmul double %156, %122
  %161 = fadd double %160, %159
  %162 = fmul double %123, %155
  %163 = fadd double %162, %161
  %164 = fmul double %123, %156
  %165 = fadd double %164, %163
  %166 = fmul double %124, %119
  %167 = fadd double %166, %165
  %168 = fmul double %118, %134
  %169 = fadd double %168, %167
  %170 = bitcast double %157 to i64
  %171 = and i64 %170, -134217728
  %172 = bitcast i64 %171 to double
  %173 = fsub double %157, %172
  %174 = bitcast double %152 to i64
  %175 = and i64 %174, -134217728
  %176 = bitcast i64 %175 to double
  %177 = fsub double %152, %176
  %178 = fmul double %157, %152
  %179 = fmul double %172, %176
  %180 = fsub double %179, %178
  %181 = fmul double %173, %176
  %182 = fadd double %181, %180
  %183 = fmul double %177, %172
  %184 = fadd double %183, %182
  %185 = fmul double %173, %177
  %186 = fadd double %185, %184
  %187 = fmul double %152, %169
  %188 = fadd double %187, %186
  %189 = fadd double %118, %178
  %190 = fsub double %118, %189
  %191 = fadd double %178, %190
  %192 = fadd double %119, %191
  %193 = fadd double %192, %188
  %194 = bitcast double %189 to i64
  %195 = and i64 %194, -134217728
  %196 = bitcast i64 %195 to double
  %197 = fsub double %189, %196
  %198 = fmul double %189, %189
  %199 = fmul double %196, %196
  %200 = fsub double %199, %198
  %201 = fadd double %196, %196
  %202 = fmul double %201, %197
  %203 = fadd double %200, %202
  %204 = fmul double %197, %197
  %205 = fadd double %204, %203
  %206 = fadd double %193, %193
  %207 = fmul double %189, %206
  %208 = fadd double %205, %207
  %209 = fadd double %198, -1.000000e+00
  %210 = fsub double -1.000000e+00, %209
  %211 = fadd double %198, %210
  %212 = fadd double %211, %208
  %213 = fmul double %189, -2.000000e+00
  %214 = fmul double %193, -2.000000e+00
  %215 = and i32 %115, 1
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %220, label %217

; <label>:217:                                    ; preds = %114
  %218 = fsub double -0.000000e+00, %213
  %219 = fsub double -0.000000e+00, %214
  br label %220

; <label>:220:                                    ; preds = %114, %217
  %221 = phi double [ %218, %217 ], [ %209, %114 ]
  %222 = phi double [ %219, %217 ], [ %212, %114 ]
  %223 = phi double [ %209, %217 ], [ %213, %114 ]
  %224 = phi double [ %212, %217 ], [ %214, %114 ]
  %225 = fdiv double 1.000000e+00, %221
  %226 = bitcast double %221 to i64
  %227 = and i64 %226, -134217728
  %228 = bitcast i64 %227 to double
  %229 = fsub double %221, %228
  %230 = bitcast double %225 to i64
  %231 = and i64 %230, -134217728
  %232 = bitcast i64 %231 to double
  %233 = fsub double %225, %232
  %234 = bitcast double %223 to i64
  %235 = and i64 %234, -134217728
  %236 = bitcast i64 %235 to double
  %237 = fsub double %223, %236
  %238 = fmul double %225, %223
  %239 = fmul double %232, %236
  %240 = fsub double %239, %238
  %241 = fmul double %233, %236
  %242 = fadd double %241, %240
  %243 = fmul double %237, %232
  %244 = fadd double %243, %242
  %245 = fmul double %233, %237
  %246 = fadd double %245, %244
  %247 = fmul double %228, %232
  %248 = fsub double 1.000000e+00, %247
  %249 = fmul double %233, %228
  %250 = fsub double %248, %249
  %251 = fmul double %229, %232
  %252 = fsub double %250, %251
  %253 = insertelement <2 x double> undef, double %222, i32 0
  %254 = insertelement <2 x double> %253, double %229, i32 1
  %255 = insertelement <2 x double> undef, double %238, i32 0
  %256 = insertelement <2 x double> %255, double %233, i32 1
  %257 = fmul <2 x double> %254, %256
  %258 = insertelement <2 x double> undef, double %224, i32 0
  %259 = insertelement <2 x double> %258, double %252, i32 1
  %260 = fsub <2 x double> %259, %257
  %261 = insertelement <2 x double> undef, double %225, i32 0
  %262 = insertelement <2 x double> %261, double %238, i32 1
  %263 = fmul <2 x double> %262, %260
  %264 = extractelement <2 x double> %263, i32 1
  %265 = fadd double %246, %264
  %266 = extractelement <2 x double> %263, i32 0
  %267 = fadd double %266, %265
  %268 = fadd double %238, %267
  %269 = icmp eq i64 %3, -9223372036854775808
  %270 = select i1 %269, double %0, double %268
  ret double %270
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log_u35(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %3, double %0
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, %11
  %15 = bitcast i64 %14 to double
  %16 = fadd double %15, -1.000000e+00
  %17 = fadd double %15, 1.000000e+00
  %18 = fdiv double %16, %17
  %19 = fmul double %18, %18
  %20 = fmul double %19, %19
  %21 = fcmp olt double %4, 0.000000e+00
  br i1 %21, label %50, label %22

; <label>:22:                                     ; preds = %1
  %23 = fcmp une double %4, 0xFFF0000000000000
  %24 = fcmp une double %4, 0x7FF0000000000000
  %25 = and i1 %23, %24
  %26 = fmul double %18, 2.000000e+00
  %27 = select i1 %2, i32 -1087, i32 -1023
  %28 = add nsw i32 %9, %27
  %29 = sitofp i32 %28 to double
  %30 = fmul double %29, 0x3FE62E42FEFA39EF
  %31 = fadd double %30, %26
  %32 = fmul double %18, %19
  %33 = fmul double %20, %20
  %34 = fmul double %20, 0x3FC3A5791D95DB39
  %35 = fmul double %19, 0x3FC385C5CBC3F50D
  %36 = fadd double %35, 0x3FC7474BA672B05F
  %37 = fadd double %34, %36
  %38 = fmul double %33, %37
  %39 = fmul double %19, 0x3FCC71BFEED5D419
  %40 = fadd double %39, 0x3FD249249BFBE987
  %41 = fmul double %20, %40
  %42 = fmul double %19, 0x3FD99999998C136E
  %43 = fadd double %42, 0x3FE555555555593F
  %44 = fadd double %43, %41
  %45 = fadd double %38, %44
  %46 = fmul double %32, %45
  %47 = fadd double %31, %46
  %48 = select i1 %25, double %47, double 0x7FF0000000000000
  %49 = fcmp ord double %4, 0.000000e+00
  br i1 %49, label %51, label %50

; <label>:50:                                     ; preds = %22, %1
  br label %51

; <label>:51:                                     ; preds = %22, %50
  %52 = phi double [ 0x7FF8000000000000, %50 ], [ %48, %22 ]
  %53 = fcmp oeq double %4, 0.000000e+00
  %54 = select i1 %53, double 0xFFF0000000000000, double %52
  ret double %54
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp_u10(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3FF71547652B82FE
  %3 = fcmp olt double %2, 0.000000e+00
  %4 = select i1 %3, double -5.000000e-01, double 5.000000e-01
  %5 = fadd double %2, %4
  %6 = fptosi double %5 to i32
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 0x3FE62E42FEFA3000
  %9 = fsub double %0, %8
  %10 = fmul double %7, 0x3D53DE6AF278ECE6
  %11 = fsub double %9, %10
  %12 = fmul double %11, %11
  %13 = fmul double %12, %12
  %14 = fmul double %13, %13
  %15 = fmul double %11, 0x3E927E52E0FCD573
  %16 = fadd double %15, 0x3EC71DDF1629E6CE
  %17 = fmul double %11, 0x3EFA01A01780879E
  %18 = fadd double %17, 0x3F2A01A01B3603F5
  %19 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %12, i32 1
  %20 = insertelement <2 x double> undef, double %11, i32 0
  %21 = insertelement <2 x double> %20, double %16, i32 1
  %22 = fmul <2 x double> %19, %21
  %23 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %18, i32 1
  %24 = fadd <2 x double> %23, %22
  %25 = fmul double %11, 0x3F56C16C16C20BA0
  %26 = fadd double %25, 0x3F8111111110EB39
  %27 = fmul double %11, 0x3FA555555555553E
  %28 = fadd double %27, 0x3FC555555555555C
  %29 = fmul double %12, %26
  %30 = fadd double %28, %29
  %31 = insertelement <2 x double> undef, double %14, i32 0
  %32 = insertelement <2 x double> %31, double %13, i32 1
  %33 = fmul <2 x double> %24, %32
  %34 = extractelement <2 x double> %33, i32 1
  %35 = fadd double %30, %34
  %36 = extractelement <2 x double> %33, i32 0
  %37 = fadd double %36, %35
  %38 = fmul double %11, %37
  %39 = fadd double %38, 5.000000e-01
  %40 = fmul double %12, %39
  %41 = fadd double %11, %40
  %42 = fadd double %41, 1.000000e+00
  %43 = ashr i32 %6, 1
  %44 = add nsw i32 %43, 1023
  %45 = zext i32 %44 to i64
  %46 = shl i64 %45, 52
  %47 = bitcast i64 %46 to double
  %48 = fmul double %42, %47
  %49 = add i32 %6, 1023
  %50 = sub i32 %49, %43
  %51 = zext i32 %50 to i64
  %52 = shl i64 %51, 52
  %53 = bitcast i64 %52 to double
  %54 = fmul double %48, %53
  %55 = fcmp ogt double %0, 0x40862E42FE102C83
  %56 = select i1 %55, double 0x7FF0000000000000, double %54
  %57 = fcmp olt double %0, -1.000000e+03
  %58 = select i1 %57, double 0.000000e+00, double %56
  ret double %58
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log_u10(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %3, double %0
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, %11
  %15 = bitcast i64 %14 to double
  %16 = select i1 %2, i32 -1087, i32 -1023
  %17 = add nsw i32 %9, %16
  %18 = fadd double %15, -1.000000e+00
  %19 = fadd double %18, 1.000000e+00
  %20 = fadd double %15, 1.000000e+00
  %21 = fadd double %20, -1.000000e+00
  %22 = fdiv double 1.000000e+00, %20
  %23 = bitcast double %20 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %20, %25
  %27 = bitcast double %22 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %22, %29
  %31 = bitcast double %18 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %18, %33
  %35 = fmul double %18, %22
  %36 = fmul double %35, %35
  %37 = fmul double %36, %36
  %38 = fmul double %37, %37
  %39 = fmul double %36, 0x3FC3872E67FE8E84
  %40 = fadd double %39, 0x3FC747353A506035
  %41 = fmul double %37, 0x3FC39C4F5407567E
  %42 = fadd double %41, %40
  %43 = fmul double %36, 0x3FCC71C0A65ECD8E
  %44 = fadd double %43, 0x3FD249249A68A245
  %45 = fmul double %36, 0x3FD99999998F92EA
  %46 = fadd double %45, 0x3FE55555555557AE
  %47 = fmul double %37, %44
  %48 = fadd double %46, %47
  %49 = fmul double %38, %42
  %50 = fadd double %49, %48
  %51 = sitofp i32 %17 to double
  %52 = bitcast double %51 to i64
  %53 = and i64 %52, -134217728
  %54 = bitcast i64 %53 to double
  %55 = fsub double %51, %54
  %56 = fmul double %51, 0x3FE62E42FEFA39EF
  %57 = fmul double %35, 2.000000e+00
  %58 = fadd double %56, %57
  %59 = fmul double %35, %36
  %60 = fmul double %59, %50
  %61 = fadd double %58, %60
  %62 = fcmp olt double %4, 0.000000e+00
  br i1 %62, label %118, label %63

; <label>:63:                                     ; preds = %1
  %64 = fcmp une double %4, 0xFFF0000000000000
  %65 = fcmp une double %4, 0x7FF0000000000000
  %66 = and i1 %64, %65
  %67 = fsub double %58, %61
  %68 = fadd double %60, %67
  %69 = fsub double %56, %58
  %70 = fadd double %57, %69
  %71 = fmul double %51, 0x3C7ABC9E3B39803F
  %72 = fmul double %55, 0x3E4BE8E7BC000000
  %73 = fmul double %55, 0x3FE62E42F8000000
  %74 = fmul double %54, 0x3E4BE8E7BC000000
  %75 = fmul double %54, 0x3FE62E42F8000000
  %76 = fsub double %75, %56
  %77 = fadd double %74, %76
  %78 = fadd double %73, %77
  %79 = fadd double %72, %78
  %80 = fadd double %71, %79
  %81 = fadd double %80, %70
  %82 = fsub double %15, %19
  %83 = fsub double %18, %19
  %84 = fsub double -1.000000e+00, %83
  %85 = fadd double %82, %84
  %86 = fsub double %15, %21
  %87 = fsub double %20, %21
  %88 = fsub double 1.000000e+00, %87
  %89 = fadd double %86, %88
  %90 = fmul double %35, %89
  %91 = fsub double %85, %90
  %92 = fmul double %22, %91
  %93 = fmul double %34, %30
  %94 = fmul double %34, %29
  %95 = fmul double %33, %29
  %96 = fsub double %95, %35
  %97 = fmul double %30, %33
  %98 = fadd double %96, %97
  %99 = fadd double %94, %98
  %100 = fadd double %93, %99
  %101 = fmul double %25, %29
  %102 = fsub double 1.000000e+00, %101
  %103 = fmul double %30, %25
  %104 = fsub double %102, %103
  %105 = fmul double %26, %29
  %106 = fsub double %104, %105
  %107 = fmul double %26, %30
  %108 = fsub double %106, %107
  %109 = fmul double %35, %108
  %110 = fadd double %100, %109
  %111 = fadd double %92, %110
  %112 = fmul double %111, 2.000000e+00
  %113 = fadd double %81, %112
  %114 = fadd double %68, %113
  %115 = fadd double %61, %114
  %116 = select i1 %66, double %115, double 0x7FF0000000000000
  %117 = fcmp ord double %4, 0.000000e+00
  br i1 %117, label %119, label %118

; <label>:118:                                    ; preds = %63, %1
  br label %119

; <label>:119:                                    ; preds = %63, %118
  %120 = phi double [ 0x7FF8000000000000, %118 ], [ %116, %63 ]
  %121 = fcmp oeq double %4, 0.000000e+00
  %122 = select i1 %121, double 0xFFF0000000000000, double %120
  ret double %122
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_pow_u10(double, double) local_unnamed_addr #0 {
  %3 = fmul double %1, 0x3E00000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %1, %6
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fcmp oeq double %7, %9
  br i1 %10, label %16, label %11

; <label>:11:                                     ; preds = %2
  %12 = bitcast double %1 to i64
  %13 = and i64 %12, 9223372036854775807
  %14 = bitcast i64 %13 to double
  %15 = fcmp ult double %14, 0x4340000000000000
  br i1 %15, label %24, label %16

; <label>:16:                                     ; preds = %11, %2
  %17 = and i32 %8, 1
  %18 = icmp eq i32 %17, 0
  %19 = bitcast double %1 to i64
  br i1 %18, label %24, label %20

; <label>:20:                                     ; preds = %16
  %21 = and i64 %19, 9223372036854775807
  %22 = bitcast i64 %21 to double
  %23 = fcmp olt double %22, 0x4340000000000000
  br label %24

; <label>:24:                                     ; preds = %16, %20, %11
  %25 = phi i64 [ %19, %20 ], [ %12, %11 ], [ %19, %16 ]
  %26 = phi i1 [ true, %20 ], [ false, %11 ], [ true, %16 ]
  %27 = phi i1 [ %23, %20 ], [ false, %11 ], [ false, %16 ]
  %28 = bitcast double %0 to i64
  %29 = and i64 %28, 9223372036854775807
  %30 = bitcast i64 %29 to double
  %31 = fcmp olt double %30, 0x10000000000000
  %32 = fmul double %30, 0x43F0000000000000
  %33 = select i1 %31, double %32, double %30
  %34 = fmul double %33, 0x3FF5555555555555
  %35 = bitcast double %34 to i64
  %36 = lshr i64 %35, 52
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 2047
  %39 = sub nsw i32 1023, %38
  %40 = bitcast double %33 to i64
  %41 = zext i32 %39 to i64
  %42 = shl i64 %41, 52
  %43 = add nsw i64 %42, %40
  %44 = bitcast i64 %43 to double
  %45 = select i1 %31, i32 -1087, i32 -1023
  %46 = add nsw i32 %38, %45
  %47 = fadd double %44, -1.000000e+00
  %48 = fadd double %47, 1.000000e+00
  %49 = fsub double %47, %48
  %50 = fsub double -1.000000e+00, %49
  %51 = fsub double %44, %48
  %52 = fadd double %51, %50
  %53 = fadd double %44, 1.000000e+00
  %54 = fadd double %53, -1.000000e+00
  %55 = fsub double %53, %54
  %56 = fsub double 1.000000e+00, %55
  %57 = fsub double %44, %54
  %58 = fadd double %57, %56
  %59 = fdiv double 1.000000e+00, %53
  %60 = bitcast double %53 to i64
  %61 = and i64 %60, -134217728
  %62 = bitcast i64 %61 to double
  %63 = fsub double %53, %62
  %64 = bitcast double %59 to i64
  %65 = and i64 %64, -134217728
  %66 = bitcast i64 %65 to double
  %67 = fsub double %59, %66
  %68 = bitcast double %47 to i64
  %69 = and i64 %68, -134217728
  %70 = bitcast i64 %69 to double
  %71 = fsub double %47, %70
  %72 = fmul double %47, %59
  %73 = fmul double %70, %66
  %74 = fsub double %73, %72
  %75 = fmul double %67, %70
  %76 = fadd double %74, %75
  %77 = fmul double %71, %66
  %78 = fadd double %77, %76
  %79 = fmul double %71, %67
  %80 = fadd double %79, %78
  %81 = fmul double %62, %66
  %82 = fsub double 1.000000e+00, %81
  %83 = fmul double %67, %62
  %84 = fsub double %82, %83
  %85 = fmul double %63, %66
  %86 = fsub double %84, %85
  %87 = fmul double %63, %67
  %88 = fsub double %86, %87
  %89 = fmul double %72, %88
  %90 = fadd double %80, %89
  %91 = fmul double %72, %58
  %92 = fsub double %52, %91
  %93 = fmul double %59, %92
  %94 = fadd double %93, %90
  %95 = bitcast double %72 to i64
  %96 = and i64 %95, -134217728
  %97 = bitcast i64 %96 to double
  %98 = fsub double %72, %97
  %99 = fmul double %72, %72
  %100 = fmul double %97, %97
  %101 = fsub double %100, %99
  %102 = fadd double %97, %97
  %103 = fmul double %102, %98
  %104 = fadd double %101, %103
  %105 = fmul double %98, %98
  %106 = fadd double %105, %104
  %107 = fadd double %94, %94
  %108 = fmul double %72, %107
  %109 = fadd double %106, %108
  %110 = fmul double %99, %99
  %111 = fmul double %110, %110
  %112 = fmul double %111, %111
  %113 = fmul double %99, 0x3FBA6DEA6D1E9D11
  %114 = fadd double %113, 0x3FBE252DDF5F8D0A
  %115 = fmul double %99, 0x3FC110F384A1865C
  %116 = fadd double %115, 0x3FC3B13BB108EFD1
  %117 = fmul double %110, %114
  %118 = fadd double %116, %117
  %119 = fmul double %99, 0x3FC745D17248DAF1
  %120 = fadd double %119, 0x3FCC71C71C76197F
  %121 = fmul double %99, 0x3FD2492492492200
  %122 = fadd double %121, 0x3FD999999999999B
  %123 = fmul double %110, %120
  %124 = fadd double %122, %123
  %125 = fmul double %111, %118
  %126 = fadd double %124, %125
  %127 = fmul double %112, 0x3FBDC2EC09E714D3
  %128 = fadd double %127, %126
  %129 = sitofp i32 %46 to double
  %130 = bitcast double %129 to i64
  %131 = and i64 %130, -134217728
  %132 = bitcast i64 %131 to double
  %133 = fsub double %129, %132
  %134 = fmul double %129, 0x3FE62E42FEFA39EF
  %135 = fmul double %132, 0x3FE62E42F8000000
  %136 = fsub double %135, %134
  %137 = fmul double %132, 0x3E4BE8E7BC000000
  %138 = fadd double %137, %136
  %139 = fmul double %133, 0x3FE62E42F8000000
  %140 = fadd double %139, %138
  %141 = fmul double %133, 0x3E4BE8E7BC000000
  %142 = fadd double %141, %140
  %143 = fmul double %129, 0x3C7ABC9E3B39803F
  %144 = fadd double %143, %142
  %145 = fmul double %72, 2.000000e+00
  %146 = fmul double %94, 2.000000e+00
  %147 = fadd double %134, %145
  %148 = fsub double %134, %147
  %149 = fadd double %145, %148
  %150 = fadd double %144, %149
  %151 = fadd double %150, %146
  %152 = bitcast double %99 to i64
  %153 = and i64 %152, -134217728
  %154 = bitcast i64 %153 to double
  %155 = fsub double %99, %154
  %156 = fmul double %72, %99
  %157 = fmul double %97, %154
  %158 = fsub double %157, %156
  %159 = fmul double %155, %97
  %160 = fadd double %159, %158
  %161 = fmul double %98, %154
  %162 = fadd double %161, %160
  %163 = fmul double %98, %155
  %164 = fadd double %163, %162
  %165 = fmul double %99, %94
  %166 = fadd double %164, %165
  %167 = fmul double %72, %109
  %168 = fadd double %166, %167
  %169 = bitcast double %156 to i64
  %170 = and i64 %169, -134217728
  %171 = bitcast i64 %170 to double
  %172 = fsub double %156, %171
  %173 = fmul double %156, 0x3FE5555555555555
  %174 = fmul double %171, 0x3FE5555550000000
  %175 = fsub double %174, %173
  %176 = fmul double %172, 0x3FE5555550000000
  %177 = fadd double %176, %175
  %178 = fmul double %171, 0x3E45555554000000
  %179 = fadd double %178, %177
  %180 = fmul double %172, 0x3E45555554000000
  %181 = fadd double %180, %179
  %182 = fmul double %156, 0x3C85F00000000000
  %183 = fadd double %182, %181
  %184 = fmul double %168, 0x3FE5555555555555
  %185 = fadd double %183, %184
  %186 = fadd double %147, %173
  %187 = fsub double %147, %186
  %188 = fadd double %173, %187
  %189 = fadd double %188, %151
  %190 = fadd double %189, %185
  %191 = fmul double %99, %156
  %192 = fmul double %154, %171
  %193 = fsub double %192, %191
  %194 = fmul double %155, %171
  %195 = fadd double %194, %193
  %196 = fmul double %172, %154
  %197 = fadd double %196, %195
  %198 = fmul double %155, %172
  %199 = fadd double %198, %197
  %200 = fmul double %99, %168
  %201 = fadd double %199, %200
  %202 = fmul double %156, %109
  %203 = fadd double %202, %201
  %204 = bitcast double %191 to i64
  %205 = and i64 %204, -134217728
  %206 = bitcast i64 %205 to double
  %207 = fsub double %191, %206
  %208 = bitcast double %128 to i64
  %209 = and i64 %208, -134217728
  %210 = bitcast i64 %209 to double
  %211 = fsub double %128, %210
  %212 = fmul double %191, %128
  %213 = fmul double %206, %210
  %214 = fsub double %213, %212
  %215 = fmul double %207, %210
  %216 = fadd double %215, %214
  %217 = fmul double %211, %206
  %218 = fadd double %217, %216
  %219 = fmul double %207, %211
  %220 = fadd double %219, %218
  %221 = fmul double %128, %203
  %222 = fadd double %220, %221
  %223 = fadd double %186, %212
  %224 = fsub double %186, %223
  %225 = fadd double %212, %224
  %226 = fadd double %225, %190
  %227 = fadd double %226, %222
  %228 = bitcast double %223 to i64
  %229 = and i64 %228, -134217728
  %230 = bitcast i64 %229 to double
  %231 = fsub double %223, %230
  %232 = and i64 %25, -134217728
  %233 = bitcast i64 %232 to double
  %234 = fsub double %1, %233
  %235 = fmul double %223, %1
  %236 = fmul double %233, %230
  %237 = fsub double %236, %235
  %238 = fmul double %231, %233
  %239 = fadd double %238, %237
  %240 = fmul double %234, %230
  %241 = fadd double %240, %239
  %242 = fmul double %234, %231
  %243 = fadd double %242, %241
  %244 = fmul double %227, %1
  %245 = fadd double %243, %244
  %246 = fadd double %235, %245
  %247 = fmul double %246, 0x3FF71547652B82FE
  %248 = fcmp olt double %247, 0.000000e+00
  %249 = select i1 %248, double -5.000000e-01, double 5.000000e-01
  %250 = fadd double %247, %249
  %251 = fptosi double %250 to i32
  %252 = sitofp i32 %251 to double
  %253 = fmul double %252, 0xBFE62E42FEFA3000
  %254 = fadd double %235, %253
  %255 = fsub double %254, %235
  %256 = fsub double %254, %255
  %257 = fsub double %235, %256
  %258 = fsub double %253, %255
  %259 = fadd double %258, %257
  %260 = fadd double %245, %259
  %261 = fmul double %252, 0xBD53DE6AF278ECE6
  %262 = fadd double %261, %254
  %263 = fsub double %262, %254
  %264 = fsub double %262, %263
  %265 = fsub double %254, %264
  %266 = fsub double %261, %263
  %267 = fadd double %266, %265
  %268 = fadd double %267, %260
  %269 = fadd double %262, %268
  %270 = fsub double %262, %269
  %271 = fadd double %268, %270
  %272 = fmul double %269, %269
  %273 = fmul double %272, %272
  %274 = fmul double %273, %273
  %275 = fmul double %269, 0x3E5AF559D51456B9
  %276 = fadd double %275, 0x3E928A8F696DB5AD
  %277 = fmul double %269, 0x3EC71DDFD27D265E
  %278 = fadd double %277, 0x3EFA0199EC6C491B
  %279 = fmul double %269, 0x3F2A01A01AE0C33D
  %280 = fadd double %279, 0x3F56C16C1828EC7B
  %281 = fmul double %272, %278
  %282 = fadd double %280, %281
  %283 = fmul double %269, 0x3F8111111110FB68
  %284 = fadd double %283, 0x3FA5555555550E90
  %285 = fmul double %269, 0x3FC5555555555558
  %286 = fadd double %285, 0x3FE0000000000009
  %287 = fmul double %272, %284
  %288 = fadd double %286, %287
  %289 = fmul double %273, %282
  %290 = fadd double %288, %289
  %291 = fmul double %276, %274
  %292 = fadd double %291, %290
  %293 = fadd double %269, 1.000000e+00
  %294 = fsub double 1.000000e+00, %293
  %295 = fadd double %269, %294
  %296 = fadd double %271, %295
  %297 = bitcast double %269 to i64
  %298 = and i64 %297, -134217728
  %299 = bitcast i64 %298 to double
  %300 = fsub double %269, %299
  %301 = fmul double %299, %299
  %302 = fsub double %301, %272
  %303 = fadd double %299, %299
  %304 = fmul double %303, %300
  %305 = fadd double %302, %304
  %306 = fmul double %300, %300
  %307 = fadd double %306, %305
  %308 = fadd double %271, %271
  %309 = fmul double %269, %308
  %310 = fadd double %309, %307
  %311 = bitcast double %272 to i64
  %312 = and i64 %311, -134217728
  %313 = bitcast i64 %312 to double
  %314 = fsub double %272, %313
  %315 = bitcast double %292 to i64
  %316 = and i64 %315, -134217728
  %317 = bitcast i64 %316 to double
  %318 = fsub double %292, %317
  %319 = fmul double %272, %292
  %320 = fmul double %313, %317
  %321 = fsub double %320, %319
  %322 = fmul double %314, %317
  %323 = fadd double %322, %321
  %324 = fmul double %318, %313
  %325 = fadd double %324, %323
  %326 = fmul double %314, %318
  %327 = fadd double %326, %325
  %328 = fmul double %292, %310
  %329 = fadd double %328, %327
  %330 = fadd double %293, %319
  %331 = fsub double %293, %330
  %332 = fadd double %319, %331
  %333 = fadd double %296, %332
  %334 = fadd double %333, %329
  %335 = fadd double %330, %334
  %336 = ashr i32 %251, 31
  %337 = add nsw i32 %336, %251
  %338 = ashr i32 %337, 9
  %339 = sub nsw i32 %338, %336
  %340 = shl nsw i32 %339, 7
  %341 = shl i32 %339, 9
  %342 = add nsw i32 %340, 1023
  %343 = icmp sgt i32 %342, 0
  %344 = select i1 %343, i32 %342, i32 0
  %345 = icmp slt i32 %344, 2047
  %346 = select i1 %345, i32 %344, i32 2047
  %347 = zext i32 %346 to i64
  %348 = shl nuw nsw i64 %347, 52
  %349 = bitcast i64 %348 to double
  %350 = fmul double %335, %349
  %351 = fmul double %350, %349
  %352 = fmul double %351, %349
  %353 = fmul double %352, %349
  %354 = add i32 %251, 1023
  %355 = sub i32 %354, %341
  %356 = zext i32 %355 to i64
  %357 = shl i64 %356, 52
  %358 = bitcast i64 %357 to double
  %359 = fmul double %353, %358
  %360 = fcmp olt double %235, -1.000000e+03
  %361 = select i1 %360, double 0.000000e+00, double %359
  %362 = fcmp ogt double %235, 0x40862E42FE102C83
  %363 = select i1 %362, double 0x7FF0000000000000, double %361
  %364 = fcmp ord double %363, 0.000000e+00
  %365 = select i1 %364, double %363, double 0x7FF0000000000000
  %366 = fcmp ogt double %0, 0.000000e+00
  %367 = select i1 %27, double -1.000000e+00, double 1.000000e+00
  %368 = select i1 %26, double %367, double 0x7FF8000000000000
  %369 = select i1 %366, double 1.000000e+00, double %368
  %370 = fmul double %365, %369
  %371 = fadd double %30, -1.000000e+00
  %372 = bitcast double %371 to i64
  %373 = and i64 %25, -9223372036854775808
  %374 = xor i64 %373, %372
  %375 = bitcast i64 %374 to double
  %376 = fcmp une double %1, 0x7FF0000000000000
  %377 = fcmp une double %1, 0xFFF0000000000000
  %378 = and i1 %377, %376
  br i1 %378, label %384, label %379

; <label>:379:                                    ; preds = %24
  %380 = fcmp olt double %375, 0.000000e+00
  %381 = fcmp oeq double %375, 0.000000e+00
  %382 = select i1 %381, double 1.000000e+00, double 0x7FF0000000000000
  %383 = select i1 %380, double 0.000000e+00, double %382
  br label %384

; <label>:384:                                    ; preds = %379, %24
  %385 = phi double [ %370, %24 ], [ %383, %379 ]
  %386 = fcmp oeq double %0, 0x7FF0000000000000
  %387 = fcmp oeq double %0, 0xFFF0000000000000
  %388 = or i1 %386, %387
  %389 = fcmp oeq double %0, 0.000000e+00
  %390 = or i1 %389, %388
  br i1 %390, label %391, label %403

; <label>:391:                                    ; preds = %384
  br i1 %27, label %392, label %396

; <label>:392:                                    ; preds = %391
  %393 = and i64 %28, -9223372036854775808
  %394 = or i64 %393, 4607182418800017408
  %395 = bitcast i64 %394 to double
  br label %396

; <label>:396:                                    ; preds = %391, %392
  %397 = phi double [ %395, %392 ], [ 1.000000e+00, %391 ]
  %398 = fsub double -0.000000e+00, %1
  %399 = select i1 %389, double %398, double %1
  %400 = fcmp olt double %399, 0.000000e+00
  %401 = select i1 %400, double 0.000000e+00, double 0x7FF0000000000000
  %402 = fmul double %401, %397
  br label %403

; <label>:403:                                    ; preds = %384, %396
  %404 = phi double [ %402, %396 ], [ %385, %384 ]
  %405 = fcmp ord double %0, %1
  %406 = select i1 %405, double %404, double 0x7FF8000000000000
  %407 = fcmp oeq double %1, 0.000000e+00
  %408 = fcmp oeq double %0, 1.000000e+00
  %409 = or i1 %408, %407
  %410 = select i1 %409, double 1.000000e+00, double %406
  ret double %410
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinh_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp olt double %6, 0.000000e+00
  %8 = select i1 %7, double -5.000000e-01, double 5.000000e-01
  %9 = fadd double %6, %8
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, 0xBFE62E42FEFA3000
  %13 = fadd double %12, %4
  %14 = fsub double %13, %4
  %15 = fsub double %13, %14
  %16 = fsub double %4, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  %19 = fadd double %18, 0.000000e+00
  %20 = fmul double %11, 0xBD53DE6AF278ECE6
  %21 = fadd double %20, %13
  %22 = fsub double %21, %13
  %23 = fsub double %21, %22
  %24 = fsub double %13, %23
  %25 = fsub double %20, %22
  %26 = fadd double %25, %24
  %27 = fadd double %26, %19
  %28 = fmul double %21, 0x3DE60632A887194C
  %29 = fadd double %28, 0x3E21F8EAF54829DC
  %30 = fmul double %21, %29
  %31 = fadd double %30, 0x3E5AE652E8103AB6
  %32 = fmul double %21, %31
  %33 = fadd double %32, 0x3E927E4C95A9765C
  %34 = fmul double %21, %33
  %35 = fadd double %34, 0x3EC71DE3A11D7656
  %36 = fmul double %21, %35
  %37 = fadd double %36, 0x3EFA01A01AF6F0B7
  %38 = fmul double %21, %37
  %39 = fadd double %38, 0x3F2A01A01A02D002
  %40 = fmul double %21, %39
  %41 = fadd double %40, 0x3F56C16C16C145CC
  %42 = fmul double %21, %41
  %43 = fadd double %42, 0x3F81111111111119
  %44 = fmul double %21, %43
  %45 = fadd double %44, 0x3FA555555555555A
  %46 = bitcast double %21 to i64
  %47 = and i64 %46, -134217728
  %48 = bitcast i64 %47 to double
  %49 = fsub double %21, %48
  %50 = bitcast double %45 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %45, %52
  %54 = fmul double %21, %45
  %55 = fmul double %48, %52
  %56 = fsub double %55, %54
  %57 = fmul double %49, %52
  %58 = fadd double %57, %56
  %59 = fmul double %53, %48
  %60 = fadd double %59, %58
  %61 = fmul double %49, %53
  %62 = fadd double %61, %60
  %63 = fmul double %27, %45
  %64 = fadd double %63, %62
  %65 = fadd double %54, 0x3FC5555555555555
  %66 = fsub double %65, %54
  %67 = fsub double %65, %66
  %68 = fsub double %54, %67
  %69 = fsub double 0x3FC5555555555555, %66
  %70 = fadd double %69, %68
  %71 = fadd double %70, %64
  %72 = bitcast double %65 to i64
  %73 = and i64 %72, -134217728
  %74 = bitcast i64 %73 to double
  %75 = fsub double %65, %74
  %76 = fmul double %21, %65
  %77 = fmul double %48, %74
  %78 = fsub double %77, %76
  %79 = fmul double %49, %74
  %80 = fadd double %79, %78
  %81 = fmul double %75, %48
  %82 = fadd double %81, %80
  %83 = fmul double %49, %75
  %84 = fadd double %83, %82
  %85 = fmul double %21, %71
  %86 = fadd double %84, %85
  %87 = fmul double %27, %65
  %88 = fadd double %87, %86
  %89 = fadd double %76, 5.000000e-01
  %90 = fsub double %89, %76
  %91 = fsub double %89, %90
  %92 = fsub double %76, %91
  %93 = fsub double 5.000000e-01, %90
  %94 = fadd double %93, %92
  %95 = fadd double %94, %88
  %96 = fmul double %21, %21
  %97 = fmul double %48, %48
  %98 = fsub double %97, %96
  %99 = fadd double %48, %48
  %100 = fmul double %99, %49
  %101 = fadd double %98, %100
  %102 = fmul double %49, %49
  %103 = fadd double %102, %101
  %104 = fadd double %27, %27
  %105 = fmul double %21, %104
  %106 = fadd double %105, %103
  %107 = bitcast double %96 to i64
  %108 = and i64 %107, -134217728
  %109 = bitcast i64 %108 to double
  %110 = fsub double %96, %109
  %111 = bitcast double %89 to i64
  %112 = and i64 %111, -134217728
  %113 = bitcast i64 %112 to double
  %114 = fsub double %89, %113
  %115 = fmul double %96, %89
  %116 = fmul double %109, %113
  %117 = fsub double %116, %115
  %118 = fmul double %110, %113
  %119 = fadd double %118, %117
  %120 = fmul double %114, %109
  %121 = fadd double %120, %119
  %122 = fmul double %110, %114
  %123 = fadd double %122, %121
  %124 = fmul double %96, %95
  %125 = fadd double %123, %124
  %126 = fmul double %106, %89
  %127 = fadd double %126, %125
  %128 = fadd double %21, %115
  %129 = fadd double %27, %127
  %130 = fadd double %128, 1.000000e+00
  %131 = insertelement <2 x double> undef, double %130, i32 0
  %132 = insertelement <2 x double> %131, double %128, i32 1
  %133 = insertelement <2 x double> <double -1.000000e+00, double undef>, double %21, i32 1
  %134 = fadd <2 x double> %132, %133
  %135 = fsub <2 x double> %132, %133
  %136 = shufflevector <2 x double> %134, <2 x double> %135, <2 x i32> <i32 0, i32 3>
  %137 = fsub <2 x double> %132, %136
  %138 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %21, i32 1
  %139 = fsub <2 x double> %138, %137
  %140 = insertelement <2 x double> undef, double %128, i32 0
  %141 = insertelement <2 x double> %140, double %115, i32 1
  %142 = fsub <2 x double> %141, %136
  %143 = fadd <2 x double> %142, %139
  %144 = extractelement <2 x double> %143, i32 1
  %145 = fadd double %144, %129
  %146 = extractelement <2 x double> %143, i32 0
  %147 = fadd double %146, %145
  %148 = ashr i32 %10, 1
  %149 = add nsw i32 %148, 1023
  %150 = zext i32 %149 to i64
  %151 = shl i64 %150, 52
  %152 = bitcast i64 %151 to double
  %153 = fmul double %130, %152
  %154 = add i32 %10, 1023
  %155 = sub i32 %154, %148
  %156 = zext i32 %155 to i64
  %157 = shl i64 %156, 52
  %158 = bitcast i64 %157 to double
  %159 = fmul double %153, %158
  %160 = fmul double %147, %152
  %161 = fmul double %160, %158
  %162 = fcmp olt double %4, -1.000000e+03
  %163 = select i1 %162, double 0.000000e+00, double %159
  %164 = select i1 %162, double 0.000000e+00, double %161
  %165 = fdiv double 1.000000e+00, %163
  %166 = bitcast double %163 to i64
  %167 = and i64 %166, -134217728
  %168 = bitcast i64 %167 to double
  %169 = fsub double %163, %168
  %170 = bitcast double %165 to i64
  %171 = and i64 %170, -134217728
  %172 = bitcast i64 %171 to double
  %173 = fsub double %165, %172
  %174 = fmul double %168, %172
  %175 = fsub double 1.000000e+00, %174
  %176 = fmul double %173, %168
  %177 = fsub double %175, %176
  %178 = fmul double %169, %172
  %179 = fsub double %177, %178
  %180 = fmul double %169, %173
  %181 = fsub double %179, %180
  %182 = fmul double %165, %164
  %183 = fsub double %181, %182
  %184 = fmul double %165, %183
  %185 = fsub double %163, %165
  %186 = fsub double %163, %185
  %187 = fsub double %186, %165
  %188 = fadd double %187, %164
  %189 = fsub double %188, %184
  %190 = fadd double %185, %189
  %191 = fmul double %190, 5.000000e-01
  %192 = fcmp ogt double %4, 7.100000e+02
  %193 = select i1 %192, double 0x7FF0000000000000, double %191
  %194 = fcmp ord double %193, 0.000000e+00
  %195 = bitcast double %193 to i64
  %196 = select i1 %194, i64 %195, i64 9218868437227405312
  %197 = and i64 %2, -9223372036854775808
  %198 = xor i64 %196, %197
  %199 = bitcast i64 %198 to double
  %200 = fcmp ord double %0, 0.000000e+00
  %201 = select i1 %200, double %199, double 0x7FF8000000000000
  ret double %201
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cosh_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp olt double %6, 0.000000e+00
  %8 = select i1 %7, double -5.000000e-01, double 5.000000e-01
  %9 = fadd double %6, %8
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, 0xBFE62E42FEFA3000
  %13 = fadd double %12, %4
  %14 = fsub double %13, %4
  %15 = fsub double %13, %14
  %16 = fsub double %4, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  %19 = fadd double %18, 0.000000e+00
  %20 = fmul double %11, 0xBD53DE6AF278ECE6
  %21 = fadd double %20, %13
  %22 = fsub double %21, %13
  %23 = fsub double %21, %22
  %24 = fsub double %13, %23
  %25 = fsub double %20, %22
  %26 = fadd double %25, %24
  %27 = fadd double %26, %19
  %28 = fmul double %21, 0x3DE60632A887194C
  %29 = fadd double %28, 0x3E21F8EAF54829DC
  %30 = fmul double %21, %29
  %31 = fadd double %30, 0x3E5AE652E8103AB6
  %32 = fmul double %21, %31
  %33 = fadd double %32, 0x3E927E4C95A9765C
  %34 = fmul double %21, %33
  %35 = fadd double %34, 0x3EC71DE3A11D7656
  %36 = fmul double %21, %35
  %37 = fadd double %36, 0x3EFA01A01AF6F0B7
  %38 = fmul double %21, %37
  %39 = fadd double %38, 0x3F2A01A01A02D002
  %40 = fmul double %21, %39
  %41 = fadd double %40, 0x3F56C16C16C145CC
  %42 = fmul double %21, %41
  %43 = fadd double %42, 0x3F81111111111119
  %44 = fmul double %21, %43
  %45 = fadd double %44, 0x3FA555555555555A
  %46 = bitcast double %21 to i64
  %47 = and i64 %46, -134217728
  %48 = bitcast i64 %47 to double
  %49 = fsub double %21, %48
  %50 = bitcast double %45 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %45, %52
  %54 = fmul double %21, %45
  %55 = fmul double %48, %52
  %56 = fsub double %55, %54
  %57 = fmul double %49, %52
  %58 = fadd double %57, %56
  %59 = fmul double %53, %48
  %60 = fadd double %59, %58
  %61 = fmul double %49, %53
  %62 = fadd double %61, %60
  %63 = fmul double %27, %45
  %64 = fadd double %63, %62
  %65 = fadd double %54, 0x3FC5555555555555
  %66 = fsub double %65, %54
  %67 = fsub double %65, %66
  %68 = fsub double %54, %67
  %69 = fsub double 0x3FC5555555555555, %66
  %70 = fadd double %69, %68
  %71 = fadd double %70, %64
  %72 = bitcast double %65 to i64
  %73 = and i64 %72, -134217728
  %74 = bitcast i64 %73 to double
  %75 = fsub double %65, %74
  %76 = fmul double %21, %65
  %77 = fmul double %48, %74
  %78 = fsub double %77, %76
  %79 = fmul double %49, %74
  %80 = fadd double %79, %78
  %81 = fmul double %75, %48
  %82 = fadd double %81, %80
  %83 = fmul double %49, %75
  %84 = fadd double %83, %82
  %85 = fmul double %21, %71
  %86 = fadd double %84, %85
  %87 = fmul double %27, %65
  %88 = fadd double %87, %86
  %89 = fadd double %76, 5.000000e-01
  %90 = fsub double %89, %76
  %91 = fsub double %89, %90
  %92 = fsub double %76, %91
  %93 = fsub double 5.000000e-01, %90
  %94 = fadd double %93, %92
  %95 = fadd double %94, %88
  %96 = fmul double %21, %21
  %97 = fmul double %48, %48
  %98 = fsub double %97, %96
  %99 = fadd double %48, %48
  %100 = fmul double %99, %49
  %101 = fadd double %98, %100
  %102 = fmul double %49, %49
  %103 = fadd double %102, %101
  %104 = fadd double %27, %27
  %105 = fmul double %21, %104
  %106 = fadd double %105, %103
  %107 = bitcast double %96 to i64
  %108 = and i64 %107, -134217728
  %109 = bitcast i64 %108 to double
  %110 = fsub double %96, %109
  %111 = bitcast double %89 to i64
  %112 = and i64 %111, -134217728
  %113 = bitcast i64 %112 to double
  %114 = fsub double %89, %113
  %115 = fmul double %96, %89
  %116 = fmul double %109, %113
  %117 = fsub double %116, %115
  %118 = fmul double %110, %113
  %119 = fadd double %118, %117
  %120 = fmul double %114, %109
  %121 = fadd double %120, %119
  %122 = fmul double %110, %114
  %123 = fadd double %122, %121
  %124 = fmul double %96, %95
  %125 = fadd double %123, %124
  %126 = fmul double %106, %89
  %127 = fadd double %126, %125
  %128 = fadd double %21, %115
  %129 = fadd double %27, %127
  %130 = fadd double %128, 1.000000e+00
  %131 = insertelement <2 x double> undef, double %130, i32 0
  %132 = insertelement <2 x double> %131, double %128, i32 1
  %133 = insertelement <2 x double> <double -1.000000e+00, double undef>, double %21, i32 1
  %134 = fadd <2 x double> %132, %133
  %135 = fsub <2 x double> %132, %133
  %136 = shufflevector <2 x double> %134, <2 x double> %135, <2 x i32> <i32 0, i32 3>
  %137 = fsub <2 x double> %132, %136
  %138 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %21, i32 1
  %139 = fsub <2 x double> %138, %137
  %140 = insertelement <2 x double> undef, double %128, i32 0
  %141 = insertelement <2 x double> %140, double %115, i32 1
  %142 = fsub <2 x double> %141, %136
  %143 = fadd <2 x double> %142, %139
  %144 = extractelement <2 x double> %143, i32 1
  %145 = fadd double %144, %129
  %146 = extractelement <2 x double> %143, i32 0
  %147 = fadd double %146, %145
  %148 = ashr i32 %10, 1
  %149 = add nsw i32 %148, 1023
  %150 = zext i32 %149 to i64
  %151 = shl i64 %150, 52
  %152 = bitcast i64 %151 to double
  %153 = fmul double %130, %152
  %154 = add i32 %10, 1023
  %155 = sub i32 %154, %148
  %156 = zext i32 %155 to i64
  %157 = shl i64 %156, 52
  %158 = bitcast i64 %157 to double
  %159 = fmul double %153, %158
  %160 = fmul double %147, %152
  %161 = fmul double %160, %158
  %162 = fcmp olt double %4, -1.000000e+03
  %163 = select i1 %162, double 0.000000e+00, double %159
  %164 = select i1 %162, double 0.000000e+00, double %161
  %165 = fdiv double 1.000000e+00, %163
  %166 = bitcast double %163 to i64
  %167 = and i64 %166, -134217728
  %168 = bitcast i64 %167 to double
  %169 = fsub double %163, %168
  %170 = bitcast double %165 to i64
  %171 = and i64 %170, -134217728
  %172 = bitcast i64 %171 to double
  %173 = fsub double %165, %172
  %174 = fmul double %168, %172
  %175 = fsub double 1.000000e+00, %174
  %176 = fmul double %173, %168
  %177 = fsub double %175, %176
  %178 = fmul double %169, %172
  %179 = fsub double %177, %178
  %180 = fmul double %169, %173
  %181 = fsub double %179, %180
  %182 = fmul double %165, %164
  %183 = fsub double %181, %182
  %184 = fmul double %165, %183
  %185 = fadd double %163, %165
  %186 = fsub double %163, %185
  %187 = fadd double %165, %186
  %188 = fadd double %187, %164
  %189 = fadd double %188, %184
  %190 = fadd double %185, %189
  %191 = fmul double %190, 5.000000e-01
  %192 = fcmp ogt double %4, 7.100000e+02
  %193 = select i1 %192, double 0x7FF0000000000000, double %191
  %194 = fcmp ord double %193, 0.000000e+00
  %195 = select i1 %194, double %193, double 0x7FF0000000000000
  %196 = fcmp ord double %0, 0.000000e+00
  %197 = select i1 %196, double %195, double 0x7FF8000000000000
  ret double %197
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_tanh_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp olt double %6, 0.000000e+00
  %8 = select i1 %7, double -5.000000e-01, double 5.000000e-01
  %9 = fadd double %6, %8
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, 0xBFE62E42FEFA3000
  %13 = fadd double %12, %4
  %14 = fsub double %13, %4
  %15 = fsub double %13, %14
  %16 = fsub double %4, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  %19 = fadd double %18, 0.000000e+00
  %20 = fmul double %11, 0xBD53DE6AF278ECE6
  %21 = fadd double %20, %13
  %22 = fsub double %21, %13
  %23 = fsub double %21, %22
  %24 = fsub double %13, %23
  %25 = fsub double %20, %22
  %26 = fadd double %25, %24
  %27 = fadd double %26, %19
  %28 = fmul double %21, 0x3DE60632A887194C
  %29 = fadd double %28, 0x3E21F8EAF54829DC
  %30 = fmul double %21, %29
  %31 = fadd double %30, 0x3E5AE652E8103AB6
  %32 = fmul double %21, %31
  %33 = fadd double %32, 0x3E927E4C95A9765C
  %34 = fmul double %21, %33
  %35 = fadd double %34, 0x3EC71DE3A11D7656
  %36 = fmul double %21, %35
  %37 = fadd double %36, 0x3EFA01A01AF6F0B7
  %38 = fmul double %21, %37
  %39 = fadd double %38, 0x3F2A01A01A02D002
  %40 = fmul double %21, %39
  %41 = fadd double %40, 0x3F56C16C16C145CC
  %42 = fmul double %21, %41
  %43 = fadd double %42, 0x3F81111111111119
  %44 = fmul double %21, %43
  %45 = fadd double %44, 0x3FA555555555555A
  %46 = bitcast double %21 to i64
  %47 = and i64 %46, -134217728
  %48 = bitcast i64 %47 to double
  %49 = fsub double %21, %48
  %50 = bitcast double %45 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %45, %52
  %54 = fmul double %21, %45
  %55 = fmul double %48, %52
  %56 = fsub double %55, %54
  %57 = fmul double %49, %52
  %58 = fadd double %57, %56
  %59 = fmul double %53, %48
  %60 = fadd double %59, %58
  %61 = fmul double %49, %53
  %62 = fadd double %61, %60
  %63 = fmul double %27, %45
  %64 = fadd double %63, %62
  %65 = fadd double %54, 0x3FC5555555555555
  %66 = fsub double %65, %54
  %67 = fsub double %65, %66
  %68 = fsub double %54, %67
  %69 = fsub double 0x3FC5555555555555, %66
  %70 = fadd double %69, %68
  %71 = fadd double %70, %64
  %72 = bitcast double %65 to i64
  %73 = and i64 %72, -134217728
  %74 = bitcast i64 %73 to double
  %75 = fsub double %65, %74
  %76 = fmul double %21, %65
  %77 = fmul double %48, %74
  %78 = fsub double %77, %76
  %79 = fmul double %49, %74
  %80 = fadd double %79, %78
  %81 = fmul double %75, %48
  %82 = fadd double %81, %80
  %83 = fmul double %49, %75
  %84 = fadd double %83, %82
  %85 = fmul double %21, %71
  %86 = fadd double %84, %85
  %87 = fmul double %27, %65
  %88 = fadd double %87, %86
  %89 = fadd double %76, 5.000000e-01
  %90 = fsub double %89, %76
  %91 = fsub double %89, %90
  %92 = fsub double %76, %91
  %93 = fsub double 5.000000e-01, %90
  %94 = fadd double %93, %92
  %95 = fadd double %94, %88
  %96 = fmul double %21, %21
  %97 = fmul double %48, %48
  %98 = fsub double %97, %96
  %99 = fadd double %48, %48
  %100 = fmul double %99, %49
  %101 = fadd double %98, %100
  %102 = fmul double %49, %49
  %103 = fadd double %102, %101
  %104 = fadd double %27, %27
  %105 = fmul double %21, %104
  %106 = fadd double %105, %103
  %107 = bitcast double %96 to i64
  %108 = and i64 %107, -134217728
  %109 = bitcast i64 %108 to double
  %110 = fsub double %96, %109
  %111 = bitcast double %89 to i64
  %112 = and i64 %111, -134217728
  %113 = bitcast i64 %112 to double
  %114 = fsub double %89, %113
  %115 = fmul double %96, %89
  %116 = fmul double %109, %113
  %117 = fsub double %116, %115
  %118 = fmul double %110, %113
  %119 = fadd double %118, %117
  %120 = fmul double %114, %109
  %121 = fadd double %120, %119
  %122 = fmul double %110, %114
  %123 = fadd double %122, %121
  %124 = fmul double %96, %95
  %125 = fadd double %123, %124
  %126 = fmul double %106, %89
  %127 = fadd double %126, %125
  %128 = fadd double %21, %115
  %129 = fsub double %128, %21
  %130 = fsub double %128, %129
  %131 = fsub double %21, %130
  %132 = fsub double %115, %129
  %133 = fadd double %132, %131
  %134 = fadd double %27, %127
  %135 = fadd double %133, %134
  %136 = fadd double %128, 1.000000e+00
  %137 = fadd double %136, -1.000000e+00
  %138 = fsub double %136, %137
  %139 = fsub double 1.000000e+00, %138
  %140 = fsub double %128, %137
  %141 = fadd double %140, %139
  %142 = fadd double %141, %135
  %143 = ashr i32 %10, 1
  %144 = add nsw i32 %143, 1023
  %145 = zext i32 %144 to i64
  %146 = shl i64 %145, 52
  %147 = bitcast i64 %146 to double
  %148 = fmul double %136, %147
  %149 = add i32 %10, 1023
  %150 = sub i32 %149, %143
  %151 = zext i32 %150 to i64
  %152 = shl i64 %151, 52
  %153 = bitcast i64 %152 to double
  %154 = fmul double %148, %153
  %155 = fmul double %142, %147
  %156 = fmul double %155, %153
  %157 = fcmp olt double %4, -1.000000e+03
  %158 = select i1 %157, double 0.000000e+00, double %154
  %159 = select i1 %157, double 0.000000e+00, double %156
  %160 = fdiv double 1.000000e+00, %158
  %161 = bitcast double %158 to i64
  %162 = and i64 %161, -134217728
  %163 = bitcast i64 %162 to double
  %164 = fsub double %158, %163
  %165 = bitcast double %160 to i64
  %166 = and i64 %165, -134217728
  %167 = bitcast i64 %166 to double
  %168 = fsub double %160, %167
  %169 = fmul double %163, %167
  %170 = fsub double 1.000000e+00, %169
  %171 = fmul double %168, %163
  %172 = fsub double %170, %171
  %173 = fmul double %164, %167
  %174 = fsub double %172, %173
  %175 = fmul double %164, %168
  %176 = fsub double %174, %175
  %177 = fmul double %160, %159
  %178 = fsub double %176, %177
  %179 = fmul double %160, %178
  %180 = fsub double %158, %160
  %181 = fsub double %158, %180
  %182 = fsub double %181, %160
  %183 = fadd double %182, %159
  %184 = fsub double %183, %179
  %185 = fadd double %158, %160
  %186 = fsub double %158, %185
  %187 = fadd double %160, %186
  %188 = fadd double %187, %159
  %189 = fadd double %188, %179
  %190 = fdiv double 1.000000e+00, %185
  %191 = bitcast double %185 to i64
  %192 = and i64 %191, -134217728
  %193 = bitcast i64 %192 to double
  %194 = fsub double %185, %193
  %195 = bitcast double %190 to i64
  %196 = and i64 %195, -134217728
  %197 = bitcast i64 %196 to double
  %198 = fsub double %190, %197
  %199 = bitcast double %180 to i64
  %200 = and i64 %199, -134217728
  %201 = bitcast i64 %200 to double
  %202 = fsub double %180, %201
  %203 = fmul double %180, %190
  %204 = fmul double %201, %197
  %205 = fsub double %204, %203
  %206 = fmul double %198, %201
  %207 = fadd double %205, %206
  %208 = fmul double %202, %197
  %209 = fadd double %208, %207
  %210 = fmul double %202, %198
  %211 = fadd double %210, %209
  %212 = fmul double %193, %197
  %213 = fsub double 1.000000e+00, %212
  %214 = fmul double %198, %193
  %215 = fsub double %213, %214
  %216 = fmul double %194, %197
  %217 = fsub double %215, %216
  %218 = fmul double %194, %198
  %219 = fsub double %217, %218
  %220 = fmul double %203, %219
  %221 = fadd double %211, %220
  %222 = fmul double %203, %189
  %223 = fsub double %184, %222
  %224 = fmul double %190, %223
  %225 = fadd double %221, %224
  %226 = fadd double %203, %225
  %227 = fcmp ogt double %4, 0x4032B70887229E90
  %228 = select i1 %227, double 1.000000e+00, double %226
  %229 = fcmp ord double %228, 0.000000e+00
  %230 = bitcast double %228 to i64
  %231 = select i1 %229, i64 %230, i64 4607182418800017408
  %232 = and i64 %2, -9223372036854775808
  %233 = xor i64 %231, %232
  %234 = bitcast i64 %233 to double
  %235 = fcmp ord double %0, 0.000000e+00
  %236 = select i1 %235, double %234, double 0x7FF8000000000000
  ret double %236
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinh_u35(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp olt double %5, 0.000000e+00
  %7 = select i1 %6, double -5.000000e-01, double 5.000000e-01
  %8 = fadd double %5, %7
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fmul double %10, 0x3FE62E42FEFA3000
  %12 = fsub double %4, %11
  %13 = fmul double %10, 0x3D53DE6AF278ECE6
  %14 = fsub double %12, %13
  %15 = fmul double %14, %14
  %16 = fmul double %15, %15
  %17 = fmul double %16, %16
  %18 = fmul double %14, 0x3E21F0E4C4ECD775
  %19 = fadd double %18, 0x3E5AF68A28CC800A
  %20 = fmul double %14, 0x3E927E52E0FCD573
  %21 = fadd double %20, 0x3EC71DDF1629E6CE
  %22 = fmul double %14, 0x3EFA01A01780879E
  %23 = fadd double %22, 0x3F2A01A01B3603F5
  %24 = fmul double %15, %21
  %25 = fadd double %23, %24
  %26 = fmul double %14, 0x3F56C16C16C20BA0
  %27 = fadd double %26, 0x3F8111111110EB39
  %28 = fmul double %14, 0x3FA555555555553E
  %29 = fadd double %28, 0x3FC555555555555C
  %30 = fmul double %15, %27
  %31 = fadd double %29, %30
  %32 = fmul double %16, %25
  %33 = fadd double %31, %32
  %34 = fmul double %19, %17
  %35 = fadd double %34, %33
  %36 = fmul double %14, %15
  %37 = fmul double %36, %35
  %38 = fmul double %15, 5.000000e-01
  %39 = fadd double %38, %37
  %40 = fadd double %14, %39
  %41 = icmp eq i32 %9, 0
  br i1 %41, label %57, label %42

; <label>:42:                                     ; preds = %1
  %43 = fadd double %40, 1.000000e+00
  %44 = ashr i32 %9, 1
  %45 = add nsw i32 %44, 1023
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 52
  %48 = bitcast i64 %47 to double
  %49 = fmul double %43, %48
  %50 = add i32 %9, 1023
  %51 = sub i32 %50, %44
  %52 = zext i32 %51 to i64
  %53 = shl i64 %52, 52
  %54 = bitcast i64 %53 to double
  %55 = fmul double %49, %54
  %56 = fadd double %55, -1.000000e+00
  br label %57

; <label>:57:                                     ; preds = %1, %42
  %58 = phi double [ %56, %42 ], [ %40, %1 ]
  %59 = fadd double %58, 2.000000e+00
  %60 = fadd double %58, 1.000000e+00
  %61 = fdiv double %59, %60
  %62 = fmul double %58, 5.000000e-01
  %63 = fmul double %62, %61
  %64 = fcmp ogt double %4, 7.090000e+02
  %65 = select i1 %64, double 0x7FF0000000000000, double %63
  %66 = fcmp ord double %65, 0.000000e+00
  %67 = bitcast double %65 to i64
  %68 = select i1 %66, i64 %67, i64 9218868437227405312
  %69 = and i64 %2, -9223372036854775808
  %70 = xor i64 %68, %69
  %71 = bitcast i64 %70 to double
  %72 = fcmp ord double %0, 0.000000e+00
  %73 = select i1 %72, double %71, double 0x7FF8000000000000
  ret double %73
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cosh_u35(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp olt double %5, 0.000000e+00
  %7 = select i1 %6, double -5.000000e-01, double 5.000000e-01
  %8 = fadd double %5, %7
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fmul double %10, 0x3FE62E42FEFA3000
  %12 = fsub double %4, %11
  %13 = fmul double %10, 0x3D53DE6AF278ECE6
  %14 = fsub double %12, %13
  %15 = fmul double %14, %14
  %16 = fmul double %15, %15
  %17 = fmul double %16, %16
  %18 = fmul double %14, 0x3E21F0E4C4ECD775
  %19 = fadd double %18, 0x3E5AF68A28CC800A
  %20 = fmul double %14, 0x3E927E52E0FCD573
  %21 = fadd double %20, 0x3EC71DDF1629E6CE
  %22 = fmul double %14, 0x3EFA01A01780879E
  %23 = fadd double %22, 0x3F2A01A01B3603F5
  %24 = fmul double %15, %21
  %25 = fadd double %23, %24
  %26 = fmul double %14, 0x3F56C16C16C20BA0
  %27 = fadd double %26, 0x3F8111111110EB39
  %28 = fmul double %14, 0x3FA555555555553E
  %29 = fadd double %28, 0x3FC555555555555C
  %30 = fmul double %15, %27
  %31 = fadd double %29, %30
  %32 = fmul double %16, %25
  %33 = fadd double %31, %32
  %34 = fmul double %19, %17
  %35 = fadd double %34, %33
  %36 = fmul double %14, %35
  %37 = fadd double %36, 5.000000e-01
  %38 = fmul double %15, %37
  %39 = fadd double %14, %38
  %40 = fadd double %39, 1.000000e+00
  %41 = ashr i32 %9, 1
  %42 = add nsw i32 %41, 1023
  %43 = zext i32 %42 to i64
  %44 = shl i64 %43, 52
  %45 = bitcast i64 %44 to double
  %46 = fmul double %40, %45
  %47 = add i32 %9, 1023
  %48 = sub i32 %47, %41
  %49 = zext i32 %48 to i64
  %50 = shl i64 %49, 52
  %51 = bitcast i64 %50 to double
  %52 = fmul double %46, %51
  %53 = fcmp ogt double %4, 0x40862E42FE102C83
  %54 = select i1 %53, double 0x7FF0000000000000, double %52
  %55 = fcmp olt double %4, -1.000000e+03
  %56 = select i1 %55, double 0.000000e+00, double %54
  %57 = fdiv double 5.000000e-01, %56
  %58 = fmul double %56, 5.000000e-01
  %59 = fadd double %57, %58
  %60 = fcmp ogt double %4, 7.090000e+02
  %61 = select i1 %60, double 0x7FF0000000000000, double %59
  %62 = fcmp ord double %61, 0.000000e+00
  %63 = select i1 %62, double %61, double 0x7FF0000000000000
  %64 = fcmp ord double %0, 0.000000e+00
  %65 = select i1 %64, double %63, double 0x7FF8000000000000
  ret double %65
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_tanh_u35(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 2.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp olt double %6, 0.000000e+00
  %8 = select i1 %7, double -5.000000e-01, double 5.000000e-01
  %9 = fadd double %6, %8
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fmul double %11, 0x3FE62E42FEFA3000
  %13 = fsub double %5, %12
  %14 = fmul double %11, 0x3D53DE6AF278ECE6
  %15 = fsub double %13, %14
  %16 = fmul double %15, %15
  %17 = fmul double %16, %16
  %18 = fmul double %17, %17
  %19 = fmul double %15, 0x3E21F0E4C4ECD775
  %20 = fadd double %19, 0x3E5AF68A28CC800A
  %21 = fmul double %15, 0x3E927E52E0FCD573
  %22 = fadd double %21, 0x3EC71DDF1629E6CE
  %23 = fmul double %15, 0x3EFA01A01780879E
  %24 = fadd double %23, 0x3F2A01A01B3603F5
  %25 = fmul double %16, %22
  %26 = fadd double %24, %25
  %27 = fmul double %15, 0x3F56C16C16C20BA0
  %28 = fadd double %27, 0x3F8111111110EB39
  %29 = fmul double %15, 0x3FA555555555553E
  %30 = fadd double %29, 0x3FC555555555555C
  %31 = fmul double %16, %28
  %32 = fadd double %30, %31
  %33 = fmul double %17, %26
  %34 = fadd double %32, %33
  %35 = fmul double %20, %18
  %36 = fadd double %35, %34
  %37 = fmul double %15, %16
  %38 = fmul double %37, %36
  %39 = fmul double %16, 5.000000e-01
  %40 = fadd double %39, %38
  %41 = fadd double %15, %40
  %42 = icmp eq i32 %10, 0
  br i1 %42, label %58, label %43

; <label>:43:                                     ; preds = %1
  %44 = fadd double %41, 1.000000e+00
  %45 = ashr i32 %10, 1
  %46 = add nsw i32 %45, 1023
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 52
  %49 = bitcast i64 %48 to double
  %50 = fmul double %44, %49
  %51 = add i32 %10, 1023
  %52 = sub i32 %51, %45
  %53 = zext i32 %52 to i64
  %54 = shl i64 %53, 52
  %55 = bitcast i64 %54 to double
  %56 = fmul double %50, %55
  %57 = fadd double %56, -1.000000e+00
  br label %58

; <label>:58:                                     ; preds = %1, %43
  %59 = phi double [ %57, %43 ], [ %41, %1 ]
  %60 = fadd double %59, 2.000000e+00
  %61 = fdiv double %59, %60
  %62 = fcmp ogt double %4, 0x4032B70887229E90
  %63 = select i1 %62, double 1.000000e+00, double %61
  %64 = fcmp ord double %63, 0.000000e+00
  %65 = bitcast double %63 to i64
  %66 = select i1 %64, i64 %65, i64 4607182418800017408
  %67 = and i64 %2, -9223372036854775808
  %68 = xor i64 %66, %67
  %69 = bitcast i64 %68 to double
  %70 = fcmp ord double %0, 0.000000e+00
  %71 = select i1 %70, double %69, double 0x7FF8000000000000
  ret double %71
}

; Function Attrs: nounwind uwtable
define double @Sleef_asinh_u10(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ogt double %4, 1.000000e+00
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %1
  %7 = and i64 %2, 9223372036720558080
  %8 = bitcast i64 %7 to double
  %9 = fsub double %4, %8
  br label %28

; <label>:10:                                     ; preds = %1
  %11 = fdiv double 1.000000e+00, %0
  %12 = and i64 %2, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %0, %13
  %15 = bitcast double %11 to i64
  %16 = and i64 %15, -134217728
  %17 = bitcast i64 %16 to double
  %18 = fsub double %11, %17
  %19 = fmul double %13, %17
  %20 = fsub double 1.000000e+00, %19
  %21 = fmul double %18, %13
  %22 = fsub double %20, %21
  %23 = fmul double %14, %17
  %24 = fsub double %22, %23
  %25 = fmul double %14, %18
  %26 = fsub double %24, %25
  %27 = fmul double %11, %26
  br label %28

; <label>:28:                                     ; preds = %6, %10
  %29 = phi double [ %9, %6 ], [ %18, %10 ]
  %30 = phi double [ %8, %6 ], [ %17, %10 ]
  %31 = phi double [ %4, %6 ], [ %11, %10 ]
  %32 = phi double [ 0.000000e+00, %6 ], [ %27, %10 ]
  %33 = fmul double %31, %31
  %34 = fmul double %30, %30
  %35 = fsub double %34, %33
  %36 = fadd double %30, %30
  %37 = fmul double %36, %29
  %38 = fadd double %35, %37
  %39 = fmul double %29, %29
  %40 = fadd double %39, %38
  %41 = fadd double %32, %32
  %42 = fmul double %31, %41
  %43 = fadd double %42, %40
  %44 = fadd double %33, 1.000000e+00
  %45 = fsub double %44, %33
  %46 = fsub double %44, %45
  %47 = fsub double %33, %46
  %48 = fsub double 1.000000e+00, %45
  %49 = fadd double %48, %47
  %50 = fadd double %49, %43
  %51 = fadd double %44, %50
  %52 = tail call double @sqrt(double %51) #5
  %53 = bitcast double %52 to i64
  %54 = and i64 %53, -134217728
  %55 = bitcast i64 %54 to double
  %56 = fsub double %52, %55
  %57 = fmul double %52, %52
  %58 = fmul double %55, %55
  %59 = fsub double %58, %57
  %60 = fmul double %56, %55
  %61 = fadd double %60, %59
  %62 = fadd double %60, %61
  %63 = fmul double %56, %56
  %64 = fadd double %63, %62
  %65 = fadd double %44, %57
  %66 = fsub double %65, %44
  %67 = fsub double %65, %66
  %68 = fsub double %44, %67
  %69 = fsub double %57, %66
  %70 = fadd double %69, %68
  %71 = fadd double %50, %64
  %72 = fadd double %70, %71
  %73 = fdiv double 1.000000e+00, %52
  %74 = bitcast double %73 to i64
  %75 = and i64 %74, -134217728
  %76 = bitcast i64 %75 to double
  %77 = fsub double %73, %76
  %78 = fmul double %55, %76
  %79 = fsub double 1.000000e+00, %78
  %80 = fmul double %77, %55
  %81 = fsub double %79, %80
  %82 = fmul double %56, %76
  %83 = fsub double %81, %82
  %84 = fmul double %56, %77
  %85 = fsub double %83, %84
  %86 = fmul double %73, %85
  %87 = bitcast double %65 to i64
  %88 = and i64 %87, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %65, %89
  %91 = fmul double %73, %65
  %92 = fmul double %76, %89
  %93 = fsub double %92, %91
  %94 = fmul double %90, %76
  %95 = fadd double %94, %93
  %96 = fmul double %77, %89
  %97 = fadd double %96, %95
  %98 = fmul double %77, %90
  %99 = fadd double %98, %97
  %100 = fmul double %65, %86
  %101 = fadd double %99, %100
  %102 = fmul double %73, %72
  %103 = fadd double %102, %101
  %104 = fmul double %91, 5.000000e-01
  %105 = fmul double %103, 5.000000e-01
  br i1 %5, label %106, label %125

; <label>:106:                                    ; preds = %28
  %107 = bitcast double %104 to i64
  %108 = and i64 %107, -134217728
  %109 = bitcast i64 %108 to double
  %110 = fsub double %104, %109
  %111 = and i64 %2, 9223372036720558080
  %112 = bitcast i64 %111 to double
  %113 = fsub double %4, %112
  %114 = fmul double %104, %4
  %115 = fmul double %112, %109
  %116 = fsub double %115, %114
  %117 = fmul double %110, %112
  %118 = fadd double %117, %116
  %119 = fmul double %113, %109
  %120 = fadd double %119, %118
  %121 = fmul double %113, %110
  %122 = fadd double %121, %120
  %123 = fmul double %105, %4
  %124 = fadd double %122, %123
  br label %125

; <label>:125:                                    ; preds = %28, %106
  %126 = phi double [ %114, %106 ], [ %104, %28 ]
  %127 = phi double [ %124, %106 ], [ %105, %28 ]
  %128 = fadd double %126, %0
  %129 = fsub double %126, %128
  %130 = fadd double %129, %0
  %131 = fadd double %127, %130
  %132 = fadd double %128, %131
  %133 = fsub double %128, %132
  %134 = fadd double %131, %133
  %135 = fmul double %132, 0x3FF5555555555555
  %136 = fcmp olt double %135, 0x2D30000000000000
  %137 = fmul double %135, 0x52B0000000000000
  %138 = select i1 %136, double %137, double %135
  %139 = bitcast double %138 to i64
  %140 = lshr i64 %139, 52
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 2047
  %143 = select i1 %136, i32 -1323, i32 -1023
  %144 = add nsw i32 %142, %143
  %145 = sub nsw i32 0, %144
  %146 = ashr i32 %145, 1
  %147 = add nsw i32 %146, 1023
  %148 = zext i32 %147 to i64
  %149 = shl i64 %148, 52
  %150 = bitcast i64 %149 to double
  %151 = fmul double %132, %150
  %152 = sub nsw i32 1023, %144
  %153 = sub nsw i32 %152, %146
  %154 = zext i32 %153 to i64
  %155 = shl i64 %154, 52
  %156 = bitcast i64 %155 to double
  %157 = fmul double %151, %156
  %158 = fmul double %134, %150
  %159 = fmul double %158, %156
  %160 = insertelement <2 x double> undef, double %157, i32 0
  %161 = shufflevector <2 x double> %160, <2 x double> undef, <2 x i32> zeroinitializer
  %162 = fadd <2 x double> %161, <double -1.000000e+00, double 1.000000e+00>
  %163 = fsub <2 x double> %162, %161
  %164 = fsub <2 x double> %162, %163
  %165 = fsub <2 x double> %161, %164
  %166 = fsub <2 x double> <double -1.000000e+00, double 1.000000e+00>, %163
  %167 = fadd <2 x double> %166, %165
  %168 = insertelement <2 x double> undef, double %159, i32 0
  %169 = shufflevector <2 x double> %168, <2 x double> undef, <2 x i32> zeroinitializer
  %170 = fadd <2 x double> %169, %167
  %171 = extractelement <2 x double> %162, i32 1
  %172 = fdiv double 1.000000e+00, %171
  %173 = bitcast double %171 to i64
  %174 = and i64 %173, -134217728
  %175 = bitcast i64 %174 to double
  %176 = fsub double %171, %175
  %177 = bitcast double %172 to i64
  %178 = and i64 %177, -134217728
  %179 = bitcast i64 %178 to double
  %180 = fsub double %172, %179
  %181 = extractelement <2 x double> %162, i32 0
  %182 = bitcast double %181 to i64
  %183 = and i64 %182, -134217728
  %184 = bitcast i64 %183 to double
  %185 = fsub double %181, %184
  %186 = fmul double %181, %172
  %187 = fmul double %184, %179
  %188 = fsub double %187, %186
  %189 = fmul double %180, %184
  %190 = fadd double %188, %189
  %191 = fmul double %185, %179
  %192 = fadd double %191, %190
  %193 = fmul double %185, %180
  %194 = fadd double %193, %192
  %195 = fmul double %175, %179
  %196 = fsub double 1.000000e+00, %195
  %197 = fmul double %180, %175
  %198 = fsub double %196, %197
  %199 = fmul double %176, %179
  %200 = fsub double %198, %199
  %201 = fmul double %176, %180
  %202 = fsub double %200, %201
  %203 = fmul double %186, %202
  %204 = fadd double %194, %203
  %205 = extractelement <2 x double> %170, i32 1
  %206 = fmul double %186, %205
  %207 = extractelement <2 x double> %170, i32 0
  %208 = fsub double %207, %206
  %209 = fmul double %172, %208
  %210 = fadd double %209, %204
  %211 = bitcast double %186 to i64
  %212 = and i64 %211, -134217728
  %213 = bitcast i64 %212 to double
  %214 = fsub double %186, %213
  %215 = fmul double %186, %186
  %216 = fadd double %213, %213
  %217 = fadd double %210, %210
  %218 = fmul double %215, %215
  %219 = fmul double %218, %218
  %220 = fmul double %215, 0x3FC0DB8A525B4A6B
  %221 = fadd double %220, 0x3FC3B3759FB81971
  %222 = insertelement <2 x double> undef, double %218, i32 0
  %223 = insertelement <2 x double> %222, double %215, i32 1
  %224 = fmul <2 x double> %223, <double 0x3FC1BDC9AD06D760, double 0x3FC745C38C19C82A>
  %225 = insertelement <2 x double> <double undef, double 0x3FCC71C750354F90>, double %221, i32 0
  %226 = fadd <2 x double> %224, %225
  %227 = fmul double %215, 0x3FD2492492114D0C
  %228 = fadd double %227, 0x3FD999999999D9EB
  %229 = insertelement <2 x double> undef, double %219, i32 0
  %230 = insertelement <2 x double> %229, double %218, i32 1
  %231 = fmul <2 x double> %230, %226
  %232 = extractelement <2 x double> %231, i32 1
  %233 = fadd double %228, %232
  %234 = extractelement <2 x double> %231, i32 0
  %235 = fadd double %234, %233
  %236 = fmul double %215, %235
  %237 = fadd double %236, 0x3FE5555555555545
  %238 = sitofp i32 %144 to double
  %239 = bitcast double %238 to i64
  %240 = and i64 %239, -134217728
  %241 = bitcast i64 %240 to double
  %242 = fsub double %238, %241
  %243 = fmul double %241, 0x3FE62E42F8000000
  %244 = fmul double %186, %215
  %245 = bitcast double %244 to i64
  %246 = and i64 %245, -134217728
  %247 = bitcast i64 %246 to double
  %248 = fsub double %244, %247
  %249 = bitcast double %237 to i64
  %250 = and i64 %249, -134217728
  %251 = bitcast i64 %250 to double
  %252 = fsub double %237, %251
  %253 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %248, i32 1
  %254 = insertelement <2 x double> undef, double %238, i32 0
  %255 = insertelement <2 x double> %254, double %252, i32 1
  %256 = fmul <2 x double> %253, %255
  %257 = extractelement <2 x double> %256, i32 0
  %258 = fsub double %243, %257
  %259 = fmul double %241, 0x3E4BE8E7BC000000
  %260 = fadd double %259, %258
  %261 = fmul double %242, 0x3FE62E42F8000000
  %262 = fadd double %261, %260
  %263 = fmul double %242, 0x3E4BE8E7BC000000
  %264 = fadd double %263, %262
  %265 = fmul double %238, 0x3C7ABC9E3B39803F
  %266 = fadd double %265, %264
  %267 = fmul double %186, 2.000000e+00
  %268 = fmul double %210, 2.000000e+00
  %269 = bitcast double %215 to i64
  %270 = and i64 %269, -134217728
  %271 = bitcast i64 %270 to double
  %272 = fsub double %215, %271
  %273 = fmul double %213, %271
  %274 = fsub double %273, %244
  %275 = insertelement <2 x double> undef, double %272, i32 0
  %276 = insertelement <2 x double> %275, double %213, i32 1
  %277 = insertelement <2 x double> undef, double %213, i32 0
  %278 = shufflevector <2 x double> %277, <2 x double> undef, <2 x i32> zeroinitializer
  %279 = fmul <2 x double> %276, %278
  %280 = insertelement <2 x double> undef, double %274, i32 0
  %281 = insertelement <2 x double> %280, double %215, i32 1
  %282 = fadd <2 x double> %279, %281
  %283 = fsub <2 x double> %279, %281
  %284 = shufflevector <2 x double> %282, <2 x double> %283, <2 x i32> <i32 0, i32 3>
  %285 = insertelement <2 x double> undef, double %214, i32 0
  %286 = shufflevector <2 x double> %285, <2 x double> undef, <2 x i32> zeroinitializer
  %287 = insertelement <2 x double> undef, double %271, i32 0
  %288 = insertelement <2 x double> %287, double %216, i32 1
  %289 = fmul <2 x double> %286, %288
  %290 = fadd <2 x double> %289, %284
  %291 = insertelement <2 x double> %275, double %214, i32 1
  %292 = fmul <2 x double> %286, %291
  %293 = fadd <2 x double> %292, %290
  %294 = insertelement <2 x double> undef, double %215, i32 0
  %295 = insertelement <2 x double> %294, double %186, i32 1
  %296 = insertelement <2 x double> undef, double %210, i32 0
  %297 = insertelement <2 x double> %296, double %217, i32 1
  %298 = fmul <2 x double> %295, %297
  %299 = fadd <2 x double> %293, %298
  %300 = extractelement <2 x double> %299, i32 1
  %301 = fmul double %186, %300
  %302 = extractelement <2 x double> %299, i32 0
  %303 = fadd double %302, %301
  %304 = fmul double %247, %251
  %305 = insertelement <2 x double> undef, double %244, i32 0
  %306 = insertelement <2 x double> %305, double %303, i32 1
  %307 = insertelement <2 x double> undef, double %237, i32 0
  %308 = shufflevector <2 x double> %307, <2 x double> undef, <2 x i32> zeroinitializer
  %309 = fmul <2 x double> %306, %308
  %310 = extractelement <2 x double> %309, i32 0
  %311 = fsub double %304, %310
  %312 = fmul double %248, %251
  %313 = fadd double %312, %311
  %314 = fmul double %252, %247
  %315 = fadd double %314, %313
  %316 = insertelement <2 x double> undef, double %267, i32 0
  %317 = insertelement <2 x double> %316, double %315, i32 1
  %318 = fadd <2 x double> %256, %317
  %319 = extractelement <2 x double> %318, i32 0
  %320 = fsub double %257, %319
  %321 = fadd double %267, %320
  %322 = fadd double %266, %321
  %323 = fadd double %322, %268
  %324 = fadd <2 x double> %318, %309
  %325 = extractelement <2 x double> %324, i32 0
  %326 = fsub double %319, %325
  %327 = fadd double %310, %326
  %328 = fadd double %327, %323
  %329 = extractelement <2 x double> %324, i32 1
  %330 = fadd double %328, %329
  %331 = fadd double %325, %330
  %332 = fcmp ule double %4, 0x5FEFFFFFFFFFFFFF
  %333 = fcmp ord double %331, 0.000000e+00
  %334 = and i1 %332, %333
  br i1 %334, label %339, label %335

; <label>:335:                                    ; preds = %125
  %336 = and i64 %2, -9223372036854775808
  %337 = or i64 %336, 9218868437227405312
  %338 = bitcast i64 %337 to double
  br label %339

; <label>:339:                                    ; preds = %125, %335
  %340 = phi double [ %338, %335 ], [ %331, %125 ]
  %341 = fcmp ord double %0, 0.000000e+00
  %342 = select i1 %341, double %340, double 0x7FF8000000000000
  %343 = icmp eq i64 %2, -9223372036854775808
  %344 = select i1 %343, double -0.000000e+00, double %342
  ret double %344
}

; Function Attrs: nounwind uwtable
define double @Sleef_acosh_u10(double) local_unnamed_addr #2 {
  %2 = insertelement <2 x double> undef, double %0, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %3, <double 1.000000e+00, double -1.000000e+00>
  %5 = extractelement <2 x double> %4, i32 0
  %6 = fsub double %5, %0
  %7 = fsub double %5, %6
  %8 = fsub double %0, %7
  %9 = fsub double 1.000000e+00, %6
  %10 = fadd double %9, %8
  %11 = fadd double %5, %10
  %12 = tail call double @sqrt(double %11) #5
  %13 = bitcast double %12 to i64
  %14 = and i64 %13, -134217728
  %15 = bitcast i64 %14 to double
  %16 = fsub double %12, %15
  %17 = fmul double %15, %15
  %18 = extractelement <2 x double> %4, i32 1
  %19 = fsub double %18, %0
  %20 = fsub double %18, %19
  %21 = fsub double %0, %20
  %22 = fsub double -1.000000e+00, %19
  %23 = fadd double %22, %21
  %24 = fadd double %18, %23
  %25 = tail call double @sqrt(double %24) #5
  %26 = insertelement <2 x double> undef, double %12, i32 0
  %27 = insertelement <2 x double> %26, double %25, i32 1
  %28 = fmul <2 x double> %27, %27
  %29 = extractelement <2 x double> %28, i32 0
  %30 = fsub double %17, %29
  %31 = fmul double %16, %15
  %32 = fadd double %31, %30
  %33 = fadd double %31, %32
  %34 = fmul double %16, %16
  %35 = fadd double %34, %33
  %36 = fadd <2 x double> %4, %28
  %37 = extractelement <2 x double> %36, i32 0
  %38 = fsub double %37, %5
  %39 = fsub double %37, %38
  %40 = fsub double %5, %39
  %41 = fsub double %29, %38
  %42 = fadd double %41, %40
  %43 = fadd double %10, %35
  %44 = fadd double %42, %43
  %45 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %27
  %46 = extractelement <2 x double> %45, i32 0
  %47 = bitcast double %46 to i64
  %48 = and i64 %47, -134217728
  %49 = bitcast i64 %48 to double
  %50 = fsub double %46, %49
  %51 = fmul double %15, %49
  %52 = fsub double 1.000000e+00, %51
  %53 = fmul double %50, %15
  %54 = fsub double %52, %53
  %55 = fmul double %16, %49
  %56 = fsub double %54, %55
  %57 = fmul double %16, %50
  %58 = fsub double %56, %57
  %59 = fmul double %46, %58
  %60 = bitcast double %37 to i64
  %61 = and i64 %60, -134217728
  %62 = bitcast i64 %61 to double
  %63 = fsub double %37, %62
  %64 = fmul double %49, %62
  %65 = fmul <2 x double> %45, %36
  %66 = extractelement <2 x double> %65, i32 0
  %67 = fsub double %64, %66
  %68 = fmul double %63, %49
  %69 = fadd double %68, %67
  %70 = fmul double %50, %62
  %71 = fadd double %70, %69
  %72 = fmul double %50, %63
  %73 = fadd double %72, %71
  %74 = fmul double %37, %59
  %75 = fadd double %73, %74
  %76 = fmul double %46, %44
  %77 = fadd double %76, %75
  %78 = fmul double %77, 5.000000e-01
  %79 = bitcast double %25 to i64
  %80 = and i64 %79, -134217728
  %81 = bitcast i64 %80 to double
  %82 = fsub double %25, %81
  %83 = fmul double %81, %81
  %84 = extractelement <2 x double> %28, i32 1
  %85 = fsub double %83, %84
  %86 = fmul double %82, %81
  %87 = fadd double %86, %85
  %88 = fadd double %86, %87
  %89 = fmul double %82, %82
  %90 = fadd double %89, %88
  %91 = extractelement <2 x double> %36, i32 1
  %92 = fsub double %91, %18
  %93 = fsub double %91, %92
  %94 = fsub double %18, %93
  %95 = fsub double %84, %92
  %96 = fadd double %95, %94
  %97 = fadd double %23, %90
  %98 = fadd double %96, %97
  %99 = extractelement <2 x double> %45, i32 1
  %100 = bitcast double %99 to i64
  %101 = and i64 %100, -134217728
  %102 = bitcast i64 %101 to double
  %103 = fsub double %99, %102
  %104 = fmul double %81, %102
  %105 = fsub double 1.000000e+00, %104
  %106 = fmul double %103, %81
  %107 = fsub double %105, %106
  %108 = fmul double %82, %102
  %109 = fsub double %107, %108
  %110 = fmul double %82, %103
  %111 = fsub double %109, %110
  %112 = fmul double %99, %111
  %113 = bitcast double %91 to i64
  %114 = and i64 %113, -134217728
  %115 = bitcast i64 %114 to double
  %116 = fsub double %91, %115
  %117 = fmul double %102, %115
  %118 = extractelement <2 x double> %65, i32 1
  %119 = fsub double %117, %118
  %120 = fmul double %116, %102
  %121 = fadd double %120, %119
  %122 = fmul double %103, %115
  %123 = fadd double %122, %121
  %124 = fmul double %103, %116
  %125 = fadd double %124, %123
  %126 = fmul double %91, %112
  %127 = fadd double %125, %126
  %128 = fmul double %99, %98
  %129 = fadd double %128, %127
  %130 = fmul <2 x double> %65, <double 5.000000e-01, double 5.000000e-01>
  %131 = fmul double %129, 5.000000e-01
  %132 = extractelement <2 x double> %130, i32 0
  %133 = bitcast double %132 to i64
  %134 = and i64 %133, -134217728
  %135 = bitcast i64 %134 to double
  %136 = fsub double %132, %135
  %137 = extractelement <2 x double> %130, i32 1
  %138 = bitcast double %137 to i64
  %139 = and i64 %138, -134217728
  %140 = bitcast i64 %139 to double
  %141 = fsub double %137, %140
  %142 = fmul double %132, %137
  %143 = fmul double %135, %140
  %144 = fsub double %143, %142
  %145 = fmul double %136, %140
  %146 = fadd double %145, %144
  %147 = fmul double %141, %135
  %148 = fadd double %147, %146
  %149 = fmul double %136, %141
  %150 = fadd double %149, %148
  %151 = fmul double %132, %131
  %152 = fadd double %150, %151
  %153 = fmul double %137, %78
  %154 = fadd double %153, %152
  %155 = fadd double %142, %0
  %156 = fsub double %155, %142
  %157 = fsub double %155, %156
  %158 = fsub double %142, %157
  %159 = fsub double %0, %156
  %160 = fadd double %159, %158
  %161 = fadd double %160, %154
  %162 = fmul double %155, 0x3FF5555555555555
  %163 = fcmp olt double %162, 0x2D30000000000000
  %164 = fmul double %162, 0x52B0000000000000
  %165 = select i1 %163, double %164, double %162
  %166 = bitcast double %165 to i64
  %167 = lshr i64 %166, 52
  %168 = trunc i64 %167 to i32
  %169 = and i32 %168, 2047
  %170 = select i1 %163, i32 -1323, i32 -1023
  %171 = add nsw i32 %169, %170
  %172 = sub nsw i32 0, %171
  %173 = ashr i32 %172, 1
  %174 = add nsw i32 %173, 1023
  %175 = zext i32 %174 to i64
  %176 = shl i64 %175, 52
  %177 = bitcast i64 %176 to double
  %178 = fmul double %155, %177
  %179 = sub nsw i32 1023, %171
  %180 = sub nsw i32 %179, %173
  %181 = zext i32 %180 to i64
  %182 = shl i64 %181, 52
  %183 = bitcast i64 %182 to double
  %184 = fmul double %178, %183
  %185 = fmul double %161, %177
  %186 = fmul double %185, %183
  %187 = insertelement <2 x double> undef, double %184, i32 0
  %188 = shufflevector <2 x double> %187, <2 x double> undef, <2 x i32> zeroinitializer
  %189 = fadd <2 x double> %188, <double -1.000000e+00, double 1.000000e+00>
  %190 = fsub <2 x double> %189, %188
  %191 = fsub <2 x double> %189, %190
  %192 = fsub <2 x double> %188, %191
  %193 = fsub <2 x double> <double -1.000000e+00, double 1.000000e+00>, %190
  %194 = fadd <2 x double> %193, %192
  %195 = insertelement <2 x double> undef, double %186, i32 0
  %196 = shufflevector <2 x double> %195, <2 x double> undef, <2 x i32> zeroinitializer
  %197 = fadd <2 x double> %196, %194
  %198 = extractelement <2 x double> %189, i32 1
  %199 = fdiv double 1.000000e+00, %198
  %200 = bitcast double %198 to i64
  %201 = and i64 %200, -134217728
  %202 = bitcast i64 %201 to double
  %203 = fsub double %198, %202
  %204 = bitcast double %199 to i64
  %205 = and i64 %204, -134217728
  %206 = bitcast i64 %205 to double
  %207 = fsub double %199, %206
  %208 = extractelement <2 x double> %189, i32 0
  %209 = bitcast double %208 to i64
  %210 = and i64 %209, -134217728
  %211 = bitcast i64 %210 to double
  %212 = fsub double %208, %211
  %213 = fmul double %208, %199
  %214 = fmul double %211, %206
  %215 = fsub double %214, %213
  %216 = fmul double %207, %211
  %217 = fadd double %215, %216
  %218 = fmul double %212, %206
  %219 = fadd double %218, %217
  %220 = fmul double %212, %207
  %221 = fadd double %220, %219
  %222 = fmul double %202, %206
  %223 = fsub double 1.000000e+00, %222
  %224 = fmul double %207, %202
  %225 = fsub double %223, %224
  %226 = fmul double %203, %206
  %227 = fsub double %225, %226
  %228 = fmul double %203, %207
  %229 = fsub double %227, %228
  %230 = fmul double %213, %229
  %231 = fadd double %221, %230
  %232 = extractelement <2 x double> %197, i32 1
  %233 = fmul double %213, %232
  %234 = extractelement <2 x double> %197, i32 0
  %235 = fsub double %234, %233
  %236 = fmul double %199, %235
  %237 = fadd double %236, %231
  %238 = bitcast double %213 to i64
  %239 = and i64 %238, -134217728
  %240 = bitcast i64 %239 to double
  %241 = fsub double %213, %240
  %242 = fmul double %213, %213
  %243 = fadd double %240, %240
  %244 = fadd double %237, %237
  %245 = fmul double %242, %242
  %246 = fmul double %245, %245
  %247 = fmul double %242, 0x3FC0DB8A525B4A6B
  %248 = fadd double %247, 0x3FC3B3759FB81971
  %249 = insertelement <2 x double> undef, double %245, i32 0
  %250 = insertelement <2 x double> %249, double %242, i32 1
  %251 = fmul <2 x double> %250, <double 0x3FC1BDC9AD06D760, double 0x3FC745C38C19C82A>
  %252 = insertelement <2 x double> <double undef, double 0x3FCC71C750354F90>, double %248, i32 0
  %253 = fadd <2 x double> %251, %252
  %254 = fmul double %242, 0x3FD2492492114D0C
  %255 = fadd double %254, 0x3FD999999999D9EB
  %256 = insertelement <2 x double> undef, double %246, i32 0
  %257 = insertelement <2 x double> %256, double %245, i32 1
  %258 = fmul <2 x double> %257, %253
  %259 = extractelement <2 x double> %258, i32 1
  %260 = fadd double %255, %259
  %261 = extractelement <2 x double> %258, i32 0
  %262 = fadd double %261, %260
  %263 = fmul double %242, %262
  %264 = fadd double %263, 0x3FE5555555555545
  %265 = sitofp i32 %171 to double
  %266 = bitcast double %265 to i64
  %267 = and i64 %266, -134217728
  %268 = bitcast i64 %267 to double
  %269 = fsub double %265, %268
  %270 = fmul double %268, 0x3FE62E42F8000000
  %271 = fmul double %213, %242
  %272 = bitcast double %271 to i64
  %273 = and i64 %272, -134217728
  %274 = bitcast i64 %273 to double
  %275 = fsub double %271, %274
  %276 = bitcast double %264 to i64
  %277 = and i64 %276, -134217728
  %278 = bitcast i64 %277 to double
  %279 = fsub double %264, %278
  %280 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %275, i32 1
  %281 = insertelement <2 x double> undef, double %265, i32 0
  %282 = insertelement <2 x double> %281, double %279, i32 1
  %283 = fmul <2 x double> %280, %282
  %284 = extractelement <2 x double> %283, i32 0
  %285 = fsub double %270, %284
  %286 = fmul double %268, 0x3E4BE8E7BC000000
  %287 = fadd double %286, %285
  %288 = fmul double %269, 0x3FE62E42F8000000
  %289 = fadd double %288, %287
  %290 = fmul double %269, 0x3E4BE8E7BC000000
  %291 = fadd double %290, %289
  %292 = fmul double %265, 0x3C7ABC9E3B39803F
  %293 = fadd double %292, %291
  %294 = fmul double %213, 2.000000e+00
  %295 = fmul double %237, 2.000000e+00
  %296 = bitcast double %242 to i64
  %297 = and i64 %296, -134217728
  %298 = bitcast i64 %297 to double
  %299 = fsub double %242, %298
  %300 = fmul double %240, %298
  %301 = fsub double %300, %271
  %302 = insertelement <2 x double> undef, double %299, i32 0
  %303 = insertelement <2 x double> %302, double %240, i32 1
  %304 = insertelement <2 x double> undef, double %240, i32 0
  %305 = shufflevector <2 x double> %304, <2 x double> undef, <2 x i32> zeroinitializer
  %306 = fmul <2 x double> %303, %305
  %307 = insertelement <2 x double> undef, double %301, i32 0
  %308 = insertelement <2 x double> %307, double %242, i32 1
  %309 = fadd <2 x double> %306, %308
  %310 = fsub <2 x double> %306, %308
  %311 = shufflevector <2 x double> %309, <2 x double> %310, <2 x i32> <i32 0, i32 3>
  %312 = insertelement <2 x double> undef, double %241, i32 0
  %313 = shufflevector <2 x double> %312, <2 x double> undef, <2 x i32> zeroinitializer
  %314 = insertelement <2 x double> undef, double %298, i32 0
  %315 = insertelement <2 x double> %314, double %243, i32 1
  %316 = fmul <2 x double> %313, %315
  %317 = fadd <2 x double> %316, %311
  %318 = insertelement <2 x double> %302, double %241, i32 1
  %319 = fmul <2 x double> %313, %318
  %320 = fadd <2 x double> %319, %317
  %321 = insertelement <2 x double> undef, double %242, i32 0
  %322 = insertelement <2 x double> %321, double %213, i32 1
  %323 = insertelement <2 x double> undef, double %237, i32 0
  %324 = insertelement <2 x double> %323, double %244, i32 1
  %325 = fmul <2 x double> %322, %324
  %326 = fadd <2 x double> %320, %325
  %327 = extractelement <2 x double> %326, i32 1
  %328 = fmul double %213, %327
  %329 = extractelement <2 x double> %326, i32 0
  %330 = fadd double %329, %328
  %331 = fmul double %274, %278
  %332 = insertelement <2 x double> undef, double %271, i32 0
  %333 = insertelement <2 x double> %332, double %330, i32 1
  %334 = insertelement <2 x double> undef, double %264, i32 0
  %335 = shufflevector <2 x double> %334, <2 x double> undef, <2 x i32> zeroinitializer
  %336 = fmul <2 x double> %333, %335
  %337 = extractelement <2 x double> %336, i32 0
  %338 = fsub double %331, %337
  %339 = fmul double %275, %278
  %340 = fadd double %339, %338
  %341 = fmul double %279, %274
  %342 = fadd double %341, %340
  %343 = insertelement <2 x double> undef, double %294, i32 0
  %344 = insertelement <2 x double> %343, double %342, i32 1
  %345 = fadd <2 x double> %283, %344
  %346 = extractelement <2 x double> %345, i32 0
  %347 = fsub double %284, %346
  %348 = fadd double %294, %347
  %349 = fadd double %293, %348
  %350 = fadd double %349, %295
  %351 = fadd <2 x double> %345, %336
  %352 = extractelement <2 x double> %351, i32 0
  %353 = fsub double %346, %352
  %354 = fadd double %337, %353
  %355 = fadd double %354, %350
  %356 = extractelement <2 x double> %351, i32 1
  %357 = fadd double %355, %356
  %358 = fadd double %352, %357
  %359 = fcmp ogt double %0, 0x5FEFFFFFFFFFFFFF
  %360 = fcmp ord double %358, 0.000000e+00
  %361 = select i1 %360, double %358, double 0x7FF0000000000000
  %362 = select i1 %359, double 0x7FF0000000000000, double %361
  %363 = fcmp oeq double %0, 1.000000e+00
  %364 = select i1 %363, double 0.000000e+00, double %362
  %365 = fcmp olt double %0, 1.000000e+00
  %366 = select i1 %365, double 0x7FF8000000000000, double %364
  %367 = fcmp ord double %0, 0.000000e+00
  %368 = select i1 %367, double %366, double 0x7FF8000000000000
  ret double %368
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atanh_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 1.000000e+00
  %6 = fadd double %5, -1.000000e+00
  %7 = fsub double %5, %6
  %8 = fsub double 1.000000e+00, %7
  %9 = fsub double %4, %6
  %10 = fadd double %9, %8
  %11 = fsub double -0.000000e+00, %4
  %12 = fsub double 1.000000e+00, %4
  %13 = fadd double %12, -1.000000e+00
  %14 = fsub double %12, %13
  %15 = fsub double 1.000000e+00, %14
  %16 = fsub double %11, %13
  %17 = fadd double %16, %15
  %18 = fdiv double 1.000000e+00, %12
  %19 = bitcast double %12 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %12, %21
  %23 = bitcast double %18 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %18, %25
  %27 = bitcast double %5 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %5, %29
  %31 = fmul double %5, %18
  %32 = fmul double %29, %25
  %33 = fsub double %32, %31
  %34 = fmul double %26, %29
  %35 = fadd double %33, %34
  %36 = fmul double %30, %25
  %37 = fadd double %36, %35
  %38 = fmul double %30, %26
  %39 = fadd double %38, %37
  %40 = fmul double %21, %25
  %41 = fsub double 1.000000e+00, %40
  %42 = fmul double %26, %21
  %43 = fsub double %41, %42
  %44 = fmul double %22, %25
  %45 = fsub double %43, %44
  %46 = fmul double %22, %26
  %47 = fsub double %45, %46
  %48 = fmul double %31, %47
  %49 = fadd double %39, %48
  %50 = fmul double %31, %17
  %51 = fsub double %10, %50
  %52 = fmul double %18, %51
  %53 = fadd double %52, %49
  %54 = fmul double %31, 0x3FF5555555555555
  %55 = fcmp olt double %54, 0x2D30000000000000
  %56 = fmul double %54, 0x52B0000000000000
  %57 = select i1 %55, double %56, double %54
  %58 = bitcast double %57 to i64
  %59 = lshr i64 %58, 52
  %60 = trunc i64 %59 to i32
  %61 = and i32 %60, 2047
  %62 = select i1 %55, i32 -1323, i32 -1023
  %63 = add nsw i32 %61, %62
  %64 = sub nsw i32 0, %63
  %65 = ashr i32 %64, 1
  %66 = add nsw i32 %65, 1023
  %67 = zext i32 %66 to i64
  %68 = shl i64 %67, 52
  %69 = bitcast i64 %68 to double
  %70 = fmul double %31, %69
  %71 = sub nsw i32 1023, %63
  %72 = sub nsw i32 %71, %65
  %73 = zext i32 %72 to i64
  %74 = shl i64 %73, 52
  %75 = bitcast i64 %74 to double
  %76 = fmul double %70, %75
  %77 = fmul double %53, %69
  %78 = fmul double %77, %75
  %79 = fadd double %76, -1.000000e+00
  %80 = fsub double %79, %76
  %81 = fsub double %79, %80
  %82 = fsub double %76, %81
  %83 = fsub double -1.000000e+00, %80
  %84 = fadd double %83, %82
  %85 = fadd double %78, %84
  %86 = fadd double %76, 1.000000e+00
  %87 = fsub double %86, %76
  %88 = fsub double %86, %87
  %89 = fsub double %76, %88
  %90 = fsub double 1.000000e+00, %87
  %91 = fadd double %90, %89
  %92 = fadd double %78, %91
  %93 = fdiv double 1.000000e+00, %86
  %94 = bitcast double %86 to i64
  %95 = and i64 %94, -134217728
  %96 = bitcast i64 %95 to double
  %97 = fsub double %86, %96
  %98 = bitcast double %93 to i64
  %99 = and i64 %98, -134217728
  %100 = bitcast i64 %99 to double
  %101 = fsub double %93, %100
  %102 = bitcast double %79 to i64
  %103 = and i64 %102, -134217728
  %104 = bitcast i64 %103 to double
  %105 = fsub double %79, %104
  %106 = fmul double %79, %93
  %107 = fmul double %104, %100
  %108 = fsub double %107, %106
  %109 = fmul double %101, %104
  %110 = fadd double %108, %109
  %111 = fmul double %105, %100
  %112 = fadd double %111, %110
  %113 = fmul double %105, %101
  %114 = fadd double %113, %112
  %115 = fmul double %96, %100
  %116 = fsub double 1.000000e+00, %115
  %117 = fmul double %101, %96
  %118 = fsub double %116, %117
  %119 = fmul double %97, %100
  %120 = fsub double %118, %119
  %121 = fmul double %97, %101
  %122 = fsub double %120, %121
  %123 = fmul double %106, %122
  %124 = fadd double %114, %123
  %125 = fmul double %106, %92
  %126 = fsub double %85, %125
  %127 = fmul double %93, %126
  %128 = fadd double %127, %124
  %129 = bitcast double %106 to i64
  %130 = and i64 %129, -134217728
  %131 = bitcast i64 %130 to double
  %132 = fsub double %106, %131
  %133 = fmul double %106, %106
  %134 = fmul double %131, %131
  %135 = fsub double %134, %133
  %136 = fadd double %131, %131
  %137 = fmul double %136, %132
  %138 = fadd double %135, %137
  %139 = fmul double %132, %132
  %140 = fadd double %139, %138
  %141 = fadd double %128, %128
  %142 = fmul double %106, %141
  %143 = fadd double %140, %142
  %144 = fmul double %133, %133
  %145 = fmul double %144, %144
  %146 = fmul double %133, 0x3FC0DB8A525B4A6B
  %147 = fadd double %146, 0x3FC3B3759FB81971
  %148 = fmul double %144, 0x3FC1BDC9AD06D760
  %149 = fadd double %148, %147
  %150 = fmul double %133, 0x3FC745C38C19C82A
  %151 = fadd double %150, 0x3FCC71C750354F90
  %152 = fmul double %133, 0x3FD2492492114D0C
  %153 = fadd double %152, 0x3FD999999999D9EB
  %154 = fmul double %144, %151
  %155 = fadd double %153, %154
  %156 = fmul double %145, %149
  %157 = fadd double %156, %155
  %158 = fmul double %133, %157
  %159 = fadd double %158, 0x3FE5555555555545
  %160 = sitofp i32 %63 to double
  %161 = bitcast double %160 to i64
  %162 = and i64 %161, -134217728
  %163 = bitcast i64 %162 to double
  %164 = fsub double %160, %163
  %165 = fmul double %160, 0x3FE62E42FEFA39EF
  %166 = fmul double %163, 0x3FE62E42F8000000
  %167 = fsub double %166, %165
  %168 = fmul double %163, 0x3E4BE8E7BC000000
  %169 = fadd double %168, %167
  %170 = fmul double %164, 0x3FE62E42F8000000
  %171 = fadd double %170, %169
  %172 = fmul double %164, 0x3E4BE8E7BC000000
  %173 = fadd double %172, %171
  %174 = fmul double %160, 0x3C7ABC9E3B39803F
  %175 = fadd double %174, %173
  %176 = fmul double %106, 2.000000e+00
  %177 = fmul double %128, 2.000000e+00
  %178 = fadd double %165, %176
  %179 = fsub double %165, %178
  %180 = fadd double %176, %179
  %181 = fadd double %175, %180
  %182 = fadd double %181, %177
  %183 = bitcast double %133 to i64
  %184 = and i64 %183, -134217728
  %185 = bitcast i64 %184 to double
  %186 = fsub double %133, %185
  %187 = fmul double %106, %133
  %188 = fmul double %131, %185
  %189 = fsub double %188, %187
  %190 = fmul double %186, %131
  %191 = fadd double %190, %189
  %192 = fmul double %132, %185
  %193 = fadd double %192, %191
  %194 = fmul double %132, %186
  %195 = fadd double %194, %193
  %196 = fmul double %133, %128
  %197 = fadd double %195, %196
  %198 = fmul double %106, %143
  %199 = fadd double %197, %198
  %200 = bitcast double %187 to i64
  %201 = and i64 %200, -134217728
  %202 = bitcast i64 %201 to double
  %203 = fsub double %187, %202
  %204 = bitcast double %159 to i64
  %205 = and i64 %204, -134217728
  %206 = bitcast i64 %205 to double
  %207 = fsub double %159, %206
  %208 = fmul double %187, %159
  %209 = fmul double %202, %206
  %210 = fsub double %209, %208
  %211 = fmul double %203, %206
  %212 = fadd double %211, %210
  %213 = fmul double %207, %202
  %214 = fadd double %213, %212
  %215 = fmul double %203, %207
  %216 = fadd double %215, %214
  %217 = fmul double %159, %199
  %218 = fadd double %217, %216
  %219 = fadd double %178, %208
  %220 = fsub double %178, %219
  %221 = fadd double %208, %220
  %222 = fadd double %221, %182
  %223 = fadd double %222, %218
  %224 = fcmp ogt double %4, 1.000000e+00
  br i1 %224, label %231, label %225

; <label>:225:                                    ; preds = %1
  %226 = fcmp oeq double %4, 1.000000e+00
  br i1 %226, label %231, label %227

; <label>:227:                                    ; preds = %225
  %228 = fadd double %219, %223
  %229 = fmul double %228, 5.000000e-01
  %230 = bitcast double %229 to i64
  br label %231

; <label>:231:                                    ; preds = %227, %225, %1
  %232 = phi i64 [ 9221120237041090560, %1 ], [ %230, %227 ], [ 9218868437227405312, %225 ]
  %233 = and i64 %2, -9223372036854775808
  %234 = xor i64 %232, %233
  %235 = bitcast i64 %234 to double
  %236 = fcmp une double %0, 0x7FF0000000000000
  %237 = fcmp une double %0, 0xFFF0000000000000
  %238 = and i1 %237, %236
  %239 = fcmp ord double %235, 0.000000e+00
  %240 = and i1 %238, %239
  %241 = select i1 %240, double %235, double 0x7FF8000000000000
  ret double %241
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cbrt_u35(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %6, double %4
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = select i1 %5, i32 -1323, i32 -1023
  %13 = add nsw i32 %11, %12
  %14 = xor i32 %13, -2
  %15 = ashr i32 %14, 1
  %16 = add nsw i32 %15, 1023
  %17 = zext i32 %16 to i64
  %18 = shl i64 %17, 52
  %19 = bitcast i64 %18 to double
  %20 = fmul double %19, %0
  %21 = sub nsw i32 1022, %13
  %22 = sub nsw i32 %21, %15
  %23 = zext i32 %22 to i64
  %24 = shl i64 %23, 52
  %25 = bitcast i64 %24 to double
  %26 = fmul double %20, %25
  %27 = add nsw i32 %13, 6145
  %28 = srem i32 %27, 3
  %29 = icmp eq i32 %28, 1
  %30 = select i1 %29, double 0x3FF428A2F98D728B, double 1.000000e+00
  %31 = icmp eq i32 %28, 2
  %32 = select i1 %31, double 0x3FF965FEA53D6E3D, double %30
  %33 = sdiv i32 %27, 3
  %34 = add nsw i32 %33, -2048
  %35 = ashr i32 %34, 1
  %36 = add nsw i32 %35, 1023
  %37 = zext i32 %36 to i64
  %38 = shl i64 %37, 52
  %39 = bitcast i64 %38 to double
  %40 = fmul double %32, %39
  %41 = add nsw i32 %33, 3071
  %42 = sub nsw i32 %41, %35
  %43 = zext i32 %42 to i64
  %44 = shl i64 %43, 52
  %45 = bitcast i64 %44 to double
  %46 = fmul double %40, %45
  %47 = bitcast double %46 to i64
  %48 = bitcast double %26 to i64
  %49 = and i64 %48, -9223372036854775808
  %50 = xor i64 %49, %47
  %51 = bitcast i64 %50 to double
  %52 = and i64 %48, 9223372036854775807
  %53 = bitcast i64 %52 to double
  %54 = fmul double %53, 0x3FE47CE4F76BED42
  %55 = fsub double 0x4007B141AAA12A9C, %54
  %56 = fmul double %55, %53
  %57 = fadd double %56, 0xC016EF22A5E505B3
  %58 = fmul double %57, %53
  %59 = fadd double %58, 0x401828DC834C5911
  %60 = fmul double %59, %53
  %61 = fadd double %60, 0xC00EDE0AF7836A8B
  %62 = fmul double %61, %53
  %63 = fadd double %62, 0x4001D887ACE5AC54
  %64 = fmul double %63, %63
  %65 = fmul double %64, %64
  %66 = fmul double %65, %53
  %67 = fsub double %66, %63
  %68 = fmul double %67, 0x3FD5555555555555
  %69 = fsub double %63, %68
  %70 = fmul double %69, %53
  %71 = fmul double %69, %70
  %72 = fmul double %71, 0x3FE5555555555555
  %73 = fmul double %69, %71
  %74 = fadd double %73, -1.000000e+00
  %75 = fmul double %72, %74
  %76 = fsub double %71, %75
  %77 = fmul double %76, %51
  ret double %77
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cbrt_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %6, double %4
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = select i1 %5, i32 -1323, i32 -1023
  %13 = add nsw i32 %11, %12
  %14 = xor i32 %13, -2
  %15 = ashr i32 %14, 1
  %16 = add nsw i32 %15, 1023
  %17 = zext i32 %16 to i64
  %18 = shl i64 %17, 52
  %19 = bitcast i64 %18 to double
  %20 = fmul double %19, %0
  %21 = sub nsw i32 1022, %13
  %22 = sub nsw i32 %21, %15
  %23 = zext i32 %22 to i64
  %24 = shl i64 %23, 52
  %25 = bitcast i64 %24 to double
  %26 = fmul double %20, %25
  %27 = add nsw i32 %13, 6145
  %28 = srem i32 %27, 3
  %29 = sdiv i32 %27, 3
  switch i32 %28, label %31 [
    i32 1, label %32
    i32 2, label %30
  ]

; <label>:30:                                     ; preds = %1
  br label %32

; <label>:31:                                     ; preds = %1
  br label %32

; <label>:32:                                     ; preds = %1, %31, %30
  %33 = phi i64 [ 4609827837958778429, %30 ], [ 4608352999143469707, %1 ], [ 4607182418800017408, %31 ]
  %34 = phi i64 [ -4855069610512929015, %30 ], [ -4864489982484634594, %1 ], [ 0, %31 ]
  %35 = bitcast double %26 to i64
  %36 = and i64 %35, -9223372036854775808
  %37 = or i64 %33, %36
  %38 = bitcast i64 %37 to double
  %39 = xor i64 %34, %36
  %40 = bitcast i64 %39 to double
  %41 = and i64 %35, 9223372036854775807
  %42 = bitcast i64 %41 to double
  %43 = fmul double %42, 0x3FE47CE4F76BED42
  %44 = fsub double 0x4007B141AAA12A9C, %43
  %45 = fmul double %44, %42
  %46 = fadd double %45, 0xC016EF22A5E505B3
  %47 = fmul double %46, %42
  %48 = fadd double %47, 0x401828DC834C5911
  %49 = fmul double %48, %42
  %50 = fadd double %49, 0xC00EDE0AF7836A8B
  %51 = fmul double %50, %42
  %52 = fadd double %51, 0x4001D887ACE5AC54
  %53 = fmul double %52, %52
  %54 = fmul double %53, %53
  %55 = fmul double %54, %42
  %56 = fsub double %55, %52
  %57 = fmul double %56, 0x3FD5555555555555
  %58 = fsub double %52, %57
  %59 = bitcast double %58 to i64
  %60 = and i64 %59, -134217728
  %61 = bitcast i64 %60 to double
  %62 = fsub double %58, %61
  %63 = fmul double %58, %58
  %64 = fmul double %61, %61
  %65 = fsub double %64, %63
  %66 = fmul double %62, %61
  %67 = fadd double %66, %65
  %68 = fadd double %66, %67
  %69 = fmul double %62, %62
  %70 = fadd double %69, %68
  %71 = bitcast double %63 to i64
  %72 = and i64 %71, -134217728
  %73 = bitcast i64 %72 to double
  %74 = fsub double %63, %73
  %75 = fmul double %63, %63
  %76 = fmul double %73, %73
  %77 = fsub double %76, %75
  %78 = fmul double %74, %73
  %79 = fadd double %78, %77
  %80 = fadd double %78, %79
  %81 = fmul double %74, %74
  %82 = fadd double %81, %80
  %83 = fmul double %63, %70
  %84 = fadd double %83, %82
  %85 = fadd double %83, %84
  %86 = bitcast double %75 to i64
  %87 = and i64 %86, -134217728
  %88 = bitcast i64 %87 to double
  %89 = fsub double %75, %88
  %90 = and i64 %35, 9223372036720558080
  %91 = bitcast i64 %90 to double
  %92 = fsub double %42, %91
  %93 = fmul double %75, %42
  %94 = fmul double %91, %88
  %95 = fsub double %94, %93
  %96 = fmul double %89, %91
  %97 = fadd double %96, %95
  %98 = fmul double %92, %88
  %99 = fadd double %98, %97
  %100 = fmul double %92, %89
  %101 = fadd double %100, %99
  %102 = fmul double %85, %42
  %103 = fadd double %101, %102
  %104 = fsub double -0.000000e+00, %58
  %105 = fsub double %93, %58
  %106 = fsub double %105, %93
  %107 = fsub double %105, %106
  %108 = fsub double %93, %107
  %109 = fsub double %104, %106
  %110 = fadd double %109, %108
  %111 = fadd double %110, %103
  %112 = fadd double %105, %111
  %113 = fmul double %112, 0xBFE5555555555555
  %114 = fmul double %58, %113
  %115 = fadd double %63, %114
  %116 = fsub double %115, %63
  %117 = fsub double %115, %116
  %118 = fsub double %63, %117
  %119 = fsub double %114, %116
  %120 = fadd double %119, %118
  %121 = fadd double %70, %120
  %122 = bitcast double %115 to i64
  %123 = and i64 %122, -134217728
  %124 = bitcast i64 %123 to double
  %125 = fsub double %115, %124
  %126 = fmul double %115, %42
  %127 = fmul double %91, %124
  %128 = fsub double %127, %126
  %129 = fmul double %125, %91
  %130 = fadd double %129, %128
  %131 = fmul double %92, %124
  %132 = fadd double %131, %130
  %133 = fmul double %92, %125
  %134 = fadd double %133, %132
  %135 = fmul double %121, %42
  %136 = fadd double %135, %134
  %137 = bitcast double %126 to i64
  %138 = and i64 %137, -134217728
  %139 = bitcast i64 %138 to double
  %140 = fsub double %126, %139
  %141 = and i64 %37, -4612409501507649536
  %142 = bitcast i64 %141 to double
  %143 = fsub double %38, %142
  %144 = fmul double %126, %38
  %145 = fmul double %139, %142
  %146 = fsub double %145, %144
  %147 = fmul double %140, %142
  %148 = fadd double %147, %146
  %149 = fmul double %143, %139
  %150 = fadd double %149, %148
  %151 = fmul double %140, %143
  %152 = fadd double %151, %150
  %153 = fmul double %126, %40
  %154 = fadd double %153, %152
  %155 = fmul double %136, %38
  %156 = fadd double %155, %154
  %157 = fadd double %144, %156
  %158 = add nsw i32 %29, -2048
  %159 = ashr i32 %158, 1
  %160 = add nsw i32 %159, 1023
  %161 = zext i32 %160 to i64
  %162 = shl i64 %161, 52
  %163 = bitcast i64 %162 to double
  %164 = fmul double %157, %163
  %165 = add nsw i32 %29, 3071
  %166 = sub nsw i32 %165, %159
  %167 = zext i32 %166 to i64
  %168 = shl i64 %167, 52
  %169 = bitcast i64 %168 to double
  %170 = fmul double %164, %169
  %171 = fcmp une double %42, 0x7FF0000000000000
  %172 = fcmp une double %42, 0xFFF0000000000000
  %173 = and i1 %172, %171
  %174 = or i64 %36, 9218868437227405312
  %175 = bitcast i64 %174 to double
  %176 = select i1 %173, double %170, double %175
  %177 = fcmp oeq double %42, 0.000000e+00
  %178 = bitcast i64 %36 to double
  %179 = select i1 %177, double %178, double %176
  ret double %179
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp2_u10(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double -5.000000e-01, double 5.000000e-01
  %4 = fadd double %3, %0
  %5 = fptosi double %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fsub double %0, %6
  %8 = fmul double %7, %7
  %9 = fmul double %8, %8
  %10 = fmul double %9, %9
  %11 = fmul double %7, 0x3DFE7901CA95E150
  %12 = fadd double %11, 0x3E3E6106D72C1C17
  %13 = fmul double %7, 0x3E7B5266946BF979
  %14 = fadd double %13, 0x3EB62BFCDABCBB81
  %15 = fmul double %7, 0x3EEFFCBFBC12CC80
  %16 = fadd double %15, 0x3F24309130CB34EC
  %17 = fmul double %8, %14
  %18 = fadd double %16, %17
  %19 = fmul double %7, 0x3F55D87FE78C5960
  %20 = fadd double %19, 0x3F83B2AB6FBA08F0
  %21 = fmul double %7, 0x3FAC6B08D704A01F
  %22 = fadd double %21, 0x3FCEBFBDFF82C5A1
  %23 = fmul double %8, %20
  %24 = fadd double %22, %23
  %25 = fmul double %9, %18
  %26 = fadd double %24, %25
  %27 = fmul double %12, %10
  %28 = fadd double %27, %26
  %29 = fmul double %7, %28
  %30 = fadd double %29, 0x3FE62E42FEFA39EF
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %30, %33
  %35 = bitcast double %7 to i64
  %36 = and i64 %35, -134217728
  %37 = bitcast i64 %36 to double
  %38 = fsub double %7, %37
  %39 = fmul double %7, %30
  %40 = fmul double %37, %33
  %41 = fsub double %40, %39
  %42 = fmul double %34, %37
  %43 = fadd double %42, %41
  %44 = fmul double %38, %33
  %45 = fadd double %44, %43
  %46 = fmul double %38, %34
  %47 = fadd double %46, %45
  %48 = fadd double %39, 1.000000e+00
  %49 = fsub double 1.000000e+00, %48
  %50 = fadd double %39, %49
  %51 = fadd double %50, %47
  %52 = fadd double %48, %51
  %53 = ashr i32 %5, 1
  %54 = add nsw i32 %53, 1023
  %55 = zext i32 %54 to i64
  %56 = shl i64 %55, 52
  %57 = bitcast i64 %56 to double
  %58 = fmul double %52, %57
  %59 = add i32 %5, 1023
  %60 = sub i32 %59, %53
  %61 = zext i32 %60 to i64
  %62 = shl i64 %61, 52
  %63 = bitcast i64 %62 to double
  %64 = fmul double %58, %63
  %65 = fcmp ult double %0, 1.024000e+03
  %66 = select i1 %65, double %64, double 0x7FF0000000000000
  %67 = fcmp olt double %0, -2.000000e+03
  %68 = select i1 %67, double 0.000000e+00, double %66
  ret double %68
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp2_u35(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double -5.000000e-01, double 5.000000e-01
  %4 = fadd double %3, %0
  %5 = fptosi double %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fsub double %0, %6
  %8 = fmul double %7, 0x3DFE7901CA95E150
  %9 = fadd double %8, 0x3E3E6106D72C1C17
  %10 = fmul double %7, %9
  %11 = fadd double %10, 0x3E7B5266946BF979
  %12 = fmul double %7, %11
  %13 = fadd double %12, 0x3EB62BFCDABCBB81
  %14 = fmul double %7, %13
  %15 = fadd double %14, 0x3EEFFCBFBC12CC80
  %16 = fmul double %7, %15
  %17 = fadd double %16, 0x3F24309130CB34EC
  %18 = fmul double %7, %17
  %19 = fadd double %18, 0x3F55D87FE78C5960
  %20 = fmul double %7, %19
  %21 = fadd double %20, 0x3F83B2AB6FBA08F0
  %22 = fmul double %7, %21
  %23 = fadd double %22, 0x3FAC6B08D704A01F
  %24 = fmul double %7, %23
  %25 = fadd double %24, 0x3FCEBFBDFF82C5A1
  %26 = fmul double %7, %25
  %27 = fadd double %26, 0x3FE62E42FEFA39EF
  %28 = fmul double %7, %27
  %29 = fadd double %28, 1.000000e+00
  %30 = ashr i32 %5, 1
  %31 = add nsw i32 %30, 1023
  %32 = zext i32 %31 to i64
  %33 = shl i64 %32, 52
  %34 = bitcast i64 %33 to double
  %35 = fmul double %29, %34
  %36 = add i32 %5, 1023
  %37 = sub i32 %36, %30
  %38 = zext i32 %37 to i64
  %39 = shl i64 %38, 52
  %40 = bitcast i64 %39 to double
  %41 = fmul double %35, %40
  %42 = fcmp ult double %0, 1.024000e+03
  %43 = select i1 %42, double %41, double 0x7FF0000000000000
  %44 = fcmp olt double %0, -2.000000e+03
  %45 = select i1 %44, double 0.000000e+00, double %43
  ret double %45
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp10_u10(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = fcmp olt double %2, 0.000000e+00
  %4 = select i1 %3, double -5.000000e-01, double 5.000000e-01
  %5 = fadd double %2, %4
  %6 = fptosi double %5 to i32
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 0x3FD34413509F7000
  %9 = fsub double %0, %8
  %10 = fmul double %7, 0x3D43FDE623E2566B
  %11 = fsub double %9, %10
  %12 = fmul double %11, 0x3F2F9B875F46726F
  %13 = fadd double %12, 0x3F52F6DBB8E3072A
  %14 = fmul double %11, %13
  %15 = fadd double %14, 0x3F748988CFF14706
  %16 = fmul double %11, %15
  %17 = fadd double %16, 0x3F9411663B046154
  %18 = fmul double %11, %17
  %19 = fadd double %18, 0x3FB16E4DF78FCA37
  %20 = fmul double %11, %19
  %21 = fadd double %20, 0x3FCA7ED709F2107E
  %22 = fmul double %11, %21
  %23 = fadd double %22, 0x3FE1429FFD1EB6E2
  %24 = fmul double %11, %23
  %25 = fadd double %24, 0x3FF2BD7609FD573B
  %26 = fmul double %11, %25
  %27 = fadd double %26, 0x4000470591DE2C43
  %28 = fmul double %11, %27
  %29 = fadd double %28, 0x40053524C73CEA78
  %30 = fmul double %11, %29
  %31 = fadd double %30, 0x40026BB1BBB55516
  %32 = bitcast double %31 to i64
  %33 = and i64 %32, -134217728
  %34 = bitcast i64 %33 to double
  %35 = fsub double %31, %34
  %36 = bitcast double %11 to i64
  %37 = and i64 %36, -134217728
  %38 = bitcast i64 %37 to double
  %39 = fsub double %11, %38
  %40 = fmul double %11, %31
  %41 = fmul double %38, %34
  %42 = fsub double %41, %40
  %43 = fmul double %35, %38
  %44 = fadd double %43, %42
  %45 = fmul double %39, %34
  %46 = fadd double %45, %44
  %47 = fmul double %39, %35
  %48 = fadd double %47, %46
  %49 = fadd double %40, 1.000000e+00
  %50 = fsub double 1.000000e+00, %49
  %51 = fadd double %40, %50
  %52 = fadd double %51, %48
  %53 = fadd double %49, %52
  %54 = ashr i32 %6, 1
  %55 = add nsw i32 %54, 1023
  %56 = zext i32 %55 to i64
  %57 = shl i64 %56, 52
  %58 = bitcast i64 %57 to double
  %59 = fmul double %53, %58
  %60 = add i32 %6, 1023
  %61 = sub i32 %60, %54
  %62 = zext i32 %61 to i64
  %63 = shl i64 %62, 52
  %64 = bitcast i64 %63 to double
  %65 = fmul double %59, %64
  %66 = fcmp ogt double %0, 0x40734413509F79FE
  %67 = select i1 %66, double 0x7FF0000000000000, double %65
  %68 = fcmp olt double %0, -3.500000e+02
  %69 = select i1 %68, double 0.000000e+00, double %67
  ret double %69
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp10_u35(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = fcmp olt double %2, 0.000000e+00
  %4 = select i1 %3, double -5.000000e-01, double 5.000000e-01
  %5 = fadd double %2, %4
  %6 = fptosi double %5 to i32
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 0x3FD34413509F7000
  %9 = fsub double %0, %8
  %10 = fmul double %7, 0x3D43FDE623E2566B
  %11 = fsub double %9, %10
  %12 = fmul double %11, 0x3F2F9B875F46726F
  %13 = fadd double %12, 0x3F52F6DBB8E3072A
  %14 = fmul double %11, %13
  %15 = fadd double %14, 0x3F748988CFF14706
  %16 = fmul double %11, %15
  %17 = fadd double %16, 0x3F9411663B046154
  %18 = fmul double %11, %17
  %19 = fadd double %18, 0x3FB16E4DF78FCA37
  %20 = fmul double %11, %19
  %21 = fadd double %20, 0x3FCA7ED709F2107E
  %22 = fmul double %11, %21
  %23 = fadd double %22, 0x3FE1429FFD1EB6E2
  %24 = fmul double %11, %23
  %25 = fadd double %24, 0x3FF2BD7609FD573B
  %26 = fmul double %11, %25
  %27 = fadd double %26, 0x4000470591DE2C43
  %28 = fmul double %11, %27
  %29 = fadd double %28, 0x40053524C73CEA78
  %30 = fmul double %11, %29
  %31 = fadd double %30, 0x40026BB1BBB55516
  %32 = fmul double %11, %31
  %33 = fadd double %32, 1.000000e+00
  %34 = ashr i32 %6, 1
  %35 = add nsw i32 %34, 1023
  %36 = zext i32 %35 to i64
  %37 = shl i64 %36, 52
  %38 = bitcast i64 %37 to double
  %39 = fmul double %33, %38
  %40 = add i32 %6, 1023
  %41 = sub i32 %40, %34
  %42 = zext i32 %41 to i64
  %43 = shl i64 %42, 52
  %44 = bitcast i64 %43 to double
  %45 = fmul double %39, %44
  %46 = fcmp ogt double %0, 0x40734413509F79FE
  %47 = select i1 %46, double 0x7FF0000000000000, double %45
  %48 = fcmp olt double %0, -3.500000e+02
  %49 = select i1 %48, double 0.000000e+00, double %47
  ret double %49
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_expm1_u10(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 0.000000e+00
  %3 = fmul double %2, 0x3FF71547652B82FE
  %4 = fcmp olt double %3, 0.000000e+00
  %5 = select i1 %4, double -5.000000e-01, double 5.000000e-01
  %6 = fadd double %3, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 0xBFE62E42FEFA3000
  %10 = fadd double %9, %0
  %11 = fsub double %10, %0
  %12 = fsub double %10, %11
  %13 = fsub double %0, %12
  %14 = fsub double %9, %11
  %15 = fadd double %14, %13
  %16 = fadd double %15, 0.000000e+00
  %17 = fmul double %8, 0xBD53DE6AF278ECE6
  %18 = fadd double %17, %10
  %19 = fsub double %18, %10
  %20 = fsub double %18, %19
  %21 = fsub double %10, %20
  %22 = fsub double %17, %19
  %23 = fadd double %22, %21
  %24 = fadd double %23, %16
  %25 = fmul double %18, 0x3DE60632A887194C
  %26 = fadd double %25, 0x3E21F8EAF54829DC
  %27 = fmul double %18, %26
  %28 = fadd double %27, 0x3E5AE652E8103AB6
  %29 = fmul double %18, %28
  %30 = fadd double %29, 0x3E927E4C95A9765C
  %31 = fmul double %18, %30
  %32 = fadd double %31, 0x3EC71DE3A11D7656
  %33 = fmul double %18, %32
  %34 = fadd double %33, 0x3EFA01A01AF6F0B7
  %35 = fmul double %18, %34
  %36 = fadd double %35, 0x3F2A01A01A02D002
  %37 = fmul double %18, %36
  %38 = fadd double %37, 0x3F56C16C16C145CC
  %39 = fmul double %18, %38
  %40 = fadd double %39, 0x3F81111111111119
  %41 = fmul double %18, %40
  %42 = fadd double %41, 0x3FA555555555555A
  %43 = bitcast double %18 to i64
  %44 = and i64 %43, -134217728
  %45 = bitcast i64 %44 to double
  %46 = fsub double %18, %45
  %47 = bitcast double %42 to i64
  %48 = and i64 %47, -134217728
  %49 = bitcast i64 %48 to double
  %50 = fsub double %42, %49
  %51 = fmul double %18, %42
  %52 = fmul double %45, %49
  %53 = fsub double %52, %51
  %54 = fmul double %46, %49
  %55 = fadd double %54, %53
  %56 = fmul double %50, %45
  %57 = fadd double %56, %55
  %58 = fmul double %46, %50
  %59 = fadd double %58, %57
  %60 = fmul double %24, %42
  %61 = fadd double %60, %59
  %62 = fadd double %51, 0x3FC5555555555555
  %63 = fsub double %62, %51
  %64 = fsub double %62, %63
  %65 = fsub double %51, %64
  %66 = fsub double 0x3FC5555555555555, %63
  %67 = fadd double %66, %65
  %68 = fadd double %67, %61
  %69 = bitcast double %62 to i64
  %70 = and i64 %69, -134217728
  %71 = bitcast i64 %70 to double
  %72 = fsub double %62, %71
  %73 = fmul double %18, %62
  %74 = fmul double %45, %71
  %75 = fsub double %74, %73
  %76 = fmul double %46, %71
  %77 = fadd double %76, %75
  %78 = fmul double %72, %45
  %79 = fadd double %78, %77
  %80 = fmul double %46, %72
  %81 = fadd double %80, %79
  %82 = fmul double %18, %68
  %83 = fadd double %81, %82
  %84 = fmul double %24, %62
  %85 = fadd double %84, %83
  %86 = fadd double %73, 5.000000e-01
  %87 = fsub double %86, %73
  %88 = fsub double %86, %87
  %89 = fsub double %73, %88
  %90 = fsub double 5.000000e-01, %87
  %91 = fadd double %90, %89
  %92 = fadd double %91, %85
  %93 = fmul double %18, %18
  %94 = fmul double %45, %45
  %95 = fsub double %94, %93
  %96 = fadd double %45, %45
  %97 = fmul double %96, %46
  %98 = fadd double %95, %97
  %99 = fmul double %46, %46
  %100 = fadd double %99, %98
  %101 = fadd double %24, %24
  %102 = fmul double %18, %101
  %103 = fadd double %102, %100
  %104 = bitcast double %93 to i64
  %105 = and i64 %104, -134217728
  %106 = bitcast i64 %105 to double
  %107 = fsub double %93, %106
  %108 = bitcast double %86 to i64
  %109 = and i64 %108, -134217728
  %110 = bitcast i64 %109 to double
  %111 = fsub double %86, %110
  %112 = fmul double %93, %86
  %113 = fmul double %106, %110
  %114 = fsub double %113, %112
  %115 = fmul double %107, %110
  %116 = fadd double %115, %114
  %117 = fmul double %111, %106
  %118 = fadd double %117, %116
  %119 = fmul double %107, %111
  %120 = fadd double %119, %118
  %121 = fmul double %93, %92
  %122 = fadd double %120, %121
  %123 = fmul double %103, %86
  %124 = fadd double %123, %122
  %125 = fadd double %18, %112
  %126 = fadd double %24, %124
  %127 = fadd double %125, 1.000000e+00
  %128 = insertelement <2 x double> undef, double %127, i32 0
  %129 = insertelement <2 x double> %128, double %125, i32 1
  %130 = insertelement <2 x double> <double -1.000000e+00, double undef>, double %18, i32 1
  %131 = fadd <2 x double> %129, %130
  %132 = fsub <2 x double> %129, %130
  %133 = shufflevector <2 x double> %131, <2 x double> %132, <2 x i32> <i32 0, i32 3>
  %134 = fsub <2 x double> %129, %133
  %135 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %18, i32 1
  %136 = fsub <2 x double> %135, %134
  %137 = insertelement <2 x double> undef, double %125, i32 0
  %138 = insertelement <2 x double> %137, double %112, i32 1
  %139 = fsub <2 x double> %138, %133
  %140 = fadd <2 x double> %139, %136
  %141 = extractelement <2 x double> %140, i32 1
  %142 = fadd double %141, %126
  %143 = extractelement <2 x double> %140, i32 0
  %144 = fadd double %143, %142
  %145 = ashr i32 %7, 1
  %146 = add nsw i32 %145, 1023
  %147 = zext i32 %146 to i64
  %148 = shl i64 %147, 52
  %149 = bitcast i64 %148 to double
  %150 = fmul double %127, %149
  %151 = add i32 %7, 1023
  %152 = sub i32 %151, %145
  %153 = zext i32 %152 to i64
  %154 = shl i64 %153, 52
  %155 = bitcast i64 %154 to double
  %156 = fmul double %150, %155
  %157 = fmul double %144, %149
  %158 = fmul double %157, %155
  %159 = fcmp olt double %0, -1.000000e+03
  %160 = select i1 %159, double 0.000000e+00, double %156
  %161 = select i1 %159, double 0.000000e+00, double %158
  %162 = fadd double %160, -1.000000e+00
  %163 = fsub double %162, %160
  %164 = fsub double %162, %163
  %165 = fsub double %160, %164
  %166 = fsub double -1.000000e+00, %163
  %167 = fadd double %166, %165
  %168 = fadd double %167, %161
  %169 = fadd double %162, %168
  %170 = fcmp ogt double %0, 0x40862E42FEFA39EF
  %171 = select i1 %170, double 0x7FF0000000000000, double %169
  %172 = fcmp olt double %0, 0xC0425E4F7B2737FA
  %173 = select i1 %172, double -1.000000e+00, double %171
  %174 = bitcast double %0 to i64
  %175 = icmp eq i64 %174, -9223372036854775808
  %176 = select i1 %175, double -0.000000e+00, double %173
  ret double %176
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log10_u10(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %3, double %0
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, %11
  %15 = bitcast i64 %14 to double
  %16 = select i1 %2, i32 -1087, i32 -1023
  %17 = add nsw i32 %9, %16
  %18 = fadd double %15, -1.000000e+00
  %19 = fadd double %18, 1.000000e+00
  %20 = fadd double %15, 1.000000e+00
  %21 = fadd double %20, -1.000000e+00
  %22 = fdiv double 1.000000e+00, %20
  %23 = bitcast double %20 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %20, %25
  %27 = bitcast double %22 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %22, %29
  %31 = bitcast double %18 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %18, %33
  %35 = fmul double %18, %22
  %36 = fmul double %35, %35
  %37 = fmul double %36, %36
  %38 = fmul double %37, %37
  %39 = fmul double %36, 0x3FB0F63BD2A55192
  %40 = fadd double %39, 0x3FB4381A2BF55D48
  %41 = fmul double %37, 0x3FB10895F3EA9496
  %42 = fadd double %41, %40
  %43 = fmul double %36, 0x3FB8B4D992891F74
  %44 = fadd double %43, 0x3FBFC3FA6F6D7821
  %45 = fmul double %36, 0x3FC63C6277499B88
  %46 = fadd double %45, 0x3FD287A7636F4570
  %47 = fmul double %37, %44
  %48 = fadd double %46, %47
  %49 = fmul double %38, %42
  %50 = fadd double %49, %48
  %51 = sitofp i32 %17 to double
  %52 = bitcast double %51 to i64
  %53 = and i64 %52, -134217728
  %54 = bitcast i64 %53 to double
  %55 = fsub double %51, %54
  %56 = fmul double %51, 0x3FD34413509F79FF
  %57 = bitcast double %35 to i64
  %58 = and i64 %57, -134217728
  %59 = bitcast i64 %58 to double
  %60 = fsub double %35, %59
  %61 = fmul double %35, 0x3FEBCB7B1526E50E
  %62 = fadd double %56, %61
  %63 = fmul double %35, %36
  %64 = fmul double %63, %50
  %65 = fadd double %62, %64
  %66 = fcmp olt double %4, 0.000000e+00
  br i1 %66, label %133, label %67

; <label>:67:                                     ; preds = %1
  %68 = fcmp une double %4, 0xFFF0000000000000
  %69 = fcmp une double %4, 0x7FF0000000000000
  %70 = and i1 %68, %69
  %71 = fsub double %62, %65
  %72 = fadd double %64, %71
  %73 = fsub double %56, %62
  %74 = fadd double %61, %73
  %75 = fmul double %51, 0x3C49DC1DA994FD21
  %76 = fmul double %55, 0x3E03EF3FE0000000
  %77 = fmul double %55, 0x3FD3441350000000
  %78 = fmul double %54, 0x3E03EF3FE0000000
  %79 = fmul double %54, 0x3FD3441350000000
  %80 = fsub double %79, %56
  %81 = fadd double %78, %80
  %82 = fadd double %77, %81
  %83 = fadd double %76, %82
  %84 = fsub double %83, %75
  %85 = fadd double %84, %74
  %86 = fsub double %15, %19
  %87 = fsub double %18, %19
  %88 = fsub double -1.000000e+00, %87
  %89 = fadd double %86, %88
  %90 = fsub double %15, %21
  %91 = fsub double %20, %21
  %92 = fsub double 1.000000e+00, %91
  %93 = fadd double %90, %92
  %94 = fmul double %35, %93
  %95 = fsub double %89, %94
  %96 = fmul double %22, %95
  %97 = fmul double %34, %30
  %98 = fmul double %34, %29
  %99 = fmul double %33, %29
  %100 = fsub double %99, %35
  %101 = fmul double %30, %33
  %102 = fadd double %100, %101
  %103 = fadd double %98, %102
  %104 = fadd double %97, %103
  %105 = fmul double %25, %29
  %106 = fsub double 1.000000e+00, %105
  %107 = fmul double %30, %25
  %108 = fsub double %106, %107
  %109 = fmul double %26, %29
  %110 = fsub double %108, %109
  %111 = fmul double %26, %30
  %112 = fsub double %110, %111
  %113 = fmul double %35, %112
  %114 = fadd double %104, %113
  %115 = fadd double %96, %114
  %116 = fmul double %115, 0x3FEBCB7B1526E50E
  %117 = fmul double %35, 0x3C6A5B1DC915F38F
  %118 = fmul double %60, 0x3E449B9438000000
  %119 = fmul double %59, 0x3E449B9438000000
  %120 = fmul double %60, 0x3FEBCB7B10000000
  %121 = fmul double %59, 0x3FEBCB7B10000000
  %122 = fsub double %121, %61
  %123 = fadd double %120, %122
  %124 = fadd double %119, %123
  %125 = fadd double %118, %124
  %126 = fadd double %117, %125
  %127 = fadd double %126, %116
  %128 = fadd double %85, %127
  %129 = fadd double %72, %128
  %130 = fadd double %65, %129
  %131 = select i1 %70, double %130, double 0x7FF0000000000000
  %132 = fcmp ord double %4, 0.000000e+00
  br i1 %132, label %134, label %133

; <label>:133:                                    ; preds = %67, %1
  br label %134

; <label>:134:                                    ; preds = %67, %133
  %135 = phi double [ 0x7FF8000000000000, %133 ], [ %131, %67 ]
  %136 = fcmp oeq double %4, 0.000000e+00
  %137 = select i1 %136, double 0xFFF0000000000000, double %135
  ret double %137
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log2_u10(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %3, double %0
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, %11
  %15 = bitcast i64 %14 to double
  %16 = select i1 %2, i32 -1087, i32 -1023
  %17 = add nsw i32 %9, %16
  %18 = fadd double %15, -1.000000e+00
  %19 = fadd double %18, 1.000000e+00
  %20 = fadd double %15, 1.000000e+00
  %21 = fadd double %20, -1.000000e+00
  %22 = fdiv double 1.000000e+00, %20
  %23 = bitcast double %20 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %20, %25
  %27 = bitcast double %22 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %22, %29
  %31 = bitcast double %18 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %18, %33
  %35 = fmul double %18, %22
  %36 = fmul double %35, %35
  %37 = fmul double %36, %36
  %38 = fmul double %37, %37
  %39 = fmul double %36, 0x3FCC2B7A962850E9
  %40 = fadd double %39, 0x3FD0CAAEEB877481
  %41 = fmul double %37, 0x3FCC501739F17BA9
  %42 = fadd double %41, %40
  %43 = fmul double %36, 0x3FD484AC6A7CB2DD
  %44 = fadd double %43, 0x3FDA617636C2C254
  %45 = fmul double %36, 0x3FE2776C50E7EDE9
  %46 = fadd double %45, 0x3FEEC709DC3A07B2
  %47 = fmul double %37, %44
  %48 = fadd double %46, %47
  %49 = fmul double %38, %42
  %50 = fadd double %49, %48
  %51 = sitofp i32 %17 to double
  %52 = bitcast double %35 to i64
  %53 = and i64 %52, -134217728
  %54 = bitcast i64 %53 to double
  %55 = fsub double %35, %54
  %56 = fmul double %35, 0x40071547652B82FE
  %57 = fadd double %56, %51
  %58 = fsub double %57, %51
  %59 = fmul double %35, %36
  %60 = fmul double %59, %50
  %61 = fadd double %57, %60
  %62 = fsub double %61, %57
  %63 = fcmp olt double %4, 0.000000e+00
  br i1 %63, label %123, label %64

; <label>:64:                                     ; preds = %1
  %65 = fcmp une double %4, 0xFFF0000000000000
  %66 = fcmp une double %4, 0x7FF0000000000000
  %67 = and i1 %65, %66
  %68 = fsub double %60, %62
  %69 = fsub double %61, %62
  %70 = fsub double %57, %69
  %71 = fadd double %68, %70
  %72 = fsub double %56, %58
  %73 = fsub double %57, %58
  %74 = fsub double %51, %73
  %75 = fadd double %72, %74
  %76 = fsub double %15, %19
  %77 = fsub double %18, %19
  %78 = fsub double -1.000000e+00, %77
  %79 = fadd double %76, %78
  %80 = fsub double %15, %21
  %81 = fsub double %20, %21
  %82 = fsub double 1.000000e+00, %81
  %83 = fadd double %80, %82
  %84 = fmul double %35, %83
  %85 = fsub double %79, %84
  %86 = fmul double %22, %85
  %87 = fmul double %34, %30
  %88 = fmul double %34, %29
  %89 = fmul double %33, %29
  %90 = fsub double %89, %35
  %91 = fmul double %30, %33
  %92 = fadd double %90, %91
  %93 = fadd double %88, %92
  %94 = fadd double %87, %93
  %95 = fmul double %25, %29
  %96 = fsub double 1.000000e+00, %95
  %97 = fmul double %30, %25
  %98 = fsub double %96, %97
  %99 = fmul double %26, %29
  %100 = fsub double %98, %99
  %101 = fmul double %26, %30
  %102 = fsub double %100, %101
  %103 = fmul double %35, %102
  %104 = fadd double %94, %103
  %105 = fadd double %86, %104
  %106 = fmul double %105, 0x40071547652B82FE
  %107 = fmul double %35, 0x3C5BEDDA32EBBCB1
  %108 = fmul double %55, 0x3E64AE0BF8000000
  %109 = fmul double %54, 0x3E64AE0BF8000000
  %110 = fmul double %55, 0x4007154760000000
  %111 = fmul double %54, 0x4007154760000000
  %112 = fsub double %111, %56
  %113 = fadd double %110, %112
  %114 = fadd double %109, %113
  %115 = fadd double %108, %114
  %116 = fadd double %107, %115
  %117 = fadd double %116, %106
  %118 = fadd double %75, %117
  %119 = fadd double %71, %118
  %120 = fadd double %61, %119
  %121 = select i1 %67, double %120, double 0x7FF0000000000000
  %122 = fcmp ord double %4, 0.000000e+00
  br i1 %122, label %124, label %123

; <label>:123:                                    ; preds = %64, %1
  br label %124

; <label>:124:                                    ; preds = %64, %123
  %125 = phi double [ 0x7FF8000000000000, %123 ], [ %121, %64 ]
  %126 = fcmp oeq double %4, 0.000000e+00
  %127 = select i1 %126, double 0xFFF0000000000000, double %125
  ret double %127
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log2_u35(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %3, double %0
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, %11
  %15 = bitcast i64 %14 to double
  %16 = select i1 %2, i32 -1087, i32 -1023
  %17 = add nsw i32 %9, %16
  %18 = fadd double %15, -1.000000e+00
  %19 = fadd double %15, 1.000000e+00
  %20 = fdiv double %18, %19
  %21 = fmul double %20, %20
  %22 = sitofp i32 %17 to double
  %23 = bitcast double %20 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %20, %25
  %27 = fmul double %20, 0x40071547652B82FE
  %28 = fadd double %27, %22
  %29 = fcmp olt double %4, 0.000000e+00
  br i1 %29, label %63, label %30

; <label>:30:                                     ; preds = %1
  %31 = fcmp une double %4, 0xFFF0000000000000
  %32 = fcmp une double %4, 0x7FF0000000000000
  %33 = and i1 %31, %32
  %34 = fmul double %21, 0x3FCC501739F17BA9
  %35 = fadd double %34, 0x3FCC2B7A962850E9
  %36 = fmul double %21, %35
  %37 = fadd double %36, 0x3FD0CAAEEB877481
  %38 = fmul double %21, %37
  %39 = fadd double %38, 0x3FD484AC6A7CB2DD
  %40 = fmul double %21, %39
  %41 = fadd double %40, 0x3FDA617636C2C254
  %42 = fmul double %21, %41
  %43 = fadd double %42, 0x3FE2776C50E7EDE9
  %44 = fmul double %21, %43
  %45 = fadd double %44, 0x3FEEC709DC3A07B2
  %46 = fmul double %20, %21
  %47 = fmul double %46, %45
  %48 = fsub double %22, %28
  %49 = fadd double %27, %48
  %50 = fmul double %26, 0x3E64AE0BF8000000
  %51 = fmul double %26, 0x4007154760000000
  %52 = fmul double %25, 0x3E64AE0BF8000000
  %53 = fmul double %25, 0x4007154760000000
  %54 = fsub double %53, %27
  %55 = fadd double %52, %54
  %56 = fadd double %51, %55
  %57 = fadd double %50, %56
  %58 = fadd double %49, %57
  %59 = fadd double %28, %58
  %60 = fadd double %59, %47
  %61 = select i1 %33, double %60, double 0x7FF0000000000000
  %62 = fcmp ord double %4, 0.000000e+00
  br i1 %62, label %64, label %63

; <label>:63:                                     ; preds = %30, %1
  br label %64

; <label>:64:                                     ; preds = %30, %63
  %65 = phi double [ 0x7FF8000000000000, %63 ], [ %61, %30 ]
  %66 = fcmp oeq double %4, 0.000000e+00
  %67 = select i1 %66, double 0xFFF0000000000000, double %65
  ret double %67
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log1p_u10(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 1.000000e+00
  %3 = fcmp olt double %2, 0x10000000000000
  %4 = fmul double %2, 0x43F0000000000000
  %5 = select i1 %3, double %4, double %2
  %6 = fmul double %5, 0x3FF5555555555555
  %7 = bitcast double %6 to i64
  %8 = lshr i64 %7, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 1023, %10
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 52
  %14 = add nsw i64 %13, 4607182418800017408
  %15 = bitcast i64 %14 to double
  %16 = fadd double %15, -1.000000e+00
  %17 = fmul double %15, %0
  %18 = fadd double %17, %16
  %19 = select i1 %3, i32 -1087, i32 -1023
  %20 = add nsw i32 %10, %19
  %21 = fadd double %18, 2.000000e+00
  %22 = fdiv double 1.000000e+00, %21
  %23 = bitcast double %21 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %21, %25
  %27 = bitcast double %22 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %22, %29
  %31 = bitcast double %18 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %18, %33
  %35 = fmul double %18, %22
  %36 = fmul double %35, %35
  %37 = fmul double %36, %36
  %38 = fmul double %37, %37
  %39 = fmul double %36, 0x3FC3872E67FE8E84
  %40 = fadd double %39, 0x3FC747353A506035
  %41 = fmul double %37, 0x3FC39C4F5407567E
  %42 = fadd double %41, %40
  %43 = fmul double %36, 0x3FCC71C0A65ECD8E
  %44 = fadd double %43, 0x3FD249249A68A245
  %45 = fmul double %36, 0x3FD99999998F92EA
  %46 = fadd double %45, 0x3FE55555555557AE
  %47 = fmul double %37, %44
  %48 = fadd double %46, %47
  %49 = fmul double %38, %42
  %50 = fadd double %49, %48
  %51 = sitofp i32 %20 to double
  %52 = bitcast double %51 to i64
  %53 = and i64 %52, -134217728
  %54 = bitcast i64 %53 to double
  %55 = fsub double %51, %54
  %56 = fmul double %51, 0x3FE62E42FEFA39EF
  %57 = fmul double %35, 2.000000e+00
  %58 = fadd double %56, %57
  %59 = fmul double %35, %36
  %60 = fmul double %59, %50
  %61 = fadd double %58, %60
  %62 = fcmp olt double %0, -1.000000e+00
  br i1 %62, label %110, label %63

; <label>:63:                                     ; preds = %1
  %64 = fcmp ogt double %0, 0x7FAC7B1F3CAC7433
  %65 = fsub double %58, %61
  %66 = fadd double %60, %65
  %67 = fsub double %56, %58
  %68 = fadd double %57, %67
  %69 = fmul double %51, 0x3C7ABC9E3B39803F
  %70 = fmul double %55, 0x3E4BE8E7BC000000
  %71 = fmul double %55, 0x3FE62E42F8000000
  %72 = fmul double %54, 0x3E4BE8E7BC000000
  %73 = fmul double %54, 0x3FE62E42F8000000
  %74 = fsub double %73, %56
  %75 = fadd double %72, %74
  %76 = fadd double %71, %75
  %77 = fadd double %70, %76
  %78 = fadd double %69, %77
  %79 = fadd double %78, %68
  %80 = fsub double 2.000000e+00, %21
  %81 = fadd double %18, %80
  %82 = fmul double %35, %81
  %83 = fsub double 0.000000e+00, %82
  %84 = fmul double %22, %83
  %85 = fmul double %34, %30
  %86 = fmul double %34, %29
  %87 = fmul double %33, %29
  %88 = fsub double %87, %35
  %89 = fmul double %30, %33
  %90 = fadd double %88, %89
  %91 = fadd double %86, %90
  %92 = fadd double %85, %91
  %93 = fmul double %25, %29
  %94 = fsub double 1.000000e+00, %93
  %95 = fmul double %30, %25
  %96 = fsub double %94, %95
  %97 = fmul double %26, %29
  %98 = fsub double %96, %97
  %99 = fmul double %26, %30
  %100 = fsub double %98, %99
  %101 = fmul double %35, %100
  %102 = fadd double %92, %101
  %103 = fadd double %84, %102
  %104 = fmul double %103, 2.000000e+00
  %105 = fadd double %79, %104
  %106 = fadd double %66, %105
  %107 = fadd double %61, %106
  %108 = select i1 %64, double 0x7FF0000000000000, double %107
  %109 = fcmp ord double %0, 0.000000e+00
  br i1 %109, label %111, label %110

; <label>:110:                                    ; preds = %63, %1
  br label %111

; <label>:111:                                    ; preds = %63, %110
  %112 = phi double [ 0x7FF8000000000000, %110 ], [ %108, %63 ]
  %113 = fcmp oeq double %0, -1.000000e+00
  %114 = select i1 %113, double 0xFFF0000000000000, double %112
  %115 = bitcast double %0 to i64
  %116 = icmp eq i64 %115, -9223372036854775808
  %117 = select i1 %116, double -0.000000e+00, double %114
  ret double %117
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fma(double, double, double) local_unnamed_addr #0 {
  %4 = fmul double %0, %1
  %5 = fadd double %4, %2
  %6 = bitcast double %5 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %8, 1.000000e-300
  %10 = insertelement <2 x double> undef, double %2, i32 0
  %11 = insertelement <2 x double> %10, double %1, i32 1
  %12 = fmul double %0, 0x46B0000000000000
  %13 = fmul <2 x double> %11, <double 0x4D70000000000000, double 0x46B0000000000000>
  %14 = select i1 %9, double 0x3270000000000000, double 1.000000e+00
  %15 = select i1 %9, double %12, double %0
  %16 = select i1 %9, <2 x double> %13, <2 x double> %11
  %17 = fcmp ogt double %8, 1.000000e+299
  %18 = fmul double %15, 0x3930000000000000
  %19 = fmul <2 x double> %16, <double 0x3270000000000000, double 0x3930000000000000>
  %20 = select i1 %17, double 0x4D70000000000000, double %14
  %21 = select i1 %17, double %18, double %15
  %22 = select i1 %17, <2 x double> %19, <2 x double> %16
  %23 = bitcast double %21 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %21, %25
  %27 = extractelement <2 x double> %22, i32 1
  %28 = bitcast double %27 to i64
  %29 = and i64 %28, -134217728
  %30 = bitcast i64 %29 to double
  %31 = fsub double %27, %30
  %32 = fmul double %27, %21
  %33 = fmul double %30, %25
  %34 = fsub double %33, %32
  %35 = fmul double %26, %30
  %36 = fadd double %35, %34
  %37 = fmul double %31, %25
  %38 = fadd double %37, %36
  %39 = fmul double %31, %26
  %40 = fadd double %39, %38
  %41 = extractelement <2 x double> %22, i32 0
  %42 = fadd double %41, %32
  %43 = fsub double %42, %32
  %44 = fsub double %42, %43
  %45 = fsub double %32, %44
  %46 = fsub double %41, %43
  %47 = fadd double %46, %45
  %48 = fadd double %47, %40
  %49 = fcmp oeq double %21, 0.000000e+00
  %50 = fcmp oeq double %27, 0.000000e+00
  %51 = or i1 %50, %49
  %52 = fadd double %42, %48
  %53 = select i1 %51, double %41, double %52
  %54 = fcmp une double %41, 0x7FF0000000000000
  %55 = fcmp une double %41, 0xFFF0000000000000
  %56 = and i1 %55, %54
  br i1 %56, label %70, label %57

; <label>:57:                                     ; preds = %3
  %58 = fcmp une double %21, 0x7FF0000000000000
  %59 = fcmp une double %21, 0xFFF0000000000000
  %60 = and i1 %59, %58
  %61 = fcmp ord double %21, 0.000000e+00
  %62 = and i1 %61, %60
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %57
  %64 = fcmp une double %27, 0x7FF0000000000000
  %65 = fcmp une double %27, 0xFFF0000000000000
  %66 = and i1 %65, %64
  br i1 %66, label %67, label %70

; <label>:67:                                     ; preds = %63
  %68 = fcmp ord double %27, 0.000000e+00
  %69 = select i1 %68, double %41, double %5
  br label %70

; <label>:70:                                     ; preds = %67, %63, %57, %3
  %71 = phi double [ %5, %57 ], [ %5, %63 ], [ %5, %3 ], [ %69, %67 ]
  %72 = fcmp une double %71, 0x7FF0000000000000
  %73 = fcmp une double %71, 0xFFF0000000000000
  %74 = and i1 %73, %72
  br i1 %74, label %75, label %79

; <label>:75:                                     ; preds = %70
  %76 = fcmp ord double %71, 0.000000e+00
  %77 = fmul double %20, %53
  %78 = select i1 %76, double %77, double %71
  ret double %78

; <label>:79:                                     ; preds = %70
  ret double %71
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sqrt_u05(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double 0x7FF8000000000000, double %0
  %4 = fcmp olt double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double 0x37E0000000000000, double 5.000000e-01
  %7 = select i1 %4, double %5, double %3
  %8 = fcmp ogt double %7, 0x5FF0000000000000
  %9 = fmul double %7, 0x1FF0000000000000
  %10 = select i1 %8, double 0x4FE0000000000000, double %6
  %11 = select i1 %8, double %9, double %7
  %12 = fadd double %11, 9.999880e-321
  %13 = bitcast double %12 to i64
  %14 = ashr i64 %13, 1
  %15 = sub nsw i64 6910470738111508698, %14
  %16 = bitcast i64 %15 to double
  %17 = fmul double %11, 5.000000e-01
  %18 = fmul double %17, %16
  %19 = fmul double %18, %16
  %20 = fsub double 1.500000e+00, %19
  %21 = fmul double %20, %16
  %22 = fmul double %17, %21
  %23 = fmul double %21, %22
  %24 = fsub double 1.500000e+00, %23
  %25 = fmul double %21, %24
  %26 = fmul double %17, %25
  %27 = fmul double %25, %26
  %28 = fsub double 1.500000e+00, %27
  %29 = fmul double %25, %28
  %30 = fmul double %11, %29
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %30, %33
  %35 = fmul double %30, %30
  %36 = fmul double %33, %33
  %37 = fsub double %36, %35
  %38 = fmul double %34, %33
  %39 = fadd double %38, %37
  %40 = fadd double %38, %39
  %41 = fmul double %34, %34
  %42 = fadd double %41, %40
  %43 = fadd double %11, %35
  %44 = fsub double %43, %11
  %45 = fsub double %43, %44
  %46 = fsub double %11, %45
  %47 = fsub double %35, %44
  %48 = fadd double %47, %46
  %49 = fadd double %48, %42
  %50 = fdiv double 1.000000e+00, %30
  %51 = bitcast double %50 to i64
  %52 = and i64 %51, -134217728
  %53 = bitcast i64 %52 to double
  %54 = fsub double %50, %53
  %55 = fmul double %33, %53
  %56 = fsub double 1.000000e+00, %55
  %57 = fmul double %54, %33
  %58 = fsub double %56, %57
  %59 = fmul double %34, %53
  %60 = fsub double %58, %59
  %61 = fmul double %34, %54
  %62 = fsub double %60, %61
  %63 = fmul double %50, %62
  %64 = bitcast double %43 to i64
  %65 = and i64 %64, -134217728
  %66 = bitcast i64 %65 to double
  %67 = fsub double %43, %66
  %68 = fmul double %50, %43
  %69 = fmul double %53, %66
  %70 = fsub double %69, %68
  %71 = fmul double %67, %53
  %72 = fadd double %71, %70
  %73 = fmul double %54, %66
  %74 = fadd double %73, %72
  %75 = fmul double %54, %67
  %76 = fadd double %75, %74
  %77 = fmul double %43, %63
  %78 = fadd double %76, %77
  %79 = fmul double %50, %49
  %80 = fadd double %79, %78
  %81 = fadd double %68, %80
  %82 = fmul double %10, %81
  %83 = fcmp oeq double %11, 0x7FF0000000000000
  %84 = select i1 %83, double 0x7FF0000000000000, double %82
  %85 = fcmp oeq double %11, 0.000000e+00
  %86 = select i1 %85, double %11, double %84
  ret double %86
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sqrt_u35(double) local_unnamed_addr #0 {
  %2 = fcmp olt double %0, 0.000000e+00
  %3 = select i1 %2, double 0x7FF8000000000000, double %0
  %4 = fcmp olt double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double 0x37E0000000000000, double 5.000000e-01
  %7 = select i1 %4, double %5, double %3
  %8 = fcmp ogt double %7, 0x5FF0000000000000
  %9 = fmul double %7, 0x1FF0000000000000
  %10 = select i1 %8, double 0x4FE0000000000000, double %6
  %11 = select i1 %8, double %9, double %7
  %12 = fadd double %11, 9.999880e-321
  %13 = bitcast double %12 to i64
  %14 = ashr i64 %13, 1
  %15 = sub nsw i64 6910470738111508698, %14
  %16 = bitcast i64 %15 to double
  %17 = fmul double %11, 5.000000e-01
  %18 = fmul double %17, %16
  %19 = fmul double %18, %16
  %20 = fsub double 1.500000e+00, %19
  %21 = fmul double %20, %16
  %22 = fmul double %17, %21
  %23 = fmul double %21, %22
  %24 = fsub double 1.500000e+00, %23
  %25 = fmul double %21, %24
  %26 = fmul double %17, %25
  %27 = fmul double %25, %26
  %28 = fsub double 1.500000e+00, %27
  %29 = fmul double %25, %28
  %30 = fmul double %11, %29
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %30, %33
  %35 = fmul double %30, %30
  %36 = fmul double %33, %33
  %37 = fsub double %36, %35
  %38 = fmul double %34, %33
  %39 = fadd double %38, %37
  %40 = fadd double %38, %39
  %41 = fmul double %34, %34
  %42 = fadd double %41, %40
  %43 = fadd double %11, %35
  %44 = fsub double %43, %11
  %45 = fsub double %43, %44
  %46 = fsub double %11, %45
  %47 = fsub double %35, %44
  %48 = fadd double %47, %46
  %49 = fadd double %48, %42
  %50 = fdiv double 1.000000e+00, %30
  %51 = bitcast double %50 to i64
  %52 = and i64 %51, -134217728
  %53 = bitcast i64 %52 to double
  %54 = fsub double %50, %53
  %55 = fmul double %33, %53
  %56 = fsub double 1.000000e+00, %55
  %57 = fmul double %54, %33
  %58 = fsub double %56, %57
  %59 = fmul double %34, %53
  %60 = fsub double %58, %59
  %61 = fmul double %34, %54
  %62 = fsub double %60, %61
  %63 = fmul double %50, %62
  %64 = bitcast double %43 to i64
  %65 = and i64 %64, -134217728
  %66 = bitcast i64 %65 to double
  %67 = fsub double %43, %66
  %68 = fmul double %50, %43
  %69 = fmul double %53, %66
  %70 = fsub double %69, %68
  %71 = fmul double %67, %53
  %72 = fadd double %71, %70
  %73 = fmul double %54, %66
  %74 = fadd double %73, %72
  %75 = fmul double %54, %67
  %76 = fadd double %75, %74
  %77 = fmul double %43, %63
  %78 = fadd double %76, %77
  %79 = fmul double %50, %49
  %80 = fadd double %79, %78
  %81 = fadd double %68, %80
  %82 = fmul double %10, %81
  %83 = fcmp oeq double %11, 0x7FF0000000000000
  %84 = select i1 %83, double 0x7FF0000000000000, double %82
  %85 = fcmp oeq double %11, 0.000000e+00
  %86 = select i1 %85, double %11, double %84
  ret double %86
}

; Function Attrs: nounwind uwtable
define double @Sleef_sqrt(double) local_unnamed_addr #2 {
  %2 = tail call double @sqrt(double %0) #5
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fabs(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_copysign(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %6, %4
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmax(double, double) local_unnamed_addr #0 {
  %3 = fcmp uno double %1, 0.000000e+00
  %4 = fcmp ogt double %0, %1
  %5 = or i1 %3, %4
  %6 = select i1 %5, double %0, double %1
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmin(double, double) local_unnamed_addr #0 {
  %3 = fcmp uno double %1, 0.000000e+00
  %4 = fcmp olt double %0, %1
  %5 = or i1 %3, %4
  %6 = select i1 %5, double %0, double %1
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fdim(double, double) local_unnamed_addr #0 {
  %3 = fsub double %0, %1
  %4 = fcmp olt double %3, 0.000000e+00
  %5 = fcmp oeq double %0, %1
  %6 = or i1 %5, %4
  %7 = select i1 %6, double 0.000000e+00, double %3
  ret double %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_trunc(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp une double %0, 0x7FF0000000000000
  %11 = fcmp une double %0, 0xFFF0000000000000
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %25

; <label>:13:                                     ; preds = %1
  %14 = bitcast double %0 to i64
  %15 = and i64 %14, 9223372036854775807
  %16 = bitcast i64 %15 to double
  %17 = fcmp ult double %16, 0x4330000000000000
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %13
  %19 = fsub double %0, %9
  %20 = bitcast double %19 to i64
  %21 = and i64 %20, 9223372036854775807
  %22 = and i64 %14, -9223372036854775808
  %23 = or i64 %21, %22
  %24 = bitcast i64 %23 to double
  br label %25

; <label>:25:                                     ; preds = %1, %13, %18
  %26 = phi double [ %24, %18 ], [ %0, %13 ], [ %0, %1 ]
  ret double %26
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_floor(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp olt double %9, 0.000000e+00
  %11 = fadd double %9, 1.000000e+00
  %12 = select i1 %10, double %11, double %9
  %13 = fcmp une double %0, 0x7FF0000000000000
  %14 = fcmp une double %0, 0xFFF0000000000000
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %1
  %17 = bitcast double %0 to i64
  %18 = and i64 %17, 9223372036854775807
  %19 = bitcast i64 %18 to double
  %20 = fcmp ult double %19, 0x4330000000000000
  br i1 %20, label %21, label %28

; <label>:21:                                     ; preds = %16
  %22 = fsub double %0, %12
  %23 = bitcast double %22 to i64
  %24 = and i64 %23, 9223372036854775807
  %25 = and i64 %17, -9223372036854775808
  %26 = or i64 %24, %25
  %27 = bitcast i64 %26 to double
  br label %28

; <label>:28:                                     ; preds = %1, %16, %21
  %29 = phi double [ %27, %21 ], [ %0, %16 ], [ %0, %1 ]
  ret double %29
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_ceil(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp ole double %9, 0.000000e+00
  %11 = fadd double %9, -1.000000e+00
  %12 = select i1 %10, double %9, double %11
  %13 = fcmp une double %0, 0x7FF0000000000000
  %14 = fcmp une double %0, 0xFFF0000000000000
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %28

; <label>:16:                                     ; preds = %1
  %17 = bitcast double %0 to i64
  %18 = and i64 %17, 9223372036854775807
  %19 = bitcast i64 %18 to double
  %20 = fcmp ult double %19, 0x4330000000000000
  br i1 %20, label %21, label %28

; <label>:21:                                     ; preds = %16
  %22 = fsub double %0, %12
  %23 = bitcast double %22 to i64
  %24 = and i64 %23, 9223372036854775807
  %25 = and i64 %17, -9223372036854775808
  %26 = or i64 %24, %25
  %27 = bitcast i64 %26 to double
  br label %28

; <label>:28:                                     ; preds = %1, %16, %21
  %29 = phi double [ %27, %21 ], [ %0, %16 ], [ %0, %1 ]
  ret double %29
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_round(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fmul double %2, 0x3E00000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %2, %6
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fsub double %7, %9
  %11 = fcmp oeq double %10, 0.000000e+00
  %12 = fcmp ole double %2, 0.000000e+00
  %13 = and i1 %12, %11
  %14 = fadd double %2, -1.000000e+00
  %15 = select i1 %13, double %14, double %2
  %16 = fcmp olt double %10, 0.000000e+00
  %17 = fadd double %10, 1.000000e+00
  %18 = select i1 %16, double %17, double %10
  %19 = fcmp oeq double %0, 0x3FDFFFFFFFFFFFFF
  %20 = select i1 %19, double 0.000000e+00, double %15
  %21 = fcmp une double %0, 0x7FF0000000000000
  %22 = fcmp une double %0, 0xFFF0000000000000
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %36

; <label>:24:                                     ; preds = %1
  %25 = bitcast double %0 to i64
  %26 = and i64 %25, 9223372036854775807
  %27 = bitcast i64 %26 to double
  %28 = fcmp ult double %27, 0x4330000000000000
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %24
  %30 = fsub double %20, %18
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, 9223372036854775807
  %33 = and i64 %25, -9223372036854775808
  %34 = or i64 %32, %33
  %35 = bitcast i64 %34 to double
  br label %36

; <label>:36:                                     ; preds = %1, %24, %29
  %37 = phi double [ %35, %29 ], [ %0, %24 ], [ %0, %1 ]
  ret double %37
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_rint(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, -9223372036854775808
  %4 = or i64 %3, 4841369599423283200
  %5 = bitcast i64 %4 to double
  %6 = and i64 %2, 9223372036854775807
  %7 = bitcast i64 %6 to double
  %8 = fcmp ogt double %7, 0x4330000000000000
  br i1 %8, label %15, label %9

; <label>:9:                                      ; preds = %1
  %10 = fadd double %5, %0
  %11 = fsub double %10, %5
  %12 = bitcast double %11 to i64
  %13 = or i64 %3, %12
  %14 = bitcast i64 %13 to double
  br label %15

; <label>:15:                                     ; preds = %1, %9
  %16 = phi double [ %14, %9 ], [ %0, %1 ]
  ret double %16
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypot_u05(double, double) local_unnamed_addr #2 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fcmp olt double %12, 0x10000000000000
  %14 = fmul double %10, 0x4350000000000000
  %15 = fmul double %12, 0x4350000000000000
  %16 = select i1 %13, double %15, double %12
  %17 = select i1 %13, double %14, double %10
  %18 = fdiv double 1.000000e+00, %16
  %19 = bitcast double %16 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %16, %21
  %23 = bitcast double %18 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %18, %25
  %27 = bitcast double %17 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %17, %29
  %31 = fmul double %17, %18
  %32 = fmul double %29, %25
  %33 = fsub double %32, %31
  %34 = fmul double %26, %29
  %35 = fadd double %33, %34
  %36 = fmul double %30, %25
  %37 = fadd double %36, %35
  %38 = fmul double %30, %26
  %39 = fadd double %38, %37
  %40 = fmul double %21, %25
  %41 = fsub double 1.000000e+00, %40
  %42 = fmul double %26, %21
  %43 = fsub double %41, %42
  %44 = fmul double %22, %25
  %45 = fsub double %43, %44
  %46 = fmul double %22, %26
  %47 = fsub double %45, %46
  %48 = fmul double %31, %47
  %49 = fadd double %39, %48
  %50 = fmul double %31, 0.000000e+00
  %51 = fsub double 0.000000e+00, %50
  %52 = fmul double %18, %51
  %53 = fadd double %52, %49
  %54 = bitcast double %31 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %31, %56
  %58 = fmul double %31, %31
  %59 = fmul double %56, %56
  %60 = fsub double %59, %58
  %61 = fadd double %56, %56
  %62 = fmul double %61, %57
  %63 = fadd double %60, %62
  %64 = fmul double %57, %57
  %65 = fadd double %64, %63
  %66 = fadd double %53, %53
  %67 = fmul double %31, %66
  %68 = fadd double %65, %67
  %69 = fadd double %58, 1.000000e+00
  %70 = fsub double %69, %58
  %71 = fsub double %69, %70
  %72 = fsub double %58, %71
  %73 = fsub double 1.000000e+00, %70
  %74 = fadd double %73, %72
  %75 = fadd double %74, %68
  %76 = fadd double %69, %75
  %77 = tail call double @sqrt(double %76) #5
  %78 = bitcast double %77 to i64
  %79 = and i64 %78, -134217728
  %80 = bitcast i64 %79 to double
  %81 = fsub double %77, %80
  %82 = fmul double %77, %77
  %83 = fmul double %80, %80
  %84 = fsub double %83, %82
  %85 = fmul double %81, %80
  %86 = fadd double %85, %84
  %87 = fadd double %85, %86
  %88 = fmul double %81, %81
  %89 = fadd double %88, %87
  %90 = fadd double %69, %82
  %91 = fsub double %90, %69
  %92 = fsub double %90, %91
  %93 = fsub double %69, %92
  %94 = fsub double %82, %91
  %95 = fadd double %94, %93
  %96 = fadd double %75, %89
  %97 = fadd double %95, %96
  %98 = fdiv double 1.000000e+00, %77
  %99 = bitcast double %98 to i64
  %100 = and i64 %99, -134217728
  %101 = bitcast i64 %100 to double
  %102 = fsub double %98, %101
  %103 = fmul double %80, %101
  %104 = fsub double 1.000000e+00, %103
  %105 = fmul double %102, %80
  %106 = fsub double %104, %105
  %107 = fmul double %81, %101
  %108 = fsub double %106, %107
  %109 = fmul double %81, %102
  %110 = fsub double %108, %109
  %111 = fmul double %98, %110
  %112 = bitcast double %90 to i64
  %113 = and i64 %112, -134217728
  %114 = bitcast i64 %113 to double
  %115 = fsub double %90, %114
  %116 = fmul double %98, %90
  %117 = fmul double %101, %114
  %118 = fsub double %117, %116
  %119 = fmul double %115, %101
  %120 = fadd double %119, %118
  %121 = fmul double %102, %114
  %122 = fadd double %121, %120
  %123 = fmul double %102, %115
  %124 = fadd double %123, %122
  %125 = fmul double %90, %111
  %126 = fadd double %124, %125
  %127 = fmul double %98, %97
  %128 = fadd double %127, %126
  %129 = fmul double %116, 5.000000e-01
  %130 = fmul double %128, 5.000000e-01
  %131 = bitcast double %129 to i64
  %132 = and i64 %131, -134217728
  %133 = bitcast i64 %132 to double
  %134 = fsub double %129, %133
  %135 = bitcast double %12 to i64
  %136 = and i64 %135, -134217728
  %137 = bitcast i64 %136 to double
  %138 = fsub double %12, %137
  %139 = fmul double %12, %129
  %140 = fmul double %137, %133
  %141 = fsub double %140, %139
  %142 = fmul double %134, %137
  %143 = fadd double %142, %141
  %144 = fmul double %138, %133
  %145 = fadd double %144, %143
  %146 = fmul double %138, %134
  %147 = fadd double %146, %145
  %148 = fmul double %12, %130
  %149 = fadd double %147, %148
  %150 = fadd double %139, %149
  %151 = fcmp ord double %5, 0.000000e+00
  br i1 %151, label %152, label %158

; <label>:152:                                    ; preds = %2
  %153 = fcmp oeq double %10, 0.000000e+00
  %154 = fcmp ord double %150, 0.000000e+00
  %155 = select i1 %154, double %150, double 0x7FF0000000000000
  %156 = select i1 %153, double %12, double %155
  %157 = fcmp ord double %8, 0.000000e+00
  br i1 %157, label %159, label %158

; <label>:158:                                    ; preds = %152, %2
  br label %159

; <label>:159:                                    ; preds = %152, %158
  %160 = phi double [ 0x7FF8000000000000, %158 ], [ %156, %152 ]
  %161 = fcmp oeq double %5, 0x7FF0000000000000
  %162 = fcmp oeq double %8, 0x7FF0000000000000
  %163 = or i1 %161, %162
  %164 = select i1 %163, double 0x7FF0000000000000, double %160
  ret double %164
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypot_u35(double, double) local_unnamed_addr #2 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fdiv double %10, %12
  %14 = fmul double %13, %13
  %15 = fadd double %14, 1.000000e+00
  %16 = tail call double @sqrt(double %15) #5
  %17 = fcmp ord double %5, 0.000000e+00
  br i1 %17, label %18, label %23

; <label>:18:                                     ; preds = %2
  %19 = fcmp oeq double %10, 0.000000e+00
  %20 = fmul double %12, %16
  %21 = select i1 %19, double %12, double %20
  %22 = fcmp ord double %8, 0.000000e+00
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %18, %2
  br label %24

; <label>:24:                                     ; preds = %18, %23
  %25 = phi double [ 0x7FF8000000000000, %23 ], [ %21, %18 ]
  %26 = fcmp oeq double %5, 0x7FF0000000000000
  %27 = fcmp oeq double %8, 0x7FF0000000000000
  %28 = or i1 %26, %27
  %29 = select i1 %28, double 0x7FF0000000000000, double %25
  ret double %29
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_nextafter(double, double) local_unnamed_addr #0 {
  %3 = fcmp oeq double %0, 0.000000e+00
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %2
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = bitcast i64 %6 to double
  br label %8

; <label>:8:                                      ; preds = %2, %4
  %9 = phi double [ %7, %4 ], [ %0, %2 ]
  %10 = bitcast double %9 to i64
  %11 = lshr i64 %10, 63
  %12 = trunc i64 %11 to i32
  %13 = fcmp ogt double %9, %1
  %14 = zext i1 %13 to i32
  %15 = icmp eq i32 %12, %14
  %16 = xor i64 %10, -9223372036854775808
  %17 = sub i64 0, %16
  %18 = select i1 %15, i64 %17, i64 %10
  %19 = fcmp une double %9, %1
  %20 = sext i1 %19 to i64
  %21 = add nsw i64 %18, %20
  %22 = xor i64 %21, -9223372036854775808
  %23 = sub i64 0, %22
  %24 = select i1 %15, i64 %23, i64 %21
  %25 = fcmp ord double %9, 0.000000e+00
  br i1 %25, label %26, label %39

; <label>:26:                                     ; preds = %8
  %27 = fcmp une double %9, 0.000000e+00
  %28 = bitcast i64 %24 to double
  %29 = fcmp oeq double %28, 0.000000e+00
  %30 = and i1 %27, %29
  %31 = and i64 %10, -9223372036854775808
  %32 = select i1 %30, i64 %31, i64 %24
  %33 = fcmp oeq double %9, 0.000000e+00
  %34 = fcmp oeq double %1, 0.000000e+00
  %35 = and i1 %34, %33
  %36 = bitcast double %1 to i64
  %37 = select i1 %35, i64 %36, i64 %32
  %38 = fcmp ord double %1, 0.000000e+00
  br i1 %38, label %40, label %39

; <label>:39:                                     ; preds = %26, %8
  br label %40

; <label>:40:                                     ; preds = %26, %39
  %41 = phi i64 [ 9221120237041090560, %39 ], [ %37, %26 ]
  %42 = bitcast i64 %41 to double
  ret double %42
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_frfrexp(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %6, double %0
  %8 = bitcast double %7 to i64
  %9 = and i64 %8, -9218868437227405313
  %10 = or i64 %9, 4602678819172646912
  %11 = fcmp une double %7, 0x7FF0000000000000
  %12 = fcmp une double %7, 0xFFF0000000000000
  %13 = and i1 %12, %11
  %14 = and i64 %8, -9223372036854775808
  %15 = or i64 %14, 9218868437227405312
  %16 = select i1 %13, i64 %10, i64 %15
  %17 = fcmp oeq double %7, 0.000000e+00
  %18 = select i1 %17, i64 %8, i64 %16
  %19 = bitcast i64 %18 to double
  ret double %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_expfrexp(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %6, double %0
  %8 = fcmp ueq double %7, 0.000000e+00
  br i1 %8, label %19, label %9

; <label>:9:                                      ; preds = %1
  %10 = select i1 %5, i32 -1085, i32 -1022
  %11 = bitcast double %7 to i64
  %12 = lshr i64 %11, 52
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 2047
  %15 = add nsw i32 %10, %14
  %16 = fcmp une double %7, 0x7FF0000000000000
  %17 = fcmp une double %7, 0xFFF0000000000000
  %18 = and i1 %17, %16
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %1, %9
  br label %20

; <label>:20:                                     ; preds = %9, %19
  %21 = phi i32 [ 0, %19 ], [ %15, %9 ]
  ret i32 %21
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmod(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %8, 0x10000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = fmul double %8, 0x4350000000000000
  %12 = select i1 %9, double 0x3C90000000000000, double 1.000000e+00
  %13 = select i1 %9, double %11, double %8
  %14 = select i1 %9, double %10, double %5
  %15 = fdiv double 1.000000e+00, %13
  %16 = fcmp oeq double %15, 0.000000e+00
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %2
  %18 = bitcast double %15 to i64
  %19 = add nsw i64 %18, -1
  %20 = bitcast i64 %19 to double
  br label %21

; <label>:21:                                     ; preds = %2, %17
  %22 = phi double [ %20, %17 ], [ 0.000000e+00, %2 ]
  %23 = fmul double %13, 3.000000e+00
  %24 = fmul double %13, 2.000000e+00
  %25 = fsub double -0.000000e+00, %13
  %26 = bitcast double %25 to i64
  %27 = and i64 %26, -134217728
  %28 = bitcast i64 %27 to double
  %29 = fsub double %25, %28
  br label %30

; <label>:30:                                     ; preds = %57, %21
  %31 = phi double [ 0.000000e+00, %21 ], [ %95, %57 ]
  %32 = phi double [ %14, %21 ], [ %93, %57 ]
  %33 = phi i32 [ 0, %21 ], [ %97, %57 ]
  %34 = fcmp oeq double %32, 0.000000e+00
  br i1 %34, label %39, label %35

; <label>:35:                                     ; preds = %30
  %36 = bitcast double %32 to i64
  %37 = add nsw i64 %36, -1
  %38 = bitcast i64 %37 to double
  br label %39

; <label>:39:                                     ; preds = %30, %35
  %40 = phi double [ %38, %35 ], [ 0.000000e+00, %30 ]
  %41 = fmul double %22, %40
  %42 = fmul double %41, 0x3E00000000000000
  %43 = fptosi double %42 to i32
  %44 = sitofp i32 %43 to double
  %45 = fmul double %44, 0x41E0000000000000
  %46 = fsub double %41, %45
  %47 = bitcast double %41 to i64
  %48 = and i64 %47, 9223372036854775807
  %49 = bitcast i64 %48 to double
  %50 = fcmp ult double %49, 0x4330000000000000
  br i1 %50, label %51, label %57

; <label>:51:                                     ; preds = %39
  %52 = fptosi double %46 to i32
  %53 = sitofp i32 %52 to double
  %54 = fsub double %46, %53
  %55 = fsub double %41, %54
  %56 = bitcast double %55 to i64
  br label %57

; <label>:57:                                     ; preds = %39, %51
  %58 = phi i64 [ %47, %39 ], [ %56, %51 ]
  %59 = and i64 %58, -2
  %60 = bitcast i64 %59 to double
  %61 = fcmp ogt double %23, %32
  %62 = fcmp ogt double %32, %13
  %63 = and i1 %61, %62
  %64 = select i1 %63, double 2.000000e+00, double %60
  %65 = fcmp ogt double %24, %32
  %66 = and i1 %65, %62
  %67 = select i1 %66, double 1.000000e+00, double %64
  %68 = fcmp oeq double %32, %13
  %69 = fcmp oge double %31, 0.000000e+00
  %70 = uitofp i1 %69 to double
  %71 = select i1 %68, double %70, double %67
  %72 = bitcast double %71 to i64
  %73 = and i64 %72, -134217728
  %74 = bitcast i64 %73 to double
  %75 = fsub double %71, %74
  %76 = fmul double %71, %25
  %77 = fmul double %28, %74
  %78 = fsub double %77, %76
  %79 = fmul double %75, %28
  %80 = fadd double %79, %78
  %81 = fmul double %29, %74
  %82 = fadd double %81, %80
  %83 = fmul double %29, %75
  %84 = fadd double %83, %82
  %85 = fadd double %32, %76
  %86 = fsub double %85, %32
  %87 = fsub double %85, %86
  %88 = fsub double %32, %87
  %89 = fsub double %76, %86
  %90 = fadd double %89, %88
  %91 = fadd double %31, %84
  %92 = fadd double %90, %91
  %93 = fadd double %85, %92
  %94 = fsub double %85, %93
  %95 = fadd double %92, %94
  %96 = fcmp uge double %93, %13
  %97 = add nuw nsw i32 %33, 1
  %98 = icmp ult i32 %97, 21
  %99 = and i1 %96, %98
  br i1 %99, label %30, label %100

; <label>:100:                                    ; preds = %57
  %101 = fmul double %12, %93
  %102 = fadd double %93, %95
  %103 = fcmp oeq double %102, %13
  %104 = bitcast double %101 to i64
  %105 = select i1 %103, i64 0, i64 %104
  %106 = and i64 %3, -9223372036854775808
  %107 = xor i64 %105, %106
  %108 = bitcast i64 %107 to double
  %109 = fcmp olt double %14, %13
  %110 = select i1 %109, double %0, double %108
  %111 = fcmp oeq double %13, 0.000000e+00
  %112 = select i1 %111, double 0x7FF8000000000000, double %110
  ret double %112
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_remainder(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %8, 0x20000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = fmul double %8, 0x4350000000000000
  %12 = select i1 %9, double 0x3C90000000000000, double 1.000000e+00
  %13 = select i1 %9, double %11, double %8
  %14 = select i1 %9, double %10, double %5
  %15 = fdiv double 1.000000e+00, %13
  %16 = fmul double %13, 1.500000e+00
  %17 = fmul double %13, 5.000000e-01
  %18 = fsub double -0.000000e+00, %13
  %19 = bitcast double %18 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %18, %21
  br label %23

; <label>:23:                                     ; preds = %2, %85
  %24 = phi double [ 0.000000e+00, %2 ], [ %110, %85 ]
  %25 = phi double [ %14, %2 ], [ %108, %85 ]
  %26 = phi i32 [ 0, %2 ], [ %111, %85 ]
  %27 = phi i32 [ 0, %2 ], [ %87, %85 ]
  %28 = fmul double %15, %25
  %29 = bitcast double %28 to i64
  %30 = and i64 %29, -9223372036854775808
  %31 = or i64 %30, 4841369599423283200
  %32 = bitcast i64 %31 to double
  %33 = and i64 %29, 9223372036854775807
  %34 = bitcast i64 %33 to double
  %35 = fcmp ogt double %34, 0x4330000000000000
  br i1 %35, label %41, label %36

; <label>:36:                                     ; preds = %23
  %37 = fadd double %28, %32
  %38 = fsub double %37, %32
  %39 = bitcast double %38 to i64
  %40 = or i64 %30, %39
  br label %41

; <label>:41:                                     ; preds = %23, %36
  %42 = phi i64 [ %29, %23 ], [ %40, %36 ]
  %43 = and i64 %42, -2
  %44 = bitcast i64 %43 to double
  %45 = bitcast double %25 to i64
  %46 = and i64 %45, 9223372036854775807
  %47 = bitcast i64 %46 to double
  %48 = fcmp ogt double %16, %47
  %49 = fcmp olt double %25, 0.000000e+00
  %50 = select i1 %49, double -1.000000e+00, double 1.000000e+00
  %51 = select i1 %48, double %50, double %44
  %52 = fcmp ogt double %17, %47
  br i1 %52, label %113, label %53

; <label>:53:                                     ; preds = %41
  %54 = fcmp oeq double %17, %47
  %55 = icmp eq i32 %27, 0
  %56 = and i1 %55, %54
  %57 = fcmp oeq double %51, 0.000000e+00
  %58 = or i1 %56, %57
  br i1 %58, label %113, label %59

; <label>:59:                                     ; preds = %53
  %60 = fmul double %51, %18
  %61 = fcmp une double %60, 0x7FF0000000000000
  %62 = fcmp une double %60, 0xFFF0000000000000
  %63 = and i1 %62, %61
  br i1 %63, label %69, label %64

; <label>:64:                                     ; preds = %59
  %65 = and i64 %45, -9223372036854775808
  %66 = xor i64 %65, -4616189618054758400
  %67 = bitcast i64 %66 to double
  %68 = fadd double %51, %67
  br label %69

; <label>:69:                                     ; preds = %59, %64
  %70 = phi double [ %68, %64 ], [ %51, %59 ]
  %71 = fmul double %70, 0x3E00000000000000
  %72 = fptosi double %71 to i32
  %73 = sitofp i32 %72 to double
  %74 = fmul double %73, 0x41E0000000000000
  %75 = fsub double %70, %74
  %76 = fptosi double %75 to i32
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  %79 = bitcast double %70 to i64
  br i1 %78, label %85, label %80

; <label>:80:                                     ; preds = %69
  %81 = and i64 %79, 9223372036854775807
  %82 = bitcast i64 %81 to double
  %83 = fcmp olt double %82, 0x4340000000000000
  %84 = zext i1 %83 to i32
  br label %85

; <label>:85:                                     ; preds = %69, %80
  %86 = phi i32 [ %84, %80 ], [ 0, %69 ]
  %87 = xor i32 %86, %27
  %88 = and i64 %79, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %70, %89
  %91 = fmul double %70, %18
  %92 = fmul double %21, %89
  %93 = fsub double %92, %91
  %94 = fmul double %90, %21
  %95 = fadd double %94, %93
  %96 = fmul double %22, %89
  %97 = fadd double %96, %95
  %98 = fmul double %22, %90
  %99 = fadd double %98, %97
  %100 = fadd double %25, %91
  %101 = fsub double %100, %25
  %102 = fsub double %100, %101
  %103 = fsub double %25, %102
  %104 = fsub double %91, %101
  %105 = fadd double %104, %103
  %106 = fadd double %24, %99
  %107 = fadd double %105, %106
  %108 = fadd double %100, %107
  %109 = fsub double %100, %108
  %110 = fadd double %107, %109
  %111 = add nuw nsw i32 %26, 1
  %112 = icmp ult i32 %111, 21
  br i1 %112, label %23, label %113

; <label>:113:                                    ; preds = %53, %41, %85
  %114 = phi double [ %25, %53 ], [ %25, %41 ], [ %108, %85 ]
  %115 = fmul double %12, %114
  %116 = bitcast double %115 to i64
  %117 = and i64 %3, -9223372036854775808
  %118 = xor i64 %117, %116
  %119 = bitcast i64 %118 to double
  %120 = fcmp une double %1, 0x7FF0000000000000
  %121 = fcmp une double %1, 0xFFF0000000000000
  %122 = and i1 %121, %120
  br i1 %122, label %128, label %123

; <label>:123:                                    ; preds = %113
  %124 = fcmp une double %0, 0x7FF0000000000000
  %125 = fcmp une double %0, 0xFFF0000000000000
  %126 = and i1 %125, %124
  %127 = select i1 %126, double %0, double 0x7FF8000000000000
  br label %128

; <label>:128:                                    ; preds = %113, %123
  %129 = phi double [ %127, %123 ], [ %119, %113 ]
  %130 = fcmp oeq double %13, 0.000000e+00
  %131 = select i1 %130, double 0x7FF8000000000000, double %129
  ret double %131
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_modf(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = bitcast double %0 to i64
  %11 = and i64 %10, 9223372036854775807
  %12 = bitcast i64 %11 to double
  %13 = fcmp oge double %12, 0x4330000000000000
  %14 = select i1 %13, double 0.000000e+00, double %9
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9223372036854775807
  %17 = and i64 %10, -9223372036854775808
  %18 = or i64 %16, %17
  %19 = bitcast i64 %18 to double
  %20 = fsub double %0, %14
  %21 = bitcast double %20 to i64
  %22 = and i64 %21, 9223372036854775807
  %23 = or i64 %22, %17
  %24 = bitcast i64 %23 to double
  %25 = insertvalue { double, double } undef, double %19, 0
  %26 = insertvalue { double, double } %25, double %24, 1
  ret { double, double } %26
}

; Function Attrs: nounwind uwtable
define double @Sleef_tgamma_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 8
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #5
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = fadd double %5, %7
  %9 = fmul double %8, 0x3FF71547652B82FE
  %10 = fcmp olt double %9, 0.000000e+00
  %11 = select i1 %10, double -5.000000e-01, double 5.000000e-01
  %12 = fadd double %9, %11
  %13 = fptosi double %12 to i32
  %14 = sitofp i32 %13 to double
  %15 = fmul double %14, 0xBFE62E42FEFA3000
  %16 = fadd double %5, %15
  %17 = fsub double %16, %5
  %18 = fsub double %16, %17
  %19 = fsub double %5, %18
  %20 = fsub double %15, %17
  %21 = fadd double %20, %19
  %22 = fadd double %7, %21
  %23 = fmul double %14, 0xBD53DE6AF278ECE6
  %24 = fadd double %23, %16
  %25 = fsub double %24, %16
  %26 = fsub double %24, %25
  %27 = fsub double %16, %26
  %28 = fsub double %23, %25
  %29 = fadd double %28, %27
  %30 = fadd double %29, %22
  %31 = fmul double %24, 0x3DE60632A887194C
  %32 = fadd double %31, 0x3E21F8EAF54829DC
  %33 = fmul double %24, %32
  %34 = fadd double %33, 0x3E5AE652E8103AB6
  %35 = fmul double %24, %34
  %36 = fadd double %35, 0x3E927E4C95A9765C
  %37 = fmul double %24, %36
  %38 = fadd double %37, 0x3EC71DE3A11D7656
  %39 = fmul double %24, %38
  %40 = fadd double %39, 0x3EFA01A01AF6F0B7
  %41 = fmul double %24, %40
  %42 = fadd double %41, 0x3F2A01A01A02D002
  %43 = fmul double %24, %42
  %44 = fadd double %43, 0x3F56C16C16C145CC
  %45 = fmul double %24, %44
  %46 = fadd double %45, 0x3F81111111111119
  %47 = fmul double %24, %46
  %48 = fadd double %47, 0x3FA555555555555A
  %49 = bitcast double %24 to i64
  %50 = and i64 %49, -134217728
  %51 = bitcast i64 %50 to double
  %52 = fsub double %24, %51
  %53 = bitcast double %48 to i64
  %54 = and i64 %53, -134217728
  %55 = bitcast i64 %54 to double
  %56 = fsub double %48, %55
  %57 = fmul double %24, %48
  %58 = fmul double %51, %55
  %59 = fsub double %58, %57
  %60 = fmul double %52, %55
  %61 = fadd double %60, %59
  %62 = fmul double %56, %51
  %63 = fadd double %62, %61
  %64 = fmul double %52, %56
  %65 = fadd double %64, %63
  %66 = fmul double %30, %48
  %67 = fadd double %66, %65
  %68 = fadd double %57, 0x3FC5555555555555
  %69 = fsub double %68, %57
  %70 = fsub double %68, %69
  %71 = fsub double %57, %70
  %72 = fsub double 0x3FC5555555555555, %69
  %73 = fadd double %72, %71
  %74 = fadd double %73, %67
  %75 = bitcast double %68 to i64
  %76 = and i64 %75, -134217728
  %77 = bitcast i64 %76 to double
  %78 = fsub double %68, %77
  %79 = fmul double %24, %68
  %80 = fmul double %51, %77
  %81 = fsub double %80, %79
  %82 = fmul double %52, %77
  %83 = fadd double %82, %81
  %84 = fmul double %78, %51
  %85 = fadd double %84, %83
  %86 = fmul double %52, %78
  %87 = fadd double %86, %85
  %88 = fmul double %24, %74
  %89 = fadd double %87, %88
  %90 = fmul double %30, %68
  %91 = fadd double %90, %89
  %92 = fadd double %79, 5.000000e-01
  %93 = fsub double %92, %79
  %94 = fsub double %92, %93
  %95 = fsub double %79, %94
  %96 = fsub double 5.000000e-01, %93
  %97 = fadd double %96, %95
  %98 = fadd double %97, %91
  %99 = fmul double %24, %24
  %100 = fmul double %51, %51
  %101 = fsub double %100, %99
  %102 = fadd double %51, %51
  %103 = fmul double %102, %52
  %104 = fadd double %101, %103
  %105 = fmul double %52, %52
  %106 = fadd double %105, %104
  %107 = fadd double %30, %30
  %108 = fmul double %24, %107
  %109 = fadd double %108, %106
  %110 = bitcast double %99 to i64
  %111 = and i64 %110, -134217728
  %112 = bitcast i64 %111 to double
  %113 = fsub double %99, %112
  %114 = bitcast double %92 to i64
  %115 = and i64 %114, -134217728
  %116 = bitcast i64 %115 to double
  %117 = fsub double %92, %116
  %118 = fmul double %99, %92
  %119 = fmul double %112, %116
  %120 = fsub double %119, %118
  %121 = fmul double %113, %116
  %122 = fadd double %121, %120
  %123 = fmul double %117, %112
  %124 = fadd double %123, %122
  %125 = fmul double %113, %117
  %126 = fadd double %125, %124
  %127 = fmul double %99, %98
  %128 = fadd double %126, %127
  %129 = fmul double %109, %92
  %130 = fadd double %129, %128
  %131 = fadd double %24, %118
  %132 = fsub double %131, %24
  %133 = fsub double %131, %132
  %134 = fsub double %24, %133
  %135 = fsub double %118, %132
  %136 = fadd double %135, %134
  %137 = fadd double %30, %130
  %138 = fadd double %136, %137
  %139 = fadd double %131, 1.000000e+00
  %140 = fadd double %139, -1.000000e+00
  %141 = fsub double %139, %140
  %142 = fsub double 1.000000e+00, %141
  %143 = fsub double %131, %140
  %144 = fadd double %143, %142
  %145 = fadd double %144, %138
  %146 = ashr i32 %13, 1
  %147 = add nsw i32 %146, 1023
  %148 = zext i32 %147 to i64
  %149 = shl i64 %148, 52
  %150 = bitcast i64 %149 to double
  %151 = fmul double %139, %150
  %152 = add i32 %13, 1023
  %153 = sub i32 %152, %146
  %154 = zext i32 %153 to i64
  %155 = shl i64 %154, 52
  %156 = bitcast i64 %155 to double
  %157 = fmul double %151, %156
  %158 = fmul double %145, %150
  %159 = fmul double %158, %156
  %160 = fcmp olt double %5, -1.000000e+03
  %161 = select i1 %160, double 0.000000e+00, double %157
  %162 = select i1 %160, double 0.000000e+00, double %159
  %163 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %164 = load double, double* %163, align 8
  %165 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %166 = load double, double* %165, align 8
  %167 = bitcast double %161 to i64
  %168 = and i64 %167, -134217728
  %169 = bitcast i64 %168 to double
  %170 = fsub double %161, %169
  %171 = bitcast double %164 to i64
  %172 = and i64 %171, -134217728
  %173 = bitcast i64 %172 to double
  %174 = fsub double %164, %173
  %175 = fmul double %164, %161
  %176 = fmul double %173, %169
  %177 = fsub double %176, %175
  %178 = fmul double %170, %173
  %179 = fadd double %178, %177
  %180 = fmul double %174, %169
  %181 = fadd double %180, %179
  %182 = fmul double %174, %170
  %183 = fadd double %182, %181
  %184 = fmul double %166, %161
  %185 = fadd double %184, %183
  %186 = fmul double %164, %162
  %187 = fadd double %185, %186
  %188 = fadd double %175, %187
  %189 = fcmp oeq double %0, 0xFFF0000000000000
  br i1 %189, label %215, label %190

; <label>:190:                                    ; preds = %1
  %191 = fcmp olt double %0, 0.000000e+00
  br i1 %191, label %192, label %206

; <label>:192:                                    ; preds = %190
  %193 = fmul double %0, 0x3E00000000000000
  %194 = fptosi double %193 to i32
  %195 = sitofp i32 %194 to double
  %196 = fmul double %195, 0x41E0000000000000
  %197 = fsub double %0, %196
  %198 = fptosi double %197 to i32
  %199 = sitofp i32 %198 to double
  %200 = fcmp oeq double %197, %199
  br i1 %200, label %215, label %201

; <label>:201:                                    ; preds = %192
  %202 = bitcast double %0 to i64
  %203 = and i64 %202, 9223372036854775807
  %204 = bitcast i64 %203 to double
  %205 = fcmp ult double %204, 0x4340000000000000
  br i1 %205, label %206, label %215

; <label>:206:                                    ; preds = %201, %190
  %207 = fcmp une double %0, 0x7FF0000000000000
  %208 = fcmp ord double %0, 0.000000e+00
  %209 = and i1 %208, %207
  %210 = and i1 %191, %209
  %211 = xor i1 %210, true
  %212 = fcmp ord double %188, 0.000000e+00
  %213 = or i1 %212, %211
  %214 = select i1 %213, double %188, double 0x7FF8000000000000
  br label %215

; <label>:215:                                    ; preds = %206, %192, %201, %1
  %216 = phi double [ 0x7FF8000000000000, %201 ], [ 0x7FF8000000000000, %1 ], [ 0x7FF8000000000000, %192 ], [ %214, %206 ]
  %217 = fcmp oeq double %0, 0x7FF0000000000000
  br i1 %217, label %224, label %218

; <label>:218:                                    ; preds = %215
  %219 = fcmp une double %0, 0xFFF0000000000000
  %220 = fcmp ord double %0, 0.000000e+00
  %221 = and i1 %220, %219
  %222 = fcmp oge double %0, 0x8010000000000000
  %223 = and i1 %222, %221
  br i1 %223, label %224, label %235

; <label>:224:                                    ; preds = %215, %218
  %225 = fcmp une double %0, 0.000000e+00
  %226 = fcmp ule double %0, 2.000000e+02
  %227 = and i1 %226, %225
  %228 = fcmp ord double %216, 0.000000e+00
  %229 = and i1 %227, %228
  br i1 %229, label %235, label %230

; <label>:230:                                    ; preds = %224
  %231 = bitcast double %0 to i64
  %232 = and i64 %231, -9223372036854775808
  %233 = or i64 %232, 9218868437227405312
  %234 = bitcast i64 %233 to double
  br label %235

; <label>:235:                                    ; preds = %224, %218, %230
  %236 = phi double [ %234, %230 ], [ %216, %218 ], [ %216, %224 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #5
  ret double %236
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, double) unnamed_addr #4 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp olt double %5, 1.000000e-306
  %7 = fcmp olt double %1, 5.000000e-01
  %8 = xor i1 %7, true
  %9 = or i1 %6, %8
  %10 = select i1 %6, double 0.000000e+00, double %1
  br i1 %9, label %19, label %11

; <label>:11:                                     ; preds = %2
  %12 = fsub double -0.000000e+00, %1
  %13 = fsub double 1.000000e+00, %1
  %14 = fadd double %13, -1.000000e+00
  %15 = fsub double %13, %14
  %16 = fsub double 1.000000e+00, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  br label %19

; <label>:19:                                     ; preds = %2, %11
  %20 = phi double [ %13, %11 ], [ %10, %2 ]
  %21 = phi double [ %18, %11 ], [ 0.000000e+00, %2 ]
  %22 = fcmp oge double %20, 5.000000e-01
  %23 = fcmp ole double %20, 1.100000e+00
  %24 = and i1 %22, %23
  %25 = fcmp ogt double %20, 2.300000e+00
  %26 = fadd double %20, 1.000000e+00
  %27 = fsub double %26, %20
  %28 = fsub double %26, %27
  %29 = fsub double %20, %28
  %30 = fsub double 1.000000e+00, %27
  %31 = fadd double %30, %29
  %32 = fadd double %21, %31
  %33 = bitcast double %26 to i64
  %34 = and i64 %33, -134217728
  %35 = bitcast i64 %34 to double
  %36 = fsub double %26, %35
  %37 = bitcast double %20 to i64
  %38 = and i64 %37, -134217728
  %39 = bitcast i64 %38 to double
  %40 = fsub double %20, %39
  %41 = fmul double %20, %26
  %42 = fmul double %39, %35
  %43 = fsub double %42, %41
  %44 = fmul double %36, %39
  %45 = fadd double %44, %43
  %46 = fmul double %40, %35
  %47 = fadd double %46, %45
  %48 = fmul double %40, %36
  %49 = fadd double %48, %47
  %50 = fmul double %26, %21
  %51 = fadd double %50, %49
  %52 = fmul double %20, %32
  %53 = fadd double %52, %51
  %54 = fadd double %41, %53
  %55 = fsub double %41, %54
  %56 = fadd double %53, %55
  %57 = fadd double %20, 2.000000e+00
  %58 = fsub double %57, %20
  %59 = fsub double %57, %58
  %60 = fsub double %20, %59
  %61 = fsub double 2.000000e+00, %58
  %62 = fadd double %61, %60
  %63 = fadd double %21, %62
  %64 = bitcast double %57 to i64
  %65 = and i64 %64, -134217728
  %66 = bitcast i64 %65 to double
  %67 = fsub double %57, %66
  %68 = bitcast double %54 to i64
  %69 = and i64 %68, -134217728
  %70 = bitcast i64 %69 to double
  %71 = fsub double %54, %70
  %72 = fmul double %57, %54
  %73 = fmul double %66, %70
  %74 = fsub double %73, %72
  %75 = fmul double %67, %70
  %76 = fadd double %75, %74
  %77 = fmul double %71, %66
  %78 = fadd double %77, %76
  %79 = fmul double %67, %71
  %80 = fadd double %79, %78
  %81 = fmul double %57, %56
  %82 = fadd double %81, %80
  %83 = fmul double %63, %54
  %84 = fadd double %83, %82
  %85 = fadd double %72, %84
  %86 = fsub double %72, %85
  %87 = fadd double %84, %86
  %88 = fadd double %20, 3.000000e+00
  %89 = fsub double %88, %20
  %90 = fsub double %88, %89
  %91 = fsub double %20, %90
  %92 = fsub double 3.000000e+00, %89
  %93 = fadd double %92, %91
  %94 = fadd double %21, %93
  %95 = bitcast double %88 to i64
  %96 = and i64 %95, -134217728
  %97 = bitcast i64 %96 to double
  %98 = fsub double %88, %97
  %99 = bitcast double %85 to i64
  %100 = and i64 %99, -134217728
  %101 = bitcast i64 %100 to double
  %102 = fsub double %85, %101
  %103 = fmul double %88, %85
  %104 = fmul double %97, %101
  %105 = fsub double %104, %103
  %106 = fmul double %98, %101
  %107 = fadd double %106, %105
  %108 = fmul double %102, %97
  %109 = fadd double %108, %107
  %110 = fmul double %98, %102
  %111 = fadd double %110, %109
  %112 = fmul double %88, %87
  %113 = fadd double %112, %111
  %114 = fmul double %94, %85
  %115 = fadd double %114, %113
  %116 = fadd double %103, %115
  %117 = fsub double %103, %116
  %118 = fadd double %115, %117
  %119 = fadd double %20, 4.000000e+00
  %120 = fsub double %119, %20
  %121 = fsub double %119, %120
  %122 = fsub double %20, %121
  %123 = fsub double 4.000000e+00, %120
  %124 = fadd double %123, %122
  %125 = fadd double %21, %124
  %126 = bitcast double %119 to i64
  %127 = and i64 %126, -134217728
  %128 = bitcast i64 %127 to double
  %129 = fsub double %119, %128
  %130 = bitcast double %116 to i64
  %131 = and i64 %130, -134217728
  %132 = bitcast i64 %131 to double
  %133 = fsub double %116, %132
  %134 = fmul double %119, %116
  %135 = fmul double %128, %132
  %136 = fsub double %135, %134
  %137 = fmul double %129, %132
  %138 = fadd double %137, %136
  %139 = fmul double %133, %128
  %140 = fadd double %139, %138
  %141 = fmul double %129, %133
  %142 = fadd double %141, %140
  %143 = fmul double %119, %118
  %144 = fadd double %143, %142
  %145 = fmul double %125, %116
  %146 = fadd double %145, %144
  %147 = fadd double %134, %146
  %148 = fsub double %134, %147
  %149 = fadd double %146, %148
  %150 = xor i1 %25, true
  %151 = fcmp ugt double %20, 7.000000e+00
  %152 = or i1 %151, %150
  %153 = select i1 %152, double 1.000000e+00, double %147
  %154 = select i1 %152, double 0.000000e+00, double %149
  br i1 %152, label %163, label %155

; <label>:155:                                    ; preds = %19
  %156 = fadd double %20, 5.000000e+00
  %157 = fsub double %156, %20
  %158 = fsub double %156, %157
  %159 = fsub double %20, %158
  %160 = fsub double 5.000000e+00, %157
  %161 = fadd double %160, %159
  %162 = fadd double %21, %161
  br label %163

; <label>:163:                                    ; preds = %19, %155
  %164 = phi double [ %156, %155 ], [ %20, %19 ]
  %165 = phi double [ %162, %155 ], [ %21, %19 ]
  br i1 %25, label %166, label %168

; <label>:166:                                    ; preds = %163
  %167 = fdiv double 1.000000e+00, %164
  br label %178

; <label>:168:                                    ; preds = %163
  %169 = select i1 %24, double -1.000000e+00, double -2.000000e+00
  %170 = fadd double %169, %164
  %171 = fsub double %170, %164
  %172 = fsub double %170, %171
  %173 = fsub double %164, %172
  %174 = fsub double %169, %171
  %175 = fadd double %174, %173
  %176 = fadd double %165, %175
  %177 = fadd double %170, %176
  br label %178

; <label>:178:                                    ; preds = %168, %166
  %179 = phi double [ %167, %166 ], [ %177, %168 ]
  %180 = select i1 %24, double 0x403D7AAABC7A3EA1, double 0x3E72FDC6CB0D558F
  %181 = select i1 %25, double 0xC06399A52C414C0D, double %180
  %182 = select i1 %24, double 0x406004ABC79048B9, double 0x3E9AE7D44E1AB8F6
  %183 = select i1 %25, double 0x3FF1EED0A9756022, double %182
  %184 = fmul double %181, %179
  %185 = fadd double %183, %184
  %186 = select i1 %24, double 0x40705C120870277A, double 0x3EB1734224875A66
  %187 = select i1 %25, double 0x402ACBC4BFE43E00, double %186
  %188 = fmul double %179, %185
  %189 = fadd double %187, %188
  %190 = select i1 %24, double 0x40748B3C8FCAD7FF, double 0x3EB94E4F6E12FEE0
  %191 = select i1 %25, double 0xBFBDD5FA0E771B94, double %190
  %192 = fmul double %179, %189
  %193 = fadd double %191, %192
  %194 = select i1 %24, double 0x40719D088C23DF05, double 0x3EB59C884A045AF0
  %195 = select i1 %25, double 0xBFF644D13921C967, double %194
  %196 = fmul double %179, %193
  %197 = fadd double %195, %196
  %198 = select i1 %24, double 0x40659BBECDBF523B, double 0x3E9FD66B0AC39DFF
  %199 = select i1 %25, double 0x3F8ED5BD48E4F389, double %198
  %200 = fmul double %179, %197
  %201 = fadd double %199, %200
  %202 = select i1 %24, double 0x40535F30DE19A3FA, double 0xBE71986F7AC19AC9
  %203 = select i1 %25, double 0x3FC6FB2BA98C8BC4, double %202
  %204 = fmul double %179, %201
  %205 = fadd double %203, %204
  %206 = select i1 %24, double 0x403920E9BAC7B07E, double 0xBE956718120CF4B7
  %207 = select i1 %25, double 0xBF645497F334CD1D, double %206
  %208 = fmul double %179, %205
  %209 = fadd double %207, %208
  %210 = select i1 %24, double 0x40171131F32ACF74, double 0x3E823D16D999C674
  %211 = select i1 %25, double 0xBF9E3C8E8BED86BB, double %210
  %212 = fmul double %179, %209
  %213 = fadd double %211, %212
  %214 = select i1 %24, double 0x3FE743CF466BEB1B, double 0xBE9D26D12E073976
  %215 = select i1 %25, double 0x3F41B33B019B3E6F, double %214
  %216 = fmul double %179, %213
  %217 = fadd double %215, %216
  %218 = select i1 %24, double 0x3FB57EDE06D746AF, double 0x3EB050C384661C46
  %219 = select i1 %25, double 0x3F7A3A699F4A401B, double %218
  %220 = fmul double %179, %217
  %221 = fadd double %219, %220
  %222 = select i1 %24, double 0xBFB50586EF5B83AC, double 0xBEC1162DF3C28D5A
  %223 = select i1 %25, double 0xBF254D241144693F, double %222
  %224 = fmul double %179, %221
  %225 = fadd double %223, %224
  %226 = select i1 %24, double 0x3FB17B57DDB9E32F, double 0x3ED257DCE81F6BB4
  %227 = select i1 %25, double 0xBF5F5DBCAF756CDE, double %226
  %228 = fmul double %179, %225
  %229 = fadd double %227, %228
  %230 = select i1 %24, double 0xBFB3BE73A742EECE, double 0xBEE3CC0905ECA8BE
  %231 = select i1 %25, double 0x3F12E31F9B7913EA, double %230
  %232 = fmul double %179, %229
  %233 = fadd double %231, %232
  %234 = select i1 %24, double 0x3FB5580F0BB1F8CA, double 0x3EF580E0E2726AC9
  %235 = select i1 %25, double 0x3F4B8239C670E690, double %234
  %236 = fmul double %179, %233
  %237 = fadd double %235, %236
  %238 = select i1 %24, double 0xBFB74879E96382CA, double 0xBF078DE48A7816D9
  %239 = select i1 %25, double 0xBF0B1D75D3346711, double %238
  %240 = fmul double %179, %237
  %241 = fadd double %239, %240
  %242 = select i1 %24, double 0x3FB9A0212305C3B9, double 0x3F1A127B0D3DBB7D
  %243 = select i1 %25, double 0xBF436773BDB97B48, double %242
  %244 = fmul double %179, %241
  %245 = fadd double %243, %244
  %246 = select i1 %24, double 0xBFBC80675DF4ED19, double 0xBF2D3FD4CA9D6B1F
  %247 = select i1 %25, double 0x3F1247604839C038, double %246
  %248 = fmul double %179, %245
  %249 = fadd double %247, %248
  %250 = select i1 %24, double 0x3FC010B3663D08D8, double 0x3F40B36AF85EF785
  %251 = select i1 %25, double 0x3F49B0FF6874F2C4, double %250
  %252 = fmul double %179, %249
  %253 = fadd double %251, %252
  %254 = select i1 %24, double 0xBFC2703A1DD72363, double 0xBF538AC5C2BD10CA
  %255 = select i1 %25, double 0xBF2E13CE465FA859, double %254
  %256 = fmul double %179, %253
  %257 = fadd double %255, %256
  %258 = select i1 %24, double 0x3FC5B40CB1047E2E, double 0x3F67ADD6EADB7260
  %259 = select i1 %25, double 0xBF65F7268EDAB4C8, double %258
  %260 = fmul double %179, %257
  %261 = fadd double %259, %260
  %262 = select i1 %24, double 0xBFCA8B9C17AA3C08, double 0xBF7E404FC218F817
  %263 = select i1 %25, double 0x3F6C71C71C71C71C, double %262
  %264 = fmul double %179, %261
  %265 = fadd double %263, %264
  %266 = select i1 %24, double 0x3FD151322AC7D813, double 0x3F951322AC7D8485
  %267 = select i1 %25, double 0x3FB5555555555555, double %266
  %268 = fmul double %179, %265
  %269 = fadd double %267, %268
  %270 = fadd double %164, -5.000000e-01
  %271 = fsub double %270, %164
  %272 = fsub double %270, %271
  %273 = fsub double %164, %272
  %274 = fsub double -5.000000e-01, %271
  %275 = fadd double %274, %273
  %276 = fadd double %165, %275
  %277 = fmul double %164, 0x3FF5555555555555
  %278 = fcmp olt double %277, 0x2D30000000000000
  %279 = fmul double %277, 0x52B0000000000000
  %280 = select i1 %278, double %279, double %277
  %281 = bitcast double %280 to i64
  %282 = lshr i64 %281, 52
  %283 = trunc i64 %282 to i32
  %284 = and i32 %283, 2047
  %285 = select i1 %278, i32 -1323, i32 -1023
  %286 = add nsw i32 %284, %285
  %287 = sub nsw i32 0, %286
  %288 = ashr i32 %287, 1
  %289 = add nsw i32 %288, 1023
  %290 = zext i32 %289 to i64
  %291 = shl i64 %290, 52
  %292 = bitcast i64 %291 to double
  %293 = fmul double %164, %292
  %294 = sub nsw i32 1023, %286
  %295 = sub nsw i32 %294, %288
  %296 = zext i32 %295 to i64
  %297 = shl i64 %296, 52
  %298 = bitcast i64 %297 to double
  %299 = fmul double %293, %298
  %300 = fmul double %165, %292
  %301 = fmul double %300, %298
  %302 = fadd double %299, -1.000000e+00
  %303 = fsub double %302, %299
  %304 = fsub double %302, %303
  %305 = fsub double %299, %304
  %306 = fsub double -1.000000e+00, %303
  %307 = fadd double %306, %305
  %308 = fadd double %301, %307
  %309 = fadd double %299, 1.000000e+00
  %310 = fsub double %309, %299
  %311 = fsub double %309, %310
  %312 = fsub double %299, %311
  %313 = fsub double 1.000000e+00, %310
  %314 = fadd double %313, %312
  %315 = fadd double %301, %314
  %316 = fdiv double 1.000000e+00, %309
  %317 = bitcast double %309 to i64
  %318 = and i64 %317, -134217728
  %319 = bitcast i64 %318 to double
  %320 = fsub double %309, %319
  %321 = bitcast double %316 to i64
  %322 = and i64 %321, -134217728
  %323 = bitcast i64 %322 to double
  %324 = fsub double %316, %323
  %325 = bitcast double %302 to i64
  %326 = and i64 %325, -134217728
  %327 = bitcast i64 %326 to double
  %328 = fsub double %302, %327
  %329 = fmul double %302, %316
  %330 = fmul double %327, %323
  %331 = fsub double %330, %329
  %332 = fmul double %324, %327
  %333 = fadd double %331, %332
  %334 = fmul double %328, %323
  %335 = fadd double %334, %333
  %336 = fmul double %328, %324
  %337 = fadd double %336, %335
  %338 = fmul double %319, %323
  %339 = fsub double 1.000000e+00, %338
  %340 = fmul double %324, %319
  %341 = fsub double %339, %340
  %342 = fmul double %320, %323
  %343 = fsub double %341, %342
  %344 = fmul double %320, %324
  %345 = fsub double %343, %344
  %346 = fmul double %329, %345
  %347 = fadd double %337, %346
  %348 = fmul double %329, %315
  %349 = fsub double %308, %348
  %350 = fmul double %316, %349
  %351 = fadd double %350, %347
  %352 = bitcast double %329 to i64
  %353 = and i64 %352, -134217728
  %354 = bitcast i64 %353 to double
  %355 = fsub double %329, %354
  %356 = fmul double %329, %329
  %357 = fmul double %354, %354
  %358 = fsub double %357, %356
  %359 = fadd double %354, %354
  %360 = fmul double %359, %355
  %361 = fadd double %358, %360
  %362 = fmul double %355, %355
  %363 = fadd double %362, %361
  %364 = fadd double %351, %351
  %365 = fmul double %329, %364
  %366 = fadd double %363, %365
  %367 = fmul double %356, %356
  %368 = fmul double %367, %367
  %369 = fmul double %356, 0x3FC0DB8A525B4A6B
  %370 = fadd double %369, 0x3FC3B3759FB81971
  %371 = fmul double %367, 0x3FC1BDC9AD06D760
  %372 = fadd double %371, %370
  %373 = fmul double %356, 0x3FC745C38C19C82A
  %374 = fadd double %373, 0x3FCC71C750354F90
  %375 = fmul double %356, 0x3FD2492492114D0C
  %376 = fadd double %375, 0x3FD999999999D9EB
  %377 = fmul double %367, %374
  %378 = fadd double %376, %377
  %379 = fmul double %368, %372
  %380 = fadd double %379, %378
  %381 = fmul double %356, %380
  %382 = fadd double %381, 0x3FE5555555555545
  %383 = sitofp i32 %286 to double
  %384 = bitcast double %383 to i64
  %385 = and i64 %384, -134217728
  %386 = bitcast i64 %385 to double
  %387 = fsub double %383, %386
  %388 = fmul double %383, 0x3FE62E42FEFA39EF
  %389 = fmul double %386, 0x3FE62E42F8000000
  %390 = fsub double %389, %388
  %391 = fmul double %386, 0x3E4BE8E7BC000000
  %392 = fadd double %391, %390
  %393 = fmul double %387, 0x3FE62E42F8000000
  %394 = fadd double %393, %392
  %395 = fmul double %387, 0x3E4BE8E7BC000000
  %396 = fadd double %395, %394
  %397 = fmul double %383, 0x3C7ABC9E3B39803F
  %398 = fadd double %397, %396
  %399 = fmul double %329, 2.000000e+00
  %400 = fmul double %351, 2.000000e+00
  %401 = fadd double %388, %399
  %402 = fsub double %388, %401
  %403 = fadd double %399, %402
  %404 = fadd double %398, %403
  %405 = fadd double %404, %400
  %406 = bitcast double %356 to i64
  %407 = and i64 %406, -134217728
  %408 = bitcast i64 %407 to double
  %409 = fsub double %356, %408
  %410 = fmul double %329, %356
  %411 = fmul double %354, %408
  %412 = fsub double %411, %410
  %413 = fmul double %409, %354
  %414 = fadd double %413, %412
  %415 = fmul double %355, %408
  %416 = fadd double %415, %414
  %417 = fmul double %355, %409
  %418 = fadd double %417, %416
  %419 = fmul double %356, %351
  %420 = fadd double %418, %419
  %421 = fmul double %329, %366
  %422 = fadd double %420, %421
  %423 = bitcast double %410 to i64
  %424 = and i64 %423, -134217728
  %425 = bitcast i64 %424 to double
  %426 = fsub double %410, %425
  %427 = bitcast double %382 to i64
  %428 = and i64 %427, -134217728
  %429 = bitcast i64 %428 to double
  %430 = fsub double %382, %429
  %431 = fmul double %410, %382
  %432 = fmul double %425, %429
  %433 = fsub double %432, %431
  %434 = fmul double %426, %429
  %435 = fadd double %434, %433
  %436 = fmul double %430, %425
  %437 = fadd double %436, %435
  %438 = fmul double %426, %430
  %439 = fadd double %438, %437
  %440 = fmul double %382, %422
  %441 = fadd double %440, %439
  %442 = fadd double %401, %431
  %443 = fsub double %401, %442
  %444 = fadd double %431, %443
  %445 = fadd double %444, %405
  %446 = fadd double %445, %441
  %447 = bitcast double %270 to i64
  %448 = and i64 %447, -134217728
  %449 = bitcast i64 %448 to double
  %450 = fsub double %270, %449
  %451 = bitcast double %442 to i64
  %452 = and i64 %451, -134217728
  %453 = bitcast i64 %452 to double
  %454 = fsub double %442, %453
  %455 = fmul double %270, %442
  %456 = fmul double %449, %453
  %457 = fsub double %456, %455
  %458 = fmul double %450, %453
  %459 = fadd double %458, %457
  %460 = fmul double %454, %449
  %461 = fadd double %460, %459
  %462 = fmul double %450, %454
  %463 = fadd double %462, %461
  %464 = fmul double %270, %446
  %465 = fadd double %463, %464
  %466 = fmul double %276, %442
  %467 = fadd double %466, %465
  %468 = fsub double -0.000000e+00, %164
  %469 = fsub double %455, %164
  %470 = fsub double %469, %455
  %471 = fsub double %469, %470
  %472 = fsub double %455, %471
  %473 = fsub double %468, %470
  %474 = fadd double %473, %472
  %475 = fsub double %467, %165
  %476 = fadd double %474, %475
  %477 = fadd double %469, 0x3FED67F1C864BEB5
  %478 = fsub double %477, %469
  %479 = fsub double %477, %478
  %480 = fsub double %469, %479
  %481 = fsub double 0x3FED67F1C864BEB5, %478
  %482 = fadd double %481, %480
  %483 = fadd double %476, 0xBC865B5A1B7FF5DF
  %484 = fadd double %482, %483
  %485 = bitcast double %269 to i64
  %486 = and i64 %485, -134217728
  %487 = bitcast i64 %486 to double
  %488 = fsub double %269, %487
  %489 = bitcast double %179 to i64
  %490 = and i64 %489, -134217728
  %491 = bitcast i64 %490 to double
  %492 = fsub double %179, %491
  %493 = fmul double %179, %269
  %494 = fmul double %491, %487
  %495 = fsub double %494, %493
  %496 = fmul double %488, %491
  %497 = fadd double %496, %495
  %498 = fmul double %492, %487
  %499 = fadd double %498, %497
  %500 = fmul double %492, %488
  %501 = fadd double %500, %499
  %502 = select i1 %24, double 0xBFD9A4D55BEAB2D8, double 0xBFB13E001A557607
  %503 = fadd double %502, %493
  %504 = fsub double %503, %493
  %505 = fsub double %503, %504
  %506 = fsub double %493, %505
  %507 = fsub double %502, %504
  %508 = fadd double %507, %506
  %509 = fadd double %508, %501
  %510 = bitcast double %503 to i64
  %511 = and i64 %510, -134217728
  %512 = bitcast i64 %511 to double
  %513 = fsub double %503, %512
  %514 = fmul double %179, %503
  %515 = fmul double %491, %512
  %516 = fsub double %515, %514
  %517 = fmul double %513, %491
  %518 = fadd double %517, %516
  %519 = fmul double %492, %512
  %520 = fadd double %519, %518
  %521 = fmul double %492, %513
  %522 = fadd double %521, %520
  %523 = fmul double %179, %509
  %524 = fadd double %523, %522
  %525 = select i1 %24, double 0x3FEA51A6625307D3, double 0x3FD4A34CC4A60FA6
  %526 = fadd double %525, %514
  %527 = fsub double %526, %514
  %528 = fsub double %526, %527
  %529 = fsub double %514, %528
  %530 = fsub double %525, %527
  %531 = fadd double %530, %529
  %532 = fadd double %531, %524
  %533 = bitcast double %526 to i64
  %534 = and i64 %533, -134217728
  %535 = bitcast i64 %534 to double
  %536 = fsub double %526, %535
  %537 = fmul double %179, %526
  %538 = fmul double %491, %535
  %539 = fsub double %538, %537
  %540 = fmul double %536, %491
  %541 = fadd double %540, %539
  %542 = fmul double %492, %535
  %543 = fadd double %542, %541
  %544 = fmul double %492, %536
  %545 = fadd double %544, %543
  %546 = fmul double %179, %532
  %547 = fadd double %545, %546
  %548 = select i1 %24, double 0xBFE2788CFC6FB619, double 0x3FDB0EE6072093CE
  %549 = fadd double %548, %537
  %550 = fsub double %549, %537
  %551 = fsub double %549, %550
  %552 = fsub double %537, %551
  %553 = fsub double %548, %550
  %554 = fadd double %553, %552
  %555 = fadd double %554, %547
  %556 = bitcast double %549 to i64
  %557 = and i64 %556, -134217728
  %558 = bitcast i64 %557 to double
  %559 = fsub double %549, %558
  %560 = fmul double %179, %549
  %561 = fmul double %491, %558
  %562 = fsub double %561, %560
  %563 = fmul double %559, %491
  %564 = fadd double %563, %562
  %565 = fmul double %492, %558
  %566 = fadd double %565, %564
  %567 = fmul double %492, %559
  %568 = fadd double %567, %566
  %569 = fmul double %179, %555
  %570 = fadd double %568, %569
  %571 = select i1 %25, double %477, double %560
  %572 = select i1 %25, double %484, double %570
  br i1 %25, label %573, label %581

; <label>:573:                                    ; preds = %178
  %574 = fadd double %493, 1.000000e+00
  %575 = fsub double %574, %493
  %576 = fsub double %574, %575
  %577 = fsub double %493, %576
  %578 = fsub double 1.000000e+00, %575
  %579 = fadd double %578, %577
  %580 = fadd double %579, %501
  br label %581

; <label>:581:                                    ; preds = %178, %573
  %582 = phi double [ %574, %573 ], [ 1.000000e+00, %178 ]
  %583 = phi double [ %580, %573 ], [ 0.000000e+00, %178 ]
  br i1 %6, label %600, label %584

; <label>:584:                                    ; preds = %581
  br i1 %7, label %585, label %595

; <label>:585:                                    ; preds = %584
  %586 = fsub double -0.000000e+00, %571
  %587 = fsub double 0x3FF250D048E7A1BD, %571
  %588 = fadd double %587, 0xBFF250D048E7A1BD
  %589 = fsub double %587, %588
  %590 = fsub double 0x3FF250D048E7A1BD, %589
  %591 = fsub double %586, %588
  %592 = fadd double %591, %590
  %593 = fsub double 0x3C67ABF2AD8D5088, %572
  %594 = fadd double %592, %593
  br label %595

; <label>:595:                                    ; preds = %584, %585
  %596 = phi double [ %571, %584 ], [ %587, %585 ]
  %597 = phi double [ %572, %584 ], [ %594, %585 ]
  %598 = select i1 %7, double %153, double %582
  %599 = select i1 %7, double %154, double %583
  br label %600

; <label>:600:                                    ; preds = %581, %595
  %601 = phi double [ %597, %595 ], [ 0x3CF0886A2BC2F41E, %581 ]
  %602 = phi double [ %596, %595 ], [ 0x4054CB5ECF0A9650, %581 ]
  %603 = phi double [ %598, %595 ], [ 1.000000e+00, %581 ]
  %604 = phi double [ %599, %595 ], [ 0.000000e+00, %581 ]
  br i1 %7, label %605, label %751

; <label>:605:                                    ; preds = %600
  %606 = fmul double %1, 0x3E30000000000000
  %607 = fptosi double %606 to i32
  %608 = sitofp i32 %607 to double
  %609 = fmul double %608, 0x41B0000000000000
  %610 = fsub double %1, %609
  %611 = fmul double %610, 4.000000e+00
  %612 = fptosi double %611 to i32
  %613 = fcmp uge double %611, 0.000000e+00
  %614 = zext i1 %613 to i32
  %615 = add nsw i32 %614, %612
  %616 = and i32 %615, -2
  %617 = and i32 %615, 2
  %618 = icmp ne i32 %617, 0
  %619 = sitofp i32 %616 to double
  %620 = fsub double %611, %619
  %621 = fmul double %620, %620
  %622 = bitcast double %620 to i64
  %623 = and i64 %622, -134217728
  %624 = bitcast i64 %623 to double
  %625 = fsub double %620, %624
  %626 = fmul double %624, %624
  %627 = fsub double %626, %621
  %628 = fmul double %625, %624
  %629 = fadd double %628, %627
  %630 = fadd double %628, %629
  %631 = fmul double %625, %625
  %632 = fadd double %631, %630
  %633 = select i1 %618, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115
  %634 = select i1 %618, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38
  %635 = fmul double %633, %621
  %636 = fadd double %634, %635
  %637 = select i1 %618, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020
  %638 = fmul double %621, %636
  %639 = fadd double %637, %638
  %640 = select i1 %618, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8
  %641 = fmul double %621, %639
  %642 = fadd double %640, %641
  %643 = select i1 %618, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479
  %644 = fmul double %621, %642
  %645 = fadd double %643, %644
  %646 = select i1 %618, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE
  %647 = fmul double %621, %645
  %648 = fadd double %646, %647
  %649 = fmul double %621, %648
  %650 = select i1 %618, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53
  %651 = select i1 %618, double 0xBC33500000000000, double 0x3C50B00000000000
  %652 = fadd double %650, %649
  %653 = fsub double %652, %649
  %654 = fsub double %652, %653
  %655 = fsub double %649, %654
  %656 = fsub double %650, %653
  %657 = fadd double %656, %655
  %658 = fadd double %651, %657
  %659 = bitcast double %621 to i64
  %660 = and i64 %659, -134217728
  %661 = bitcast i64 %660 to double
  %662 = fsub double %621, %661
  %663 = bitcast double %652 to i64
  %664 = and i64 %663, -134217728
  %665 = bitcast i64 %664 to double
  %666 = fsub double %652, %665
  %667 = fmul double %621, %652
  %668 = fmul double %661, %665
  %669 = fsub double %668, %667
  %670 = fmul double %662, %665
  %671 = fadd double %670, %669
  %672 = fmul double %666, %661
  %673 = fadd double %672, %671
  %674 = fmul double %662, %666
  %675 = fadd double %674, %673
  %676 = fmul double %621, %658
  %677 = fadd double %676, %675
  %678 = fmul double %632, %652
  %679 = fadd double %678, %677
  %680 = select i1 %618, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18
  %681 = select i1 %618, double 0xBC76900000000000, double 0x3C81A80000000000
  %682 = fadd double %680, %667
  %683 = fsub double %682, %667
  %684 = fsub double %682, %683
  %685 = fsub double %667, %684
  %686 = fsub double %680, %683
  %687 = fadd double %686, %685
  %688 = fadd double %681, %679
  %689 = fadd double %687, %688
  %690 = select i1 %618, double %632, double 0.000000e+00
  %691 = select i1 %618, double %621, double %620
  %692 = bitcast double %682 to i64
  %693 = and i64 %692, -134217728
  %694 = bitcast i64 %693 to double
  %695 = fsub double %682, %694
  %696 = bitcast double %691 to i64
  %697 = and i64 %696, -134217728
  %698 = bitcast i64 %697 to double
  %699 = fsub double %691, %698
  %700 = fmul double %691, %682
  %701 = fmul double %698, %694
  %702 = fsub double %701, %700
  %703 = fmul double %695, %698
  %704 = fadd double %703, %702
  %705 = fmul double %699, %694
  %706 = fadd double %705, %704
  %707 = fmul double %699, %695
  %708 = fadd double %707, %706
  %709 = fmul double %690, %682
  %710 = fadd double %709, %708
  %711 = fmul double %691, %689
  %712 = fadd double %710, %711
  br i1 %618, label %713, label %721

; <label>:713:                                    ; preds = %605
  %714 = fadd double %700, 1.000000e+00
  %715 = fsub double %714, %700
  %716 = fsub double %714, %715
  %717 = fsub double %700, %716
  %718 = fsub double 1.000000e+00, %715
  %719 = fadd double %718, %717
  %720 = fadd double %719, %712
  br label %721

; <label>:721:                                    ; preds = %605, %713
  %722 = phi double [ %714, %713 ], [ %700, %605 ]
  %723 = phi double [ %720, %713 ], [ %712, %605 ]
  %724 = and i32 %615, 4
  %725 = icmp eq i32 %724, 0
  %726 = fsub double -0.000000e+00, %722
  %727 = fsub double -0.000000e+00, %723
  %728 = select i1 %725, double %722, double %726
  %729 = select i1 %725, double %723, double %727
  %730 = bitcast double %582 to i64
  %731 = and i64 %730, -134217728
  %732 = bitcast i64 %731 to double
  %733 = fsub double %582, %732
  %734 = bitcast double %728 to i64
  %735 = and i64 %734, -134217728
  %736 = bitcast i64 %735 to double
  %737 = fsub double %728, %736
  %738 = fmul double %582, %728
  %739 = fmul double %732, %736
  %740 = fsub double %739, %738
  %741 = fmul double %733, %736
  %742 = fadd double %741, %740
  %743 = fmul double %737, %732
  %744 = fadd double %743, %742
  %745 = fmul double %733, %737
  %746 = fadd double %745, %744
  %747 = fmul double %582, %729
  %748 = fadd double %747, %746
  %749 = fmul double %583, %728
  %750 = fadd double %749, %748
  br label %751

; <label>:751:                                    ; preds = %721, %600
  %752 = phi double [ %738, %721 ], [ %164, %600 ]
  %753 = phi double [ %750, %721 ], [ %165, %600 ]
  %754 = fmul double %1, 0x4770000000000000
  %755 = select i1 %7, double %752, double %153
  %756 = select i1 %7, double %753, double %154
  %757 = select i1 %6, double %754, double %755
  %758 = select i1 %6, double 0.000000e+00, double %756
  %759 = fdiv double 1.000000e+00, %757
  %760 = bitcast double %757 to i64
  %761 = and i64 %760, -134217728
  %762 = bitcast i64 %761 to double
  %763 = fsub double %757, %762
  %764 = bitcast double %759 to i64
  %765 = and i64 %764, -134217728
  %766 = bitcast i64 %765 to double
  %767 = fsub double %759, %766
  %768 = bitcast double %603 to i64
  %769 = and i64 %768, -134217728
  %770 = bitcast i64 %769 to double
  %771 = fsub double %603, %770
  %772 = fmul double %603, %759
  %773 = fmul double %770, %766
  %774 = fsub double %773, %772
  %775 = fmul double %767, %770
  %776 = fadd double %774, %775
  %777 = fmul double %771, %766
  %778 = fadd double %777, %776
  %779 = fmul double %771, %767
  %780 = fadd double %779, %778
  %781 = fmul double %762, %766
  %782 = fsub double 1.000000e+00, %781
  %783 = fmul double %767, %762
  %784 = fsub double %782, %783
  %785 = fmul double %763, %766
  %786 = fsub double %784, %785
  %787 = fmul double %763, %767
  %788 = fsub double %786, %787
  %789 = fmul double %772, %788
  %790 = fadd double %780, %789
  %791 = fmul double %758, %772
  %792 = fsub double %604, %791
  %793 = fmul double %759, %792
  %794 = fadd double %793, %790
  %795 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store double %602, double* %795, align 8
  %796 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store double %601, double* %796, align 8
  %797 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store double %772, double* %797, align 8
  %798 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store double %794, double* %798, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define double @Sleef_lgamma_u10(double) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 8
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #5
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %7 = load double, double* %6, align 8
  %8 = fcmp olt double %5, 0.000000e+00
  %9 = fsub double -0.000000e+00, %5
  %10 = select i1 %8, double %9, double %5
  %11 = fsub double -0.000000e+00, %7
  %12 = select i1 %8, double %11, double %7
  %13 = fmul double %10, 0x3FF5555555555555
  %14 = fcmp olt double %13, 0x2D30000000000000
  %15 = fmul double %13, 0x52B0000000000000
  %16 = select i1 %14, double %15, double %13
  %17 = bitcast double %16 to i64
  %18 = lshr i64 %17, 52
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2047
  %21 = select i1 %14, i32 -1323, i32 -1023
  %22 = add nsw i32 %20, %21
  %23 = sub nsw i32 0, %22
  %24 = ashr i32 %23, 1
  %25 = add nsw i32 %24, 1023
  %26 = zext i32 %25 to i64
  %27 = shl i64 %26, 52
  %28 = bitcast i64 %27 to double
  %29 = fmul double %10, %28
  %30 = sub nsw i32 1023, %22
  %31 = sub nsw i32 %30, %24
  %32 = zext i32 %31 to i64
  %33 = shl i64 %32, 52
  %34 = bitcast i64 %33 to double
  %35 = fmul double %29, %34
  %36 = fmul double %12, %28
  %37 = fmul double %36, %34
  %38 = fadd double %35, -1.000000e+00
  %39 = fsub double %38, %35
  %40 = fsub double %38, %39
  %41 = fsub double %35, %40
  %42 = fsub double -1.000000e+00, %39
  %43 = fadd double %42, %41
  %44 = fadd double %37, %43
  %45 = fadd double %35, 1.000000e+00
  %46 = fsub double %45, %35
  %47 = fsub double %45, %46
  %48 = fsub double %35, %47
  %49 = fsub double 1.000000e+00, %46
  %50 = fadd double %49, %48
  %51 = fadd double %37, %50
  %52 = fdiv double 1.000000e+00, %45
  %53 = bitcast double %45 to i64
  %54 = and i64 %53, -134217728
  %55 = bitcast i64 %54 to double
  %56 = fsub double %45, %55
  %57 = bitcast double %52 to i64
  %58 = and i64 %57, -134217728
  %59 = bitcast i64 %58 to double
  %60 = fsub double %52, %59
  %61 = bitcast double %38 to i64
  %62 = and i64 %61, -134217728
  %63 = bitcast i64 %62 to double
  %64 = fsub double %38, %63
  %65 = fmul double %38, %52
  %66 = fmul double %63, %59
  %67 = fsub double %66, %65
  %68 = fmul double %60, %63
  %69 = fadd double %67, %68
  %70 = fmul double %64, %59
  %71 = fadd double %70, %69
  %72 = fmul double %64, %60
  %73 = fadd double %72, %71
  %74 = fmul double %55, %59
  %75 = fsub double 1.000000e+00, %74
  %76 = fmul double %60, %55
  %77 = fsub double %75, %76
  %78 = fmul double %56, %59
  %79 = fsub double %77, %78
  %80 = fmul double %56, %60
  %81 = fsub double %79, %80
  %82 = fmul double %65, %81
  %83 = fadd double %73, %82
  %84 = fmul double %65, %51
  %85 = fsub double %44, %84
  %86 = fmul double %52, %85
  %87 = fadd double %86, %83
  %88 = bitcast double %65 to i64
  %89 = and i64 %88, -134217728
  %90 = bitcast i64 %89 to double
  %91 = fsub double %65, %90
  %92 = fmul double %65, %65
  %93 = fmul double %90, %90
  %94 = fsub double %93, %92
  %95 = fadd double %90, %90
  %96 = fmul double %95, %91
  %97 = fadd double %94, %96
  %98 = fmul double %91, %91
  %99 = fadd double %98, %97
  %100 = fadd double %87, %87
  %101 = fmul double %65, %100
  %102 = fadd double %99, %101
  %103 = fmul double %92, %92
  %104 = fmul double %103, %103
  %105 = fmul double %92, 0x3FC0DB8A525B4A6B
  %106 = fadd double %105, 0x3FC3B3759FB81971
  %107 = fmul double %103, 0x3FC1BDC9AD06D760
  %108 = fadd double %107, %106
  %109 = fmul double %92, 0x3FC745C38C19C82A
  %110 = fadd double %109, 0x3FCC71C750354F90
  %111 = fmul double %92, 0x3FD2492492114D0C
  %112 = fadd double %111, 0x3FD999999999D9EB
  %113 = fmul double %103, %110
  %114 = fadd double %112, %113
  %115 = fmul double %104, %108
  %116 = fadd double %115, %114
  %117 = fmul double %92, %116
  %118 = fadd double %117, 0x3FE5555555555545
  %119 = sitofp i32 %22 to double
  %120 = bitcast double %119 to i64
  %121 = and i64 %120, -134217728
  %122 = bitcast i64 %121 to double
  %123 = fsub double %119, %122
  %124 = fmul double %119, 0x3FE62E42FEFA39EF
  %125 = fmul double %122, 0x3FE62E42F8000000
  %126 = fsub double %125, %124
  %127 = fmul double %122, 0x3E4BE8E7BC000000
  %128 = fadd double %127, %126
  %129 = fmul double %123, 0x3FE62E42F8000000
  %130 = fadd double %129, %128
  %131 = fmul double %123, 0x3E4BE8E7BC000000
  %132 = fadd double %131, %130
  %133 = fmul double %119, 0x3C7ABC9E3B39803F
  %134 = fadd double %133, %132
  %135 = fmul double %65, 2.000000e+00
  %136 = fmul double %87, 2.000000e+00
  %137 = fadd double %124, %135
  %138 = fsub double %124, %137
  %139 = fadd double %135, %138
  %140 = fadd double %134, %139
  %141 = fadd double %140, %136
  %142 = bitcast double %92 to i64
  %143 = and i64 %142, -134217728
  %144 = bitcast i64 %143 to double
  %145 = fsub double %92, %144
  %146 = fmul double %65, %92
  %147 = fmul double %90, %144
  %148 = fsub double %147, %146
  %149 = fmul double %145, %90
  %150 = fadd double %149, %148
  %151 = fmul double %91, %144
  %152 = fadd double %151, %150
  %153 = fmul double %91, %145
  %154 = fadd double %153, %152
  %155 = fmul double %92, %87
  %156 = fadd double %154, %155
  %157 = fmul double %65, %102
  %158 = fadd double %156, %157
  %159 = bitcast double %146 to i64
  %160 = and i64 %159, -134217728
  %161 = bitcast i64 %160 to double
  %162 = fsub double %146, %161
  %163 = bitcast double %118 to i64
  %164 = and i64 %163, -134217728
  %165 = bitcast i64 %164 to double
  %166 = fsub double %118, %165
  %167 = fmul double %146, %118
  %168 = fmul double %161, %165
  %169 = fsub double %168, %167
  %170 = fmul double %162, %165
  %171 = fadd double %170, %169
  %172 = fmul double %166, %161
  %173 = fadd double %172, %171
  %174 = fmul double %162, %166
  %175 = fadd double %174, %173
  %176 = fmul double %118, %158
  %177 = fadd double %176, %175
  %178 = fadd double %137, %167
  %179 = fsub double %137, %178
  %180 = fadd double %167, %179
  %181 = fadd double %180, %141
  %182 = fadd double %181, %177
  %183 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %184 = load double, double* %183, align 8
  %185 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %186 = load double, double* %185, align 8
  %187 = fadd double %184, %178
  %188 = fsub double %187, %184
  %189 = fsub double %187, %188
  %190 = fsub double %184, %189
  %191 = fsub double %178, %188
  %192 = fadd double %191, %190
  %193 = fadd double %186, %182
  %194 = fadd double %192, %193
  %195 = fadd double %187, %194
  %196 = fcmp une double %0, 0x7FF0000000000000
  %197 = fcmp une double %0, 0xFFF0000000000000
  %198 = and i1 %197, %196
  br i1 %198, label %199, label %220

; <label>:199:                                    ; preds = %1
  %200 = fcmp ugt double %0, 0.000000e+00
  br i1 %200, label %215, label %201

; <label>:201:                                    ; preds = %199
  %202 = fmul double %0, 0x3E00000000000000
  %203 = fptosi double %202 to i32
  %204 = sitofp i32 %203 to double
  %205 = fmul double %204, 0x41E0000000000000
  %206 = fsub double %0, %205
  %207 = fptosi double %206 to i32
  %208 = sitofp i32 %207 to double
  %209 = fcmp oeq double %206, %208
  br i1 %209, label %220, label %210

; <label>:210:                                    ; preds = %201
  %211 = bitcast double %0 to i64
  %212 = and i64 %211, 9223372036854775807
  %213 = bitcast i64 %212 to double
  %214 = fcmp ult double %213, 0x4340000000000000
  br i1 %214, label %215, label %220

; <label>:215:                                    ; preds = %210, %199
  %216 = fcmp uno double %0, 0.000000e+00
  %217 = fcmp ord double %195, 0.000000e+00
  %218 = or i1 %217, %216
  %219 = select i1 %218, double %195, double 0x7FF0000000000000
  br label %220

; <label>:220:                                    ; preds = %215, %201, %210, %1
  %221 = phi double [ 0x7FF0000000000000, %210 ], [ 0x7FF0000000000000, %1 ], [ 0x7FF0000000000000, %201 ], [ %219, %215 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #5
  ret double %221
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_erf_u10(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 1.000000e+00
  %6 = fcmp olt double %4, 3.700000e+00
  %7 = fcmp olt double %4, 6.000000e+00
  %8 = fmul double %4, %4
  %9 = select i1 %5, double %8, double %4
  %10 = select i1 %6, double 0x3D1FDFABBDFC43F1, double 0xBC5AF69FE192740F
  %11 = select i1 %5, double 0x3BC00EFEFABE989B, double %10
  %12 = select i1 %6, double 0xBD7A8E25B9CCCB64, double 0x3CC5E4C21B562709
  %13 = select i1 %5, double 0xBC0FE6EC06B043F5, double %12
  %14 = fmul double %9, %11
  %15 = fadd double %13, %14
  %16 = select i1 %6, double 0x3DC50B3AE48C7164, double 0xBD20EE4A859274F9
  %17 = select i1 %5, double 0x3C55A7F67BDE0C17, double %16
  %18 = fmul double %9, %15
  %19 = fadd double %17, %18
  %20 = select i1 %6, double 0xBE0518912B895660, double 0x3D7095F3964F9BBA
  %21 = select i1 %5, double 0xBC9A15164BF4F36C, double %20
  %22 = fmul double %9, %19
  %23 = fadd double %21, %22
  %24 = select i1 %6, double 0x3E3E0083E7FD4B05, double 0xBDB7174964833400
  %25 = select i1 %5, double 0x3CDD6F95068FEEA8, double %24
  %26 = fmul double %9, %23
  %27 = fadd double %25, %26
  %28 = select i1 %6, double 0xBE70131398DAE973, double 0x3DF84A341FC35F63
  %29 = select i1 %5, double 0xBD1F56D9FF51275A, double %28
  %30 = fmul double %9, %27
  %31 = fadd double %29, %30
  %32 = select i1 %6, double 0x3E9AE1C4F259778D, double 0xBE34092FAEC3CB81
  %33 = select i1 %5, double 0x3D5F6839841402FB, double %32
  %34 = fmul double %9, %31
  %35 = fadd double %33, %34
  %36 = select i1 %6, double 0xBEC1E2D7E8039AC0, double 0x3E6A8ABD2DF8AA98
  %37 = select i1 %5, double 0xBD9D8453B9E7FD7B, double %36
  %38 = fmul double %9, %35
  %39 = fadd double %37, %38
  %40 = select i1 %6, double 0x3EE3117A5DB988BA, double 0xBE9CA9DF1E6D3F55
  %41 = select i1 %5, double 0x3DD9E6AD5DAB7034, double %40
  %42 = fmul double %9, %39
  %43 = fadd double %41, %42
  %44 = select i1 %6, double 0xBF0024D0F7EE3723, double 0x3EC9739C586B056B
  %45 = select i1 %5, double 0xBE151D7181C08B9D, double %44
  %46 = fmul double %9, %43
  %47 = fadd double %45, %46
  %48 = select i1 %6, double 0x3F14E58666D1B46F, double 0xBEF2A034D3F36A50
  %49 = select i1 %5, double 0x3E4FCC5720620921, double %48
  %50 = fmul double %9, %47
  %51 = fadd double %49, %50
  %52 = select i1 %6, double 0xBF2230DCD58EAD99, double 0x3F1658BA21A7397E
  %53 = select i1 %5, double 0xBE85F742EC43E5C7, double %52
  %54 = fmul double %9, %51
  %55 = fadd double %53, %54
  %56 = select i1 %6, double 0x3F10F5BA38B6A6E5, double 0xBF3590AE9D03C290
  %57 = select i1 %5, double 0x3EBB9E6C9DC6519C, double %56
  %58 = fmul double %9, %55
  %59 = fadd double %57, %58
  %60 = select i1 %6, double 0x3F405F7D6748381E, double 0x3F4FC6679B56D25A
  %61 = select i1 %5, double 0xBEEF4D25C3E0C2EA, double %60
  %62 = fmul double %9, %59
  %63 = fadd double %61, %62
  %64 = select i1 %6, double 0xBF5A9686E5DE05F7, double 0xBF5DB24AB8ACFC8B
  %65 = select i1 %5, double 0x3F1F9A326F9B89B8, double %64
  %66 = fmul double %9, %63
  %67 = fadd double %65, %66
  %68 = select i1 %6, double 0x3F252C1DCB0324BA, double 0xBF3EF7EC1133F0A8
  %69 = select i1 %5, double 0xBF4C02DB40040B84, double %68
  %70 = fmul double %9, %67
  %71 = fadd double %69, %70
  %72 = select i1 %6, double 0x3F939CBECA106F66, double 0x3F9567A2F00CE3E5
  %73 = select i1 %5, double 0x3F7565BCD0E6A540, double %72
  %74 = fmul double %9, %71
  %75 = fadd double %73, %74
  %76 = select i1 %6, double 0xBFBA4FE8F5D2A23C, double 0xBFBAEEA974D564EF
  %77 = select i1 %5, double 0xBF9B82CE31288B52, double %76
  %78 = fmul double %9, %75
  %79 = fadd double %77, %78
  %80 = select i1 %6, double 0xBFE45F2B34C61AC0, double 0xBFE44E1CB940DA9C
  %81 = select i1 %5, double 0x3FBCE2F21A042BE3, double %80
  %82 = fmul double %9, %79
  %83 = fadd double %81, %82
  %84 = select i1 %6, double 0xBFF20DD7C1F4F99A, double 0xBFF21232BFB32B5A
  %85 = select i1 %5, double 0xBFD812746B0379E7, double %84
  %86 = fmul double %9, %83
  %87 = fadd double %85, %86
  %88 = bitcast double %87 to i64
  %89 = and i64 %88, -134217728
  %90 = bitcast i64 %89 to double
  %91 = fsub double %87, %90
  %92 = bitcast double %9 to i64
  %93 = and i64 %92, -134217728
  %94 = bitcast i64 %93 to double
  %95 = fsub double %9, %94
  %96 = fmul double %9, %87
  %97 = fmul double %94, %90
  %98 = fsub double %97, %96
  %99 = fmul double %91, %94
  %100 = fadd double %99, %98
  %101 = fmul double %95, %90
  %102 = fadd double %101, %100
  %103 = fmul double %95, %91
  %104 = fadd double %103, %102
  %105 = or i1 %5, %6
  %106 = select i1 %5, double 0x3FF20DD750429B6D, double 0x3E6250219DD8BAD1
  %107 = select i1 %5, double 0x3C71AE3A914FED6D, double 0xBB080EE9AD757828
  %108 = select i1 %105, double %106, double 0x3F305C1A38102E9A
  %109 = select i1 %105, double %107, double 0xBBB9AC0AFE024E87
  %110 = fadd double %108, %96
  %111 = fsub double %110, %96
  %112 = fsub double %110, %111
  %113 = fsub double %96, %112
  %114 = fsub double %108, %111
  %115 = fadd double %114, %113
  %116 = fadd double %109, %104
  %117 = fadd double %115, %116
  br i1 %5, label %118, label %137

; <label>:118:                                    ; preds = %1
  %119 = bitcast double %110 to i64
  %120 = and i64 %119, -134217728
  %121 = bitcast i64 %120 to double
  %122 = fsub double %110, %121
  %123 = and i64 %2, 9223372036720558080
  %124 = bitcast i64 %123 to double
  %125 = fsub double %4, %124
  %126 = fmul double %110, %4
  %127 = fmul double %124, %121
  %128 = fsub double %127, %126
  %129 = fmul double %122, %124
  %130 = fadd double %129, %128
  %131 = fmul double %125, %121
  %132 = fadd double %131, %130
  %133 = fmul double %125, %122
  %134 = fadd double %133, %132
  %135 = fmul double %117, %4
  %136 = fadd double %134, %135
  br label %299

; <label>:137:                                    ; preds = %1
  %138 = fadd double %110, %117
  %139 = fmul double %138, 0x3FF71547652B82FE
  %140 = fcmp olt double %139, 0.000000e+00
  %141 = select i1 %140, double -5.000000e-01, double 5.000000e-01
  %142 = fadd double %139, %141
  %143 = fptosi double %142 to i32
  %144 = sitofp i32 %143 to double
  %145 = fmul double %144, 0xBFE62E42FEFA3000
  %146 = fadd double %110, %145
  %147 = fsub double %146, %110
  %148 = fsub double %146, %147
  %149 = fsub double %110, %148
  %150 = fsub double %145, %147
  %151 = fadd double %150, %149
  %152 = fadd double %117, %151
  %153 = fmul double %144, 0xBD53DE6AF278ECE6
  %154 = fadd double %153, %146
  %155 = fsub double %154, %146
  %156 = fsub double %154, %155
  %157 = fsub double %146, %156
  %158 = fsub double %153, %155
  %159 = fadd double %158, %157
  %160 = fadd double %159, %152
  %161 = fmul double %154, 0x3DE60632A887194C
  %162 = fadd double %161, 0x3E21F8EAF54829DC
  %163 = fmul double %154, %162
  %164 = fadd double %163, 0x3E5AE652E8103AB6
  %165 = fmul double %154, %164
  %166 = fadd double %165, 0x3E927E4C95A9765C
  %167 = fmul double %154, %166
  %168 = fadd double %167, 0x3EC71DE3A11D7656
  %169 = fmul double %154, %168
  %170 = fadd double %169, 0x3EFA01A01AF6F0B7
  %171 = fmul double %154, %170
  %172 = fadd double %171, 0x3F2A01A01A02D002
  %173 = fmul double %154, %172
  %174 = fadd double %173, 0x3F56C16C16C145CC
  %175 = fmul double %154, %174
  %176 = fadd double %175, 0x3F81111111111119
  %177 = fmul double %154, %176
  %178 = fadd double %177, 0x3FA555555555555A
  %179 = bitcast double %154 to i64
  %180 = and i64 %179, -134217728
  %181 = bitcast i64 %180 to double
  %182 = fsub double %154, %181
  %183 = bitcast double %178 to i64
  %184 = and i64 %183, -134217728
  %185 = bitcast i64 %184 to double
  %186 = fsub double %178, %185
  %187 = fmul double %154, %178
  %188 = fmul double %181, %185
  %189 = fsub double %188, %187
  %190 = fmul double %182, %185
  %191 = fadd double %190, %189
  %192 = fmul double %186, %181
  %193 = fadd double %192, %191
  %194 = fmul double %182, %186
  %195 = fadd double %194, %193
  %196 = fmul double %160, %178
  %197 = fadd double %196, %195
  %198 = fadd double %187, 0x3FC5555555555555
  %199 = fsub double %198, %187
  %200 = fsub double %198, %199
  %201 = fsub double %187, %200
  %202 = fsub double 0x3FC5555555555555, %199
  %203 = fadd double %202, %201
  %204 = fadd double %203, %197
  %205 = bitcast double %198 to i64
  %206 = and i64 %205, -134217728
  %207 = bitcast i64 %206 to double
  %208 = fsub double %198, %207
  %209 = fmul double %154, %198
  %210 = fmul double %181, %207
  %211 = fsub double %210, %209
  %212 = fmul double %182, %207
  %213 = fadd double %212, %211
  %214 = fmul double %208, %181
  %215 = fadd double %214, %213
  %216 = fmul double %182, %208
  %217 = fadd double %216, %215
  %218 = fmul double %154, %204
  %219 = fadd double %217, %218
  %220 = fmul double %160, %198
  %221 = fadd double %220, %219
  %222 = fadd double %209, 5.000000e-01
  %223 = fsub double %222, %209
  %224 = fsub double %222, %223
  %225 = fsub double %209, %224
  %226 = fsub double 5.000000e-01, %223
  %227 = fadd double %226, %225
  %228 = fadd double %227, %221
  %229 = fmul double %154, %154
  %230 = fmul double %181, %181
  %231 = fsub double %230, %229
  %232 = fadd double %181, %181
  %233 = fmul double %232, %182
  %234 = fadd double %231, %233
  %235 = fmul double %182, %182
  %236 = fadd double %235, %234
  %237 = fadd double %160, %160
  %238 = fmul double %154, %237
  %239 = fadd double %238, %236
  %240 = bitcast double %229 to i64
  %241 = and i64 %240, -134217728
  %242 = bitcast i64 %241 to double
  %243 = fsub double %229, %242
  %244 = bitcast double %222 to i64
  %245 = and i64 %244, -134217728
  %246 = bitcast i64 %245 to double
  %247 = fsub double %222, %246
  %248 = fmul double %229, %222
  %249 = fmul double %242, %246
  %250 = fsub double %249, %248
  %251 = fmul double %243, %246
  %252 = fadd double %251, %250
  %253 = fmul double %247, %242
  %254 = fadd double %253, %252
  %255 = fmul double %243, %247
  %256 = fadd double %255, %254
  %257 = fmul double %229, %228
  %258 = fadd double %256, %257
  %259 = fmul double %239, %222
  %260 = fadd double %259, %258
  %261 = fadd double %154, %248
  %262 = fsub double %261, %154
  %263 = fsub double %261, %262
  %264 = fsub double %154, %263
  %265 = fsub double %248, %262
  %266 = fadd double %265, %264
  %267 = fadd double %160, %260
  %268 = fadd double %266, %267
  %269 = fadd double %261, 1.000000e+00
  %270 = fadd double %269, -1.000000e+00
  %271 = fsub double %269, %270
  %272 = fsub double 1.000000e+00, %271
  %273 = fsub double %261, %270
  %274 = fadd double %273, %272
  %275 = fadd double %274, %268
  %276 = ashr i32 %143, 1
  %277 = add nsw i32 %276, 1023
  %278 = zext i32 %277 to i64
  %279 = shl i64 %278, 52
  %280 = bitcast i64 %279 to double
  %281 = fmul double %269, %280
  %282 = add i32 %143, 1023
  %283 = sub i32 %282, %276
  %284 = zext i32 %283 to i64
  %285 = shl i64 %284, 52
  %286 = bitcast i64 %285 to double
  %287 = fmul double %281, %286
  %288 = fmul double %275, %280
  %289 = fmul double %288, %286
  %290 = fcmp olt double %110, -1.000000e+03
  %291 = fsub double -0.000000e+00, %287
  %292 = select i1 %290, double -0.000000e+00, double %291
  %293 = fsub double -0.000000e+00, %289
  %294 = select i1 %290, double -0.000000e+00, double %293
  %295 = fadd double %292, 1.000000e+00
  %296 = fsub double 1.000000e+00, %295
  %297 = fadd double %292, %296
  %298 = fadd double %297, %294
  br label %299

; <label>:299:                                    ; preds = %137, %118
  %300 = phi double [ %126, %118 ], [ %295, %137 ]
  %301 = phi double [ %136, %118 ], [ %298, %137 ]
  %302 = fadd double %300, %301
  %303 = bitcast double %302 to i64
  %304 = select i1 %7, i64 %303, i64 4607182418800017408
  %305 = and i64 %2, -9223372036854775808
  %306 = xor i64 %304, %305
  %307 = bitcast i64 %306 to double
  %308 = fcmp ord double %4, 0.000000e+00
  %309 = select i1 %308, double %307, double 0x7FF8000000000000
  ret double %309
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_erfc_u15(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 1.000000e+00
  %6 = fcmp olt double %4, 2.200000e+00
  %7 = fcmp olt double %4, 4.200000e+00
  %8 = fcmp olt double %4, 2.730000e+01
  br i1 %5, label %9, label %21

; <label>:9:                                      ; preds = %1
  %10 = and i64 %2, 9223372036720558080
  %11 = bitcast i64 %10 to double
  %12 = fsub double %4, %11
  %13 = fmul double %4, %4
  %14 = fmul double %11, %11
  %15 = fsub double %14, %13
  %16 = fmul double %12, %11
  %17 = fadd double %16, %15
  %18 = fadd double %16, %17
  %19 = fmul double %12, %12
  %20 = fadd double %19, %18
  br label %55

; <label>:21:                                     ; preds = %1
  br i1 %6, label %22, label %26

; <label>:22:                                     ; preds = %21
  %23 = and i64 %2, 9223372036720558080
  %24 = bitcast i64 %23 to double
  %25 = fsub double %4, %24
  br label %55

; <label>:26:                                     ; preds = %21
  %27 = fdiv double 1.000000e+00, %4
  %28 = and i64 %2, 9223372036720558080
  %29 = bitcast i64 %28 to double
  %30 = fsub double %4, %29
  %31 = bitcast double %27 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %27, %33
  %35 = fsub double %33, %27
  %36 = fadd double %35, %34
  %37 = fmul double %33, 0.000000e+00
  %38 = fadd double %37, %36
  %39 = fmul double %34, 0.000000e+00
  %40 = fadd double %39, %38
  %41 = fmul double %29, %33
  %42 = fsub double 1.000000e+00, %41
  %43 = fmul double %34, %29
  %44 = fsub double %42, %43
  %45 = fmul double %30, %33
  %46 = fsub double %44, %45
  %47 = fmul double %30, %34
  %48 = fsub double %46, %47
  %49 = fmul double %27, %48
  %50 = fadd double %40, %49
  %51 = fmul double %27, 0.000000e+00
  %52 = fsub double 0.000000e+00, %51
  %53 = fmul double %27, %52
  %54 = fadd double %53, %50
  br label %55

; <label>:55:                                     ; preds = %22, %26, %9
  %56 = phi double [ %25, %22 ], [ %30, %26 ], [ %12, %9 ]
  %57 = phi double [ %24, %22 ], [ %29, %26 ], [ %11, %9 ]
  %58 = phi double [ %4, %22 ], [ %27, %26 ], [ %13, %9 ]
  %59 = phi double [ 0.000000e+00, %22 ], [ %54, %26 ], [ %20, %9 ]
  %60 = or i1 %5, %6
  %61 = select i1 %5, double 0x3BC00EFEFABE9897, double 0x3D58315E6C186224
  %62 = select i1 %7, double 0xC04CCA024E41FBF2, double 0x40D6CB9FD3B439A9
  %63 = select i1 %60, double %61, double %62
  %64 = select i1 %5, double 0xBC0FE6EC06B043F2, double 0xBDAB33CF696F6246
  %65 = select i1 %7, double 0x407D2EDD0AE020CC, double 0xC0E6ED9388CD091B
  %66 = select i1 %60, double %64, double %65
  %67 = fmul double %63, %58
  %68 = fadd double %66, %67
  %69 = select i1 %5, double 0x3C55A7F67BDE0C13, double 0x3DED1C000C3FE200
  %70 = select i1 %7, double 0xC09C1151CBEBE895, double 0x40DEFD81FD565E63
  %71 = select i1 %60, double %69, double %70
  %72 = fmul double %58, %68
  %73 = fadd double %71, %72
  %74 = select i1 %5, double 0xBC9A15164BF4F369, double 0xBE23ACFF2B1B8BEC
  %75 = select i1 %7, double 0x40B103E466CE6960, double 0x40A955F72FDA349C
  %76 = select i1 %60, double %74, double %75
  %77 = fmul double %58, %73
  %78 = fadd double %76, %77
  %79 = select i1 %5, double 0x3CDD6F95068FEEA4, double 0x3E52C76D37FDB57D
  %80 = select i1 %7, double 0xC0BD20424648FD63, double 0xC0D3ACCB8514AB13
  %81 = select i1 %60, double %79, double %80
  %82 = fmul double %58, %78
  %83 = fadd double %81, %82
  %84 = select i1 %5, double 0xBD1F56D9FF51274F, double 0xBE7ABA200DE4015C
  %85 = select i1 %7, double 0x40C2A8FD1A1289EB, double 0x40CE5A08EC3F1AF9
  %86 = select i1 %60, double %84, double %85
  %87 = fmul double %58, %83
  %88 = fadd double %86, %87
  %89 = select i1 %5, double 0x3D5F683984140301, double 0x3E9D0EE6A4A80D73
  %90 = select i1 %7, double 0xC0C27F028C42F7FD, double 0xC0B806DFCAF3E8F0
  %91 = select i1 %60, double %89, double %90
  %92 = fmul double %58, %88
  %93 = fadd double %91, %92
  %94 = select i1 %5, double 0xBD9D8453B9E7FD78, double 0xBEB8137ED27E2624
  %95 = select i1 %7, double 0x40BCDB58257A0C6D, double 0x40936030E9797DA0
  %96 = select i1 %60, double %94, double %95
  %97 = fmul double %58, %93
  %98 = fadd double %96, %97
  %99 = select i1 %5, double 0x3DD9E6AD5DAB7037, double 0x3ECD0697CBB9A376
  %100 = select i1 %7, double 0xC0B1CDB68AB7C4E4, double 0xC054869BB9D7AF08
  %101 = select i1 %60, double %99, double %100
  %102 = fmul double %58, %98
  %103 = fadd double %101, %102
  %104 = select i1 %5, double 0xBE151D7181C08BA0, double 0xBED4ECCCA37D22C1
  %105 = select i1 %7, double 0x40A13FBBE32520BC, double 0x4040365402C89D37
  %106 = select i1 %60, double %104, double %105
  %107 = fmul double %58, %103
  %108 = fadd double %106, %107
  %109 = select i1 %5, double 0x3E4FCC572062092A, double 0xBEB5F5266774B791
  %110 = select i1 %7, double 0xC089AE616A35F399, double 0xC03D3BF3C95EBAA1
  %111 = select i1 %60, double %109, double %110
  %112 = fmul double %58, %108
  %113 = fadd double %111, %112
  %114 = select i1 %5, double 0xBE85F742EC43E5BC, double 0x3EFD9F88B02EA0EC
  %115 = select i1 %7, double 0x406C5BB5D950D59F, double 0x3FD620B48EBD7FD2
  %116 = select i1 %60, double %114, double %115
  %117 = fmul double %58, %113
  %118 = fadd double %116, %117
  %119 = select i1 %5, double 0x3EBB9E6C9DC6519D, double 0xBF10C2E202FB0D80
  %120 = select i1 %7, double 0xC0472AB3D15A1B99, double 0x4015F57BD26EB8D7
  %121 = select i1 %60, double %119, double %120
  %122 = fmul double %58, %118
  %123 = fadd double %121, %122
  %124 = select i1 %5, double 0xBEEF4D25C3E0C2E2, double 0xBEFAE939BE608207
  %125 = select i1 %7, double 0x40231D60ED75C166, double 0x3F598ED6853E65C9
  %126 = select i1 %60, double %124, double %125
  %127 = fmul double %58, %123
  %128 = fadd double %126, %127
  %129 = select i1 %5, double 0x3F1F9A326F9B89C2, double 0x3F4351BFC5997AEF
  %130 = select i1 %7, double 0xC007AADCFF61A9EE, double 0xBFF8AAF93486CD89
  %131 = select i1 %60, double %129, double %130
  %132 = fmul double %58, %128
  %133 = fadd double %131, %132
  %134 = select i1 %5, double 0xBF4C02DB40040B83, double 0xBF5BC858BD2C3DEE
  %135 = select i1 %7, double 0x3FC56155F28A44A2, double 0x3EC7AEAC5A2C6C34
  %136 = select i1 %60, double %134, double %135
  %137 = fmul double %58, %133
  %138 = fadd double %136, %137
  %139 = select i1 %5, double 0x3F7565BCD0E6A53F, double 0x3F2B61E95A64E1B4
  %140 = select i1 %7, double 0x3FE38258FA079AD9, double 0x3FE3FFFFD433AA8A
  %141 = select i1 %60, double %139, double %140
  %142 = fmul double %58, %138
  %143 = fadd double %141, %142
  %144 = select i1 %5, double 0xBF9B82CE31288B51, double 0x3F93966FE5D12A2E
  %145 = select i1 %7, double 0x3F515AA8B364E28B, double 0x3E1DEC4B817418DD
  %146 = select i1 %60, double %144, double %145
  %147 = fmul double %58, %143
  %148 = fadd double %146, %147
  %149 = bitcast double %58 to i64
  %150 = and i64 %149, -134217728
  %151 = bitcast i64 %150 to double
  %152 = fsub double %58, %151
  %153 = bitcast double %148 to i64
  %154 = and i64 %153, -134217728
  %155 = bitcast i64 %154 to double
  %156 = fsub double %148, %155
  %157 = fmul double %58, %148
  %158 = fmul double %151, %155
  %159 = fsub double %158, %157
  %160 = fmul double %152, %155
  %161 = fadd double %160, %159
  %162 = fmul double %156, %151
  %163 = fadd double %162, %161
  %164 = fmul double %152, %156
  %165 = fadd double %164, %163
  %166 = fmul double %59, %148
  %167 = fadd double %166, %165
  %168 = select i1 %5, double 0x3FBCE2F21A042BE2, double 0xBFBA4F4EAB8311A0
  %169 = select i1 %5, double 0xBC52871BC5EF8ED7, double 0xBC5CBFA8068241AE
  %170 = or i1 %7, %60
  %171 = select i1 %60, double %168, double 0xBFE0006CA4753FC8
  %172 = select i1 %60, double %169, double 0x3C7E64BB064EBF0B
  %173 = select i1 %170, double %171, double 0xBFE0000000038D52
  %174 = select i1 %170, double %172, double 0xBC8719E29ACB2723
  %175 = fadd double %173, %157
  %176 = fsub double %175, %157
  %177 = fsub double %175, %176
  %178 = fsub double %157, %177
  %179 = fsub double %173, %176
  %180 = fadd double %179, %178
  %181 = fadd double %174, %167
  %182 = fadd double %180, %181
  %183 = bitcast double %175 to i64
  %184 = and i64 %183, -134217728
  %185 = bitcast i64 %184 to double
  %186 = fsub double %175, %185
  %187 = fmul double %58, %175
  %188 = fmul double %151, %185
  %189 = fsub double %188, %187
  %190 = fmul double %186, %151
  %191 = fadd double %190, %189
  %192 = fmul double %152, %185
  %193 = fadd double %192, %191
  %194 = fmul double %152, %186
  %195 = fadd double %194, %193
  %196 = fmul double %59, %175
  %197 = fadd double %196, %195
  %198 = fmul double %58, %182
  %199 = fadd double %197, %198
  %200 = select i1 %5, double 0xBFD812746B0379E7, double 0xBFE45F306B230D62
  %201 = select i1 %5, double 0x3C6EE12E49CAD52E, double 0x3C619932A20CE10B
  %202 = select i1 %60, double %200, double 0x3EBADCB2F72A1080
  %203 = select i1 %60, double %201, double 0x3B2CF38C548C5245
  %204 = select i1 %170, double %202, double 0x3D50B89397C75A64
  %205 = select i1 %170, double %203, double 0xB9ED96501FDC09B6
  %206 = fadd double %204, %187
  %207 = fsub double %206, %187
  %208 = fsub double %206, %207
  %209 = fsub double %187, %208
  %210 = fsub double %204, %207
  %211 = fadd double %210, %209
  %212 = fadd double %205, %199
  %213 = fadd double %211, %212
  %214 = bitcast double %206 to i64
  %215 = and i64 %214, -134217728
  %216 = bitcast i64 %215 to double
  %217 = fsub double %206, %216
  %218 = fmul double %58, %206
  %219 = fmul double %151, %216
  %220 = fsub double %219, %218
  %221 = fmul double %217, %151
  %222 = fadd double %221, %220
  %223 = fmul double %152, %216
  %224 = fadd double %223, %222
  %225 = fmul double %152, %217
  %226 = fadd double %225, %224
  %227 = fmul double %59, %206
  %228 = fadd double %227, %226
  %229 = fmul double %58, %213
  %230 = fadd double %228, %229
  %231 = select i1 %5, double 0x3FF20DD750429B6D, double 0xBFF20DD7505C75E8
  %232 = select i1 %5, double 0x3C71AE3A914FED6D, double 0x3C9751223FE9154D
  %233 = select i1 %60, double %231, double 0xBFE250D055891FD0
  %234 = select i1 %60, double %232, double 0x3C81B3313996DEA7
  %235 = select i1 %170, double %233, double 0xBFE250D048E7A1C6
  %236 = select i1 %170, double %234, double 0xBC7BA6EE6A6AB496
  %237 = fadd double %235, %218
  %238 = fsub double %237, %218
  %239 = fsub double %237, %238
  %240 = fsub double %218, %239
  %241 = fsub double %235, %238
  %242 = fadd double %241, %240
  %243 = fadd double %236, %230
  %244 = fadd double %242, %243
  %245 = fsub double -0.000000e+00, %4
  %246 = select i1 %6, double %244, double 0.000000e+00
  %247 = select i1 %6, double %237, double %245
  %248 = bitcast double %247 to i64
  %249 = and i64 %248, -134217728
  %250 = bitcast i64 %249 to double
  %251 = fsub double %247, %250
  %252 = fmul double %247, %4
  %253 = fmul double %57, %250
  %254 = fsub double %253, %252
  %255 = fmul double %251, %57
  %256 = fadd double %255, %254
  %257 = fmul double %56, %250
  %258 = fadd double %257, %256
  %259 = fmul double %56, %251
  %260 = fadd double %259, %258
  %261 = fmul double %246, %4
  %262 = fadd double %260, %261
  br i1 %6, label %272, label %263

; <label>:263:                                    ; preds = %55
  %264 = fadd double %237, %252
  %265 = fsub double %264, %252
  %266 = fsub double %264, %265
  %267 = fsub double %252, %266
  %268 = fsub double %237, %265
  %269 = fadd double %268, %267
  %270 = fadd double %244, %262
  %271 = fadd double %269, %270
  br label %272

; <label>:272:                                    ; preds = %55, %263
  %273 = phi double [ %264, %263 ], [ %252, %55 ]
  %274 = phi double [ %271, %263 ], [ %262, %55 ]
  br i1 %5, label %275, label %281

; <label>:275:                                    ; preds = %272
  %276 = fsub double 1.000000e+00, %273
  %277 = fsub double 1.000000e+00, %276
  %278 = fsub double %277, %273
  %279 = fadd double %278, 0.000000e+00
  %280 = fsub double %279, %274
  br label %437

; <label>:281:                                    ; preds = %272
  %282 = fadd double %273, %274
  %283 = fmul double %282, 0x3FF71547652B82FE
  %284 = fcmp olt double %283, 0.000000e+00
  %285 = select i1 %284, double -5.000000e-01, double 5.000000e-01
  %286 = fadd double %283, %285
  %287 = fptosi double %286 to i32
  %288 = sitofp i32 %287 to double
  %289 = fmul double %288, 0xBFE62E42FEFA3000
  %290 = fadd double %273, %289
  %291 = fsub double %290, %273
  %292 = fsub double %290, %291
  %293 = fsub double %273, %292
  %294 = fsub double %289, %291
  %295 = fadd double %294, %293
  %296 = fadd double %274, %295
  %297 = fmul double %288, 0xBD53DE6AF278ECE6
  %298 = fadd double %297, %290
  %299 = fsub double %298, %290
  %300 = fsub double %298, %299
  %301 = fsub double %290, %300
  %302 = fsub double %297, %299
  %303 = fadd double %302, %301
  %304 = fadd double %303, %296
  %305 = fmul double %298, 0x3DE60632A887194C
  %306 = fadd double %305, 0x3E21F8EAF54829DC
  %307 = fmul double %298, %306
  %308 = fadd double %307, 0x3E5AE652E8103AB6
  %309 = fmul double %298, %308
  %310 = fadd double %309, 0x3E927E4C95A9765C
  %311 = fmul double %298, %310
  %312 = fadd double %311, 0x3EC71DE3A11D7656
  %313 = fmul double %298, %312
  %314 = fadd double %313, 0x3EFA01A01AF6F0B7
  %315 = fmul double %298, %314
  %316 = fadd double %315, 0x3F2A01A01A02D002
  %317 = fmul double %298, %316
  %318 = fadd double %317, 0x3F56C16C16C145CC
  %319 = fmul double %298, %318
  %320 = fadd double %319, 0x3F81111111111119
  %321 = fmul double %298, %320
  %322 = fadd double %321, 0x3FA555555555555A
  %323 = bitcast double %298 to i64
  %324 = and i64 %323, -134217728
  %325 = bitcast i64 %324 to double
  %326 = fsub double %298, %325
  %327 = bitcast double %322 to i64
  %328 = and i64 %327, -134217728
  %329 = bitcast i64 %328 to double
  %330 = fsub double %322, %329
  %331 = fmul double %298, %322
  %332 = fmul double %325, %329
  %333 = fsub double %332, %331
  %334 = fmul double %326, %329
  %335 = fadd double %334, %333
  %336 = fmul double %330, %325
  %337 = fadd double %336, %335
  %338 = fmul double %326, %330
  %339 = fadd double %338, %337
  %340 = fmul double %304, %322
  %341 = fadd double %340, %339
  %342 = fadd double %331, 0x3FC5555555555555
  %343 = fsub double %342, %331
  %344 = fsub double %342, %343
  %345 = fsub double %331, %344
  %346 = fsub double 0x3FC5555555555555, %343
  %347 = fadd double %346, %345
  %348 = fadd double %347, %341
  %349 = bitcast double %342 to i64
  %350 = and i64 %349, -134217728
  %351 = bitcast i64 %350 to double
  %352 = fsub double %342, %351
  %353 = fmul double %298, %342
  %354 = fmul double %325, %351
  %355 = fsub double %354, %353
  %356 = fmul double %326, %351
  %357 = fadd double %356, %355
  %358 = fmul double %352, %325
  %359 = fadd double %358, %357
  %360 = fmul double %326, %352
  %361 = fadd double %360, %359
  %362 = fmul double %298, %348
  %363 = fadd double %361, %362
  %364 = fmul double %304, %342
  %365 = fadd double %364, %363
  %366 = fadd double %353, 5.000000e-01
  %367 = fsub double %366, %353
  %368 = fsub double %366, %367
  %369 = fsub double %353, %368
  %370 = fsub double 5.000000e-01, %367
  %371 = fadd double %370, %369
  %372 = fadd double %371, %365
  %373 = fmul double %298, %298
  %374 = fmul double %325, %325
  %375 = fsub double %374, %373
  %376 = fadd double %325, %325
  %377 = fmul double %376, %326
  %378 = fadd double %375, %377
  %379 = fmul double %326, %326
  %380 = fadd double %379, %378
  %381 = fadd double %304, %304
  %382 = fmul double %298, %381
  %383 = fadd double %382, %380
  %384 = bitcast double %373 to i64
  %385 = and i64 %384, -134217728
  %386 = bitcast i64 %385 to double
  %387 = fsub double %373, %386
  %388 = bitcast double %366 to i64
  %389 = and i64 %388, -134217728
  %390 = bitcast i64 %389 to double
  %391 = fsub double %366, %390
  %392 = fmul double %373, %366
  %393 = fmul double %386, %390
  %394 = fsub double %393, %392
  %395 = fmul double %387, %390
  %396 = fadd double %395, %394
  %397 = fmul double %391, %386
  %398 = fadd double %397, %396
  %399 = fmul double %387, %391
  %400 = fadd double %399, %398
  %401 = fmul double %373, %372
  %402 = fadd double %400, %401
  %403 = fmul double %383, %366
  %404 = fadd double %403, %402
  %405 = fadd double %298, %392
  %406 = fsub double %405, %298
  %407 = fsub double %405, %406
  %408 = fsub double %298, %407
  %409 = fsub double %392, %406
  %410 = fadd double %409, %408
  %411 = fadd double %304, %404
  %412 = fadd double %410, %411
  %413 = fadd double %405, 1.000000e+00
  %414 = fadd double %413, -1.000000e+00
  %415 = fsub double %413, %414
  %416 = fsub double 1.000000e+00, %415
  %417 = fsub double %405, %414
  %418 = fadd double %417, %416
  %419 = fadd double %418, %412
  %420 = ashr i32 %287, 1
  %421 = add nsw i32 %420, 1023
  %422 = zext i32 %421 to i64
  %423 = shl i64 %422, 52
  %424 = bitcast i64 %423 to double
  %425 = fmul double %413, %424
  %426 = add i32 %287, 1023
  %427 = sub i32 %426, %420
  %428 = zext i32 %427 to i64
  %429 = shl i64 %428, 52
  %430 = bitcast i64 %429 to double
  %431 = fmul double %425, %430
  %432 = fmul double %419, %424
  %433 = fmul double %432, %430
  %434 = fcmp olt double %273, -1.000000e+03
  %435 = select i1 %434, double 0.000000e+00, double %431
  %436 = select i1 %434, double 0.000000e+00, double %433
  br label %437

; <label>:437:                                    ; preds = %281, %275
  %438 = phi double [ %276, %275 ], [ %435, %281 ]
  %439 = phi double [ %280, %275 ], [ %436, %281 ]
  br i1 %6, label %458, label %440

; <label>:440:                                    ; preds = %437
  %441 = bitcast double %438 to i64
  %442 = and i64 %441, -134217728
  %443 = bitcast i64 %442 to double
  %444 = fsub double %438, %443
  %445 = fmul double %58, %438
  %446 = fmul double %151, %443
  %447 = fsub double %446, %445
  %448 = fmul double %444, %151
  %449 = fadd double %448, %447
  %450 = fmul double %152, %443
  %451 = fadd double %450, %449
  %452 = fmul double %152, %444
  %453 = fadd double %452, %451
  %454 = fmul double %59, %438
  %455 = fadd double %454, %453
  %456 = fmul double %58, %439
  %457 = fadd double %456, %455
  br label %458

; <label>:458:                                    ; preds = %437, %440
  %459 = phi double [ %445, %440 ], [ %438, %437 ]
  %460 = phi double [ %457, %440 ], [ %439, %437 ]
  %461 = fadd double %459, %460
  %462 = select i1 %8, double %461, double 0.000000e+00
  %463 = fcmp olt double %0, 0.000000e+00
  %464 = fsub double 2.000000e+00, %462
  %465 = select i1 %463, double %464, double %462
  %466 = fcmp ord double %0, 0.000000e+00
  %467 = select i1 %466, double %465, double 0x7FF8000000000000
  ret double %467
}

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!3, !8, i64 16}
!3 = !{!"", !4, i64 0, !8, i64 16}
!4 = !{!"", !5, i64 0, !5, i64 8}
!5 = !{!"double", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!"int", !6, i64 0}
!9 = !{!3, !5, i64 0}
!10 = !{!3, !5, i64 8}
!11 = !{!5, !5, i64 0}
