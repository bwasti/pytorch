; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vdouble2 = type { <4 x double>, <4 x double> }
%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }

@.str = private unnamed_addr constant [5 x i8] c"AVX2\00", align 1
@rempitabdp = external constant [0 x double], align 8

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_ldexpd4_avx2(<4 x double>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 9, i32 9, i32 9, i32 9>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 7, i32 7, i32 7, i32 7>
  %9 = shl <4 x i32> %7, <i32 9, i32 9, i32 9, i32 9>
  %10 = add nsw <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = icmp slt <4 x i32> %7, <i32 -7, i32 -7, i32 -7, i32 -7>
  %13 = sext <4 x i1> %12 to <4 x i32>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %16 = and <2 x i64> %15, %11
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = icmp sgt <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <2 x i64> %16 to <16 x i8>
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> <i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0>, <16 x i8> %21) #7
  %23 = bitcast <16 x i8> %22 to <4 x i32>
  %24 = zext <4 x i32> %23 to <4 x i64>
  %25 = shl nuw <4 x i64> %24, <i64 32, i64 32, i64 32, i64 32>
  %26 = bitcast <4 x i64> %25 to <8 x i32>
  %27 = shl <8 x i32> %26, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %28 = bitcast <8 x i32> %27 to <4 x double>
  %29 = fmul <4 x double> %28, %0
  %30 = fmul <4 x double> %29, %28
  %31 = fmul <4 x double> %30, %28
  %32 = fmul <4 x double> %31, %28
  %33 = add <4 x i32> %3, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = sub <4 x i32> %33, %9
  %35 = zext <4 x i32> %34 to <4 x i64>
  %36 = shl nuw <4 x i64> %35, <i64 32, i64 32, i64 32, i64 32>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = shl <8 x i32> %37, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = fmul <4 x double> %32, %39
  ret <4 x double> %40
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = bitcast <4 x double> %5 to <8 x i32>
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i32> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %19, %26
  %28 = sitofp <4 x i32> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %0, zeroinitializer
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x i64> %30 to <4 x double>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> <double 0xC1E0000000000000, double 0xC1E0000000000000, double 0xC1E0000000000000, double 0xC1E0000000000000>, <4 x double> %31) #7
  %33 = fcmp uno <4 x double> %0, zeroinitializer
  %34 = sext <4 x i1> %33 to <4 x i64>
  %35 = bitcast <4 x i64> %34 to <4 x double>
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <4 x double> %35) #7
  %37 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %38 = sext <4 x i1> %37 to <4 x i64>
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %36, <4 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <4 x double> %39) #7
  %41 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %40) #7
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  ret <2 x i64> %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sind4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <4 x double> %0) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>, <4 x double> %16) #7
  br label %179

; <label>:18:                                     ; preds = %1
  %19 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %22, %21
  %24 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %23, <2 x i64> <i64 -1, i64 -1>) #7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26, !prof !2

; <label>:26:                                     ; preds = %18
  %27 = fmul <4 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %28 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %27, i32 11) #7
  %29 = fmul <4 x double> %28, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> %30) #7
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 8) #7
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %0) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %34) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <4 x double> %38) #7
  %40 = fadd <4 x double> %29, %32
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>, <4 x double> %39) #7
  br label %179

; <label>:42:                                     ; preds = %18
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = shufflevector <4 x float> %44, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %48, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = or <2 x i64> %50, %46
  %52 = bitcast <2 x i64> %51 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = and <4 x i32> %53, <i32 2047, i32 2047, i32 2047, i32 2047>
  %55 = add nsw <4 x i32> %54, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %56 = icmp ugt <4 x i32> %54, <i32 1723, i32 1723, i32 1723, i32 1723>
  %57 = select <4 x i1> %56, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shl <8 x i32> %58, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %60 = bitcast <4 x double> %0 to <8 x i32>
  %61 = add <8 x i32> %59, %60
  %62 = bitcast <8 x i32> %61 to <4 x double>
  %63 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %64 = xor <4 x i32> %63, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %65 = and <4 x i32> %64, %55
  %66 = shl <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %68 = fmul <4 x double> %67, %62
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %67, <4 x double> %69) #7
  %71 = fmul <4 x double> %68, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %72 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %71, i32 8) #7
  %73 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %68, i32 8) #7
  %74 = fmul <4 x double> %73, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %75 = fsub <4 x double> %72, %74
  %76 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %75) #7
  %77 = fmul <4 x double> %72, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %78 = fsub <4 x double> %68, %77
  %79 = fadd <4 x double> %70, %78
  %80 = fsub <4 x double> %78, %79
  %81 = fadd <4 x double> %70, %80
  %82 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %83 = fmul <4 x double> %82, %62
  %84 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %83
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %82, <4 x double> %84) #7
  %86 = fadd <4 x double> %79, %83
  %87 = fsub <4 x double> %86, %79
  %88 = fsub <4 x double> %86, %87
  %89 = fsub <4 x double> %79, %88
  %90 = fsub <4 x double> %83, %87
  %91 = fadd <4 x double> %90, %89
  %92 = fadd <4 x double> %85, %81
  %93 = fadd <4 x double> %92, %91
  %94 = fmul <4 x double> %86, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %95 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %94, i32 8) #7
  %96 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %86, i32 8) #7
  %97 = fmul <4 x double> %96, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %98 = fsub <4 x double> %95, %97
  %99 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %98) #7
  %100 = fmul <4 x double> %95, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %101 = fsub <4 x double> %86, %100
  %102 = add <4 x i32> %99, %76
  %103 = fadd <4 x double> %101, %93
  %104 = fsub <4 x double> %101, %103
  %105 = fadd <4 x double> %93, %104
  %106 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %107 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %108 = fmul <4 x double> %106, %62
  %109 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %62, <4 x double> %109) #7
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %107, <4 x double> %62, <4 x double> %110) #7
  %112 = fadd <4 x double> %108, %103
  %113 = fsub <4 x double> %112, %103
  %114 = fsub <4 x double> %112, %113
  %115 = fsub <4 x double> %103, %114
  %116 = fsub <4 x double> %108, %113
  %117 = fadd <4 x double> %116, %115
  %118 = fadd <4 x double> %111, %105
  %119 = fadd <4 x double> %118, %117
  %120 = fadd <4 x double> %112, %119
  %121 = fsub <4 x double> %112, %120
  %122 = fadd <4 x double> %119, %121
  %123 = fmul <4 x double> %120, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %123
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %124) #7
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %125) #7
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %126) #7
  %128 = bitcast <8 x i32> %61 to <4 x i64>
  %129 = and <4 x i64> %128, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %130 = bitcast <4 x i64> %129 to <4 x double>
  %131 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %130, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %132 = bitcast <4 x double> %131 to <4 x i64>
  %133 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %123, <4 x double> %62, <4 x double> %131) #7
  %134 = bitcast <4 x double> %127 to <4 x i64>
  %135 = xor <4 x i64> %132, <i64 -1, i64 -1, i64 -1, i64 -1>
  %136 = and <4 x i64> %135, %134
  %137 = shl <4 x i32> %102, <i32 1, i32 1, i32 1, i32 1>
  %138 = and <4 x i32> %137, <i32 6, i32 6, i32 6, i32 6>
  %139 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %133, <4 x double> zeroinitializer, i8 30) #7
  %140 = bitcast <4 x double> %139 to <8 x i32>
  %141 = shufflevector <8 x i32> %140, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <8 x i32> %141 to <4 x i64>
  %143 = shufflevector <4 x i64> %142, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %144 = bitcast <2 x i64> %143 to <16 x i8>
  %145 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %144) #7
  %146 = bitcast <16 x i8> %145 to <4 x i32>
  %147 = add <4 x i32> %138, %146
  %148 = ashr <4 x i32> %147, <i32 2, i32 2, i32 2, i32 2>
  %149 = and <4 x i32> %102, <i32 1, i32 1, i32 1, i32 1>
  %150 = icmp ne <4 x i32> %149, zeroinitializer
  %151 = sext <4 x i1> %150 to <4 x i32>
  %152 = bitcast <4 x i32> %151 to <2 x i64>
  %153 = shufflevector <2 x i64> %152, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %154 = bitcast <4 x double> %133 to <4 x i64>
  %155 = and <4 x i64> %154, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = xor <4 x i64> %155, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %157 = bitcast <4 x i64> %156 to <4 x double>
  %158 = xor <4 x i64> %155, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %159 = bitcast <4 x i64> %158 to <4 x double>
  %160 = bitcast <4 x i64> %136 to <4 x double>
  %161 = fadd <4 x double> %133, %157
  %162 = fsub <4 x double> %161, %133
  %163 = fsub <4 x double> %161, %162
  %164 = fsub <4 x double> %133, %163
  %165 = fsub <4 x double> %157, %162
  %166 = fadd <4 x double> %165, %164
  %167 = fadd <4 x double> %160, %159
  %168 = fadd <4 x double> %167, %166
  %169 = bitcast <4 x i64> %153 to <8 x i32>
  %170 = shufflevector <8 x i32> %169, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %171 = bitcast <8 x i32> %170 to <4 x double>
  %172 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> %161, <4 x double> %171) #7
  %173 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %160, <4 x double> %168, <4 x double> %171) #7
  %174 = fadd <4 x double> %172, %173
  %175 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %176 = fcmp uno <4 x double> %0, zeroinitializer
  %177 = or <4 x i1> %175, %176
  %178 = select <4 x i1> %177, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %174
  br label %179

; <label>:179:                                    ; preds = %26, %42, %12
  %180 = phi <4 x i32> [ %15, %12 ], [ %33, %26 ], [ %148, %42 ]
  %181 = phi <4 x double> [ %17, %12 ], [ %41, %26 ], [ %178, %42 ]
  %182 = fmul <4 x double> %181, %181
  %183 = and <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  %184 = icmp ne <4 x i32> %183, zeroinitializer
  %185 = sext <4 x i1> %184 to <4 x i32>
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = shufflevector <2 x i64> %186, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %188 = bitcast <4 x i64> %187 to <8 x i32>
  %189 = shufflevector <8 x i32> %188, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = and <4 x i64> %190, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %192 = bitcast <4 x double> %181 to <4 x i64>
  %193 = xor <4 x i64> %191, %192
  %194 = bitcast <4 x i64> %193 to <4 x double>
  %195 = fmul <4 x double> %182, %182
  %196 = fmul <4 x double> %195, %195
  %197 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <4 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #7
  %198 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <4 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #7
  %199 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %195, <4 x double> %197, <4 x double> %198) #7
  %200 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <4 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #7
  %201 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <4 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F>) #7
  %202 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %195, <4 x double> %200, <4 x double> %201) #7
  %203 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %196, <4 x double> %199, <4 x double> %202) #7
  %204 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %203, <4 x double> %182, <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>) #7
  %205 = fmul <4 x double> %204, %194
  %206 = fmul <4 x double> %182, %205
  %207 = fadd <4 x double> %206, %194
  %208 = icmp eq <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %209 = sext <4 x i1> %208 to <4 x i64>
  %210 = bitcast <4 x i64> %209 to <4 x double>
  %211 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %207, <4 x double> %0, <4 x double> %210) #7
  ret <4 x double> %211
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sind4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %21, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <4 x double> %0) #7
  %17 = fmul <4 x double> %14, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %18 = fadd <4 x double> %17, %16
  %19 = fsub <4 x double> %16, %18
  %20 = fadd <4 x double> %17, %19
  br label %219

; <label>:21:                                     ; preds = %1
  %22 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %23 = bitcast <4 x double> %22 to <4 x i64>
  %24 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %25 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %26 = and <2 x i64> %25, %24
  %27 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %26, <2 x i64> <i64 -1, i64 -1>) #7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %80, label %29, !prof !2

; <label>:29:                                     ; preds = %21
  %30 = fmul <4 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %31 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %30, i32 11) #7
  %32 = fmul <4 x double> %31, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %32
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> %33) #7
  %35 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %34, i32 8) #7
  %36 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %0) #7
  %38 = fmul <4 x double> %35, <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fsub <4 x double> %37, %39
  %41 = fadd <4 x double> %38, %40
  %42 = fmul <4 x double> %32, <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>
  %43 = fadd <4 x double> %42, %39
  %44 = fsub <4 x double> %43, %39
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %39, %45
  %47 = fsub <4 x double> %42, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %35, <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>
  %51 = fadd <4 x double> %50, %43
  %52 = fsub <4 x double> %51, %43
  %53 = fsub <4 x double> %51, %52
  %54 = fsub <4 x double> %43, %53
  %55 = fsub <4 x double> %50, %52
  %56 = fadd <4 x double> %55, %54
  %57 = fadd <4 x double> %56, %49
  %58 = fmul <4 x double> %32, <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %59 = fadd <4 x double> %58, %51
  %60 = fsub <4 x double> %59, %51
  %61 = fsub <4 x double> %59, %60
  %62 = fsub <4 x double> %51, %61
  %63 = fsub <4 x double> %58, %60
  %64 = fadd <4 x double> %63, %62
  %65 = fadd <4 x double> %64, %57
  %66 = fmul <4 x double> %35, <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %67 = fadd <4 x double> %66, %59
  %68 = fsub <4 x double> %67, %59
  %69 = fsub <4 x double> %67, %68
  %70 = fsub <4 x double> %59, %69
  %71 = fsub <4 x double> %66, %68
  %72 = fadd <4 x double> %71, %70
  %73 = fadd <4 x double> %72, %65
  %74 = fadd <4 x double> %32, %35
  %75 = fmul <4 x double> %74, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %76 = fadd <4 x double> %75, %67
  %77 = fsub <4 x double> %67, %76
  %78 = fadd <4 x double> %75, %77
  %79 = fadd <4 x double> %78, %73
  br label %219

; <label>:80:                                     ; preds = %21
  %81 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %82 = bitcast <2 x i64> %81 to <4 x float>
  %83 = shufflevector <4 x float> %82, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %84 = bitcast <4 x float> %83 to <2 x i64>
  %85 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %86 = bitcast <2 x i64> %85 to <4 x float>
  %87 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %86, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %88 = bitcast <4 x float> %87 to <2 x i64>
  %89 = or <2 x i64> %88, %84
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = lshr <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = and <4 x i32> %91, <i32 2047, i32 2047, i32 2047, i32 2047>
  %93 = add nsw <4 x i32> %92, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %94 = icmp ugt <4 x i32> %92, <i32 1723, i32 1723, i32 1723, i32 1723>
  %95 = select <4 x i1> %94, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %96 = bitcast <4 x i64> %95 to <8 x i32>
  %97 = shl <8 x i32> %96, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %98 = bitcast <4 x double> %0 to <8 x i32>
  %99 = add <8 x i32> %97, %98
  %100 = bitcast <8 x i32> %99 to <4 x double>
  %101 = ashr <4 x i32> %93, <i32 31, i32 31, i32 31, i32 31>
  %102 = xor <4 x i32> %101, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %103 = and <4 x i32> %102, %93
  %104 = shl <4 x i32> %103, <i32 2, i32 2, i32 2, i32 2>
  %105 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %104, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %106 = fmul <4 x double> %105, %100
  %107 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %105, <4 x double> %107) #7
  %109 = fmul <4 x double> %106, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %110 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %109, i32 8) #7
  %111 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %106, i32 8) #7
  %112 = fmul <4 x double> %111, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %113 = fsub <4 x double> %110, %112
  %114 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %113) #7
  %115 = fmul <4 x double> %110, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %116 = fsub <4 x double> %106, %115
  %117 = fadd <4 x double> %108, %116
  %118 = fsub <4 x double> %116, %117
  %119 = fadd <4 x double> %108, %118
  %120 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %104, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %121 = fmul <4 x double> %120, %100
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %121
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %120, <4 x double> %122) #7
  %124 = fadd <4 x double> %117, %121
  %125 = fsub <4 x double> %124, %117
  %126 = fsub <4 x double> %124, %125
  %127 = fsub <4 x double> %117, %126
  %128 = fsub <4 x double> %121, %125
  %129 = fadd <4 x double> %128, %127
  %130 = fadd <4 x double> %123, %119
  %131 = fadd <4 x double> %130, %129
  %132 = fmul <4 x double> %124, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %133 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %132, i32 8) #7
  %134 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %124, i32 8) #7
  %135 = fmul <4 x double> %134, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %136 = fsub <4 x double> %133, %135
  %137 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %136) #7
  %138 = fmul <4 x double> %133, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %139 = fsub <4 x double> %124, %138
  %140 = add <4 x i32> %137, %114
  %141 = fadd <4 x double> %139, %131
  %142 = fsub <4 x double> %139, %141
  %143 = fadd <4 x double> %131, %142
  %144 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %104, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %145 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %104, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %146 = fmul <4 x double> %144, %100
  %147 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %146
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %144, <4 x double> %100, <4 x double> %147) #7
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %100, <4 x double> %148) #7
  %150 = fadd <4 x double> %146, %141
  %151 = fsub <4 x double> %150, %141
  %152 = fsub <4 x double> %150, %151
  %153 = fsub <4 x double> %141, %152
  %154 = fsub <4 x double> %146, %151
  %155 = fadd <4 x double> %154, %153
  %156 = fadd <4 x double> %149, %143
  %157 = fadd <4 x double> %156, %155
  %158 = fadd <4 x double> %150, %157
  %159 = fsub <4 x double> %150, %158
  %160 = fadd <4 x double> %157, %159
  %161 = fmul <4 x double> %158, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %162 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %161
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %158, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %162) #7
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %163) #7
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %158, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %164) #7
  %166 = bitcast <8 x i32> %99 to <4 x i64>
  %167 = and <4 x i64> %166, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %168 = bitcast <4 x i64> %167 to <4 x double>
  %169 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %168, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %170 = bitcast <4 x double> %169 to <4 x i64>
  %171 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %161, <4 x double> %100, <4 x double> %169) #7
  %172 = bitcast <4 x double> %165 to <4 x i64>
  %173 = xor <4 x i64> %170, <i64 -1, i64 -1, i64 -1, i64 -1>
  %174 = and <4 x i64> %173, %172
  %175 = shl <4 x i32> %140, <i32 1, i32 1, i32 1, i32 1>
  %176 = and <4 x i32> %175, <i32 6, i32 6, i32 6, i32 6>
  %177 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %171, <4 x double> zeroinitializer, i8 30) #7
  %178 = bitcast <4 x double> %177 to <8 x i32>
  %179 = shufflevector <8 x i32> %178, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = bitcast <8 x i32> %179 to <4 x i64>
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %182) #7
  %184 = bitcast <16 x i8> %183 to <4 x i32>
  %185 = add <4 x i32> %176, %184
  %186 = ashr <4 x i32> %185, <i32 2, i32 2, i32 2, i32 2>
  %187 = and <4 x i32> %140, <i32 1, i32 1, i32 1, i32 1>
  %188 = icmp ne <4 x i32> %187, zeroinitializer
  %189 = sext <4 x i1> %188 to <4 x i32>
  %190 = bitcast <4 x i32> %189 to <2 x i64>
  %191 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = bitcast <4 x double> %171 to <4 x i64>
  %193 = and <4 x i64> %192, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %194 = xor <4 x i64> %193, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %195 = bitcast <4 x i64> %194 to <4 x double>
  %196 = xor <4 x i64> %193, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %197 = bitcast <4 x i64> %196 to <4 x double>
  %198 = bitcast <4 x i64> %174 to <4 x double>
  %199 = fadd <4 x double> %171, %195
  %200 = fsub <4 x double> %199, %171
  %201 = fsub <4 x double> %199, %200
  %202 = fsub <4 x double> %171, %201
  %203 = fsub <4 x double> %195, %200
  %204 = fadd <4 x double> %203, %202
  %205 = fadd <4 x double> %198, %197
  %206 = fadd <4 x double> %205, %204
  %207 = bitcast <4 x i64> %191 to <8 x i32>
  %208 = shufflevector <8 x i32> %207, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %209 = bitcast <8 x i32> %208 to <4 x double>
  %210 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %171, <4 x double> %199, <4 x double> %209) #7
  %211 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %198, <4 x double> %206, <4 x double> %209) #7
  %212 = fadd <4 x double> %210, %211
  %213 = fsub <4 x double> %210, %212
  %214 = fadd <4 x double> %211, %213
  %215 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %216 = fcmp uno <4 x double> %0, zeroinitializer
  %217 = or <4 x i1> %215, %216
  %218 = select <4 x i1> %217, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %212
  br label %219

; <label>:219:                                    ; preds = %29, %80, %12
  %220 = phi <4 x double> [ %218, %80 ], [ %76, %29 ], [ %18, %12 ]
  %221 = phi <4 x double> [ %214, %80 ], [ %79, %29 ], [ %20, %12 ]
  %222 = phi <4 x i32> [ %186, %80 ], [ %36, %29 ], [ %15, %12 ]
  %223 = fmul <4 x double> %220, %220
  %224 = fadd <4 x double> %220, %220
  %225 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %223
  %226 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %220, <4 x double> %220, <4 x double> %225) #7
  %227 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %224, <4 x double> %221, <4 x double> %226) #7
  %228 = fmul <4 x double> %223, %223
  %229 = fmul <4 x double> %228, %228
  %230 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %223, <4 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <4 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #7
  %231 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %223, <4 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <4 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #7
  %232 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %223, <4 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <4 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #7
  %233 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %228, <4 x double> %231, <4 x double> %232) #7
  %234 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %229, <4 x double> %230, <4 x double> %233) #7
  %235 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %234, <4 x double> %223, <4 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9>) #7
  %236 = fmul <4 x double> %223, %235
  %237 = fadd <4 x double> %236, <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>
  %238 = fsub <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>, %237
  %239 = fadd <4 x double> %236, %238
  %240 = fmul <4 x double> %223, %237
  %241 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %240
  %242 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %237, <4 x double> %223, <4 x double> %241) #7
  %243 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %239, <4 x double> %223, <4 x double> %242) #7
  %244 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %237, <4 x double> %227, <4 x double> %243) #7
  %245 = fadd <4 x double> %240, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %246 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %245
  %247 = fadd <4 x double> %240, %246
  %248 = fadd <4 x double> %244, %247
  %249 = fmul <4 x double> %220, %248
  %250 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %221, <4 x double> %245, <4 x double> %249) #7
  %251 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %220, <4 x double> %245, <4 x double> %250) #7
  %252 = and <4 x i32> %222, <i32 1, i32 1, i32 1, i32 1>
  %253 = icmp ne <4 x i32> %252, zeroinitializer
  %254 = sext <4 x i1> %253 to <4 x i32>
  %255 = bitcast <4 x i32> %254 to <2 x i64>
  %256 = shufflevector <2 x i64> %255, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %257 = bitcast <4 x i64> %256 to <8 x i32>
  %258 = shufflevector <8 x i32> %257, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %259 = bitcast <8 x i32> %258 to <4 x i64>
  %260 = and <4 x i64> %259, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %261 = bitcast <4 x double> %251 to <4 x i64>
  %262 = xor <4 x i64> %260, %261
  %263 = bitcast <4 x i64> %262 to <4 x double>
  %264 = fcmp oeq <4 x double> %0, zeroinitializer
  %265 = sext <4 x i1> %264 to <4 x i64>
  %266 = bitcast <4 x i64> %265 to <4 x double>
  %267 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %263, <4 x double> %0, <4 x double> %266) #7
  ret <4 x double> %267
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cosd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %14, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %17) #7
  br label %184

; <label>:19:                                     ; preds = %1
  %20 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %46, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <4 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #7
  %29 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %28, i32 11) #7
  %30 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %32 = fadd <4 x double> %30, %31
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #7
  %34 = fmul <4 x double> %29, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %35 = shl <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = or <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>
  %37 = sitofp <4 x i32> %36 to <4 x double>
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %39) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %40) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %42) #7
  %44 = fadd <4 x double> %34, %37
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %43) #7
  br label %184

; <label>:46:                                     ; preds = %19
  %47 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = shufflevector <4 x float> %48, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %52 = bitcast <2 x i64> %51 to <4 x float>
  %53 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %52, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %54 = bitcast <4 x float> %53 to <2 x i64>
  %55 = or <2 x i64> %54, %50
  %56 = bitcast <2 x i64> %55 to <4 x i32>
  %57 = lshr <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = and <4 x i32> %57, <i32 2047, i32 2047, i32 2047, i32 2047>
  %59 = add nsw <4 x i32> %58, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %60 = icmp ugt <4 x i32> %58, <i32 1723, i32 1723, i32 1723, i32 1723>
  %61 = select <4 x i1> %60, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %62 = bitcast <4 x i64> %61 to <8 x i32>
  %63 = shl <8 x i32> %62, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %64 = bitcast <4 x double> %0 to <8 x i32>
  %65 = add <8 x i32> %63, %64
  %66 = bitcast <8 x i32> %65 to <4 x double>
  %67 = ashr <4 x i32> %59, <i32 31, i32 31, i32 31, i32 31>
  %68 = xor <4 x i32> %67, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %69 = and <4 x i32> %68, %59
  %70 = shl <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %71 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %72 = fmul <4 x double> %71, %66
  %73 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %71, <4 x double> %73) #7
  %75 = fmul <4 x double> %72, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %76 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %75, i32 8) #7
  %77 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %72, i32 8) #7
  %78 = fmul <4 x double> %77, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %79 = fsub <4 x double> %76, %78
  %80 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %79) #7
  %81 = fmul <4 x double> %76, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %82 = fsub <4 x double> %72, %81
  %83 = fadd <4 x double> %74, %82
  %84 = fsub <4 x double> %82, %83
  %85 = fadd <4 x double> %74, %84
  %86 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %87 = fmul <4 x double> %86, %66
  %88 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %86, <4 x double> %88) #7
  %90 = fadd <4 x double> %83, %87
  %91 = fsub <4 x double> %90, %83
  %92 = fsub <4 x double> %90, %91
  %93 = fsub <4 x double> %83, %92
  %94 = fsub <4 x double> %87, %91
  %95 = fadd <4 x double> %94, %93
  %96 = fadd <4 x double> %89, %85
  %97 = fadd <4 x double> %96, %95
  %98 = fmul <4 x double> %90, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %99 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %98, i32 8) #7
  %100 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %90, i32 8) #7
  %101 = fmul <4 x double> %100, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %102 = fsub <4 x double> %99, %101
  %103 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %102) #7
  %104 = fmul <4 x double> %99, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %105 = fsub <4 x double> %90, %104
  %106 = add <4 x i32> %103, %80
  %107 = fadd <4 x double> %105, %97
  %108 = fsub <4 x double> %105, %107
  %109 = fadd <4 x double> %97, %108
  %110 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %111 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %112 = fmul <4 x double> %110, %66
  %113 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %66, <4 x double> %113) #7
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %111, <4 x double> %66, <4 x double> %114) #7
  %116 = fadd <4 x double> %112, %107
  %117 = fsub <4 x double> %116, %107
  %118 = fsub <4 x double> %116, %117
  %119 = fsub <4 x double> %107, %118
  %120 = fsub <4 x double> %112, %117
  %121 = fadd <4 x double> %120, %119
  %122 = fadd <4 x double> %115, %109
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %116, %123
  %125 = fsub <4 x double> %116, %124
  %126 = fadd <4 x double> %123, %125
  %127 = fmul <4 x double> %124, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %128) #7
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %129) #7
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %130) #7
  %132 = bitcast <8 x i32> %65 to <4 x i64>
  %133 = and <4 x i64> %132, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %134 = bitcast <4 x i64> %133 to <4 x double>
  %135 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %134, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %136 = bitcast <4 x double> %135 to <4 x i64>
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %127, <4 x double> %66, <4 x double> %135) #7
  %138 = bitcast <4 x double> %131 to <4 x i64>
  %139 = xor <4 x i64> %136, <i64 -1, i64 -1, i64 -1, i64 -1>
  %140 = and <4 x i64> %139, %138
  %141 = shl <4 x i32> %106, <i32 1, i32 1, i32 1, i32 1>
  %142 = and <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %143 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %137, <4 x double> zeroinitializer, i8 30) #7
  %144 = bitcast <4 x double> %143 to <8 x i32>
  %145 = shufflevector <8 x i32> %144, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = bitcast <8 x i32> %145 to <4 x i64>
  %147 = shufflevector <4 x i64> %146, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %148 = bitcast <2 x i64> %147 to <16 x i8>
  %149 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %148) #7
  %150 = bitcast <16 x i8> %149 to <4 x i32>
  %151 = add <4 x i32> %142, %150
  %152 = ashr <4 x i32> %151, <i32 1, i32 1, i32 1, i32 1>
  %153 = and <4 x i32> %106, <i32 1, i32 1, i32 1, i32 1>
  %154 = icmp eq <4 x i32> %153, zeroinitializer
  %155 = sext <4 x i1> %154 to <4 x i32>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <2 x i64> %156, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer, <4 x double> %143) #7
  %159 = bitcast <4 x double> %158 to <4 x i64>
  %160 = and <4 x i64> %159, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %161 = xor <4 x i64> %160, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %162 = bitcast <4 x i64> %161 to <4 x double>
  %163 = xor <4 x i64> %160, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %164 = bitcast <4 x i64> %163 to <4 x double>
  %165 = bitcast <4 x i64> %140 to <4 x double>
  %166 = fadd <4 x double> %137, %162
  %167 = fsub <4 x double> %166, %137
  %168 = fsub <4 x double> %166, %167
  %169 = fsub <4 x double> %137, %168
  %170 = fsub <4 x double> %162, %167
  %171 = fadd <4 x double> %170, %169
  %172 = fadd <4 x double> %165, %164
  %173 = fadd <4 x double> %172, %171
  %174 = bitcast <4 x i64> %157 to <8 x i32>
  %175 = shufflevector <8 x i32> %174, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %176 = bitcast <8 x i32> %175 to <4 x double>
  %177 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %137, <4 x double> %166, <4 x double> %176) #7
  %178 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %165, <4 x double> %173, <4 x double> %176) #7
  %179 = fadd <4 x double> %177, %178
  %180 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %181 = fcmp uno <4 x double> %0, zeroinitializer
  %182 = or <4 x i1> %180, %181
  %183 = select <4 x i1> %182, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %179
  br label %184

; <label>:184:                                    ; preds = %27, %46, %12
  %185 = phi <4 x i32> [ %16, %12 ], [ %36, %27 ], [ %152, %46 ]
  %186 = phi <4 x double> [ %18, %12 ], [ %45, %27 ], [ %183, %46 ]
  %187 = fmul <4 x double> %186, %186
  %188 = and <4 x i32> %185, <i32 2, i32 2, i32 2, i32 2>
  %189 = icmp eq <4 x i32> %188, zeroinitializer
  %190 = sext <4 x i1> %189 to <4 x i32>
  %191 = bitcast <4 x i32> %190 to <2 x i64>
  %192 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = bitcast <4 x i64> %192 to <8 x i32>
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %195 = bitcast <8 x i32> %194 to <4 x i64>
  %196 = and <4 x i64> %195, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %197 = bitcast <4 x double> %186 to <4 x i64>
  %198 = xor <4 x i64> %196, %197
  %199 = bitcast <4 x i64> %198 to <4 x double>
  %200 = fmul <4 x double> %187, %187
  %201 = fmul <4 x double> %200, %200
  %202 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <4 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #7
  %203 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <4 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #7
  %204 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %200, <4 x double> %202, <4 x double> %203) #7
  %205 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <4 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #7
  %206 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <4 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F>) #7
  %207 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %200, <4 x double> %205, <4 x double> %206) #7
  %208 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %201, <4 x double> %204, <4 x double> %207) #7
  %209 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %208, <4 x double> %187, <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>) #7
  %210 = fmul <4 x double> %209, %199
  %211 = fmul <4 x double> %187, %210
  %212 = fadd <4 x double> %211, %199
  ret <4 x double> %212
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cosd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %29, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %14, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #7
  %17 = fmul <4 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <4 x double> %17, %0
  %19 = fsub <4 x double> %18, %0
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %0, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fmul <4 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %25 = fadd <4 x double> %24, %18
  %26 = fsub <4 x double> %18, %25
  %27 = fadd <4 x double> %24, %26
  %28 = fadd <4 x double> %27, %23
  br label %234

; <label>:29:                                     ; preds = %1
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = and <2 x i64> %33, %32
  %35 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %34, <2 x i64> <i64 -1, i64 -1>) #7
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %94, label %37, !prof !2

; <label>:37:                                     ; preds = %29
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <4 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #7
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #7
  %40 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %42 = fadd <4 x double> %40, %41
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #7
  %44 = fmul <4 x double> %39, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %45 = shl <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>
  %46 = or <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = sitofp <4 x i32> %46 to <4 x double>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #7
  %49 = fmul <4 x double> %47, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %50 = fadd <4 x double> %48, %49
  %51 = fsub <4 x double> %50, %48
  %52 = fsub <4 x double> %50, %51
  %53 = fsub <4 x double> %48, %52
  %54 = fsub <4 x double> %49, %51
  %55 = fadd <4 x double> %54, %53
  %56 = fmul <4 x double> %44, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %57 = fadd <4 x double> %56, %50
  %58 = fsub <4 x double> %57, %50
  %59 = fsub <4 x double> %57, %58
  %60 = fsub <4 x double> %50, %59
  %61 = fsub <4 x double> %56, %58
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fmul <4 x double> %47, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %65 = fadd <4 x double> %64, %57
  %66 = fsub <4 x double> %65, %57
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %57, %67
  %69 = fsub <4 x double> %64, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %70, %63
  %72 = fmul <4 x double> %44, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %73 = fadd <4 x double> %72, %65
  %74 = fsub <4 x double> %73, %65
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %65, %75
  %77 = fsub <4 x double> %72, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %78, %71
  %80 = fmul <4 x double> %47, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %81 = fadd <4 x double> %80, %73
  %82 = fsub <4 x double> %81, %73
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %73, %83
  %85 = fsub <4 x double> %80, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %86, %79
  %88 = fadd <4 x double> %44, %47
  %89 = fmul <4 x double> %88, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %90 = fadd <4 x double> %89, %81
  %91 = fsub <4 x double> %81, %90
  %92 = fadd <4 x double> %89, %91
  %93 = fadd <4 x double> %92, %87
  br label %234

; <label>:94:                                     ; preds = %29
  %95 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %96 = bitcast <2 x i64> %95 to <4 x float>
  %97 = shufflevector <4 x float> %96, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %98 = bitcast <4 x float> %97 to <2 x i64>
  %99 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %100 = bitcast <2 x i64> %99 to <4 x float>
  %101 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %100, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %102 = bitcast <4 x float> %101 to <2 x i64>
  %103 = or <2 x i64> %102, %98
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = lshr <4 x i32> %104, <i32 20, i32 20, i32 20, i32 20>
  %106 = and <4 x i32> %105, <i32 2047, i32 2047, i32 2047, i32 2047>
  %107 = add nsw <4 x i32> %106, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %108 = icmp ugt <4 x i32> %106, <i32 1723, i32 1723, i32 1723, i32 1723>
  %109 = select <4 x i1> %108, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %110 = bitcast <4 x i64> %109 to <8 x i32>
  %111 = shl <8 x i32> %110, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %112 = bitcast <4 x double> %0 to <8 x i32>
  %113 = add <8 x i32> %111, %112
  %114 = bitcast <8 x i32> %113 to <4 x double>
  %115 = ashr <4 x i32> %107, <i32 31, i32 31, i32 31, i32 31>
  %116 = xor <4 x i32> %115, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %117 = and <4 x i32> %116, %107
  %118 = shl <4 x i32> %117, <i32 2, i32 2, i32 2, i32 2>
  %119 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %118, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %120 = fmul <4 x double> %119, %114
  %121 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %114, <4 x double> %119, <4 x double> %121) #7
  %123 = fmul <4 x double> %120, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %124 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %123, i32 8) #7
  %125 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %120, i32 8) #7
  %126 = fmul <4 x double> %125, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %127 = fsub <4 x double> %124, %126
  %128 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %127) #7
  %129 = fmul <4 x double> %124, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %130 = fsub <4 x double> %120, %129
  %131 = fadd <4 x double> %122, %130
  %132 = fsub <4 x double> %130, %131
  %133 = fadd <4 x double> %122, %132
  %134 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %118, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %135 = fmul <4 x double> %134, %114
  %136 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %135
  %137 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %114, <4 x double> %134, <4 x double> %136) #7
  %138 = fadd <4 x double> %131, %135
  %139 = fsub <4 x double> %138, %131
  %140 = fsub <4 x double> %138, %139
  %141 = fsub <4 x double> %131, %140
  %142 = fsub <4 x double> %135, %139
  %143 = fadd <4 x double> %142, %141
  %144 = fadd <4 x double> %137, %133
  %145 = fadd <4 x double> %144, %143
  %146 = fmul <4 x double> %138, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %147 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %146, i32 8) #7
  %148 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %138, i32 8) #7
  %149 = fmul <4 x double> %148, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %150 = fsub <4 x double> %147, %149
  %151 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %150) #7
  %152 = fmul <4 x double> %147, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %153 = fsub <4 x double> %138, %152
  %154 = add <4 x i32> %151, %128
  %155 = fadd <4 x double> %153, %145
  %156 = fsub <4 x double> %153, %155
  %157 = fadd <4 x double> %145, %156
  %158 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %118, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %159 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %118, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %160 = fmul <4 x double> %158, %114
  %161 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %160
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %158, <4 x double> %114, <4 x double> %161) #7
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %114, <4 x double> %162) #7
  %164 = fadd <4 x double> %160, %155
  %165 = fsub <4 x double> %164, %155
  %166 = fsub <4 x double> %164, %165
  %167 = fsub <4 x double> %155, %166
  %168 = fsub <4 x double> %160, %165
  %169 = fadd <4 x double> %168, %167
  %170 = fadd <4 x double> %163, %157
  %171 = fadd <4 x double> %170, %169
  %172 = fadd <4 x double> %164, %171
  %173 = fsub <4 x double> %164, %172
  %174 = fadd <4 x double> %171, %173
  %175 = fmul <4 x double> %172, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %176 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %175
  %177 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %172, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %176) #7
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %174, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %177) #7
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %172, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %178) #7
  %180 = bitcast <8 x i32> %113 to <4 x i64>
  %181 = and <4 x i64> %180, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %182 = bitcast <4 x i64> %181 to <4 x double>
  %183 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %182, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %184 = bitcast <4 x double> %183 to <4 x i64>
  %185 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %175, <4 x double> %114, <4 x double> %183) #7
  %186 = bitcast <4 x double> %179 to <4 x i64>
  %187 = xor <4 x i64> %184, <i64 -1, i64 -1, i64 -1, i64 -1>
  %188 = and <4 x i64> %187, %186
  %189 = shl <4 x i32> %154, <i32 1, i32 1, i32 1, i32 1>
  %190 = and <4 x i32> %189, <i32 6, i32 6, i32 6, i32 6>
  %191 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %185, <4 x double> zeroinitializer, i8 30) #7
  %192 = bitcast <4 x double> %191 to <8 x i32>
  %193 = shufflevector <8 x i32> %192, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = bitcast <8 x i32> %193 to <4 x i64>
  %195 = shufflevector <4 x i64> %194, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %196 = bitcast <2 x i64> %195 to <16 x i8>
  %197 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %196) #7
  %198 = bitcast <16 x i8> %197 to <4 x i32>
  %199 = add <4 x i32> %190, %198
  %200 = ashr <4 x i32> %199, <i32 1, i32 1, i32 1, i32 1>
  %201 = and <4 x i32> %154, <i32 1, i32 1, i32 1, i32 1>
  %202 = icmp eq <4 x i32> %201, zeroinitializer
  %203 = sext <4 x i1> %202 to <4 x i32>
  %204 = bitcast <4 x i32> %203 to <2 x i64>
  %205 = shufflevector <2 x i64> %204, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %206 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer, <4 x double> %191) #7
  %207 = bitcast <4 x double> %206 to <4 x i64>
  %208 = and <4 x i64> %207, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %209 = xor <4 x i64> %208, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %210 = bitcast <4 x i64> %209 to <4 x double>
  %211 = xor <4 x i64> %208, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %212 = bitcast <4 x i64> %211 to <4 x double>
  %213 = bitcast <4 x i64> %188 to <4 x double>
  %214 = fadd <4 x double> %185, %210
  %215 = fsub <4 x double> %214, %185
  %216 = fsub <4 x double> %214, %215
  %217 = fsub <4 x double> %185, %216
  %218 = fsub <4 x double> %210, %215
  %219 = fadd <4 x double> %218, %217
  %220 = fadd <4 x double> %213, %212
  %221 = fadd <4 x double> %220, %219
  %222 = bitcast <4 x i64> %205 to <8 x i32>
  %223 = shufflevector <8 x i32> %222, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %224 = bitcast <8 x i32> %223 to <4 x double>
  %225 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %185, <4 x double> %214, <4 x double> %224) #7
  %226 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %213, <4 x double> %221, <4 x double> %224) #7
  %227 = fadd <4 x double> %225, %226
  %228 = fsub <4 x double> %225, %227
  %229 = fadd <4 x double> %226, %228
  %230 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %231 = fcmp uno <4 x double> %0, zeroinitializer
  %232 = or <4 x i1> %230, %231
  %233 = select <4 x i1> %232, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %227
  br label %234

; <label>:234:                                    ; preds = %37, %94, %12
  %235 = phi <4 x double> [ %233, %94 ], [ %90, %37 ], [ %25, %12 ]
  %236 = phi <4 x double> [ %229, %94 ], [ %93, %37 ], [ %28, %12 ]
  %237 = phi <4 x i32> [ %200, %94 ], [ %46, %37 ], [ %16, %12 ]
  %238 = fmul <4 x double> %235, %235
  %239 = fadd <4 x double> %235, %235
  %240 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %238
  %241 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %235, <4 x double> %235, <4 x double> %240) #7
  %242 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %239, <4 x double> %236, <4 x double> %241) #7
  %243 = fmul <4 x double> %238, %238
  %244 = fmul <4 x double> %243, %243
  %245 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %238, <4 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <4 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #7
  %246 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %238, <4 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <4 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #7
  %247 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %238, <4 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <4 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #7
  %248 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %243, <4 x double> %246, <4 x double> %247) #7
  %249 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %244, <4 x double> %245, <4 x double> %248) #7
  %250 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %249, <4 x double> %238, <4 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9>) #7
  %251 = fmul <4 x double> %238, %250
  %252 = fadd <4 x double> %251, <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>
  %253 = fsub <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>, %252
  %254 = fadd <4 x double> %251, %253
  %255 = fmul <4 x double> %238, %252
  %256 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %255
  %257 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %252, <4 x double> %238, <4 x double> %256) #7
  %258 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %254, <4 x double> %238, <4 x double> %257) #7
  %259 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %252, <4 x double> %242, <4 x double> %258) #7
  %260 = fadd <4 x double> %255, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %261 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %260
  %262 = fadd <4 x double> %255, %261
  %263 = fadd <4 x double> %259, %262
  %264 = fmul <4 x double> %235, %263
  %265 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %236, <4 x double> %260, <4 x double> %264) #7
  %266 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %235, <4 x double> %260, <4 x double> %265) #7
  %267 = and <4 x i32> %237, <i32 2, i32 2, i32 2, i32 2>
  %268 = icmp eq <4 x i32> %267, zeroinitializer
  %269 = sext <4 x i1> %268 to <4 x i32>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = shufflevector <2 x i64> %270, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %272 = bitcast <4 x i64> %271 to <8 x i32>
  %273 = shufflevector <8 x i32> %272, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %274 = bitcast <8 x i32> %273 to <4 x i64>
  %275 = and <4 x i64> %274, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %276 = bitcast <4 x double> %266 to <4 x i64>
  %277 = xor <4 x i64> %275, %276
  %278 = bitcast <4 x i64> %277 to <4 x double>
  ret <4 x double> %278
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd4_u35avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %15 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %14, i32 8) #7
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %1) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %17) #7
  br label %144

; <label>:19:                                     ; preds = %2
  %20 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %43, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = fmul <4 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %29 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %28, i32 11) #7
  %30 = fmul <4 x double> %29, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %31 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %32 = fsub <4 x double> %31, %30
  %33 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %32, i32 8) #7
  %34 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %33) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %1) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %39) #7
  %41 = fadd <4 x double> %30, %33
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %40) #7
  br label %144

; <label>:43:                                     ; preds = %19
  %44 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = shufflevector <4 x float> %45, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %47 = bitcast <4 x float> %46 to <2 x i64>
  %48 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %49, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %51 = bitcast <4 x float> %50 to <2 x i64>
  %52 = or <2 x i64> %51, %47
  %53 = bitcast <2 x i64> %52 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = and <4 x i32> %54, <i32 2047, i32 2047, i32 2047, i32 2047>
  %56 = add nsw <4 x i32> %55, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %57 = icmp ugt <4 x i32> %55, <i32 1723, i32 1723, i32 1723, i32 1723>
  %58 = select <4 x i1> %57, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %59 = bitcast <4 x i64> %58 to <8 x i32>
  %60 = shl <8 x i32> %59, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %61 = bitcast <4 x double> %1 to <8 x i32>
  %62 = add <8 x i32> %60, %61
  %63 = bitcast <8 x i32> %62 to <4 x double>
  %64 = ashr <4 x i32> %56, <i32 31, i32 31, i32 31, i32 31>
  %65 = xor <4 x i32> %64, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %66 = and <4 x i32> %65, %56
  %67 = shl <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %68 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %67, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %69 = fmul <4 x double> %68, %63
  %70 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> %68, <4 x double> %70) #7
  %72 = fmul <4 x double> %69, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %73 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %72, i32 8) #7
  %74 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %69, i32 8) #7
  %75 = fmul <4 x double> %74, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %76 = fsub <4 x double> %73, %75
  %77 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %76) #7
  %78 = fmul <4 x double> %73, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %79 = fsub <4 x double> %69, %78
  %80 = fadd <4 x double> %71, %79
  %81 = fsub <4 x double> %79, %80
  %82 = fadd <4 x double> %71, %81
  %83 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %67, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %84 = fmul <4 x double> %83, %63
  %85 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %84
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> %83, <4 x double> %85) #7
  %87 = fadd <4 x double> %80, %84
  %88 = fsub <4 x double> %87, %80
  %89 = fsub <4 x double> %87, %88
  %90 = fsub <4 x double> %80, %89
  %91 = fsub <4 x double> %84, %88
  %92 = fadd <4 x double> %91, %90
  %93 = fadd <4 x double> %86, %82
  %94 = fadd <4 x double> %93, %92
  %95 = fmul <4 x double> %87, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %96 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %95, i32 8) #7
  %97 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %87, i32 8) #7
  %98 = fmul <4 x double> %97, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %99 = fsub <4 x double> %96, %98
  %100 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %99) #7
  %101 = fmul <4 x double> %96, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %102 = fsub <4 x double> %87, %101
  %103 = add <4 x i32> %100, %77
  %104 = fadd <4 x double> %102, %94
  %105 = fsub <4 x double> %102, %104
  %106 = fadd <4 x double> %94, %105
  %107 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %67, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %108 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %67, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %109 = fmul <4 x double> %107, %63
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %107, <4 x double> %63, <4 x double> %110) #7
  %112 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %63, <4 x double> %111) #7
  %113 = fadd <4 x double> %109, %104
  %114 = fsub <4 x double> %113, %104
  %115 = fsub <4 x double> %113, %114
  %116 = fsub <4 x double> %104, %115
  %117 = fsub <4 x double> %109, %114
  %118 = fadd <4 x double> %117, %116
  %119 = fadd <4 x double> %112, %106
  %120 = fadd <4 x double> %119, %118
  %121 = fadd <4 x double> %113, %120
  %122 = fsub <4 x double> %113, %121
  %123 = fadd <4 x double> %120, %122
  %124 = fmul <4 x double> %121, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %125 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %124
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %125) #7
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %126) #7
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %127) #7
  %129 = bitcast <8 x i32> %62 to <4 x i64>
  %130 = and <4 x i64> %129, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %131 = bitcast <4 x i64> %130 to <4 x double>
  %132 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %131, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %133 = bitcast <4 x double> %132 to <4 x i64>
  %134 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %124, <4 x double> %63, <4 x double> %132) #7
  %135 = bitcast <4 x double> %128 to <4 x i64>
  %136 = xor <4 x i64> %133, <i64 -1, i64 -1, i64 -1, i64 -1>
  %137 = and <4 x i64> %136, %135
  %138 = bitcast <4 x i64> %137 to <4 x double>
  %139 = fadd <4 x double> %134, %138
  %140 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %141 = fcmp uno <4 x double> %1, zeroinitializer
  %142 = or <4 x i1> %140, %141
  %143 = select <4 x i1> %142, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %139
  br label %144

; <label>:144:                                    ; preds = %27, %43, %13
  %145 = phi <4 x i32> [ %16, %13 ], [ %34, %27 ], [ %103, %43 ]
  %146 = phi <4 x double> [ %18, %13 ], [ %42, %27 ], [ %143, %43 ]
  %147 = fmul <4 x double> %146, %146
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <4 x double> %147, <4 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #7
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %148, <4 x double> %147, <4 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #7
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %147, <4 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #7
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> %147, <4 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135>) #7
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %151, <4 x double> %147, <4 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542>) #7
  %153 = fmul <4 x double> %147, %152
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %146, <4 x double> %146) #7
  %155 = icmp eq <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = sext <4 x i1> %155 to <4 x i64>
  %157 = bitcast <4 x i64> %156 to <4 x double>
  %158 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %154, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %157) #7
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <4 x double> %147, <4 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #7
  %160 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %147, <4 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #7
  %161 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> %147, <4 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #7
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> %147, <4 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #7
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %162, <4 x double> %147, <4 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545>) #7
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %163, <4 x double> %147, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> %164, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %166 = and <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %167 = icmp eq <4 x i32> %166, zeroinitializer
  %168 = sext <4 x i1> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = shufflevector <2 x i64> %169, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = bitcast <4 x i64> %170 to <8 x i32>
  %172 = shufflevector <8 x i32> %171, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %173 = bitcast <8 x i32> %172 to <4 x double>
  %174 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %165, <4 x double> %158, <4 x double> %173) #7
  %175 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %158, <4 x double> %165, <4 x double> %173) #7
  %176 = and <4 x i32> %145, <i32 2, i32 2, i32 2, i32 2>
  %177 = icmp ne <4 x i32> %176, zeroinitializer
  %178 = sext <4 x i1> %177 to <4 x i32>
  %179 = bitcast <4 x i32> %178 to <2 x i64>
  %180 = shufflevector <2 x i64> %179, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = bitcast <4 x i64> %180 to <8 x i32>
  %182 = shufflevector <8 x i32> %181, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %183 = bitcast <8 x i32> %182 to <4 x i64>
  %184 = and <4 x i64> %183, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %185 = bitcast <4 x double> %174 to <4 x i64>
  %186 = xor <4 x i64> %184, %185
  %187 = add <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %188 = and <4 x i32> %187, <i32 2, i32 2, i32 2, i32 2>
  %189 = icmp ne <4 x i32> %188, zeroinitializer
  %190 = sext <4 x i1> %189 to <4 x i32>
  %191 = bitcast <4 x i32> %190 to <2 x i64>
  %192 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = bitcast <4 x i64> %192 to <8 x i32>
  %194 = shufflevector <8 x i32> %193, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %195 = bitcast <8 x i32> %194 to <4 x i64>
  %196 = and <4 x i64> %195, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %197 = bitcast <4 x double> %175 to <4 x i64>
  %198 = xor <4 x i64> %196, %197
  %199 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %186, <4 x i64>* %199, align 32
  %200 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %201 = bitcast <4 x double>* %200 to <4 x i64>*
  store <4 x i64> %198, <4 x i64>* %201, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd4_u10avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %15 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %14, i32 8) #7
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %1) #7
  %18 = fmul <4 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %19 = fadd <4 x double> %18, %17
  %20 = fsub <4 x double> %17, %19
  %21 = fadd <4 x double> %18, %20
  %22 = bitcast <4 x double> %21 to <4 x i64>
  br label %186

; <label>:23:                                     ; preds = %2
  %24 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %25 = bitcast <4 x double> %24 to <4 x i64>
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %28 = and <2 x i64> %27, %26
  %29 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %28, <2 x i64> <i64 -1, i64 -1>) #7
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %83, label %31, !prof !2

; <label>:31:                                     ; preds = %23
  %32 = fmul <4 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %33 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %32, i32 11) #7
  %34 = fmul <4 x double> %33, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %35 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %36 = fsub <4 x double> %35, %34
  %37 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %36, i32 8) #7
  %38 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %1) #7
  %40 = fmul <4 x double> %37, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %41 = fadd <4 x double> %40, %39
  %42 = fsub <4 x double> %39, %41
  %43 = fadd <4 x double> %40, %42
  %44 = fmul <4 x double> %34, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %45 = fadd <4 x double> %44, %41
  %46 = fsub <4 x double> %45, %41
  %47 = fsub <4 x double> %45, %46
  %48 = fsub <4 x double> %41, %47
  %49 = fsub <4 x double> %44, %46
  %50 = fadd <4 x double> %49, %48
  %51 = fadd <4 x double> %43, %50
  %52 = fmul <4 x double> %37, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %53 = fadd <4 x double> %52, %45
  %54 = fsub <4 x double> %53, %45
  %55 = fsub <4 x double> %53, %54
  %56 = fsub <4 x double> %45, %55
  %57 = fsub <4 x double> %52, %54
  %58 = fadd <4 x double> %57, %56
  %59 = fadd <4 x double> %58, %51
  %60 = fmul <4 x double> %34, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %61 = fadd <4 x double> %60, %53
  %62 = fsub <4 x double> %61, %53
  %63 = fsub <4 x double> %61, %62
  %64 = fsub <4 x double> %53, %63
  %65 = fsub <4 x double> %60, %62
  %66 = fadd <4 x double> %65, %64
  %67 = fadd <4 x double> %66, %59
  %68 = fmul <4 x double> %37, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %69 = fadd <4 x double> %68, %61
  %70 = fsub <4 x double> %69, %61
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %61, %71
  %73 = fsub <4 x double> %68, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %34, %37
  %77 = fmul <4 x double> %76, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %78 = fadd <4 x double> %77, %69
  %79 = fsub <4 x double> %69, %78
  %80 = fadd <4 x double> %77, %79
  %81 = fadd <4 x double> %80, %75
  %82 = bitcast <4 x double> %81 to <4 x i64>
  br label %186

; <label>:83:                                     ; preds = %23
  %84 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %85 = bitcast <2 x i64> %84 to <4 x float>
  %86 = shufflevector <4 x float> %85, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %87 = bitcast <4 x float> %86 to <2 x i64>
  %88 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %89 = bitcast <2 x i64> %88 to <4 x float>
  %90 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %89, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %91 = bitcast <4 x float> %90 to <2 x i64>
  %92 = or <2 x i64> %91, %87
  %93 = bitcast <2 x i64> %92 to <4 x i32>
  %94 = lshr <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = and <4 x i32> %94, <i32 2047, i32 2047, i32 2047, i32 2047>
  %96 = add nsw <4 x i32> %95, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %97 = icmp ugt <4 x i32> %95, <i32 1723, i32 1723, i32 1723, i32 1723>
  %98 = select <4 x i1> %97, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %99 = bitcast <4 x i64> %98 to <8 x i32>
  %100 = shl <8 x i32> %99, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %101 = bitcast <4 x double> %1 to <8 x i32>
  %102 = add <8 x i32> %100, %101
  %103 = bitcast <8 x i32> %102 to <4 x double>
  %104 = ashr <4 x i32> %96, <i32 31, i32 31, i32 31, i32 31>
  %105 = xor <4 x i32> %104, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %106 = and <4 x i32> %105, %96
  %107 = shl <4 x i32> %106, <i32 2, i32 2, i32 2, i32 2>
  %108 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %107, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %109 = fmul <4 x double> %108, %103
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %108, <4 x double> %110) #7
  %112 = fmul <4 x double> %109, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %113 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %112, i32 8) #7
  %114 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %109, i32 8) #7
  %115 = fmul <4 x double> %114, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %116 = fsub <4 x double> %113, %115
  %117 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %116) #7
  %118 = fmul <4 x double> %113, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %119 = fsub <4 x double> %109, %118
  %120 = fadd <4 x double> %111, %119
  %121 = fsub <4 x double> %119, %120
  %122 = fadd <4 x double> %111, %121
  %123 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %107, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %124 = fmul <4 x double> %123, %103
  %125 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %124
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %123, <4 x double> %125) #7
  %127 = fadd <4 x double> %120, %124
  %128 = fsub <4 x double> %127, %120
  %129 = fsub <4 x double> %127, %128
  %130 = fsub <4 x double> %120, %129
  %131 = fsub <4 x double> %124, %128
  %132 = fadd <4 x double> %131, %130
  %133 = fadd <4 x double> %126, %122
  %134 = fadd <4 x double> %133, %132
  %135 = fmul <4 x double> %127, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %136 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %135, i32 8) #7
  %137 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %127, i32 8) #7
  %138 = fmul <4 x double> %137, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %139 = fsub <4 x double> %136, %138
  %140 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %139) #7
  %141 = fmul <4 x double> %136, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %142 = fsub <4 x double> %127, %141
  %143 = add <4 x i32> %140, %117
  %144 = fadd <4 x double> %142, %134
  %145 = fsub <4 x double> %142, %144
  %146 = fadd <4 x double> %134, %145
  %147 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %107, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %148 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %107, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %149 = fmul <4 x double> %147, %103
  %150 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %149
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> %103, <4 x double> %150) #7
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %148, <4 x double> %103, <4 x double> %151) #7
  %153 = fadd <4 x double> %149, %144
  %154 = fsub <4 x double> %153, %144
  %155 = fsub <4 x double> %153, %154
  %156 = fsub <4 x double> %144, %155
  %157 = fsub <4 x double> %149, %154
  %158 = fadd <4 x double> %157, %156
  %159 = fadd <4 x double> %152, %146
  %160 = fadd <4 x double> %159, %158
  %161 = fadd <4 x double> %153, %160
  %162 = fsub <4 x double> %153, %161
  %163 = fadd <4 x double> %160, %162
  %164 = fmul <4 x double> %161, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %165 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %164
  %166 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %165) #7
  %167 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %163, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %166) #7
  %168 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %167) #7
  %169 = bitcast <8 x i32> %102 to <4 x i64>
  %170 = and <4 x i64> %169, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %171 = bitcast <4 x i64> %170 to <4 x double>
  %172 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %171, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %173 = bitcast <4 x double> %172 to <4 x i64>
  %174 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %164, <4 x double> %103, <4 x double> %172) #7
  %175 = bitcast <4 x double> %168 to <4 x i64>
  %176 = xor <4 x i64> %173, <i64 -1, i64 -1, i64 -1, i64 -1>
  %177 = and <4 x i64> %176, %175
  %178 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %179 = fcmp uno <4 x double> %1, zeroinitializer
  %180 = or <4 x i1> %178, %179
  %181 = sext <4 x i1> %180 to <4 x i64>
  %182 = bitcast <4 x double> %174 to <4 x i64>
  %183 = or <4 x i64> %182, %181
  %184 = bitcast <4 x i64> %183 to <4 x double>
  %185 = or <4 x i64> %177, %181
  br label %186

; <label>:186:                                    ; preds = %31, %83, %13
  %187 = phi <4 x double> [ %184, %83 ], [ %78, %31 ], [ %19, %13 ]
  %188 = phi <4 x i64> [ %185, %83 ], [ %82, %31 ], [ %22, %13 ]
  %189 = phi <4 x i32> [ %143, %83 ], [ %38, %31 ], [ %16, %13 ]
  %190 = bitcast <4 x i64> %188 to <4 x double>
  %191 = fmul <4 x double> %187, %190
  %192 = fadd <4 x double> %191, %191
  %193 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> %187, <4 x double> %192) #7
  %194 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <4 x double> %193, <4 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #7
  %195 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %194, <4 x double> %193, <4 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #7
  %196 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %195, <4 x double> %193, <4 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #7
  %197 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %196, <4 x double> %193, <4 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135>) #7
  %198 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %197, <4 x double> %193, <4 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542>) #7
  %199 = fmul <4 x double> %187, %193
  %200 = fmul <4 x double> %199, %198
  %201 = fadd <4 x double> %187, %200
  %202 = fsub <4 x double> %187, %201
  %203 = fadd <4 x double> %200, %202
  %204 = fadd <4 x double> %203, %190
  %205 = fadd <4 x double> %201, %204
  %206 = icmp eq <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %207 = sext <4 x i1> %206 to <4 x i64>
  %208 = bitcast <4 x i64> %207 to <4 x double>
  %209 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %205, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %208) #7
  %210 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <4 x double> %193, <4 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #7
  %211 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %210, <4 x double> %193, <4 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #7
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %211, <4 x double> %193, <4 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #7
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %212, <4 x double> %193, <4 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #7
  %214 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %213, <4 x double> %193, <4 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545>) #7
  %215 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %214, <4 x double> %193, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #7
  %216 = fmul <4 x double> %193, %215
  %217 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %216
  %218 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %193, <4 x double> %215, <4 x double> %217) #7
  %219 = fadd <4 x double> %216, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %220 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %219
  %221 = fadd <4 x double> %216, %220
  %222 = fadd <4 x double> %218, %221
  %223 = fadd <4 x double> %219, %222
  %224 = and <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  %225 = icmp eq <4 x i32> %224, zeroinitializer
  %226 = sext <4 x i1> %225 to <4 x i32>
  %227 = bitcast <4 x i32> %226 to <2 x i64>
  %228 = shufflevector <2 x i64> %227, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = bitcast <4 x i64> %228 to <8 x i32>
  %230 = shufflevector <8 x i32> %229, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %231 = bitcast <8 x i32> %230 to <4 x double>
  %232 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %223, <4 x double> %209, <4 x double> %231) #7
  %233 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %209, <4 x double> %223, <4 x double> %231) #7
  %234 = and <4 x i32> %189, <i32 2, i32 2, i32 2, i32 2>
  %235 = icmp ne <4 x i32> %234, zeroinitializer
  %236 = sext <4 x i1> %235 to <4 x i32>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = shufflevector <2 x i64> %237, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %239 = bitcast <4 x i64> %238 to <8 x i32>
  %240 = shufflevector <8 x i32> %239, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %241 = bitcast <8 x i32> %240 to <4 x i64>
  %242 = and <4 x i64> %241, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %243 = bitcast <4 x double> %232 to <4 x i64>
  %244 = xor <4 x i64> %242, %243
  %245 = add <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  %246 = and <4 x i32> %245, <i32 2, i32 2, i32 2, i32 2>
  %247 = icmp ne <4 x i32> %246, zeroinitializer
  %248 = sext <4 x i1> %247 to <4 x i32>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <2 x i64> %249, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %251 = bitcast <4 x i64> %250 to <8 x i32>
  %252 = shufflevector <8 x i32> %251, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %253 = bitcast <8 x i32> %252 to <4 x i64>
  %254 = and <4 x i64> %253, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %255 = bitcast <4 x double> %233 to <4 x i64>
  %256 = xor <4 x i64> %254, %255
  %257 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %244, <4 x i64>* %257, align 32
  %258 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %259 = bitcast <4 x double>* %258 to <4 x i64>*
  store <4 x i64> %256, <4 x i64>* %259, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid4_u05avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> %11, <4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %11, <4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #7
  %19 = fmul <4 x double> %18, %11
  %20 = fadd <4 x double> %19, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %21 = fsub <4 x double> %20, %19
  %22 = fsub <4 x double> %20, %21
  %23 = fsub <4 x double> %19, %22
  %24 = fsub <4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %21
  %25 = fadd <4 x double> %24, %23
  %26 = fadd <4 x double> %25, <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>
  %27 = fmul <4 x double> %11, %20
  %28 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %20, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %29) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %26, <4 x double> %30) #7
  %32 = fadd <4 x double> %27, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %33 = fsub <4 x double> %32, %27
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %27, %34
  %36 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %31, <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fmul <4 x double> %10, %32
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %10, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %10, <4 x double> %42) #7
  %44 = fadd <4 x double> %43, %40
  %45 = bitcast <4 x double> %1 to <4 x i64>
  %46 = icmp eq <4 x i64> %45, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %47 = sext <4 x i1> %46 to <4 x i64>
  %48 = bitcast <4 x i64> %47 to <4 x double>
  %49 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %48) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %11, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %11, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %11, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %11, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #7
  %55 = fmul <4 x double> %11, %54
  %56 = fadd <4 x double> %55, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %57 = fsub <4 x double> %56, %55
  %58 = fsub <4 x double> %56, %57
  %59 = fsub <4 x double> %55, %58
  %60 = fsub <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %57
  %61 = fadd <4 x double> %60, %59
  %62 = fadd <4 x double> %61, <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>
  %63 = fmul <4 x double> %11, %56
  %64 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %63
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %56, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %56, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %62, <4 x double> %66) #7
  %68 = fadd <4 x double> %63, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %69 = fsub <4 x double> %68, %63
  %70 = fsub <4 x double> %68, %69
  %71 = fsub <4 x double> %63, %70
  %72 = fsub <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %69
  %73 = fadd <4 x double> %72, %71
  %74 = fadd <4 x double> %67, <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>
  %75 = fadd <4 x double> %74, %73
  %76 = fmul <4 x double> %11, %68
  %77 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %76
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %11, <4 x double> %77) #7
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %11, <4 x double> %78) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %13, <4 x double> %79) #7
  %81 = fadd <4 x double> %76, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %82 = fsub <4 x double> %81, %76
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %76, %83
  %85 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %80, %86
  %88 = fadd <4 x double> %81, %87
  %89 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %90 = icmp eq <4 x i32> %89, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i32>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = bitcast <4 x i64> %93 to <8 x i32>
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %96 = bitcast <8 x i32> %95 to <4 x double>
  %97 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %49, <4 x double> %96) #7
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %49, <4 x double> %88, <4 x double> %96) #7
  %99 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %100 = icmp ne <4 x i32> %99, zeroinitializer
  %101 = sext <4 x i1> %100 to <4 x i32>
  %102 = bitcast <4 x i32> %101 to <2 x i64>
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = bitcast <4 x i64> %103 to <8 x i32>
  %105 = shufflevector <8 x i32> %104, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = and <4 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <4 x double> %97 to <4 x i64>
  %109 = xor <4 x i64> %107, %108
  %110 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %111 = and <4 x i32> %110, <i32 4, i32 4, i32 4, i32 4>
  %112 = icmp ne <4 x i32> %111, zeroinitializer
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = shufflevector <2 x i64> %114, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = and <4 x i64> %118, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %120 = bitcast <4 x double> %98 to <4 x i64>
  %121 = xor <4 x i64> %119, %120
  %122 = bitcast <4 x i64> %121 to <4 x double>
  %123 = and <4 x i64> %45, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %124 = bitcast <4 x i64> %123 to <4 x double>
  %125 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %124, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %126 = bitcast <4 x double> %125 to <4 x i64>
  %127 = xor <4 x i64> %126, <i64 -1, i64 -1, i64 -1, i64 -1>
  %128 = and <4 x i64> %109, %127
  %129 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %122, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %125) #7
  %130 = fcmp oeq <4 x double> %124, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = sext <4 x i1> %130 to <4 x i64>
  %132 = or <4 x i64> %128, %131
  %133 = bitcast <4 x double> %129 to <4 x i64>
  %134 = or <4 x i64> %133, %131
  %135 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %132, <4 x i64>* %135, align 32
  %136 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %137 = bitcast <4 x double>* %136 to <4 x i64>*
  store <4 x i64> %134, <4 x i64>* %137, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid4_u35avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <4 x double> %11, <4 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %11, <4 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #7
  %18 = fmul <4 x double> %17, %10
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <4 x double> %11, <4 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %11, <4 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %11, <4 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %11, <4 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %11, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %26 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %33 = bitcast <8 x i32> %32 to <4 x double>
  %34 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %33) #7
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %33) #7
  %36 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %37 = icmp ne <4 x i32> %36, zeroinitializer
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = bitcast <4 x i64> %40 to <8 x i32>
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %43 = bitcast <8 x i32> %42 to <4 x i64>
  %44 = and <4 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <4 x double> %34 to <4 x i64>
  %46 = xor <4 x i64> %44, %45
  %47 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %48 = and <4 x i32> %47, <i32 4, i32 4, i32 4, i32 4>
  %49 = icmp ne <4 x i32> %48, zeroinitializer
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = bitcast <4 x i64> %52 to <8 x i32>
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %55 = bitcast <8 x i32> %54 to <4 x i64>
  %56 = and <4 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %57 = bitcast <4 x double> %35 to <4 x i64>
  %58 = xor <4 x i64> %56, %57
  %59 = bitcast <4 x double> %1 to <4 x i64>
  %60 = and <4 x i64> %59, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %61 = bitcast <4 x i64> %60 to <4 x double>
  %62 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %61, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %63 = bitcast <4 x double> %62 to <4 x i64>
  %64 = xor <4 x i64> %63, <i64 -1, i64 -1, i64 -1, i64 -1>
  %65 = and <4 x i64> %46, %64
  %66 = and <4 x i64> %58, %64
  %67 = fcmp oeq <4 x double> %61, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = or <4 x i64> %65, %68
  %70 = or <4 x i64> %66, %68
  %71 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %69, <4 x i64>* %71, align 32
  %72 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %73 = bitcast <4 x double>* %72 to <4 x i64>*
  store <4 x i64> %70, <4 x i64>* %73, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modfd4_avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %1, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #7
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = bitcast <4 x double> %1 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 30) #7
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> zeroinitializer, <4 x double> %14) #7
  %16 = bitcast <4 x double> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %18 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <4 x i64> %17, %18
  %20 = fsub <4 x double> %1, %15
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = and <4 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %23 = or <4 x i64> %22, %18
  %24 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %24, align 32
  %25 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %26 = bitcast <4 x double>* %25 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %26, align 32
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinpid4_u05avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %10, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %12 = bitcast <4 x i64> %11 to <8 x i32>
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %16 = sitofp <4 x i32> %15 to <4 x double>
  %17 = fsub <4 x double> %2, %16
  %18 = fmul <4 x double> %17, %17
  %19 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B>, <4 x i64> %14) #7
  %22 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480>, <4 x i64> %14) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %18, <4 x double> %22) #7
  %24 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12>, <4 x i64> %14) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %18, <4 x double> %24) #7
  %26 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D>, <4 x i64> %14) #7
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %26) #7
  %28 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB>, <4 x i64> %14) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %18, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8>, <4 x i64> %14) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %18, <4 x double> %30) #7
  %32 = fmul <4 x double> %18, %31
  %33 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4>, <4 x i64> %14) #7
  %34 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C50B00000000000, double 0xBC33500000000000, double 0x3C50B00000000000, double 0xBC33500000000000>, <4 x i64> %14) #7
  %35 = fadd <4 x double> %32, %33
  %36 = fsub <4 x double> %35, %32
  %37 = fsub <4 x double> %35, %36
  %38 = fsub <4 x double> %32, %37
  %39 = fsub <4 x double> %33, %36
  %40 = fadd <4 x double> %39, %38
  %41 = fadd <4 x double> %34, %40
  %42 = fmul <4 x double> %18, %35
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %35, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %35, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %41, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE>, <4 x i64> %14) #7
  %48 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C81A80000000000, double 0xBC76900000000000, double 0x3C81A80000000000, double 0xBC76900000000000>, <4 x i64> %14) #7
  %49 = fadd <4 x double> %42, %47
  %50 = fsub <4 x double> %49, %42
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> %42, %51
  %53 = fsub <4 x double> %47, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %46, %48
  %56 = fadd <4 x double> %55, %54
  %57 = bitcast <8 x i32> %13 to <4 x double>
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> %18, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %20, <4 x double> %57) #7
  %60 = fmul <4 x double> %49, %58
  %61 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %58, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %58, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %59, <4 x double> %63) #7
  %65 = fadd <4 x double> %60, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fsub <4 x double> %65, %60
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %60, %67
  %69 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %64, %70
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %60, <4 x double> %65, <4 x double> %57) #7
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> %71, <4 x double> %57) #7
  %74 = and <4 x i32> %6, <i32 4, i32 4, i32 4, i32 4>
  %75 = icmp ne <4 x i32> %74, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = bitcast <4 x i64> %78 to <8 x i32>
  %80 = shufflevector <8 x i32> %79, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %81 = bitcast <8 x i32> %80 to <4 x i64>
  %82 = and <4 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <4 x double> %72 to <4 x i64>
  %84 = xor <4 x i64> %82, %83
  %85 = bitcast <4 x double> %73 to <4 x i64>
  %86 = xor <4 x i64> %82, %85
  %87 = bitcast <4 x i64> %84 to <4 x double>
  %88 = bitcast <4 x i64> %86 to <4 x double>
  %89 = fadd <4 x double> %87, %88
  %90 = bitcast <4 x double> %0 to <4 x i64>
  %91 = icmp eq <4 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %89, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %93) #7
  %95 = and <4 x i64> %90, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %96, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %98 = bitcast <4 x double> %97 to <4 x i64>
  %99 = bitcast <4 x double> %94 to <4 x i64>
  %100 = xor <4 x i64> %98, <i64 -1, i64 -1, i64 -1, i64 -1>
  %101 = and <4 x i64> %100, %99
  %102 = fcmp oeq <4 x double> %96, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %103 = bitcast <4 x i64> %101 to <4 x double>
  %104 = select <4 x i1> %102, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %103
  ret <4 x double> %104
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cospid4_u05avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = shufflevector <2 x i64> %10, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %12 = bitcast <4 x i64> %11 to <8 x i32>
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %16 = sitofp <4 x i32> %15 to <4 x double>
  %17 = fsub <4 x double> %2, %16
  %18 = fmul <4 x double> %17, %17
  %19 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B>, <4 x i64> %14) #7
  %22 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480>, <4 x i64> %14) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %18, <4 x double> %22) #7
  %24 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12>, <4 x i64> %14) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %18, <4 x double> %24) #7
  %26 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D>, <4 x i64> %14) #7
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %26) #7
  %28 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB>, <4 x i64> %14) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %18, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8>, <4 x i64> %14) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %18, <4 x double> %30) #7
  %32 = fmul <4 x double> %18, %31
  %33 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4>, <4 x i64> %14) #7
  %34 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C50B00000000000, double 0xBC33500000000000, double 0x3C50B00000000000, double 0xBC33500000000000>, <4 x i64> %14) #7
  %35 = fadd <4 x double> %32, %33
  %36 = fsub <4 x double> %35, %32
  %37 = fsub <4 x double> %35, %36
  %38 = fsub <4 x double> %32, %37
  %39 = fsub <4 x double> %33, %36
  %40 = fadd <4 x double> %39, %38
  %41 = fadd <4 x double> %34, %40
  %42 = fmul <4 x double> %18, %35
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %35, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %35, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %41, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE>, <4 x i64> %14) #7
  %48 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C81A80000000000, double 0xBC76900000000000, double 0x3C81A80000000000, double 0xBC76900000000000>, <4 x i64> %14) #7
  %49 = fadd <4 x double> %42, %47
  %50 = fsub <4 x double> %49, %42
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> %42, %51
  %53 = fsub <4 x double> %47, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %46, %48
  %56 = fadd <4 x double> %55, %54
  %57 = bitcast <8 x i32> %13 to <4 x double>
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> %18, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %20, <4 x double> %57) #7
  %60 = fmul <4 x double> %49, %58
  %61 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %58, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %58, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %59, <4 x double> %63) #7
  %65 = fadd <4 x double> %60, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fsub <4 x double> %65, %60
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %60, %67
  %69 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %64, %70
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %60, <4 x double> %65, <4 x double> %57) #7
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> %71, <4 x double> %57) #7
  %74 = add <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %75 = and <4 x i32> %74, <i32 4, i32 4, i32 4, i32 4>
  %76 = icmp ne <4 x i32> %75, zeroinitializer
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = bitcast <4 x i64> %79 to <8 x i32>
  %81 = shufflevector <8 x i32> %80, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = and <4 x i64> %82, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %84 = bitcast <4 x double> %72 to <4 x i64>
  %85 = xor <4 x i64> %83, %84
  %86 = bitcast <4 x double> %73 to <4 x i64>
  %87 = xor <4 x i64> %83, %86
  %88 = bitcast <4 x i64> %85 to <4 x double>
  %89 = bitcast <4 x i64> %87 to <4 x double>
  %90 = fadd <4 x double> %88, %89
  %91 = bitcast <4 x double> %0 to <4 x i64>
  %92 = and <4 x i64> %91, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %93, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %94) #7
  %96 = fcmp oeq <4 x double> %93, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %97 = select <4 x i1> %96, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %95
  ret <4 x double> %97
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tand4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %16) #7
  br label %143

; <label>:18:                                     ; preds = %1
  %19 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+06, double 1.000000e+06, double 1.000000e+06, double 1.000000e+06>, i8 17) #7
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %22, %21
  %24 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %23, <2 x i64> <i64 -1, i64 -1>) #7
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26, !prof !2

; <label>:26:                                     ; preds = %18
  %27 = fmul <4 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %28 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %27, i32 11) #7
  %29 = fmul <4 x double> %28, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %30 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %31 = fsub <4 x double> %30, %29
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 8) #7
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %34) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %38) #7
  %40 = fadd <4 x double> %29, %32
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %39) #7
  br label %143

; <label>:42:                                     ; preds = %18
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = bitcast <2 x i64> %43 to <4 x float>
  %45 = shufflevector <4 x float> %44, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %46 = bitcast <4 x float> %45 to <2 x i64>
  %47 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <2 x i64> %47 to <4 x float>
  %49 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %48, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %50 = bitcast <4 x float> %49 to <2 x i64>
  %51 = or <2 x i64> %50, %46
  %52 = bitcast <2 x i64> %51 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = and <4 x i32> %53, <i32 2047, i32 2047, i32 2047, i32 2047>
  %55 = add nsw <4 x i32> %54, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %56 = icmp ugt <4 x i32> %54, <i32 1723, i32 1723, i32 1723, i32 1723>
  %57 = select <4 x i1> %56, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shl <8 x i32> %58, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %60 = bitcast <4 x double> %0 to <8 x i32>
  %61 = add <8 x i32> %59, %60
  %62 = bitcast <8 x i32> %61 to <4 x double>
  %63 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %64 = xor <4 x i32> %63, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %65 = and <4 x i32> %64, %55
  %66 = shl <4 x i32> %65, <i32 2, i32 2, i32 2, i32 2>
  %67 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %68 = fmul <4 x double> %67, %62
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %67, <4 x double> %69) #7
  %71 = fmul <4 x double> %68, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %72 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %71, i32 8) #7
  %73 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %68, i32 8) #7
  %74 = fmul <4 x double> %73, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %75 = fsub <4 x double> %72, %74
  %76 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %75) #7
  %77 = fmul <4 x double> %72, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %78 = fsub <4 x double> %68, %77
  %79 = fadd <4 x double> %70, %78
  %80 = fsub <4 x double> %78, %79
  %81 = fadd <4 x double> %70, %80
  %82 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %83 = fmul <4 x double> %82, %62
  %84 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %83
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %82, <4 x double> %84) #7
  %86 = fadd <4 x double> %79, %83
  %87 = fsub <4 x double> %86, %79
  %88 = fsub <4 x double> %86, %87
  %89 = fsub <4 x double> %79, %88
  %90 = fsub <4 x double> %83, %87
  %91 = fadd <4 x double> %90, %89
  %92 = fadd <4 x double> %85, %81
  %93 = fadd <4 x double> %92, %91
  %94 = fmul <4 x double> %86, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %95 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %94, i32 8) #7
  %96 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %86, i32 8) #7
  %97 = fmul <4 x double> %96, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %98 = fsub <4 x double> %95, %97
  %99 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %98) #7
  %100 = fmul <4 x double> %95, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %101 = fsub <4 x double> %86, %100
  %102 = add <4 x i32> %99, %76
  %103 = fadd <4 x double> %101, %93
  %104 = fsub <4 x double> %101, %103
  %105 = fadd <4 x double> %93, %104
  %106 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %107 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %108 = fmul <4 x double> %106, %62
  %109 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %62, <4 x double> %109) #7
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %107, <4 x double> %62, <4 x double> %110) #7
  %112 = fadd <4 x double> %108, %103
  %113 = fsub <4 x double> %112, %103
  %114 = fsub <4 x double> %112, %113
  %115 = fsub <4 x double> %103, %114
  %116 = fsub <4 x double> %108, %113
  %117 = fadd <4 x double> %116, %115
  %118 = fadd <4 x double> %111, %105
  %119 = fadd <4 x double> %118, %117
  %120 = fadd <4 x double> %112, %119
  %121 = fsub <4 x double> %112, %120
  %122 = fadd <4 x double> %119, %121
  %123 = fmul <4 x double> %120, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %123
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %124) #7
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %125) #7
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %126) #7
  %128 = bitcast <8 x i32> %61 to <4 x i64>
  %129 = and <4 x i64> %128, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %130 = bitcast <4 x i64> %129 to <4 x double>
  %131 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %130, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %132 = bitcast <4 x double> %131 to <4 x i64>
  %133 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %123, <4 x double> %62, <4 x double> %131) #7
  %134 = bitcast <4 x double> %127 to <4 x i64>
  %135 = xor <4 x i64> %132, <i64 -1, i64 -1, i64 -1, i64 -1>
  %136 = and <4 x i64> %135, %134
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = fadd <4 x double> %133, %137
  %139 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %140 = fcmp uno <4 x double> %0, zeroinitializer
  %141 = or <4 x i1> %139, %140
  %142 = select <4 x i1> %141, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %138
  br label %143

; <label>:143:                                    ; preds = %26, %42, %12
  %144 = phi <4 x i32> [ %15, %12 ], [ %33, %26 ], [ %102, %42 ]
  %145 = phi <4 x double> [ %17, %12 ], [ %41, %26 ], [ %142, %42 ]
  %146 = fmul <4 x double> %145, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %147 = fmul <4 x double> %146, %146
  %148 = fmul <4 x double> %147, %147
  %149 = fmul <4 x double> %148, %148
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <4 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #7
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <4 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #7
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %148, <4 x double> %150, <4 x double> %151) #7
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <4 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #7
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <4 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933>) #7
  %155 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %148, <4 x double> %153, <4 x double> %154) #7
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %152, <4 x double> %155) #7
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %147, <4 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568>) #7
  %158 = fmul <4 x double> %146, %157
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> %158, <4 x double> %146) #7
  %160 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %159, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #7
  %161 = fmul <4 x double> %159, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %162 = and <4 x i32> %144, <i32 1, i32 1, i32 1, i32 1>
  %163 = icmp ne <4 x i32> %162, zeroinitializer
  %164 = sext <4 x i1> %163 to <4 x i32>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = shufflevector <2 x i64> %165, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %167 = bitcast <4 x i64> %166 to <8 x i32>
  %168 = shufflevector <8 x i32> %167, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %169 = bitcast <4 x double> %160 to <4 x i64>
  %170 = xor <4 x i64> %169, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %171 = bitcast <4 x i64> %170 to <4 x double>
  %172 = bitcast <8 x i32> %168 to <4 x double>
  %173 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %161, <4 x double> %171, <4 x double> %172) #7
  %174 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %160, <4 x double> %161, <4 x double> %172) #7
  %175 = fdiv <4 x double> %173, %174
  %176 = fcmp oeq <4 x double> %0, zeroinitializer
  %177 = sext <4 x i1> %176 to <4 x i64>
  %178 = bitcast <4 x i64> %177 to <4 x double>
  %179 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %175, <4 x double> %0, <4 x double> %178) #7
  ret <4 x double> %179
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tand4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #7
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #7
  %17 = fmul <4 x double> %14, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %18 = fadd <4 x double> %17, %16
  %19 = fsub <4 x double> %16, %18
  %20 = fadd <4 x double> %17, %19
  %21 = bitcast <4 x double> %20 to <4 x i64>
  br label %198

; <label>:22:                                     ; preds = %1
  %23 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %24 = bitcast <4 x double> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %95, label %30, !prof !2

; <label>:30:                                     ; preds = %22
  %31 = fmul <4 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 11) #7
  %33 = fmul <4 x double> %32, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %34 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %34
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>, <4 x double> %0, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC86B01EC5417056, double 0xBC86B01EC5417056, double 0xBC86B01EC5417056, double 0xBC86B01EC5417056>, <4 x double> %0, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>, <4 x double> %38) #7
  %40 = fsub <4 x double> %39, %33
  %41 = fadd <4 x double> %34, %40
  %42 = fsub <4 x double> %41, %34
  %43 = fsub <4 x double> %41, %42
  %44 = fsub <4 x double> %34, %43
  %45 = fsub <4 x double> %40, %42
  %46 = fadd <4 x double> %45, %44
  %47 = fadd <4 x double> %37, %46
  %48 = fadd <4 x double> %41, %47
  %49 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %48, i32 11) #7
  %50 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #7
  %52 = fmul <4 x double> %49, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %53 = fadd <4 x double> %52, %51
  %54 = fsub <4 x double> %51, %53
  %55 = fadd <4 x double> %52, %54
  %56 = fmul <4 x double> %33, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %57 = fadd <4 x double> %56, %53
  %58 = fsub <4 x double> %57, %53
  %59 = fsub <4 x double> %57, %58
  %60 = fsub <4 x double> %53, %59
  %61 = fsub <4 x double> %56, %58
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fmul <4 x double> %49, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %65 = fadd <4 x double> %64, %57
  %66 = fsub <4 x double> %65, %57
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %57, %67
  %69 = fsub <4 x double> %64, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %70, %63
  %72 = fmul <4 x double> %33, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %73 = fadd <4 x double> %72, %65
  %74 = fsub <4 x double> %73, %65
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %65, %75
  %77 = fsub <4 x double> %72, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %78, %71
  %80 = fmul <4 x double> %49, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %81 = fadd <4 x double> %80, %73
  %82 = fsub <4 x double> %81, %73
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %73, %83
  %85 = fsub <4 x double> %80, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %86, %79
  %88 = fadd <4 x double> %33, %49
  %89 = fmul <4 x double> %88, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %90 = fadd <4 x double> %89, %81
  %91 = fsub <4 x double> %81, %90
  %92 = fadd <4 x double> %89, %91
  %93 = fadd <4 x double> %92, %87
  %94 = bitcast <4 x double> %93 to <4 x i64>
  br label %198

; <label>:95:                                     ; preds = %22
  %96 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %97 = bitcast <2 x i64> %96 to <4 x float>
  %98 = shufflevector <4 x float> %97, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %99 = bitcast <4 x float> %98 to <2 x i64>
  %100 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %101 = bitcast <2 x i64> %100 to <4 x float>
  %102 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %101, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = or <2 x i64> %103, %99
  %105 = bitcast <2 x i64> %104 to <4 x i32>
  %106 = lshr <4 x i32> %105, <i32 20, i32 20, i32 20, i32 20>
  %107 = and <4 x i32> %106, <i32 2047, i32 2047, i32 2047, i32 2047>
  %108 = add nsw <4 x i32> %107, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %109 = icmp ugt <4 x i32> %107, <i32 1723, i32 1723, i32 1723, i32 1723>
  %110 = select <4 x i1> %109, <4 x i64> <i64 -274877906944, i64 -274877906944, i64 -274877906944, i64 -274877906944>, <4 x i64> zeroinitializer
  %111 = bitcast <4 x i64> %110 to <8 x i32>
  %112 = shl <8 x i32> %111, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %113 = bitcast <4 x double> %0 to <8 x i32>
  %114 = add <8 x i32> %112, %113
  %115 = bitcast <8 x i32> %114 to <4 x double>
  %116 = ashr <4 x i32> %108, <i32 31, i32 31, i32 31, i32 31>
  %117 = xor <4 x i32> %116, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %118 = and <4 x i32> %117, %108
  %119 = shl <4 x i32> %118, <i32 2, i32 2, i32 2, i32 2>
  %120 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %119, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %121 = fmul <4 x double> %120, %115
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %121
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> %120, <4 x double> %122) #7
  %124 = fmul <4 x double> %121, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %125 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %124, i32 8) #7
  %126 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %121, i32 8) #7
  %127 = fmul <4 x double> %126, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %128 = fsub <4 x double> %125, %127
  %129 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %128) #7
  %130 = fmul <4 x double> %125, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %131 = fsub <4 x double> %121, %130
  %132 = fadd <4 x double> %123, %131
  %133 = fsub <4 x double> %131, %132
  %134 = fadd <4 x double> %123, %133
  %135 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %119, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %136 = fmul <4 x double> %135, %115
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> %135, <4 x double> %137) #7
  %139 = fadd <4 x double> %132, %136
  %140 = fsub <4 x double> %139, %132
  %141 = fsub <4 x double> %139, %140
  %142 = fsub <4 x double> %132, %141
  %143 = fsub <4 x double> %136, %140
  %144 = fadd <4 x double> %143, %142
  %145 = fadd <4 x double> %138, %134
  %146 = fadd <4 x double> %145, %144
  %147 = fmul <4 x double> %139, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %148 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %147, i32 8) #7
  %149 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %139, i32 8) #7
  %150 = fmul <4 x double> %149, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %151 = fsub <4 x double> %148, %150
  %152 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %151) #7
  %153 = fmul <4 x double> %148, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %154 = fsub <4 x double> %139, %153
  %155 = add <4 x i32> %152, %129
  %156 = fadd <4 x double> %154, %146
  %157 = fsub <4 x double> %154, %156
  %158 = fadd <4 x double> %146, %157
  %159 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %119, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %160 = tail call <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %119, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %161 = fmul <4 x double> %159, %115
  %162 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %161
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %115, <4 x double> %162) #7
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> %115, <4 x double> %163) #7
  %165 = fadd <4 x double> %161, %156
  %166 = fsub <4 x double> %165, %156
  %167 = fsub <4 x double> %165, %166
  %168 = fsub <4 x double> %156, %167
  %169 = fsub <4 x double> %161, %166
  %170 = fadd <4 x double> %169, %168
  %171 = fadd <4 x double> %164, %158
  %172 = fadd <4 x double> %171, %170
  %173 = fadd <4 x double> %165, %172
  %174 = fsub <4 x double> %165, %173
  %175 = fadd <4 x double> %172, %174
  %176 = fmul <4 x double> %173, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %177 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %176
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %173, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %177) #7
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %175, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %178) #7
  %180 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %173, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %179) #7
  %181 = bitcast <8 x i32> %114 to <4 x i64>
  %182 = and <4 x i64> %181, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %183 = bitcast <4 x i64> %182 to <4 x double>
  %184 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %183, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %185 = bitcast <4 x double> %184 to <4 x i64>
  %186 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %176, <4 x double> %115, <4 x double> %184) #7
  %187 = bitcast <4 x double> %180 to <4 x i64>
  %188 = xor <4 x i64> %185, <i64 -1, i64 -1, i64 -1, i64 -1>
  %189 = and <4 x i64> %188, %187
  %190 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %191 = fcmp uno <4 x double> %0, zeroinitializer
  %192 = or <4 x i1> %190, %191
  %193 = sext <4 x i1> %192 to <4 x i64>
  %194 = bitcast <4 x double> %186 to <4 x i64>
  %195 = or <4 x i64> %194, %193
  %196 = bitcast <4 x i64> %195 to <4 x double>
  %197 = or <4 x i64> %189, %193
  br label %198

; <label>:198:                                    ; preds = %30, %95, %12
  %199 = phi <4 x double> [ %196, %95 ], [ %90, %30 ], [ %18, %12 ]
  %200 = phi <4 x i64> [ %197, %95 ], [ %94, %30 ], [ %21, %12 ]
  %201 = phi <4 x i32> [ %155, %95 ], [ %50, %30 ], [ %15, %12 ]
  %202 = bitcast <4 x i64> %200 to <4 x double>
  %203 = fmul <4 x double> %199, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %204 = fmul <4 x double> %202, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %205 = fmul <4 x double> %203, %203
  %206 = fadd <4 x double> %203, %203
  %207 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %205
  %208 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %203, <4 x double> %203, <4 x double> %207) #7
  %209 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %206, <4 x double> %204, <4 x double> %208) #7
  %210 = fmul <4 x double> %205, %205
  %211 = fmul <4 x double> %210, %210
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <4 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #7
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <4 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #7
  %214 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %210, <4 x double> %212, <4 x double> %213) #7
  %215 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <4 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #7
  %216 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <4 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933>) #7
  %217 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %210, <4 x double> %215, <4 x double> %216) #7
  %218 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %211, <4 x double> %214, <4 x double> %217) #7
  %219 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %218, <4 x double> %205, <4 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568>) #7
  %220 = fmul <4 x double> %203, %205
  %221 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %220
  %222 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> %203, <4 x double> %221) #7
  %223 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %209, <4 x double> %203, <4 x double> %222) #7
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %205, <4 x double> %204, <4 x double> %223) #7
  %225 = fmul <4 x double> %220, %219
  %226 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %225
  %227 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %220, <4 x double> %219, <4 x double> %226) #7
  %228 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %224, <4 x double> %219, <4 x double> %227) #7
  %229 = fadd <4 x double> %203, %225
  %230 = fsub <4 x double> %203, %229
  %231 = fadd <4 x double> %225, %230
  %232 = fadd <4 x double> %204, %231
  %233 = fadd <4 x double> %232, %228
  %234 = fmul <4 x double> %229, %229
  %235 = fadd <4 x double> %229, %229
  %236 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %234
  %237 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %229, <4 x double> %229, <4 x double> %236) #7
  %238 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %235, <4 x double> %233, <4 x double> %237) #7
  %239 = fadd <4 x double> %234, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %240 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %239
  %241 = fadd <4 x double> %234, %240
  %242 = fadd <4 x double> %241, %238
  %243 = fmul <4 x double> %229, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %244 = fmul <4 x double> %233, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %245 = and <4 x i32> %201, <i32 1, i32 1, i32 1, i32 1>
  %246 = icmp ne <4 x i32> %245, zeroinitializer
  %247 = sext <4 x i1> %246 to <4 x i32>
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = shufflevector <2 x i64> %248, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %250 = bitcast <4 x i64> %249 to <8 x i32>
  %251 = shufflevector <8 x i32> %250, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %252 = bitcast <4 x double> %239 to <4 x i64>
  %253 = xor <4 x i64> %252, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %254 = bitcast <4 x double> %242 to <4 x i64>
  %255 = xor <4 x i64> %254, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %256 = bitcast <4 x i64> %253 to <4 x double>
  %257 = bitcast <4 x i64> %255 to <4 x double>
  %258 = bitcast <8 x i32> %251 to <4 x double>
  %259 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %243, <4 x double> %256, <4 x double> %258) #7
  %260 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %244, <4 x double> %257, <4 x double> %258) #7
  %261 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %239, <4 x double> %243, <4 x double> %258) #7
  %262 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %242, <4 x double> %244, <4 x double> %258) #7
  %263 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %261
  %264 = fmul <4 x double> %259, %263
  %265 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %264
  %266 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %263, <4 x double> %259, <4 x double> %265) #7
  %267 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %261
  %268 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %267, <4 x double> %263, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %269 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %262
  %270 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %269, <4 x double> %263, <4 x double> %268) #7
  %271 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %260, <4 x double> %263, <4 x double> %266) #7
  %272 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %264, <4 x double> %270, <4 x double> %271) #7
  %273 = fadd <4 x double> %264, %272
  %274 = fcmp oeq <4 x double> %0, zeroinitializer
  %275 = sext <4 x i1> %274 to <4 x i64>
  %276 = bitcast <4 x i64> %275 to <4 x double>
  %277 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %273, <4 x double> %0, <4 x double> %276) #7
  ret <4 x double> %277
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atan2d4_u35avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = ashr <4 x i64> %6, <i64 63, i64 63, i64 63, i64 63>
  %8 = bitcast <4 x i64> %7 to <8 x i32>
  %9 = shufflevector <8 x i32> %8, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = and <2 x i64> %11, <i64 -4294967298, i64 -4294967298>
  %13 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %14 = bitcast <4 x i64> %13 to <4 x double>
  %15 = bitcast <2 x i64> %12 to <4 x i32>
  %16 = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %14, <4 x double> %5, i8 17) #7
  %18 = bitcast <4 x double> %17 to <8 x i32>
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i32> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = bitcast <2 x i64> %12 to <16 x i8>
  %23 = bitcast <4 x i32> %16 to <16 x i8>
  %24 = bitcast <2 x i64> %21 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %22, <16 x i8> %23, <16 x i8> %24) #7
  %26 = or <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %27, <4 x double> %17) #7
  %29 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %14, <4 x double> %5) #7
  %30 = fdiv <4 x double> %28, %29
  %31 = fmul <4 x double> %30, %30
  %32 = fmul <4 x double> %31, %31
  %33 = fmul <4 x double> %32, %32
  %34 = fmul <4 x double> %33, %33
  %35 = fmul <4 x double> %34, %34
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <4 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <4 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <4 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %38, <4 x double> %39) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <4 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <4 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %41, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %40, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <4 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <4 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %45, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <4 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <4 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %48, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %47, <4 x double> %50) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %37, <4 x double> %52) #7
  %54 = fmul <4 x double> %31, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %54, <4 x double> %30) #7
  %56 = bitcast <16 x i8> %25 to <4 x i32>
  %57 = sitofp <4 x i32> %56 to <4 x double>
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %55) #7
  %59 = bitcast <4 x double> %58 to <4 x i64>
  %60 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %61 = xor <4 x i64> %60, %59
  %62 = bitcast <4 x i64> %61 to <4 x double>
  %63 = fcmp oeq <4 x double> %14, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %64 = fcmp oeq <4 x double> %1, zeroinitializer
  %65 = or <4 x i1> %63, %64
  %66 = sext <4 x i1> %65 to <4 x i64>
  %67 = or <4 x i64> %60, <i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %68
  %70 = select <4 x i1> %63, <4 x double> %69, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %71 = bitcast <4 x i64> %66 to <4 x double>
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> %70, <4 x double> %71) #7
  %73 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %74 = sext <4 x i1> %73 to <4 x i64>
  %75 = or <4 x i64> %60, <i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %76
  %78 = select <4 x i1> %63, <4 x double> %77, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %79 = bitcast <4 x i64> %74 to <4 x double>
  %80 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %72, <4 x double> %78, <4 x double> %79) #7
  %81 = fcmp oeq <4 x double> %0, zeroinitializer
  %82 = sext <4 x i1> %81 to <4 x i64>
  %83 = and <4 x i64> %7, <i64 4614256656552045848, i64 4614256656552045848, i64 4614256656552045848, i64 4614256656552045848>
  %84 = bitcast <4 x i64> %83 to <4 x double>
  %85 = bitcast <4 x i64> %82 to <4 x double>
  %86 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %80, <4 x double> %84, <4 x double> %85) #7
  %87 = fcmp uno <4 x double> %0, %1
  %88 = bitcast <4 x double> %86 to <4 x i64>
  %89 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = xor <4 x i64> %89, %88
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = select <4 x i1> %87, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %91
  ret <4 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atan2d4_u10avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 0x4000000000001, double 0x4000000000001, double 0x4000000000001, double 0x4000000000001>, i8 17) #7
  %7 = fmul <4 x double> %1, <double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %7, <4 x double> %6) #7
  %9 = fmul <4 x double> %0, <double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %9, <4 x double> %6) #7
  %11 = bitcast <4 x double> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = bitcast <4 x double> %8 to <4 x i64>
  %15 = ashr <4 x i64> %14, <i64 63, i64 63, i64 63, i64 63>
  %16 = bitcast <4 x i64> %15 to <8 x i32>
  %17 = shufflevector <8 x i32> %16, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = bitcast <8 x i32> %17 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = and <2 x i64> %19, <i64 -4294967298, i64 -4294967298>
  %21 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> zeroinitializer, i8 17) #7
  %22 = bitcast <4 x double> %21 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = xor <4 x i64> %23, %14
  %25 = bitcast <4 x i64> %24 to <4 x double>
  %26 = bitcast <4 x i64> %23 to <4 x double>
  %27 = bitcast <2 x i64> %20 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %25, <4 x double> %13, i8 17) #7
  %30 = bitcast <4 x double> %29 to <8 x i32>
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <8 x i32> %31 to <4 x i64>
  %33 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = bitcast <2 x i64> %20 to <16 x i8>
  %35 = bitcast <4 x i32> %28 to <16 x i8>
  %36 = bitcast <2 x i64> %33 to <16 x i8>
  %37 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> %35, <16 x i8> %36) #7
  %38 = xor <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %39 = xor <4 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = bitcast <4 x i64> %38 to <4 x double>
  %41 = bitcast <4 x i64> %39 to <4 x double>
  %42 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %13, <4 x double> %40, <4 x double> %29) #7
  %43 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %41, <4 x double> %29) #7
  %44 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> %13, <4 x double> %29) #7
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %26, <4 x double> zeroinitializer, <4 x double> %29) #7
  %46 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %44
  %47 = fmul <4 x double> %42, %46
  %48 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %47
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %42, <4 x double> %48) #7
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %44
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %46, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %46, <4 x double> %51) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %46, <4 x double> %49) #7
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %53, <4 x double> %54) #7
  %56 = fmul <4 x double> %47, %47
  %57 = fadd <4 x double> %47, %47
  %58 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %56
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %47, <4 x double> %58) #7
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %55, <4 x double> %59) #7
  %61 = fadd <4 x double> %56, %60
  %62 = fsub <4 x double> %56, %61
  %63 = fadd <4 x double> %60, %62
  %64 = fmul <4 x double> %61, %61
  %65 = fmul <4 x double> %64, %64
  %66 = fmul <4 x double> %65, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <4 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #7
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <4 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %67, <4 x double> %68) #7
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <4 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #7
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <4 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #7
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %70, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %69, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <4 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #7
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <4 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #7
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %74, <4 x double> %75) #7
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <4 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #7
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <4 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #7
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %77, <4 x double> %78) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %76, <4 x double> %79) #7
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %73, <4 x double> %80) #7
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %81, <4 x double> %61, <4 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #7
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %61, <4 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %61, <4 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #7
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %84, <4 x double> %61, <4 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A>) #7
  %86 = fmul <4 x double> %47, %61
  %87 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %86
  %88 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %61, <4 x double> %87) #7
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %61, <4 x double> %88) #7
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %63, <4 x double> %89) #7
  %91 = fmul <4 x double> %86, %85
  %92 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %91
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %85, <4 x double> %92) #7
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %85, <4 x double> %93) #7
  %95 = fadd <4 x double> %47, %91
  %96 = fsub <4 x double> %47, %95
  %97 = fadd <4 x double> %91, %96
  %98 = fadd <4 x double> %55, %97
  %99 = fadd <4 x double> %98, %94
  %100 = bitcast <16 x i8> %37 to <4 x i32>
  %101 = sitofp <4 x i32> %100 to <4 x double>
  %102 = fmul <4 x double> %101, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %103 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %102
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %101, <4 x double> %103) #7
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <4 x double> %101, <4 x double> %104) #7
  %106 = fadd <4 x double> %102, %95
  %107 = fsub <4 x double> %102, %106
  %108 = fadd <4 x double> %95, %107
  %109 = fadd <4 x double> %108, %105
  %110 = fadd <4 x double> %99, %109
  %111 = fadd <4 x double> %106, %110
  %112 = bitcast <4 x double> %111 to <4 x i64>
  %113 = and <4 x i64> %14, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %114 = xor <4 x i64> %113, %112
  %115 = bitcast <4 x i64> %114 to <4 x double>
  %116 = and <4 x i64> %14, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = fcmp oeq <4 x double> %117, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %119 = fcmp oeq <4 x double> %8, zeroinitializer
  %120 = or <4 x i1> %118, %119
  %121 = sext <4 x i1> %120 to <4 x i64>
  %122 = or <4 x i64> %113, <i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352>
  %123 = bitcast <4 x i64> %122 to <4 x double>
  %124 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %123
  %125 = select <4 x i1> %118, <4 x double> %124, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %126 = bitcast <4 x i64> %121 to <4 x double>
  %127 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %115, <4 x double> %125, <4 x double> %126) #7
  %128 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %129 = sext <4 x i1> %128 to <4 x i64>
  %130 = or <4 x i64> %113, <i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856>
  %131 = bitcast <4 x i64> %130 to <4 x double>
  %132 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %131
  %133 = select <4 x i1> %118, <4 x double> %132, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %134 = bitcast <4 x i64> %129 to <4 x double>
  %135 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %127, <4 x double> %133, <4 x double> %134) #7
  %136 = fcmp oeq <4 x double> %10, zeroinitializer
  %137 = sext <4 x i1> %136 to <4 x i64>
  %138 = and <4 x i64> %15, <i64 4614256656552045848, i64 4614256656552045848, i64 4614256656552045848, i64 4614256656552045848>
  %139 = bitcast <4 x i64> %138 to <4 x double>
  %140 = bitcast <4 x i64> %137 to <4 x double>
  %141 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %135, <4 x double> %139, <4 x double> %140) #7
  %142 = fcmp uno <4 x double> %10, %8
  %143 = bitcast <4 x double> %141 to <4 x i64>
  %144 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %145 = xor <4 x i64> %144, %143
  %146 = bitcast <4 x i64> %145 to <4 x double>
  %147 = select <4 x i1> %142, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %146
  ret <4 x double> %147
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asind4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = fmul <4 x double> %0, %0
  %7 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <4 x double> %7, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> %5) #7
  %10 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %9) #7
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %4, <4 x double> %5) #7
  %12 = fmul <4 x double> %9, %9
  %13 = fmul <4 x double> %12, %12
  %14 = fmul <4 x double> %13, %13
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %18, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %21, <4 x double> %22) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %23) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %17, <4 x double> %24) #7
  %26 = fmul <4 x double> %9, %11
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %26, <4 x double> %11) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>) #7
  %29 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> %27, <4 x double> %5) #7
  %30 = bitcast <4 x double> %29 to <4 x i64>
  %31 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = xor <4 x i64> %31, %30
  %33 = bitcast <4 x i64> %32 to <4 x double>
  ret <4 x double> %33
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asind4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = fmul <4 x double> %0, %0
  %7 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <4 x double> %7, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> %5) #7
  %10 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %9) #7
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #7
  %14 = fadd <4 x double> %9, %11
  %15 = fsub <4 x double> %14, %9
  %16 = fsub <4 x double> %14, %15
  %17 = fsub <4 x double> %9, %16
  %18 = fsub <4 x double> %11, %15
  %19 = fadd <4 x double> %18, %17
  %20 = fadd <4 x double> %13, %19
  %21 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %10
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %10
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %24 = fmul <4 x double> %21, %23
  %25 = fmul <4 x double> %21, %14
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %21, <4 x double> %26) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %21, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <4 x double> %29, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %30, <4 x double> %4, <4 x double> %5) #7
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %31, <4 x double> zeroinitializer, <4 x double> %5) #7
  %34 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #7
  %39 = fmul <4 x double> %9, %9
  %40 = fmul <4 x double> %39, %39
  %41 = fmul <4 x double> %40, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %42, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %45, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %48, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %47, <4 x double> %50) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %44, <4 x double> %51) #7
  %53 = fmul <4 x double> %9, %37
  %54 = fmul <4 x double> %53, %52
  %55 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %37
  %56 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %55
  %57 = fsub <4 x double> %56, %37
  %58 = fadd <4 x double> %57, <double 0x3C81A62633145C07, double 0x3C81A62633145C07, double 0x3C81A62633145C07, double 0x3C81A62633145C07>
  %59 = fsub <4 x double> %58, %38
  %60 = fsub <4 x double> %55, %54
  %61 = fsub <4 x double> %55, %60
  %62 = fsub <4 x double> %61, %54
  %63 = fadd <4 x double> %59, %62
  %64 = fadd <4 x double> %37, %54
  %65 = fadd <4 x double> %60, %63
  %66 = fmul <4 x double> %65, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> %64, <4 x double> %5) #7
  %68 = bitcast <4 x double> %67 to <4 x i64>
  %69 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = xor <4 x i64> %69, %68
  %71 = bitcast <4 x i64> %70 to <4 x double>
  ret <4 x double> %71
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acosd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %0, %0
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <4 x double> %8, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %7, <4 x double> %5) #7
  %11 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %10) #7
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %4, <4 x double> %5) #7
  %13 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = sext <4 x i1> %13 to <4 x i64>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> zeroinitializer, <4 x double> %15) #7
  %17 = fmul <4 x double> %10, %10
  %18 = fmul <4 x double> %17, %17
  %19 = fmul <4 x double> %18, %18
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %20, <4 x double> %21) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %23, <4 x double> %24) #7
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %26, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %22, <4 x double> %29) #7
  %31 = fmul <4 x double> %10, %16
  %32 = fmul <4 x double> %31, %30
  %33 = bitcast <4 x double> %16 to <4 x i64>
  %34 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = xor <4 x i64> %34, %33
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = bitcast <4 x double> %32 to <4 x i64>
  %38 = xor <4 x i64> %34, %37
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = fadd <4 x double> %36, %39
  %41 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %40
  %42 = fadd <4 x double> %16, %32
  %43 = fmul <4 x double> %42, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %44 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %43, <4 x double> %41, <4 x double> %5) #7
  %45 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %46 = bitcast <4 x double> %45 to <4 x i64>
  %47 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %46, %47
  %49 = bitcast <4 x double> %44 to <4 x i64>
  %50 = xor <4 x i64> %49, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %51 = bitcast <4 x i64> %50 to <4 x double>
  %52 = fadd <4 x double> %51, <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>
  %53 = bitcast <4 x i64> %48 to <4 x double>
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> %52, <4 x double> %53) #7
  ret <4 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acosd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %0, %0
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <4 x double> %8, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %7, <4 x double> %5) #7
  %11 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %10) #7
  %12 = fmul <4 x double> %11, %11
  %13 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> %13) #7
  %15 = fadd <4 x double> %10, %12
  %16 = fsub <4 x double> %15, %10
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %10, %17
  %19 = fsub <4 x double> %12, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %14, %20
  %22 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %11
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %22, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fmul <4 x double> %22, %24
  %26 = fmul <4 x double> %22, %15
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %22, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %22, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %25, <4 x double> %29) #7
  %31 = fmul <4 x double> %26, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %31, <4 x double> %4, <4 x double> %5) #7
  %34 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %5) #7
  %35 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %36 = sext <4 x i1> %35 to <4 x i64>
  %37 = bitcast <4 x i64> %36 to <4 x double>
  %38 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %34, <4 x double> zeroinitializer, <4 x double> %37) #7
  %40 = fmul <4 x double> %10, %10
  %41 = fmul <4 x double> %40, %40
  %42 = fmul <4 x double> %41, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %43, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %46, <4 x double> %47) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %49, <4 x double> %50) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %48, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %45, <4 x double> %52) #7
  %54 = fmul <4 x double> %10, %38
  %55 = fmul <4 x double> %54, %53
  %56 = bitcast <4 x double> %38 to <4 x i64>
  %57 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <4 x i64> %57, %56
  %59 = bitcast <4 x i64> %58 to <4 x double>
  %60 = bitcast <4 x double> %55 to <4 x i64>
  %61 = xor <4 x i64> %57, %60
  %62 = bitcast <4 x i64> %61 to <4 x double>
  %63 = fadd <4 x double> %59, %62
  %64 = fsub <4 x double> %59, %63
  %65 = fadd <4 x double> %64, %62
  %66 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %63
  %67 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %66
  %68 = fsub <4 x double> %67, %63
  %69 = fadd <4 x double> %68, <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %70 = fsub <4 x double> %69, %65
  %71 = fadd <4 x double> %38, %55
  %72 = fsub <4 x double> %38, %71
  %73 = fadd <4 x double> %55, %72
  %74 = fadd <4 x double> %39, %73
  %75 = fmul <4 x double> %71, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fmul <4 x double> %74, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %75, <4 x double> %66, <4 x double> %5) #7
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %76, <4 x double> %70, <4 x double> %5) #7
  %79 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %80 = bitcast <4 x double> %79 to <4 x i64>
  %81 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %82 = and <4 x i64> %80, %81
  %83 = fsub <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, %77
  %84 = fsub <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, %83
  %85 = fsub <4 x double> %84, %77
  %86 = fadd <4 x double> %85, <double 0x3CA1A62633145C07, double 0x3CA1A62633145C07, double 0x3CA1A62633145C07, double 0x3CA1A62633145C07>
  %87 = fsub <4 x double> %86, %78
  %88 = bitcast <4 x i64> %82 to <4 x double>
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> %83, <4 x double> %88) #7
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> %87, <4 x double> %88) #7
  %91 = fadd <4 x double> %89, %90
  ret <4 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atand4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> zeroinitializer, i8 17) #7
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %8 = or <4 x i64> %7, <i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408>
  %9 = bitcast <4 x i64> %8 to <4 x double>
  %10 = bitcast <4 x i64> %7 to <4 x double>
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> %4, i8 17) #7
  %12 = bitcast <4 x double> %11 to <8 x i32>
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> %16) #7
  %18 = xor <4 x i64> %7, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %19 = xor <4 x i64> %7, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <4 x i64> %18 to <4 x double>
  %21 = bitcast <4 x i64> %19 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %20, <4 x double> %11) #7
  %23 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %21, <4 x double> %11) #7
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %4, <4 x double> %11) #7
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> zeroinitializer, <4 x double> %11) #7
  %26 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %24
  %27 = fmul <4 x double> %22, %26
  %28 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %22, <4 x double> %28) #7
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %24
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %26, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %26, <4 x double> %31) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %26, <4 x double> %29) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %33, <4 x double> %34) #7
  %36 = fmul <4 x double> %27, %27
  %37 = fadd <4 x double> %27, %27
  %38 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %36
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %27, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %35, <4 x double> %39) #7
  %41 = fadd <4 x double> %36, %40
  %42 = fsub <4 x double> %36, %41
  %43 = fadd <4 x double> %40, %42
  %44 = fmul <4 x double> %41, %41
  %45 = fmul <4 x double> %44, %44
  %46 = fmul <4 x double> %45, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <4 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <4 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %47, <4 x double> %48) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <4 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <4 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %50, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %49, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <4 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #7
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <4 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %54, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <4 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <4 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #7
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %57, <4 x double> %58) #7
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %56, <4 x double> %59) #7
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %53, <4 x double> %60) #7
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %41, <4 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %41, <4 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> %41, <4 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %41, <4 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A>) #7
  %66 = fmul <4 x double> %27, %41
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %66
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %41, <4 x double> %67) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %41, <4 x double> %68) #7
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %43, <4 x double> %69) #7
  %71 = fmul <4 x double> %66, %65
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %65, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %65, <4 x double> %73) #7
  %75 = fadd <4 x double> %27, %71
  %76 = fsub <4 x double> %27, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %35, %77
  %79 = fadd <4 x double> %78, %74
  %80 = bitcast <16 x i8> %17 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %81, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %81, <4 x double> %83) #7
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <4 x double> %81, <4 x double> %84) #7
  %86 = fadd <4 x double> %82, %75
  %87 = fsub <4 x double> %82, %86
  %88 = fadd <4 x double> %75, %87
  %89 = fadd <4 x double> %88, %85
  %90 = fadd <4 x double> %79, %89
  %91 = fadd <4 x double> %86, %90
  %92 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %93 = sext <4 x i1> %92 to <4 x i64>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %94) #7
  %96 = bitcast <4 x double> %95 to <4 x i64>
  %97 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %98 = xor <4 x i64> %97, %96
  %99 = bitcast <4 x i64> %98 to <4 x double>
  ret <4 x double> %99
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atand4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = ashr <4 x i64> %2, <i64 63, i64 63, i64 63, i64 63>
  %4 = bitcast <4 x i64> %3 to <8 x i32>
  %5 = shufflevector <8 x i32> %4, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = and <2 x i64> %7, <i64 8589934594, i64 8589934594>
  %9 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %10 = bitcast <4 x i64> %9 to <4 x double>
  %11 = bitcast <2 x i64> %8 to <4 x i32>
  %12 = add <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %10, i8 17) #7
  %14 = bitcast <4 x double> %13 to <8 x i32>
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = bitcast <2 x i64> %8 to <16 x i8>
  %19 = bitcast <4 x i32> %12 to <16 x i8>
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %18, <16 x i8> %19, <16 x i8> %20) #7
  %22 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %10
  %23 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %22, <4 x double> %13) #7
  %24 = fmul <4 x double> %23, %23
  %25 = fmul <4 x double> %24, %24
  %26 = fmul <4 x double> %25, %25
  %27 = fmul <4 x double> %26, %26
  %28 = fmul <4 x double> %27, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <4 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #7
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <4 x double> %29) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <4 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #7
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <4 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #7
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %31, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <4 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <4 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %34, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %33, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <4 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <4 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %38, <4 x double> %39) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <4 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <4 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %41, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %40, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %37, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %30, <4 x double> %45) #7
  %47 = fmul <4 x double> %24, %46
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %47, <4 x double> %23) #7
  %49 = bitcast <16 x i8> %21 to <4 x i32>
  %50 = and <4 x i32> %49, <i32 1, i32 1, i32 1, i32 1>
  %51 = icmp ne <4 x i32> %50, zeroinitializer
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %55 = bitcast <4 x i64> %54 to <8 x i32>
  %56 = shufflevector <8 x i32> %55, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %57 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %48
  %58 = bitcast <8 x i32> %56 to <4 x double>
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %48, <4 x double> %57, <4 x double> %58) #7
  %60 = and <4 x i32> %49, <i32 2, i32 2, i32 2, i32 2>
  %61 = icmp ne <4 x i32> %60, zeroinitializer
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = shufflevector <8 x i32> %65, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %67 = bitcast <8 x i32> %66 to <4 x i64>
  %68 = and <4 x i64> %67, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %69 = bitcast <4 x double> %59 to <4 x i64>
  %70 = xor <4 x i64> %68, %69
  %71 = bitcast <4 x i64> %70 to <4 x double>
  ret <4 x double> %71
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_logd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fdiv <4 x double> %37, %38
  %40 = fmul <4 x double> %39, %39
  %41 = fmul <4 x double> %40, %40
  %42 = fmul <4 x double> %41, %41
  %43 = fmul <4 x double> %39, %40
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <4 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <4 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <4 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F>) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %46, <4 x double> %47) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %45, <4 x double> %48) #7
  %50 = bitcast <16 x i8> %36 to <4 x i32>
  %51 = sitofp <4 x i32> %50 to <4 x double>
  %52 = fmul <4 x double> %51, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %49, <4 x double> %53) #7
  %55 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %56 = sext <4 x i1> %55 to <4 x i64>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %60 = fcmp uno <4 x double> %4, zeroinitializer
  %61 = select <4 x i1> %60, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %59
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %58, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %61) #7
  %63 = fcmp oeq <4 x double> %4, zeroinitializer
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = bitcast <4 x i64> %64 to <4 x double>
  %66 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %65) #7
  ret <4 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_expd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #7
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %0) #7
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %5) #7
  %7 = fmul <4 x double> %6, %6
  %8 = fmul <4 x double> %7, %7
  %9 = fmul <4 x double> %8, %8
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %11, <4 x double> %12) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %14, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %13, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %10, <4 x double> %17) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %6, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %22 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %23 = add nsw <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = zext <4 x i32> %23 to <4 x i64>
  %25 = shl nuw <4 x i64> %24, <i64 32, i64 32, i64 32, i64 32>
  %26 = bitcast <4 x i64> %25 to <8 x i32>
  %27 = shl <8 x i32> %26, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %28 = bitcast <8 x i32> %27 to <4 x double>
  %29 = fmul <4 x double> %21, %28
  %30 = add <4 x i32> %4, <i32 1023, i32 1023, i32 1023, i32 1023>
  %31 = sub <4 x i32> %30, %22
  %32 = zext <4 x i32> %31 to <4 x i64>
  %33 = shl nuw <4 x i64> %32, <i64 32, i64 32, i64 32, i64 32>
  %34 = bitcast <4 x i64> %33 to <8 x i32>
  %35 = shl <8 x i32> %34, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <8 x i32> %35 to <4 x double>
  %37 = fmul <4 x double> %29, %36
  %38 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %37, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %41 = bitcast <4 x double> %40 to <4 x i64>
  %42 = bitcast <4 x double> %39 to <4 x i64>
  %43 = xor <4 x i64> %41, <i64 -1, i64 -1, i64 -1, i64 -1>
  %44 = and <4 x i64> %43, %42
  %45 = bitcast <4 x i64> %44 to <4 x double>
  ret <4 x double> %45
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_logd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %69, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %69, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %69, <4 x double> %72) #7
  %74 = fmul <4 x double> %50, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %75 = fmul <4 x double> %58, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fadd <4 x double> %70, %74
  %77 = fsub <4 x double> %70, %76
  %78 = fadd <4 x double> %74, %77
  %79 = fadd <4 x double> %73, %78
  %80 = fadd <4 x double> %75, %79
  %81 = fmul <4 x double> %50, %59
  %82 = fmul <4 x double> %67, %81
  %83 = fadd <4 x double> %76, %82
  %84 = fsub <4 x double> %76, %83
  %85 = fadd <4 x double> %82, %84
  %86 = fadd <4 x double> %85, %80
  %87 = fadd <4 x double> %83, %86
  %88 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %89 = sext <4 x i1> %88 to <4 x i64>
  %90 = bitcast <4 x i64> %89 to <4 x double>
  %91 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %90) #7
  %92 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %93 = fcmp uno <4 x double> %4, zeroinitializer
  %94 = select <4 x i1> %93, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %92
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %94) #7
  %96 = fcmp oeq <4 x double> %4, zeroinitializer
  %97 = sext <4 x i1> %96 to <4 x i64>
  %98 = bitcast <4 x i64> %97 to <4 x double>
  %99 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %95, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %98) #7
  ret <4 x double> %99
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_powd4_u10avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %1, i32 11) #7
  %4 = fcmp oeq <4 x double> %3, %1
  %5 = sext <4 x i1> %4 to <4 x i64>
  %6 = fmul <4 x double> %1, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 11) #7
  %8 = fcmp une <4 x double> %7, %6
  %9 = and <4 x i1> %8, %4
  %10 = sext <4 x i1> %9 to <4 x i64>
  %11 = bitcast <4 x double> %0 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %15 = fmul <4 x double> %13, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %16 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %13, <4 x double> %15, <4 x double> %14) #7
  %17 = fmul <4 x double> %16, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %18 = bitcast <4 x double> %17 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %22 = bitcast <4 x float> %21 to <2 x i64>
  %23 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = bitcast <2 x i64> %23 to <4 x float>
  %25 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %24, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %26 = bitcast <4 x float> %25 to <2 x i64>
  %27 = or <2 x i64> %26, %22
  %28 = bitcast <2 x i64> %27 to <4 x i32>
  %29 = lshr <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %30 = and <4 x i32> %29, <i32 2047, i32 2047, i32 2047, i32 2047>
  %31 = add nsw <4 x i32> %30, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %32 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %30
  %33 = zext <4 x i32> %32 to <4 x i64>
  %34 = shl nuw <4 x i64> %33, <i64 32, i64 32, i64 32, i64 32>
  %35 = bitcast <4 x i64> %34 to <8 x i32>
  %36 = shl <8 x i32> %35, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x double> %16 to <8 x i32>
  %38 = add <8 x i32> %36, %37
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = bitcast <4 x double> %14 to <8 x i32>
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = add nsw <4 x i32> %30, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %45 = bitcast <4 x i32> %31 to <16 x i8>
  %46 = bitcast <4 x i32> %43 to <16 x i8>
  %47 = bitcast <2 x i64> %44 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #7
  %49 = fadd <4 x double> %39, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %39, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %39, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %39, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #7
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #7
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #7
  %71 = fmul <4 x double> %62, %62
  %72 = fadd <4 x double> %62, %62
  %73 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %62, <4 x double> %73) #7
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %70, <4 x double> %74) #7
  %76 = fmul <4 x double> %71, %71
  %77 = fmul <4 x double> %76, %76
  %78 = fmul <4 x double> %77, %77
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11>, <4 x double> <double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A>) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC110F384A1865C, double 0x3FC110F384A1865C, double 0x3FC110F384A1865C, double 0x3FC110F384A1865C>, <4 x double> <double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1>) #7
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %76, <4 x double> %79, <4 x double> %80) #7
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1>, <4 x double> <double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F>) #7
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FD2492492492200, double 0x3FD2492492492200, double 0x3FD2492492492200, double 0x3FD2492492492200>, <4 x double> <double 0x3FD999999999999B, double 0x3FD999999999999B, double 0x3FD999999999999B, double 0x3FD999999999999B>) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %76, <4 x double> %82, <4 x double> %83) #7
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %81, <4 x double> %84) #7
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> <double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3>, <4 x double> %85) #7
  %87 = bitcast <16 x i8> %48 to <4 x i32>
  %88 = sitofp <4 x i32> %87 to <4 x double>
  %89 = fmul <4 x double> %88, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %89
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %88, <4 x double> %90) #7
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %88, <4 x double> %91) #7
  %93 = fmul <4 x double> %62, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %94 = fmul <4 x double> %70, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %95 = fadd <4 x double> %89, %93
  %96 = fsub <4 x double> %89, %95
  %97 = fadd <4 x double> %93, %96
  %98 = fadd <4 x double> %92, %97
  %99 = fadd <4 x double> %94, %98
  %100 = fmul <4 x double> %62, %71
  %101 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %100
  %102 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %62, <4 x double> %101) #7
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %62, <4 x double> %102) #7
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %70, <4 x double> %103) #7
  %105 = fmul <4 x double> %100, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %106 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double> %106) #7
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %104, <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double> %107) #7
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> <double 0x3C85F00000000000, double 0x3C85F00000000000, double 0x3C85F00000000000, double 0x3C85F00000000000>, <4 x double> %108) #7
  %110 = fadd <4 x double> %95, %105
  %111 = fsub <4 x double> %95, %110
  %112 = fadd <4 x double> %105, %111
  %113 = fadd <4 x double> %112, %99
  %114 = fadd <4 x double> %109, %113
  %115 = fmul <4 x double> %71, %100
  %116 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %115
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %100, <4 x double> %116) #7
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %100, <4 x double> %117) #7
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %104, <4 x double> %118) #7
  %120 = fmul <4 x double> %86, %115
  %121 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> %86, <4 x double> %121) #7
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %119, <4 x double> %86, <4 x double> %122) #7
  %124 = fadd <4 x double> %110, %120
  %125 = fsub <4 x double> %110, %124
  %126 = fadd <4 x double> %120, %125
  %127 = fadd <4 x double> %126, %114
  %128 = fadd <4 x double> %127, %123
  %129 = fmul <4 x double> %124, %1
  %130 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %129
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %1, <4 x double> %130) #7
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %1, <4 x double> %131) #7
  %133 = fadd <4 x double> %129, %132
  %134 = fmul <4 x double> %133, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %135 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %134, i32 8) #7
  %136 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %135) #7
  %137 = fmul <4 x double> %135, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %138 = fadd <4 x double> %129, %137
  %139 = fsub <4 x double> %138, %129
  %140 = fsub <4 x double> %138, %139
  %141 = fsub <4 x double> %129, %140
  %142 = fsub <4 x double> %137, %139
  %143 = fadd <4 x double> %142, %141
  %144 = fadd <4 x double> %132, %143
  %145 = fmul <4 x double> %135, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %146 = fadd <4 x double> %145, %138
  %147 = fsub <4 x double> %146, %138
  %148 = fsub <4 x double> %146, %147
  %149 = fsub <4 x double> %138, %148
  %150 = fsub <4 x double> %145, %147
  %151 = fadd <4 x double> %150, %149
  %152 = fadd <4 x double> %151, %144
  %153 = fadd <4 x double> %146, %152
  %154 = fsub <4 x double> %146, %153
  %155 = fadd <4 x double> %152, %154
  %156 = fmul <4 x double> %153, %153
  %157 = fmul <4 x double> %156, %156
  %158 = fmul <4 x double> %157, %157
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> <double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9>, <4 x double> <double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD>) #7
  %160 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> <double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E>, <4 x double> <double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B>) #7
  %161 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> <double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D>, <4 x double> <double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B>) #7
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %160, <4 x double> %161) #7
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> <double 0x3F8111111110FB68, double 0x3F8111111110FB68, double 0x3F8111111110FB68, double 0x3F8111111110FB68>, <4 x double> <double 0x3FA5555555550E90, double 0x3FA5555555550E90, double 0x3FA5555555550E90, double 0x3FA5555555550E90>) #7
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> <double 0x3FC5555555555558, double 0x3FC5555555555558, double 0x3FC5555555555558, double 0x3FC5555555555558>, <4 x double> <double 0x3FE0000000000009, double 0x3FE0000000000009, double 0x3FE0000000000009, double 0x3FE0000000000009>) #7
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %163, <4 x double> %164) #7
  %166 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %157, <4 x double> %162, <4 x double> %165) #7
  %167 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %158, <4 x double> %159, <4 x double> %166) #7
  %168 = fadd <4 x double> %153, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %169 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %168
  %170 = fadd <4 x double> %153, %169
  %171 = fadd <4 x double> %155, %170
  %172 = fadd <4 x double> %153, %153
  %173 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %156
  %174 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %153, <4 x double> %173) #7
  %175 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %172, <4 x double> %155, <4 x double> %174) #7
  %176 = fmul <4 x double> %156, %167
  %177 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %176
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %167, <4 x double> %177) #7
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %175, <4 x double> %167, <4 x double> %178) #7
  %180 = fadd <4 x double> %168, %176
  %181 = fsub <4 x double> %168, %180
  %182 = fadd <4 x double> %176, %181
  %183 = fadd <4 x double> %171, %182
  %184 = fadd <4 x double> %179, %183
  %185 = fadd <4 x double> %180, %184
  %186 = ashr <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %187 = add nsw <4 x i32> %186, <i32 1023, i32 1023, i32 1023, i32 1023>
  %188 = zext <4 x i32> %187 to <4 x i64>
  %189 = shl nuw <4 x i64> %188, <i64 32, i64 32, i64 32, i64 32>
  %190 = bitcast <4 x i64> %189 to <8 x i32>
  %191 = shl <8 x i32> %190, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %192 = bitcast <8 x i32> %191 to <4 x double>
  %193 = fmul <4 x double> %185, %192
  %194 = add <4 x i32> %136, <i32 1023, i32 1023, i32 1023, i32 1023>
  %195 = sub <4 x i32> %194, %186
  %196 = zext <4 x i32> %195 to <4 x i64>
  %197 = shl nuw <4 x i64> %196, <i64 32, i64 32, i64 32, i64 32>
  %198 = bitcast <4 x i64> %197 to <8 x i32>
  %199 = shl <8 x i32> %198, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %200 = bitcast <8 x i32> %199 to <4 x double>
  %201 = fmul <4 x double> %193, %200
  %202 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %129, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %203 = bitcast <4 x double> %202 to <4 x i64>
  %204 = bitcast <4 x double> %201 to <4 x i64>
  %205 = xor <4 x i64> %203, <i64 -1, i64 -1, i64 -1, i64 -1>
  %206 = and <4 x i64> %204, %205
  %207 = bitcast <4 x i64> %206 to <4 x double>
  %208 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %129, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %209 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %207, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %208) #7
  %210 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 30) #7
  %211 = bitcast <4 x i64> %10 to <4 x double>
  %212 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %211) #7
  %213 = bitcast <4 x i64> %5 to <4 x double>
  %214 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %212, <4 x double> %213) #7
  %215 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %214, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %210) #7
  %216 = fmul <4 x double> %209, %215
  %217 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %218 = bitcast <4 x double> %217 to <4 x i64>
  %219 = bitcast <4 x double> %1 to <4 x i64>
  %220 = and <4 x i64> %219, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %221 = xor <4 x i64> %220, %218
  %222 = bitcast <4 x i64> %221 to <4 x double>
  %223 = and <4 x i64> %219, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %224 = bitcast <4 x i64> %223 to <4 x double>
  %225 = fcmp oeq <4 x double> %224, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %226 = sext <4 x i1> %225 to <4 x i64>
  %227 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %222, <4 x double> zeroinitializer, i8 17) #7
  %228 = bitcast <4 x double> %227 to <4 x i64>
  %229 = fcmp oeq <4 x double> %222, zeroinitializer
  %230 = sext <4 x i1> %229 to <4 x i64>
  %231 = bitcast <4 x i64> %230 to <4 x double>
  %232 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %231) #7
  %233 = bitcast <4 x double> %232 to <4 x i64>
  %234 = xor <4 x i64> %228, <i64 -1, i64 -1, i64 -1, i64 -1>
  %235 = and <4 x i64> %233, %234
  %236 = bitcast <4 x i64> %235 to <4 x double>
  %237 = bitcast <4 x i64> %226 to <4 x double>
  %238 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %216, <4 x double> %236, <4 x double> %237) #7
  %239 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %240 = fcmp oeq <4 x double> %0, zeroinitializer
  %241 = sext <4 x i1> %240 to <4 x i64>
  %242 = or <4 x i1> %239, %240
  %243 = sext <4 x i1> %242 to <4 x i64>
  %244 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %245 = or <4 x i64> %244, <i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408>
  %246 = bitcast <4 x i64> %245 to <4 x double>
  %247 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %246, <4 x double> %211) #7
  %248 = xor <4 x i64> %219, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %249 = bitcast <4 x i64> %248 to <4 x double>
  %250 = bitcast <4 x i64> %241 to <4 x double>
  %251 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %249, <4 x double> %250) #7
  %252 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %251, <4 x double> zeroinitializer, i8 17) #7
  %253 = bitcast <4 x double> %252 to <4 x i64>
  %254 = and <4 x i64> %253, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %255 = xor <4 x i64> %254, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %256 = bitcast <4 x i64> %255 to <4 x double>
  %257 = fmul <4 x double> %247, %256
  %258 = bitcast <4 x i64> %243 to <4 x double>
  %259 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %238, <4 x double> %257, <4 x double> %258) #7
  %260 = fcmp uno <4 x double> %1, %0
  %261 = select <4 x i1> %260, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %259
  %262 = fcmp oeq <4 x double> %1, zeroinitializer
  %263 = fcmp oeq <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %264 = or <4 x i1> %262, %263
  %265 = sext <4 x i1> %264 to <4 x i64>
  %266 = bitcast <4 x i64> %265 to <4 x double>
  %267 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %261, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %266) #7
  ret <4 x double> %267
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = fsub <4 x double> %105, %107
  %114 = fsub <4 x double> %105, %113
  %115 = fsub <4 x double> %114, %107
  %116 = fadd <4 x double> %115, %106
  %117 = fsub <4 x double> %116, %112
  %118 = fadd <4 x double> %113, %117
  %119 = fmul <4 x double> %118, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %120 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %121 = fcmp uno <4 x double> %119, zeroinitializer
  %122 = select <4 x i1> %121, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %120
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %122) #7
  %124 = bitcast <4 x double> %123 to <4 x i64>
  %125 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = xor <4 x i64> %125, %124
  %127 = fcmp uno <4 x double> %0, zeroinitializer
  %128 = bitcast <4 x i64> %126 to <4 x double>
  %129 = select <4 x i1> %127, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %128
  ret <4 x double> %129
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_coshd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = fadd <4 x double> %107, %105
  %114 = fsub <4 x double> %105, %113
  %115 = fadd <4 x double> %107, %114
  %116 = fadd <4 x double> %115, %106
  %117 = fadd <4 x double> %112, %116
  %118 = fadd <4 x double> %113, %117
  %119 = fmul <4 x double> %118, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %120 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %121 = fcmp uno <4 x double> %119, zeroinitializer
  %122 = select <4 x i1> %121, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %120
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %122) #7
  %124 = fcmp uno <4 x double> %0, zeroinitializer
  %125 = select <4 x i1> %124, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %123
  ret <4 x double> %125
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tanhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = bitcast <4 x double> %107 to <4 x i64>
  %114 = xor <4 x i64> %113, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %115 = bitcast <4 x double> %112 to <4 x i64>
  %116 = xor <4 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <4 x i64> %114 to <4 x double>
  %118 = bitcast <4 x i64> %116 to <4 x double>
  %119 = fadd <4 x double> %105, %117
  %120 = fsub <4 x double> %119, %105
  %121 = fsub <4 x double> %119, %120
  %122 = fsub <4 x double> %105, %121
  %123 = fsub <4 x double> %117, %120
  %124 = fadd <4 x double> %123, %122
  %125 = fadd <4 x double> %106, %118
  %126 = fadd <4 x double> %125, %124
  %127 = fadd <4 x double> %107, %105
  %128 = fsub <4 x double> %127, %105
  %129 = fsub <4 x double> %127, %128
  %130 = fsub <4 x double> %105, %129
  %131 = fsub <4 x double> %107, %128
  %132 = fadd <4 x double> %131, %130
  %133 = fadd <4 x double> %112, %106
  %134 = fadd <4 x double> %133, %132
  %135 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %127
  %136 = fmul <4 x double> %135, %119
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %119, <4 x double> %137) #7
  %139 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %139, <4 x double> %135, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %141 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %134
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %135, <4 x double> %140) #7
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %135, <4 x double> %138) #7
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %142, <4 x double> %143) #7
  %145 = fadd <4 x double> %144, %136
  %146 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %147 = fcmp uno <4 x double> %145, zeroinitializer
  %148 = select <4 x i1> %147, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %146
  %149 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %145, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %148) #7
  %150 = bitcast <4 x double> %149 to <4 x i64>
  %151 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = xor <4 x i64> %151, %150
  %153 = fcmp uno <4 x double> %0, zeroinitializer
  %154 = bitcast <4 x i64> %152 to <4 x double>
  %155 = select <4 x i1> %153, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %154
  ret <4 x double> %155
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinhd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #7
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #7
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #7
  %22 = fmul <4 x double> %9, %10
  %23 = fmul <4 x double> %22, %21
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %23) #7
  %25 = fadd <4 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = bitcast <4 x i64> %29 to <8 x i32>
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %32 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %33 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %34 = add nsw <4 x i32> %33, <i32 1023, i32 1023, i32 1023, i32 1023>
  %35 = zext <4 x i32> %34 to <4 x i64>
  %36 = shl nuw <4 x i64> %35, <i64 32, i64 32, i64 32, i64 32>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = shl <8 x i32> %37, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = fmul <4 x double> %32, %39
  %41 = add <4 x i32> %7, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = sub <4 x i32> %41, %33
  %43 = zext <4 x i32> %42 to <4 x i64>
  %44 = shl nuw <4 x i64> %43, <i64 32, i64 32, i64 32, i64 32>
  %45 = bitcast <4 x i64> %44 to <8 x i32>
  %46 = shl <8 x i32> %45, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %47 = bitcast <8 x i32> %46 to <4 x double>
  %48 = fmul <4 x double> %40, %47
  %49 = fadd <4 x double> %48, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = bitcast <8 x i32> %31 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %49, <4 x double> %25, <4 x double> %50) #7
  %52 = fadd <4 x double> %51, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %53 = fadd <4 x double> %51, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %54 = fdiv <4 x double> %52, %53
  %55 = fmul <4 x double> %51, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %56 = fmul <4 x double> %55, %54
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %58 = fcmp uno <4 x double> %56, zeroinitializer
  %59 = select <4 x i1> %58, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %57
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %59) #7
  %61 = bitcast <4 x double> %60 to <4 x i64>
  %62 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %63 = xor <4 x i64> %62, %61
  %64 = fcmp uno <4 x double> %0, zeroinitializer
  %65 = bitcast <4 x i64> %63 to <4 x double>
  %66 = select <4 x i1> %64, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %65
  ret <4 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_coshd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #7
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #7
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %9, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add nsw <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = zext <4 x i32> %26 to <4 x i64>
  %28 = shl nuw <4 x i64> %27, <i64 32, i64 32, i64 32, i64 32>
  %29 = bitcast <4 x i64> %28 to <8 x i32>
  %30 = shl <8 x i32> %29, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <8 x i32> %30 to <4 x double>
  %32 = fmul <4 x double> %24, %31
  %33 = add <4 x i32> %7, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = sub <4 x i32> %33, %25
  %35 = zext <4 x i32> %34 to <4 x i64>
  %36 = shl nuw <4 x i64> %35, <i64 32, i64 32, i64 32, i64 32>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = shl <8 x i32> %37, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = fmul <4 x double> %32, %39
  %41 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %42 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %44 = bitcast <4 x double> %43 to <4 x i64>
  %45 = bitcast <4 x double> %42 to <4 x i64>
  %46 = xor <4 x i64> %44, <i64 -1, i64 -1, i64 -1, i64 -1>
  %47 = and <4 x i64> %46, %45
  %48 = bitcast <4 x i64> %47 to <4 x double>
  %49 = fdiv <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %48, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %52 = fcmp uno <4 x double> %50, zeroinitializer
  %53 = select <4 x i1> %52, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %51
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %53) #7
  %55 = fcmp uno <4 x double> %0, zeroinitializer
  %56 = select <4 x i1> %55, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %54
  ret <4 x double> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tanhd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %5) #7
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %9) #7
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = fmul <4 x double> %12, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %15, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %20) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %14, <4 x double> %21) #7
  %23 = fmul <4 x double> %10, %11
  %24 = fmul <4 x double> %23, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %24) #7
  %26 = fadd <4 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %33 = fadd <4 x double> %26, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %34 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %35 = add nsw <4 x i32> %34, <i32 1023, i32 1023, i32 1023, i32 1023>
  %36 = zext <4 x i32> %35 to <4 x i64>
  %37 = shl nuw <4 x i64> %36, <i64 32, i64 32, i64 32, i64 32>
  %38 = bitcast <4 x i64> %37 to <8 x i32>
  %39 = shl <8 x i32> %38, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %40 = bitcast <8 x i32> %39 to <4 x double>
  %41 = fmul <4 x double> %33, %40
  %42 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = sub <4 x i32> %42, %34
  %44 = zext <4 x i32> %43 to <4 x i64>
  %45 = shl nuw <4 x i64> %44, <i64 32, i64 32, i64 32, i64 32>
  %46 = bitcast <4 x i64> %45 to <8 x i32>
  %47 = shl <8 x i32> %46, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <8 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %41, %48
  %50 = fadd <4 x double> %49, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %51 = bitcast <8 x i32> %32 to <4 x double>
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %26, <4 x double> %51) #7
  %53 = fadd <4 x double> %52, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %54 = fdiv <4 x double> %52, %53
  %55 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %56 = fcmp uno <4 x double> %54, zeroinitializer
  %57 = select <4 x i1> %56, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %55
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %57) #7
  %59 = bitcast <4 x double> %58 to <4 x i64>
  %60 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %61 = xor <4 x i64> %60, %59
  %62 = fcmp uno <4 x double> %0, zeroinitializer
  %63 = bitcast <4 x i64> %61 to <4 x double>
  %64 = select <4 x i1> %62, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %63
  ret <4 x double> %64
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asinhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %6 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %0
  %7 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %0
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %9 = fmul <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %9, <4 x double> %5) #7
  %12 = fmul <4 x double> %10, %10
  %13 = fadd <4 x double> %10, %10
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> %15) #7
  %17 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = fsub <4 x double> %17, %12
  %19 = fsub <4 x double> %17, %18
  %20 = fsub <4 x double> %12, %19
  %21 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %18
  %22 = fadd <4 x double> %21, %20
  %23 = fadd <4 x double> %16, %22
  %24 = fadd <4 x double> %17, %23
  %25 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %24) #7
  %26 = fmul <4 x double> %25, %25
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %27) #7
  %29 = fadd <4 x double> %17, %26
  %30 = fsub <4 x double> %29, %17
  %31 = fsub <4 x double> %29, %30
  %32 = fsub <4 x double> %17, %31
  %33 = fsub <4 x double> %26, %30
  %34 = fadd <4 x double> %33, %32
  %35 = fadd <4 x double> %28, %23
  %36 = fadd <4 x double> %35, %34
  %37 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %25
  %38 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %37, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %40 = fmul <4 x double> %37, %39
  %41 = fmul <4 x double> %37, %29
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %37, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %37, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %40, <4 x double> %44) #7
  %46 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fmul <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = fmul <4 x double> %46, %4
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %4, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %4, <4 x double> %50) #7
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> %48, <4 x double> %5) #7
  %53 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %47, <4 x double> %51, <4 x double> %5) #7
  %54 = fadd <4 x double> %52, %0
  %55 = fsub <4 x double> %54, %52
  %56 = fsub <4 x double> %54, %55
  %57 = fsub <4 x double> %52, %56
  %58 = fsub <4 x double> %0, %55
  %59 = fadd <4 x double> %58, %57
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %54, %60
  %62 = fsub <4 x double> %54, %61
  %63 = fadd <4 x double> %60, %62
  %64 = fmul <4 x double> %61, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %65 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %64, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %66 = fmul <4 x double> %64, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> %66, <4 x double> %65) #7
  %68 = bitcast <4 x double> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = bitcast <2 x i64> %69 to <4 x float>
  %71 = shufflevector <4 x float> %70, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %72 = bitcast <4 x float> %71 to <2 x i64>
  %73 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = bitcast <2 x i64> %73 to <4 x float>
  %75 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %74, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %76 = bitcast <4 x float> %75 to <2 x i64>
  %77 = or <2 x i64> %76, %72
  %78 = bitcast <2 x i64> %77 to <4 x i32>
  %79 = lshr <4 x i32> %78, <i32 20, i32 20, i32 20, i32 20>
  %80 = bitcast <4 x double> %65 to <8 x i32>
  %81 = shufflevector <8 x i32> %80, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %84) #7
  %86 = bitcast <16 x i8> %85 to <4 x i32>
  %87 = sub <4 x i32> %79, %86
  %88 = sub <4 x i32> zeroinitializer, %87
  %89 = ashr <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %90 = add nsw <4 x i32> %89, <i32 1023, i32 1023, i32 1023, i32 1023>
  %91 = zext <4 x i32> %90 to <4 x i64>
  %92 = shl nuw <4 x i64> %91, <i64 32, i64 32, i64 32, i64 32>
  %93 = bitcast <4 x i64> %92 to <8 x i32>
  %94 = shl <8 x i32> %93, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %95 = bitcast <8 x i32> %94 to <4 x double>
  %96 = fmul <4 x double> %61, %95
  %97 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %87
  %98 = sub <4 x i32> %97, %89
  %99 = zext <4 x i32> %98 to <4 x i64>
  %100 = shl nuw <4 x i64> %99, <i64 32, i64 32, i64 32, i64 32>
  %101 = bitcast <4 x i64> %100 to <8 x i32>
  %102 = shl <8 x i32> %101, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <8 x i32> %102 to <4 x double>
  %104 = fmul <4 x double> %96, %103
  %105 = fmul <4 x double> %63, %95
  %106 = fmul <4 x double> %105, %103
  %107 = fadd <4 x double> %104, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %108 = fsub <4 x double> %107, %104
  %109 = fsub <4 x double> %107, %108
  %110 = fsub <4 x double> %104, %109
  %111 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %108
  %112 = fadd <4 x double> %111, %110
  %113 = fadd <4 x double> %106, %112
  %114 = fadd <4 x double> %104, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %115 = fsub <4 x double> %114, %104
  %116 = fsub <4 x double> %114, %115
  %117 = fsub <4 x double> %104, %116
  %118 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %115
  %119 = fadd <4 x double> %118, %117
  %120 = fadd <4 x double> %106, %119
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %114
  %122 = fmul <4 x double> %107, %121
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> %107, <4 x double> %123) #7
  %125 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %114
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %127 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %127, <4 x double> %121, <4 x double> %126) #7
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %113, <4 x double> %121, <4 x double> %124) #7
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %128, <4 x double> %129) #7
  %131 = fmul <4 x double> %122, %122
  %132 = fadd <4 x double> %122, %122
  %133 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %131
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %122, <4 x double> %133) #7
  %135 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %130, <4 x double> %134) #7
  %136 = fmul <4 x double> %131, %131
  %137 = fmul <4 x double> %136, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %138) #7
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %141 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %140, <4 x double> %141) #7
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %137, <4 x double> %139, <4 x double> %142) #7
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %143, <4 x double> %131, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %145 = sitofp <4 x i32> %87 to <4 x double>
  %146 = fmul <4 x double> %145, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %147 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %146
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %145, <4 x double> %147) #7
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %145, <4 x double> %148) #7
  %150 = fmul <4 x double> %122, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %151 = fmul <4 x double> %130, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %152 = fadd <4 x double> %146, %150
  %153 = fsub <4 x double> %146, %152
  %154 = fadd <4 x double> %150, %153
  %155 = fadd <4 x double> %149, %154
  %156 = fadd <4 x double> %151, %155
  %157 = fmul <4 x double> %122, %131
  %158 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %157
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %122, <4 x double> %158) #7
  %160 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %122, <4 x double> %159) #7
  %161 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %130, <4 x double> %160) #7
  %162 = fmul <4 x double> %144, %157
  %163 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %162
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %157, <4 x double> %144, <4 x double> %163) #7
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> %144, <4 x double> %164) #7
  %166 = fadd <4 x double> %152, %162
  %167 = fsub <4 x double> %152, %166
  %168 = fadd <4 x double> %162, %167
  %169 = fadd <4 x double> %168, %156
  %170 = fadd <4 x double> %165, %169
  %171 = fadd <4 x double> %166, %170
  %172 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #7
  %173 = fcmp uno <4 x double> %171, zeroinitializer
  %174 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %175 = or <4 x i64> %174, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %176 = bitcast <4 x i64> %175 to <4 x double>
  %177 = select <4 x i1> %173, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %172
  %178 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %171, <4 x double> %176, <4 x double> %177) #7
  %179 = fcmp uno <4 x double> %0, zeroinitializer
  %180 = select <4 x i1> %179, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %178
  %181 = icmp eq <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %182 = sext <4 x i1> %181 to <4 x i64>
  %183 = bitcast <4 x i64> %182 to <4 x double>
  %184 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %180, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %183) #7
  ret <4 x double> %184
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acoshd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = fsub <4 x double> %2, %0
  %4 = fsub <4 x double> %2, %3
  %5 = fsub <4 x double> %0, %4
  %6 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %3
  %7 = fadd <4 x double> %6, %5
  %8 = fadd <4 x double> %2, %7
  %9 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %8) #7
  %10 = fmul <4 x double> %9, %9
  %11 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %9, <4 x double> %11) #7
  %13 = fadd <4 x double> %2, %10
  %14 = fsub <4 x double> %13, %2
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %2, %15
  %17 = fsub <4 x double> %10, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %12
  %20 = fadd <4 x double> %19, %18
  %21 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %9
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %9
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %24 = fmul <4 x double> %21, %23
  %25 = fmul <4 x double> %21, %13
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %21, <4 x double> %26) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %21, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <4 x double> %29, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = fadd <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <4 x double> %32, %0
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %0, %34
  %36 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %32, %37
  %39 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %38) #7
  %40 = fmul <4 x double> %39, %39
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %39, <4 x double> %41) #7
  %43 = fadd <4 x double> %32, %40
  %44 = fsub <4 x double> %43, %32
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %32, %45
  %47 = fsub <4 x double> %40, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %37, %42
  %50 = fadd <4 x double> %49, %48
  %51 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %39
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %51, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %54 = fmul <4 x double> %51, %53
  %55 = fmul <4 x double> %51, %43
  %56 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %51, <4 x double> %56) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %51, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %54, <4 x double> %58) #7
  %60 = fmul <4 x double> %55, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %59, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = fmul <4 x double> %30, %60
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %60, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %60, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %61, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, %0
  %68 = fsub <4 x double> %67, %62
  %69 = fsub <4 x double> %67, %68
  %70 = fsub <4 x double> %62, %69
  %71 = fsub <4 x double> %0, %68
  %72 = fadd <4 x double> %71, %70
  %73 = fadd <4 x double> %66, %72
  %74 = fmul <4 x double> %67, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %75 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %74, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %76 = fmul <4 x double> %74, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> %76, <4 x double> %75) #7
  %78 = bitcast <4 x double> %77 to <4 x i64>
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %80 = bitcast <2 x i64> %79 to <4 x float>
  %81 = shufflevector <4 x float> %80, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %82 = bitcast <4 x float> %81 to <2 x i64>
  %83 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %84 = bitcast <2 x i64> %83 to <4 x float>
  %85 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %84, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = or <2 x i64> %86, %82
  %88 = bitcast <2 x i64> %87 to <4 x i32>
  %89 = lshr <4 x i32> %88, <i32 20, i32 20, i32 20, i32 20>
  %90 = bitcast <4 x double> %75 to <8 x i32>
  %91 = shufflevector <8 x i32> %90, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %92 = bitcast <8 x i32> %91 to <4 x i64>
  %93 = shufflevector <4 x i64> %92, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %94 = bitcast <2 x i64> %93 to <16 x i8>
  %95 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %94) #7
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = sub <4 x i32> %89, %96
  %98 = sub <4 x i32> zeroinitializer, %97
  %99 = ashr <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  %100 = add nsw <4 x i32> %99, <i32 1023, i32 1023, i32 1023, i32 1023>
  %101 = zext <4 x i32> %100 to <4 x i64>
  %102 = shl nuw <4 x i64> %101, <i64 32, i64 32, i64 32, i64 32>
  %103 = bitcast <4 x i64> %102 to <8 x i32>
  %104 = shl <8 x i32> %103, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %105 = bitcast <8 x i32> %104 to <4 x double>
  %106 = fmul <4 x double> %67, %105
  %107 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %97
  %108 = sub <4 x i32> %107, %99
  %109 = zext <4 x i32> %108 to <4 x i64>
  %110 = shl nuw <4 x i64> %109, <i64 32, i64 32, i64 32, i64 32>
  %111 = bitcast <4 x i64> %110 to <8 x i32>
  %112 = shl <8 x i32> %111, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %113 = bitcast <8 x i32> %112 to <4 x double>
  %114 = fmul <4 x double> %106, %113
  %115 = fmul <4 x double> %73, %105
  %116 = fmul <4 x double> %115, %113
  %117 = fadd <4 x double> %114, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %118 = fsub <4 x double> %117, %114
  %119 = fsub <4 x double> %117, %118
  %120 = fsub <4 x double> %114, %119
  %121 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %118
  %122 = fadd <4 x double> %121, %120
  %123 = fadd <4 x double> %116, %122
  %124 = fadd <4 x double> %114, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %125 = fsub <4 x double> %124, %114
  %126 = fsub <4 x double> %124, %125
  %127 = fsub <4 x double> %114, %126
  %128 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %125
  %129 = fadd <4 x double> %128, %127
  %130 = fadd <4 x double> %116, %129
  %131 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %124
  %132 = fmul <4 x double> %117, %131
  %133 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %117, <4 x double> %133) #7
  %135 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %124
  %136 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %131, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %130
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %137, <4 x double> %131, <4 x double> %136) #7
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %131, <4 x double> %134) #7
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %138, <4 x double> %139) #7
  %141 = fmul <4 x double> %132, %132
  %142 = fadd <4 x double> %132, %132
  %143 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %132, <4 x double> %143) #7
  %145 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %142, <4 x double> %140, <4 x double> %144) #7
  %146 = fmul <4 x double> %141, %141
  %147 = fmul <4 x double> %146, %146
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %148) #7
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> %150, <4 x double> %151) #7
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> %149, <4 x double> %152) #7
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %141, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %155 = sitofp <4 x i32> %97 to <4 x double>
  %156 = fmul <4 x double> %155, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %157 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %156
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %155, <4 x double> %157) #7
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %155, <4 x double> %158) #7
  %160 = fmul <4 x double> %132, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %161 = fmul <4 x double> %140, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %162 = fadd <4 x double> %156, %160
  %163 = fsub <4 x double> %156, %162
  %164 = fadd <4 x double> %160, %163
  %165 = fadd <4 x double> %159, %164
  %166 = fadd <4 x double> %161, %165
  %167 = fmul <4 x double> %132, %141
  %168 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %167
  %169 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %132, <4 x double> %168) #7
  %170 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %132, <4 x double> %169) #7
  %171 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %140, <4 x double> %170) #7
  %172 = fmul <4 x double> %154, %167
  %173 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %172
  %174 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> %154, <4 x double> %173) #7
  %175 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %171, <4 x double> %154, <4 x double> %174) #7
  %176 = fadd <4 x double> %162, %172
  %177 = fsub <4 x double> %162, %176
  %178 = fadd <4 x double> %172, %177
  %179 = fadd <4 x double> %178, %166
  %180 = fadd <4 x double> %175, %179
  %181 = fadd <4 x double> %176, %180
  %182 = bitcast <4 x double> %0 to <4 x i64>
  %183 = and <4 x i64> %182, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %184 = bitcast <4 x i64> %183 to <4 x double>
  %185 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %184, <4 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #7
  %186 = fcmp uno <4 x double> %181, zeroinitializer
  %187 = select <4 x i1> %186, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %185
  %188 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %181, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %187) #7
  %189 = fcmp une <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %190 = bitcast <4 x double> %188 to <4 x i64>
  %191 = select <4 x i1> %189, <4 x i64> %190, <4 x i64> zeroinitializer
  %192 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %193 = bitcast <4 x double> %192 to <4 x i64>
  %194 = or <4 x i64> %191, %193
  %195 = fcmp uno <4 x double> %0, zeroinitializer
  %196 = bitcast <4 x i64> %194 to <4 x double>
  %197 = select <4 x i1> %195, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %196
  ret <4 x double> %197
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atanhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <4 x double> %5, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <4 x double> %5, %6
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <4 x double> %4, %6
  %10 = fadd <4 x double> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <4 x double> %5, %19
  %21 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %5, <4 x double> %21) #7
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %19, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %19, <4 x double> %24) #7
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %19, <4 x double> %22) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %26, <4 x double> %27) #7
  %29 = fmul <4 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %29, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %31 = fmul <4 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %29, <4 x double> %31, <4 x double> %30) #7
  %33 = bitcast <4 x double> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = shufflevector <4 x float> %35, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %39, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = or <2 x i64> %41, %37
  %43 = bitcast <2 x i64> %42 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = bitcast <4 x double> %30 to <8 x i32>
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = bitcast <2 x i64> %48 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %49) #7
  %51 = bitcast <16 x i8> %50 to <4 x i32>
  %52 = sub <4 x i32> %44, %51
  %53 = sub <4 x i32> zeroinitializer, %52
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = zext <4 x i32> %55 to <4 x i64>
  %57 = shl nuw <4 x i64> %56, <i64 32, i64 32, i64 32, i64 32>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shl <8 x i32> %58, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = fmul <4 x double> %20, %60
  %62 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %52
  %63 = sub <4 x i32> %62, %54
  %64 = zext <4 x i32> %63 to <4 x i64>
  %65 = shl nuw <4 x i64> %64, <i64 32, i64 32, i64 32, i64 32>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = shl <8 x i32> %66, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %68 = bitcast <8 x i32> %67 to <4 x double>
  %69 = fmul <4 x double> %61, %68
  %70 = fmul <4 x double> %28, %60
  %71 = fmul <4 x double> %70, %68
  %72 = fadd <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %73 = fsub <4 x double> %72, %69
  %74 = fsub <4 x double> %72, %73
  %75 = fsub <4 x double> %69, %74
  %76 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %73
  %77 = fadd <4 x double> %76, %75
  %78 = fadd <4 x double> %71, %77
  %79 = fadd <4 x double> %69, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %80 = fsub <4 x double> %79, %69
  %81 = fsub <4 x double> %79, %80
  %82 = fsub <4 x double> %69, %81
  %83 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %80
  %84 = fadd <4 x double> %83, %82
  %85 = fadd <4 x double> %71, %84
  %86 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %79
  %87 = fmul <4 x double> %72, %86
  %88 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %72, <4 x double> %88) #7
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %79
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %86, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %92 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %85
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %86, <4 x double> %91) #7
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %86, <4 x double> %89) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %93, <4 x double> %94) #7
  %96 = fmul <4 x double> %87, %87
  %97 = fadd <4 x double> %87, %87
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %87, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %95, <4 x double> %99) #7
  %101 = fmul <4 x double> %96, %96
  %102 = fmul <4 x double> %101, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %103) #7
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %106 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %105, <4 x double> %106) #7
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %104, <4 x double> %107) #7
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %96, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %110 = sitofp <4 x i32> %52 to <4 x double>
  %111 = fmul <4 x double> %110, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %110, <4 x double> %112) #7
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %110, <4 x double> %113) #7
  %115 = fmul <4 x double> %87, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %116 = fmul <4 x double> %95, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %117 = fadd <4 x double> %111, %115
  %118 = fsub <4 x double> %111, %117
  %119 = fadd <4 x double> %115, %118
  %120 = fadd <4 x double> %114, %119
  %121 = fadd <4 x double> %116, %120
  %122 = fmul <4 x double> %87, %96
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %87, <4 x double> %123) #7
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %87, <4 x double> %124) #7
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %95, <4 x double> %125) #7
  %127 = fmul <4 x double> %109, %122
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %109, <4 x double> %128) #7
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %109, <4 x double> %129) #7
  %131 = fadd <4 x double> %117, %127
  %132 = fsub <4 x double> %117, %131
  %133 = fadd <4 x double> %127, %132
  %134 = fadd <4 x double> %133, %121
  %135 = fadd <4 x double> %130, %134
  %136 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %137 = bitcast <4 x double> %136 to <4 x i64>
  %138 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %139 = sext <4 x i1> %138 to <4 x i64>
  %140 = fadd <4 x double> %131, %135
  %141 = fmul <4 x double> %140, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %142 = bitcast <4 x i64> %139 to <4 x double>
  %143 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %141, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %142) #7
  %144 = bitcast <4 x double> %143 to <4 x i64>
  %145 = or <4 x i64> %144, %137
  %146 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %147 = xor <4 x i64> %145, %146
  %148 = bitcast <4 x i64> %147 to <4 x double>
  %149 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %150 = fcmp uno <4 x double> %148, zeroinitializer
  %151 = fcmp uno <4 x double> %0, zeroinitializer
  %152 = or <4 x i1> %149, %151
  %153 = or <4 x i1> %152, %150
  %154 = select <4 x i1> %153, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %148
  ret <4 x double> %154
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cbrtd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = bitcast <4 x double> %5 to <8 x i32>
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i32> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %19, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -2, i32 -2, i32 -2, i32 -2>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = zext <4 x i32> %31 to <4 x i64>
  %33 = shl nuw <4 x i64> %32, <i64 32, i64 32, i64 32, i64 32>
  %34 = bitcast <4 x i64> %33 to <8 x i32>
  %35 = shl <8 x i32> %34, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <8 x i32> %35 to <4 x double>
  %37 = fmul <4 x double> %36, %0
  %38 = sub <4 x i32> <i32 1022, i32 1022, i32 1022, i32 1022>, %27
  %39 = sub <4 x i32> %38, %30
  %40 = zext <4 x i32> %39 to <4 x i64>
  %41 = shl nuw <4 x i64> %40, <i64 32, i64 32, i64 32, i64 32>
  %42 = bitcast <4 x i64> %41 to <8 x i32>
  %43 = shl <8 x i32> %42, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <8 x i32> %43 to <4 x double>
  %45 = fmul <4 x double> %37, %44
  %46 = sitofp <4 x i32> %28 to <4 x double>
  %47 = fadd <4 x double> %46, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %48 = fmul <4 x double> %47, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %49 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %48) #7
  %50 = sitofp <4 x i32> %49 to <4 x double>
  %51 = fmul <4 x double> %50, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %52 = fsub <4 x double> %47, %51
  %53 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %52) #7
  %54 = icmp eq <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %60) #7
  %62 = icmp eq <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %68 = bitcast <8 x i32> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %68) #7
  %70 = add <4 x i32> %49, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %71 = ashr <4 x i32> %70, <i32 1, i32 1, i32 1, i32 1>
  %72 = add nsw <4 x i32> %71, <i32 1023, i32 1023, i32 1023, i32 1023>
  %73 = zext <4 x i32> %72 to <4 x i64>
  %74 = shl nuw <4 x i64> %73, <i64 32, i64 32, i64 32, i64 32>
  %75 = bitcast <4 x i64> %74 to <8 x i32>
  %76 = shl <8 x i32> %75, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %77 = bitcast <8 x i32> %76 to <4 x double>
  %78 = fmul <4 x double> %69, %77
  %79 = add <4 x i32> %49, <i32 -1025, i32 -1025, i32 -1025, i32 -1025>
  %80 = sub <4 x i32> %79, %71
  %81 = zext <4 x i32> %80 to <4 x i64>
  %82 = shl nuw <4 x i64> %81, <i64 32, i64 32, i64 32, i64 32>
  %83 = bitcast <4 x i64> %82 to <8 x i32>
  %84 = shl <8 x i32> %83, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <8 x i32> %84 to <4 x double>
  %86 = fmul <4 x double> %78, %85
  %87 = bitcast <4 x double> %86 to <4 x i64>
  %88 = bitcast <4 x double> %45 to <4 x i64>
  %89 = and <4 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = xor <4 x i64> %89, %87
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = and <4 x i64> %88, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %93, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %93, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %93, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %97 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %93, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %93, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %99 = fmul <4 x double> %98, %98
  %100 = fmul <4 x double> %99, %99
  %101 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %98
  %102 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %100, <4 x double> %101) #7
  %103 = fmul <4 x double> %102, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %104 = fsub <4 x double> %98, %103
  %105 = fmul <4 x double> %104, %93
  %106 = fmul <4 x double> %104, %105
  %107 = fmul <4 x double> %106, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %104, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #7
  %109 = fmul <4 x double> %108, %107
  %110 = fsub <4 x double> %106, %109
  %111 = fmul <4 x double> %110, %91
  ret <4 x double> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cbrtd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = bitcast <4 x double> %5 to <8 x i32>
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i32> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %19, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -2, i32 -2, i32 -2, i32 -2>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = zext <4 x i32> %31 to <4 x i64>
  %33 = shl nuw <4 x i64> %32, <i64 32, i64 32, i64 32, i64 32>
  %34 = bitcast <4 x i64> %33 to <8 x i32>
  %35 = shl <8 x i32> %34, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <8 x i32> %35 to <4 x double>
  %37 = fmul <4 x double> %36, %0
  %38 = sub <4 x i32> <i32 1022, i32 1022, i32 1022, i32 1022>, %27
  %39 = sub <4 x i32> %38, %30
  %40 = zext <4 x i32> %39 to <4 x i64>
  %41 = shl nuw <4 x i64> %40, <i64 32, i64 32, i64 32, i64 32>
  %42 = bitcast <4 x i64> %41 to <8 x i32>
  %43 = shl <8 x i32> %42, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <8 x i32> %43 to <4 x double>
  %45 = fmul <4 x double> %37, %44
  %46 = sitofp <4 x i32> %28 to <4 x double>
  %47 = fadd <4 x double> %46, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %48 = fmul <4 x double> %47, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %49 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %48) #7
  %50 = sitofp <4 x i32> %49 to <4 x double>
  %51 = fmul <4 x double> %50, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %52 = fsub <4 x double> %47, %51
  %53 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %52) #7
  %54 = icmp eq <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %60) #7
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <4 x double> %60) #7
  %63 = icmp eq <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = bitcast <4 x i64> %66 to <8 x i32>
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %69 = bitcast <8 x i32> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %69) #7
  %71 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <4 x double> %69) #7
  %72 = bitcast <4 x double> %70 to <4 x i64>
  %73 = bitcast <4 x double> %45 to <4 x i64>
  %74 = and <4 x i64> %73, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %75 = xor <4 x i64> %74, %72
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = bitcast <4 x double> %71 to <4 x i64>
  %78 = xor <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <4 x double>
  %80 = and <4 x i64> %73, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %81 = bitcast <4 x i64> %80 to <4 x double>
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %81, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %81, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %81, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %84, <4 x double> %81, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %85, <4 x double> %81, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %87 = fmul <4 x double> %86, %86
  %88 = fmul <4 x double> %87, %87
  %89 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %86
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %81, <4 x double> %88, <4 x double> %89) #7
  %91 = fmul <4 x double> %90, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %92 = fsub <4 x double> %86, %91
  %93 = fmul <4 x double> %92, %92
  %94 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %93
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %92, <4 x double> %94) #7
  %96 = fmul <4 x double> %93, %93
  %97 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %93, <4 x double> %97) #7
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %93, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %95, <4 x double> %99) #7
  %101 = fmul <4 x double> %96, %81
  %102 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %81, <4 x double> %102) #7
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %81, <4 x double> %103) #7
  %105 = bitcast <4 x double> %92 to <4 x i64>
  %106 = xor <4 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <4 x i64> %106 to <4 x double>
  %108 = fadd <4 x double> %101, %107
  %109 = fsub <4 x double> %108, %101
  %110 = fsub <4 x double> %108, %109
  %111 = fsub <4 x double> %101, %110
  %112 = fsub <4 x double> %107, %109
  %113 = fadd <4 x double> %112, %111
  %114 = fadd <4 x double> %104, %113
  %115 = fadd <4 x double> %108, %114
  %116 = fmul <4 x double> %115, <double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555>
  %117 = fmul <4 x double> %92, %116
  %118 = fadd <4 x double> %93, %117
  %119 = fsub <4 x double> %118, %93
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %93, %120
  %122 = fsub <4 x double> %117, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %95, %123
  %125 = fmul <4 x double> %118, %81
  %126 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %125
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %81, <4 x double> %126) #7
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %81, <4 x double> %127) #7
  %129 = fmul <4 x double> %125, %76
  %130 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %129
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %76, <4 x double> %130) #7
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %76, <4 x double> %131) #7
  %133 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %79, <4 x double> %132) #7
  %134 = fadd <4 x double> %133, %129
  %135 = add <4 x i32> %49, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %136 = ashr <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %137 = add nsw <4 x i32> %136, <i32 1023, i32 1023, i32 1023, i32 1023>
  %138 = zext <4 x i32> %137 to <4 x i64>
  %139 = shl nuw <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %140 = bitcast <4 x i64> %139 to <8 x i32>
  %141 = shl <8 x i32> %140, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %142 = bitcast <8 x i32> %141 to <4 x double>
  %143 = fmul <4 x double> %134, %142
  %144 = add <4 x i32> %49, <i32 -1025, i32 -1025, i32 -1025, i32 -1025>
  %145 = sub <4 x i32> %144, %136
  %146 = zext <4 x i32> %145 to <4 x i64>
  %147 = shl nuw <4 x i64> %146, <i64 32, i64 32, i64 32, i64 32>
  %148 = bitcast <4 x i64> %147 to <8 x i32>
  %149 = shl <8 x i32> %148, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %150 = bitcast <8 x i32> %149 to <4 x double>
  %151 = fmul <4 x double> %143, %150
  %152 = fcmp oeq <4 x double> %81, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = and <4 x i64> %75, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %155 = or <4 x i64> %154, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %156 = bitcast <4 x i64> %155 to <4 x double>
  %157 = bitcast <4 x i64> %153 to <4 x double>
  %158 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %151, <4 x double> %156, <4 x double> %157) #7
  %159 = fcmp oeq <4 x double> %81, zeroinitializer
  %160 = sext <4 x i1> %159 to <4 x i64>
  %161 = bitcast <4 x i64> %154 to <4 x double>
  %162 = bitcast <4 x i64> %160 to <4 x double>
  %163 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %158, <4 x double> %161, <4 x double> %162) #7
  ret <4 x double> %163
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp2d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #7
  %3 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %2) #7
  %4 = fsub <4 x double> %0, %2
  %5 = fmul <4 x double> %4, %4
  %6 = fmul <4 x double> %5, %5
  %7 = fmul <4 x double> %6, %6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <4 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <4 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #7
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <4 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #7
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %9, <4 x double> %10) #7
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <4 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <4 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %12, <4 x double> %13) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> %11, <4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %8, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %4, <4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add nsw <4 x i32> %19, <i32 1023, i32 1023, i32 1023, i32 1023>
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <8 x i32> %24 to <4 x double>
  %26 = fmul <4 x double> %18, %25
  %27 = add <4 x i32> %3, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = sub <4 x i32> %27, %19
  %29 = zext <4 x i32> %28 to <4 x i64>
  %30 = shl nuw <4 x i64> %29, <i64 32, i64 32, i64 32, i64 32>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shl <8 x i32> %31, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %33 = bitcast <8 x i32> %32 to <4 x double>
  %34 = fmul <4 x double> %26, %33
  %35 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.024000e+03, double 1.024000e+03, double 1.024000e+03, double 1.024000e+03>, i8 29) #7
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %34, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -2.000000e+03, double -2.000000e+03, double -2.000000e+03, double -2.000000e+03>, i8 17) #7
  %38 = bitcast <4 x double> %37 to <4 x i64>
  %39 = bitcast <4 x double> %36 to <4 x i64>
  %40 = xor <4 x i64> %38, <i64 -1, i64 -1, i64 -1, i64 -1>
  %41 = and <4 x i64> %40, %39
  %42 = bitcast <4 x i64> %41 to <4 x double>
  ret <4 x double> %42
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp2d4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #7
  %3 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %2) #7
  %4 = fsub <4 x double> %0, %2
  %5 = fmul <4 x double> %4, %4
  %6 = fmul <4 x double> %5, %5
  %7 = fmul <4 x double> %6, %6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <4 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <4 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #7
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <4 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #7
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %9, <4 x double> %10) #7
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <4 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <4 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %12, <4 x double> %13) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> %11, <4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %8, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %4, <4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add nsw <4 x i32> %19, <i32 1023, i32 1023, i32 1023, i32 1023>
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <8 x i32> %24 to <4 x double>
  %26 = fmul <4 x double> %18, %25
  %27 = add <4 x i32> %3, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = sub <4 x i32> %27, %19
  %29 = zext <4 x i32> %28 to <4 x i64>
  %30 = shl nuw <4 x i64> %29, <i64 32, i64 32, i64 32, i64 32>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shl <8 x i32> %31, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %33 = bitcast <8 x i32> %32 to <4 x double>
  %34 = fmul <4 x double> %26, %33
  %35 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.024000e+03, double 1.024000e+03, double 1.024000e+03, double 1.024000e+03>, i8 29) #7
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %34, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -2.000000e+03, double -2.000000e+03, double -2.000000e+03, double -2.000000e+03>, i8 17) #7
  %38 = bitcast <4 x double> %37 to <4 x i64>
  %39 = bitcast <4 x double> %36 to <4 x i64>
  %40 = xor <4 x i64> %38, <i64 -1, i64 -1, i64 -1, i64 -1>
  %41 = and <4 x i64> %40, %39
  %42 = bitcast <4 x i64> %41 to <4 x double>
  ret <4 x double> %42
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp10d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #7
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <4 x double> %0) #7
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <4 x double> %5) #7
  %7 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <4 x double> %6, <4 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>) #7
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %6, <4 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154>) #7
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %6, <4 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #7
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %6, <4 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>) #7
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %6, <4 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %6, <4 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %6, <4 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %6, <4 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %6, <4 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %18 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %19 = add nsw <4 x i32> %18, <i32 1023, i32 1023, i32 1023, i32 1023>
  %20 = zext <4 x i32> %19 to <4 x i64>
  %21 = shl nuw <4 x i64> %20, <i64 32, i64 32, i64 32, i64 32>
  %22 = bitcast <4 x i64> %21 to <8 x i32>
  %23 = shl <8 x i32> %22, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <8 x i32> %23 to <4 x double>
  %25 = fmul <4 x double> %17, %24
  %26 = add <4 x i32> %4, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = sub <4 x i32> %26, %18
  %28 = zext <4 x i32> %27 to <4 x i64>
  %29 = shl nuw <4 x i64> %28, <i64 32, i64 32, i64 32, i64 32>
  %30 = bitcast <4 x i64> %29 to <8 x i32>
  %31 = shl <8 x i32> %30, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %32 = bitcast <8 x i32> %31 to <4 x double>
  %33 = fmul <4 x double> %25, %32
  %34 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #7
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %34) #7
  %36 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -3.500000e+02, double -3.500000e+02, double -3.500000e+02, double -3.500000e+02>, i8 17) #7
  %37 = bitcast <4 x double> %36 to <4 x i64>
  %38 = bitcast <4 x double> %35 to <4 x i64>
  %39 = xor <4 x i64> %37, <i64 -1, i64 -1, i64 -1, i64 -1>
  %40 = and <4 x i64> %39, %38
  %41 = bitcast <4 x i64> %40 to <4 x double>
  ret <4 x double> %41
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp10d4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #7
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <4 x double> %0) #7
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <4 x double> %5) #7
  %7 = fmul <4 x double> %6, %6
  %8 = fmul <4 x double> %7, %7
  %9 = fmul <4 x double> %8, %8
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>, <4 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #7
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <4 x double> %10) #7
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154>, <4 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>, <4 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %12, <4 x double> %13) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>, <4 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78>, <4 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %15, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %14, <4 x double> %17) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %21 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %22 = add nsw <4 x i32> %21, <i32 1023, i32 1023, i32 1023, i32 1023>
  %23 = zext <4 x i32> %22 to <4 x i64>
  %24 = shl nuw <4 x i64> %23, <i64 32, i64 32, i64 32, i64 32>
  %25 = bitcast <4 x i64> %24 to <8 x i32>
  %26 = shl <8 x i32> %25, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = fmul <4 x double> %20, %27
  %29 = add <4 x i32> %4, <i32 1023, i32 1023, i32 1023, i32 1023>
  %30 = sub <4 x i32> %29, %21
  %31 = zext <4 x i32> %30 to <4 x i64>
  %32 = shl nuw <4 x i64> %31, <i64 32, i64 32, i64 32, i64 32>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = shl <8 x i32> %33, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %35 = bitcast <8 x i32> %34 to <4 x double>
  %36 = fmul <4 x double> %28, %35
  %37 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #7
  %38 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %36, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -3.500000e+02, double -3.500000e+02, double -3.500000e+02, double -3.500000e+02>, i8 17) #7
  %40 = bitcast <4 x double> %39 to <4 x i64>
  %41 = bitcast <4 x double> %38 to <4 x i64>
  %42 = xor <4 x i64> %40, <i64 -1, i64 -1, i64 -1, i64 -1>
  %43 = and <4 x i64> %42, %41
  %44 = bitcast <4 x i64> %43 to <4 x double>
  ret <4 x double> %44
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_expm1d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, zeroinitializer
  %3 = fmul <4 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %3, i32 8) #7
  %5 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %4) #7
  %6 = fmul <4 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <4 x double> %6, %0
  %8 = fsub <4 x double> %7, %0
  %9 = fsub <4 x double> %7, %8
  %10 = fsub <4 x double> %0, %9
  %11 = fsub <4 x double> %6, %8
  %12 = fadd <4 x double> %11, %10
  %13 = fadd <4 x double> %12, zeroinitializer
  %14 = fmul <4 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <4 x double> %14, %7
  %16 = fsub <4 x double> %15, %7
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %7, %17
  %19 = fsub <4 x double> %14, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %20, %13
  %22 = fmul <4 x double> %15, %15
  %23 = fadd <4 x double> %15, %15
  %24 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %15, <4 x double> %24) #7
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %21, <4 x double> %25) #7
  %27 = fmul <4 x double> %22, %22
  %28 = fadd <4 x double> %22, %22
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %22, <4 x double> %29) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %26, <4 x double> %30) #7
  %32 = fmul <4 x double> %27, %27
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %34, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %36, <4 x double> %39) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %33, <4 x double> %40) #7
  %42 = fmul <4 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %44) #7
  %46 = fadd <4 x double> %42, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <4 x double> %42, %47
  %49 = fadd <4 x double> %48, %45
  %50 = fmul <4 x double> %15, %46
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %15, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %15, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %21, <4 x double> %53) #7
  %55 = fadd <4 x double> %50, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <4 x double> %50, %56
  %58 = fadd <4 x double> %57, %54
  %59 = fmul <4 x double> %15, %55
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %15, <4 x double> %60) #7
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %15, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %62) #7
  %64 = fadd <4 x double> %59, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <4 x double> %59, %65
  %67 = fadd <4 x double> %66, %63
  %68 = fmul <4 x double> %27, %41
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %41, <4 x double> %69) #7
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %41, <4 x double> %70) #7
  %72 = fadd <4 x double> %64, %68
  %73 = fsub <4 x double> %64, %72
  %74 = fadd <4 x double> %68, %73
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add nsw <4 x i32> %77, <i32 1023, i32 1023, i32 1023, i32 1023>
  %79 = zext <4 x i32> %78 to <4 x i64>
  %80 = shl nuw <4 x i64> %79, <i64 32, i64 32, i64 32, i64 32>
  %81 = bitcast <4 x i64> %80 to <8 x i32>
  %82 = shl <8 x i32> %81, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %83 = bitcast <8 x i32> %82 to <4 x double>
  %84 = fmul <4 x double> %72, %83
  %85 = add <4 x i32> %5, <i32 1023, i32 1023, i32 1023, i32 1023>
  %86 = sub <4 x i32> %85, %77
  %87 = zext <4 x i32> %86 to <4 x i64>
  %88 = shl nuw <4 x i64> %87, <i64 32, i64 32, i64 32, i64 32>
  %89 = bitcast <4 x i64> %88 to <8 x i32>
  %90 = shl <8 x i32> %89, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %91 = bitcast <8 x i32> %90 to <4 x double>
  %92 = fmul <4 x double> %84, %91
  %93 = fmul <4 x double> %76, %83
  %94 = fmul <4 x double> %93, %91
  %95 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %96 = bitcast <4 x double> %95 to <4 x i64>
  %97 = bitcast <4 x double> %92 to <4 x i64>
  %98 = xor <4 x i64> %96, <i64 -1, i64 -1, i64 -1, i64 -1>
  %99 = and <4 x i64> %98, %97
  %100 = bitcast <4 x double> %94 to <4 x i64>
  %101 = and <4 x i64> %100, %98
  %102 = bitcast <4 x i64> %99 to <4 x double>
  %103 = bitcast <4 x i64> %101 to <4 x double>
  %104 = fadd <4 x double> %102, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %105 = fsub <4 x double> %104, %102
  %106 = fsub <4 x double> %104, %105
  %107 = fsub <4 x double> %102, %106
  %108 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %105
  %109 = fadd <4 x double> %108, %107
  %110 = fadd <4 x double> %109, %103
  %111 = fadd <4 x double> %104, %110
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #7
  %113 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %111, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %112) #7
  %114 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #7
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %113, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %114) #7
  %116 = bitcast <4 x double> %0 to <4 x i64>
  %117 = icmp eq <4 x i64> %116, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %118 = sext <4 x i1> %117 to <4 x i64>
  %119 = bitcast <4 x i64> %118 to <4 x double>
  %120 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %115, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %119) #7
  ret <4 x double> %120
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log10d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <4 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <4 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <4 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %69, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <4 x double> %69, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <4 x double> %69, <4 x double> %72) #7
  %74 = fmul <4 x double> %50, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %75) #7
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %76) #7
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <4 x double> %77) #7
  %79 = fadd <4 x double> %70, %74
  %80 = fsub <4 x double> %70, %79
  %81 = fadd <4 x double> %74, %80
  %82 = fadd <4 x double> %73, %81
  %83 = fadd <4 x double> %78, %82
  %84 = fmul <4 x double> %50, %59
  %85 = fmul <4 x double> %67, %84
  %86 = fadd <4 x double> %79, %85
  %87 = fsub <4 x double> %79, %86
  %88 = fadd <4 x double> %85, %87
  %89 = fadd <4 x double> %88, %83
  %90 = fadd <4 x double> %86, %89
  %91 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %93) #7
  %95 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %96 = fcmp uno <4 x double> %4, zeroinitializer
  %97 = select <4 x i1> %96, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %95
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %94, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %97) #7
  %99 = fcmp oeq <4 x double> %4, zeroinitializer
  %100 = sext <4 x i1> %99 to <4 x i64>
  %101 = bitcast <4 x i64> %100 to <4 x double>
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %98, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %101) #7
  ret <4 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log2d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %50, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <4 x double> %73) #7
  %75 = fadd <4 x double> %70, %69
  %76 = fsub <4 x double> %75, %69
  %77 = fsub <4 x double> %75, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fsub <4 x double> %70, %76
  %80 = fadd <4 x double> %79, %78
  %81 = fadd <4 x double> %74, %80
  %82 = fmul <4 x double> %50, %59
  %83 = fmul <4 x double> %67, %82
  %84 = fadd <4 x double> %75, %83
  %85 = fsub <4 x double> %84, %75
  %86 = fsub <4 x double> %84, %85
  %87 = fsub <4 x double> %75, %86
  %88 = fsub <4 x double> %83, %85
  %89 = fadd <4 x double> %88, %87
  %90 = fadd <4 x double> %81, %89
  %91 = fadd <4 x double> %84, %90
  %92 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %93 = sext <4 x i1> %92 to <4 x i64>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %94) #7
  %96 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %97 = fcmp uno <4 x double> %4, zeroinitializer
  %98 = select <4 x i1> %97, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %96
  %99 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %95, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %98) #7
  %100 = fcmp oeq <4 x double> %4, zeroinitializer
  %101 = sext <4 x i1> %100 to <4 x i64>
  %102 = bitcast <4 x i64> %101 to <4 x double>
  %103 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %99, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %102) #7
  ret <4 x double> %103
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log2d4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fdiv <4 x double> %37, %38
  %40 = fmul <4 x double> %39, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %40, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %40, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %40, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %40, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %40, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %40, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %47 = bitcast <16 x i8> %36 to <4 x i32>
  %48 = sitofp <4 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %39, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %50) #7
  %52 = fadd <4 x double> %49, %48
  %53 = fsub <4 x double> %48, %52
  %54 = fadd <4 x double> %49, %53
  %55 = fadd <4 x double> %51, %54
  %56 = fmul <4 x double> %39, %40
  %57 = fadd <4 x double> %52, %55
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %56, <4 x double> %57) #7
  %59 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %60 = sext <4 x i1> %59 to <4 x i64>
  %61 = bitcast <4 x i64> %60 to <4 x double>
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %58, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %64 = fcmp uno <4 x double> %4, zeroinitializer
  %65 = select <4 x i1> %64, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %63
  %66 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %65) #7
  %67 = fcmp oeq <4 x double> %4, zeroinitializer
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = bitcast <4 x i64> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %69) #7
  ret <4 x double> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log1pd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %4 = fmul <4 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %4, <4 x double> %3) #7
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = bitcast <2 x i64> %8 to <4 x float>
  %10 = shufflevector <4 x float> %9, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %13, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = or <2 x i64> %15, %11
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = zext <4 x i32> %21 to <4 x i64>
  %23 = shl nuw <4 x i64> %22, <i64 32, i64 32, i64 32, i64 32>
  %24 = bitcast <4 x i64> %23 to <8 x i32>
  %25 = shl <8 x i32> %24, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %26 = add <8 x i32> %25, <i32 0, i32 1072693248, i32 0, i32 1072693248, i32 0, i32 1072693248, i32 0, i32 1072693248>
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %27, <4 x double> %28) #7
  %30 = bitcast <4 x double> %3 to <8 x i32>
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <8 x i32> %31 to <4 x i64>
  %33 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %34 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <4 x i32> %20 to <16 x i8>
  %36 = bitcast <4 x i32> %33 to <16 x i8>
  %37 = bitcast <2 x i64> %34 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #7
  %39 = bitcast <16 x i8> %38 to <4 x i32>
  %40 = sitofp <4 x i32> %39 to <4 x double>
  %41 = fmul <4 x double> %40, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %40, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %40, <4 x double> %43) #7
  %45 = fadd <4 x double> %29, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %46 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %45
  %47 = fadd <4 x double> %29, %46
  %48 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %49 = fmul <4 x double> %29, %48
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> %29, <4 x double> %50) #7
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %48, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %47
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %48, <4 x double> %53) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %48, <4 x double> %51) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %55, <4 x double> %56) #7
  %58 = fmul <4 x double> %49, %49
  %59 = fmul <4 x double> %58, %58
  %60 = fmul <4 x double> %59, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %63, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %62, <4 x double> %65) #7
  %67 = fmul <4 x double> %49, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %68 = fmul <4 x double> %57, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %69 = fadd <4 x double> %41, %67
  %70 = fsub <4 x double> %41, %69
  %71 = fadd <4 x double> %67, %70
  %72 = fadd <4 x double> %44, %71
  %73 = fadd <4 x double> %72, %68
  %74 = fmul <4 x double> %49, %58
  %75 = fmul <4 x double> %74, %66
  %76 = fadd <4 x double> %69, %75
  %77 = fsub <4 x double> %69, %76
  %78 = fadd <4 x double> %75, %77
  %79 = fadd <4 x double> %73, %78
  %80 = fadd <4 x double> %76, %79
  %81 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #7
  %82 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %80, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %81) #7
  %83 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, i8 17) #7
  %84 = fcmp uno <4 x double> %0, zeroinitializer
  %85 = select <4 x i1> %84, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %83
  %86 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %82, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %85) #7
  %87 = fcmp oeq <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %88 = sext <4 x i1> %87 to <4 x i64>
  %89 = bitcast <4 x i64> %88 to <4 x double>
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %86, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %89) #7
  %91 = bitcast <4 x double> %0 to <4 x i64>
  %92 = icmp eq <4 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %93 = sext <4 x i1> %92 to <4 x i64>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %94) #7
  ret <4 x double> %95
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_fabsd4_avx2(<4 x double>) local_unnamed_addr #3 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  ret <4 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_copysignd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #3 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <4 x double>
  ret <4 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmaxd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %0, <4 x double> %1) #7
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmind4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %0, <4 x double> %1) #7
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fdimd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fsub <4 x double> %0, %1
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> zeroinitializer, i8 17) #7
  %5 = fcmp oeq <4 x double> %0, %1
  %6 = select <4 x i1> %5, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %4
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> zeroinitializer, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_truncd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_floord4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #7
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 17) #7
  %11 = fadd <4 x double> %9, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %10) #7
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #7
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_ceild4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #7
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 18) #7
  %11 = fadd <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %9, <4 x double> %10) #7
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #7
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_roundd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <4 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %2, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #7
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> zeroinitializer, i8 18) #7
  %12 = fcmp oeq <4 x double> %10, zeroinitializer
  %13 = fadd <4 x double> %2, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %14 = select <4 x i1> %12, <4 x double> %11, <4 x double> zeroinitializer
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %13, <4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> zeroinitializer, i8 17) #7
  %17 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %16) #7
  %19 = fcmp oeq <4 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> zeroinitializer, <4 x double> %21) #7
  %23 = bitcast <4 x double> %0 to <4 x i64>
  %24 = and <4 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <4 x i64> %24 to <4 x double>
  %26 = fcmp oeq <4 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %25, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %28 = fsub <4 x double> %22, %18
  %29 = bitcast <4 x double> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %31 = and <4 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = or <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = select <4 x i1> %26, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %27
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> %0, <4 x double> %34) #7
  ret <4 x double> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_rintd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #7
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_nextafterd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x double> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <4 x i64> %6 to <4 x double>
  %8 = bitcast <4 x i64> %4 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %7, <4 x double> %8) #7
  %10 = bitcast <4 x double> %9 to <4 x i64>
  %11 = ashr <4 x i64> %10, <i64 63, i64 63, i64 63, i64 63>
  %12 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> %9, i8 29) #7
  %13 = bitcast <4 x double> %12 to <4 x i64>
  %14 = xor <4 x i64> %11, %13
  %15 = bitcast <4 x double> %9 to <8 x i32>
  %16 = xor <8 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <8 x i32> %16, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <8 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <4 x i64>
  %21 = and <4 x i64> %20, <i64 1, i64 1, i64 1, i64 1>
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = shufflevector <8 x float> %22, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %24 = bitcast <8 x float> %23 to <8 x i32>
  %25 = add <8 x i32> %17, %24
  %26 = bitcast <8 x i32> %25 to <4 x double>
  %27 = bitcast <4 x i64> %14 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %26, <4 x double> %27) #7
  %29 = fcmp une <4 x double> %9, %1
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x double> %28 to <8 x i32>
  %32 = bitcast <4 x i64> %30 to <8 x i32>
  %33 = and <8 x i32> %32, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %34 = sub <8 x i32> %31, %33
  %35 = icmp eq <8 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %41 = bitcast <8 x float> %40 to <8 x i32>
  %42 = add <8 x i32> %34, %41
  %43 = bitcast <8 x i32> %42 to <4 x double>
  %44 = bitcast <8 x i32> %34 to <4 x double>
  %45 = bitcast <4 x i64> %30 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #7
  %47 = bitcast <4 x double> %46 to <8 x i32>
  %48 = xor <8 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <8 x i32> %48, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <8 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <4 x i64>
  %53 = and <4 x i64> %52, <i64 1, i64 1, i64 1, i64 1>
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %56 = bitcast <8 x float> %55 to <8 x i32>
  %57 = add <8 x i32> %49, %56
  %58 = bitcast <8 x i32> %57 to <4 x double>
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> %58, <4 x double> %27) #7
  %60 = fcmp oeq <4 x double> %59, zeroinitializer
  %61 = fcmp une <4 x double> %9, zeroinitializer
  %62 = and <4 x i1> %60, %61
  %63 = sext <4 x i1> %62 to <4 x i64>
  %64 = and <4 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <4 x i64> %64 to <4 x double>
  %66 = bitcast <4 x i64> %63 to <4 x double>
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %59, <4 x double> %65, <4 x double> %66) #7
  %68 = fcmp oeq <4 x double> %9, zeroinitializer
  %69 = fcmp oeq <4 x double> %1, zeroinitializer
  %70 = and <4 x i1> %68, %69
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %67, <4 x double> %1, <4 x double> %72) #7
  %74 = fcmp uno <4 x double> %9, %1
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #7
  ret <4 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_frfrexpd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <4 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <4 x i64> %10 to <4 x double>
  %12 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <4 x i1> %14 to <4 x i64>
  %16 = and <4 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <4 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <4 x i64> %17 to <4 x double>
  %19 = bitcast <4 x i64> %15 to <4 x double>
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #7
  %21 = fcmp oeq <4 x double> %7, zeroinitializer
  %22 = sext <4 x i1> %21 to <4 x i64>
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %7, <4 x double> %23) #7
  ret <4 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %22 = fcmp ueq <4 x double> %7, zeroinitializer
  %23 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %24 = bitcast <4 x i64> %23 to <4 x double>
  %25 = fcmp oeq <4 x double> %24, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %22
  %27 = sext <4 x i1> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = bitcast <4 x i32> %21 to <16 x i8>
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %29, <16 x i8> zeroinitializer, <16 x i8> %30) #7
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmad4_avx2(<4 x double>, <4 x double>, <4 x double>) local_unnamed_addr #0 {
  %4 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %1, <4 x double> %2) #7
  ret <4 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_u05avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #7
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #7
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #7
  %8 = bitcast <4 x double> %6 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = sub <8 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <8 x i32> %10 to <4 x double>
  %12 = fmul <4 x double> %6, %11
  %13 = fmul <4 x double> %11, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %13, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %12) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %15, <4 x double> %13) #7
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %17, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %19, <4 x double> %16) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %19, <4 x double> %17) #7
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %23, <4 x double> %20) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %23, <4 x double> %21) #7
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %25, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <4 x double> %25, %25
  %29 = fmul <4 x double> %28, %27
  %30 = fmul <4 x double> %6, %29
  %31 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %6, <4 x double> %31) #7
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %30, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> %34) #7
  %36 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %35, <4 x double> %32) #7
  %38 = fadd <4 x double> %30, %37
  %39 = fmul <4 x double> %7, %38
  %40 = fcmp oeq <4 x double> %6, zeroinitializer
  %41 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <4 x i1> %41, %40
  %43 = sext <4 x i1> %42 to <4 x i64>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> %6, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #7
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %45, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %46) #7
  ret <4 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %0) #7
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #7
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #7
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #7
  %8 = bitcast <4 x double> %6 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = sub <8 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <8 x i32> %10 to <4 x double>
  %12 = fmul <4 x double> %6, %11
  %13 = fmul <4 x double> %11, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %13, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %12) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %15, <4 x double> %13) #7
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %17, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %19, <4 x double> %16) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %19, <4 x double> %17) #7
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %23, <4 x double> %20) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %23, <4 x double> %21) #7
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %25, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <4 x double> %25, %25
  %29 = fmul <4 x double> %28, %27
  %30 = fmul <4 x double> %6, %29
  %31 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %6, <4 x double> %31) #7
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %30, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> %34) #7
  %36 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %35, <4 x double> %32) #7
  %38 = fadd <4 x double> %30, %37
  %39 = fmul <4 x double> %7, %38
  %40 = fcmp oeq <4 x double> %6, zeroinitializer
  %41 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <4 x i1> %41, %40
  %43 = sext <4 x i1> %42 to <4 x i64>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> %6, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #7
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %45, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %46) #7
  ret <4 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_hypotd4_u05avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #7
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #7
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %12 = fmul <4 x double> %9, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %12, <4 x double> %11) #7
  %14 = fmul <4 x double> %10, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %11) #7
  %16 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <4 x double> %13, %16
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %13, <4 x double> %18) #7
  %20 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %16, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %16, <4 x double> %21) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %19) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %22, <4 x double> %23) #7
  %25 = fmul <4 x double> %17, %17
  %26 = fadd <4 x double> %17, %17
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <4 x double> %30, %25
  %32 = fsub <4 x double> %30, %31
  %33 = fsub <4 x double> %25, %32
  %34 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <4 x double> %34, %33
  %36 = fadd <4 x double> %29, %35
  %37 = fadd <4 x double> %30, %36
  %38 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %37) #7
  %39 = fmul <4 x double> %38, %38
  %40 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %38, <4 x double> %40) #7
  %42 = fadd <4 x double> %30, %39
  %43 = fsub <4 x double> %42, %30
  %44 = fsub <4 x double> %42, %43
  %45 = fsub <4 x double> %30, %44
  %46 = fsub <4 x double> %39, %43
  %47 = fadd <4 x double> %46, %45
  %48 = fadd <4 x double> %41, %36
  %49 = fadd <4 x double> %48, %47
  %50 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %50, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %53 = fmul <4 x double> %50, %52
  %54 = fmul <4 x double> %50, %42
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %50, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %50, <4 x double> %56) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %53, <4 x double> %57) #7
  %59 = fmul <4 x double> %54, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <4 x double> %58, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %10, %59
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %10, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %10, <4 x double> %63) #7
  %65 = fadd <4 x double> %61, %64
  %66 = fcmp uno <4 x double> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i64>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %65, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %68) #7
  %70 = fcmp oeq <4 x double> %9, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %69, <4 x double> %10, <4 x double> %72) #7
  %74 = fcmp uno <4 x double> %8, %5
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #7
  %78 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <4 x i1> %79, %78
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %82) #7
  ret <4 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_hypotd4_u35avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #7
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #7
  %11 = fdiv <4 x double> %9, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %12) #7
  %14 = fmul <4 x double> %10, %13
  %15 = fcmp oeq <4 x double> %9, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i64>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %10, <4 x double> %17) #7
  %19 = fcmp uno <4 x double> %8, %5
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %21) #7
  %23 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <4 x i1> %24, %23
  %26 = sext <4 x i1> %25 to <4 x i64>
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %22, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %27) #7
  ret <4 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmodd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #7
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #7
  %14 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <4 x double> %14 to <4 x i64>
  %16 = add <4 x i64> %15, <i64 -1, i64 -1, i64 -1, i64 -1>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = fcmp oeq <4 x double> %14, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i64>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %20) #7
  %22 = fmul <4 x double> %13, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <4 x double> %13, %13
  %24 = bitcast <4 x double> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <4 x i64> %25 to <4 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %73, %27 ]
  %29 = phi <4 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <4 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = add <4 x i64> %31, <i64 -1, i64 -1, i64 -1, i64 -1>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = fcmp oeq <4 x double> %30, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #7
  %38 = fmul <4 x double> %21, %37
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #7
  %40 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %22, <4 x double> %30, i8 30) #7
  %41 = bitcast <4 x double> %40 to <4 x i64>
  %42 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %13, i8 29) #7
  %43 = bitcast <4 x double> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %23, <4 x double> %30, i8 30) #7
  %48 = bitcast <4 x double> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %50) #7
  %52 = fmul <4 x double> %51, %26
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %26, <4 x double> %53) #7
  %55 = fadd <4 x double> %30, %52
  %56 = fsub <4 x double> %55, %30
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> %30, %57
  %59 = fsub <4 x double> %52, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fadd <4 x double> %29, %54
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fsub <4 x double> %55, %63
  %65 = fadd <4 x double> %62, %64
  %66 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %63, <4 x double> %13, i8 17) #7
  %67 = bitcast <4 x double> %66 to <4 x i64>
  %68 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %70 = and <2 x i64> %69, %68
  %71 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %70, <2 x i64> <i64 -1, i64 -1>) #7
  %72 = icmp eq i32 %71, 0
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp ult i32 %73, 21
  %75 = and i1 %72, %74
  br i1 %75, label %27, label %76

; <label>:76:                                     ; preds = %27
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #7
  %78 = fmul <4 x double> %77, %63
  %79 = fadd <4 x double> %63, %65
  %80 = fcmp oeq <4 x double> %79, %13
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> zeroinitializer, <4 x double> %82) #7
  %84 = bitcast <4 x double> %83 to <4 x i64>
  %85 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = xor <4 x i64> %85, %84
  %87 = bitcast <4 x i64> %86 to <4 x double>
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %11, <4 x double> %13, i8 17) #7
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> %0, <4 x double> %88) #7
  %90 = fcmp oeq <4 x double> %13, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i64>
  %92 = bitcast <4 x i64> %91 to <4 x double>
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %89, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %92) #7
  ret <4 x double> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_remainderd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x20000000000000, double 0x20000000000000, double 0x20000000000000, double 0x20000000000000>, i8 17) #7
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #7
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #7
  %14 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #7
  %15 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <4 x double> %13, <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <4 x double> %13, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <4 x double> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  br label %21

; <label>:21:                                     ; preds = %2, %48
  %22 = phi i32 [ 0, %2 ], [ %80, %48 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %65, %48 ]
  %24 = phi <4 x double> [ zeroinitializer, %2 ], [ %79, %48 ]
  %25 = phi <4 x double> [ %11, %2 ], [ %77, %48 ]
  %26 = fmul <4 x double> %15, %25
  %27 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %26, i32 8) #7
  %28 = bitcast <4 x double> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <4 x i64> %29 to <4 x double>
  %31 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %16, i8 17) #7
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %31) #7
  %33 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %17, i8 17) #7
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = fcmp oeq <4 x double> %17, %30
  %36 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %37 = select <4 x i1> %35, <4 x i64> %36, <4 x i64> zeroinitializer
  %38 = or <4 x i64> %37, %34
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %39) #7
  %41 = fcmp oeq <4 x double> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %44, %43
  %46 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %45, <2 x i64> <i64 -1, i64 -1>) #7
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %82

; <label>:48:                                     ; preds = %21
  %49 = fmul <4 x double> %40, %20
  %50 = bitcast <4 x double> %49 to <4 x i64>
  %51 = and <4 x i64> %50, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = fcmp oeq <4 x double> %52, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = and <4 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <4 x i64> %55, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = fadd <4 x double> %40, %57
  %59 = bitcast <4 x i64> %54 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> %58, <4 x double> %59) #7
  %61 = fmul <4 x double> %60, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %61, i32 11) #7
  %63 = fcmp une <4 x double> %62, %61
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = xor <4 x i64> %23, %64
  %66 = fmul <4 x double> %60, %20
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %66
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %20, <4 x double> %67) #7
  %69 = fadd <4 x double> %25, %66
  %70 = fsub <4 x double> %69, %25
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %25, %71
  %73 = fsub <4 x double> %66, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %24, %68
  %76 = fadd <4 x double> %75, %74
  %77 = fadd <4 x double> %69, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fadd <4 x double> %76, %78
  %80 = add nuw nsw i32 %22, 1
  %81 = icmp ult i32 %80, 21
  br i1 %81, label %21, label %82

; <label>:82:                                     ; preds = %21, %48
  %83 = phi <4 x double> [ %25, %21 ], [ %77, %48 ]
  %84 = fmul <4 x double> %14, %83
  %85 = bitcast <4 x double> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <4 x double>
  %89 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <4 x i1> %89 to <4 x i64>
  %91 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #7
  %95 = bitcast <4 x i64> %90 to <4 x double>
  %96 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %94, <4 x double> %95) #7
  %97 = fcmp oeq <4 x double> %13, zeroinitializer
  %98 = sext <4 x i1> %97 to <4 x i64>
  %99 = bitcast <4 x i64> %98 to <4 x double>
  %100 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %96, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %99) #7
  ret <4 x double> %100
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_tgammad4_u10avx2(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x double>, <4 x double>* %4, align 32
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x double>, <4 x double>* %6, align 32
  %8 = fadd <4 x double> %5, %7
  %9 = fmul <4 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %9, i32 8) #7
  %11 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %10) #7
  %12 = fmul <4 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <4 x double> %5, %12
  %14 = fsub <4 x double> %13, %5
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %5, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %18
  %20 = fmul <4 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <4 x double> %20, %13
  %22 = fsub <4 x double> %21, %13
  %23 = fsub <4 x double> %21, %22
  %24 = fsub <4 x double> %13, %23
  %25 = fsub <4 x double> %20, %22
  %26 = fadd <4 x double> %25, %24
  %27 = fadd <4 x double> %26, %19
  %28 = fmul <4 x double> %21, %21
  %29 = fadd <4 x double> %21, %21
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %21, <4 x double> %30) #7
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %27, <4 x double> %31) #7
  %33 = fmul <4 x double> %28, %28
  %34 = fadd <4 x double> %28, %28
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %28, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %32, <4 x double> %36) #7
  %38 = fmul <4 x double> %33, %33
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %43, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %42, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %39, <4 x double> %46) #7
  %48 = fmul <4 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %50) #7
  %52 = fadd <4 x double> %48, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <4 x double> %48, %53
  %55 = fadd <4 x double> %54, %51
  %56 = fmul <4 x double> %21, %52
  %57 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %21, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %58) #7
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %27, <4 x double> %59) #7
  %61 = fadd <4 x double> %56, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <4 x double> %56, %62
  %64 = fadd <4 x double> %63, %60
  %65 = fmul <4 x double> %21, %61
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %21, <4 x double> %66) #7
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %21, <4 x double> %67) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %27, <4 x double> %68) #7
  %70 = fadd <4 x double> %65, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <4 x double> %65, %71
  %73 = fadd <4 x double> %72, %69
  %74 = fmul <4 x double> %33, %47
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %47, <4 x double> %75) #7
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %47, <4 x double> %76) #7
  %78 = fadd <4 x double> %70, %74
  %79 = fsub <4 x double> %70, %78
  %80 = fadd <4 x double> %74, %79
  %81 = fadd <4 x double> %80, %73
  %82 = fadd <4 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add nsw <4 x i32> %83, <i32 1023, i32 1023, i32 1023, i32 1023>
  %85 = zext <4 x i32> %84 to <4 x i64>
  %86 = shl nuw <4 x i64> %85, <i64 32, i64 32, i64 32, i64 32>
  %87 = bitcast <4 x i64> %86 to <8 x i32>
  %88 = shl <8 x i32> %87, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <8 x i32> %88 to <4 x double>
  %90 = fmul <4 x double> %78, %89
  %91 = add <4 x i32> %11, <i32 1023, i32 1023, i32 1023, i32 1023>
  %92 = sub <4 x i32> %91, %83
  %93 = zext <4 x i32> %92 to <4 x i64>
  %94 = shl nuw <4 x i64> %93, <i64 32, i64 32, i64 32, i64 32>
  %95 = bitcast <4 x i64> %94 to <8 x i32>
  %96 = shl <8 x i32> %95, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %97 = bitcast <8 x i32> %96 to <4 x double>
  %98 = fmul <4 x double> %90, %97
  %99 = fmul <4 x double> %82, %89
  %100 = fmul <4 x double> %99, %97
  %101 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %102 = bitcast <4 x double> %101 to <4 x i64>
  %103 = bitcast <4 x double> %98 to <4 x i64>
  %104 = xor <4 x i64> %102, <i64 -1, i64 -1, i64 -1, i64 -1>
  %105 = and <4 x i64> %104, %103
  %106 = bitcast <4 x double> %100 to <4 x i64>
  %107 = and <4 x i64> %106, %104
  %108 = bitcast <4 x i64> %105 to <4 x double>
  %109 = bitcast <4 x i64> %107 to <4 x double>
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %111 = load <4 x double>, <4 x double>* %110, align 32
  %112 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %113 = load <4 x double>, <4 x double>* %112, align 32
  %114 = fmul <4 x double> %111, %108
  %115 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %114
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %111, <4 x double> %115) #7
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %109, <4 x double> %111, <4 x double> %116) #7
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %113, <4 x double> %117) #7
  %119 = fadd <4 x double> %114, %118
  %120 = fcmp oeq <4 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>
  %121 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %122 = bitcast <4 x double> %121 to <4 x i64>
  %123 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  %124 = fcmp oeq <4 x double> %123, %0
  %125 = select <4 x i1> %124, <4 x i64> %122, <4 x i64> zeroinitializer
  %126 = select <4 x i1> %120, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %125
  %127 = bitcast <4 x double> %0 to <4 x i64>
  %128 = and <4 x i64> %127, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %129 = bitcast <4 x i64> %128 to <4 x double>
  %130 = fcmp une <4 x double> %129, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = fcmp ord <4 x double> %0, zeroinitializer
  %132 = and <4 x i1> %130, %131
  %133 = fcmp uno <4 x double> %119, zeroinitializer
  %134 = and <4 x i1> %133, %132
  %135 = select <4 x i1> %134, <4 x i64> %122, <4 x i64> zeroinitializer
  %136 = or <4 x i64> %126, %135
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %137) #7
  %139 = fcmp oeq <4 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %140 = or <4 x i1> %132, %139
  %141 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000>, i8 29) #7
  %142 = bitcast <4 x double> %141 to <4 x i64>
  %143 = select <4 x i1> %140, <4 x i64> %142, <4 x i64> zeroinitializer
  %144 = fcmp oeq <4 x double> %0, zeroinitializer
  %145 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 2.000000e+02, double 2.000000e+02, double 2.000000e+02, double 2.000000e+02>, i8 30) #7
  %146 = bitcast <4 x double> %145 to <4 x i64>
  %147 = fcmp uno <4 x double> %138, zeroinitializer
  %148 = or <4 x i1> %147, %144
  %149 = select <4 x i1> %148, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %146
  %150 = and <4 x i64> %149, %143
  %151 = and <4 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = or <4 x i64> %151, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %153 = bitcast <4 x i64> %152 to <4 x double>
  %154 = bitcast <4 x i64> %150 to <4 x double>
  %155 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> %153, <4 x double> %154) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <4 x double> %155
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, <4 x double>) unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e-306, double 1.000000e-306, double 1.000000e-306, double 1.000000e-306>, i8 17) #7
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = xor <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %10 = bitcast <4 x i64> %9 to <4 x double>
  %11 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = fadd <4 x double> %11, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %13 = fsub <4 x double> %11, %12
  %14 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = fsub <4 x double> %10, %12
  %16 = fadd <4 x double> %15, %14
  %17 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %11, <4 x double> %7) #7
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %7) #7
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %6) #7
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> zeroinitializer, <4 x double> %6) #7
  %21 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %19, i8 18) #7
  %22 = bitcast <4 x double> %21 to <4 x i64>
  %23 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %19, <4 x double> <double 1.100000e+00, double 1.100000e+00, double 1.100000e+00, double 1.100000e+00>, i8 18) #7
  %24 = bitcast <4 x double> %23 to <4 x i64>
  %25 = and <4 x i64> %24, %22
  %26 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 2.300000e+00, double 2.300000e+00, double 2.300000e+00, double 2.300000e+00>, <4 x double> %19, i8 18) #7
  %27 = bitcast <4 x double> %26 to <4 x i64>
  %28 = fadd <4 x double> %19, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <4 x double> %28, %19
  %30 = fsub <4 x double> %28, %29
  %31 = fsub <4 x double> %19, %30
  %32 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %29
  %33 = fadd <4 x double> %32, %31
  %34 = fadd <4 x double> %20, %33
  %35 = fmul <4 x double> %19, %28
  %36 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %19, <4 x double> %36) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %19, <4 x double> %37) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %20, <4 x double> %38) #7
  %40 = fadd <4 x double> %35, %39
  %41 = fsub <4 x double> %35, %40
  %42 = fadd <4 x double> %39, %41
  %43 = fadd <4 x double> %19, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %44 = fsub <4 x double> %43, %19
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %19, %45
  %47 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %20, %48
  %50 = fmul <4 x double> %43, %40
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %40, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %40, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %42, <4 x double> %53) #7
  %55 = fadd <4 x double> %50, %54
  %56 = fsub <4 x double> %50, %55
  %57 = fadd <4 x double> %54, %56
  %58 = fadd <4 x double> %19, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %59 = fsub <4 x double> %58, %19
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %19, %60
  %62 = fsub <4 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %20, %63
  %65 = fmul <4 x double> %58, %55
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %55, <4 x double> %66) #7
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %55, <4 x double> %67) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %57, <4 x double> %68) #7
  %70 = fadd <4 x double> %65, %69
  %71 = fsub <4 x double> %65, %70
  %72 = fadd <4 x double> %69, %71
  %73 = fadd <4 x double> %19, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %74 = fsub <4 x double> %73, %19
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %19, %75
  %77 = fsub <4 x double> <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %20, %78
  %80 = fmul <4 x double> %73, %70
  %81 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %80
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %70, <4 x double> %81) #7
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %79, <4 x double> %70, <4 x double> %82) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %72, <4 x double> %83) #7
  %85 = fadd <4 x double> %80, %84
  %86 = fsub <4 x double> %80, %85
  %87 = fadd <4 x double> %84, %86
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %19, <4 x double> <double 7.000000e+00, double 7.000000e+00, double 7.000000e+00, double 7.000000e+00>, i8 18) #7
  %89 = bitcast <4 x double> %88 to <4 x i64>
  %90 = and <4 x i64> %89, %27
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %85, <4 x double> %91) #7
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %87, <4 x double> %91) #7
  %94 = fadd <4 x double> %19, <double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00>
  %95 = fsub <4 x double> %94, %19
  %96 = fsub <4 x double> %94, %95
  %97 = fsub <4 x double> %19, %96
  %98 = fsub <4 x double> <double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00>, %95
  %99 = fadd <4 x double> %98, %97
  %100 = fadd <4 x double> %20, %99
  %101 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %19, <4 x double> %94, <4 x double> %91) #7
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %100, <4 x double> %91) #7
  %103 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %101
  %104 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double -2.000000e+00, double -1.000000e+00, double -2.000000e+00, double -1.000000e+00>, <4 x i64> %25) #7
  %105 = fadd <4 x double> %101, %104
  %106 = fsub <4 x double> %105, %101
  %107 = fsub <4 x double> %105, %106
  %108 = fsub <4 x double> %101, %107
  %109 = fsub <4 x double> %104, %106
  %110 = fadd <4 x double> %109, %108
  %111 = fadd <4 x double> %102, %110
  %112 = fadd <4 x double> %105, %111
  %113 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %112, <4 x double> %103, <4 x double> %26) #7
  %114 = bitcast <4 x i64> %25 to <4 x double>
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x700000006, double 0x700000006, double 0x700000006, double 0x700000006>, <4 x double> <double 0x500000004, double 0x500000004, double 0x500000004, double 0x500000004>, <4 x double> %114) #7
  %116 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %115, <4 x double> <double 0x300000002, double 0x300000002, double 0x300000002, double 0x300000002>, <4 x double> %114) #7
  %117 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %116, <4 x double> <double 0x100000000, double 0x100000000, double 0x100000000, double 0x100000000>, <4 x double> %26) #7
  %118 = bitcast <4 x double> %117 to <8 x i32>
  %119 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 742476813, i32 -1067214427, i32 -1132839263, i32 1077770922, i32 -888318577, i32 1047723462, i32 -888318577, i32 1047723462>, <8 x i32> %118) #7
  %120 = bitcast <8 x i32> %119 to <4 x double>
  %121 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1451925470, i32 1072819920, i32 -946845511, i32 1080034475, i32 1310374134, i32 1050339284, i32 1310374134, i32 1050339284>, <8 x i32> %118) #7
  %122 = bitcast <8 x i32> %121 to <4 x double>
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> %113, <4 x double> %122) #7
  %124 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1075560960, i32 1076546500, i32 141567866, i32 1081105426, i32 612850278, i32 1051816770, i32 612850278, i32 1051816770>, <8 x i32> %118) #7
  %125 = bitcast <8 x i32> %124 to <4 x double>
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %113, <4 x double> %125) #7
  %127 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 242686868, i32 -1078077958, i32 -1882531841, i32 1081379644, i32 1846738656, i32 1052331599, i32 1846738656, i32 1052331599>, <8 x i32> %118) #7
  %128 = bitcast <8 x i32> %127 to <4 x double>
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %113, <4 x double> %128) #7
  %130 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 958515559, i32 -1074379567, i32 -1943806203, i32 1081187592, i32 1241799408, i32 1052089480, i32 1241799408, i32 1052089480>, <8 x i32> %118) #7
  %131 = bitcast <8 x i32> %130 to <4 x double>
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %129, <4 x double> %113, <4 x double> %131) #7
  %133 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1222964105, i32 1066325437, i32 -843099589, i32 1080400830, i32 180592127, i32 1050662507, i32 180592127, i32 1050662507>, <8 x i32> %118) #7
  %134 = bitcast <8 x i32> %133 to <4 x double>
  %135 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %113, <4 x double> %134) #7
  %136 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1450406972, i32 1070005035, i32 -568744966, i32 1079205680, i32 2059508425, i32 -1099851665, i32 2059508425, i32 -1099851665>, <8 x i32> %118) #7
  %137 = bitcast <8 x i32> %136 to <4 x double>
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %113, <4 x double> %137) #7
  %139 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -214643427, i32 -1083943785, i32 -1161318274, i32 1077485801, i32 302838967, i32 -1097505000, i32 302838967, i32 -1097505000>, <8 x i32> %118) #7
  %140 = bitcast <8 x i32> %139 to <4 x double>
  %141 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %138, <4 x double> %113, <4 x double> %140) #7
  %142 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1947367749, i32 -1080148850, i32 -215298188, i32 1075253553, i32 -644233612, i32 1048722710, i32 -644233612, i32 1048722710>, <8 x i32> %118) #7
  %143 = bitcast <8 x i32> %142 to <4 x double>
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %113, <4 x double> %143) #7
  %145 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 26951279, i32 1061270331, i32 1181477659, i32 1072120783, i32 772225398, i32 -1096997167, i32 772225398, i32 -1096997167>, <8 x i32> %118) #7
  %146 = bitcast <8 x i32> %145 to <4 x double>
  %147 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %144, <4 x double> %113, <4 x double> %146) #7
  %148 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1622523877, i32 1064974953, i32 114771631, i32 1068859102, i32 -2073682874, i32 1051742403, i32 -2073682874, i32 1051742403>, <8 x i32> %118) #7
  %149 = bitcast <8 x i32> %148 to <4 x double>
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %147, <4 x double> %113, <4 x double> %149) #7
  %151 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 289696063, i32 -1088074460, i32 -279215188, i32 -1078655610, i32 -205353638, i32 -1094642131, i32 -205353638, i32 -1094642131>, <8 x i32> %118) #7
  %152 = bitcast <8 x i32> %151 to <4 x double>
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> %113, <4 x double> %152) #7
  %154 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1351258914, i32 -1084269124, i32 -575020241, i32 1068596055, i32 -400593996, i32 1053972444, i32 -400593996, i32 1053972444>, <8 x i32> %118) #7
  %155 = bitcast <8 x i32> %154 to <4 x double>
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %113, <4 x double> %155) #7
  %157 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1686563862, i32 1058202399, i32 -1488785714, i32 -1078739341, i32 99395774, i32 -1092367351, i32 99395774, i32 -1092367351>, <8 x i32> %118) #7
  %158 = bitcast <8 x i32> %157 to <4 x double>
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %113, <4 x double> %158) #7
  %160 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -965679472, i32 1061913145, i32 196212938, i32 1068849167, i32 -495818039, i32 1056276704, i32 -495818039, i32 1056276704>, <8 x i32> %118) #7
  %161 = bitcast <8 x i32> %160 to <4 x double>
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %113, <4 x double> %161) #7
  %163 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -751540463, i32 -1089790603, i32 -379354422, i32 -1078507399, i32 -1971841319, i32 -1090023964, i32 -1971841319, i32 -1090023964>, <8 x i32> %118) #7
  %164 = bitcast <8 x i32> %163 to <4 x double>
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %162, <4 x double> %113, <4 x double> %164) #7
  %166 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1111917752, i32 -1086101645, i32 587580345, i32 1069129761, i32 222149501, i32 1058673275, i32 222149501, i32 1058673275>, <8 x i32> %118) #7
  %167 = bitcast <8 x i32> %166 to <4 x double>
  %168 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> %113, <4 x double> %167) #7
  %169 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1211744312, i32 1058162528, i32 1576332569, i32 -1078165401, i32 -895653089, i32 -1087553580, i32 -895653089, i32 -1087553580>, <8 x i32> %118) #7
  %170 = bitcast <8 x i32> %169 to <4 x double>
  %171 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %113, <4 x double> %170) #7
  %172 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1752494788, i32 1061794047, i32 1715275992, i32 1069551795, i32 -127993979, i32 1061204842, i32 -127993979, i32 1061204842>, <8 x i32> %118) #7
  %173 = bitcast <8 x i32> %172 to <4 x double>
  %174 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %171, <4 x double> %113, <4 x double> %173) #7
  %175 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1180674137, i32 -1087499314, i32 500638563, i32 -1077776326, i32 -1027796790, i32 -1085044027, i32 -1027796790, i32 -1085044027>, <8 x i32> %118) #7
  %176 = bitcast <8 x i32> %175 to <4 x double>
  %177 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %174, <4 x double> %113, <4 x double> %176) #7
  %178 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1898269496, i32 -1083836634, i32 -1325105618, i32 1069921292, i32 -354717088, i32 1063759318, i32 -354717088, i32 1063759318>, <8 x i32> %118) #7
  %179 = bitcast <8 x i32> %178 to <4 x double>
  %180 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %177, <4 x double> %113, <4 x double> %179) #7
  %181 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 477218588, i32 1064071623, i32 397032456, i32 -1077245028, i32 -1038551017, i32 -1082245041, i32 -1038551017, i32 -1082245041>, <8 x i32> %118) #7
  %182 = bitcast <8 x i32> %181 to <4 x double>
  %183 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %180, <4 x double> %113, <4 x double> %182) #7
  %184 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1431655765, i32 1068848469, i32 717740051, i32 1070682418, i32 -1401060219, i32 1066734370, i32 -1401060219, i32 1066734370>, <8 x i32> %118) #7
  %185 = bitcast <8 x i32> %184 to <4 x double>
  %186 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> %113, <4 x double> %185) #7
  %187 = fadd <4 x double> %101, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %188 = fsub <4 x double> %187, %101
  %189 = fsub <4 x double> %187, %188
  %190 = fsub <4 x double> %101, %189
  %191 = fsub <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>, %188
  %192 = fadd <4 x double> %191, %190
  %193 = fadd <4 x double> %102, %192
  %194 = fmul <4 x double> %101, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %195 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %194, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %196 = fmul <4 x double> %194, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %197 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %194, <4 x double> %196, <4 x double> %195) #7
  %198 = bitcast <4 x double> %197 to <4 x i64>
  %199 = shufflevector <4 x i64> %198, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %200 = bitcast <2 x i64> %199 to <4 x float>
  %201 = shufflevector <4 x float> %200, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %202 = bitcast <4 x float> %201 to <2 x i64>
  %203 = shufflevector <4 x i64> %198, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %204 = bitcast <2 x i64> %203 to <4 x float>
  %205 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %204, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %206 = bitcast <4 x float> %205 to <2 x i64>
  %207 = or <2 x i64> %206, %202
  %208 = bitcast <2 x i64> %207 to <4 x i32>
  %209 = lshr <4 x i32> %208, <i32 20, i32 20, i32 20, i32 20>
  %210 = bitcast <4 x double> %195 to <8 x i32>
  %211 = shufflevector <8 x i32> %210, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %212 = bitcast <8 x i32> %211 to <4 x i64>
  %213 = shufflevector <4 x i64> %212, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %214 = bitcast <2 x i64> %213 to <16 x i8>
  %215 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %214) #7
  %216 = bitcast <16 x i8> %215 to <4 x i32>
  %217 = sub <4 x i32> %209, %216
  %218 = sub <4 x i32> zeroinitializer, %217
  %219 = ashr <4 x i32> %218, <i32 1, i32 1, i32 1, i32 1>
  %220 = add nsw <4 x i32> %219, <i32 1023, i32 1023, i32 1023, i32 1023>
  %221 = zext <4 x i32> %220 to <4 x i64>
  %222 = shl nuw <4 x i64> %221, <i64 32, i64 32, i64 32, i64 32>
  %223 = bitcast <4 x i64> %222 to <8 x i32>
  %224 = shl <8 x i32> %223, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %225 = bitcast <8 x i32> %224 to <4 x double>
  %226 = fmul <4 x double> %101, %225
  %227 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %217
  %228 = sub <4 x i32> %227, %219
  %229 = zext <4 x i32> %228 to <4 x i64>
  %230 = shl nuw <4 x i64> %229, <i64 32, i64 32, i64 32, i64 32>
  %231 = bitcast <4 x i64> %230 to <8 x i32>
  %232 = shl <8 x i32> %231, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %233 = bitcast <8 x i32> %232 to <4 x double>
  %234 = fmul <4 x double> %226, %233
  %235 = fmul <4 x double> %102, %225
  %236 = fmul <4 x double> %235, %233
  %237 = fadd <4 x double> %234, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %238 = fsub <4 x double> %237, %234
  %239 = fsub <4 x double> %237, %238
  %240 = fsub <4 x double> %234, %239
  %241 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %238
  %242 = fadd <4 x double> %241, %240
  %243 = fadd <4 x double> %236, %242
  %244 = fadd <4 x double> %234, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %245 = fsub <4 x double> %244, %234
  %246 = fsub <4 x double> %244, %245
  %247 = fsub <4 x double> %234, %246
  %248 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %245
  %249 = fadd <4 x double> %248, %247
  %250 = fadd <4 x double> %236, %249
  %251 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %244
  %252 = fmul <4 x double> %237, %251
  %253 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %252
  %254 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %251, <4 x double> %237, <4 x double> %253) #7
  %255 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %244
  %256 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %255, <4 x double> %251, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %257 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %250
  %258 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %257, <4 x double> %251, <4 x double> %256) #7
  %259 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %243, <4 x double> %251, <4 x double> %254) #7
  %260 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %252, <4 x double> %258, <4 x double> %259) #7
  %261 = fmul <4 x double> %252, %252
  %262 = fadd <4 x double> %252, %252
  %263 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %261
  %264 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %252, <4 x double> %252, <4 x double> %263) #7
  %265 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %262, <4 x double> %260, <4 x double> %264) #7
  %266 = fmul <4 x double> %261, %261
  %267 = fmul <4 x double> %266, %266
  %268 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %269 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %266, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %268) #7
  %270 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %271 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %272 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %266, <4 x double> %270, <4 x double> %271) #7
  %273 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %267, <4 x double> %269, <4 x double> %272) #7
  %274 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %273, <4 x double> %261, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %275 = sitofp <4 x i32> %217 to <4 x double>
  %276 = fmul <4 x double> %275, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %277 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %276
  %278 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %275, <4 x double> %277) #7
  %279 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %275, <4 x double> %278) #7
  %280 = fmul <4 x double> %252, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %281 = fmul <4 x double> %260, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %282 = fadd <4 x double> %276, %280
  %283 = fsub <4 x double> %276, %282
  %284 = fadd <4 x double> %280, %283
  %285 = fadd <4 x double> %279, %284
  %286 = fadd <4 x double> %281, %285
  %287 = fmul <4 x double> %252, %261
  %288 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %287
  %289 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> %252, <4 x double> %288) #7
  %290 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> %252, <4 x double> %289) #7
  %291 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> %260, <4 x double> %290) #7
  %292 = fmul <4 x double> %274, %287
  %293 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %292
  %294 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %287, <4 x double> %274, <4 x double> %293) #7
  %295 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %291, <4 x double> %274, <4 x double> %294) #7
  %296 = fadd <4 x double> %282, %292
  %297 = fsub <4 x double> %282, %296
  %298 = fadd <4 x double> %292, %297
  %299 = fadd <4 x double> %298, %286
  %300 = fadd <4 x double> %295, %299
  %301 = fmul <4 x double> %187, %296
  %302 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %301
  %303 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> %296, <4 x double> %302) #7
  %304 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %193, <4 x double> %296, <4 x double> %303) #7
  %305 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> %300, <4 x double> %304) #7
  %306 = bitcast <4 x double> %101 to <4 x i64>
  %307 = xor <4 x i64> %306, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %308 = bitcast <4 x double> %102 to <4 x i64>
  %309 = xor <4 x i64> %308, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %310 = bitcast <4 x i64> %307 to <4 x double>
  %311 = bitcast <4 x i64> %309 to <4 x double>
  %312 = fadd <4 x double> %301, %310
  %313 = fsub <4 x double> %312, %301
  %314 = fsub <4 x double> %312, %313
  %315 = fsub <4 x double> %301, %314
  %316 = fsub <4 x double> %310, %313
  %317 = fadd <4 x double> %316, %315
  %318 = fadd <4 x double> %305, %311
  %319 = fadd <4 x double> %318, %317
  %320 = fadd <4 x double> %312, <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>
  %321 = fsub <4 x double> %320, %312
  %322 = fsub <4 x double> %320, %321
  %323 = fsub <4 x double> %312, %322
  %324 = fsub <4 x double> <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>, %321
  %325 = fadd <4 x double> %324, %323
  %326 = fadd <4 x double> %319, <double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF>
  %327 = fadd <4 x double> %325, %326
  %328 = fmul <4 x double> %113, %186
  %329 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %328
  %330 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %186, <4 x double> %113, <4 x double> %329) #7
  %331 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBFB13E001A557607, double 0xBFD9A4D55BEAB2D8, double 0xBFB13E001A557607, double 0xBFD9A4D55BEAB2D8>, <4 x i64> %25) #7
  %332 = fadd <4 x double> %328, %331
  %333 = fsub <4 x double> %332, %328
  %334 = fsub <4 x double> %332, %333
  %335 = fsub <4 x double> %328, %334
  %336 = fsub <4 x double> %331, %333
  %337 = fadd <4 x double> %336, %335
  %338 = fadd <4 x double> %330, %337
  %339 = fmul <4 x double> %113, %332
  %340 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %339
  %341 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %332, <4 x double> %113, <4 x double> %340) #7
  %342 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %338, <4 x double> %113, <4 x double> %341) #7
  %343 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3FD4A34CC4A60FA6, double 0x3FEA51A6625307D3, double 0x3FD4A34CC4A60FA6, double 0x3FEA51A6625307D3>, <4 x i64> %25) #7
  %344 = fadd <4 x double> %339, %343
  %345 = fsub <4 x double> %344, %339
  %346 = fsub <4 x double> %344, %345
  %347 = fsub <4 x double> %339, %346
  %348 = fsub <4 x double> %343, %345
  %349 = fadd <4 x double> %348, %347
  %350 = fadd <4 x double> %342, %349
  %351 = fmul <4 x double> %113, %344
  %352 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %351
  %353 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %344, <4 x double> %113, <4 x double> %352) #7
  %354 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %350, <4 x double> %113, <4 x double> %353) #7
  %355 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3FDB0EE6072093CE, double 0xBFE2788CFC6FB619, double 0x3FDB0EE6072093CE, double 0xBFE2788CFC6FB619>, <4 x i64> %25) #7
  %356 = fadd <4 x double> %351, %355
  %357 = fsub <4 x double> %356, %351
  %358 = fsub <4 x double> %356, %357
  %359 = fsub <4 x double> %351, %358
  %360 = fsub <4 x double> %355, %357
  %361 = fadd <4 x double> %360, %359
  %362 = fadd <4 x double> %354, %361
  %363 = fmul <4 x double> %113, %356
  %364 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %363
  %365 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %356, <4 x double> %113, <4 x double> %364) #7
  %366 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %362, <4 x double> %113, <4 x double> %365) #7
  %367 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %363, <4 x double> %320, <4 x double> %26) #7
  %368 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %366, <4 x double> %327, <4 x double> %26) #7
  %369 = fadd <4 x double> %328, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %370 = fsub <4 x double> %369, %328
  %371 = fsub <4 x double> %369, %370
  %372 = fsub <4 x double> %328, %371
  %373 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %370
  %374 = fadd <4 x double> %373, %372
  %375 = fadd <4 x double> %374, %330
  %376 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %369, <4 x double> %26) #7
  %377 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %375, <4 x double> %26) #7
  %378 = bitcast <4 x double> %367 to <4 x i64>
  %379 = xor <4 x i64> %378, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %380 = bitcast <4 x double> %368 to <4 x i64>
  %381 = xor <4 x i64> %380, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %382 = bitcast <4 x i64> %379 to <4 x double>
  %383 = bitcast <4 x i64> %381 to <4 x double>
  %384 = fadd <4 x double> %382, <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>
  %385 = fadd <4 x double> %384, <double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD>
  %386 = fsub <4 x double> %384, %385
  %387 = fsub <4 x double> <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>, %386
  %388 = fsub <4 x double> %382, %385
  %389 = fadd <4 x double> %388, %387
  %390 = fadd <4 x double> %383, <double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088>
  %391 = fadd <4 x double> %390, %389
  %392 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %367, <4 x double> %384, <4 x double> %7) #7
  %393 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %368, <4 x double> %391, <4 x double> %7) #7
  %394 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %392, <4 x double> <double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650>, <4 x double> %6) #7
  %395 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %393, <4 x double> <double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E>, <4 x double> %6) #7
  %396 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %376, <4 x double> %92, <4 x double> %7) #7
  %397 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %377, <4 x double> %93, <4 x double> %7) #7
  %398 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %396, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %6) #7
  %399 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %397, <4 x double> zeroinitializer, <4 x double> %6) #7
  %400 = xor <4 x i64> %8, <i64 -1, i64 -1, i64 -1, i64 -1>
  %401 = shufflevector <4 x i64> %400, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %402 = shufflevector <4 x i64> %400, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %403 = and <2 x i64> %402, %401
  %404 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %403, <2 x i64> <i64 -1, i64 -1>) #7
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %504

; <label>:406:                                    ; preds = %2
  %407 = fmul <4 x double> %1, <double 0x3E30000000000000, double 0x3E30000000000000, double 0x3E30000000000000, double 0x3E30000000000000>
  %408 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %407) #7
  %409 = sitofp <4 x i32> %408 to <4 x double>
  %410 = fmul <4 x double> %409, <double 0x41B0000000000000, double 0x41B0000000000000, double 0x41B0000000000000, double 0x41B0000000000000>
  %411 = fsub <4 x double> %1, %410
  %412 = fmul <4 x double> %411, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %413 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %412) #7
  %414 = lshr <4 x i32> %413, <i32 31, i32 31, i32 31, i32 31>
  %415 = xor <4 x i32> %414, <i32 1, i32 1, i32 1, i32 1>
  %416 = add <4 x i32> %415, %413
  %417 = and <4 x i32> %416, <i32 2, i32 2, i32 2, i32 2>
  %418 = icmp ne <4 x i32> %417, zeroinitializer
  %419 = sext <4 x i1> %418 to <4 x i32>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <2 x i64> %420, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %422 = bitcast <4 x i64> %421 to <8 x i32>
  %423 = shufflevector <8 x i32> %422, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %424 = bitcast <8 x i32> %423 to <4 x i64>
  %425 = and <4 x i32> %416, <i32 -2, i32 -2, i32 -2, i32 -2>
  %426 = sitofp <4 x i32> %425 to <4 x double>
  %427 = fsub <4 x double> %412, %426
  %428 = fmul <4 x double> %427, %427
  %429 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %428
  %430 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %427, <4 x double> %427, <4 x double> %429) #7
  %431 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B>, <4 x i64> %424) #7
  %432 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480>, <4 x i64> %424) #7
  %433 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %431, <4 x double> %428, <4 x double> %432) #7
  %434 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12>, <4 x i64> %424) #7
  %435 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %433, <4 x double> %428, <4 x double> %434) #7
  %436 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D>, <4 x i64> %424) #7
  %437 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %435, <4 x double> %428, <4 x double> %436) #7
  %438 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB>, <4 x i64> %424) #7
  %439 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %437, <4 x double> %428, <4 x double> %438) #7
  %440 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8>, <4 x i64> %424) #7
  %441 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %439, <4 x double> %428, <4 x double> %440) #7
  %442 = fmul <4 x double> %428, %441
  %443 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4>, <4 x i64> %424) #7
  %444 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C50B00000000000, double 0xBC33500000000000, double 0x3C50B00000000000, double 0xBC33500000000000>, <4 x i64> %424) #7
  %445 = fadd <4 x double> %442, %443
  %446 = fsub <4 x double> %445, %442
  %447 = fsub <4 x double> %445, %446
  %448 = fsub <4 x double> %442, %447
  %449 = fsub <4 x double> %443, %446
  %450 = fadd <4 x double> %449, %448
  %451 = fadd <4 x double> %444, %450
  %452 = fmul <4 x double> %428, %445
  %453 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %452
  %454 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %428, <4 x double> %445, <4 x double> %453) #7
  %455 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %430, <4 x double> %445, <4 x double> %454) #7
  %456 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %428, <4 x double> %451, <4 x double> %455) #7
  %457 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE>, <4 x i64> %424) #7
  %458 = tail call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> <double 0x3C81A80000000000, double 0xBC76900000000000, double 0x3C81A80000000000, double 0xBC76900000000000>, <4 x i64> %424) #7
  %459 = fadd <4 x double> %452, %457
  %460 = fsub <4 x double> %459, %452
  %461 = fsub <4 x double> %459, %460
  %462 = fsub <4 x double> %452, %461
  %463 = fsub <4 x double> %457, %460
  %464 = fadd <4 x double> %463, %462
  %465 = fadd <4 x double> %456, %458
  %466 = fadd <4 x double> %465, %464
  %467 = bitcast <8 x i32> %423 to <4 x double>
  %468 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %427, <4 x double> %428, <4 x double> %467) #7
  %469 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %430, <4 x double> %467) #7
  %470 = fmul <4 x double> %459, %468
  %471 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %470
  %472 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %459, <4 x double> %468, <4 x double> %471) #7
  %473 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %466, <4 x double> %468, <4 x double> %472) #7
  %474 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %459, <4 x double> %469, <4 x double> %473) #7
  %475 = fadd <4 x double> %470, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %476 = fsub <4 x double> %475, %470
  %477 = fsub <4 x double> %475, %476
  %478 = fsub <4 x double> %470, %477
  %479 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %476
  %480 = fadd <4 x double> %479, %478
  %481 = fadd <4 x double> %474, %480
  %482 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %470, <4 x double> %475, <4 x double> %467) #7
  %483 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %474, <4 x double> %481, <4 x double> %467) #7
  %484 = and <4 x i32> %416, <i32 4, i32 4, i32 4, i32 4>
  %485 = icmp ne <4 x i32> %484, zeroinitializer
  %486 = sext <4 x i1> %485 to <4 x i32>
  %487 = bitcast <4 x i32> %486 to <2 x i64>
  %488 = shufflevector <2 x i64> %487, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %489 = bitcast <4 x i64> %488 to <8 x i32>
  %490 = shufflevector <8 x i32> %489, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %491 = bitcast <8 x i32> %490 to <4 x i64>
  %492 = and <4 x i64> %491, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %493 = bitcast <4 x double> %482 to <4 x i64>
  %494 = xor <4 x i64> %492, %493
  %495 = bitcast <4 x double> %483 to <4 x i64>
  %496 = xor <4 x i64> %492, %495
  %497 = bitcast <4 x i64> %494 to <4 x double>
  %498 = bitcast <4 x i64> %496 to <4 x double>
  %499 = fmul <4 x double> %376, %497
  %500 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %499
  %501 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %376, <4 x double> %497, <4 x double> %500) #7
  %502 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %377, <4 x double> %497, <4 x double> %501) #7
  %503 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %376, <4 x double> %498, <4 x double> %502) #7
  br label %504

; <label>:504:                                    ; preds = %2, %406
  %505 = phi <4 x double> [ %499, %406 ], [ %101, %2 ]
  %506 = phi <4 x double> [ %503, %406 ], [ %102, %2 ]
  %507 = fmul <4 x double> %1, <double 0x4770000000000000, double 0x4770000000000000, double 0x4770000000000000, double 0x4770000000000000>
  %508 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %92, <4 x double> %505, <4 x double> %7) #7
  %509 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %93, <4 x double> %506, <4 x double> %7) #7
  %510 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %508, <4 x double> %507, <4 x double> %6) #7
  %511 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %509, <4 x double> zeroinitializer, <4 x double> %6) #7
  %512 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %510
  %513 = fmul <4 x double> %398, %512
  %514 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %513
  %515 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %512, <4 x double> %398, <4 x double> %514) #7
  %516 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %510
  %517 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %516, <4 x double> %512, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %518 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %511
  %519 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %518, <4 x double> %512, <4 x double> %517) #7
  %520 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %399, <4 x double> %512, <4 x double> %515) #7
  %521 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %513, <4 x double> %519, <4 x double> %520) #7
  %522 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store <4 x double> %394, <4 x double>* %522, align 32
  %523 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store <4 x double> %395, <4 x double>* %523, align 32
  %524 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store <4 x double> %513, <4 x double>* %524, align 32
  %525 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store <4 x double> %521, <4 x double>* %525, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_lgammad4_u10avx2(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x double>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <4 x double>
  %14 = bitcast <4 x i64> %12 to <4 x double>
  %15 = fmul <4 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %17 = fmul <4 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> %17, <4 x double> %16) #7
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = shufflevector <4 x float> %21, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %25, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %27 = bitcast <4 x float> %26 to <2 x i64>
  %28 = or <2 x i64> %27, %23
  %29 = bitcast <2 x i64> %28 to <4 x i32>
  %30 = lshr <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x double> %16 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = bitcast <8 x i32> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %35) #7
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = sub <4 x i32> %30, %37
  %39 = sub <4 x i32> zeroinitializer, %38
  %40 = ashr <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %41 = add nsw <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = zext <4 x i32> %41 to <4 x i64>
  %43 = shl nuw <4 x i64> %42, <i64 32, i64 32, i64 32, i64 32>
  %44 = bitcast <4 x i64> %43 to <8 x i32>
  %45 = shl <8 x i32> %44, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %46 = bitcast <8 x i32> %45 to <4 x double>
  %47 = fmul <4 x double> %13, %46
  %48 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %38
  %49 = sub <4 x i32> %48, %40
  %50 = zext <4 x i32> %49 to <4 x i64>
  %51 = shl nuw <4 x i64> %50, <i64 32, i64 32, i64 32, i64 32>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = shl <8 x i32> %52, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <8 x i32> %53 to <4 x double>
  %55 = fmul <4 x double> %47, %54
  %56 = fmul <4 x double> %14, %46
  %57 = fmul <4 x double> %56, %54
  %58 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %59 = fsub <4 x double> %58, %55
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %55, %60
  %62 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %57, %63
  %65 = fadd <4 x double> %55, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fsub <4 x double> %65, %55
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %55, %67
  %69 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %57, %70
  %72 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %65
  %73 = fmul <4 x double> %58, %72
  %74 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %73
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %58, <4 x double> %74) #7
  %76 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %76, <4 x double> %72, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %78 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %72, <4 x double> %77) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %72, <4 x double> %75) #7
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %79, <4 x double> %80) #7
  %82 = fmul <4 x double> %73, %73
  %83 = fadd <4 x double> %73, %73
  %84 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %73, <4 x double> %84) #7
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %81, <4 x double> %85) #7
  %87 = fmul <4 x double> %82, %82
  %88 = fmul <4 x double> %87, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %89) #7
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %91, <4 x double> %92) #7
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %88, <4 x double> %90, <4 x double> %93) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %82, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %96 = sitofp <4 x i32> %38 to <4 x double>
  %97 = fmul <4 x double> %96, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %97
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %96, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %96, <4 x double> %99) #7
  %101 = fmul <4 x double> %73, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %102 = fmul <4 x double> %81, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %103 = fadd <4 x double> %97, %101
  %104 = fsub <4 x double> %97, %103
  %105 = fadd <4 x double> %101, %104
  %106 = fadd <4 x double> %100, %105
  %107 = fadd <4 x double> %102, %106
  %108 = fmul <4 x double> %73, %82
  %109 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %73, <4 x double> %109) #7
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %73, <4 x double> %110) #7
  %112 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %81, <4 x double> %111) #7
  %113 = fmul <4 x double> %95, %108
  %114 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %113
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %95, <4 x double> %114) #7
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %95, <4 x double> %115) #7
  %117 = fadd <4 x double> %103, %113
  %118 = fsub <4 x double> %103, %117
  %119 = fadd <4 x double> %113, %118
  %120 = fadd <4 x double> %119, %107
  %121 = fadd <4 x double> %116, %120
  %122 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %123 = load <4 x double>, <4 x double>* %122, align 32
  %124 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %125 = load <4 x double>, <4 x double>* %124, align 32
  %126 = fadd <4 x double> %123, %117
  %127 = fsub <4 x double> %126, %123
  %128 = fsub <4 x double> %126, %127
  %129 = fsub <4 x double> %123, %128
  %130 = fsub <4 x double> %117, %127
  %131 = fadd <4 x double> %130, %129
  %132 = fadd <4 x double> %125, %121
  %133 = fadd <4 x double> %132, %131
  %134 = fadd <4 x double> %126, %133
  %135 = bitcast <4 x double> %0 to <4 x i64>
  %136 = and <4 x i64> %135, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = fcmp oeq <4 x double> %137, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %139 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 18) #7
  %140 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  %141 = fcmp oeq <4 x double> %140, %0
  %142 = fcmp une <4 x double> %137, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %143 = fcmp ord <4 x double> %0, zeroinitializer
  %144 = and <4 x i1> %142, %143
  %145 = fcmp uno <4 x double> %134, zeroinitializer
  %146 = and <4 x i1> %144, %145
  %147 = or <4 x i1> %146, %138
  %148 = select <4 x i1> %141, <4 x double> %139, <4 x double> zeroinitializer
  %149 = select <4 x i1> %147, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %148
  %150 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %134, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %149) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <4 x double> %150
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_erfd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 3.700000e+00, double 3.700000e+00, double 3.700000e+00, double 3.700000e+00>, i8 17) #7
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00>, i8 17) #7
  %8 = fmul <4 x double> %4, %4
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %8, <4 x double> %5) #7
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x700000006, double 0x700000006, double 0x700000006, double 0x700000006>, <4 x double> <double 0x500000004, double 0x500000004, double 0x500000004, double 0x500000004>, <4 x double> %6) #7
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> <double 0x300000002, double 0x300000002, double 0x300000002, double 0x300000002>, <4 x double> %6) #7
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> <double 0x100000000, double 0x100000000, double 0x100000000, double 0x100000000>, <4 x double> %5) #7
  %13 = bitcast <4 x double> %12 to <8 x i32>
  %14 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -88172389, i32 1002442494, i32 -1107541007, i32 1025499051, i32 -510495729, i32 -1134889313, i32 -510495729, i32 -1134889313>, <8 x i32> %13) #7
  %15 = bitcast <8 x i32> %14 to <4 x double>
  %16 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 112215029, i32 -1139808532, i32 -1177760924, i32 -1116041691, i32 458630921, i32 1019602114, i32 458630921, i32 1019602114>, <8 x i32> %13) #7
  %17 = bitcast <8 x i32> %16 to <4 x double>
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %9, <4 x double> %17) #7
  %19 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 2078149655, i32 1012246518, i32 -460557980, i32 1036323642, i32 -2053999367, i32 -1121915318, i32 -2053999367, i32 -1121915318>, <8 x i32> %13) #7
  %20 = bitcast <8 x i32> %19 to <4 x double>
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %9, <4 x double> %20) #7
  %22 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1274344300, i32 -1130752746, i32 730420832, i32 -1106962287, i32 -1773167686, i32 1030788595, i32 -1773167686, i32 1030788595>, <8 x i32> %13) #7
  %23 = bitcast <8 x i32> %22 to <4 x double>
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %9, <4 x double> %23) #7
  %25 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 110096040, i32 1021144981, i32 -402830587, i32 1044250755, i32 1686320128, i32 -1112074423, i32 1686320128, i32 -1112074423>, <8 x i32> %13) #7
  %26 = bitcast <8 x i32> %25 to <4 x double>
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %9, <4 x double> %26) #7
  %28 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -11458726, i32 -1122019623, i32 -1730483853, i32 -1099951341, i32 532897635, i32 1039682100, i32 532897635, i32 1039682100>, <8 x i32> %13) #7
  %29 = bitcast <8 x i32> %28 to <4 x double>
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %9, <4 x double> %29) #7
  %31 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -2079063301, i32 1029662777, i32 -229017715, i32 1050337732, i32 -1362900095, i32 -1103886033, i32 -1362900095, i32 -1103886033>, <8 x i32> %13) #7
  %32 = bitcast <8 x i32> %31 to <4 x double>
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %9, <4 x double> %32) #7
  %34 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1175978629, i32 -1113750445, i32 -402416960, i32 -1094589737, i32 771271320, i32 1047169725, i32 771271320, i32 1047169725>, <8 x i32> %13) #7
  %35 = bitcast <8 x i32> %34 to <4 x double>
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %9, <4 x double> %35) #7
  %37 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1571516468, i32 1037690541, i32 1572440250, i32 1055068538, i32 510476117, i32 -1097029153, i32 510476117, i32 -1097029153>, <8 x i32> %13) #7
  %38 = bitcast <8 x i32> %37 to <4 x double>
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %9, <4 x double> %38) #7
  %40 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -2118087779, i32 -1105912463, i32 -135383261, i32 -1090509616, i32 1483408747, i32 1053389724, i32 1483408747, i32 1053389724>, <8 x i32> %13) #7
  %41 = bitcast <8 x i32> %40 to <4 x double>
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %9, <4 x double> %41) #7
  %43 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 543295777, i32 1045417047, i32 1725019247, i32 1058334086, i32 -739022256, i32 -1091395532, i32 -739022256, i32 -1091395532>, <8 x i32> %13) #7
  %44 = bitcast <8 x i32> %43 to <4 x double>
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %9, <4 x double> %44) #7
  %46 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -331094585, i32 -1098516670, i32 -712069735, i32 -1088278308, i32 564607358, i32 1058429114, i32 564607358, i32 1058429114>, <8 x i32> %13) #7
  %47 = bitcast <8 x i32> %46 to <4 x double>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %9, <4 x double> %47) #7
  %49 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1647947364, i32 1052483180, i32 951494373, i32 1058076090, i32 -1660697968, i32 -1087008594, i32 -1660697968, i32 -1087008594>, <8 x i32> %13) #7
  %50 = bitcast <8 x i32> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> %9, <4 x double> %50) #7
  %52 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1008680214, i32 -1091613403, i32 1732786206, i32 1061183357, i32 -1688808870, i32 1062192743, i32 -1688808870, i32 1062192743>, <8 x i32> %13) #7
  %53 = bitcast <8 x i32> %52 to <4 x double>
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %9, <4 x double> %53) #7
  %55 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1872464312, i32 1059035698, i32 -438434313, i32 -1084582266, i32 -1196622709, i32 -1084378550, i32 -1196622709, i32 -1084378550>, <8 x i32> %13) #7
  %56 = bitcast <8 x i32> %55 to <4 x double>
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %9, <4 x double> %56) #7
  %58 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1074006916, i32 -1085537573, i32 -888986438, i32 1059400733, i32 288616616, i32 -1086392340, i32 288616616, i32 -1086392340>, <8 x i32> %13) #7
  %59 = bitcast <8 x i32> %58 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %9, <4 x double> %59) #7
  %61 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -790190784, i32 1064658364, i32 -904892570, i32 1066638526, i32 -267590683, i32 1066756002, i32 -267590683, i32 1066756002>, <8 x i32> %13) #7
  %62 = bitcast <8 x i32> %61 to <4 x double>
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %9, <4 x double> %62) #7
  %64 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 824740690, i32 -1080327474, i32 -170745284, i32 -1078308888, i32 1960142063, i32 -1078268247, i32 1960142063, i32 -1078268247>, <8 x i32> %13) #7
  %65 = bitcast <8 x i32> %64 to <4 x double>
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> %9, <4 x double> %65) #7
  %67 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 436480995, i32 1069343474, i32 885398208, i32 -1075552469, i32 -1186932068, i32 -1075556836, i32 -1186932068, i32 -1075556836>, <8 x i32> %13) #7
  %68 = bitcast <8 x i32> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %9, <4 x double> %68) #7
  %70 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1795389927, i32 -1076358540, i32 -1040909926, i32 -1074655785, i32 -1078776998, i32 -1074654670, i32 -1078776998, i32 -1074654670>, <8 x i32> %13) #7
  %71 = bitcast <8 x i32> %70 to <4 x double>
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %69, <4 x double> %9, <4 x double> %71) #7
  %73 = fmul <4 x double> %9, %72
  %74 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %73
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %9, <4 x double> %74) #7
  %76 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1346542445, i32 1072827863, i32 -1646740783, i32 1046630433, i32 940584602, i32 1060133914, i32 940584602, i32 1060133914>, <8 x i32> %13) #7
  %77 = bitcast <8 x i32> %76 to <4 x double>
  %78 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1857032851, i32 1014083130, i32 -1384810456, i32 -1157099799, i32 -33403257, i32 -1145459702, i32 -33403257, i32 -1145459702>, <8 x i32> %13) #7
  %79 = bitcast <8 x i32> %78 to <4 x double>
  %80 = fadd <4 x double> %73, %77
  %81 = fsub <4 x double> %80, %73
  %82 = fsub <4 x double> %80, %81
  %83 = fsub <4 x double> %73, %82
  %84 = fsub <4 x double> %77, %81
  %85 = fadd <4 x double> %84, %83
  %86 = fadd <4 x double> %75, %79
  %87 = fadd <4 x double> %86, %85
  %88 = fmul <4 x double> %80, %4
  %89 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %88
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %80, <4 x double> %4, <4 x double> %89) #7
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %4, <4 x double> %90) #7
  %92 = fadd <4 x double> %80, %87
  %93 = fmul <4 x double> %92, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %94 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %93, i32 8) #7
  %95 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %94) #7
  %96 = fmul <4 x double> %94, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %97 = fadd <4 x double> %80, %96
  %98 = fsub <4 x double> %97, %80
  %99 = fsub <4 x double> %97, %98
  %100 = fsub <4 x double> %80, %99
  %101 = fsub <4 x double> %96, %98
  %102 = fadd <4 x double> %101, %100
  %103 = fadd <4 x double> %87, %102
  %104 = fmul <4 x double> %94, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %105 = fadd <4 x double> %104, %97
  %106 = fsub <4 x double> %105, %97
  %107 = fsub <4 x double> %105, %106
  %108 = fsub <4 x double> %97, %107
  %109 = fsub <4 x double> %104, %106
  %110 = fadd <4 x double> %109, %108
  %111 = fadd <4 x double> %110, %103
  %112 = fmul <4 x double> %105, %105
  %113 = fadd <4 x double> %105, %105
  %114 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %112
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> %105, <4 x double> %114) #7
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %113, <4 x double> %111, <4 x double> %115) #7
  %117 = fmul <4 x double> %112, %112
  %118 = fadd <4 x double> %112, %112
  %119 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %117
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %112, <4 x double> %119) #7
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %116, <4 x double> %120) #7
  %122 = fmul <4 x double> %117, %117
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %124, <4 x double> %125) #7
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %127, <4 x double> %128) #7
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %117, <4 x double> %126, <4 x double> %129) #7
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %123, <4 x double> %130) #7
  %132 = fmul <4 x double> %105, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %133 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %133) #7
  %135 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %111, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %134) #7
  %136 = fadd <4 x double> %132, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %137 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %136
  %138 = fadd <4 x double> %132, %137
  %139 = fadd <4 x double> %138, %135
  %140 = fmul <4 x double> %105, %136
  %141 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %140
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %105, <4 x double> %141) #7
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %139, <4 x double> %105, <4 x double> %142) #7
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %111, <4 x double> %143) #7
  %145 = fadd <4 x double> %140, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %146 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %145
  %147 = fadd <4 x double> %140, %146
  %148 = fadd <4 x double> %147, %144
  %149 = fmul <4 x double> %105, %145
  %150 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %149
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %105, <4 x double> %150) #7
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %148, <4 x double> %105, <4 x double> %151) #7
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %111, <4 x double> %152) #7
  %154 = fadd <4 x double> %149, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %155 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %154
  %156 = fadd <4 x double> %149, %155
  %157 = fadd <4 x double> %156, %153
  %158 = fmul <4 x double> %117, %131
  %159 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %158
  %160 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %117, <4 x double> %131, <4 x double> %159) #7
  %161 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> %131, <4 x double> %160) #7
  %162 = fadd <4 x double> %154, %158
  %163 = fsub <4 x double> %154, %162
  %164 = fadd <4 x double> %158, %163
  %165 = fadd <4 x double> %164, %157
  %166 = fadd <4 x double> %165, %161
  %167 = ashr <4 x i32> %95, <i32 1, i32 1, i32 1, i32 1>
  %168 = add nsw <4 x i32> %167, <i32 1023, i32 1023, i32 1023, i32 1023>
  %169 = zext <4 x i32> %168 to <4 x i64>
  %170 = shl nuw <4 x i64> %169, <i64 32, i64 32, i64 32, i64 32>
  %171 = bitcast <4 x i64> %170 to <8 x i32>
  %172 = shl <8 x i32> %171, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %173 = bitcast <8 x i32> %172 to <4 x double>
  %174 = fmul <4 x double> %162, %173
  %175 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %176 = sub <4 x i32> %175, %167
  %177 = zext <4 x i32> %176 to <4 x i64>
  %178 = shl nuw <4 x i64> %177, <i64 32, i64 32, i64 32, i64 32>
  %179 = bitcast <4 x i64> %178 to <8 x i32>
  %180 = shl <8 x i32> %179, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %181 = bitcast <8 x i32> %180 to <4 x double>
  %182 = fmul <4 x double> %174, %181
  %183 = fmul <4 x double> %166, %173
  %184 = fmul <4 x double> %183, %181
  %185 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %80, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %186 = bitcast <4 x double> %185 to <4 x i64>
  %187 = bitcast <4 x double> %182 to <4 x i64>
  %188 = xor <4 x i64> %186, <i64 -1, i64 -1, i64 -1, i64 -1>
  %189 = and <4 x i64> %188, %187
  %190 = bitcast <4 x double> %184 to <4 x i64>
  %191 = and <4 x i64> %190, %188
  %192 = xor <4 x i64> %189, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %193 = xor <4 x i64> %191, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %194 = bitcast <4 x i64> %192 to <4 x double>
  %195 = bitcast <4 x i64> %193 to <4 x double>
  %196 = fadd <4 x double> %194, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %197 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %196
  %198 = fadd <4 x double> %197, %194
  %199 = fadd <4 x double> %198, %195
  %200 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %196, <4 x double> %88, <4 x double> %5) #7
  %201 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %199, <4 x double> %91, <4 x double> %5) #7
  %202 = fadd <4 x double> %200, %201
  %203 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %202, <4 x double> %7) #7
  %204 = bitcast <4 x double> %203 to <4 x i64>
  %205 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %206 = xor <4 x i64> %205, %204
  %207 = bitcast <4 x i64> %206 to <4 x double>
  %208 = fcmp uno <4 x double> %4, zeroinitializer
  %209 = sext <4 x i1> %208 to <4 x i64>
  %210 = bitcast <4 x i64> %209 to <4 x double>
  %211 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %207, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %210) #7
  ret <4 x double> %211
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_erfcd4_u15avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 2.200000e+00, double 2.200000e+00, double 2.200000e+00, double 2.200000e+00>, i8 17) #7
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 4.200000e+00, double 4.200000e+00, double 4.200000e+00, double 4.200000e+00>, i8 17) #7
  %8 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 2.730000e+01, double 2.730000e+01, double 2.730000e+01, double 2.730000e+01>, i8 17) #7
  %9 = fmul <4 x double> %4, %4
  %10 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %9
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> %4, <4 x double> %10) #7
  %12 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %13 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %13) #7
  %15 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %4
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %12, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %12, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %12, <4 x double> %14) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> %4, <4 x double> %6) #7
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %19, <4 x double> zeroinitializer, <4 x double> %6) #7
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %9, <4 x double> %5) #7
  %23 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> %5) #7
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x700000006, double 0x700000006, double 0x700000006, double 0x700000006>, <4 x double> <double 0x500000004, double 0x500000004, double 0x500000004, double 0x500000004>, <4 x double> %7) #7
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %24, <4 x double> <double 0x300000002, double 0x300000002, double 0x300000002, double 0x300000002>, <4 x double> %6) #7
  %26 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> <double 0x100000000, double 0x100000000, double 0x100000000, double 0x100000000>, <4 x double> %5) #7
  %27 = bitcast <4 x double> %26 to <8 x i32>
  %28 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -88172393, i32 1002442494, i32 1813537316, i32 1029189982, i32 1312947186, i32 -1068709374, i32 -743163479, i32 1087818655>, <8 x i32> %27) #7
  %29 = bitcast <8 x i32> %28 to <4 x double>
  %30 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 112215026, i32 -1139808532, i32 1768907334, i32 -1112853553, i32 182460620, i32 1081945821, i32 -1999828709, i32 -1058607725>, <8 x i32> %27) #7
  %31 = bitcast <8 x i32> %30 to <4 x double>
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %22, <4 x double> %31) #7
  %33 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 2078149651, i32 1012246518, i32 205513216, i32 1038949376, i32 -873731947, i32 -1063513775, i32 -44671389, i32 1088355713>, <8 x i32> %27) #7
  %34 = bitcast <8 x i32> %33 to <4 x double>
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %22, <4 x double> %34) #7
  %36 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1274344297, i32 -1130752746, i32 723225580, i32 -1104958209, i32 1724803424, i32 1085342692, i32 802829468, i32 1084839415>, <8 x i32> %27) #7
  %37 = bitcast <8 x i32> %36 to <4 x double>
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %22, <4 x double> %37) #7
  %39 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 110096036, i32 1021144981, i32 939373949, i32 1045612397, i32 1179188579, i32 -1061347262, i32 -2062243053, i32 -1059869493>, <8 x i32> %27) #7
  %40 = bitcast <8 x i32> %39 to <4 x double>
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %22, <4 x double> %40) #7
  %42 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -11458737, i32 -1122019623, i32 233046364, i32 -1099253216, i32 437422571, i32 1086499069, i32 -331408647, i32 1087265288>, <8 x i32> %27) #7
  %43 = bitcast <8 x i32> %42 to <4 x double>
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %22, <4 x double> %43) #7
  %45 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -2079063295, i32 1029662777, i32 -1532490381, i32 1050480358, i32 -1941768195, i32 -1060995326, i32 -889984784, i32 -1061681441>, <8 x i32> %27) #7
  %46 = bitcast <8 x i32> %45 to <4 x double>
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %22, <4 x double> %46) #7
  %48 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1175978632, i32 -1113750445, i32 -763484636, i32 -1095232642, i32 628755565, i32 1086118744, i32 -377913952, i32 1083400240>, <8 x i32> %27) #7
  %49 = bitcast <8 x i32> %48 to <4 x double>
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %22, <4 x double> %49) #7
  %51 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1571516471, i32 1037690541, i32 -877026442, i32 1053623959, i32 -1967667996, i32 -1062089290, i32 -1177047288, i32 -1068202341>, <8 x i32> %27) #7
  %52 = bitcast <8 x i32> %51 to <4 x double>
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %22, <4 x double> %52) #7
  %54 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -2118087776, i32 -1105912463, i32 -1552080191, i32 -1093342004, i32 -484106052, i32 1084309435, i32 46701879, i32 1077950036>, <8 x i32> %27) #7
  %55 = bitcast <8 x i32> %54 to <4 x double>
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %22, <4 x double> %55) #7
  %57 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 543295786, i32 1045417047, i32 1735702417, i32 -1095371482, i32 1781920665, i32 -1064718751, i32 -916538719, i32 -1069728781>, <8 x i32> %27) #7
  %58 = bitcast <8 x i32> %57 to <4 x double>
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %22, <4 x double> %58) #7
  %60 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -331094596, i32 -1098516670, i32 -1339121428, i32 1056808840, i32 -649013857, i32 1080843189, i32 -1900183598, i32 1070997684>, <8 x i32> %27) #7
  %61 = bitcast <8 x i32> %60 to <4 x double>
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %22, <4 x double> %61) #7
  %63 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1647947363, i32 1052483180, i32 50007424, i32 -1089420574, i32 -782623847, i32 -1069077837, i32 -764495657, i32 1075180923>, <8 x i32> %27) #7
  %64 = bitcast <8 x i32> %63 to <4 x double>
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %22, <4 x double> %64) #7
  %66 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1008680222, i32 -1091613403, i32 -1100971513, i32 -1090852551, i32 -311049882, i32 1076043104, i32 -2059508279, i32 1062833878>, <8 x i32> %27) #7
  %67 = bitcast <8 x i32> %66 to <4 x double>
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %22, <4 x double> %67) #7
  %69 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1872464322, i32 1059035698, i32 -979797265, i32 1061376447, i32 -10376722, i32 -1073239332, i32 881249673, i32 -1074222343>, <8 x i32> %27) #7
  %70 = bitcast <8 x i32> %69 to <4 x double>
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %22, <4 x double> %70) #7
  %72 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1074006915, i32 -1085537573, i32 -1121174034, i32 -1084503976, i32 -225819486, i32 1069900117, i32 1512860724, i32 1053273772>, <8 x i32> %27) #7
  %73 = bitcast <8 x i32> %72 to <4 x double>
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %22, <4 x double> %73) #7
  %75 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -790190785, i32 1064658364, i32 1516560820, i32 1059807721, i32 -100164903, i32 1071874648, i32 -734811510, i32 1071906815>, <8 x i32> %27) #7
  %76 = bitcast <8 x i32> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %74, <4 x double> %22, <4 x double> %76) #7
  %78 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 824740689, i32 -1080327474, i32 -439277010, i32 1066636911, i32 -1285234037, i32 1062296232, i32 -2123097891, i32 1042148427>, <8 x i32> %27) #7
  %79 = bitcast <8 x i32> %78 to <4 x double>
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %22, <4 x double> %79) #7
  %81 = fmul <4 x double> %22, %80
  %82 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %81
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %80, <4 x double> %82) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %80, <4 x double> %83) #7
  %85 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 436480994, i32 1069343474, i32 -1417473632, i32 -1078309042, i32 -1535819832, i32 -1075838868, i32 232786, i32 -1075838976>, <8 x i32> %27) #7
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -974156073, i32 -1135442149, i32 109199790, i32 -1134772312, i32 105824011, i32 1014916283, i32 -1697962205, i32 -1131996702>, <8 x i32> %27) #7
  %88 = bitcast <8 x i32> %87 to <4 x double>
  %89 = fadd <4 x double> %81, %86
  %90 = fsub <4 x double> %89, %81
  %91 = fsub <4 x double> %89, %90
  %92 = fsub <4 x double> %81, %91
  %93 = fsub <4 x double> %86, %90
  %94 = fadd <4 x double> %93, %92
  %95 = fadd <4 x double> %84, %88
  %96 = fadd <4 x double> %95, %94
  %97 = fmul <4 x double> %22, %89
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %97
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %89, <4 x double> %22, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %22, <4 x double> %99) #7
  %101 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %89, <4 x double> %23, <4 x double> %100) #7
  %102 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1795389927, i32 -1076358540, i32 1797459298, i32 -1075552464, i32 -148238208, i32 1052433586, i32 -1748542876, i32 1028700307>, <8 x i32> %27) #7
  %103 = bitcast <8 x i32> %102 to <4 x double>
  %104 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1238029614, i32 1013899566, i32 -1576214261, i32 1013029170, i32 1418482245, i32 992801676, i32 534514102, i32 -1175611824>, <8 x i32> %27) #7
  %105 = bitcast <8 x i32> %104 to <4 x double>
  %106 = fadd <4 x double> %97, %103
  %107 = fsub <4 x double> %106, %97
  %108 = fsub <4 x double> %106, %107
  %109 = fsub <4 x double> %97, %108
  %110 = fsub <4 x double> %103, %107
  %111 = fadd <4 x double> %110, %109
  %112 = fadd <4 x double> %101, %105
  %113 = fadd <4 x double> %112, %111
  %114 = fmul <4 x double> %22, %106
  %115 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %114
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %22, <4 x double> %115) #7
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %113, <4 x double> %22, <4 x double> %116) #7
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %23, <4 x double> %117) #7
  %119 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 1346542445, i32 1072827863, i32 1348236776, i32 -1074655785, i32 1435049936, i32 -1075687216, i32 1223139782, i32 -1075687216>, <8 x i32> %27) #7
  %120 = bitcast <8 x i32> %119 to <4 x double>
  %121 = tail call <8 x i32> @llvm.x86.avx2.permd(<8 x i32> <i32 -1857032851, i32 1014083130, i32 1072239949, i32 1016549666, i32 966188711, i32 1015132977, i32 1785377942, i32 -1132747026>, <8 x i32> %27) #7
  %122 = bitcast <8 x i32> %121 to <4 x double>
  %123 = fadd <4 x double> %114, %120
  %124 = fsub <4 x double> %123, %114
  %125 = fsub <4 x double> %123, %124
  %126 = fsub <4 x double> %114, %125
  %127 = fsub <4 x double> %120, %124
  %128 = fadd <4 x double> %127, %126
  %129 = fadd <4 x double> %118, %122
  %130 = fadd <4 x double> %129, %128
  %131 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %132 = bitcast <4 x i64> %131 to <4 x double>
  %133 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %132, <4 x double> %123, <4 x double> %6) #7
  %134 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %130, <4 x double> %6) #7
  %135 = fmul <4 x double> %133, %4
  %136 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %135
  %137 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %133, <4 x double> %4, <4 x double> %136) #7
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %134, <4 x double> %4, <4 x double> %137) #7
  %139 = fadd <4 x double> %123, %135
  %140 = fsub <4 x double> %139, %135
  %141 = fsub <4 x double> %139, %140
  %142 = fsub <4 x double> %135, %141
  %143 = fsub <4 x double> %123, %140
  %144 = fadd <4 x double> %143, %142
  %145 = fadd <4 x double> %138, %130
  %146 = fadd <4 x double> %145, %144
  %147 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %139, <4 x double> %135, <4 x double> %6) #7
  %148 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %146, <4 x double> %138, <4 x double> %6) #7
  %149 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %147
  %150 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %149
  %151 = fsub <4 x double> %150, %147
  %152 = fadd <4 x double> %151, zeroinitializer
  %153 = fsub <4 x double> %152, %148
  %154 = fadd <4 x double> %147, %148
  %155 = fmul <4 x double> %154, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %156 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %155, i32 8) #7
  %157 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %156) #7
  %158 = fmul <4 x double> %156, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %159 = fadd <4 x double> %147, %158
  %160 = fsub <4 x double> %159, %147
  %161 = fsub <4 x double> %159, %160
  %162 = fsub <4 x double> %147, %161
  %163 = fsub <4 x double> %158, %160
  %164 = fadd <4 x double> %163, %162
  %165 = fadd <4 x double> %148, %164
  %166 = fmul <4 x double> %156, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %167 = fadd <4 x double> %166, %159
  %168 = fsub <4 x double> %167, %159
  %169 = fsub <4 x double> %167, %168
  %170 = fsub <4 x double> %159, %169
  %171 = fsub <4 x double> %166, %168
  %172 = fadd <4 x double> %171, %170
  %173 = fadd <4 x double> %172, %165
  %174 = fmul <4 x double> %167, %167
  %175 = fadd <4 x double> %167, %167
  %176 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %174
  %177 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> %167, <4 x double> %176) #7
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %175, <4 x double> %173, <4 x double> %177) #7
  %179 = fmul <4 x double> %174, %174
  %180 = fadd <4 x double> %174, %174
  %181 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %179
  %182 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %174, <4 x double> %174, <4 x double> %181) #7
  %183 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %180, <4 x double> %178, <4 x double> %182) #7
  %184 = fmul <4 x double> %179, %179
  %185 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %186 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %187 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %188 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %174, <4 x double> %186, <4 x double> %187) #7
  %189 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %190 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %191 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %174, <4 x double> %189, <4 x double> %190) #7
  %192 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %179, <4 x double> %188, <4 x double> %191) #7
  %193 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %184, <4 x double> %185, <4 x double> %192) #7
  %194 = fmul <4 x double> %167, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %195 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %194
  %196 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %195) #7
  %197 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %173, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %196) #7
  %198 = fadd <4 x double> %194, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %199 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %198
  %200 = fadd <4 x double> %194, %199
  %201 = fadd <4 x double> %200, %197
  %202 = fmul <4 x double> %167, %198
  %203 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %202
  %204 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %198, <4 x double> %167, <4 x double> %203) #7
  %205 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %201, <4 x double> %167, <4 x double> %204) #7
  %206 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %198, <4 x double> %173, <4 x double> %205) #7
  %207 = fadd <4 x double> %202, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %208 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %207
  %209 = fadd <4 x double> %202, %208
  %210 = fadd <4 x double> %209, %206
  %211 = fmul <4 x double> %167, %207
  %212 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %211
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> %167, <4 x double> %212) #7
  %214 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %210, <4 x double> %167, <4 x double> %213) #7
  %215 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> %173, <4 x double> %214) #7
  %216 = fadd <4 x double> %211, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %217 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %216
  %218 = fadd <4 x double> %211, %217
  %219 = fadd <4 x double> %218, %215
  %220 = fmul <4 x double> %179, %193
  %221 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %220
  %222 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %179, <4 x double> %193, <4 x double> %221) #7
  %223 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> %193, <4 x double> %222) #7
  %224 = fadd <4 x double> %216, %220
  %225 = fsub <4 x double> %216, %224
  %226 = fadd <4 x double> %220, %225
  %227 = fadd <4 x double> %226, %219
  %228 = fadd <4 x double> %227, %223
  %229 = ashr <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %230 = add nsw <4 x i32> %229, <i32 1023, i32 1023, i32 1023, i32 1023>
  %231 = zext <4 x i32> %230 to <4 x i64>
  %232 = shl nuw <4 x i64> %231, <i64 32, i64 32, i64 32, i64 32>
  %233 = bitcast <4 x i64> %232 to <8 x i32>
  %234 = shl <8 x i32> %233, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %235 = bitcast <8 x i32> %234 to <4 x double>
  %236 = fmul <4 x double> %224, %235
  %237 = add <4 x i32> %157, <i32 1023, i32 1023, i32 1023, i32 1023>
  %238 = sub <4 x i32> %237, %229
  %239 = zext <4 x i32> %238 to <4 x i64>
  %240 = shl nuw <4 x i64> %239, <i64 32, i64 32, i64 32, i64 32>
  %241 = bitcast <4 x i64> %240 to <8 x i32>
  %242 = shl <8 x i32> %241, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %243 = bitcast <8 x i32> %242 to <4 x double>
  %244 = fmul <4 x double> %236, %243
  %245 = fmul <4 x double> %228, %235
  %246 = fmul <4 x double> %245, %243
  %247 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %147, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %248 = bitcast <4 x double> %247 to <4 x i64>
  %249 = bitcast <4 x double> %244 to <4 x i64>
  %250 = xor <4 x i64> %248, <i64 -1, i64 -1, i64 -1, i64 -1>
  %251 = and <4 x i64> %250, %249
  %252 = bitcast <4 x double> %246 to <4 x i64>
  %253 = and <4 x i64> %252, %250
  %254 = bitcast <4 x i64> %251 to <4 x double>
  %255 = bitcast <4 x i64> %253 to <4 x double>
  %256 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %254, <4 x double> %149, <4 x double> %5) #7
  %257 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %255, <4 x double> %153, <4 x double> %5) #7
  %258 = fmul <4 x double> %22, %256
  %259 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %258
  %260 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %256, <4 x double> %22, <4 x double> %259) #7
  %261 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %257, <4 x double> %22, <4 x double> %260) #7
  %262 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %256, <4 x double> %23, <4 x double> %261) #7
  %263 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %258, <4 x double> %256, <4 x double> %6) #7
  %264 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %262, <4 x double> %257, <4 x double> %6) #7
  %265 = fadd <4 x double> %263, %264
  %266 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %265, <4 x double> %8) #7
  %267 = ashr <4 x i64> %2, <i64 63, i64 63, i64 63, i64 63>
  %268 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %266
  %269 = bitcast <4 x i64> %267 to <4 x double>
  %270 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %266, <4 x double> %268, <4 x double> %269) #7
  %271 = fcmp uno <4 x double> %0, zeroinitializer
  %272 = sext <4 x i1> %271 to <4 x i64>
  %273 = bitcast <4 x i64> %272 to <4 x double>
  %274 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %270, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %273) #7
  ret <4 x double> %274
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid4_u05avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> %11, <4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %11, <4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #7
  %19 = fmul <4 x double> %18, %11
  %20 = fadd <4 x double> %19, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %21 = fsub <4 x double> %20, %19
  %22 = fsub <4 x double> %20, %21
  %23 = fsub <4 x double> %19, %22
  %24 = fsub <4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %21
  %25 = fadd <4 x double> %24, %23
  %26 = fadd <4 x double> %25, <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>
  %27 = fmul <4 x double> %11, %20
  %28 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %20, <4 x double> %28) #7
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %29) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %26, <4 x double> %30) #7
  %32 = fadd <4 x double> %27, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %33 = fsub <4 x double> %32, %27
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %27, %34
  %36 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %31, <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fmul <4 x double> %10, %32
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %10, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %10, <4 x double> %42) #7
  %44 = fadd <4 x double> %43, %40
  %45 = bitcast <4 x double> %1 to <4 x i64>
  %46 = icmp eq <4 x i64> %45, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %47 = sext <4 x i1> %46 to <4 x i64>
  %48 = bitcast <4 x i64> %47 to <4 x double>
  %49 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %48) #7
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %11, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %11, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #7
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %11, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %11, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #7
  %55 = fmul <4 x double> %11, %54
  %56 = fadd <4 x double> %55, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %57 = fsub <4 x double> %56, %55
  %58 = fsub <4 x double> %56, %57
  %59 = fsub <4 x double> %55, %58
  %60 = fsub <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %57
  %61 = fadd <4 x double> %60, %59
  %62 = fadd <4 x double> %61, <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>
  %63 = fmul <4 x double> %11, %56
  %64 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %63
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %56, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %56, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %62, <4 x double> %66) #7
  %68 = fadd <4 x double> %63, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %69 = fsub <4 x double> %68, %63
  %70 = fsub <4 x double> %68, %69
  %71 = fsub <4 x double> %63, %70
  %72 = fsub <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %69
  %73 = fadd <4 x double> %72, %71
  %74 = fadd <4 x double> %67, <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>
  %75 = fadd <4 x double> %74, %73
  %76 = fmul <4 x double> %11, %68
  %77 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %76
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %11, <4 x double> %77) #7
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %11, <4 x double> %78) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %13, <4 x double> %79) #7
  %81 = fadd <4 x double> %76, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %82 = fsub <4 x double> %81, %76
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %76, %83
  %85 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %80, %86
  %88 = fadd <4 x double> %81, %87
  %89 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %90 = icmp eq <4 x i32> %89, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i32>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = bitcast <4 x i64> %93 to <8 x i32>
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %96 = bitcast <8 x i32> %95 to <4 x double>
  %97 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %49, <4 x double> %96) #7
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %49, <4 x double> %88, <4 x double> %96) #7
  %99 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %100 = icmp ne <4 x i32> %99, zeroinitializer
  %101 = sext <4 x i1> %100 to <4 x i32>
  %102 = bitcast <4 x i32> %101 to <2 x i64>
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = bitcast <4 x i64> %103 to <8 x i32>
  %105 = shufflevector <8 x i32> %104, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = and <4 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <4 x double> %97 to <4 x i64>
  %109 = xor <4 x i64> %107, %108
  %110 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %111 = and <4 x i32> %110, <i32 4, i32 4, i32 4, i32 4>
  %112 = icmp ne <4 x i32> %111, zeroinitializer
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = shufflevector <2 x i64> %114, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = and <4 x i64> %118, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %120 = bitcast <4 x double> %98 to <4 x i64>
  %121 = xor <4 x i64> %119, %120
  %122 = bitcast <4 x i64> %121 to <4 x double>
  %123 = and <4 x i64> %45, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %124 = bitcast <4 x i64> %123 to <4 x double>
  %125 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %124, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %126 = bitcast <4 x double> %125 to <4 x i64>
  %127 = xor <4 x i64> %126, <i64 -1, i64 -1, i64 -1, i64 -1>
  %128 = and <4 x i64> %109, %127
  %129 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %122, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %125) #7
  %130 = fcmp oeq <4 x double> %124, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = sext <4 x i1> %130 to <4 x i64>
  %132 = or <4 x i64> %128, %131
  %133 = bitcast <4 x double> %129 to <4 x i64>
  %134 = or <4 x i64> %133, %131
  %135 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %132, <4 x i64>* %135, align 32, !alias.scope !27
  %136 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %137 = bitcast <4 x double>* %136 to <4 x i64>*
  store <4 x i64> %134, <4 x i64>* %137, align 32, !alias.scope !27
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid4_u35avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <4 x double> %11, <4 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #7
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %11, <4 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #7
  %18 = fmul <4 x double> %17, %10
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <4 x double> %11, <4 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %11, <4 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %11, <4 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %11, <4 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %11, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %26 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %33 = bitcast <8 x i32> %32 to <4 x double>
  %34 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %33) #7
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %33) #7
  %36 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %37 = icmp ne <4 x i32> %36, zeroinitializer
  %38 = sext <4 x i1> %37 to <4 x i32>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = bitcast <4 x i64> %40 to <8 x i32>
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %43 = bitcast <8 x i32> %42 to <4 x i64>
  %44 = and <4 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <4 x double> %34 to <4 x i64>
  %46 = xor <4 x i64> %44, %45
  %47 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %48 = and <4 x i32> %47, <i32 4, i32 4, i32 4, i32 4>
  %49 = icmp ne <4 x i32> %48, zeroinitializer
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = bitcast <4 x i64> %52 to <8 x i32>
  %54 = shufflevector <8 x i32> %53, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %55 = bitcast <8 x i32> %54 to <4 x i64>
  %56 = and <4 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %57 = bitcast <4 x double> %35 to <4 x i64>
  %58 = xor <4 x i64> %56, %57
  %59 = bitcast <4 x double> %1 to <4 x i64>
  %60 = and <4 x i64> %59, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %61 = bitcast <4 x i64> %60 to <4 x double>
  %62 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %61, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %63 = bitcast <4 x double> %62 to <4 x i64>
  %64 = xor <4 x i64> %63, <i64 -1, i64 -1, i64 -1, i64 -1>
  %65 = and <4 x i64> %46, %64
  %66 = and <4 x i64> %58, %64
  %67 = fcmp oeq <4 x double> %61, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = or <4 x i64> %65, %68
  %70 = or <4 x i64> %66, %68
  %71 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %69, <4 x i64>* %71, align 32, !alias.scope !30
  %72 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %73 = bitcast <4 x double>* %72 to <4 x i64>*
  store <4 x i64> %70, <4 x i64>* %73, align 32, !alias.scope !30
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_modfd4_avx2(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %1, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #7
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = bitcast <4 x double> %1 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 30) #7
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> zeroinitializer, <4 x double> %14) #7
  %16 = bitcast <4 x double> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %18 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <4 x i64> %17, %18
  %20 = fsub <4 x double> %1, %15
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = and <4 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %23 = or <4 x i64> %22, %18
  %24 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %24, align 32, !alias.scope !33
  %25 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %26 = bitcast <4 x double>* %25 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %26, align 32, !alias.scope !33
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_logd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fdiv <4 x double> %37, %38
  %40 = fmul <4 x double> %39, %39
  %41 = fmul <4 x double> %40, %40
  %42 = fmul <4 x double> %41, %41
  %43 = fmul <4 x double> %39, %40
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <4 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <4 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <4 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F>) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %46, <4 x double> %47) #7
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %45, <4 x double> %48) #7
  %50 = bitcast <16 x i8> %36 to <4 x i32>
  %51 = sitofp <4 x i32> %50 to <4 x double>
  %52 = fmul <4 x double> %51, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %49, <4 x double> %53) #7
  %55 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %56 = sext <4 x i1> %55 to <4 x i64>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %60 = fcmp uno <4 x double> %4, zeroinitializer
  %61 = select <4 x i1> %60, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %59
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %58, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %61) #7
  %63 = fcmp oeq <4 x double> %4, zeroinitializer
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = bitcast <4 x i64> %64 to <4 x double>
  %66 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %65) #7
  ret <4 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_logd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %69, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %69, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %69, <4 x double> %72) #7
  %74 = fmul <4 x double> %50, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %75 = fmul <4 x double> %58, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fadd <4 x double> %70, %74
  %77 = fsub <4 x double> %70, %76
  %78 = fadd <4 x double> %74, %77
  %79 = fadd <4 x double> %73, %78
  %80 = fadd <4 x double> %75, %79
  %81 = fmul <4 x double> %50, %59
  %82 = fmul <4 x double> %67, %81
  %83 = fadd <4 x double> %76, %82
  %84 = fsub <4 x double> %76, %83
  %85 = fadd <4 x double> %82, %84
  %86 = fadd <4 x double> %85, %80
  %87 = fadd <4 x double> %83, %86
  %88 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %89 = sext <4 x i1> %88 to <4 x i64>
  %90 = bitcast <4 x i64> %89 to <4 x double>
  %91 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %90) #7
  %92 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %93 = fcmp uno <4 x double> %4, zeroinitializer
  %94 = select <4 x i1> %93, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %92
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %94) #7
  %96 = fcmp oeq <4 x double> %4, zeroinitializer
  %97 = sext <4 x i1> %96 to <4 x i64>
  %98 = bitcast <4 x i64> %97 to <4 x double>
  %99 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %95, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %98) #7
  ret <4 x double> %99
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_powd4_u10avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = tail call <4 x double> @Sleef_powd4_u10avx2(<4 x double> %0, <4 x double> %1)
  ret <4 x double> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sinhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = fsub <4 x double> %105, %107
  %114 = fsub <4 x double> %105, %113
  %115 = fsub <4 x double> %114, %107
  %116 = fadd <4 x double> %115, %106
  %117 = fsub <4 x double> %116, %112
  %118 = fadd <4 x double> %113, %117
  %119 = fmul <4 x double> %118, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %120 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %121 = fcmp uno <4 x double> %119, zeroinitializer
  %122 = select <4 x i1> %121, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %120
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %122) #7
  %124 = bitcast <4 x double> %123 to <4 x i64>
  %125 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = xor <4 x i64> %125, %124
  %127 = fcmp uno <4 x double> %0, zeroinitializer
  %128 = bitcast <4 x i64> %126 to <4 x double>
  %129 = select <4 x i1> %127, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %128
  ret <4 x double> %129
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_coshd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = fadd <4 x double> %107, %105
  %114 = fsub <4 x double> %105, %113
  %115 = fadd <4 x double> %107, %114
  %116 = fadd <4 x double> %115, %106
  %117 = fadd <4 x double> %112, %116
  %118 = fadd <4 x double> %113, %117
  %119 = fmul <4 x double> %118, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %120 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %121 = fcmp uno <4 x double> %119, zeroinitializer
  %122 = select <4 x i1> %121, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %120
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %122) #7
  %124 = fcmp uno <4 x double> %0, zeroinitializer
  %125 = select <4 x i1> %124, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %123
  ret <4 x double> %125
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_tanhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #7
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #7
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #7
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #7
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #7
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #7
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #7
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = zext <4 x i32> %81 to <4 x i64>
  %83 = shl nuw <4 x i64> %82, <i64 32, i64 32, i64 32, i64 32>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = shl <8 x i32> %84, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <8 x i32> %85 to <4 x double>
  %87 = fmul <4 x double> %75, %86
  %88 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = sub <4 x i32> %88, %80
  %90 = zext <4 x i32> %89 to <4 x i64>
  %91 = shl nuw <4 x i64> %90, <i64 32, i64 32, i64 32, i64 32>
  %92 = bitcast <4 x i64> %91 to <8 x i32>
  %93 = shl <8 x i32> %92, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %94 = bitcast <8 x i32> %93 to <4 x double>
  %95 = fmul <4 x double> %87, %94
  %96 = fmul <4 x double> %79, %86
  %97 = fmul <4 x double> %96, %94
  %98 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %99 = bitcast <4 x double> %98 to <4 x i64>
  %100 = bitcast <4 x double> %95 to <4 x i64>
  %101 = xor <4 x i64> %99, <i64 -1, i64 -1, i64 -1, i64 -1>
  %102 = and <4 x i64> %101, %100
  %103 = bitcast <4 x double> %97 to <4 x i64>
  %104 = and <4 x i64> %103, %101
  %105 = bitcast <4 x i64> %102 to <4 x double>
  %106 = bitcast <4 x i64> %104 to <4 x double>
  %107 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %105
  %108 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %105
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %107, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %107, <4 x double> %109) #7
  %112 = fmul <4 x double> %111, %107
  %113 = bitcast <4 x double> %107 to <4 x i64>
  %114 = xor <4 x i64> %113, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %115 = bitcast <4 x double> %112 to <4 x i64>
  %116 = xor <4 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <4 x i64> %114 to <4 x double>
  %118 = bitcast <4 x i64> %116 to <4 x double>
  %119 = fadd <4 x double> %105, %117
  %120 = fsub <4 x double> %119, %105
  %121 = fsub <4 x double> %119, %120
  %122 = fsub <4 x double> %105, %121
  %123 = fsub <4 x double> %117, %120
  %124 = fadd <4 x double> %123, %122
  %125 = fadd <4 x double> %106, %118
  %126 = fadd <4 x double> %125, %124
  %127 = fadd <4 x double> %107, %105
  %128 = fsub <4 x double> %127, %105
  %129 = fsub <4 x double> %127, %128
  %130 = fsub <4 x double> %105, %129
  %131 = fsub <4 x double> %107, %128
  %132 = fadd <4 x double> %131, %130
  %133 = fadd <4 x double> %112, %106
  %134 = fadd <4 x double> %133, %132
  %135 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %127
  %136 = fmul <4 x double> %135, %119
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %119, <4 x double> %137) #7
  %139 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %139, <4 x double> %135, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %141 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %134
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %135, <4 x double> %140) #7
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %135, <4 x double> %138) #7
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %142, <4 x double> %143) #7
  %145 = fadd <4 x double> %144, %136
  %146 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %147 = fcmp uno <4 x double> %145, zeroinitializer
  %148 = select <4 x i1> %147, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %146
  %149 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %145, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %148) #7
  %150 = bitcast <4 x double> %149 to <4 x i64>
  %151 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = xor <4 x i64> %151, %150
  %153 = fcmp uno <4 x double> %0, zeroinitializer
  %154 = bitcast <4 x i64> %152 to <4 x double>
  %155 = select <4 x i1> %153, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %154
  ret <4 x double> %155
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sinhd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #7
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #7
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #7
  %22 = fmul <4 x double> %9, %10
  %23 = fmul <4 x double> %22, %21
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %23) #7
  %25 = fadd <4 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = bitcast <4 x i64> %29 to <8 x i32>
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %32 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %33 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %34 = add nsw <4 x i32> %33, <i32 1023, i32 1023, i32 1023, i32 1023>
  %35 = zext <4 x i32> %34 to <4 x i64>
  %36 = shl nuw <4 x i64> %35, <i64 32, i64 32, i64 32, i64 32>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = shl <8 x i32> %37, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = fmul <4 x double> %32, %39
  %41 = add <4 x i32> %7, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = sub <4 x i32> %41, %33
  %43 = zext <4 x i32> %42 to <4 x i64>
  %44 = shl nuw <4 x i64> %43, <i64 32, i64 32, i64 32, i64 32>
  %45 = bitcast <4 x i64> %44 to <8 x i32>
  %46 = shl <8 x i32> %45, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %47 = bitcast <8 x i32> %46 to <4 x double>
  %48 = fmul <4 x double> %40, %47
  %49 = fadd <4 x double> %48, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = bitcast <8 x i32> %31 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %49, <4 x double> %25, <4 x double> %50) #7
  %52 = fadd <4 x double> %51, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %53 = fadd <4 x double> %51, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %54 = fdiv <4 x double> %52, %53
  %55 = fmul <4 x double> %51, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %56 = fmul <4 x double> %55, %54
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %58 = fcmp uno <4 x double> %56, zeroinitializer
  %59 = select <4 x i1> %58, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %57
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %59) #7
  %61 = bitcast <4 x double> %60 to <4 x i64>
  %62 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %63 = xor <4 x i64> %62, %61
  %64 = fcmp uno <4 x double> %0, zeroinitializer
  %65 = bitcast <4 x i64> %63 to <4 x double>
  %66 = select <4 x i1> %64, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %65
  ret <4 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_coshd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #7
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #7
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %9, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add nsw <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = zext <4 x i32> %26 to <4 x i64>
  %28 = shl nuw <4 x i64> %27, <i64 32, i64 32, i64 32, i64 32>
  %29 = bitcast <4 x i64> %28 to <8 x i32>
  %30 = shl <8 x i32> %29, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <8 x i32> %30 to <4 x double>
  %32 = fmul <4 x double> %24, %31
  %33 = add <4 x i32> %7, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = sub <4 x i32> %33, %25
  %35 = zext <4 x i32> %34 to <4 x i64>
  %36 = shl nuw <4 x i64> %35, <i64 32, i64 32, i64 32, i64 32>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = shl <8 x i32> %37, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <8 x i32> %38 to <4 x double>
  %40 = fmul <4 x double> %32, %39
  %41 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %42 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %44 = bitcast <4 x double> %43 to <4 x i64>
  %45 = bitcast <4 x double> %42 to <4 x i64>
  %46 = xor <4 x i64> %44, <i64 -1, i64 -1, i64 -1, i64 -1>
  %47 = and <4 x i64> %46, %45
  %48 = bitcast <4 x i64> %47 to <4 x double>
  %49 = fdiv <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %48, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %52 = fcmp uno <4 x double> %50, zeroinitializer
  %53 = select <4 x i1> %52, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %51
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %53) #7
  %55 = fcmp uno <4 x double> %0, zeroinitializer
  %56 = select <4 x i1> %55, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %54
  ret <4 x double> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_tanhd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #7
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %5) #7
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %9) #7
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = fmul <4 x double> %12, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %15, <4 x double> %16) #7
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %20) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %14, <4 x double> %21) #7
  %23 = fmul <4 x double> %10, %11
  %24 = fmul <4 x double> %23, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %24) #7
  %26 = fadd <4 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = bitcast <4 x i64> %30 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %33 = fadd <4 x double> %26, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %34 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %35 = add nsw <4 x i32> %34, <i32 1023, i32 1023, i32 1023, i32 1023>
  %36 = zext <4 x i32> %35 to <4 x i64>
  %37 = shl nuw <4 x i64> %36, <i64 32, i64 32, i64 32, i64 32>
  %38 = bitcast <4 x i64> %37 to <8 x i32>
  %39 = shl <8 x i32> %38, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %40 = bitcast <8 x i32> %39 to <4 x double>
  %41 = fmul <4 x double> %33, %40
  %42 = add <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = sub <4 x i32> %42, %34
  %44 = zext <4 x i32> %43 to <4 x i64>
  %45 = shl nuw <4 x i64> %44, <i64 32, i64 32, i64 32, i64 32>
  %46 = bitcast <4 x i64> %45 to <8 x i32>
  %47 = shl <8 x i32> %46, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <8 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %41, %48
  %50 = fadd <4 x double> %49, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %51 = bitcast <8 x i32> %32 to <4 x double>
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %26, <4 x double> %51) #7
  %53 = fadd <4 x double> %52, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %54 = fdiv <4 x double> %52, %53
  %55 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %56 = fcmp uno <4 x double> %54, zeroinitializer
  %57 = select <4 x i1> %56, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %55
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %57) #7
  %59 = bitcast <4 x double> %58 to <4 x i64>
  %60 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %61 = xor <4 x i64> %60, %59
  %62 = fcmp uno <4 x double> %0, zeroinitializer
  %63 = bitcast <4 x i64> %61 to <4 x double>
  %64 = select <4 x i1> %62, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %63
  ret <4 x double> %64
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_asinhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_asinhd4_u10avx2(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_acoshd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_acoshd4_u10avx2(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_atanhd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <4 x double> %5, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <4 x double> %5, %6
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <4 x double> %4, %6
  %10 = fadd <4 x double> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <4 x double> %5, %19
  %21 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %5, <4 x double> %21) #7
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %19, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %19, <4 x double> %24) #7
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %19, <4 x double> %22) #7
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %26, <4 x double> %27) #7
  %29 = fmul <4 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %29, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %31 = fmul <4 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %29, <4 x double> %31, <4 x double> %30) #7
  %33 = bitcast <4 x double> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <2 x i64> %34 to <4 x float>
  %36 = shufflevector <4 x float> %35, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %37 = bitcast <4 x float> %36 to <2 x i64>
  %38 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %39, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %41 = bitcast <4 x float> %40 to <2 x i64>
  %42 = or <2 x i64> %41, %37
  %43 = bitcast <2 x i64> %42 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = bitcast <4 x double> %30 to <8 x i32>
  %46 = shufflevector <8 x i32> %45, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = bitcast <2 x i64> %48 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %49) #7
  %51 = bitcast <16 x i8> %50 to <4 x i32>
  %52 = sub <4 x i32> %44, %51
  %53 = sub <4 x i32> zeroinitializer, %52
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = zext <4 x i32> %55 to <4 x i64>
  %57 = shl nuw <4 x i64> %56, <i64 32, i64 32, i64 32, i64 32>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shl <8 x i32> %58, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = fmul <4 x double> %20, %60
  %62 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %52
  %63 = sub <4 x i32> %62, %54
  %64 = zext <4 x i32> %63 to <4 x i64>
  %65 = shl nuw <4 x i64> %64, <i64 32, i64 32, i64 32, i64 32>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = shl <8 x i32> %66, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %68 = bitcast <8 x i32> %67 to <4 x double>
  %69 = fmul <4 x double> %61, %68
  %70 = fmul <4 x double> %28, %60
  %71 = fmul <4 x double> %70, %68
  %72 = fadd <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %73 = fsub <4 x double> %72, %69
  %74 = fsub <4 x double> %72, %73
  %75 = fsub <4 x double> %69, %74
  %76 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %73
  %77 = fadd <4 x double> %76, %75
  %78 = fadd <4 x double> %71, %77
  %79 = fadd <4 x double> %69, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %80 = fsub <4 x double> %79, %69
  %81 = fsub <4 x double> %79, %80
  %82 = fsub <4 x double> %69, %81
  %83 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %80
  %84 = fadd <4 x double> %83, %82
  %85 = fadd <4 x double> %71, %84
  %86 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %79
  %87 = fmul <4 x double> %72, %86
  %88 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %72, <4 x double> %88) #7
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %79
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %86, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %92 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %85
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %86, <4 x double> %91) #7
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %86, <4 x double> %89) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %93, <4 x double> %94) #7
  %96 = fmul <4 x double> %87, %87
  %97 = fadd <4 x double> %87, %87
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %87, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %95, <4 x double> %99) #7
  %101 = fmul <4 x double> %96, %96
  %102 = fmul <4 x double> %101, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %103) #7
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %106 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %105, <4 x double> %106) #7
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %104, <4 x double> %107) #7
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %96, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %110 = sitofp <4 x i32> %52 to <4 x double>
  %111 = fmul <4 x double> %110, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %110, <4 x double> %112) #7
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %110, <4 x double> %113) #7
  %115 = fmul <4 x double> %87, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %116 = fmul <4 x double> %95, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %117 = fadd <4 x double> %111, %115
  %118 = fsub <4 x double> %111, %117
  %119 = fadd <4 x double> %115, %118
  %120 = fadd <4 x double> %114, %119
  %121 = fadd <4 x double> %116, %120
  %122 = fmul <4 x double> %87, %96
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %87, <4 x double> %123) #7
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %87, <4 x double> %124) #7
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %95, <4 x double> %125) #7
  %127 = fmul <4 x double> %109, %122
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %109, <4 x double> %128) #7
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %109, <4 x double> %129) #7
  %131 = fadd <4 x double> %117, %127
  %132 = fsub <4 x double> %117, %131
  %133 = fadd <4 x double> %127, %132
  %134 = fadd <4 x double> %133, %121
  %135 = fadd <4 x double> %130, %134
  %136 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %137 = bitcast <4 x double> %136 to <4 x i64>
  %138 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %139 = sext <4 x i1> %138 to <4 x i64>
  %140 = fadd <4 x double> %131, %135
  %141 = fmul <4 x double> %140, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %142 = bitcast <4 x i64> %139 to <4 x double>
  %143 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %141, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %142) #7
  %144 = bitcast <4 x double> %143 to <4 x i64>
  %145 = or <4 x i64> %144, %137
  %146 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %147 = xor <4 x i64> %145, %146
  %148 = bitcast <4 x i64> %147 to <4 x double>
  %149 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %150 = fcmp uno <4 x double> %148, zeroinitializer
  %151 = fcmp uno <4 x double> %0, zeroinitializer
  %152 = or <4 x i1> %149, %151
  %153 = or <4 x i1> %152, %150
  %154 = select <4 x i1> %153, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %148
  ret <4 x double> %154
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_cbrtd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = bitcast <4 x double> %5 to <8 x i32>
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i32> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %19, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -2, i32 -2, i32 -2, i32 -2>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = zext <4 x i32> %31 to <4 x i64>
  %33 = shl nuw <4 x i64> %32, <i64 32, i64 32, i64 32, i64 32>
  %34 = bitcast <4 x i64> %33 to <8 x i32>
  %35 = shl <8 x i32> %34, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <8 x i32> %35 to <4 x double>
  %37 = fmul <4 x double> %36, %0
  %38 = sub <4 x i32> <i32 1022, i32 1022, i32 1022, i32 1022>, %27
  %39 = sub <4 x i32> %38, %30
  %40 = zext <4 x i32> %39 to <4 x i64>
  %41 = shl nuw <4 x i64> %40, <i64 32, i64 32, i64 32, i64 32>
  %42 = bitcast <4 x i64> %41 to <8 x i32>
  %43 = shl <8 x i32> %42, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <8 x i32> %43 to <4 x double>
  %45 = fmul <4 x double> %37, %44
  %46 = sitofp <4 x i32> %28 to <4 x double>
  %47 = fadd <4 x double> %46, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %48 = fmul <4 x double> %47, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %49 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %48) #7
  %50 = sitofp <4 x i32> %49 to <4 x double>
  %51 = fmul <4 x double> %50, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %52 = fsub <4 x double> %47, %51
  %53 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %52) #7
  %54 = icmp eq <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %60) #7
  %62 = icmp eq <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %63 = sext <4 x i1> %62 to <4 x i32>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %68 = bitcast <8 x i32> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %68) #7
  %70 = add <4 x i32> %49, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %71 = ashr <4 x i32> %70, <i32 1, i32 1, i32 1, i32 1>
  %72 = add nsw <4 x i32> %71, <i32 1023, i32 1023, i32 1023, i32 1023>
  %73 = zext <4 x i32> %72 to <4 x i64>
  %74 = shl nuw <4 x i64> %73, <i64 32, i64 32, i64 32, i64 32>
  %75 = bitcast <4 x i64> %74 to <8 x i32>
  %76 = shl <8 x i32> %75, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %77 = bitcast <8 x i32> %76 to <4 x double>
  %78 = fmul <4 x double> %69, %77
  %79 = add <4 x i32> %49, <i32 -1025, i32 -1025, i32 -1025, i32 -1025>
  %80 = sub <4 x i32> %79, %71
  %81 = zext <4 x i32> %80 to <4 x i64>
  %82 = shl nuw <4 x i64> %81, <i64 32, i64 32, i64 32, i64 32>
  %83 = bitcast <4 x i64> %82 to <8 x i32>
  %84 = shl <8 x i32> %83, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <8 x i32> %84 to <4 x double>
  %86 = fmul <4 x double> %78, %85
  %87 = bitcast <4 x double> %86 to <4 x i64>
  %88 = bitcast <4 x double> %45 to <4 x i64>
  %89 = and <4 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = xor <4 x i64> %89, %87
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = and <4 x i64> %88, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %93, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %93, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %93, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %97 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %93, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %93, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %99 = fmul <4 x double> %98, %98
  %100 = fmul <4 x double> %99, %99
  %101 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %98
  %102 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %100, <4 x double> %101) #7
  %103 = fmul <4 x double> %102, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %104 = fsub <4 x double> %98, %103
  %105 = fmul <4 x double> %104, %93
  %106 = fmul <4 x double> %104, %105
  %107 = fmul <4 x double> %106, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %104, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #7
  %109 = fmul <4 x double> %108, %107
  %110 = fsub <4 x double> %106, %109
  %111 = fmul <4 x double> %110, %91
  ret <4 x double> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_cbrtd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = bitcast <4 x double> %5 to <8 x i32>
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <8 x i32> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %19, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -2, i32 -2, i32 -2, i32 -2>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = zext <4 x i32> %31 to <4 x i64>
  %33 = shl nuw <4 x i64> %32, <i64 32, i64 32, i64 32, i64 32>
  %34 = bitcast <4 x i64> %33 to <8 x i32>
  %35 = shl <8 x i32> %34, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <8 x i32> %35 to <4 x double>
  %37 = fmul <4 x double> %36, %0
  %38 = sub <4 x i32> <i32 1022, i32 1022, i32 1022, i32 1022>, %27
  %39 = sub <4 x i32> %38, %30
  %40 = zext <4 x i32> %39 to <4 x i64>
  %41 = shl nuw <4 x i64> %40, <i64 32, i64 32, i64 32, i64 32>
  %42 = bitcast <4 x i64> %41 to <8 x i32>
  %43 = shl <8 x i32> %42, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <8 x i32> %43 to <4 x double>
  %45 = fmul <4 x double> %37, %44
  %46 = sitofp <4 x i32> %28 to <4 x double>
  %47 = fadd <4 x double> %46, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %48 = fmul <4 x double> %47, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %49 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %48) #7
  %50 = sitofp <4 x i32> %49 to <4 x double>
  %51 = fmul <4 x double> %50, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %52 = fsub <4 x double> %47, %51
  %53 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %52) #7
  %54 = icmp eq <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast <4 x i64> %57 to <8 x i32>
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %60 = bitcast <8 x i32> %59 to <4 x double>
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %60) #7
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <4 x double> %60) #7
  %63 = icmp eq <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = bitcast <4 x i64> %66 to <8 x i32>
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %69 = bitcast <8 x i32> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %69) #7
  %71 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <4 x double> %69) #7
  %72 = bitcast <4 x double> %70 to <4 x i64>
  %73 = bitcast <4 x double> %45 to <4 x i64>
  %74 = and <4 x i64> %73, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %75 = xor <4 x i64> %74, %72
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = bitcast <4 x double> %71 to <4 x i64>
  %78 = xor <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <4 x double>
  %80 = and <4 x i64> %73, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %81 = bitcast <4 x i64> %80 to <4 x double>
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %81, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %81, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %81, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %84, <4 x double> %81, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %85, <4 x double> %81, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %87 = fmul <4 x double> %86, %86
  %88 = fmul <4 x double> %87, %87
  %89 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %86
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %81, <4 x double> %88, <4 x double> %89) #7
  %91 = fmul <4 x double> %90, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %92 = fsub <4 x double> %86, %91
  %93 = fmul <4 x double> %92, %92
  %94 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %93
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %92, <4 x double> %94) #7
  %96 = fmul <4 x double> %93, %93
  %97 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %93, <4 x double> %97) #7
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %93, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %95, <4 x double> %99) #7
  %101 = fmul <4 x double> %96, %81
  %102 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %81, <4 x double> %102) #7
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %81, <4 x double> %103) #7
  %105 = bitcast <4 x double> %92 to <4 x i64>
  %106 = xor <4 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <4 x i64> %106 to <4 x double>
  %108 = fadd <4 x double> %101, %107
  %109 = fsub <4 x double> %108, %101
  %110 = fsub <4 x double> %108, %109
  %111 = fsub <4 x double> %101, %110
  %112 = fsub <4 x double> %107, %109
  %113 = fadd <4 x double> %112, %111
  %114 = fadd <4 x double> %104, %113
  %115 = fadd <4 x double> %108, %114
  %116 = fmul <4 x double> %115, <double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555>
  %117 = fmul <4 x double> %92, %116
  %118 = fadd <4 x double> %93, %117
  %119 = fsub <4 x double> %118, %93
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %93, %120
  %122 = fsub <4 x double> %117, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %95, %123
  %125 = fmul <4 x double> %118, %81
  %126 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %125
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %81, <4 x double> %126) #7
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %81, <4 x double> %127) #7
  %129 = fmul <4 x double> %125, %76
  %130 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %129
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %76, <4 x double> %130) #7
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %76, <4 x double> %131) #7
  %133 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %79, <4 x double> %132) #7
  %134 = fadd <4 x double> %133, %129
  %135 = add <4 x i32> %49, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %136 = ashr <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %137 = add nsw <4 x i32> %136, <i32 1023, i32 1023, i32 1023, i32 1023>
  %138 = zext <4 x i32> %137 to <4 x i64>
  %139 = shl nuw <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %140 = bitcast <4 x i64> %139 to <8 x i32>
  %141 = shl <8 x i32> %140, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %142 = bitcast <8 x i32> %141 to <4 x double>
  %143 = fmul <4 x double> %134, %142
  %144 = add <4 x i32> %49, <i32 -1025, i32 -1025, i32 -1025, i32 -1025>
  %145 = sub <4 x i32> %144, %136
  %146 = zext <4 x i32> %145 to <4 x i64>
  %147 = shl nuw <4 x i64> %146, <i64 32, i64 32, i64 32, i64 32>
  %148 = bitcast <4 x i64> %147 to <8 x i32>
  %149 = shl <8 x i32> %148, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %150 = bitcast <8 x i32> %149 to <4 x double>
  %151 = fmul <4 x double> %143, %150
  %152 = fcmp oeq <4 x double> %81, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = and <4 x i64> %75, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %155 = or <4 x i64> %154, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %156 = bitcast <4 x i64> %155 to <4 x double>
  %157 = bitcast <4 x i64> %153 to <4 x double>
  %158 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %151, <4 x double> %156, <4 x double> %157) #7
  %159 = fcmp oeq <4 x double> %81, zeroinitializer
  %160 = sext <4 x i1> %159 to <4 x i64>
  %161 = bitcast <4 x i64> %154 to <4 x double>
  %162 = bitcast <4 x i64> %160 to <4 x double>
  %163 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %158, <4 x double> %161, <4 x double> %162) #7
  ret <4 x double> %163
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_expm1d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, zeroinitializer
  %3 = fmul <4 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %3, i32 8) #7
  %5 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %4) #7
  %6 = fmul <4 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <4 x double> %6, %0
  %8 = fsub <4 x double> %7, %0
  %9 = fsub <4 x double> %7, %8
  %10 = fsub <4 x double> %0, %9
  %11 = fsub <4 x double> %6, %8
  %12 = fadd <4 x double> %11, %10
  %13 = fadd <4 x double> %12, zeroinitializer
  %14 = fmul <4 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <4 x double> %14, %7
  %16 = fsub <4 x double> %15, %7
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %7, %17
  %19 = fsub <4 x double> %14, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %20, %13
  %22 = fmul <4 x double> %15, %15
  %23 = fadd <4 x double> %15, %15
  %24 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %15, <4 x double> %24) #7
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %21, <4 x double> %25) #7
  %27 = fmul <4 x double> %22, %22
  %28 = fadd <4 x double> %22, %22
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %22, <4 x double> %29) #7
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %26, <4 x double> %30) #7
  %32 = fmul <4 x double> %27, %27
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %34, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %37, <4 x double> %38) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %36, <4 x double> %39) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %33, <4 x double> %40) #7
  %42 = fmul <4 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %43) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %44) #7
  %46 = fadd <4 x double> %42, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <4 x double> %42, %47
  %49 = fadd <4 x double> %48, %45
  %50 = fmul <4 x double> %15, %46
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %15, <4 x double> %51) #7
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %15, <4 x double> %52) #7
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %21, <4 x double> %53) #7
  %55 = fadd <4 x double> %50, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <4 x double> %50, %56
  %58 = fadd <4 x double> %57, %54
  %59 = fmul <4 x double> %15, %55
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %15, <4 x double> %60) #7
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %15, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %62) #7
  %64 = fadd <4 x double> %59, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <4 x double> %59, %65
  %67 = fadd <4 x double> %66, %63
  %68 = fmul <4 x double> %27, %41
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %41, <4 x double> %69) #7
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %41, <4 x double> %70) #7
  %72 = fadd <4 x double> %64, %68
  %73 = fsub <4 x double> %64, %72
  %74 = fadd <4 x double> %68, %73
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add nsw <4 x i32> %77, <i32 1023, i32 1023, i32 1023, i32 1023>
  %79 = zext <4 x i32> %78 to <4 x i64>
  %80 = shl nuw <4 x i64> %79, <i64 32, i64 32, i64 32, i64 32>
  %81 = bitcast <4 x i64> %80 to <8 x i32>
  %82 = shl <8 x i32> %81, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %83 = bitcast <8 x i32> %82 to <4 x double>
  %84 = fmul <4 x double> %72, %83
  %85 = add <4 x i32> %5, <i32 1023, i32 1023, i32 1023, i32 1023>
  %86 = sub <4 x i32> %85, %77
  %87 = zext <4 x i32> %86 to <4 x i64>
  %88 = shl nuw <4 x i64> %87, <i64 32, i64 32, i64 32, i64 32>
  %89 = bitcast <4 x i64> %88 to <8 x i32>
  %90 = shl <8 x i32> %89, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %91 = bitcast <8 x i32> %90 to <4 x double>
  %92 = fmul <4 x double> %84, %91
  %93 = fmul <4 x double> %76, %83
  %94 = fmul <4 x double> %93, %91
  %95 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %96 = bitcast <4 x double> %95 to <4 x i64>
  %97 = bitcast <4 x double> %92 to <4 x i64>
  %98 = xor <4 x i64> %96, <i64 -1, i64 -1, i64 -1, i64 -1>
  %99 = and <4 x i64> %98, %97
  %100 = bitcast <4 x double> %94 to <4 x i64>
  %101 = and <4 x i64> %100, %98
  %102 = bitcast <4 x i64> %99 to <4 x double>
  %103 = bitcast <4 x i64> %101 to <4 x double>
  %104 = fadd <4 x double> %102, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %105 = fsub <4 x double> %104, %102
  %106 = fsub <4 x double> %104, %105
  %107 = fsub <4 x double> %102, %106
  %108 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %105
  %109 = fadd <4 x double> %108, %107
  %110 = fadd <4 x double> %109, %103
  %111 = fadd <4 x double> %104, %110
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #7
  %113 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %111, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %112) #7
  %114 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #7
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %113, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %114) #7
  %116 = bitcast <4 x double> %0 to <4 x i64>
  %117 = icmp eq <4 x i64> %116, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %118 = sext <4 x i1> %117 to <4 x i64>
  %119 = bitcast <4 x i64> %118 to <4 x double>
  %120 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %115, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %119) #7
  ret <4 x double> %120
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log10d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <4 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <4 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <4 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %69, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <4 x double> %69, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <4 x double> %69, <4 x double> %72) #7
  %74 = fmul <4 x double> %50, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %75) #7
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %76) #7
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <4 x double> %77) #7
  %79 = fadd <4 x double> %70, %74
  %80 = fsub <4 x double> %70, %79
  %81 = fadd <4 x double> %74, %80
  %82 = fadd <4 x double> %73, %81
  %83 = fadd <4 x double> %78, %82
  %84 = fmul <4 x double> %50, %59
  %85 = fmul <4 x double> %67, %84
  %86 = fadd <4 x double> %79, %85
  %87 = fsub <4 x double> %79, %86
  %88 = fadd <4 x double> %85, %87
  %89 = fadd <4 x double> %88, %83
  %90 = fadd <4 x double> %86, %89
  %91 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %93) #7
  %95 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %96 = fcmp uno <4 x double> %4, zeroinitializer
  %97 = select <4 x i1> %96, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %95
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %94, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %97) #7
  %99 = fcmp oeq <4 x double> %4, zeroinitializer
  %100 = sext <4 x i1> %99 to <4 x i64>
  %101 = bitcast <4 x i64> %100 to <4 x double>
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %98, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %101) #7
  ret <4 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log2d4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %37, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <4 x double> %37, %38
  %40 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <4 x double> %27, %38
  %42 = fadd <4 x double> %41, %40
  %43 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <4 x double> %43, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <4 x double> %27, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <4 x double> %37, %49
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %37, <4 x double> %51) #7
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %49, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %49, <4 x double> %54) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %49, <4 x double> %52) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %56, <4 x double> %57) #7
  %59 = fmul <4 x double> %50, %50
  %60 = fmul <4 x double> %59, %59
  %61 = fmul <4 x double> %60, %60
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %64, <4 x double> %65) #7
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %63, <4 x double> %66) #7
  %68 = bitcast <16 x i8> %36 to <4 x i32>
  %69 = sitofp <4 x i32> %68 to <4 x double>
  %70 = fmul <4 x double> %50, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %71 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %71) #7
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %72) #7
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <4 x double> %73) #7
  %75 = fadd <4 x double> %70, %69
  %76 = fsub <4 x double> %75, %69
  %77 = fsub <4 x double> %75, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fsub <4 x double> %70, %76
  %80 = fadd <4 x double> %79, %78
  %81 = fadd <4 x double> %74, %80
  %82 = fmul <4 x double> %50, %59
  %83 = fmul <4 x double> %67, %82
  %84 = fadd <4 x double> %75, %83
  %85 = fsub <4 x double> %84, %75
  %86 = fsub <4 x double> %84, %85
  %87 = fsub <4 x double> %75, %86
  %88 = fsub <4 x double> %83, %85
  %89 = fadd <4 x double> %88, %87
  %90 = fadd <4 x double> %81, %89
  %91 = fadd <4 x double> %84, %90
  %92 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %93 = sext <4 x i1> %92 to <4 x i64>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %94) #7
  %96 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %97 = fcmp uno <4 x double> %4, zeroinitializer
  %98 = select <4 x i1> %97, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %96
  %99 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %95, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %98) #7
  %100 = fcmp oeq <4 x double> %4, zeroinitializer
  %101 = sext <4 x i1> %100 to <4 x i64>
  %102 = bitcast <4 x i64> %101 to <4 x double>
  %103 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %99, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %102) #7
  ret <4 x double> %103
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log2d4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %3, <4 x double> %2) #7
  %5 = fmul <4 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = bitcast <2 x i64> %7 to <4 x float>
  %9 = shufflevector <4 x float> %8, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %12, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %14 = bitcast <4 x float> %13 to <2 x i64>
  %15 = or <2 x i64> %14, %10
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = and <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = add nsw <4 x i32> %18, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %20 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %18
  %21 = zext <4 x i32> %20 to <4 x i64>
  %22 = shl nuw <4 x i64> %21, <i64 32, i64 32, i64 32, i64 32>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = shl <8 x i32> %23, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <4 x double> %4 to <8 x i32>
  %26 = add <8 x i32> %24, %25
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = bitcast <4 x double> %2 to <8 x i32>
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <8 x i32> %29 to <4 x i64>
  %31 = add nsw <4 x i32> %18, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast <4 x i32> %19 to <16 x i8>
  %34 = bitcast <4 x i32> %31 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <4 x double> %27, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %39 = fdiv <4 x double> %37, %38
  %40 = fmul <4 x double> %39, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %40, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %40, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %40, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %40, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %40, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %40, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %47 = bitcast <16 x i8> %36 to <4 x i32>
  %48 = sitofp <4 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %39, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %50) #7
  %52 = fadd <4 x double> %49, %48
  %53 = fsub <4 x double> %48, %52
  %54 = fadd <4 x double> %49, %53
  %55 = fadd <4 x double> %51, %54
  %56 = fmul <4 x double> %39, %40
  %57 = fadd <4 x double> %52, %55
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %56, <4 x double> %57) #7
  %59 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %60 = sext <4 x i1> %59 to <4 x i64>
  %61 = bitcast <4 x i64> %60 to <4 x double>
  %62 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %58, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> zeroinitializer, i8 17) #7
  %64 = fcmp uno <4 x double> %4, zeroinitializer
  %65 = select <4 x i1> %64, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %63
  %66 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %65) #7
  %67 = fcmp oeq <4 x double> %4, zeroinitializer
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = bitcast <4 x i64> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %69) #7
  ret <4 x double> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log1pd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %4 = fmul <4 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %4, <4 x double> %3) #7
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = bitcast <2 x i64> %8 to <4 x float>
  %10 = shufflevector <4 x float> %9, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %11 = bitcast <4 x float> %10 to <2 x i64>
  %12 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %12 to <4 x float>
  %14 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %13, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %15 = bitcast <4 x float> %14 to <2 x i64>
  %16 = or <2 x i64> %15, %11
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = zext <4 x i32> %21 to <4 x i64>
  %23 = shl nuw <4 x i64> %22, <i64 32, i64 32, i64 32, i64 32>
  %24 = bitcast <4 x i64> %23 to <8 x i32>
  %25 = shl <8 x i32> %24, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %26 = add <8 x i32> %25, <i32 0, i32 1072693248, i32 0, i32 1072693248, i32 0, i32 1072693248, i32 0, i32 1072693248>
  %27 = bitcast <8 x i32> %26 to <4 x double>
  %28 = fadd <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %27, <4 x double> %28) #7
  %30 = bitcast <4 x double> %3 to <8 x i32>
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = bitcast <8 x i32> %31 to <4 x i64>
  %33 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %34 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <4 x i32> %20 to <16 x i8>
  %36 = bitcast <4 x i32> %33 to <16 x i8>
  %37 = bitcast <2 x i64> %34 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #7
  %39 = bitcast <16 x i8> %38 to <4 x i32>
  %40 = sitofp <4 x i32> %39 to <4 x double>
  %41 = fmul <4 x double> %40, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %40, <4 x double> %42) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %40, <4 x double> %43) #7
  %45 = fadd <4 x double> %29, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %46 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %45
  %47 = fadd <4 x double> %29, %46
  %48 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %45
  %49 = fmul <4 x double> %29, %48
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> %29, <4 x double> %50) #7
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %48, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %47
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %48, <4 x double> %53) #7
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %48, <4 x double> %51) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %55, <4 x double> %56) #7
  %58 = fmul <4 x double> %49, %49
  %59 = fmul <4 x double> %58, %58
  %60 = fmul <4 x double> %59, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %61) #7
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %63, <4 x double> %64) #7
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %62, <4 x double> %65) #7
  %67 = fmul <4 x double> %49, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %68 = fmul <4 x double> %57, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %69 = fadd <4 x double> %41, %67
  %70 = fsub <4 x double> %41, %69
  %71 = fadd <4 x double> %67, %70
  %72 = fadd <4 x double> %44, %71
  %73 = fadd <4 x double> %72, %68
  %74 = fmul <4 x double> %49, %58
  %75 = fmul <4 x double> %74, %66
  %76 = fadd <4 x double> %69, %75
  %77 = fsub <4 x double> %69, %76
  %78 = fadd <4 x double> %75, %77
  %79 = fadd <4 x double> %73, %78
  %80 = fadd <4 x double> %76, %79
  %81 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #7
  %82 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %80, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %81) #7
  %83 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, i8 17) #7
  %84 = fcmp uno <4 x double> %0, zeroinitializer
  %85 = select <4 x i1> %84, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %83
  %86 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %82, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %85) #7
  %87 = fcmp oeq <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %88 = sext <4 x i1> %87 to <4 x i64>
  %89 = bitcast <4 x i64> %88 to <4 x double>
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %86, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %89) #7
  %91 = bitcast <4 x double> %0 to <4 x i64>
  %92 = icmp eq <4 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %93 = sext <4 x i1> %92 to <4 x i64>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %94) #7
  ret <4 x double> %95
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_finz_fabsd4_avx2(<4 x double>) local_unnamed_addr #3 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  ret <4 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_finz_copysignd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #3 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <4 x double>
  ret <4 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmaxd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %0, <4 x double> %1) #7
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmind4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %0, <4 x double> %1) #7
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fdimd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fsub <4 x double> %0, %1
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> zeroinitializer, i8 17) #7
  %5 = fcmp oeq <4 x double> %0, %1
  %6 = select <4 x i1> %5, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %4
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> zeroinitializer, <4 x double> %6) #7
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_truncd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_floord4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #7
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 17) #7
  %11 = fadd <4 x double> %9, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %10) #7
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #7
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_ceild4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #7
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #7
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 18) #7
  %11 = fadd <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %9, <4 x double> %10) #7
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #7
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_roundd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <4 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #7
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %2, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #7
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> zeroinitializer, i8 18) #7
  %12 = fcmp oeq <4 x double> %10, zeroinitializer
  %13 = fadd <4 x double> %2, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %14 = select <4 x i1> %12, <4 x double> %11, <4 x double> zeroinitializer
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %13, <4 x double> %14) #7
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> zeroinitializer, i8 17) #7
  %17 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %16) #7
  %19 = fcmp oeq <4 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> zeroinitializer, <4 x double> %21) #7
  %23 = bitcast <4 x double> %0 to <4 x i64>
  %24 = and <4 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <4 x i64> %24 to <4 x double>
  %26 = fcmp oeq <4 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %25, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %28 = fsub <4 x double> %22, %18
  %29 = bitcast <4 x double> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %31 = and <4 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = or <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = select <4 x i1> %26, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %27
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> %0, <4 x double> %34) #7
  ret <4 x double> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_rintd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #7
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_nextafterd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x double> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <4 x i64> %6 to <4 x double>
  %8 = bitcast <4 x i64> %4 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %7, <4 x double> %8) #7
  %10 = bitcast <4 x double> %9 to <4 x i64>
  %11 = ashr <4 x i64> %10, <i64 63, i64 63, i64 63, i64 63>
  %12 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> %9, i8 29) #7
  %13 = bitcast <4 x double> %12 to <4 x i64>
  %14 = xor <4 x i64> %11, %13
  %15 = bitcast <4 x double> %9 to <8 x i32>
  %16 = xor <8 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <8 x i32> %16, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <8 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <4 x i64>
  %21 = and <4 x i64> %20, <i64 1, i64 1, i64 1, i64 1>
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = shufflevector <8 x float> %22, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %24 = bitcast <8 x float> %23 to <8 x i32>
  %25 = add <8 x i32> %17, %24
  %26 = bitcast <8 x i32> %25 to <4 x double>
  %27 = bitcast <4 x i64> %14 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %26, <4 x double> %27) #7
  %29 = fcmp une <4 x double> %9, %1
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x double> %28 to <8 x i32>
  %32 = bitcast <4 x i64> %30 to <8 x i32>
  %33 = and <8 x i32> %32, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %34 = sub <8 x i32> %31, %33
  %35 = icmp eq <8 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %41 = bitcast <8 x float> %40 to <8 x i32>
  %42 = add <8 x i32> %34, %41
  %43 = bitcast <8 x i32> %42 to <4 x double>
  %44 = bitcast <8 x i32> %34 to <4 x double>
  %45 = bitcast <4 x i64> %30 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #7
  %47 = bitcast <4 x double> %46 to <8 x i32>
  %48 = xor <8 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <8 x i32> %48, <i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <8 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <4 x i64>
  %53 = and <4 x i64> %52, <i64 1, i64 1, i64 1, i64 1>
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %56 = bitcast <8 x float> %55 to <8 x i32>
  %57 = add <8 x i32> %49, %56
  %58 = bitcast <8 x i32> %57 to <4 x double>
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> %58, <4 x double> %27) #7
  %60 = fcmp oeq <4 x double> %59, zeroinitializer
  %61 = fcmp une <4 x double> %9, zeroinitializer
  %62 = and <4 x i1> %60, %61
  %63 = sext <4 x i1> %62 to <4 x i64>
  %64 = and <4 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <4 x i64> %64 to <4 x double>
  %66 = bitcast <4 x i64> %63 to <4 x double>
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %59, <4 x double> %65, <4 x double> %66) #7
  %68 = fcmp oeq <4 x double> %9, zeroinitializer
  %69 = fcmp oeq <4 x double> %1, zeroinitializer
  %70 = and <4 x i1> %68, %69
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %67, <4 x double> %1, <4 x double> %72) #7
  %74 = fcmp uno <4 x double> %9, %1
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #7
  ret <4 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_frfrexpd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <4 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <4 x i64> %10 to <4 x double>
  %12 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <4 x i1> %14 to <4 x i64>
  %16 = and <4 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <4 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <4 x i64> %17 to <4 x double>
  %19 = bitcast <4 x i64> %15 to <4 x double>
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #7
  %21 = fcmp oeq <4 x double> %7, zeroinitializer
  %22 = sext <4 x i1> %21 to <4 x i64>
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %7, <4 x double> %23) #7
  ret <4 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_finz_expfrexpd4_avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #7
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = shufflevector <4 x float> %10, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %12 = bitcast <4 x float> %11 to <2 x i64>
  %13 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %14, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %16 = bitcast <4 x float> %15 to <2 x i64>
  %17 = or <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %22 = fcmp ueq <4 x double> %7, zeroinitializer
  %23 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %24 = bitcast <4 x i64> %23 to <4 x double>
  %25 = fcmp oeq <4 x double> %24, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %22
  %27 = sext <4 x i1> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = bitcast <4 x i32> %21 to <16 x i8>
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %29, <16 x i8> zeroinitializer, <16 x i8> %30) #7
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmad4_avx2(<4 x double>, <4 x double>, <4 x double>) local_unnamed_addr #0 {
  %4 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %1, <4 x double> %2) #7
  ret <4 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sqrtd4_u05avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #7
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #7
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #7
  %8 = bitcast <4 x double> %6 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = sub <8 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <8 x i32> %10 to <4 x double>
  %12 = fmul <4 x double> %6, %11
  %13 = fmul <4 x double> %11, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %13, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %12) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %15, <4 x double> %13) #7
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %17, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %19, <4 x double> %16) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %19, <4 x double> %17) #7
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %23, <4 x double> %20) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %23, <4 x double> %21) #7
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %25, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <4 x double> %25, %25
  %29 = fmul <4 x double> %28, %27
  %30 = fmul <4 x double> %6, %29
  %31 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %6, <4 x double> %31) #7
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %30, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> %34) #7
  %36 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %35, <4 x double> %32) #7
  %38 = fadd <4 x double> %30, %37
  %39 = fmul <4 x double> %7, %38
  %40 = fcmp oeq <4 x double> %6, zeroinitializer
  %41 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <4 x i1> %41, %40
  %43 = sext <4 x i1> %42 to <4 x i64>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> %6, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #7
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %45, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %46) #7
  ret <4 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sqrtd4_u35avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #7
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #7
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #7
  %8 = bitcast <4 x double> %6 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = sub <8 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <8 x i32> %10 to <4 x double>
  %12 = fmul <4 x double> %6, %11
  %13 = fmul <4 x double> %11, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %13, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %12) #7
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %15, <4 x double> %13) #7
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %17, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %19, <4 x double> %16) #7
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %19, <4 x double> %17) #7
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %23, <4 x double> %20) #7
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %23, <4 x double> %21) #7
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %25, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <4 x double> %25, %25
  %29 = fmul <4 x double> %28, %27
  %30 = fmul <4 x double> %6, %29
  %31 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %6, <4 x double> %31) #7
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %30, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> %34) #7
  %36 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %35, <4 x double> %32) #7
  %38 = fadd <4 x double> %30, %37
  %39 = fmul <4 x double> %7, %38
  %40 = fcmp oeq <4 x double> %6, zeroinitializer
  %41 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <4 x i1> %41, %40
  %43 = sext <4 x i1> %42 to <4 x i64>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> %6, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #7
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %45, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %46) #7
  ret <4 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_hypotd4_u05avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #7
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #7
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %12 = fmul <4 x double> %9, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %12, <4 x double> %11) #7
  %14 = fmul <4 x double> %10, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %11) #7
  %16 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <4 x double> %13, %16
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %13, <4 x double> %18) #7
  %20 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %16, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %16, <4 x double> %21) #7
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %19) #7
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %22, <4 x double> %23) #7
  %25 = fmul <4 x double> %17, %17
  %26 = fadd <4 x double> %17, %17
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %27) #7
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #7
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <4 x double> %30, %25
  %32 = fsub <4 x double> %30, %31
  %33 = fsub <4 x double> %25, %32
  %34 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <4 x double> %34, %33
  %36 = fadd <4 x double> %29, %35
  %37 = fadd <4 x double> %30, %36
  %38 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %37) #7
  %39 = fmul <4 x double> %38, %38
  %40 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %38, <4 x double> %40) #7
  %42 = fadd <4 x double> %30, %39
  %43 = fsub <4 x double> %42, %30
  %44 = fsub <4 x double> %42, %43
  %45 = fsub <4 x double> %30, %44
  %46 = fsub <4 x double> %39, %43
  %47 = fadd <4 x double> %46, %45
  %48 = fadd <4 x double> %41, %36
  %49 = fadd <4 x double> %48, %47
  %50 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %50, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %53 = fmul <4 x double> %50, %52
  %54 = fmul <4 x double> %50, %42
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %50, <4 x double> %55) #7
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %50, <4 x double> %56) #7
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %53, <4 x double> %57) #7
  %59 = fmul <4 x double> %54, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <4 x double> %58, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %10, %59
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %10, <4 x double> %62) #7
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %10, <4 x double> %63) #7
  %65 = fadd <4 x double> %61, %64
  %66 = fcmp uno <4 x double> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i64>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %65, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %68) #7
  %70 = fcmp oeq <4 x double> %9, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %69, <4 x double> %10, <4 x double> %72) #7
  %74 = fcmp uno <4 x double> %8, %5
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #7
  %78 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <4 x i1> %79, %78
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %82) #7
  ret <4 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_hypotd4_u35avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #7
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #7
  %11 = fdiv <4 x double> %9, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %12) #7
  %14 = fmul <4 x double> %10, %13
  %15 = fcmp oeq <4 x double> %9, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i64>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %10, <4 x double> %17) #7
  %19 = fcmp uno <4 x double> %8, %5
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %21) #7
  %23 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <4 x i1> %24, %23
  %26 = sext <4 x i1> %25 to <4 x i64>
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %22, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %27) #7
  ret <4 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmodd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #7
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #7
  %14 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <4 x double> %14 to <4 x i64>
  %16 = add <4 x i64> %15, <i64 -1, i64 -1, i64 -1, i64 -1>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = fcmp oeq <4 x double> %14, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i64>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %20) #7
  %22 = fmul <4 x double> %13, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <4 x double> %13, %13
  %24 = bitcast <4 x double> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <4 x i64> %25 to <4 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %73, %27 ]
  %29 = phi <4 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <4 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = add <4 x i64> %31, <i64 -1, i64 -1, i64 -1, i64 -1>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = fcmp oeq <4 x double> %30, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #7
  %38 = fmul <4 x double> %21, %37
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #7
  %40 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %22, <4 x double> %30, i8 30) #7
  %41 = bitcast <4 x double> %40 to <4 x i64>
  %42 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %13, i8 29) #7
  %43 = bitcast <4 x double> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %23, <4 x double> %30, i8 30) #7
  %48 = bitcast <4 x double> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %50) #7
  %52 = fmul <4 x double> %51, %26
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %26, <4 x double> %53) #7
  %55 = fadd <4 x double> %30, %52
  %56 = fsub <4 x double> %55, %30
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> %30, %57
  %59 = fsub <4 x double> %52, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fadd <4 x double> %29, %54
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fsub <4 x double> %55, %63
  %65 = fadd <4 x double> %62, %64
  %66 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %63, <4 x double> %13, i8 17) #7
  %67 = bitcast <4 x double> %66 to <4 x i64>
  %68 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %70 = and <2 x i64> %69, %68
  %71 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %70, <2 x i64> <i64 -1, i64 -1>) #7
  %72 = icmp eq i32 %71, 0
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp ult i32 %73, 21
  %75 = and i1 %74, %72
  br i1 %75, label %27, label %76

; <label>:76:                                     ; preds = %27
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #7
  %78 = fmul <4 x double> %63, %77
  %79 = fadd <4 x double> %63, %65
  %80 = fcmp oeq <4 x double> %79, %13
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> zeroinitializer, <4 x double> %82) #7
  %84 = bitcast <4 x double> %83 to <4 x i64>
  %85 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = xor <4 x i64> %85, %84
  %87 = bitcast <4 x i64> %86 to <4 x double>
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %11, <4 x double> %13, i8 17) #7
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> %0, <4 x double> %88) #7
  %90 = fcmp oeq <4 x double> %13, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i64>
  %92 = bitcast <4 x i64> %91 to <4 x double>
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %89, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %92) #7
  ret <4 x double> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_remainderd4_avx2(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x20000000000000, double 0x20000000000000, double 0x20000000000000, double 0x20000000000000>, i8 17) #7
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #7
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #7
  %14 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #7
  %15 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <4 x double> %13, <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <4 x double> %13, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <4 x double> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  br label %21

; <label>:21:                                     ; preds = %48, %2
  %22 = phi i32 [ 0, %2 ], [ %80, %48 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %65, %48 ]
  %24 = phi <4 x double> [ zeroinitializer, %2 ], [ %79, %48 ]
  %25 = phi <4 x double> [ %11, %2 ], [ %77, %48 ]
  %26 = fmul <4 x double> %15, %25
  %27 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %26, i32 8) #7
  %28 = bitcast <4 x double> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <4 x i64> %29 to <4 x double>
  %31 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %16, i8 17) #7
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %31) #7
  %33 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %17, i8 17) #7
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = fcmp oeq <4 x double> %17, %30
  %36 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %37 = select <4 x i1> %35, <4 x i64> %36, <4 x i64> zeroinitializer
  %38 = or <4 x i64> %37, %34
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %39) #7
  %41 = fcmp oeq <4 x double> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %44, %43
  %46 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %45, <2 x i64> <i64 -1, i64 -1>) #7
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %82

; <label>:48:                                     ; preds = %21
  %49 = fmul <4 x double> %40, %20
  %50 = bitcast <4 x double> %49 to <4 x i64>
  %51 = and <4 x i64> %50, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = fcmp oeq <4 x double> %52, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = and <4 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <4 x i64> %55, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = fadd <4 x double> %40, %57
  %59 = bitcast <4 x i64> %54 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> %58, <4 x double> %59) #7
  %61 = fmul <4 x double> %60, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %61, i32 11) #7
  %63 = fcmp une <4 x double> %62, %61
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = xor <4 x i64> %23, %64
  %66 = fmul <4 x double> %60, %20
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %66
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %20, <4 x double> %67) #7
  %69 = fadd <4 x double> %25, %66
  %70 = fsub <4 x double> %69, %25
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %25, %71
  %73 = fsub <4 x double> %66, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %24, %68
  %76 = fadd <4 x double> %75, %74
  %77 = fadd <4 x double> %69, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fadd <4 x double> %76, %78
  %80 = add nuw nsw i32 %22, 1
  %81 = icmp ult i32 %80, 21
  br i1 %81, label %21, label %82

; <label>:82:                                     ; preds = %21, %48
  %83 = phi <4 x double> [ %25, %21 ], [ %77, %48 ]
  %84 = fmul <4 x double> %14, %83
  %85 = bitcast <4 x double> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <4 x double>
  %89 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <4 x i1> %89 to <4 x i64>
  %91 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #7
  %95 = bitcast <4 x i64> %90 to <4 x double>
  %96 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %94, <4 x double> %95) #7
  %97 = fcmp oeq <4 x double> %13, zeroinitializer
  %98 = sext <4 x i1> %97 to <4 x i64>
  %99 = bitcast <4 x i64> %98 to <4 x double>
  %100 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %96, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %99) #7
  ret <4 x double> %100
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_finz_tgammad4_u10avx2(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0) #7
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x double>, <4 x double>* %4, align 32
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x double>, <4 x double>* %6, align 32
  %8 = fadd <4 x double> %5, %7
  %9 = fmul <4 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %9, i32 8) #7
  %11 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %10) #7
  %12 = fmul <4 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <4 x double> %5, %12
  %14 = fsub <4 x double> %13, %5
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %5, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %18
  %20 = fmul <4 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <4 x double> %20, %13
  %22 = fsub <4 x double> %21, %13
  %23 = fsub <4 x double> %21, %22
  %24 = fsub <4 x double> %13, %23
  %25 = fsub <4 x double> %20, %22
  %26 = fadd <4 x double> %25, %24
  %27 = fadd <4 x double> %26, %19
  %28 = fmul <4 x double> %21, %21
  %29 = fadd <4 x double> %21, %21
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %21, <4 x double> %30) #7
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %27, <4 x double> %31) #7
  %33 = fmul <4 x double> %28, %28
  %34 = fadd <4 x double> %28, %28
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %28, <4 x double> %35) #7
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %32, <4 x double> %36) #7
  %38 = fmul <4 x double> %33, %33
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %40, <4 x double> %41) #7
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %43, <4 x double> %44) #7
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %42, <4 x double> %45) #7
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %39, <4 x double> %46) #7
  %48 = fmul <4 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %49) #7
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %50) #7
  %52 = fadd <4 x double> %48, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <4 x double> %48, %53
  %55 = fadd <4 x double> %54, %51
  %56 = fmul <4 x double> %21, %52
  %57 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %21, <4 x double> %57) #7
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %58) #7
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %27, <4 x double> %59) #7
  %61 = fadd <4 x double> %56, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <4 x double> %56, %62
  %64 = fadd <4 x double> %63, %60
  %65 = fmul <4 x double> %21, %61
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %21, <4 x double> %66) #7
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %21, <4 x double> %67) #7
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %27, <4 x double> %68) #7
  %70 = fadd <4 x double> %65, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <4 x double> %65, %71
  %73 = fadd <4 x double> %72, %69
  %74 = fmul <4 x double> %33, %47
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %47, <4 x double> %75) #7
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %47, <4 x double> %76) #7
  %78 = fadd <4 x double> %70, %74
  %79 = fsub <4 x double> %70, %78
  %80 = fadd <4 x double> %74, %79
  %81 = fadd <4 x double> %80, %73
  %82 = fadd <4 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add nsw <4 x i32> %83, <i32 1023, i32 1023, i32 1023, i32 1023>
  %85 = zext <4 x i32> %84 to <4 x i64>
  %86 = shl nuw <4 x i64> %85, <i64 32, i64 32, i64 32, i64 32>
  %87 = bitcast <4 x i64> %86 to <8 x i32>
  %88 = shl <8 x i32> %87, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <8 x i32> %88 to <4 x double>
  %90 = fmul <4 x double> %78, %89
  %91 = add <4 x i32> %11, <i32 1023, i32 1023, i32 1023, i32 1023>
  %92 = sub <4 x i32> %91, %83
  %93 = zext <4 x i32> %92 to <4 x i64>
  %94 = shl nuw <4 x i64> %93, <i64 32, i64 32, i64 32, i64 32>
  %95 = bitcast <4 x i64> %94 to <8 x i32>
  %96 = shl <8 x i32> %95, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %97 = bitcast <8 x i32> %96 to <4 x double>
  %98 = fmul <4 x double> %90, %97
  %99 = fmul <4 x double> %82, %89
  %100 = fmul <4 x double> %99, %97
  %101 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %102 = bitcast <4 x double> %101 to <4 x i64>
  %103 = bitcast <4 x double> %98 to <4 x i64>
  %104 = xor <4 x i64> %102, <i64 -1, i64 -1, i64 -1, i64 -1>
  %105 = and <4 x i64> %104, %103
  %106 = bitcast <4 x double> %100 to <4 x i64>
  %107 = and <4 x i64> %106, %104
  %108 = bitcast <4 x i64> %105 to <4 x double>
  %109 = bitcast <4 x i64> %107 to <4 x double>
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %111 = load <4 x double>, <4 x double>* %110, align 32
  %112 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %113 = load <4 x double>, <4 x double>* %112, align 32
  %114 = fmul <4 x double> %111, %108
  %115 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %114
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %111, <4 x double> %115) #7
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %109, <4 x double> %111, <4 x double> %116) #7
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %113, <4 x double> %117) #7
  %119 = fadd <4 x double> %114, %118
  %120 = fcmp oeq <4 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>
  %121 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #7
  %122 = bitcast <4 x double> %121 to <4 x i64>
  %123 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  %124 = fcmp oeq <4 x double> %123, %0
  %125 = select <4 x i1> %124, <4 x i64> %122, <4 x i64> zeroinitializer
  %126 = select <4 x i1> %120, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %125
  %127 = bitcast <4 x double> %0 to <4 x i64>
  %128 = and <4 x i64> %127, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %129 = bitcast <4 x i64> %128 to <4 x double>
  %130 = fcmp une <4 x double> %129, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = fcmp ord <4 x double> %0, zeroinitializer
  %132 = and <4 x i1> %130, %131
  %133 = fcmp uno <4 x double> %119, zeroinitializer
  %134 = and <4 x i1> %133, %132
  %135 = select <4 x i1> %134, <4 x i64> %122, <4 x i64> zeroinitializer
  %136 = or <4 x i64> %126, %135
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %137) #7
  %139 = fcmp oeq <4 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %140 = or <4 x i1> %132, %139
  %141 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000>, i8 29) #7
  %142 = bitcast <4 x double> %141 to <4 x i64>
  %143 = select <4 x i1> %140, <4 x i64> %142, <4 x i64> zeroinitializer
  %144 = fcmp oeq <4 x double> %0, zeroinitializer
  %145 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 2.000000e+02, double 2.000000e+02, double 2.000000e+02, double 2.000000e+02>, i8 30) #7
  %146 = bitcast <4 x double> %145 to <4 x i64>
  %147 = fcmp uno <4 x double> %138, zeroinitializer
  %148 = or <4 x i1> %147, %144
  %149 = select <4 x i1> %148, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %146
  %150 = and <4 x i64> %149, %143
  %151 = and <4 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = or <4 x i64> %151, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %153 = bitcast <4 x i64> %152 to <4 x double>
  %154 = bitcast <4 x i64> %150 to <4 x double>
  %155 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> %153, <4 x double> %154) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <4 x double> %155
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_finz_lgammad4_u10avx2(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0) #7
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x double>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <4 x double>
  %14 = bitcast <4 x i64> %12 to <4 x double>
  %15 = fmul <4 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %17 = fmul <4 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> %17, <4 x double> %16) #7
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = shufflevector <4 x float> %21, <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x i32> <i32 1, i32 3, i32 4, i32 4>
  %23 = bitcast <4 x float> %22 to <2 x i64>
  %24 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = shufflevector <4 x float> <float 0.000000e+00, float undef, float undef, float undef>, <4 x float> %25, <4 x i32> <i32 0, i32 0, i32 5, i32 7>
  %27 = bitcast <4 x float> %26 to <2 x i64>
  %28 = or <2 x i64> %27, %23
  %29 = bitcast <2 x i64> %28 to <4 x i32>
  %30 = lshr <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x double> %16 to <8 x i32>
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  %33 = bitcast <8 x i32> %32 to <4 x i64>
  %34 = shufflevector <4 x i64> %33, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = bitcast <2 x i64> %34 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %35) #7
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = sub <4 x i32> %30, %37
  %39 = sub <4 x i32> zeroinitializer, %38
  %40 = ashr <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %41 = add nsw <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = zext <4 x i32> %41 to <4 x i64>
  %43 = shl nuw <4 x i64> %42, <i64 32, i64 32, i64 32, i64 32>
  %44 = bitcast <4 x i64> %43 to <8 x i32>
  %45 = shl <8 x i32> %44, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %46 = bitcast <8 x i32> %45 to <4 x double>
  %47 = fmul <4 x double> %13, %46
  %48 = sub <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %38
  %49 = sub <4 x i32> %48, %40
  %50 = zext <4 x i32> %49 to <4 x i64>
  %51 = shl nuw <4 x i64> %50, <i64 32, i64 32, i64 32, i64 32>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = shl <8 x i32> %52, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <8 x i32> %53 to <4 x double>
  %55 = fmul <4 x double> %47, %54
  %56 = fmul <4 x double> %14, %46
  %57 = fmul <4 x double> %56, %54
  %58 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %59 = fsub <4 x double> %58, %55
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %55, %60
  %62 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %57, %63
  %65 = fadd <4 x double> %55, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fsub <4 x double> %65, %55
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %55, %67
  %69 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %57, %70
  %72 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %65
  %73 = fmul <4 x double> %58, %72
  %74 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %73
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %58, <4 x double> %74) #7
  %76 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %76, <4 x double> %72, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #7
  %78 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %72, <4 x double> %77) #7
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %72, <4 x double> %75) #7
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %79, <4 x double> %80) #7
  %82 = fmul <4 x double> %73, %73
  %83 = fadd <4 x double> %73, %73
  %84 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %73, <4 x double> %84) #7
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %81, <4 x double> %85) #7
  %87 = fmul <4 x double> %82, %82
  %88 = fmul <4 x double> %87, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %89) #7
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %91, <4 x double> %92) #7
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %88, <4 x double> %90, <4 x double> %93) #7
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %82, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %96 = sitofp <4 x i32> %38 to <4 x double>
  %97 = fmul <4 x double> %96, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %97
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %96, <4 x double> %98) #7
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %96, <4 x double> %99) #7
  %101 = fmul <4 x double> %73, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %102 = fmul <4 x double> %81, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %103 = fadd <4 x double> %97, %101
  %104 = fsub <4 x double> %97, %103
  %105 = fadd <4 x double> %101, %104
  %106 = fadd <4 x double> %100, %105
  %107 = fadd <4 x double> %102, %106
  %108 = fmul <4 x double> %73, %82
  %109 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %73, <4 x double> %109) #7
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %73, <4 x double> %110) #7
  %112 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %81, <4 x double> %111) #7
  %113 = fmul <4 x double> %95, %108
  %114 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %113
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %95, <4 x double> %114) #7
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %95, <4 x double> %115) #7
  %117 = fadd <4 x double> %103, %113
  %118 = fsub <4 x double> %103, %117
  %119 = fadd <4 x double> %113, %118
  %120 = fadd <4 x double> %119, %107
  %121 = fadd <4 x double> %116, %120
  %122 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %123 = load <4 x double>, <4 x double>* %122, align 32
  %124 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %125 = load <4 x double>, <4 x double>* %124, align 32
  %126 = fadd <4 x double> %123, %117
  %127 = fsub <4 x double> %126, %123
  %128 = fsub <4 x double> %126, %127
  %129 = fsub <4 x double> %123, %128
  %130 = fsub <4 x double> %117, %127
  %131 = fadd <4 x double> %130, %129
  %132 = fadd <4 x double> %125, %121
  %133 = fadd <4 x double> %132, %131
  %134 = fadd <4 x double> %126, %133
  %135 = bitcast <4 x double> %0 to <4 x i64>
  %136 = and <4 x i64> %135, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = fcmp oeq <4 x double> %137, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %139 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 18) #7
  %140 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #7
  %141 = fcmp oeq <4 x double> %140, %0
  %142 = fcmp une <4 x double> %137, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %143 = fcmp ord <4 x double> %0, zeroinitializer
  %144 = and <4 x i1> %142, %143
  %145 = fcmp uno <4 x double> %134, zeroinitializer
  %146 = and <4 x i1> %144, %145
  %147 = or <4 x i1> %146, %138
  %148 = select <4 x i1> %141, <4 x double> %139, <4 x double> zeroinitializer
  %149 = select <4 x i1> %147, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %148
  %150 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %134, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %149) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <4 x double> %150
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_erfd4_u10avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_erfd4_u10avx2(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_erfcd4_u15avx2(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_erfcd4_u15avx2(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntd4_avx2(i32) local_unnamed_addr #2 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %18

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 7, i32 0) #7
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !36
  %10 = and i32 %9, 32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #7
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %14 = load i32, i32* %13, align 8, !tbaa !36
  %15 = and i32 %14, 4096
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 3
  br label %18

; <label>:18:                                     ; preds = %12, %5, %1
  %19 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %17, %12 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd4_avx2(i32) local_unnamed_addr #3 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double>, <4 x double>, <4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double>, <4 x double>, i8) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.round.pd.256(<4 x double>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double>, <4 x double>, <4 x double>) #4

; Function Attrs: argmemonly nounwind readonly
declare <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double>, i8*, <4 x i32>, <4 x double>, i8) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.permd(<8 x i32>, <8 x i32>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double>, <4 x i64>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.max.pd.256(<4 x double>, <4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.min.pd.256(<4 x double>, <4 x double>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #6

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { argmemonly nounwind readonly }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"rempi: argument 0"}
!5 = distinct !{!5, !"rempi"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"rempi: argument 0"}
!8 = distinct !{!8, !"rempi"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"rempi: argument 0"}
!11 = distinct !{!11, !"rempi"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"rempi: argument 0"}
!14 = distinct !{!14, !"rempi"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"rempi: argument 0"}
!17 = distinct !{!17, !"rempi"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"rempi: argument 0"}
!20 = distinct !{!20, !"rempi"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"rempi: argument 0"}
!23 = distinct !{!23, !"rempi"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"rempi: argument 0"}
!26 = distinct !{!26, !"rempi"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"Sleef_sincospid4_u05avx2: argument 0"}
!29 = distinct !{!29, !"Sleef_sincospid4_u05avx2"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"Sleef_sincospid4_u35avx2: argument 0"}
!32 = distinct !{!32, !"Sleef_sincospid4_u35avx2"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"Sleef_modfd4_avx2: argument 0"}
!35 = distinct !{!35, !"Sleef_modfd4_avx2"}
!36 = !{!37, !37, i64 0}
!37 = !{!"int", !38, i64 0}
!38 = !{!"omnipotent char", !39, i64 0}
!39 = !{!"Simple C/C++ TBAA"}
