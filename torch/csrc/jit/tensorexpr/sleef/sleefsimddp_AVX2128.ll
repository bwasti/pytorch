; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vdouble2 = type { <2 x double>, <2 x double> }
%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }

@.str = private unnamed_addr constant [5 x i8] c"AVX2\00", align 1
@rempitabdp = external constant [0 x double], align 8

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_ldexpd2_avx2128(<2 x double>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 9, i32 9, i32 9, i32 9>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 7, i32 7, i32 7, i32 7>
  %9 = shl <4 x i32> %7, <i32 9, i32 9, i32 9, i32 9>
  %10 = add nsw <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = icmp slt <4 x i32> %7, <i32 -7, i32 -7, i32 -7, i32 -7>
  %13 = sext <4 x i1> %12 to <4 x i32>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %16 = and <2 x i64> %15, %11
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = icmp sgt <4 x i32> %17, <i32 2047, i32 2047, i32 2047, i32 2047>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <2 x i64> %16 to <16 x i8>
  %21 = bitcast <4 x i32> %19 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> <i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0>, <16 x i8> %21) #7
  %23 = bitcast <16 x i8> %22 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %26 to <2 x double>
  %28 = fmul <2 x double> %27, %0
  %29 = fmul <2 x double> %28, %27
  %30 = fmul <2 x double> %29, %27
  %31 = fmul <2 x double> %30, %27
  %32 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 1023>
  %33 = sub <4 x i32> %32, %9
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %35 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %31, %37
  ret <2 x double> %38
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = bitcast <2 x double> %5 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %13) #7
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = sub <4 x i32> %10, %15
  %17 = shufflevector <4 x i32> %16, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %18 = sitofp <2 x i32> %17 to <2 x double>
  %19 = fcmp oeq <2 x double> %0, zeroinitializer
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0xC1E0000000000000, double 0xC1E0000000000000>, <2 x double> %21) #7
  %23 = fcmp uno <2 x double> %0, zeroinitializer
  %24 = sext <2 x i1> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <2 x double> %25) #7
  %27 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %28 = sext <2 x i1> %27 to <2 x i64>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %26, <2 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <2 x double> %29) #7
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %30) #7
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %15, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <2 x double> %0) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>, <2 x double> %13) #7
  br label %160

; <label>:15:                                     ; preds = %1
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %17 = bitcast <2 x double> %16 to <16 x i8>
  %18 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %17) #7
  %19 = icmp eq i32 %18, 65535
  br i1 %19, label %20, label %36, !prof !2

; <label>:20:                                     ; preds = %15
  %21 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %22 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %21, i32 11) #7
  %23 = fmul <2 x double> %22, <double 0x4170000000000000, double 0x4170000000000000>
  %24 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %23
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %25, i32 8) #7
  %27 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000>, <2 x double> %0) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000>, <2 x double> %28) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000>, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000>, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <2 x double> %32) #7
  %34 = fadd <2 x double> %23, %26
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>, <2 x double> %33) #7
  br label %160

; <label>:36:                                     ; preds = %15
  %37 = bitcast <2 x double> %0 to <4 x i32>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %39 = lshr <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = and <4 x i32> %39, <i32 2047, i32 2047, i32 2047, i32 2047>
  %41 = add nsw <4 x i32> %40, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %42 = icmp ugt <4 x i32> %40, <i32 1723, i32 1723, i32 1723, i32 1723>
  %43 = select <4 x i1> %42, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %45 = and <4 x i32> %44, <i32 0, i32 -1, i32 0, i32 -1>
  %46 = shl <4 x i32> %45, <i32 20, i32 20, i32 20, i32 20>
  %47 = add <4 x i32> %46, %37
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = ashr <4 x i32> %41, <i32 31, i32 31, i32 31, i32 31>
  %50 = xor <4 x i32> %49, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %51 = and <4 x i32> %50, %41
  %52 = shl <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %54 = fmul <2 x double> %53, %48
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %53, <2 x double> %55) #7
  %57 = fmul <2 x double> %54, <double 4.000000e+00, double 4.000000e+00>
  %58 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %57, i32 8) #7
  %59 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %54, i32 8) #7
  %60 = fmul <2 x double> %59, <double 4.000000e+00, double 4.000000e+00>
  %61 = fsub <2 x double> %58, %60
  %62 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %61) #7
  %63 = fmul <2 x double> %58, <double 2.500000e-01, double 2.500000e-01>
  %64 = fsub <2 x double> %54, %63
  %65 = fadd <2 x double> %56, %64
  %66 = fsub <2 x double> %64, %65
  %67 = fadd <2 x double> %56, %66
  %68 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %69 = fmul <2 x double> %68, %48
  %70 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %68, <2 x double> %70) #7
  %72 = fadd <2 x double> %65, %69
  %73 = fsub <2 x double> %72, %65
  %74 = fsub <2 x double> %72, %73
  %75 = fsub <2 x double> %65, %74
  %76 = fsub <2 x double> %69, %73
  %77 = fadd <2 x double> %76, %75
  %78 = fadd <2 x double> %71, %67
  %79 = fadd <2 x double> %78, %77
  %80 = fmul <2 x double> %72, <double 4.000000e+00, double 4.000000e+00>
  %81 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %80, i32 8) #7
  %82 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %72, i32 8) #7
  %83 = fmul <2 x double> %82, <double 4.000000e+00, double 4.000000e+00>
  %84 = fsub <2 x double> %81, %83
  %85 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %84) #7
  %86 = fmul <2 x double> %81, <double 2.500000e-01, double 2.500000e-01>
  %87 = fsub <2 x double> %72, %86
  %88 = add <4 x i32> %85, %62
  %89 = fadd <2 x double> %87, %79
  %90 = fsub <2 x double> %87, %89
  %91 = fadd <2 x double> %79, %90
  %92 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %93 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !3
  %94 = fmul <2 x double> %92, %48
  %95 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %94
  %96 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %92, <2 x double> %48, <2 x double> %95) #7
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %93, <2 x double> %48, <2 x double> %96) #7
  %98 = fadd <2 x double> %94, %89
  %99 = fsub <2 x double> %98, %89
  %100 = fsub <2 x double> %98, %99
  %101 = fsub <2 x double> %89, %100
  %102 = fsub <2 x double> %94, %99
  %103 = fadd <2 x double> %102, %101
  %104 = fadd <2 x double> %97, %91
  %105 = fadd <2 x double> %104, %103
  %106 = fadd <2 x double> %98, %105
  %107 = fsub <2 x double> %98, %106
  %108 = fadd <2 x double> %105, %107
  %109 = fmul <2 x double> %106, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %111) #7
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %112) #7
  %114 = bitcast <4 x i32> %47 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %116, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %118 = bitcast <2 x double> %117 to <2 x i64>
  %119 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> %48, <2 x double> %117) #7
  %120 = bitcast <2 x double> %113 to <2 x i64>
  %121 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %122 = and <2 x i64> %121, %120
  %123 = shl <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %124 = and <4 x i32> %123, <i32 6, i32 6, i32 6, i32 6>
  %125 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %119, <2 x double> zeroinitializer, i8 30) #7
  %126 = bitcast <2 x double> %125 to <4 x i32>
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %128 = bitcast <4 x i32> %127 to <16 x i8>
  %129 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %128) #7
  %130 = bitcast <16 x i8> %129 to <4 x i32>
  %131 = add <4 x i32> %124, %130
  %132 = ashr <4 x i32> %131, <i32 2, i32 2, i32 2, i32 2>
  %133 = and <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %134 = icmp ne <4 x i32> %133, zeroinitializer
  %135 = sext <4 x i1> %134 to <4 x i32>
  %136 = bitcast <2 x double> %119 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -9223372036854775808, i64 -9223372036854775808>
  %138 = xor <2 x i64> %137, <i64 -4613618979930100456, i64 -4613618979930100456>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = xor <2 x i64> %137, <i64 -4858919839960114169, i64 -4858919839960114169>
  %141 = bitcast <2 x i64> %140 to <2 x double>
  %142 = bitcast <2 x i64> %122 to <2 x double>
  %143 = fadd <2 x double> %119, %139
  %144 = fsub <2 x double> %143, %119
  %145 = fsub <2 x double> %143, %144
  %146 = fsub <2 x double> %119, %145
  %147 = fsub <2 x double> %139, %144
  %148 = fadd <2 x double> %147, %146
  %149 = fadd <2 x double> %142, %141
  %150 = fadd <2 x double> %149, %148
  %151 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %152 = bitcast <4 x i32> %151 to <2 x double>
  %153 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %119, <2 x double> %143, <2 x double> %152) #7
  %154 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %142, <2 x double> %150, <2 x double> %152) #7
  %155 = fadd <2 x double> %153, %154
  %156 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %157 = fcmp uno <2 x double> %0, zeroinitializer
  %158 = or <2 x i1> %156, %157
  %159 = select <2 x i1> %158, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %155
  br label %160

; <label>:160:                                    ; preds = %20, %36, %9
  %161 = phi <4 x i32> [ %12, %9 ], [ %27, %20 ], [ %132, %36 ]
  %162 = phi <2 x double> [ %14, %9 ], [ %35, %20 ], [ %159, %36 ]
  %163 = fmul <2 x double> %162, %162
  %164 = and <4 x i32> %161, <i32 1, i32 1, i32 1, i32 1>
  %165 = icmp ne <4 x i32> %164, zeroinitializer
  %166 = sext <4 x i1> %165 to <4 x i32>
  %167 = shufflevector <4 x i32> %166, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -9223372036854775808, i64 -9223372036854775808>
  %170 = bitcast <2 x double> %162 to <2 x i64>
  %171 = xor <2 x i64> %169, %170
  %172 = bitcast <2 x i64> %171 to <2 x double>
  %173 = fmul <2 x double> %163, %163
  %174 = fmul <2 x double> %173, %173
  %175 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %163, <2 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <2 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #7
  %176 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %163, <2 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <2 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #7
  %177 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %173, <2 x double> %175, <2 x double> %176) #7
  %178 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %163, <2 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <2 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #7
  %179 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %163, <2 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <2 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F>) #7
  %180 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %173, <2 x double> %178, <2 x double> %179) #7
  %181 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %174, <2 x double> %177, <2 x double> %180) #7
  %182 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %181, <2 x double> %163, <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>) #7
  %183 = fmul <2 x double> %182, %172
  %184 = fmul <2 x double> %163, %183
  %185 = fadd <2 x double> %184, %172
  %186 = icmp eq <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %187 = sext <2 x i1> %186 to <2 x i64>
  %188 = bitcast <2 x i64> %187 to <2 x double>
  %189 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %185, <2 x double> %0, <2 x double> %188) #7
  ret <2 x double> %189
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %18, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <2 x double> %0) #7
  %14 = fmul <2 x double> %11, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %15 = fadd <2 x double> %14, %13
  %16 = fsub <2 x double> %13, %15
  %17 = fadd <2 x double> %14, %16
  br label %200

; <label>:18:                                     ; preds = %1
  %19 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %20 = bitcast <2 x double> %19 to <16 x i8>
  %21 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %20) #7
  %22 = icmp eq i32 %21, 65535
  br i1 %22, label %23, label %74, !prof !2

; <label>:23:                                     ; preds = %18
  %24 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %25 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %24, i32 11) #7
  %26 = fmul <2 x double> %25, <double 0x4170000000000000, double 0x4170000000000000>
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %28, i32 8) #7
  %30 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000>, <2 x double> %0) #7
  %32 = fmul <2 x double> %29, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %33 = fadd <2 x double> %32, %31
  %34 = fsub <2 x double> %31, %33
  %35 = fadd <2 x double> %32, %34
  %36 = fmul <2 x double> %26, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %37 = fadd <2 x double> %36, %33
  %38 = fsub <2 x double> %37, %33
  %39 = fsub <2 x double> %37, %38
  %40 = fsub <2 x double> %33, %39
  %41 = fsub <2 x double> %36, %38
  %42 = fadd <2 x double> %41, %40
  %43 = fadd <2 x double> %35, %42
  %44 = fmul <2 x double> %29, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %45 = fadd <2 x double> %44, %37
  %46 = fsub <2 x double> %45, %37
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> %37, %47
  %49 = fsub <2 x double> %44, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fadd <2 x double> %50, %43
  %52 = fmul <2 x double> %26, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %53 = fadd <2 x double> %52, %45
  %54 = fsub <2 x double> %53, %45
  %55 = fsub <2 x double> %53, %54
  %56 = fsub <2 x double> %45, %55
  %57 = fsub <2 x double> %52, %54
  %58 = fadd <2 x double> %57, %56
  %59 = fadd <2 x double> %58, %51
  %60 = fmul <2 x double> %29, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %61 = fadd <2 x double> %60, %53
  %62 = fsub <2 x double> %61, %53
  %63 = fsub <2 x double> %61, %62
  %64 = fsub <2 x double> %53, %63
  %65 = fsub <2 x double> %60, %62
  %66 = fadd <2 x double> %65, %64
  %67 = fadd <2 x double> %66, %59
  %68 = fadd <2 x double> %26, %29
  %69 = fmul <2 x double> %68, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %70 = fadd <2 x double> %69, %61
  %71 = fsub <2 x double> %61, %70
  %72 = fadd <2 x double> %69, %71
  %73 = fadd <2 x double> %72, %67
  br label %200

; <label>:74:                                     ; preds = %18
  %75 = bitcast <2 x double> %0 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %77 = lshr <4 x i32> %76, <i32 20, i32 20, i32 20, i32 20>
  %78 = and <4 x i32> %77, <i32 2047, i32 2047, i32 2047, i32 2047>
  %79 = add nsw <4 x i32> %78, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %80 = icmp ugt <4 x i32> %78, <i32 1723, i32 1723, i32 1723, i32 1723>
  %81 = select <4 x i1> %80, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = add <4 x i32> %84, %75
  %86 = bitcast <4 x i32> %85 to <2 x double>
  %87 = ashr <4 x i32> %79, <i32 31, i32 31, i32 31, i32 31>
  %88 = xor <4 x i32> %87, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %89 = and <4 x i32> %88, %79
  %90 = shl <4 x i32> %89, <i32 2, i32 2, i32 2, i32 2>
  %91 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %90, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %92 = fmul <2 x double> %91, %86
  %93 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %92
  %94 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %86, <2 x double> %91, <2 x double> %93) #7
  %95 = fmul <2 x double> %92, <double 4.000000e+00, double 4.000000e+00>
  %96 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %95, i32 8) #7
  %97 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %92, i32 8) #7
  %98 = fmul <2 x double> %97, <double 4.000000e+00, double 4.000000e+00>
  %99 = fsub <2 x double> %96, %98
  %100 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %99) #7
  %101 = fmul <2 x double> %96, <double 2.500000e-01, double 2.500000e-01>
  %102 = fsub <2 x double> %92, %101
  %103 = fadd <2 x double> %94, %102
  %104 = fsub <2 x double> %102, %103
  %105 = fadd <2 x double> %94, %104
  %106 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %90, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %107 = fmul <2 x double> %106, %86
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %107
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %86, <2 x double> %106, <2 x double> %108) #7
  %110 = fadd <2 x double> %103, %107
  %111 = fsub <2 x double> %110, %103
  %112 = fsub <2 x double> %110, %111
  %113 = fsub <2 x double> %103, %112
  %114 = fsub <2 x double> %107, %111
  %115 = fadd <2 x double> %114, %113
  %116 = fadd <2 x double> %109, %105
  %117 = fadd <2 x double> %116, %115
  %118 = fmul <2 x double> %110, <double 4.000000e+00, double 4.000000e+00>
  %119 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %118, i32 8) #7
  %120 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %110, i32 8) #7
  %121 = fmul <2 x double> %120, <double 4.000000e+00, double 4.000000e+00>
  %122 = fsub <2 x double> %119, %121
  %123 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %122) #7
  %124 = fmul <2 x double> %119, <double 2.500000e-01, double 2.500000e-01>
  %125 = fsub <2 x double> %110, %124
  %126 = add <4 x i32> %123, %100
  %127 = fadd <2 x double> %125, %117
  %128 = fsub <2 x double> %125, %127
  %129 = fadd <2 x double> %117, %128
  %130 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %90, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %131 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %90, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !6
  %132 = fmul <2 x double> %130, %86
  %133 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %130, <2 x double> %86, <2 x double> %133) #7
  %135 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %131, <2 x double> %86, <2 x double> %134) #7
  %136 = fadd <2 x double> %132, %127
  %137 = fsub <2 x double> %136, %127
  %138 = fsub <2 x double> %136, %137
  %139 = fsub <2 x double> %127, %138
  %140 = fsub <2 x double> %132, %137
  %141 = fadd <2 x double> %140, %139
  %142 = fadd <2 x double> %135, %129
  %143 = fadd <2 x double> %142, %141
  %144 = fadd <2 x double> %136, %143
  %145 = fsub <2 x double> %136, %144
  %146 = fadd <2 x double> %143, %145
  %147 = fmul <2 x double> %144, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %148 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %147
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %144, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %148) #7
  %150 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %146, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %149) #7
  %151 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %144, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %150) #7
  %152 = bitcast <4 x i32> %85 to <2 x i64>
  %153 = and <2 x i64> %152, <i64 9223372036854775807, i64 9223372036854775807>
  %154 = bitcast <2 x i64> %153 to <2 x double>
  %155 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %154, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %156 = bitcast <2 x double> %155 to <2 x i64>
  %157 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %147, <2 x double> %86, <2 x double> %155) #7
  %158 = bitcast <2 x double> %151 to <2 x i64>
  %159 = xor <2 x i64> %156, <i64 -1, i64 -1>
  %160 = and <2 x i64> %159, %158
  %161 = shl <4 x i32> %126, <i32 1, i32 1, i32 1, i32 1>
  %162 = and <4 x i32> %161, <i32 6, i32 6, i32 6, i32 6>
  %163 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %157, <2 x double> zeroinitializer, i8 30) #7
  %164 = bitcast <2 x double> %163 to <4 x i32>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %166) #7
  %168 = bitcast <16 x i8> %167 to <4 x i32>
  %169 = add <4 x i32> %162, %168
  %170 = ashr <4 x i32> %169, <i32 2, i32 2, i32 2, i32 2>
  %171 = and <4 x i32> %126, <i32 1, i32 1, i32 1, i32 1>
  %172 = icmp ne <4 x i32> %171, zeroinitializer
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <2 x double> %157 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -9223372036854775808, i64 -9223372036854775808>
  %176 = xor <2 x i64> %175, <i64 -4613618979930100456, i64 -4613618979930100456>
  %177 = bitcast <2 x i64> %176 to <2 x double>
  %178 = xor <2 x i64> %175, <i64 -4858919839960114169, i64 -4858919839960114169>
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = bitcast <2 x i64> %160 to <2 x double>
  %181 = fadd <2 x double> %157, %177
  %182 = fsub <2 x double> %181, %157
  %183 = fsub <2 x double> %181, %182
  %184 = fsub <2 x double> %157, %183
  %185 = fsub <2 x double> %177, %182
  %186 = fadd <2 x double> %185, %184
  %187 = fadd <2 x double> %180, %179
  %188 = fadd <2 x double> %187, %186
  %189 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %190 = bitcast <4 x i32> %189 to <2 x double>
  %191 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %157, <2 x double> %181, <2 x double> %190) #7
  %192 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %180, <2 x double> %188, <2 x double> %190) #7
  %193 = fadd <2 x double> %191, %192
  %194 = fsub <2 x double> %191, %193
  %195 = fadd <2 x double> %192, %194
  %196 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %197 = fcmp uno <2 x double> %0, zeroinitializer
  %198 = or <2 x i1> %196, %197
  %199 = select <2 x i1> %198, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %193
  br label %200

; <label>:200:                                    ; preds = %23, %74, %9
  %201 = phi <2 x double> [ %199, %74 ], [ %70, %23 ], [ %15, %9 ]
  %202 = phi <2 x double> [ %195, %74 ], [ %73, %23 ], [ %17, %9 ]
  %203 = phi <4 x i32> [ %170, %74 ], [ %30, %23 ], [ %12, %9 ]
  %204 = fmul <2 x double> %201, %201
  %205 = fadd <2 x double> %201, %201
  %206 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %204
  %207 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %201, <2 x double> %201, <2 x double> %206) #7
  %208 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %205, <2 x double> %202, <2 x double> %207) #7
  %209 = fmul <2 x double> %204, %204
  %210 = fmul <2 x double> %209, %209
  %211 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %204, <2 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <2 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #7
  %212 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %204, <2 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <2 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #7
  %213 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %204, <2 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <2 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #7
  %214 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %209, <2 x double> %212, <2 x double> %213) #7
  %215 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %210, <2 x double> %211, <2 x double> %214) #7
  %216 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %215, <2 x double> %204, <2 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9>) #7
  %217 = fmul <2 x double> %204, %216
  %218 = fadd <2 x double> %217, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %219 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %218
  %220 = fadd <2 x double> %217, %219
  %221 = fmul <2 x double> %204, %218
  %222 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %221
  %223 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %218, <2 x double> %204, <2 x double> %222) #7
  %224 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %220, <2 x double> %204, <2 x double> %223) #7
  %225 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %218, <2 x double> %208, <2 x double> %224) #7
  %226 = fadd <2 x double> %221, <double 1.000000e+00, double 1.000000e+00>
  %227 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %226
  %228 = fadd <2 x double> %221, %227
  %229 = fadd <2 x double> %225, %228
  %230 = fmul <2 x double> %201, %229
  %231 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %202, <2 x double> %226, <2 x double> %230) #7
  %232 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %201, <2 x double> %226, <2 x double> %231) #7
  %233 = and <4 x i32> %203, <i32 1, i32 1, i32 1, i32 1>
  %234 = icmp ne <4 x i32> %233, zeroinitializer
  %235 = sext <4 x i1> %234 to <4 x i32>
  %236 = shufflevector <4 x i32> %235, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %237 = bitcast <4 x i32> %236 to <2 x i64>
  %238 = and <2 x i64> %237, <i64 -9223372036854775808, i64 -9223372036854775808>
  %239 = bitcast <2 x double> %232 to <2 x i64>
  %240 = xor <2 x i64> %238, %239
  %241 = bitcast <2 x i64> %240 to <2 x double>
  %242 = fcmp oeq <2 x double> %0, zeroinitializer
  %243 = sext <2 x i1> %242 to <2 x i64>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %241, <2 x double> %0, <2 x double> %244) #7
  ret <2 x double> %245
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %16, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %11, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <2 x double> %0) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <2 x double> %14) #7
  br label %166

; <label>:16:                                     ; preds = %1
  %17 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %18 = bitcast <2 x double> %17 to <16 x i8>
  %19 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %18) #7
  %20 = icmp eq i32 %19, 65535
  br i1 %20, label %21, label %41, !prof !2

; <label>:21:                                     ; preds = %16
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <2 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #7
  %23 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %22, i32 11) #7
  %24 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xC160000000000000, double 0xC160000000000000>, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %26 = fadd <2 x double> %24, %25
  %27 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %26) #7
  %28 = fmul <2 x double> %23, <double 0x4170000000000000, double 0x4170000000000000>
  %29 = shl <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = or <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %32 = sitofp <2 x i32> %31 to <2 x double>
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %0) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %34) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %37) #7
  %39 = fadd <2 x double> %28, %32
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <2 x double> %38) #7
  br label %166

; <label>:41:                                     ; preds = %16
  %42 = bitcast <2 x double> %0 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %44 = lshr <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = and <4 x i32> %44, <i32 2047, i32 2047, i32 2047, i32 2047>
  %46 = add nsw <4 x i32> %45, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %47 = icmp ugt <4 x i32> %45, <i32 1723, i32 1723, i32 1723, i32 1723>
  %48 = select <4 x i1> %47, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %50 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = shl <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = add <4 x i32> %51, %42
  %53 = bitcast <4 x i32> %52 to <2 x double>
  %54 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %55 = xor <4 x i32> %54, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %56 = and <4 x i32> %55, %46
  %57 = shl <4 x i32> %56, <i32 2, i32 2, i32 2, i32 2>
  %58 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %59 = fmul <2 x double> %58, %53
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %58, <2 x double> %60) #7
  %62 = fmul <2 x double> %59, <double 4.000000e+00, double 4.000000e+00>
  %63 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %62, i32 8) #7
  %64 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %59, i32 8) #7
  %65 = fmul <2 x double> %64, <double 4.000000e+00, double 4.000000e+00>
  %66 = fsub <2 x double> %63, %65
  %67 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %66) #7
  %68 = fmul <2 x double> %63, <double 2.500000e-01, double 2.500000e-01>
  %69 = fsub <2 x double> %59, %68
  %70 = fadd <2 x double> %61, %69
  %71 = fsub <2 x double> %69, %70
  %72 = fadd <2 x double> %61, %71
  %73 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %74 = fmul <2 x double> %73, %53
  %75 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %73, <2 x double> %75) #7
  %77 = fadd <2 x double> %70, %74
  %78 = fsub <2 x double> %77, %70
  %79 = fsub <2 x double> %77, %78
  %80 = fsub <2 x double> %70, %79
  %81 = fsub <2 x double> %74, %78
  %82 = fadd <2 x double> %81, %80
  %83 = fadd <2 x double> %76, %72
  %84 = fadd <2 x double> %83, %82
  %85 = fmul <2 x double> %77, <double 4.000000e+00, double 4.000000e+00>
  %86 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %85, i32 8) #7
  %87 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %77, i32 8) #7
  %88 = fmul <2 x double> %87, <double 4.000000e+00, double 4.000000e+00>
  %89 = fsub <2 x double> %86, %88
  %90 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %89) #7
  %91 = fmul <2 x double> %86, <double 2.500000e-01, double 2.500000e-01>
  %92 = fsub <2 x double> %77, %91
  %93 = add <4 x i32> %90, %67
  %94 = fadd <2 x double> %92, %84
  %95 = fsub <2 x double> %92, %94
  %96 = fadd <2 x double> %84, %95
  %97 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %98 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !9
  %99 = fmul <2 x double> %97, %53
  %100 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %99
  %101 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %97, <2 x double> %53, <2 x double> %100) #7
  %102 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %98, <2 x double> %53, <2 x double> %101) #7
  %103 = fadd <2 x double> %99, %94
  %104 = fsub <2 x double> %103, %94
  %105 = fsub <2 x double> %103, %104
  %106 = fsub <2 x double> %94, %105
  %107 = fsub <2 x double> %99, %104
  %108 = fadd <2 x double> %107, %106
  %109 = fadd <2 x double> %102, %96
  %110 = fadd <2 x double> %109, %108
  %111 = fadd <2 x double> %103, %110
  %112 = fsub <2 x double> %103, %111
  %113 = fadd <2 x double> %110, %112
  %114 = fmul <2 x double> %111, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %115 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %114
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %111, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %115) #7
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %113, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %116) #7
  %118 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %111, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %117) #7
  %119 = bitcast <4 x i32> %52 to <2 x i64>
  %120 = and <2 x i64> %119, <i64 9223372036854775807, i64 9223372036854775807>
  %121 = bitcast <2 x i64> %120 to <2 x double>
  %122 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %121, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %123 = bitcast <2 x double> %122 to <2 x i64>
  %124 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %114, <2 x double> %53, <2 x double> %122) #7
  %125 = bitcast <2 x double> %118 to <2 x i64>
  %126 = xor <2 x i64> %123, <i64 -1, i64 -1>
  %127 = and <2 x i64> %126, %125
  %128 = shl <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %129 = and <4 x i32> %128, <i32 6, i32 6, i32 6, i32 6>
  %130 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %124, <2 x double> zeroinitializer, i8 30) #7
  %131 = bitcast <2 x double> %130 to <4 x i32>
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %133) #7
  %135 = bitcast <16 x i8> %134 to <4 x i32>
  %136 = add <4 x i32> %129, %135
  %137 = ashr <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %138 = and <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %139 = icmp eq <4 x i32> %138, zeroinitializer
  %140 = sext <4 x i1> %139 to <4 x i32>
  %141 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> zeroinitializer, <2 x double> %130) #7
  %142 = bitcast <2 x double> %141 to <2 x i64>
  %143 = and <2 x i64> %142, <i64 -9223372036854775808, i64 -9223372036854775808>
  %144 = xor <2 x i64> %143, <i64 -4613618979930100456, i64 -4613618979930100456>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = xor <2 x i64> %143, <i64 -4858919839960114169, i64 -4858919839960114169>
  %147 = bitcast <2 x i64> %146 to <2 x double>
  %148 = bitcast <2 x i64> %127 to <2 x double>
  %149 = fadd <2 x double> %124, %145
  %150 = fsub <2 x double> %149, %124
  %151 = fsub <2 x double> %149, %150
  %152 = fsub <2 x double> %124, %151
  %153 = fsub <2 x double> %145, %150
  %154 = fadd <2 x double> %153, %152
  %155 = fadd <2 x double> %148, %147
  %156 = fadd <2 x double> %155, %154
  %157 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %158 = bitcast <4 x i32> %157 to <2 x double>
  %159 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %124, <2 x double> %149, <2 x double> %158) #7
  %160 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %148, <2 x double> %156, <2 x double> %158) #7
  %161 = fadd <2 x double> %159, %160
  %162 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %163 = fcmp uno <2 x double> %0, zeroinitializer
  %164 = or <2 x i1> %162, %163
  %165 = select <2 x i1> %164, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %161
  br label %166

; <label>:166:                                    ; preds = %21, %41, %9
  %167 = phi <4 x i32> [ %13, %9 ], [ %30, %21 ], [ %137, %41 ]
  %168 = phi <2 x double> [ %15, %9 ], [ %40, %21 ], [ %165, %41 ]
  %169 = fmul <2 x double> %168, %168
  %170 = and <4 x i32> %167, <i32 2, i32 2, i32 2, i32 2>
  %171 = icmp eq <4 x i32> %170, zeroinitializer
  %172 = sext <4 x i1> %171 to <4 x i32>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -9223372036854775808, i64 -9223372036854775808>
  %176 = bitcast <2 x double> %168 to <2 x i64>
  %177 = xor <2 x i64> %175, %176
  %178 = bitcast <2 x i64> %177 to <2 x double>
  %179 = fmul <2 x double> %169, %169
  %180 = fmul <2 x double> %179, %179
  %181 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %169, <2 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <2 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #7
  %182 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %169, <2 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <2 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #7
  %183 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %179, <2 x double> %181, <2 x double> %182) #7
  %184 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %169, <2 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <2 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #7
  %185 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %169, <2 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <2 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F>) #7
  %186 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %179, <2 x double> %184, <2 x double> %185) #7
  %187 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %180, <2 x double> %183, <2 x double> %186) #7
  %188 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> %169, <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>) #7
  %189 = fmul <2 x double> %188, %178
  %190 = fmul <2 x double> %169, %189
  %191 = fadd <2 x double> %190, %178
  ret <2 x double> %191
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %26, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %11, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #7
  %14 = fmul <2 x double> %12, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %15 = fadd <2 x double> %14, %0
  %16 = fsub <2 x double> %15, %0
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %0, %17
  %19 = fsub <2 x double> %14, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fmul <2 x double> %12, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %22 = fadd <2 x double> %21, %15
  %23 = fsub <2 x double> %15, %22
  %24 = fadd <2 x double> %21, %23
  %25 = fadd <2 x double> %24, %20
  br label %216

; <label>:26:                                     ; preds = %1
  %27 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %28 = bitcast <2 x double> %27 to <16 x i8>
  %29 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %28) #7
  %30 = icmp eq i32 %29, 65535
  br i1 %30, label %31, label %89, !prof !2

; <label>:31:                                     ; preds = %26
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <2 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %32, i32 11) #7
  %34 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> <double 0xC160000000000000, double 0xC160000000000000>, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %36 = fadd <2 x double> %34, %35
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %36) #7
  %38 = fmul <2 x double> %33, <double 0x4170000000000000, double 0x4170000000000000>
  %39 = shl <4 x i32> %37, <i32 1, i32 1, i32 1, i32 1>
  %40 = or <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %42 = sitofp <2 x i32> %41 to <2 x double>
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %0) #7
  %44 = fmul <2 x double> %42, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %45 = fadd <2 x double> %43, %44
  %46 = fsub <2 x double> %45, %43
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> %43, %47
  %49 = fsub <2 x double> %44, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fmul <2 x double> %38, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %52 = fadd <2 x double> %51, %45
  %53 = fsub <2 x double> %52, %45
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %45, %54
  %56 = fsub <2 x double> %51, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %50, %57
  %59 = fmul <2 x double> %42, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %60 = fadd <2 x double> %59, %52
  %61 = fsub <2 x double> %60, %52
  %62 = fsub <2 x double> %60, %61
  %63 = fsub <2 x double> %52, %62
  %64 = fsub <2 x double> %59, %61
  %65 = fadd <2 x double> %64, %63
  %66 = fadd <2 x double> %65, %58
  %67 = fmul <2 x double> %38, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %68 = fadd <2 x double> %67, %60
  %69 = fsub <2 x double> %68, %60
  %70 = fsub <2 x double> %68, %69
  %71 = fsub <2 x double> %60, %70
  %72 = fsub <2 x double> %67, %69
  %73 = fadd <2 x double> %72, %71
  %74 = fadd <2 x double> %73, %66
  %75 = fmul <2 x double> %42, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %76 = fadd <2 x double> %75, %68
  %77 = fsub <2 x double> %76, %68
  %78 = fsub <2 x double> %76, %77
  %79 = fsub <2 x double> %68, %78
  %80 = fsub <2 x double> %75, %77
  %81 = fadd <2 x double> %80, %79
  %82 = fadd <2 x double> %81, %74
  %83 = fadd <2 x double> %38, %42
  %84 = fmul <2 x double> %83, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %85 = fadd <2 x double> %84, %76
  %86 = fsub <2 x double> %76, %85
  %87 = fadd <2 x double> %84, %86
  %88 = fadd <2 x double> %87, %82
  br label %216

; <label>:89:                                     ; preds = %26
  %90 = bitcast <2 x double> %0 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %92 = lshr <4 x i32> %91, <i32 20, i32 20, i32 20, i32 20>
  %93 = and <4 x i32> %92, <i32 2047, i32 2047, i32 2047, i32 2047>
  %94 = add nsw <4 x i32> %93, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %95 = icmp ugt <4 x i32> %93, <i32 1723, i32 1723, i32 1723, i32 1723>
  %96 = select <4 x i1> %95, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %98 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = add <4 x i32> %99, %90
  %101 = bitcast <4 x i32> %100 to <2 x double>
  %102 = ashr <4 x i32> %94, <i32 31, i32 31, i32 31, i32 31>
  %103 = xor <4 x i32> %102, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %104 = and <4 x i32> %103, %94
  %105 = shl <4 x i32> %104, <i32 2, i32 2, i32 2, i32 2>
  %106 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %107 = fmul <2 x double> %106, %101
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %107
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %106, <2 x double> %108) #7
  %110 = fmul <2 x double> %107, <double 4.000000e+00, double 4.000000e+00>
  %111 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %110, i32 8) #7
  %112 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %107, i32 8) #7
  %113 = fmul <2 x double> %112, <double 4.000000e+00, double 4.000000e+00>
  %114 = fsub <2 x double> %111, %113
  %115 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %114) #7
  %116 = fmul <2 x double> %111, <double 2.500000e-01, double 2.500000e-01>
  %117 = fsub <2 x double> %107, %116
  %118 = fadd <2 x double> %109, %117
  %119 = fsub <2 x double> %117, %118
  %120 = fadd <2 x double> %109, %119
  %121 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %122 = fmul <2 x double> %121, %101
  %123 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %121, <2 x double> %123) #7
  %125 = fadd <2 x double> %118, %122
  %126 = fsub <2 x double> %125, %118
  %127 = fsub <2 x double> %125, %126
  %128 = fsub <2 x double> %118, %127
  %129 = fsub <2 x double> %122, %126
  %130 = fadd <2 x double> %129, %128
  %131 = fadd <2 x double> %124, %120
  %132 = fadd <2 x double> %131, %130
  %133 = fmul <2 x double> %125, <double 4.000000e+00, double 4.000000e+00>
  %134 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %133, i32 8) #7
  %135 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %125, i32 8) #7
  %136 = fmul <2 x double> %135, <double 4.000000e+00, double 4.000000e+00>
  %137 = fsub <2 x double> %134, %136
  %138 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %137) #7
  %139 = fmul <2 x double> %134, <double 2.500000e-01, double 2.500000e-01>
  %140 = fsub <2 x double> %125, %139
  %141 = add <4 x i32> %138, %115
  %142 = fadd <2 x double> %140, %132
  %143 = fsub <2 x double> %140, %142
  %144 = fadd <2 x double> %132, %143
  %145 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %146 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !12
  %147 = fmul <2 x double> %145, %101
  %148 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %147
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %101, <2 x double> %148) #7
  %150 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %146, <2 x double> %101, <2 x double> %149) #7
  %151 = fadd <2 x double> %147, %142
  %152 = fsub <2 x double> %151, %142
  %153 = fsub <2 x double> %151, %152
  %154 = fsub <2 x double> %142, %153
  %155 = fsub <2 x double> %147, %152
  %156 = fadd <2 x double> %155, %154
  %157 = fadd <2 x double> %150, %144
  %158 = fadd <2 x double> %157, %156
  %159 = fadd <2 x double> %151, %158
  %160 = fsub <2 x double> %151, %159
  %161 = fadd <2 x double> %158, %160
  %162 = fmul <2 x double> %159, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %163 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %162
  %164 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %159, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %163) #7
  %165 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %161, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %164) #7
  %166 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %159, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %165) #7
  %167 = bitcast <4 x i32> %100 to <2 x i64>
  %168 = and <2 x i64> %167, <i64 9223372036854775807, i64 9223372036854775807>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %169, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %171 = bitcast <2 x double> %170 to <2 x i64>
  %172 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %162, <2 x double> %101, <2 x double> %170) #7
  %173 = bitcast <2 x double> %166 to <2 x i64>
  %174 = xor <2 x i64> %171, <i64 -1, i64 -1>
  %175 = and <2 x i64> %174, %173
  %176 = shl <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  %177 = and <4 x i32> %176, <i32 6, i32 6, i32 6, i32 6>
  %178 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %172, <2 x double> zeroinitializer, i8 30) #7
  %179 = bitcast <2 x double> %178 to <4 x i32>
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %181 = bitcast <4 x i32> %180 to <16 x i8>
  %182 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %181) #7
  %183 = bitcast <16 x i8> %182 to <4 x i32>
  %184 = add <4 x i32> %177, %183
  %185 = ashr <4 x i32> %184, <i32 1, i32 1, i32 1, i32 1>
  %186 = and <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  %187 = icmp eq <4 x i32> %186, zeroinitializer
  %188 = sext <4 x i1> %187 to <4 x i32>
  %189 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> zeroinitializer, <2 x double> %178) #7
  %190 = bitcast <2 x double> %189 to <2 x i64>
  %191 = and <2 x i64> %190, <i64 -9223372036854775808, i64 -9223372036854775808>
  %192 = xor <2 x i64> %191, <i64 -4613618979930100456, i64 -4613618979930100456>
  %193 = bitcast <2 x i64> %192 to <2 x double>
  %194 = xor <2 x i64> %191, <i64 -4858919839960114169, i64 -4858919839960114169>
  %195 = bitcast <2 x i64> %194 to <2 x double>
  %196 = bitcast <2 x i64> %175 to <2 x double>
  %197 = fadd <2 x double> %172, %193
  %198 = fsub <2 x double> %197, %172
  %199 = fsub <2 x double> %197, %198
  %200 = fsub <2 x double> %172, %199
  %201 = fsub <2 x double> %193, %198
  %202 = fadd <2 x double> %201, %200
  %203 = fadd <2 x double> %196, %195
  %204 = fadd <2 x double> %203, %202
  %205 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %206 = bitcast <4 x i32> %205 to <2 x double>
  %207 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %172, <2 x double> %197, <2 x double> %206) #7
  %208 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %196, <2 x double> %204, <2 x double> %206) #7
  %209 = fadd <2 x double> %207, %208
  %210 = fsub <2 x double> %207, %209
  %211 = fadd <2 x double> %208, %210
  %212 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %213 = fcmp uno <2 x double> %0, zeroinitializer
  %214 = or <2 x i1> %212, %213
  %215 = select <2 x i1> %214, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %209
  br label %216

; <label>:216:                                    ; preds = %31, %89, %9
  %217 = phi <2 x double> [ %215, %89 ], [ %85, %31 ], [ %22, %9 ]
  %218 = phi <2 x double> [ %211, %89 ], [ %88, %31 ], [ %25, %9 ]
  %219 = phi <4 x i32> [ %185, %89 ], [ %40, %31 ], [ %13, %9 ]
  %220 = fmul <2 x double> %217, %217
  %221 = fadd <2 x double> %217, %217
  %222 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %220
  %223 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %217, <2 x double> %217, <2 x double> %222) #7
  %224 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %221, <2 x double> %218, <2 x double> %223) #7
  %225 = fmul <2 x double> %220, %220
  %226 = fmul <2 x double> %225, %225
  %227 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %220, <2 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <2 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #7
  %228 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %220, <2 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <2 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #7
  %229 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %220, <2 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <2 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #7
  %230 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %225, <2 x double> %228, <2 x double> %229) #7
  %231 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %226, <2 x double> %227, <2 x double> %230) #7
  %232 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %231, <2 x double> %220, <2 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9>) #7
  %233 = fmul <2 x double> %220, %232
  %234 = fadd <2 x double> %233, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %235 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %234
  %236 = fadd <2 x double> %233, %235
  %237 = fmul <2 x double> %220, %234
  %238 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %237
  %239 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %234, <2 x double> %220, <2 x double> %238) #7
  %240 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %236, <2 x double> %220, <2 x double> %239) #7
  %241 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %234, <2 x double> %224, <2 x double> %240) #7
  %242 = fadd <2 x double> %237, <double 1.000000e+00, double 1.000000e+00>
  %243 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %242
  %244 = fadd <2 x double> %237, %243
  %245 = fadd <2 x double> %241, %244
  %246 = fmul <2 x double> %217, %245
  %247 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %218, <2 x double> %242, <2 x double> %246) #7
  %248 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %217, <2 x double> %242, <2 x double> %247) #7
  %249 = and <4 x i32> %219, <i32 2, i32 2, i32 2, i32 2>
  %250 = icmp eq <4 x i32> %249, zeroinitializer
  %251 = sext <4 x i1> %250 to <4 x i32>
  %252 = shufflevector <4 x i32> %251, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %253 = bitcast <4 x i32> %252 to <2 x i64>
  %254 = and <2 x i64> %253, <i64 -9223372036854775808, i64 -9223372036854775808>
  %255 = bitcast <2 x double> %248 to <2 x i64>
  %256 = xor <2 x i64> %254, %255
  %257 = bitcast <2 x i64> %256 to <2 x double>
  ret <2 x double> %257
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u35avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %7 = bitcast <2 x double> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #7
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %16, !prof !2

; <label>:10:                                     ; preds = %2
  %11 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #7
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <2 x double> %1) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <2 x double> %14) #7
  br label %130

; <label>:16:                                     ; preds = %2
  %17 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %18 = bitcast <2 x double> %17 to <16 x i8>
  %19 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %18) #7
  %20 = icmp eq i32 %19, 65535
  br i1 %20, label %21, label %37, !prof !2

; <label>:21:                                     ; preds = %16
  %22 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %23 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %22, i32 11) #7
  %24 = fmul <2 x double> %23, <double 0x4170000000000000, double 0x4170000000000000>
  %25 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %26 = fsub <2 x double> %25, %24
  %27 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %26, i32 8) #7
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %1) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %33) #7
  %35 = fadd <2 x double> %24, %27
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <2 x double> %34) #7
  br label %130

; <label>:37:                                     ; preds = %16
  %38 = bitcast <2 x double> %1 to <4 x i32>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %40 = lshr <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = and <4 x i32> %40, <i32 2047, i32 2047, i32 2047, i32 2047>
  %42 = add nsw <4 x i32> %41, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %43 = icmp ugt <4 x i32> %41, <i32 1723, i32 1723, i32 1723, i32 1723>
  %44 = select <4 x i1> %43, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = add <4 x i32> %47, %38
  %49 = bitcast <4 x i32> %48 to <2 x double>
  %50 = ashr <4 x i32> %42, <i32 31, i32 31, i32 31, i32 31>
  %51 = xor <4 x i32> %50, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %52 = and <4 x i32> %51, %42
  %53 = shl <4 x i32> %52, <i32 2, i32 2, i32 2, i32 2>
  %54 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %55 = fmul <2 x double> %54, %49
  %56 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %55
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %54, <2 x double> %56) #7
  %58 = fmul <2 x double> %55, <double 4.000000e+00, double 4.000000e+00>
  %59 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %58, i32 8) #7
  %60 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %55, i32 8) #7
  %61 = fmul <2 x double> %60, <double 4.000000e+00, double 4.000000e+00>
  %62 = fsub <2 x double> %59, %61
  %63 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %62) #7
  %64 = fmul <2 x double> %59, <double 2.500000e-01, double 2.500000e-01>
  %65 = fsub <2 x double> %55, %64
  %66 = fadd <2 x double> %57, %65
  %67 = fsub <2 x double> %65, %66
  %68 = fadd <2 x double> %57, %67
  %69 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %70 = fmul <2 x double> %69, %49
  %71 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %70
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %69, <2 x double> %71) #7
  %73 = fadd <2 x double> %66, %70
  %74 = fsub <2 x double> %73, %66
  %75 = fsub <2 x double> %73, %74
  %76 = fsub <2 x double> %66, %75
  %77 = fsub <2 x double> %70, %74
  %78 = fadd <2 x double> %77, %76
  %79 = fadd <2 x double> %72, %68
  %80 = fadd <2 x double> %79, %78
  %81 = fmul <2 x double> %73, <double 4.000000e+00, double 4.000000e+00>
  %82 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %81, i32 8) #7
  %83 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %73, i32 8) #7
  %84 = fmul <2 x double> %83, <double 4.000000e+00, double 4.000000e+00>
  %85 = fsub <2 x double> %82, %84
  %86 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %85) #7
  %87 = fmul <2 x double> %82, <double 2.500000e-01, double 2.500000e-01>
  %88 = fsub <2 x double> %73, %87
  %89 = add <4 x i32> %86, %63
  %90 = fadd <2 x double> %88, %80
  %91 = fsub <2 x double> %88, %90
  %92 = fadd <2 x double> %80, %91
  %93 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %94 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !15
  %95 = fmul <2 x double> %93, %49
  %96 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %95
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %93, <2 x double> %49, <2 x double> %96) #7
  %98 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %94, <2 x double> %49, <2 x double> %97) #7
  %99 = fadd <2 x double> %95, %90
  %100 = fsub <2 x double> %99, %90
  %101 = fsub <2 x double> %99, %100
  %102 = fsub <2 x double> %90, %101
  %103 = fsub <2 x double> %95, %100
  %104 = fadd <2 x double> %103, %102
  %105 = fadd <2 x double> %98, %92
  %106 = fadd <2 x double> %105, %104
  %107 = fadd <2 x double> %99, %106
  %108 = fsub <2 x double> %99, %107
  %109 = fadd <2 x double> %106, %108
  %110 = fmul <2 x double> %107, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %111 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %110
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %111) #7
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %109, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %112) #7
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %113) #7
  %115 = bitcast <4 x i32> %48 to <2 x i64>
  %116 = and <2 x i64> %115, <i64 9223372036854775807, i64 9223372036854775807>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %117, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %119 = bitcast <2 x double> %118 to <2 x i64>
  %120 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %110, <2 x double> %49, <2 x double> %118) #7
  %121 = bitcast <2 x double> %114 to <2 x i64>
  %122 = xor <2 x i64> %119, <i64 -1, i64 -1>
  %123 = and <2 x i64> %122, %121
  %124 = bitcast <2 x i64> %123 to <2 x double>
  %125 = fadd <2 x double> %120, %124
  %126 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %127 = fcmp uno <2 x double> %1, zeroinitializer
  %128 = or <2 x i1> %126, %127
  %129 = select <2 x i1> %128, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %125
  br label %130

; <label>:130:                                    ; preds = %21, %37, %10
  %131 = phi <4 x i32> [ %13, %10 ], [ %28, %21 ], [ %89, %37 ]
  %132 = phi <2 x double> [ %15, %10 ], [ %36, %21 ], [ %129, %37 ]
  %133 = fmul <2 x double> %132, %132
  %134 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <2 x double> %133, <2 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #7
  %135 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %133, <2 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #7
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %135, <2 x double> %133, <2 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #7
  %137 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %136, <2 x double> %133, <2 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135>) #7
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %137, <2 x double> %133, <2 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542>) #7
  %139 = fmul <2 x double> %133, %138
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %139, <2 x double> %132, <2 x double> %132) #7
  %141 = icmp eq <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %142 = sext <2 x i1> %141 to <2 x i64>
  %143 = bitcast <2 x i64> %142 to <2 x double>
  %144 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %140, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %143) #7
  %145 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <2 x double> %133, <2 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #7
  %146 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %133, <2 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #7
  %147 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %146, <2 x double> %133, <2 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #7
  %148 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %147, <2 x double> %133, <2 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #7
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %148, <2 x double> %133, <2 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545>) #7
  %150 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %149, <2 x double> %133, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %151 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %150, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %152 = and <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>
  %153 = icmp eq <4 x i32> %152, zeroinitializer
  %154 = sext <4 x i1> %153 to <4 x i32>
  %155 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %156 = bitcast <4 x i32> %155 to <2 x double>
  %157 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %151, <2 x double> %144, <2 x double> %156) #7
  %158 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %144, <2 x double> %151, <2 x double> %156) #7
  %159 = and <4 x i32> %131, <i32 2, i32 2, i32 2, i32 2>
  %160 = icmp ne <4 x i32> %159, zeroinitializer
  %161 = sext <4 x i1> %160 to <4 x i32>
  %162 = shufflevector <4 x i32> %161, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  %164 = and <2 x i64> %163, <i64 -9223372036854775808, i64 -9223372036854775808>
  %165 = bitcast <2 x double> %157 to <2 x i64>
  %166 = xor <2 x i64> %164, %165
  %167 = add <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>
  %168 = and <4 x i32> %167, <i32 2, i32 2, i32 2, i32 2>
  %169 = icmp ne <4 x i32> %168, zeroinitializer
  %170 = sext <4 x i1> %169 to <4 x i32>
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %172 = bitcast <4 x i32> %171 to <2 x i64>
  %173 = and <2 x i64> %172, <i64 -9223372036854775808, i64 -9223372036854775808>
  %174 = bitcast <2 x double> %158 to <2 x i64>
  %175 = xor <2 x i64> %173, %174
  %176 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %166, <2 x i64>* %176, align 16
  %177 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %178 = bitcast <2 x double>* %177 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %178, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u10avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %7 = bitcast <2 x double> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #7
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %2
  %11 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #7
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <2 x double> %1) #7
  %15 = fmul <2 x double> %12, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %16 = fadd <2 x double> %15, %14
  %17 = fsub <2 x double> %14, %16
  %18 = fadd <2 x double> %15, %17
  %19 = bitcast <2 x double> %18 to <2 x i64>
  br label %172

; <label>:20:                                     ; preds = %2
  %21 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %22 = bitcast <2 x double> %21 to <16 x i8>
  %23 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %22) #7
  %24 = icmp eq i32 %23, 65535
  br i1 %24, label %25, label %77, !prof !2

; <label>:25:                                     ; preds = %20
  %26 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %27 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %26, i32 11) #7
  %28 = fmul <2 x double> %27, <double 0x4170000000000000, double 0x4170000000000000>
  %29 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %30 = fsub <2 x double> %29, %28
  %31 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %30, i32 8) #7
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %1) #7
  %34 = fmul <2 x double> %31, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %35 = fadd <2 x double> %34, %33
  %36 = fsub <2 x double> %33, %35
  %37 = fadd <2 x double> %34, %36
  %38 = fmul <2 x double> %28, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %39 = fadd <2 x double> %38, %35
  %40 = fsub <2 x double> %39, %35
  %41 = fsub <2 x double> %39, %40
  %42 = fsub <2 x double> %35, %41
  %43 = fsub <2 x double> %38, %40
  %44 = fadd <2 x double> %43, %42
  %45 = fadd <2 x double> %37, %44
  %46 = fmul <2 x double> %31, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %47 = fadd <2 x double> %46, %39
  %48 = fsub <2 x double> %47, %39
  %49 = fsub <2 x double> %47, %48
  %50 = fsub <2 x double> %39, %49
  %51 = fsub <2 x double> %46, %48
  %52 = fadd <2 x double> %51, %50
  %53 = fadd <2 x double> %52, %45
  %54 = fmul <2 x double> %28, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %55 = fadd <2 x double> %54, %47
  %56 = fsub <2 x double> %55, %47
  %57 = fsub <2 x double> %55, %56
  %58 = fsub <2 x double> %47, %57
  %59 = fsub <2 x double> %54, %56
  %60 = fadd <2 x double> %59, %58
  %61 = fadd <2 x double> %60, %53
  %62 = fmul <2 x double> %31, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %63 = fadd <2 x double> %62, %55
  %64 = fsub <2 x double> %63, %55
  %65 = fsub <2 x double> %63, %64
  %66 = fsub <2 x double> %55, %65
  %67 = fsub <2 x double> %62, %64
  %68 = fadd <2 x double> %67, %66
  %69 = fadd <2 x double> %68, %61
  %70 = fadd <2 x double> %28, %31
  %71 = fmul <2 x double> %70, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %72 = fadd <2 x double> %71, %63
  %73 = fsub <2 x double> %63, %72
  %74 = fadd <2 x double> %71, %73
  %75 = fadd <2 x double> %74, %69
  %76 = bitcast <2 x double> %75 to <2 x i64>
  br label %172

; <label>:77:                                     ; preds = %20
  %78 = bitcast <2 x double> %1 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %80 = lshr <4 x i32> %79, <i32 20, i32 20, i32 20, i32 20>
  %81 = and <4 x i32> %80, <i32 2047, i32 2047, i32 2047, i32 2047>
  %82 = add nsw <4 x i32> %81, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %83 = icmp ugt <4 x i32> %81, <i32 1723, i32 1723, i32 1723, i32 1723>
  %84 = select <4 x i1> %83, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %86 = and <4 x i32> %85, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = add <4 x i32> %87, %78
  %89 = bitcast <4 x i32> %88 to <2 x double>
  %90 = ashr <4 x i32> %82, <i32 31, i32 31, i32 31, i32 31>
  %91 = xor <4 x i32> %90, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %92 = and <4 x i32> %91, %82
  %93 = shl <4 x i32> %92, <i32 2, i32 2, i32 2, i32 2>
  %94 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %93, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %95 = fmul <2 x double> %94, %89
  %96 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %95
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> %94, <2 x double> %96) #7
  %98 = fmul <2 x double> %95, <double 4.000000e+00, double 4.000000e+00>
  %99 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %98, i32 8) #7
  %100 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %95, i32 8) #7
  %101 = fmul <2 x double> %100, <double 4.000000e+00, double 4.000000e+00>
  %102 = fsub <2 x double> %99, %101
  %103 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %102) #7
  %104 = fmul <2 x double> %99, <double 2.500000e-01, double 2.500000e-01>
  %105 = fsub <2 x double> %95, %104
  %106 = fadd <2 x double> %97, %105
  %107 = fsub <2 x double> %105, %106
  %108 = fadd <2 x double> %97, %107
  %109 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %93, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %110 = fmul <2 x double> %109, %89
  %111 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %110
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> %109, <2 x double> %111) #7
  %113 = fadd <2 x double> %106, %110
  %114 = fsub <2 x double> %113, %106
  %115 = fsub <2 x double> %113, %114
  %116 = fsub <2 x double> %106, %115
  %117 = fsub <2 x double> %110, %114
  %118 = fadd <2 x double> %117, %116
  %119 = fadd <2 x double> %112, %108
  %120 = fadd <2 x double> %119, %118
  %121 = fmul <2 x double> %113, <double 4.000000e+00, double 4.000000e+00>
  %122 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %121, i32 8) #7
  %123 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %113, i32 8) #7
  %124 = fmul <2 x double> %123, <double 4.000000e+00, double 4.000000e+00>
  %125 = fsub <2 x double> %122, %124
  %126 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %125) #7
  %127 = fmul <2 x double> %122, <double 2.500000e-01, double 2.500000e-01>
  %128 = fsub <2 x double> %113, %127
  %129 = add <4 x i32> %126, %103
  %130 = fadd <2 x double> %128, %120
  %131 = fsub <2 x double> %128, %130
  %132 = fadd <2 x double> %120, %131
  %133 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %93, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %134 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %93, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !18
  %135 = fmul <2 x double> %133, %89
  %136 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %135
  %137 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %89, <2 x double> %136) #7
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %89, <2 x double> %137) #7
  %139 = fadd <2 x double> %135, %130
  %140 = fsub <2 x double> %139, %130
  %141 = fsub <2 x double> %139, %140
  %142 = fsub <2 x double> %130, %141
  %143 = fsub <2 x double> %135, %140
  %144 = fadd <2 x double> %143, %142
  %145 = fadd <2 x double> %138, %132
  %146 = fadd <2 x double> %145, %144
  %147 = fadd <2 x double> %139, %146
  %148 = fsub <2 x double> %139, %147
  %149 = fadd <2 x double> %146, %148
  %150 = fmul <2 x double> %147, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %151 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %150
  %152 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %147, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %151) #7
  %153 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %149, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %152) #7
  %154 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %147, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %153) #7
  %155 = bitcast <4 x i32> %88 to <2 x i64>
  %156 = and <2 x i64> %155, <i64 9223372036854775807, i64 9223372036854775807>
  %157 = bitcast <2 x i64> %156 to <2 x double>
  %158 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %157, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %159 = bitcast <2 x double> %158 to <2 x i64>
  %160 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %150, <2 x double> %89, <2 x double> %158) #7
  %161 = bitcast <2 x double> %154 to <2 x i64>
  %162 = xor <2 x i64> %159, <i64 -1, i64 -1>
  %163 = and <2 x i64> %162, %161
  %164 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %165 = fcmp uno <2 x double> %1, zeroinitializer
  %166 = or <2 x i1> %164, %165
  %167 = sext <2 x i1> %166 to <2 x i64>
  %168 = bitcast <2 x double> %160 to <2 x i64>
  %169 = or <2 x i64> %168, %167
  %170 = bitcast <2 x i64> %169 to <2 x double>
  %171 = or <2 x i64> %163, %167
  br label %172

; <label>:172:                                    ; preds = %25, %77, %10
  %173 = phi <2 x double> [ %170, %77 ], [ %72, %25 ], [ %16, %10 ]
  %174 = phi <2 x i64> [ %171, %77 ], [ %76, %25 ], [ %19, %10 ]
  %175 = phi <4 x i32> [ %129, %77 ], [ %32, %25 ], [ %13, %10 ]
  %176 = bitcast <2 x i64> %174 to <2 x double>
  %177 = fmul <2 x double> %173, %176
  %178 = fadd <2 x double> %177, %177
  %179 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %173, <2 x double> %173, <2 x double> %178) #7
  %180 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <2 x double> %179, <2 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #7
  %181 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %180, <2 x double> %179, <2 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #7
  %182 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %181, <2 x double> %179, <2 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #7
  %183 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %182, <2 x double> %179, <2 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135>) #7
  %184 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %183, <2 x double> %179, <2 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542>) #7
  %185 = fmul <2 x double> %173, %179
  %186 = fmul <2 x double> %185, %184
  %187 = fadd <2 x double> %173, %186
  %188 = fsub <2 x double> %173, %187
  %189 = fadd <2 x double> %186, %188
  %190 = fadd <2 x double> %189, %176
  %191 = fadd <2 x double> %187, %190
  %192 = icmp eq <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %193 = sext <2 x i1> %192 to <2 x i64>
  %194 = bitcast <2 x i64> %193 to <2 x double>
  %195 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %191, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %194) #7
  %196 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <2 x double> %179, <2 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #7
  %197 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %196, <2 x double> %179, <2 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #7
  %198 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %197, <2 x double> %179, <2 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #7
  %199 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %198, <2 x double> %179, <2 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #7
  %200 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %199, <2 x double> %179, <2 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545>) #7
  %201 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %200, <2 x double> %179, <2 x double> <double -5.000000e-01, double -5.000000e-01>) #7
  %202 = fmul <2 x double> %179, %201
  %203 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %202
  %204 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %179, <2 x double> %201, <2 x double> %203) #7
  %205 = fadd <2 x double> %202, <double 1.000000e+00, double 1.000000e+00>
  %206 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %205
  %207 = fadd <2 x double> %202, %206
  %208 = fadd <2 x double> %204, %207
  %209 = fadd <2 x double> %205, %208
  %210 = and <4 x i32> %175, <i32 1, i32 1, i32 1, i32 1>
  %211 = icmp eq <4 x i32> %210, zeroinitializer
  %212 = sext <4 x i1> %211 to <4 x i32>
  %213 = shufflevector <4 x i32> %212, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %214 = bitcast <4 x i32> %213 to <2 x double>
  %215 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %209, <2 x double> %195, <2 x double> %214) #7
  %216 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %195, <2 x double> %209, <2 x double> %214) #7
  %217 = and <4 x i32> %175, <i32 2, i32 2, i32 2, i32 2>
  %218 = icmp ne <4 x i32> %217, zeroinitializer
  %219 = sext <4 x i1> %218 to <4 x i32>
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %221 = bitcast <4 x i32> %220 to <2 x i64>
  %222 = and <2 x i64> %221, <i64 -9223372036854775808, i64 -9223372036854775808>
  %223 = bitcast <2 x double> %215 to <2 x i64>
  %224 = xor <2 x i64> %222, %223
  %225 = add <4 x i32> %175, <i32 1, i32 1, i32 1, i32 1>
  %226 = and <4 x i32> %225, <i32 2, i32 2, i32 2, i32 2>
  %227 = icmp ne <4 x i32> %226, zeroinitializer
  %228 = sext <4 x i1> %227 to <4 x i32>
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = and <2 x i64> %230, <i64 -9223372036854775808, i64 -9223372036854775808>
  %232 = bitcast <2 x double> %216 to <2 x i64>
  %233 = xor <2 x i64> %231, %232
  %234 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %234, align 16
  %235 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %236 = bitcast <2 x double>* %235 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %236, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u05avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %11, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> %12, <2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %12, <2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %12, <2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %12, <2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %12, <2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #7
  %20 = fmul <2 x double> %19, %12
  %21 = fadd <2 x double> %20, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %22 = fsub <2 x double> %21, %20
  %23 = fsub <2 x double> %21, %22
  %24 = fsub <2 x double> %20, %23
  %25 = fsub <2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %22
  %26 = fadd <2 x double> %25, %24
  %27 = fadd <2 x double> %26, <double 0x3C50B00000000000, double 0x3C50B00000000000>
  %28 = fmul <2 x double> %12, %21
  %29 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %28
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %21, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %21, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %27, <2 x double> %31) #7
  %33 = fadd <2 x double> %28, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %34 = fsub <2 x double> %33, %28
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %28, %35
  %37 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %32, <double 0x3C81A80000000000, double 0x3C81A80000000000>
  %40 = fadd <2 x double> %39, %38
  %41 = fmul <2 x double> %11, %33
  %42 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %11, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %11, <2 x double> %43) #7
  %45 = fadd <2 x double> %44, %41
  %46 = bitcast <2 x double> %1 to <2 x i64>
  %47 = icmp eq <2 x i64> %46, <i64 -9223372036854775808, i64 -9223372036854775808>
  %48 = sext <2 x i1> %47 to <2 x i64>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %12, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %12, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %12, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %12, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %12, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #7
  %56 = fmul <2 x double> %12, %55
  %57 = fadd <2 x double> %56, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %58 = fsub <2 x double> %57, %56
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> %56, %59
  %61 = fsub <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %62, <double 0xBC33500000000000, double 0xBC33500000000000>
  %64 = fmul <2 x double> %12, %57
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %57, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %57, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %63, <2 x double> %67) #7
  %69 = fadd <2 x double> %64, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %70 = fsub <2 x double> %69, %64
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %64, %71
  %73 = fsub <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %68, <double 0xBC76900000000000, double 0xBC76900000000000>
  %76 = fadd <2 x double> %75, %74
  %77 = fmul <2 x double> %12, %69
  %78 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %77
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %12, <2 x double> %78) #7
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %12, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %14, <2 x double> %80) #7
  %82 = fadd <2 x double> %77, <double 1.000000e+00, double 1.000000e+00>
  %83 = fsub <2 x double> %82, %77
  %84 = fsub <2 x double> %82, %83
  %85 = fsub <2 x double> %77, %84
  %86 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %83
  %87 = fadd <2 x double> %86, %85
  %88 = fadd <2 x double> %81, %87
  %89 = fadd <2 x double> %82, %88
  %90 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %91 = icmp eq <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %94 = bitcast <4 x i32> %93 to <2 x double>
  %95 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %89, <2 x double> %50, <2 x double> %94) #7
  %96 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %50, <2 x double> %89, <2 x double> %94) #7
  %97 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %98 = icmp ne <4 x i32> %97, zeroinitializer
  %99 = sext <4 x i1> %98 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -9223372036854775808, i64 -9223372036854775808>
  %103 = bitcast <2 x double> %95 to <2 x i64>
  %104 = xor <2 x i64> %102, %103
  %105 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %106 = and <4 x i32> %105, <i32 4, i32 4, i32 4, i32 4>
  %107 = icmp ne <4 x i32> %106, zeroinitializer
  %108 = sext <4 x i1> %107 to <4 x i32>
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -9223372036854775808, i64 -9223372036854775808>
  %112 = bitcast <2 x double> %96 to <2 x i64>
  %113 = xor <2 x i64> %111, %112
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = and <2 x i64> %46, <i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %116, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %118 = bitcast <2 x double> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %120 = and <2 x i64> %104, %119
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %114, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %117) #7
  %122 = fcmp oeq <2 x double> %116, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %123 = sext <2 x i1> %122 to <2 x i64>
  %124 = or <2 x i64> %120, %123
  %125 = bitcast <2 x double> %121 to <2 x i64>
  %126 = or <2 x i64> %125, %123
  %127 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %127, align 16
  %128 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %129 = bitcast <2 x double>* %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u35avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <2 x double> %12, <2 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %12, <2 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %12, <2 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %12, <2 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %12, <2 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %12, <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #7
  %19 = fmul <2 x double> %18, %11
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <2 x double> %12, <2 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %12, <2 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %12, <2 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %12, <2 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %12, <2 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> %12, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %12, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %26, <2 x double> %19, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> %26, <2 x double> %31) #7
  %34 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <4 x i32> %34, zeroinitializer
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <2 x i64> %38, <i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = bitcast <2 x double> %32 to <2 x i64>
  %41 = xor <2 x i64> %39, %40
  %42 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %43 = and <4 x i32> %42, <i32 4, i32 4, i32 4, i32 4>
  %44 = icmp ne <4 x i32> %43, zeroinitializer
  %45 = sext <4 x i1> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -9223372036854775808, i64 -9223372036854775808>
  %49 = bitcast <2 x double> %33 to <2 x i64>
  %50 = xor <2 x i64> %48, %49
  %51 = bitcast <2 x double> %1 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 9223372036854775807, i64 9223372036854775807>
  %53 = bitcast <2 x i64> %52 to <2 x double>
  %54 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %53, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %55 = bitcast <2 x double> %54 to <2 x i64>
  %56 = xor <2 x i64> %55, <i64 -1, i64 -1>
  %57 = and <2 x i64> %41, %56
  %58 = and <2 x i64> %50, %56
  %59 = fcmp oeq <2 x double> %53, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %60 = sext <2 x i1> %59 to <2 x i64>
  %61 = or <2 x i64> %57, %60
  %62 = or <2 x i64> %58, %60
  %63 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %63, align 16
  %64 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %65 = bitcast <2 x double>* %64 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %65, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modfd2_avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #7
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %15, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 30) #7
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> zeroinitializer, <2 x double> %16) #7
  %18 = bitcast <2 x double> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372036854775807, i64 9223372036854775807>
  %20 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %21 = or <2 x i64> %19, %20
  %22 = fsub <2 x double> %1, %17
  %23 = bitcast <2 x double> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807>
  %25 = or <2 x i64> %24, %20
  %26 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %26, align 16
  %27 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %28 = bitcast <2 x double>* %27 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %28, align 16
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinpid2_u05avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = and <4 x i32> %6, <i32 -2, i32 -2, i32 undef, i32 undef>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %13 = sitofp <2 x i32> %12 to <2 x double>
  %14 = fsub <2 x double> %2, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %15
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %14, <2 x double> %16) #7
  %18 = bitcast <4 x i32> %10 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %18) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %15, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %18) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %15, <2 x double> %22) #7
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %18) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %15, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %18) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %15, <2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %18) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %15, <2 x double> %28) #7
  %30 = fmul <2 x double> %15, %29
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %18) #7
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %18) #7
  %33 = fadd <2 x double> %30, %31
  %34 = fsub <2 x double> %33, %30
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %30, %35
  %37 = fsub <2 x double> %31, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %32, %38
  %40 = fmul <2 x double> %15, %33
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %33, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %33, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %39, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %18) #7
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %18) #7
  %47 = fadd <2 x double> %40, %45
  %48 = fsub <2 x double> %47, %40
  %49 = fsub <2 x double> %47, %48
  %50 = fsub <2 x double> %40, %49
  %51 = fsub <2 x double> %45, %48
  %52 = fadd <2 x double> %51, %50
  %53 = fadd <2 x double> %44, %46
  %54 = fadd <2 x double> %53, %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %15, <2 x double> %18) #7
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %17, <2 x double> %18) #7
  %57 = fmul <2 x double> %47, %55
  %58 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %55, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %55, <2 x double> %59) #7
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %56, <2 x double> %60) #7
  %62 = fadd <2 x double> %57, <double 1.000000e+00, double 1.000000e+00>
  %63 = fsub <2 x double> %62, %57
  %64 = fsub <2 x double> %62, %63
  %65 = fsub <2 x double> %57, %64
  %66 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %63
  %67 = fadd <2 x double> %66, %65
  %68 = fadd <2 x double> %61, %67
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> %62, <2 x double> %18) #7
  %70 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> %68, <2 x double> %18) #7
  %71 = and <4 x i32> %6, <i32 4, i32 4, i32 4, i32 4>
  %72 = icmp ne <4 x i32> %71, zeroinitializer
  %73 = sext <4 x i1> %72 to <4 x i32>
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -9223372036854775808, i64 -9223372036854775808>
  %77 = bitcast <2 x double> %69 to <2 x i64>
  %78 = xor <2 x i64> %76, %77
  %79 = bitcast <2 x double> %70 to <2 x i64>
  %80 = xor <2 x i64> %76, %79
  %81 = bitcast <2 x i64> %78 to <2 x double>
  %82 = bitcast <2 x i64> %80 to <2 x double>
  %83 = fadd <2 x double> %81, %82
  %84 = bitcast <2 x double> %0 to <2 x i64>
  %85 = icmp eq <2 x i64> %84, <i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %83, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %87) #7
  %89 = and <2 x i64> %84, <i64 9223372036854775807, i64 9223372036854775807>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %90, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %92 = bitcast <2 x double> %91 to <2 x i64>
  %93 = bitcast <2 x double> %88 to <2 x i64>
  %94 = xor <2 x i64> %92, <i64 -1, i64 -1>
  %95 = and <2 x i64> %94, %93
  %96 = fcmp oeq <2 x double> %90, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %97 = bitcast <2 x i64> %95 to <2 x double>
  %98 = select <2 x i1> %96, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %97
  ret <2 x double> %98
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cospid2_u05avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %13 = sitofp <2 x i32> %12 to <2 x double>
  %14 = fsub <2 x double> %2, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %15
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %14, <2 x double> %16) #7
  %18 = bitcast <4 x i32> %10 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %18) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %15, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %18) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %15, <2 x double> %22) #7
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %18) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %15, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %18) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %15, <2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %18) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %15, <2 x double> %28) #7
  %30 = fmul <2 x double> %15, %29
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %18) #7
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %18) #7
  %33 = fadd <2 x double> %30, %31
  %34 = fsub <2 x double> %33, %30
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %30, %35
  %37 = fsub <2 x double> %31, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %32, %38
  %40 = fmul <2 x double> %15, %33
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %33, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %33, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %39, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %18) #7
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %18) #7
  %47 = fadd <2 x double> %40, %45
  %48 = fsub <2 x double> %47, %40
  %49 = fsub <2 x double> %47, %48
  %50 = fsub <2 x double> %40, %49
  %51 = fsub <2 x double> %45, %48
  %52 = fadd <2 x double> %51, %50
  %53 = fadd <2 x double> %44, %46
  %54 = fadd <2 x double> %53, %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %15, <2 x double> %18) #7
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %17, <2 x double> %18) #7
  %57 = fmul <2 x double> %47, %55
  %58 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %55, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %55, <2 x double> %59) #7
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %56, <2 x double> %60) #7
  %62 = fadd <2 x double> %57, <double 1.000000e+00, double 1.000000e+00>
  %63 = fsub <2 x double> %62, %57
  %64 = fsub <2 x double> %62, %63
  %65 = fsub <2 x double> %57, %64
  %66 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %63
  %67 = fadd <2 x double> %66, %65
  %68 = fadd <2 x double> %61, %67
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> %62, <2 x double> %18) #7
  %70 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> %68, <2 x double> %18) #7
  %71 = add <4 x i32> %11, <i32 2, i32 2, i32 2, i32 2>
  %72 = and <4 x i32> %71, <i32 4, i32 4, i32 4, i32 4>
  %73 = icmp ne <4 x i32> %72, zeroinitializer
  %74 = sext <4 x i1> %73 to <4 x i32>
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -9223372036854775808, i64 -9223372036854775808>
  %78 = bitcast <2 x double> %69 to <2 x i64>
  %79 = xor <2 x i64> %77, %78
  %80 = bitcast <2 x double> %70 to <2 x i64>
  %81 = xor <2 x i64> %77, %80
  %82 = bitcast <2 x i64> %79 to <2 x double>
  %83 = bitcast <2 x i64> %81 to <2 x double>
  %84 = fadd <2 x double> %82, %83
  %85 = bitcast <2 x double> %0 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 9223372036854775807, i64 9223372036854775807>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %87, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %88) #7
  %90 = fcmp oeq <2 x double> %87, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %91 = select <2 x i1> %90, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %89
  ret <2 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %15, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <2 x double> %0) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <2 x double> %13) #7
  br label %129

; <label>:15:                                     ; preds = %1
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+06, double 1.000000e+06>, i8 17) #7
  %17 = bitcast <2 x double> %16 to <16 x i8>
  %18 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %17) #7
  %19 = icmp eq i32 %18, 65535
  br i1 %19, label %20, label %36, !prof !2

; <label>:20:                                     ; preds = %15
  %21 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %22 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %21, i32 11) #7
  %23 = fmul <2 x double> %22, <double 0x4170000000000000, double 0x4170000000000000>
  %24 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %25 = fsub <2 x double> %24, %23
  %26 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %25, i32 8) #7
  %27 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %0) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %28) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000>, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000>, <2 x double> %32) #7
  %34 = fadd <2 x double> %23, %26
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <2 x double> %33) #7
  br label %129

; <label>:36:                                     ; preds = %15
  %37 = bitcast <2 x double> %0 to <4 x i32>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %39 = lshr <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = and <4 x i32> %39, <i32 2047, i32 2047, i32 2047, i32 2047>
  %41 = add nsw <4 x i32> %40, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %42 = icmp ugt <4 x i32> %40, <i32 1723, i32 1723, i32 1723, i32 1723>
  %43 = select <4 x i1> %42, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %45 = and <4 x i32> %44, <i32 0, i32 -1, i32 0, i32 -1>
  %46 = shl <4 x i32> %45, <i32 20, i32 20, i32 20, i32 20>
  %47 = add <4 x i32> %46, %37
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = ashr <4 x i32> %41, <i32 31, i32 31, i32 31, i32 31>
  %50 = xor <4 x i32> %49, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %51 = and <4 x i32> %50, %41
  %52 = shl <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %53 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %54 = fmul <2 x double> %53, %48
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %53, <2 x double> %55) #7
  %57 = fmul <2 x double> %54, <double 4.000000e+00, double 4.000000e+00>
  %58 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %57, i32 8) #7
  %59 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %54, i32 8) #7
  %60 = fmul <2 x double> %59, <double 4.000000e+00, double 4.000000e+00>
  %61 = fsub <2 x double> %58, %60
  %62 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %61) #7
  %63 = fmul <2 x double> %58, <double 2.500000e-01, double 2.500000e-01>
  %64 = fsub <2 x double> %54, %63
  %65 = fadd <2 x double> %56, %64
  %66 = fsub <2 x double> %64, %65
  %67 = fadd <2 x double> %56, %66
  %68 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %69 = fmul <2 x double> %68, %48
  %70 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %68, <2 x double> %70) #7
  %72 = fadd <2 x double> %65, %69
  %73 = fsub <2 x double> %72, %65
  %74 = fsub <2 x double> %72, %73
  %75 = fsub <2 x double> %65, %74
  %76 = fsub <2 x double> %69, %73
  %77 = fadd <2 x double> %76, %75
  %78 = fadd <2 x double> %71, %67
  %79 = fadd <2 x double> %78, %77
  %80 = fmul <2 x double> %72, <double 4.000000e+00, double 4.000000e+00>
  %81 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %80, i32 8) #7
  %82 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %72, i32 8) #7
  %83 = fmul <2 x double> %82, <double 4.000000e+00, double 4.000000e+00>
  %84 = fsub <2 x double> %81, %83
  %85 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %84) #7
  %86 = fmul <2 x double> %81, <double 2.500000e-01, double 2.500000e-01>
  %87 = fsub <2 x double> %72, %86
  %88 = add <4 x i32> %85, %62
  %89 = fadd <2 x double> %87, %79
  %90 = fsub <2 x double> %87, %89
  %91 = fadd <2 x double> %79, %90
  %92 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %93 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %52, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !21
  %94 = fmul <2 x double> %92, %48
  %95 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %94
  %96 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %92, <2 x double> %48, <2 x double> %95) #7
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %93, <2 x double> %48, <2 x double> %96) #7
  %98 = fadd <2 x double> %94, %89
  %99 = fsub <2 x double> %98, %89
  %100 = fsub <2 x double> %98, %99
  %101 = fsub <2 x double> %89, %100
  %102 = fsub <2 x double> %94, %99
  %103 = fadd <2 x double> %102, %101
  %104 = fadd <2 x double> %97, %91
  %105 = fadd <2 x double> %104, %103
  %106 = fadd <2 x double> %98, %105
  %107 = fsub <2 x double> %98, %106
  %108 = fadd <2 x double> %105, %107
  %109 = fmul <2 x double> %106, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %111) #7
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %112) #7
  %114 = bitcast <4 x i32> %47 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %116, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %118 = bitcast <2 x double> %117 to <2 x i64>
  %119 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> %48, <2 x double> %117) #7
  %120 = bitcast <2 x double> %113 to <2 x i64>
  %121 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %122 = and <2 x i64> %121, %120
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fadd <2 x double> %119, %123
  %125 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %126 = fcmp uno <2 x double> %0, zeroinitializer
  %127 = or <2 x i1> %125, %126
  %128 = select <2 x i1> %127, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %124
  br label %129

; <label>:129:                                    ; preds = %20, %36, %9
  %130 = phi <4 x i32> [ %12, %9 ], [ %27, %20 ], [ %88, %36 ]
  %131 = phi <2 x double> [ %14, %9 ], [ %35, %20 ], [ %128, %36 ]
  %132 = fmul <2 x double> %131, <double 5.000000e-01, double 5.000000e-01>
  %133 = fmul <2 x double> %132, %132
  %134 = fmul <2 x double> %133, %133
  %135 = fmul <2 x double> %134, %134
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <2 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #7
  %137 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <2 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #7
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %136, <2 x double> %137) #7
  %139 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <2 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #7
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <2 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933>) #7
  %141 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %139, <2 x double> %140) #7
  %142 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %135, <2 x double> %138, <2 x double> %141) #7
  %143 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> %133, <2 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568>) #7
  %144 = fmul <2 x double> %132, %143
  %145 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %144, <2 x double> %132) #7
  %146 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %145, <2 x double> <double -1.000000e+00, double -1.000000e+00>) #7
  %147 = fmul <2 x double> %145, <double -2.000000e+00, double -2.000000e+00>
  %148 = and <4 x i32> %130, <i32 1, i32 1, i32 1, i32 1>
  %149 = icmp ne <4 x i32> %148, zeroinitializer
  %150 = sext <4 x i1> %149 to <4 x i32>
  %151 = shufflevector <4 x i32> %150, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %152 = bitcast <2 x double> %146 to <2 x i64>
  %153 = xor <2 x i64> %152, <i64 -9223372036854775808, i64 -9223372036854775808>
  %154 = bitcast <2 x i64> %153 to <2 x double>
  %155 = bitcast <4 x i32> %151 to <2 x double>
  %156 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %147, <2 x double> %154, <2 x double> %155) #7
  %157 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %146, <2 x double> %147, <2 x double> %155) #7
  %158 = fdiv <2 x double> %156, %157
  %159 = fcmp oeq <2 x double> %0, zeroinitializer
  %160 = sext <2 x i1> %159 to <2 x i64>
  %161 = bitcast <2 x i64> %160 to <2 x double>
  %162 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %158, <2 x double> %0, <2 x double> %161) #7
  ret <2 x double> %162
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.500000e+01, double 1.500000e+01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <16 x i8>
  %7 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %6) #7
  %8 = icmp eq i32 %7, 65535
  br i1 %8, label %9, label %19, !prof !2

; <label>:9:                                      ; preds = %1
  %10 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %11 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %10, i32 8) #7
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <2 x double> %0) #7
  %14 = fmul <2 x double> %11, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %15 = fadd <2 x double> %14, %13
  %16 = fsub <2 x double> %13, %15
  %17 = fadd <2 x double> %14, %16
  %18 = bitcast <2 x double> %17 to <2 x i64>
  br label %184

; <label>:19:                                     ; preds = %1
  %20 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+14, double 1.000000e+14>, i8 17) #7
  %21 = bitcast <2 x double> %20 to <16 x i8>
  %22 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %21) #7
  %23 = icmp eq i32 %22, 65535
  br i1 %23, label %24, label %89, !prof !2

; <label>:24:                                     ; preds = %19
  %25 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %26 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %25, i32 11) #7
  %27 = fmul <2 x double> %26, <double 0x4170000000000000, double 0x4170000000000000>
  %28 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %29 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %28
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>, <2 x double> %0, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBC86B01EC5417056, double 0xBC86B01EC5417056>, <2 x double> %0, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double -5.000000e-01, double -5.000000e-01>, <2 x double> %32) #7
  %34 = fsub <2 x double> %33, %27
  %35 = fadd <2 x double> %28, %34
  %36 = fsub <2 x double> %35, %28
  %37 = fsub <2 x double> %35, %36
  %38 = fsub <2 x double> %28, %37
  %39 = fsub <2 x double> %34, %36
  %40 = fadd <2 x double> %39, %38
  %41 = fadd <2 x double> %31, %40
  %42 = fadd <2 x double> %35, %41
  %43 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %42, i32 11) #7
  %44 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <2 x double> %0) #7
  %46 = fmul <2 x double> %43, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %47 = fadd <2 x double> %46, %45
  %48 = fsub <2 x double> %45, %47
  %49 = fadd <2 x double> %46, %48
  %50 = fmul <2 x double> %27, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %51 = fadd <2 x double> %50, %47
  %52 = fsub <2 x double> %51, %47
  %53 = fsub <2 x double> %51, %52
  %54 = fsub <2 x double> %47, %53
  %55 = fsub <2 x double> %50, %52
  %56 = fadd <2 x double> %55, %54
  %57 = fadd <2 x double> %49, %56
  %58 = fmul <2 x double> %43, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %59 = fadd <2 x double> %58, %51
  %60 = fsub <2 x double> %59, %51
  %61 = fsub <2 x double> %59, %60
  %62 = fsub <2 x double> %51, %61
  %63 = fsub <2 x double> %58, %60
  %64 = fadd <2 x double> %63, %62
  %65 = fadd <2 x double> %64, %57
  %66 = fmul <2 x double> %27, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %67 = fadd <2 x double> %66, %59
  %68 = fsub <2 x double> %67, %59
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %59, %69
  %71 = fsub <2 x double> %66, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %72, %65
  %74 = fmul <2 x double> %43, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %75 = fadd <2 x double> %74, %67
  %76 = fsub <2 x double> %75, %67
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %67, %77
  %79 = fsub <2 x double> %74, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %80, %73
  %82 = fadd <2 x double> %27, %43
  %83 = fmul <2 x double> %82, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %84 = fadd <2 x double> %83, %75
  %85 = fsub <2 x double> %75, %84
  %86 = fadd <2 x double> %83, %85
  %87 = fadd <2 x double> %86, %81
  %88 = bitcast <2 x double> %87 to <2 x i64>
  br label %184

; <label>:89:                                     ; preds = %19
  %90 = bitcast <2 x double> %0 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %92 = lshr <4 x i32> %91, <i32 20, i32 20, i32 20, i32 20>
  %93 = and <4 x i32> %92, <i32 2047, i32 2047, i32 2047, i32 2047>
  %94 = add nsw <4 x i32> %93, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %95 = icmp ugt <4 x i32> %93, <i32 1723, i32 1723, i32 1723, i32 1723>
  %96 = select <4 x i1> %95, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 -64>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %98 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = add <4 x i32> %99, %90
  %101 = bitcast <4 x i32> %100 to <2 x double>
  %102 = ashr <4 x i32> %94, <i32 31, i32 31, i32 31, i32 31>
  %103 = xor <4 x i32> %102, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %104 = and <4 x i32> %103, %94
  %105 = shl <4 x i32> %104, <i32 2, i32 2, i32 2, i32 2>
  %106 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x double]* @rempitabdp to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %107 = fmul <2 x double> %106, %101
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %107
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %106, <2 x double> %108) #7
  %110 = fmul <2 x double> %107, <double 4.000000e+00, double 4.000000e+00>
  %111 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %110, i32 8) #7
  %112 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %107, i32 8) #7
  %113 = fmul <2 x double> %112, <double 4.000000e+00, double 4.000000e+00>
  %114 = fsub <2 x double> %111, %113
  %115 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %114) #7
  %116 = fmul <2 x double> %111, <double 2.500000e-01, double 2.500000e-01>
  %117 = fsub <2 x double> %107, %116
  %118 = fadd <2 x double> %109, %117
  %119 = fsub <2 x double> %117, %118
  %120 = fadd <2 x double> %109, %119
  %121 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %122 = fmul <2 x double> %121, %101
  %123 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %121, <2 x double> %123) #7
  %125 = fadd <2 x double> %118, %122
  %126 = fsub <2 x double> %125, %118
  %127 = fsub <2 x double> %125, %126
  %128 = fsub <2 x double> %118, %127
  %129 = fsub <2 x double> %122, %126
  %130 = fadd <2 x double> %129, %128
  %131 = fadd <2 x double> %124, %120
  %132 = fadd <2 x double> %131, %130
  %133 = fmul <2 x double> %125, <double 4.000000e+00, double 4.000000e+00>
  %134 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %133, i32 8) #7
  %135 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %125, i32 8) #7
  %136 = fmul <2 x double> %135, <double 4.000000e+00, double 4.000000e+00>
  %137 = fsub <2 x double> %134, %136
  %138 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %137) #7
  %139 = fmul <2 x double> %134, <double 2.500000e-01, double 2.500000e-01>
  %140 = fsub <2 x double> %125, %139
  %141 = add <4 x i32> %138, %115
  %142 = fadd <2 x double> %140, %132
  %143 = fsub <2 x double> %140, %142
  %144 = fadd <2 x double> %132, %143
  %145 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %146 = tail call <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast (double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3) to i8*), <4 x i32> %105, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8) #7, !noalias !24
  %147 = fmul <2 x double> %145, %101
  %148 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %147
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %101, <2 x double> %148) #7
  %150 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %146, <2 x double> %101, <2 x double> %149) #7
  %151 = fadd <2 x double> %147, %142
  %152 = fsub <2 x double> %151, %142
  %153 = fsub <2 x double> %151, %152
  %154 = fsub <2 x double> %142, %153
  %155 = fsub <2 x double> %147, %152
  %156 = fadd <2 x double> %155, %154
  %157 = fadd <2 x double> %150, %144
  %158 = fadd <2 x double> %157, %156
  %159 = fadd <2 x double> %151, %158
  %160 = fsub <2 x double> %151, %159
  %161 = fadd <2 x double> %158, %160
  %162 = fmul <2 x double> %159, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %163 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %162
  %164 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %159, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %163) #7
  %165 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %161, <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, <2 x double> %164) #7
  %166 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %159, <2 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <2 x double> %165) #7
  %167 = bitcast <4 x i32> %100 to <2 x i64>
  %168 = and <2 x i64> %167, <i64 9223372036854775807, i64 9223372036854775807>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %169, <2 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #7
  %171 = bitcast <2 x double> %170 to <2 x i64>
  %172 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %162, <2 x double> %101, <2 x double> %170) #7
  %173 = bitcast <2 x double> %166 to <2 x i64>
  %174 = xor <2 x i64> %171, <i64 -1, i64 -1>
  %175 = and <2 x i64> %174, %173
  %176 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = fcmp uno <2 x double> %0, zeroinitializer
  %178 = or <2 x i1> %176, %177
  %179 = sext <2 x i1> %178 to <2 x i64>
  %180 = bitcast <2 x double> %172 to <2 x i64>
  %181 = or <2 x i64> %180, %179
  %182 = bitcast <2 x i64> %181 to <2 x double>
  %183 = or <2 x i64> %175, %179
  br label %184

; <label>:184:                                    ; preds = %24, %89, %9
  %185 = phi <2 x double> [ %182, %89 ], [ %84, %24 ], [ %15, %9 ]
  %186 = phi <2 x i64> [ %183, %89 ], [ %88, %24 ], [ %18, %9 ]
  %187 = phi <4 x i32> [ %141, %89 ], [ %44, %24 ], [ %12, %9 ]
  %188 = bitcast <2 x i64> %186 to <2 x double>
  %189 = fmul <2 x double> %185, <double 5.000000e-01, double 5.000000e-01>
  %190 = fmul <2 x double> %188, <double 5.000000e-01, double 5.000000e-01>
  %191 = fmul <2 x double> %189, %189
  %192 = fadd <2 x double> %189, %189
  %193 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %191
  %194 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %189, <2 x double> %189, <2 x double> %193) #7
  %195 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %192, <2 x double> %190, <2 x double> %194) #7
  %196 = fmul <2 x double> %191, %191
  %197 = fmul <2 x double> %196, %196
  %198 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <2 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #7
  %199 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <2 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #7
  %200 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %196, <2 x double> %198, <2 x double> %199) #7
  %201 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <2 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #7
  %202 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <2 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933>) #7
  %203 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %196, <2 x double> %201, <2 x double> %202) #7
  %204 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %197, <2 x double> %200, <2 x double> %203) #7
  %205 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %204, <2 x double> %191, <2 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568>) #7
  %206 = fmul <2 x double> %189, %191
  %207 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %206
  %208 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> %189, <2 x double> %207) #7
  %209 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %195, <2 x double> %189, <2 x double> %208) #7
  %210 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %191, <2 x double> %190, <2 x double> %209) #7
  %211 = fmul <2 x double> %206, %205
  %212 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %211
  %213 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %206, <2 x double> %205, <2 x double> %212) #7
  %214 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %210, <2 x double> %205, <2 x double> %213) #7
  %215 = fadd <2 x double> %189, %211
  %216 = fsub <2 x double> %189, %215
  %217 = fadd <2 x double> %211, %216
  %218 = fadd <2 x double> %190, %217
  %219 = fadd <2 x double> %218, %214
  %220 = fmul <2 x double> %215, %215
  %221 = fadd <2 x double> %215, %215
  %222 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %220
  %223 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %215, <2 x double> %215, <2 x double> %222) #7
  %224 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %221, <2 x double> %219, <2 x double> %223) #7
  %225 = fadd <2 x double> %220, <double -1.000000e+00, double -1.000000e+00>
  %226 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %225
  %227 = fadd <2 x double> %220, %226
  %228 = fadd <2 x double> %227, %224
  %229 = fmul <2 x double> %215, <double -2.000000e+00, double -2.000000e+00>
  %230 = fmul <2 x double> %219, <double -2.000000e+00, double -2.000000e+00>
  %231 = and <4 x i32> %187, <i32 1, i32 1, i32 1, i32 1>
  %232 = icmp ne <4 x i32> %231, zeroinitializer
  %233 = sext <4 x i1> %232 to <4 x i32>
  %234 = shufflevector <4 x i32> %233, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %235 = bitcast <2 x double> %225 to <2 x i64>
  %236 = xor <2 x i64> %235, <i64 -9223372036854775808, i64 -9223372036854775808>
  %237 = bitcast <2 x double> %228 to <2 x i64>
  %238 = xor <2 x i64> %237, <i64 -9223372036854775808, i64 -9223372036854775808>
  %239 = bitcast <2 x i64> %236 to <2 x double>
  %240 = bitcast <2 x i64> %238 to <2 x double>
  %241 = bitcast <4 x i32> %234 to <2 x double>
  %242 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %229, <2 x double> %239, <2 x double> %241) #7
  %243 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %230, <2 x double> %240, <2 x double> %241) #7
  %244 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %225, <2 x double> %229, <2 x double> %241) #7
  %245 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %228, <2 x double> %230, <2 x double> %241) #7
  %246 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %244
  %247 = fmul <2 x double> %242, %246
  %248 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %247
  %249 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %246, <2 x double> %242, <2 x double> %248) #7
  %250 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %244
  %251 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %250, <2 x double> %246, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %252 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %245
  %253 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %252, <2 x double> %246, <2 x double> %251) #7
  %254 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> %246, <2 x double> %249) #7
  %255 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %247, <2 x double> %253, <2 x double> %254) #7
  %256 = fadd <2 x double> %247, %255
  %257 = fcmp oeq <2 x double> %0, zeroinitializer
  %258 = sext <2 x i1> %257 to <2 x i64>
  %259 = bitcast <2 x i64> %258 to <2 x double>
  %260 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %256, <2 x double> %0, <2 x double> %259) #7
  ret <2 x double> %260
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u35avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = ashr <2 x i64> %6, <i64 63, i64 63>
  %8 = bitcast <2 x i64> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -4294967298, i64 -4294967298>
  %12 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = add <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %13, <2 x double> %5, i8 17) #7
  %17 = bitcast <2 x double> %16 to <4 x i32>
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %19 = bitcast <2 x i64> %11 to <16 x i8>
  %20 = bitcast <4 x i32> %15 to <16 x i8>
  %21 = bitcast <4 x i32> %18 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> %20, <16 x i8> %21) #7
  %23 = or <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %24, <2 x double> %16) #7
  %26 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %13, <2 x double> %5) #7
  %27 = fdiv <2 x double> %25, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %28, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, %30
  %32 = fmul <2 x double> %31, %31
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <2 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <2 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <2 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %35, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <2 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <2 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %38, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <2 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <2 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %42, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <2 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <2 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %45, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %47) #7
  %49 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %41, <2 x double> %48) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %34, <2 x double> %49) #7
  %51 = fmul <2 x double> %28, %50
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %51, <2 x double> %27) #7
  %53 = bitcast <16 x i8> %22 to <4 x i32>
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %55 = sitofp <2 x i32> %54 to <2 x double>
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <2 x double> %52) #7
  %57 = bitcast <2 x double> %56 to <2 x i64>
  %58 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %59 = xor <2 x i64> %58, %57
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %62 = fcmp oeq <2 x double> %1, zeroinitializer
  %63 = or <2 x i1> %61, %62
  %64 = sext <2 x i1> %63 to <2 x i64>
  %65 = or <2 x i64> %58, <i64 4609753056924675352, i64 4609753056924675352>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %66
  %68 = select <2 x i1> %61, <2 x double> %67, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %69 = bitcast <2 x i64> %64 to <2 x double>
  %70 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> %68, <2 x double> %69) #7
  %71 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %72 = sext <2 x i1> %71 to <2 x i64>
  %73 = or <2 x i64> %58, <i64 4605249457297304856, i64 4605249457297304856>
  %74 = bitcast <2 x i64> %73 to <2 x double>
  %75 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %74
  %76 = select <2 x i1> %61, <2 x double> %75, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %77 = bitcast <2 x i64> %72 to <2 x double>
  %78 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %70, <2 x double> %76, <2 x double> %77) #7
  %79 = fcmp oeq <2 x double> %0, zeroinitializer
  %80 = sext <2 x i1> %79 to <2 x i64>
  %81 = and <2 x i64> %7, <i64 4614256656552045848, i64 4614256656552045848>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = bitcast <2 x i64> %80 to <2 x double>
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %78, <2 x double> %82, <2 x double> %83) #7
  %85 = fcmp uno <2 x double> %0, %1
  %86 = bitcast <2 x double> %84 to <2 x i64>
  %87 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %88 = xor <2 x i64> %87, %86
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = select <2 x i1> %85, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %89
  ret <2 x double> %90
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u10avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 0x4000000000001, double 0x4000000000001>, i8 17) #7
  %7 = fmul <2 x double> %1, <double 0x4340000000000000, double 0x4340000000000000>
  %8 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %7, <2 x double> %6) #7
  %9 = fmul <2 x double> %0, <double 0x4340000000000000, double 0x4340000000000000>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %9, <2 x double> %6) #7
  %11 = bitcast <2 x double> %10 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = bitcast <2 x double> %8 to <2 x i64>
  %15 = ashr <2 x i64> %14, <i64 63, i64 63>
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = shufflevector <4 x i32> %16, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -4294967298, i64 -4294967298>
  %20 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %8, <2 x double> zeroinitializer, i8 17) #7
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 -9223372036854775808, i64 -9223372036854775808>
  %23 = xor <2 x i64> %22, %14
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = bitcast <2 x i64> %22 to <2 x double>
  %26 = bitcast <2 x i64> %19 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %24, <2 x double> %13, i8 17) #7
  %29 = bitcast <2 x double> %28 to <4 x i32>
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %31 = bitcast <2 x i64> %19 to <16 x i8>
  %32 = bitcast <4 x i32> %27 to <16 x i8>
  %33 = bitcast <4 x i32> %30 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #7
  %35 = xor <2 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808>
  %36 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %37 = bitcast <2 x i64> %35 to <2 x double>
  %38 = bitcast <2 x i64> %36 to <2 x double>
  %39 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %37, <2 x double> %28) #7
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %38, <2 x double> %28) #7
  %41 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %24, <2 x double> %13, <2 x double> %28) #7
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> zeroinitializer, <2 x double> %28) #7
  %43 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %41
  %44 = fmul <2 x double> %39, %43
  %45 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %44
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %39, <2 x double> %45) #7
  %47 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %41
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %43, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %49 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %42
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %43, <2 x double> %48) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %43, <2 x double> %46) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %50, <2 x double> %51) #7
  %53 = fmul <2 x double> %44, %44
  %54 = fadd <2 x double> %44, %44
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %44, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %52, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, %57
  %59 = fsub <2 x double> %53, %58
  %60 = fadd <2 x double> %57, %59
  %61 = fmul <2 x double> %58, %58
  %62 = fmul <2 x double> %61, %61
  %63 = fmul <2 x double> %62, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <2 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <2 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %64, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <2 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <2 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %67, <2 x double> %68) #7
  %70 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %62, <2 x double> %66, <2 x double> %69) #7
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <2 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #7
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <2 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #7
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %71, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <2 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #7
  %75 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <2 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #7
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %74, <2 x double> %75) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %62, <2 x double> %73, <2 x double> %76) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %70, <2 x double> %77) #7
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %58, <2 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #7
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %79, <2 x double> %58, <2 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %80, <2 x double> %58, <2 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %81, <2 x double> %58, <2 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A>) #7
  %83 = fmul <2 x double> %44, %58
  %84 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %83
  %85 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %58, <2 x double> %84) #7
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %58, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %60, <2 x double> %86) #7
  %88 = fmul <2 x double> %83, %82
  %89 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %88
  %90 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %82, <2 x double> %89) #7
  %91 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %87, <2 x double> %82, <2 x double> %90) #7
  %92 = fadd <2 x double> %44, %88
  %93 = fsub <2 x double> %44, %92
  %94 = fadd <2 x double> %88, %93
  %95 = fadd <2 x double> %52, %94
  %96 = fadd <2 x double> %95, %91
  %97 = bitcast <16 x i8> %34 to <4 x i32>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %99 = sitofp <2 x i32> %98 to <2 x double>
  %100 = fmul <2 x double> %99, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %101 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %100
  %102 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <2 x double> %99, <2 x double> %101) #7
  %103 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <2 x double> %99, <2 x double> %102) #7
  %104 = fadd <2 x double> %100, %92
  %105 = fsub <2 x double> %100, %104
  %106 = fadd <2 x double> %92, %105
  %107 = fadd <2 x double> %106, %103
  %108 = fadd <2 x double> %96, %107
  %109 = fadd <2 x double> %104, %108
  %110 = bitcast <2 x double> %109 to <2 x i64>
  %111 = and <2 x i64> %14, <i64 -9223372036854775808, i64 -9223372036854775808>
  %112 = xor <2 x i64> %111, %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = and <2 x i64> %14, <i64 9223372036854775807, i64 9223372036854775807>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fcmp oeq <2 x double> %115, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %117 = fcmp oeq <2 x double> %8, zeroinitializer
  %118 = or <2 x i1> %116, %117
  %119 = sext <2 x i1> %118 to <2 x i64>
  %120 = or <2 x i64> %111, <i64 4609753056924675352, i64 4609753056924675352>
  %121 = bitcast <2 x i64> %120 to <2 x double>
  %122 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %121
  %123 = select <2 x i1> %116, <2 x double> %122, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %124 = bitcast <2 x i64> %119 to <2 x double>
  %125 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %113, <2 x double> %123, <2 x double> %124) #7
  %126 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %127 = sext <2 x i1> %126 to <2 x i64>
  %128 = or <2 x i64> %111, <i64 4605249457297304856, i64 4605249457297304856>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %129
  %131 = select <2 x i1> %116, <2 x double> %130, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %132 = bitcast <2 x i64> %127 to <2 x double>
  %133 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %125, <2 x double> %131, <2 x double> %132) #7
  %134 = fcmp oeq <2 x double> %10, zeroinitializer
  %135 = sext <2 x i1> %134 to <2 x i64>
  %136 = and <2 x i64> %15, <i64 4614256656552045848, i64 4614256656552045848>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = bitcast <2 x i64> %135 to <2 x double>
  %139 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %133, <2 x double> %137, <2 x double> %138) #7
  %140 = fcmp uno <2 x double> %10, %8
  %141 = bitcast <2 x double> %139 to <2 x i64>
  %142 = and <2 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808>
  %143 = xor <2 x i64> %142, %141
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = select <2 x i1> %140, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %144
  ret <2 x double> %145
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = fmul <2 x double> %0, %0
  %7 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <2 x double> %7, <double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %6, <2 x double> %5) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %9) #7
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %4, <2 x double> %5) #7
  %12 = fmul <2 x double> %9, %9
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <2 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <2 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <2 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <2 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %18, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <2 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <2 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %21, <2 x double> %22) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %20, <2 x double> %23) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %17, <2 x double> %24) #7
  %26 = fmul <2 x double> %9, %11
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %26, <2 x double> %11) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double -2.000000e+00, double -2.000000e+00>, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>) #7
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %28, <2 x double> %27, <2 x double> %5) #7
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = xor <2 x i64> %31, %30
  %33 = bitcast <2 x i64> %32 to <2 x double>
  ret <2 x double> %33
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = fmul <2 x double> %0, %0
  %7 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <2 x double> %7, <double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %6, <2 x double> %5) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %9) #7
  %11 = fmul <2 x double> %10, %10
  %12 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %10, <2 x double> %12) #7
  %14 = fadd <2 x double> %9, %11
  %15 = fsub <2 x double> %14, %9
  %16 = fsub <2 x double> %14, %15
  %17 = fsub <2 x double> %9, %16
  %18 = fsub <2 x double> %11, %15
  %19 = fadd <2 x double> %18, %17
  %20 = fadd <2 x double> %13, %19
  %21 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %10
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %10
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %24 = fmul <2 x double> %21, %23
  %25 = fmul <2 x double> %21, %14
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %21, <2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %21, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, <double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <2 x double> %29, <double 5.000000e-01, double 5.000000e-01>
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %30, <2 x double> %4, <2 x double> %5) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %31, <2 x double> zeroinitializer, <2 x double> %5) #7
  %34 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> zeroinitializer, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> zeroinitializer, <2 x double> %36) #7
  %39 = fmul <2 x double> %9, %9
  %40 = fmul <2 x double> %39, %39
  %41 = fmul <2 x double> %40, %40
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <2 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <2 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> %42, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <2 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <2 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> %45, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <2 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %49 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <2 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> %48, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %47, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %44, <2 x double> %51) #7
  %53 = fmul <2 x double> %9, %37
  %54 = fmul <2 x double> %53, %52
  %55 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %37
  %56 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %55
  %57 = fsub <2 x double> %56, %37
  %58 = fadd <2 x double> %57, <double 0x3C81A62633145C07, double 0x3C81A62633145C07>
  %59 = fsub <2 x double> %58, %38
  %60 = fsub <2 x double> %55, %54
  %61 = fsub <2 x double> %55, %60
  %62 = fsub <2 x double> %61, %54
  %63 = fadd <2 x double> %59, %62
  %64 = fadd <2 x double> %37, %54
  %65 = fadd <2 x double> %60, %63
  %66 = fmul <2 x double> %65, <double 2.000000e+00, double 2.000000e+00>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %66, <2 x double> %64, <2 x double> %5) #7
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = xor <2 x i64> %69, %68
  %71 = bitcast <2 x i64> %70 to <2 x double>
  ret <2 x double> %71
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %5) #7
  %11 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %10) #7
  %12 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %4, <2 x double> %5) #7
  %13 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %14 = sext <2 x i1> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> zeroinitializer, <2 x double> %15) #7
  %17 = fmul <2 x double> %10, %10
  %18 = fmul <2 x double> %17, %17
  %19 = fmul <2 x double> %18, %18
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <2 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <2 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %20, <2 x double> %21) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <2 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <2 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %23, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <2 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <2 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %26, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %25, <2 x double> %28) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %22, <2 x double> %29) #7
  %31 = fmul <2 x double> %10, %16
  %32 = fmul <2 x double> %31, %30
  %33 = bitcast <2 x double> %16 to <2 x i64>
  %34 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = xor <2 x i64> %34, %33
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = bitcast <2 x double> %32 to <2 x i64>
  %38 = xor <2 x i64> %34, %37
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fadd <2 x double> %36, %39
  %41 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %40
  %42 = fadd <2 x double> %16, %32
  %43 = fmul <2 x double> %42, <double 2.000000e+00, double 2.000000e+00>
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> %41, <2 x double> %5) #7
  %45 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %46 = bitcast <2 x double> %45 to <2 x i64>
  %47 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %48 = and <2 x i64> %46, %47
  %49 = bitcast <2 x double> %44 to <2 x i64>
  %50 = xor <2 x i64> %49, <i64 -9223372036854775808, i64 -9223372036854775808>
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fadd <2 x double> %51, <double 0x400921FB54442D18, double 0x400921FB54442D18>
  %53 = bitcast <2 x i64> %48 to <2 x double>
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %52, <2 x double> %53) #7
  ret <2 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %5) #7
  %11 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %10) #7
  %12 = fmul <2 x double> %11, %11
  %13 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %11, <2 x double> %13) #7
  %15 = fadd <2 x double> %10, %12
  %16 = fsub <2 x double> %15, %10
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %10, %17
  %19 = fsub <2 x double> %12, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fadd <2 x double> %14, %20
  %22 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %11
  %23 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %11
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %22, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fmul <2 x double> %22, %24
  %26 = fmul <2 x double> %22, %15
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %22, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %22, <2 x double> %28) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %25, <2 x double> %29) #7
  %31 = fmul <2 x double> %26, <double 5.000000e-01, double 5.000000e-01>
  %32 = fmul <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %31, <2 x double> %4, <2 x double> %5) #7
  %34 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> zeroinitializer, <2 x double> %5) #7
  %35 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %36 = sext <2 x i1> %35 to <2 x i64>
  %37 = bitcast <2 x i64> %36 to <2 x double>
  %38 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> zeroinitializer, <2 x double> %37) #7
  %39 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %34, <2 x double> zeroinitializer, <2 x double> %37) #7
  %40 = fmul <2 x double> %10, %10
  %41 = fmul <2 x double> %40, %40
  %42 = fmul <2 x double> %41, %41
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <2 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <2 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %43, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <2 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <2 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %46, <2 x double> %47) #7
  %49 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <2 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <2 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %49, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %48, <2 x double> %51) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %45, <2 x double> %52) #7
  %54 = fmul <2 x double> %10, %38
  %55 = fmul <2 x double> %54, %53
  %56 = bitcast <2 x double> %38 to <2 x i64>
  %57 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <2 x i64> %57, %56
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = bitcast <2 x double> %55 to <2 x i64>
  %61 = xor <2 x i64> %57, %60
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fadd <2 x double> %59, %62
  %64 = fsub <2 x double> %59, %63
  %65 = fadd <2 x double> %64, %62
  %66 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %63
  %67 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %66
  %68 = fsub <2 x double> %67, %63
  %69 = fadd <2 x double> %68, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %70 = fsub <2 x double> %69, %65
  %71 = fadd <2 x double> %38, %55
  %72 = fsub <2 x double> %38, %71
  %73 = fadd <2 x double> %55, %72
  %74 = fadd <2 x double> %39, %73
  %75 = fmul <2 x double> %71, <double 2.000000e+00, double 2.000000e+00>
  %76 = fmul <2 x double> %74, <double 2.000000e+00, double 2.000000e+00>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> %66, <2 x double> %5) #7
  %78 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %76, <2 x double> %70, <2 x double> %5) #7
  %79 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %80 = bitcast <2 x double> %79 to <2 x i64>
  %81 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %82 = and <2 x i64> %80, %81
  %83 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %77
  %84 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %83
  %85 = fsub <2 x double> %84, %77
  %86 = fadd <2 x double> %85, <double 0x3CA1A62633145C07, double 0x3CA1A62633145C07>
  %87 = fsub <2 x double> %86, %78
  %88 = bitcast <2 x i64> %82 to <2 x double>
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> %83, <2 x double> %88) #7
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %78, <2 x double> %87, <2 x double> %88) #7
  %91 = fadd <2 x double> %89, %90
  ret <2 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer, i8 17) #7
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %8 = or <2 x i64> %7, <i64 4607182418800017408, i64 4607182418800017408>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = bitcast <2 x i64> %7 to <2 x double>
  %11 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %9, <2 x double> %4, i8 17) #7
  %12 = bitcast <2 x double> %11 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> %14) #7
  %16 = xor <2 x i64> %7, <i64 -4616189618054758400, i64 -4616189618054758400>
  %17 = xor <2 x i64> %7, <i64 -9223372036854775808, i64 -9223372036854775808>
  %18 = bitcast <2 x i64> %16 to <2 x double>
  %19 = bitcast <2 x i64> %17 to <2 x double>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %18, <2 x double> %11) #7
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %19, <2 x double> %11) #7
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %4, <2 x double> %11) #7
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> zeroinitializer, <2 x double> %11) #7
  %24 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %22
  %25 = fmul <2 x double> %20, %24
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> %20, <2 x double> %26) #7
  %28 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %22
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %24, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %30 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %23
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %24, <2 x double> %29) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %24, <2 x double> %27) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %31, <2 x double> %32) #7
  %34 = fmul <2 x double> %25, %25
  %35 = fadd <2 x double> %25, %25
  %36 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %34
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %33, <2 x double> %37) #7
  %39 = fadd <2 x double> %34, %38
  %40 = fsub <2 x double> %34, %39
  %41 = fadd <2 x double> %38, %40
  %42 = fmul <2 x double> %39, %39
  %43 = fmul <2 x double> %42, %42
  %44 = fmul <2 x double> %43, %43
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <2 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <2 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %45, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <2 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #7
  %49 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <2 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %48, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %47, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <2 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <2 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <2 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <2 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %55, <2 x double> %56) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %54, <2 x double> %57) #7
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %51, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %39, <2 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #7
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %39, <2 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %39, <2 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %62, <2 x double> %39, <2 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A>) #7
  %64 = fmul <2 x double> %25, %39
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %39, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %39, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %41, <2 x double> %67) #7
  %69 = fmul <2 x double> %64, %63
  %70 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %63, <2 x double> %70) #7
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %68, <2 x double> %63, <2 x double> %71) #7
  %73 = fadd <2 x double> %25, %69
  %74 = fsub <2 x double> %25, %73
  %75 = fadd <2 x double> %69, %74
  %76 = fadd <2 x double> %33, %75
  %77 = fadd <2 x double> %76, %72
  %78 = bitcast <16 x i8> %15 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %80 = sitofp <2 x i32> %79 to <2 x double>
  %81 = fmul <2 x double> %80, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %82 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %81
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <2 x double> %80, <2 x double> %82) #7
  %84 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <2 x double> %80, <2 x double> %83) #7
  %85 = fadd <2 x double> %81, %73
  %86 = fsub <2 x double> %81, %85
  %87 = fadd <2 x double> %73, %86
  %88 = fadd <2 x double> %87, %84
  %89 = fadd <2 x double> %77, %88
  %90 = fadd <2 x double> %85, %89
  %91 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <2 x i1> %91 to <2 x i64>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %90, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <2 x double> %93) #7
  %95 = bitcast <2 x double> %94 to <2 x i64>
  %96 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %97 = xor <2 x i64> %96, %95
  %98 = bitcast <2 x i64> %97 to <2 x double>
  ret <2 x double> %98
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = ashr <2 x i64> %2, <i64 63, i64 63>
  %4 = bitcast <2 x i64> %3 to <4 x i32>
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %6 = bitcast <4 x i32> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 8589934594, i64 8589934594>
  %8 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = add <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %9, i8 17) #7
  %13 = bitcast <2 x double> %12 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %15 = bitcast <2 x i64> %7 to <16 x i8>
  %16 = bitcast <4 x i32> %11 to <16 x i8>
  %17 = bitcast <4 x i32> %14 to <16 x i8>
  %18 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %15, <16 x i8> %16, <16 x i8> %17) #7
  %19 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %9
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %19, <2 x double> %12) #7
  %21 = fmul <2 x double> %20, %20
  %22 = fmul <2 x double> %21, %21
  %23 = fmul <2 x double> %22, %22
  %24 = fmul <2 x double> %23, %23
  %25 = fmul <2 x double> %24, %24
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <2 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <2 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <2 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %28, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <2 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <2 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %31, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %30, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <2 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <2 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %35, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <2 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <2 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %38, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %37, <2 x double> %40) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> %34, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %27, <2 x double> %42) #7
  %44 = fmul <2 x double> %21, %43
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %44, <2 x double> %20) #7
  %46 = bitcast <16 x i8> %18 to <4 x i32>
  %47 = and <4 x i32> %46, <i32 1, i32 1, i32 1, i32 1>
  %48 = icmp ne <4 x i32> %47, zeroinitializer
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %45
  %52 = bitcast <4 x i32> %50 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> %51, <2 x double> %52) #7
  %54 = and <4 x i32> %46, <i32 2, i32 2, i32 2, i32 2>
  %55 = icmp ne <4 x i32> %54, zeroinitializer
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -9223372036854775808, i64 -9223372036854775808>
  %60 = bitcast <2 x double> %53 to <2 x i64>
  %61 = xor <2 x i64> %59, %60
  %62 = bitcast <2 x i64> %61 to <2 x double>
  ret <2 x double> %62
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %27 = fdiv <2 x double> %25, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %28, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %27, %28
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <2 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <2 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <2 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %34, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %33, <2 x double> %36) #7
  %38 = bitcast <16 x i8> %24 to <4 x i32>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %40 = sitofp <2 x i32> %39 to <2 x double>
  %41 = fmul <2 x double> %40, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %37, <2 x double> %42) #7
  %44 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %45 = sext <2 x i1> %44 to <2 x i64>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %49 = fcmp uno <2 x double> %4, zeroinitializer
  %50 = select <2 x i1> %49, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %48
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %50) #7
  %52 = fcmp oeq <2 x double> %4, zeroinitializer
  %53 = sext <2 x i1> %52 to <2 x i64>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %54) #7
  ret <2 x double> %55
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #7
  %5 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %0) #7
  %6 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %5) #7
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %7, %7
  %9 = fmul <2 x double> %8, %8
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <2 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <2 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <2 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %11, <2 x double> %12) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <2 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <2 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %14, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %8, <2 x double> %13, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> %10, <2 x double> %17) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %6, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %6, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %6, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %22 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %23 = add <4 x i32> %22, <i32 1023, i32 1023, i32 undef, i32 1023>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %26 to <2 x double>
  %28 = fmul <2 x double> %21, %27
  %29 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 1023>
  %30 = sub <4 x i32> %29, %22
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %28, %34
  %36 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %39 = bitcast <2 x double> %38 to <2 x i64>
  %40 = bitcast <2 x double> %37 to <2 x i64>
  %41 = xor <2 x i64> %39, <i64 -1, i64 -1>
  %42 = and <2 x i64> %41, %40
  %43 = bitcast <2 x i64> %42 to <2 x double>
  ret <2 x double> %43
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <2 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <2 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <2 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %58, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %58, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %58, <2 x double> %61) #7
  %63 = fmul <2 x double> %38, <double 2.000000e+00, double 2.000000e+00>
  %64 = fmul <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %65 = fadd <2 x double> %59, %63
  %66 = fsub <2 x double> %59, %65
  %67 = fadd <2 x double> %63, %66
  %68 = fadd <2 x double> %62, %67
  %69 = fadd <2 x double> %64, %68
  %70 = fmul <2 x double> %38, %47
  %71 = fmul <2 x double> %55, %70
  %72 = fadd <2 x double> %65, %71
  %73 = fsub <2 x double> %65, %72
  %74 = fadd <2 x double> %71, %73
  %75 = fadd <2 x double> %74, %69
  %76 = fadd <2 x double> %72, %75
  %77 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %78 = sext <2 x i1> %77 to <2 x i64>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %76, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %82 = fcmp uno <2 x double> %4, zeroinitializer
  %83 = select <2 x i1> %82, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %81
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %80, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %83) #7
  %85 = fcmp oeq <2 x double> %4, zeroinitializer
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %87) #7
  ret <2 x double> %88
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_powd2_u10avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %1, i32 11) #7
  %4 = fcmp oeq <2 x double> %3, %1
  %5 = sext <2 x i1> %4 to <2 x i64>
  %6 = fmul <2 x double> %1, <double 5.000000e-01, double 5.000000e-01>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 11) #7
  %8 = fcmp une <2 x double> %7, %6
  %9 = and <2 x i1> %8, %4
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = bitcast <2 x double> %0 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %13, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %15 = fmul <2 x double> %13, <double 0x43F0000000000000, double 0x43F0000000000000>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %15, <2 x double> %14) #7
  %17 = fmul <2 x double> %16, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %18 = bitcast <2 x double> %17 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i32> %20, <i32 2047, i32 2047, i32 2047, i32 2047>
  %22 = add nsw <4 x i32> %21, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %23 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %21
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <2 x double> %16 to <4 x i32>
  %28 = add <4 x i32> %26, %27
  %29 = bitcast <4 x i32> %28 to <2 x double>
  %30 = bitcast <2 x double> %14 to <4 x i32>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %32 = add nsw <4 x i32> %21, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %33 = bitcast <4 x i32> %22 to <16 x i8>
  %34 = bitcast <4 x i32> %32 to <16 x i8>
  %35 = bitcast <4 x i32> %31 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #7
  %37 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %38 = fadd <2 x double> %37, <double 1.000000e+00, double 1.000000e+00>
  %39 = fsub <2 x double> %37, %38
  %40 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %39
  %41 = fsub <2 x double> %29, %38
  %42 = fadd <2 x double> %41, %40
  %43 = fadd <2 x double> %29, <double 1.000000e+00, double 1.000000e+00>
  %44 = fadd <2 x double> %43, <double -1.000000e+00, double -1.000000e+00>
  %45 = fsub <2 x double> %43, %44
  %46 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %47 = fsub <2 x double> %29, %44
  %48 = fadd <2 x double> %47, %46
  %49 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %43
  %50 = fmul <2 x double> %37, %49
  %51 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %37, <2 x double> %51) #7
  %53 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %43
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %49, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %48
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %49, <2 x double> %54) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %49, <2 x double> %52) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %50, <2 x double> %56, <2 x double> %57) #7
  %59 = fmul <2 x double> %50, %50
  %60 = fadd <2 x double> %50, %50
  %61 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %50, <2 x double> %50, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %58, <2 x double> %62) #7
  %64 = fmul <2 x double> %59, %59
  %65 = fmul <2 x double> %64, %64
  %66 = fmul <2 x double> %65, %65
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> <double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11>, <2 x double> <double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A>) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> <double 0x3FC110F384A1865C, double 0x3FC110F384A1865C>, <2 x double> <double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1>) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %67, <2 x double> %68) #7
  %70 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> <double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1>, <2 x double> <double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F>) #7
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> <double 0x3FD2492492492200, double 0x3FD2492492492200>, <2 x double> <double 0x3FD999999999999B, double 0x3FD999999999999B>) #7
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %70, <2 x double> %71) #7
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %69, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %66, <2 x double> <double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3>, <2 x double> %73) #7
  %75 = bitcast <16 x i8> %36 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %77 = sitofp <2 x i32> %76 to <2 x double>
  %78 = fmul <2 x double> %77, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %79 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %78
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %77, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %77, <2 x double> %80) #7
  %82 = fmul <2 x double> %50, <double 2.000000e+00, double 2.000000e+00>
  %83 = fmul <2 x double> %58, <double 2.000000e+00, double 2.000000e+00>
  %84 = fadd <2 x double> %78, %82
  %85 = fsub <2 x double> %78, %84
  %86 = fadd <2 x double> %82, %85
  %87 = fadd <2 x double> %86, %81
  %88 = fadd <2 x double> %83, %87
  %89 = fmul <2 x double> %50, %59
  %90 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %89
  %91 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %50, <2 x double> %90) #7
  %92 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %50, <2 x double> %91) #7
  %93 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %58, <2 x double> %92) #7
  %94 = fmul <2 x double> %89, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %95 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %94
  %96 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double> %95) #7
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %93, <2 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555>, <2 x double> %96) #7
  %98 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> <double 0x3C85F00000000000, double 0x3C85F00000000000>, <2 x double> %97) #7
  %99 = fadd <2 x double> %84, %94
  %100 = fsub <2 x double> %84, %99
  %101 = fadd <2 x double> %94, %100
  %102 = fadd <2 x double> %101, %88
  %103 = fadd <2 x double> %102, %98
  %104 = fmul <2 x double> %59, %89
  %105 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %106 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %89, <2 x double> %105) #7
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %89, <2 x double> %106) #7
  %108 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %93, <2 x double> %107) #7
  %109 = fmul <2 x double> %74, %104
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %104, <2 x double> %74, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %74, <2 x double> %111) #7
  %113 = fadd <2 x double> %99, %109
  %114 = fsub <2 x double> %99, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %115, %103
  %117 = fadd <2 x double> %116, %112
  %118 = fmul <2 x double> %113, %1
  %119 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %118
  %120 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %113, <2 x double> %1, <2 x double> %119) #7
  %121 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %117, <2 x double> %1, <2 x double> %120) #7
  %122 = fadd <2 x double> %118, %121
  %123 = fmul <2 x double> %122, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %124 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %123, i32 8) #7
  %125 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %124) #7
  %126 = fmul <2 x double> %124, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %127 = fadd <2 x double> %118, %126
  %128 = fsub <2 x double> %127, %118
  %129 = fsub <2 x double> %127, %128
  %130 = fsub <2 x double> %118, %129
  %131 = fsub <2 x double> %126, %128
  %132 = fadd <2 x double> %131, %130
  %133 = fadd <2 x double> %121, %132
  %134 = fmul <2 x double> %124, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %135 = fadd <2 x double> %134, %127
  %136 = fsub <2 x double> %135, %127
  %137 = fsub <2 x double> %135, %136
  %138 = fsub <2 x double> %127, %137
  %139 = fsub <2 x double> %134, %136
  %140 = fadd <2 x double> %139, %138
  %141 = fadd <2 x double> %140, %133
  %142 = fadd <2 x double> %135, %141
  %143 = fsub <2 x double> %135, %142
  %144 = fadd <2 x double> %141, %143
  %145 = fmul <2 x double> %142, %142
  %146 = fmul <2 x double> %145, %145
  %147 = fmul <2 x double> %146, %146
  %148 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> <double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9>, <2 x double> <double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD>) #7
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> <double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E>, <2 x double> <double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B>) #7
  %150 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> <double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D>, <2 x double> <double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B>) #7
  %151 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %149, <2 x double> %150) #7
  %152 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> <double 0x3F8111111110FB68, double 0x3F8111111110FB68>, <2 x double> <double 0x3FA5555555550E90, double 0x3FA5555555550E90>) #7
  %153 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> <double 0x3FC5555555555558, double 0x3FC5555555555558>, <2 x double> <double 0x3FE0000000000009, double 0x3FE0000000000009>) #7
  %154 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %152, <2 x double> %153) #7
  %155 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %146, <2 x double> %151, <2 x double> %154) #7
  %156 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %147, <2 x double> %148, <2 x double> %155) #7
  %157 = fadd <2 x double> %142, <double 1.000000e+00, double 1.000000e+00>
  %158 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %157
  %159 = fadd <2 x double> %142, %158
  %160 = fadd <2 x double> %144, %159
  %161 = fadd <2 x double> %142, %142
  %162 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %145
  %163 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> %142, <2 x double> %162) #7
  %164 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %161, <2 x double> %144, <2 x double> %163) #7
  %165 = fmul <2 x double> %145, %156
  %166 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %165
  %167 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %156, <2 x double> %166) #7
  %168 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %164, <2 x double> %156, <2 x double> %167) #7
  %169 = fadd <2 x double> %157, %165
  %170 = fsub <2 x double> %157, %169
  %171 = fadd <2 x double> %165, %170
  %172 = fadd <2 x double> %160, %171
  %173 = fadd <2 x double> %168, %172
  %174 = fadd <2 x double> %169, %173
  %175 = ashr <4 x i32> %125, <i32 1, i32 1, i32 1, i32 1>
  %176 = add <4 x i32> %175, <i32 1023, i32 1023, i32 undef, i32 1023>
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %178 = and <4 x i32> %177, <i32 0, i32 -1, i32 0, i32 -1>
  %179 = shl <4 x i32> %178, <i32 20, i32 20, i32 20, i32 20>
  %180 = bitcast <4 x i32> %179 to <2 x double>
  %181 = fmul <2 x double> %174, %180
  %182 = add <4 x i32> %125, <i32 1023, i32 1023, i32 undef, i32 1023>
  %183 = sub <4 x i32> %182, %175
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %185 = and <4 x i32> %184, <i32 0, i32 -1, i32 0, i32 -1>
  %186 = shl <4 x i32> %185, <i32 20, i32 20, i32 20, i32 20>
  %187 = bitcast <4 x i32> %186 to <2 x double>
  %188 = fmul <2 x double> %181, %187
  %189 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %118, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %190 = bitcast <2 x double> %189 to <2 x i64>
  %191 = bitcast <2 x double> %188 to <2 x i64>
  %192 = xor <2 x i64> %190, <i64 -1, i64 -1>
  %193 = and <2 x i64> %191, %192
  %194 = bitcast <2 x i64> %193 to <2 x double>
  %195 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %118, <2 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %196 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %194, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %195) #7
  %197 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 30) #7
  %198 = bitcast <2 x i64> %10 to <2 x double>
  %199 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %198) #7
  %200 = bitcast <2 x i64> %5 to <2 x double>
  %201 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %199, <2 x double> %200) #7
  %202 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %201, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %197) #7
  %203 = fmul <2 x double> %196, %202
  %204 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %205 = bitcast <2 x double> %204 to <2 x i64>
  %206 = bitcast <2 x double> %1 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -9223372036854775808, i64 -9223372036854775808>
  %208 = xor <2 x i64> %207, %205
  %209 = bitcast <2 x i64> %208 to <2 x double>
  %210 = and <2 x i64> %206, <i64 9223372036854775807, i64 9223372036854775807>
  %211 = bitcast <2 x i64> %210 to <2 x double>
  %212 = fcmp oeq <2 x double> %211, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %213 = sext <2 x i1> %212 to <2 x i64>
  %214 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %209, <2 x double> zeroinitializer, i8 17) #7
  %215 = bitcast <2 x double> %214 to <2 x i64>
  %216 = fcmp oeq <2 x double> %209, zeroinitializer
  %217 = sext <2 x i1> %216 to <2 x i64>
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %218) #7
  %220 = bitcast <2 x double> %219 to <2 x i64>
  %221 = xor <2 x i64> %215, <i64 -1, i64 -1>
  %222 = and <2 x i64> %220, %221
  %223 = bitcast <2 x i64> %222 to <2 x double>
  %224 = bitcast <2 x i64> %213 to <2 x double>
  %225 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %203, <2 x double> %223, <2 x double> %224) #7
  %226 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %227 = fcmp oeq <2 x double> %0, zeroinitializer
  %228 = sext <2 x i1> %227 to <2 x i64>
  %229 = or <2 x i1> %226, %227
  %230 = sext <2 x i1> %229 to <2 x i64>
  %231 = and <2 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808>
  %232 = or <2 x i64> %231, <i64 4607182418800017408, i64 4607182418800017408>
  %233 = bitcast <2 x i64> %232 to <2 x double>
  %234 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %233, <2 x double> %198) #7
  %235 = xor <2 x i64> %206, <i64 -9223372036854775808, i64 -9223372036854775808>
  %236 = bitcast <2 x i64> %235 to <2 x double>
  %237 = bitcast <2 x i64> %228 to <2 x double>
  %238 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %236, <2 x double> %237) #7
  %239 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %238, <2 x double> zeroinitializer, i8 17) #7
  %240 = bitcast <2 x double> %239 to <2 x i64>
  %241 = and <2 x i64> %240, <i64 9218868437227405312, i64 9218868437227405312>
  %242 = xor <2 x i64> %241, <i64 9218868437227405312, i64 9218868437227405312>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fmul <2 x double> %234, %243
  %245 = bitcast <2 x i64> %230 to <2 x double>
  %246 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %225, <2 x double> %244, <2 x double> %245) #7
  %247 = fcmp uno <2 x double> %1, %0
  %248 = select <2 x i1> %247, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %246
  %249 = fcmp oeq <2 x double> %1, zeroinitializer
  %250 = fcmp oeq <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %251 = or <2 x i1> %249, %250
  %252 = sext <2 x i1> %251 to <2 x i64>
  %253 = bitcast <2 x i64> %252 to <2 x double>
  %254 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %248, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %253) #7
  ret <2 x double> %254
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = fsub <2 x double> %103, %105
  %112 = fsub <2 x double> %103, %111
  %113 = fsub <2 x double> %112, %105
  %114 = fadd <2 x double> %113, %104
  %115 = fsub <2 x double> %114, %110
  %116 = fadd <2 x double> %111, %115
  %117 = fmul <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %119 = fcmp uno <2 x double> %117, zeroinitializer
  %120 = select <2 x i1> %119, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %118
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %120) #7
  %122 = bitcast <2 x double> %121 to <2 x i64>
  %123 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %124 = xor <2 x i64> %123, %122
  %125 = fcmp uno <2 x double> %0, zeroinitializer
  %126 = bitcast <2 x i64> %124 to <2 x double>
  %127 = select <2 x i1> %125, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %126
  ret <2 x double> %127
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = fadd <2 x double> %105, %103
  %112 = fsub <2 x double> %103, %111
  %113 = fadd <2 x double> %105, %112
  %114 = fadd <2 x double> %113, %104
  %115 = fadd <2 x double> %110, %114
  %116 = fadd <2 x double> %111, %115
  %117 = fmul <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %119 = fcmp uno <2 x double> %117, zeroinitializer
  %120 = select <2 x i1> %119, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %118
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %120) #7
  %122 = fcmp uno <2 x double> %0, zeroinitializer
  %123 = select <2 x i1> %122, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %121
  ret <2 x double> %123
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = bitcast <2 x double> %105 to <2 x i64>
  %112 = xor <2 x i64> %111, <i64 -9223372036854775808, i64 -9223372036854775808>
  %113 = bitcast <2 x double> %110 to <2 x i64>
  %114 = xor <2 x i64> %113, <i64 -9223372036854775808, i64 -9223372036854775808>
  %115 = bitcast <2 x i64> %112 to <2 x double>
  %116 = bitcast <2 x i64> %114 to <2 x double>
  %117 = fadd <2 x double> %103, %115
  %118 = fsub <2 x double> %117, %103
  %119 = fsub <2 x double> %117, %118
  %120 = fsub <2 x double> %103, %119
  %121 = fsub <2 x double> %115, %118
  %122 = fadd <2 x double> %121, %120
  %123 = fadd <2 x double> %104, %116
  %124 = fadd <2 x double> %123, %122
  %125 = fadd <2 x double> %105, %103
  %126 = fsub <2 x double> %125, %103
  %127 = fsub <2 x double> %125, %126
  %128 = fsub <2 x double> %103, %127
  %129 = fsub <2 x double> %105, %126
  %130 = fadd <2 x double> %129, %128
  %131 = fadd <2 x double> %110, %104
  %132 = fadd <2 x double> %131, %130
  %133 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %125
  %134 = fmul <2 x double> %133, %117
  %135 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %134
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %117, <2 x double> %135) #7
  %137 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %125
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %137, <2 x double> %133, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %139 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %132
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %139, <2 x double> %133, <2 x double> %138) #7
  %141 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %133, <2 x double> %136) #7
  %142 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %140, <2 x double> %141) #7
  %143 = fadd <2 x double> %142, %134
  %144 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %145 = fcmp uno <2 x double> %143, zeroinitializer
  %146 = select <2 x i1> %145, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %144
  %147 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %143, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %146) #7
  %148 = bitcast <2 x double> %147 to <2 x i64>
  %149 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %150 = xor <2 x i64> %149, %148
  %151 = fcmp uno <2 x double> %0, zeroinitializer
  %152 = bitcast <2 x i64> %150 to <2 x double>
  %153 = select <2 x i1> %151, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %152
  ret <2 x double> %153
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #7
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %4) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %8) #7
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <2 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <2 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <2 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <2 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E>, <2 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %17, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %16, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %13, <2 x double> %20) #7
  %22 = fmul <2 x double> %9, %10
  %23 = fmul <2 x double> %22, %21
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %23) #7
  %25 = fadd <2 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %29 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %30 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %31 = add <4 x i32> %30, <i32 1023, i32 1023, i32 undef, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %33 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %34 = shl <4 x i32> %33, <i32 20, i32 20, i32 20, i32 20>
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %29, %35
  %37 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 1023>
  %38 = sub <4 x i32> %37, %30
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %40 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %36, %42
  %44 = fadd <2 x double> %43, <double -1.000000e+00, double -1.000000e+00>
  %45 = bitcast <4 x i32> %28 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %25, <2 x double> %45) #7
  %47 = fadd <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %48 = fadd <2 x double> %46, <double 1.000000e+00, double 1.000000e+00>
  %49 = fdiv <2 x double> %47, %48
  %50 = fmul <2 x double> %46, <double 5.000000e-01, double 5.000000e-01>
  %51 = fmul <2 x double> %50, %49
  %52 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %53 = fcmp uno <2 x double> %51, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %54) #7
  %56 = bitcast <2 x double> %55 to <2 x i64>
  %57 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <2 x i64> %57, %56
  %59 = fcmp uno <2 x double> %0, zeroinitializer
  %60 = bitcast <2 x i64> %58 to <2 x double>
  %61 = select <2 x i1> %59, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %60
  ret <2 x double> %61
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #7
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %4) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %8) #7
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <2 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <2 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <2 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <2 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <2 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %17, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %16, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %13, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %9, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %9, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %9, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add <4 x i32> %25, <i32 1023, i32 1023, i32 undef, i32 1023>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %28 = and <4 x i32> %27, <i32 0, i32 -1, i32 0, i32 -1>
  %29 = shl <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %30 = bitcast <4 x i32> %29 to <2 x double>
  %31 = fmul <2 x double> %24, %30
  %32 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 1023>
  %33 = sub <4 x i32> %32, %25
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %35 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %31, %37
  %39 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %38, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %42 = bitcast <2 x double> %41 to <2 x i64>
  %43 = bitcast <2 x double> %40 to <2 x i64>
  %44 = xor <2 x i64> %42, <i64 -1, i64 -1>
  %45 = and <2 x i64> %44, %43
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %46
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %46, <2 x double> %47) #7
  %49 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %50 = fcmp uno <2 x double> %48, zeroinitializer
  %51 = select <2 x i1> %50, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %49
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %51) #7
  %53 = fcmp uno <2 x double> %0, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  ret <2 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %5) #7
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %9) #7
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <2 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <2 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <2 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <2 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E>, <2 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %18, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %17, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %14, <2 x double> %21) #7
  %23 = fmul <2 x double> %10, %11
  %24 = fmul <2 x double> %23, %22
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %24) #7
  %26 = fadd <2 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %30 = fadd <2 x double> %26, <double 1.000000e+00, double 1.000000e+00>
  %31 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %32 = add <4 x i32> %31, <i32 1023, i32 1023, i32 undef, i32 1023>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  %38 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %39 = sub <4 x i32> %38, %31
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %41 = and <4 x i32> %40, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = fmul <2 x double> %37, %43
  %45 = fadd <2 x double> %44, <double -1.000000e+00, double -1.000000e+00>
  %46 = bitcast <4 x i32> %29 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> %26, <2 x double> %46) #7
  %48 = fadd <2 x double> %47, <double 2.000000e+00, double 2.000000e+00>
  %49 = fdiv <2 x double> %47, %48
  %50 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %51 = fcmp uno <2 x double> %49, zeroinitializer
  %52 = select <2 x i1> %51, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %50
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %49, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %52) #7
  %54 = bitcast <2 x double> %53 to <2 x i64>
  %55 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <2 x i64> %55, %54
  %57 = fcmp uno <2 x double> %0, zeroinitializer
  %58 = bitcast <2 x i64> %56 to <2 x double>
  %59 = select <2 x i1> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %58
  ret <2 x double> %59
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asinhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %6 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %0
  %7 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %0
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %6, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %9 = fmul <2 x double> %6, %8
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %9, <2 x double> %5) #7
  %12 = fmul <2 x double> %10, %10
  %13 = fadd <2 x double> %10, %10
  %14 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %10, <2 x double> %14) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %11, <2 x double> %15) #7
  %17 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %18 = fsub <2 x double> %17, %12
  %19 = fsub <2 x double> %17, %18
  %20 = fsub <2 x double> %12, %19
  %21 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %18
  %22 = fadd <2 x double> %21, %20
  %23 = fadd <2 x double> %16, %22
  %24 = fadd <2 x double> %17, %23
  %25 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %24) #7
  %26 = fmul <2 x double> %25, %25
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %27) #7
  %29 = fadd <2 x double> %17, %26
  %30 = fsub <2 x double> %29, %17
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> %17, %31
  %33 = fsub <2 x double> %26, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fadd <2 x double> %28, %23
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %25
  %38 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %40 = fmul <2 x double> %37, %39
  %41 = fmul <2 x double> %37, %29
  %42 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %37, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %36, <2 x double> %37, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %40, <2 x double> %44) #7
  %46 = fmul <2 x double> %41, <double 5.000000e-01, double 5.000000e-01>
  %47 = fmul <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %48 = fmul <2 x double> %46, %4
  %49 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %4, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %4, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> %48, <2 x double> %5) #7
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> %51, <2 x double> %5) #7
  %54 = fadd <2 x double> %52, %0
  %55 = fsub <2 x double> %54, %52
  %56 = fsub <2 x double> %54, %55
  %57 = fsub <2 x double> %52, %56
  %58 = fsub <2 x double> %0, %55
  %59 = fadd <2 x double> %58, %57
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %54, %60
  %62 = fsub <2 x double> %54, %61
  %63 = fadd <2 x double> %60, %62
  %64 = fmul <2 x double> %61, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %65 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %64, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %66 = fmul <2 x double> %64, <double 0x52B0000000000000, double 0x52B0000000000000>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %64, <2 x double> %66, <2 x double> %65) #7
  %68 = bitcast <2 x double> %67 to <4 x i32>
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %70 = lshr <4 x i32> %69, <i32 20, i32 20, i32 20, i32 20>
  %71 = bitcast <2 x double> %65 to <4 x i32>
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %73 = bitcast <4 x i32> %72 to <16 x i8>
  %74 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %73) #7
  %75 = bitcast <16 x i8> %74 to <4 x i32>
  %76 = sub <4 x i32> %70, %75
  %77 = sub <4 x i32> zeroinitializer, %76
  %78 = ashr <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %79 = add <4 x i32> %78, <i32 1023, i32 1023, i32 undef, i32 1023>
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %81 = and <4 x i32> %80, <i32 0, i32 -1, i32 0, i32 -1>
  %82 = shl <4 x i32> %81, <i32 20, i32 20, i32 20, i32 20>
  %83 = bitcast <4 x i32> %82 to <2 x double>
  %84 = fmul <2 x double> %61, %83
  %85 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %76
  %86 = sub <4 x i32> %85, %78
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %88 = and <4 x i32> %87, <i32 0, i32 -1, i32 0, i32 -1>
  %89 = shl <4 x i32> %88, <i32 20, i32 20, i32 20, i32 20>
  %90 = bitcast <4 x i32> %89 to <2 x double>
  %91 = fmul <2 x double> %84, %90
  %92 = fmul <2 x double> %63, %83
  %93 = fmul <2 x double> %92, %90
  %94 = fadd <2 x double> %91, <double -1.000000e+00, double -1.000000e+00>
  %95 = fsub <2 x double> %94, %91
  %96 = fsub <2 x double> %94, %95
  %97 = fsub <2 x double> %91, %96
  %98 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %95
  %99 = fadd <2 x double> %98, %97
  %100 = fadd <2 x double> %93, %99
  %101 = fadd <2 x double> %91, <double 1.000000e+00, double 1.000000e+00>
  %102 = fsub <2 x double> %101, %91
  %103 = fsub <2 x double> %101, %102
  %104 = fsub <2 x double> %91, %103
  %105 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %102
  %106 = fadd <2 x double> %105, %104
  %107 = fadd <2 x double> %93, %106
  %108 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %101
  %109 = fmul <2 x double> %94, %108
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %109
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %94, <2 x double> %110) #7
  %112 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %101
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %112, <2 x double> %108, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %114 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %107
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %114, <2 x double> %108, <2 x double> %113) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %100, <2 x double> %108, <2 x double> %111) #7
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %109, <2 x double> %115, <2 x double> %116) #7
  %118 = fmul <2 x double> %109, %109
  %119 = fadd <2 x double> %109, %109
  %120 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %118
  %121 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %109, <2 x double> %109, <2 x double> %120) #7
  %122 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %119, <2 x double> %117, <2 x double> %121) #7
  %123 = fmul <2 x double> %118, %118
  %124 = fmul <2 x double> %123, %123
  %125 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %126 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %123, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %125) #7
  %127 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %128 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %129 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %123, <2 x double> %127, <2 x double> %128) #7
  %130 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %126, <2 x double> %129) #7
  %131 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %130, <2 x double> %118, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %132 = shufflevector <4 x i32> %76, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %133 = sitofp <2 x i32> %132 to <2 x double>
  %134 = fmul <2 x double> %133, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %135 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %134
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %133, <2 x double> %135) #7
  %137 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %133, <2 x double> %136) #7
  %138 = fmul <2 x double> %109, <double 2.000000e+00, double 2.000000e+00>
  %139 = fmul <2 x double> %117, <double 2.000000e+00, double 2.000000e+00>
  %140 = fadd <2 x double> %134, %138
  %141 = fsub <2 x double> %134, %140
  %142 = fadd <2 x double> %138, %141
  %143 = fadd <2 x double> %137, %142
  %144 = fadd <2 x double> %139, %143
  %145 = fmul <2 x double> %109, %118
  %146 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %145
  %147 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> %109, <2 x double> %146) #7
  %148 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %122, <2 x double> %109, <2 x double> %147) #7
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> %117, <2 x double> %148) #7
  %150 = fmul <2 x double> %131, %145
  %151 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %150
  %152 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %131, <2 x double> %151) #7
  %153 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %149, <2 x double> %131, <2 x double> %152) #7
  %154 = fadd <2 x double> %140, %150
  %155 = fsub <2 x double> %140, %154
  %156 = fadd <2 x double> %150, %155
  %157 = fadd <2 x double> %156, %144
  %158 = fadd <2 x double> %157, %153
  %159 = fadd <2 x double> %154, %158
  %160 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #7
  %161 = fcmp uno <2 x double> %159, zeroinitializer
  %162 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %163 = or <2 x i64> %162, <i64 9218868437227405312, i64 9218868437227405312>
  %164 = bitcast <2 x i64> %163 to <2 x double>
  %165 = select <2 x i1> %161, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %160
  %166 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %159, <2 x double> %164, <2 x double> %165) #7
  %167 = fcmp uno <2 x double> %0, zeroinitializer
  %168 = select <2 x i1> %167, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %166
  %169 = icmp eq <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %170 = sext <2 x i1> %169 to <2 x i64>
  %171 = bitcast <2 x i64> %170 to <2 x double>
  %172 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %168, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %171) #7
  ret <2 x double> %172
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acoshd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fsub <2 x double> %2, %0
  %4 = fsub <2 x double> %2, %3
  %5 = fsub <2 x double> %0, %4
  %6 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %3
  %7 = fadd <2 x double> %6, %5
  %8 = fadd <2 x double> %2, %7
  %9 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %8) #7
  %10 = fmul <2 x double> %9, %9
  %11 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %10
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> %9, <2 x double> %11) #7
  %13 = fadd <2 x double> %2, %10
  %14 = fsub <2 x double> %13, %2
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> %2, %15
  %17 = fsub <2 x double> %10, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fadd <2 x double> %7, %12
  %20 = fadd <2 x double> %19, %18
  %21 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %9
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %9
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %24 = fmul <2 x double> %21, %23
  %25 = fmul <2 x double> %21, %13
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %21, <2 x double> %26) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %21, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, <double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <2 x double> %29, <double 5.000000e-01, double 5.000000e-01>
  %32 = fadd <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %32, %0
  %34 = fsub <2 x double> %32, %33
  %35 = fsub <2 x double> %0, %34
  %36 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %33
  %37 = fadd <2 x double> %36, %35
  %38 = fadd <2 x double> %32, %37
  %39 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %38) #7
  %40 = fmul <2 x double> %39, %39
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %39, <2 x double> %39, <2 x double> %41) #7
  %43 = fadd <2 x double> %32, %40
  %44 = fsub <2 x double> %43, %32
  %45 = fsub <2 x double> %43, %44
  %46 = fsub <2 x double> %32, %45
  %47 = fsub <2 x double> %40, %44
  %48 = fadd <2 x double> %47, %46
  %49 = fadd <2 x double> %37, %42
  %50 = fadd <2 x double> %49, %48
  %51 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %39
  %52 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %39
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %51, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %54 = fmul <2 x double> %51, %53
  %55 = fmul <2 x double> %51, %43
  %56 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %55
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %51, <2 x double> %56) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %50, <2 x double> %51, <2 x double> %57) #7
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %54, <2 x double> %58) #7
  %60 = fmul <2 x double> %55, <double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <2 x double> %59, <double 5.000000e-01, double 5.000000e-01>
  %62 = fmul <2 x double> %30, %60
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %60, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %60, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %61, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, %0
  %68 = fsub <2 x double> %67, %62
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %62, %69
  %71 = fsub <2 x double> %0, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %66, %72
  %74 = fmul <2 x double> %67, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %75 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %74, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %76 = fmul <2 x double> %74, <double 0x52B0000000000000, double 0x52B0000000000000>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %74, <2 x double> %76, <2 x double> %75) #7
  %78 = bitcast <2 x double> %77 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %80 = lshr <4 x i32> %79, <i32 20, i32 20, i32 20, i32 20>
  %81 = bitcast <2 x double> %75 to <4 x i32>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %83 = bitcast <4 x i32> %82 to <16 x i8>
  %84 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %83) #7
  %85 = bitcast <16 x i8> %84 to <4 x i32>
  %86 = sub <4 x i32> %80, %85
  %87 = sub <4 x i32> zeroinitializer, %86
  %88 = ashr <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = add <4 x i32> %88, <i32 1023, i32 1023, i32 undef, i32 1023>
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %91 = and <4 x i32> %90, <i32 0, i32 -1, i32 0, i32 -1>
  %92 = shl <4 x i32> %91, <i32 20, i32 20, i32 20, i32 20>
  %93 = bitcast <4 x i32> %92 to <2 x double>
  %94 = fmul <2 x double> %67, %93
  %95 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %86
  %96 = sub <4 x i32> %95, %88
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %98 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = bitcast <4 x i32> %99 to <2 x double>
  %101 = fmul <2 x double> %94, %100
  %102 = fmul <2 x double> %73, %93
  %103 = fmul <2 x double> %102, %100
  %104 = fadd <2 x double> %101, <double -1.000000e+00, double -1.000000e+00>
  %105 = fsub <2 x double> %104, %101
  %106 = fsub <2 x double> %104, %105
  %107 = fsub <2 x double> %101, %106
  %108 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %105
  %109 = fadd <2 x double> %108, %107
  %110 = fadd <2 x double> %103, %109
  %111 = fadd <2 x double> %101, <double 1.000000e+00, double 1.000000e+00>
  %112 = fsub <2 x double> %111, %101
  %113 = fsub <2 x double> %111, %112
  %114 = fsub <2 x double> %101, %113
  %115 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %112
  %116 = fadd <2 x double> %115, %114
  %117 = fadd <2 x double> %103, %116
  %118 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %111
  %119 = fmul <2 x double> %104, %118
  %120 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %119
  %121 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> %104, <2 x double> %120) #7
  %122 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %111
  %123 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %122, <2 x double> %118, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %124 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %117
  %125 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %118, <2 x double> %123) #7
  %126 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %110, <2 x double> %118, <2 x double> %121) #7
  %127 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %119, <2 x double> %125, <2 x double> %126) #7
  %128 = fmul <2 x double> %119, %119
  %129 = fadd <2 x double> %119, %119
  %130 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %128
  %131 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %119, <2 x double> %119, <2 x double> %130) #7
  %132 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %129, <2 x double> %127, <2 x double> %131) #7
  %133 = fmul <2 x double> %128, %128
  %134 = fmul <2 x double> %133, %133
  %135 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %128, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %135) #7
  %137 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %128, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %128, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %139 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %137, <2 x double> %138) #7
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %136, <2 x double> %139) #7
  %141 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %140, <2 x double> %128, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %142 = shufflevector <4 x i32> %86, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %143 = sitofp <2 x i32> %142 to <2 x double>
  %144 = fmul <2 x double> %143, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %145 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %144
  %146 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %143, <2 x double> %145) #7
  %147 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %143, <2 x double> %146) #7
  %148 = fmul <2 x double> %119, <double 2.000000e+00, double 2.000000e+00>
  %149 = fmul <2 x double> %127, <double 2.000000e+00, double 2.000000e+00>
  %150 = fadd <2 x double> %144, %148
  %151 = fsub <2 x double> %144, %150
  %152 = fadd <2 x double> %148, %151
  %153 = fadd <2 x double> %147, %152
  %154 = fadd <2 x double> %149, %153
  %155 = fmul <2 x double> %119, %128
  %156 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %155
  %157 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %128, <2 x double> %119, <2 x double> %156) #7
  %158 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %132, <2 x double> %119, <2 x double> %157) #7
  %159 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %128, <2 x double> %127, <2 x double> %158) #7
  %160 = fmul <2 x double> %141, %155
  %161 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %160
  %162 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %155, <2 x double> %141, <2 x double> %161) #7
  %163 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %159, <2 x double> %141, <2 x double> %162) #7
  %164 = fadd <2 x double> %150, %160
  %165 = fsub <2 x double> %150, %164
  %166 = fadd <2 x double> %160, %165
  %167 = fadd <2 x double> %166, %154
  %168 = fadd <2 x double> %167, %163
  %169 = fadd <2 x double> %164, %168
  %170 = bitcast <2 x double> %0 to <2 x i64>
  %171 = and <2 x i64> %170, <i64 9223372036854775807, i64 9223372036854775807>
  %172 = bitcast <2 x i64> %171 to <2 x double>
  %173 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %172, <2 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #7
  %174 = fcmp uno <2 x double> %169, zeroinitializer
  %175 = select <2 x i1> %174, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %173
  %176 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %169, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %175) #7
  %177 = fcmp une <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %178 = bitcast <2 x double> %176 to <2 x i64>
  %179 = select <2 x i1> %177, <2 x i64> %178, <2 x i64> zeroinitializer
  %180 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %181 = bitcast <2 x double> %180 to <2 x i64>
  %182 = or <2 x i64> %179, %181
  %183 = fcmp uno <2 x double> %0, zeroinitializer
  %184 = bitcast <2 x i64> %182 to <2 x double>
  %185 = select <2 x i1> %183, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %184
  ret <2 x double> %185
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atanhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <2 x double> %5, <double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <2 x double> %5, %6
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <2 x double> %4, %6
  %10 = fadd <2 x double> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <2 x double> %5, %19
  %21 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %5, <2 x double> %21) #7
  %23 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %19, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %19, <2 x double> %24) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %19, <2 x double> %22) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %26, <2 x double> %27) #7
  %29 = fmul <2 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %29, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %31 = fmul <2 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000>
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %31, <2 x double> %30) #7
  %33 = bitcast <2 x double> %32 to <4 x i32>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %35 = lshr <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <2 x double> %30 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %38) #7
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = sub <4 x i32> %35, %40
  %42 = sub <4 x i32> zeroinitializer, %41
  %43 = ashr <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = add <4 x i32> %43, <i32 1023, i32 1023, i32 undef, i32 1023>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %20, %48
  %50 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %41
  %51 = sub <4 x i32> %50, %43
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %53 = and <4 x i32> %52, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %54 to <2 x double>
  %56 = fmul <2 x double> %49, %55
  %57 = fmul <2 x double> %28, %48
  %58 = fmul <2 x double> %57, %55
  %59 = fadd <2 x double> %56, <double -1.000000e+00, double -1.000000e+00>
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %59, %60
  %62 = fsub <2 x double> %56, %61
  %63 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %60
  %64 = fadd <2 x double> %63, %62
  %65 = fadd <2 x double> %58, %64
  %66 = fadd <2 x double> %56, <double 1.000000e+00, double 1.000000e+00>
  %67 = fsub <2 x double> %66, %56
  %68 = fsub <2 x double> %66, %67
  %69 = fsub <2 x double> %56, %68
  %70 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %71 = fadd <2 x double> %70, %69
  %72 = fadd <2 x double> %58, %71
  %73 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %66
  %74 = fmul <2 x double> %59, %73
  %75 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %73, <2 x double> %59, <2 x double> %75) #7
  %77 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %66
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %77, <2 x double> %73, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %79 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %72
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %79, <2 x double> %73, <2 x double> %78) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %73, <2 x double> %76) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %80, <2 x double> %81) #7
  %83 = fmul <2 x double> %74, %74
  %84 = fadd <2 x double> %74, %74
  %85 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %83
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %74, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %84, <2 x double> %82, <2 x double> %86) #7
  %88 = fmul <2 x double> %83, %83
  %89 = fmul <2 x double> %88, %88
  %90 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %91 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %88, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %90) #7
  %92 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %93 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %94 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %88, <2 x double> %92, <2 x double> %93) #7
  %95 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> %91, <2 x double> %94) #7
  %96 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %95, <2 x double> %83, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %97 = shufflevector <4 x i32> %41, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %98 = sitofp <2 x i32> %97 to <2 x double>
  %99 = fmul <2 x double> %98, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %100 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %99
  %101 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %98, <2 x double> %100) #7
  %102 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %98, <2 x double> %101) #7
  %103 = fmul <2 x double> %74, <double 2.000000e+00, double 2.000000e+00>
  %104 = fmul <2 x double> %82, <double 2.000000e+00, double 2.000000e+00>
  %105 = fadd <2 x double> %99, %103
  %106 = fsub <2 x double> %99, %105
  %107 = fadd <2 x double> %103, %106
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fmul <2 x double> %74, %83
  %111 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %110
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %74, <2 x double> %111) #7
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %87, <2 x double> %74, <2 x double> %112) #7
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %82, <2 x double> %113) #7
  %115 = fmul <2 x double> %96, %110
  %116 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %115
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %110, <2 x double> %96, <2 x double> %116) #7
  %118 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %114, <2 x double> %96, <2 x double> %117) #7
  %119 = fadd <2 x double> %105, %115
  %120 = fsub <2 x double> %105, %119
  %121 = fadd <2 x double> %115, %120
  %122 = fadd <2 x double> %121, %109
  %123 = fadd <2 x double> %122, %118
  %124 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %125 = bitcast <2 x double> %124 to <2 x i64>
  %126 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %127 = sext <2 x i1> %126 to <2 x i64>
  %128 = fadd <2 x double> %119, %123
  %129 = fmul <2 x double> %128, <double 5.000000e-01, double 5.000000e-01>
  %130 = bitcast <2 x i64> %127 to <2 x double>
  %131 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %129, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %130) #7
  %132 = bitcast <2 x double> %131 to <2 x i64>
  %133 = or <2 x i64> %132, %125
  %134 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = xor <2 x i64> %133, %134
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %138 = fcmp uno <2 x double> %136, zeroinitializer
  %139 = fcmp uno <2 x double> %0, zeroinitializer
  %140 = or <2 x i1> %137, %139
  %141 = or <2 x i1> %140, %138
  %142 = select <2 x i1> %141, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %136
  ret <2 x double> %142
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = bitcast <2 x double> %5 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %13) #7
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = sub <4 x i32> %10, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 undef, i32 undef>
  %18 = xor <4 x i32> %16, <i32 -2, i32 -2, i32 -2, i32 -2>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %24, %0
  %26 = sub <4 x i32> <i32 1022, i32 1022, i32 undef, i32 1022>, %16
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = shufflevector <4 x i32> %17, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fadd <2 x double> %34, <double 6.144000e+03, double 6.144000e+03>
  %36 = fmul <2 x double> %35, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %36) #7
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %39, <double 3.000000e+00, double 3.000000e+00>
  %41 = fsub <2 x double> %35, %40
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #7
  %43 = icmp eq <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %46) #7
  %48 = icmp eq <4 x i32> %42, <i32 2, i32 2, i32 2, i32 2>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x double>
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %51) #7
  %53 = add <4 x i32> %37, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add <4 x i32> %54, <i32 1023, i32 1023, i32 undef, i32 1023>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %57 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %58 = shl <4 x i32> %57, <i32 20, i32 20, i32 20, i32 20>
  %59 = bitcast <4 x i32> %58 to <2 x double>
  %60 = fmul <2 x double> %52, %59
  %61 = add <4 x i32> %37, <i32 -1025, i32 -1025, i32 undef, i32 -1025>
  %62 = sub <4 x i32> %61, %54
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %64 = and <4 x i32> %63, <i32 0, i32 -1, i32 0, i32 -1>
  %65 = shl <4 x i32> %64, <i32 20, i32 20, i32 20, i32 20>
  %66 = bitcast <4 x i32> %65 to <2 x double>
  %67 = fmul <2 x double> %60, %66
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = bitcast <2 x double> %32 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = xor <2 x i64> %70, %68
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = and <2 x i64> %69, <i64 9223372036854775807, i64 9223372036854775807>
  %74 = bitcast <2 x i64> %73 to <2 x double>
  %75 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <2 x double> %74, <2 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %74, <2 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %74, <2 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %77, <2 x double> %74, <2 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %74, <2 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %80 = fmul <2 x double> %79, %79
  %81 = fmul <2 x double> %80, %80
  %82 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %81, <2 x double> %82) #7
  %84 = fmul <2 x double> %83, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %85 = fsub <2 x double> %79, %84
  %86 = fmul <2 x double> %85, %74
  %87 = fmul <2 x double> %85, %86
  %88 = fmul <2 x double> %87, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %89 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %87, <2 x double> %85, <2 x double> <double -1.000000e+00, double -1.000000e+00>) #7
  %90 = fmul <2 x double> %89, %88
  %91 = fsub <2 x double> %87, %90
  %92 = fmul <2 x double> %91, %72
  ret <2 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = bitcast <2 x double> %5 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %13) #7
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = sub <4 x i32> %10, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 undef, i32 undef>
  %18 = xor <4 x i32> %16, <i32 -2, i32 -2, i32 -2, i32 -2>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %24, %0
  %26 = sub <4 x i32> <i32 1022, i32 1022, i32 undef, i32 1022>, %16
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = shufflevector <4 x i32> %17, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fadd <2 x double> %34, <double 6.144000e+03, double 6.144000e+03>
  %36 = fmul <2 x double> %35, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %36) #7
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %39, <double 3.000000e+00, double 3.000000e+00>
  %41 = fsub <2 x double> %35, %40
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #7
  %43 = icmp eq <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <2 x double> %46) #7
  %49 = icmp eq <4 x i32> %42, <i32 2, i32 2, i32 2, i32 2>
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %52 = bitcast <4 x i32> %51 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %52) #7
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <2 x double> %52) #7
  %55 = bitcast <2 x double> %53 to <2 x i64>
  %56 = bitcast <2 x double> %32 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <2 x i64> %57, %55
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = bitcast <2 x double> %54 to <2 x i64>
  %61 = xor <2 x i64> %57, %60
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = and <2 x i64> %56, <i64 9223372036854775807, i64 9223372036854775807>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <2 x double> %64, <2 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %64, <2 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %66, <2 x double> %64, <2 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %67, <2 x double> %64, <2 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %68, <2 x double> %64, <2 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %70 = fmul <2 x double> %69, %69
  %71 = fmul <2 x double> %70, %70
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %71, <2 x double> %72) #7
  %74 = fmul <2 x double> %73, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %75 = fsub <2 x double> %69, %74
  %76 = fmul <2 x double> %75, %75
  %77 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %76
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %75, <2 x double> %77) #7
  %79 = fmul <2 x double> %76, %76
  %80 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %76, <2 x double> %80) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %76, <2 x double> %81) #7
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %78, <2 x double> %82) #7
  %84 = fmul <2 x double> %79, %64
  %85 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %84
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %79, <2 x double> %64, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %64, <2 x double> %86) #7
  %88 = bitcast <2 x double> %75 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = fadd <2 x double> %84, %90
  %92 = fsub <2 x double> %91, %84
  %93 = fsub <2 x double> %91, %92
  %94 = fsub <2 x double> %84, %93
  %95 = fsub <2 x double> %90, %92
  %96 = fadd <2 x double> %95, %94
  %97 = fadd <2 x double> %87, %96
  %98 = fadd <2 x double> %91, %97
  %99 = fmul <2 x double> %98, <double 0xBFE5555555555555, double 0xBFE5555555555555>
  %100 = fmul <2 x double> %75, %99
  %101 = fadd <2 x double> %76, %100
  %102 = fsub <2 x double> %101, %76
  %103 = fsub <2 x double> %101, %102
  %104 = fsub <2 x double> %76, %103
  %105 = fsub <2 x double> %100, %102
  %106 = fadd <2 x double> %105, %104
  %107 = fadd <2 x double> %78, %106
  %108 = fmul <2 x double> %101, %64
  %109 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %64, <2 x double> %109) #7
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> %64, <2 x double> %110) #7
  %112 = fmul <2 x double> %108, %59
  %113 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %59, <2 x double> %113) #7
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %111, <2 x double> %59, <2 x double> %114) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %62, <2 x double> %115) #7
  %117 = fadd <2 x double> %116, %112
  %118 = add <4 x i32> %37, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %119 = ashr <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %120 = add <4 x i32> %119, <i32 1023, i32 1023, i32 undef, i32 1023>
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %122 = and <4 x i32> %121, <i32 0, i32 -1, i32 0, i32 -1>
  %123 = shl <4 x i32> %122, <i32 20, i32 20, i32 20, i32 20>
  %124 = bitcast <4 x i32> %123 to <2 x double>
  %125 = fmul <2 x double> %117, %124
  %126 = add <4 x i32> %37, <i32 -1025, i32 -1025, i32 undef, i32 -1025>
  %127 = sub <4 x i32> %126, %119
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %129 = and <4 x i32> %128, <i32 0, i32 -1, i32 0, i32 -1>
  %130 = shl <4 x i32> %129, <i32 20, i32 20, i32 20, i32 20>
  %131 = bitcast <4 x i32> %130 to <2 x double>
  %132 = fmul <2 x double> %125, %131
  %133 = fcmp oeq <2 x double> %64, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %134 = sext <2 x i1> %133 to <2 x i64>
  %135 = and <2 x i64> %58, <i64 -9223372036854775808, i64 -9223372036854775808>
  %136 = or <2 x i64> %135, <i64 9218868437227405312, i64 9218868437227405312>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = bitcast <2 x i64> %134 to <2 x double>
  %139 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> %137, <2 x double> %138) #7
  %140 = fcmp oeq <2 x double> %64, zeroinitializer
  %141 = sext <2 x i1> %140 to <2 x i64>
  %142 = bitcast <2 x i64> %135 to <2 x double>
  %143 = bitcast <2 x i64> %141 to <2 x double>
  %144 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %139, <2 x double> %142, <2 x double> %143) #7
  ret <2 x double> %144
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #7
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #7
  %4 = fsub <2 x double> %0, %2
  %5 = fmul <2 x double> %4, %4
  %6 = fmul <2 x double> %5, %5
  %7 = fmul <2 x double> %6, %6
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <2 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <2 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #7
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <2 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #7
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %5, <2 x double> %9, <2 x double> %10) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <2 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <2 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %5, <2 x double> %12, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> %11, <2 x double> %14) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %8, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %4, <2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %18, %24
  %26 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 1023>
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 1.024000e+03, double 1.024000e+03>, i8 29) #7
  %34 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -2.000000e+03, double -2.000000e+03>, i8 17) #7
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = bitcast <2 x double> %34 to <2 x i64>
  %38 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %39 = and <2 x i64> %38, %37
  %40 = bitcast <2 x i64> %39 to <2 x double>
  ret <2 x double> %40
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #7
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #7
  %4 = fsub <2 x double> %0, %2
  %5 = fmul <2 x double> %4, %4
  %6 = fmul <2 x double> %5, %5
  %7 = fmul <2 x double> %6, %6
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <2 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <2 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #7
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <2 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #7
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %5, <2 x double> %9, <2 x double> %10) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <2 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <2 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %5, <2 x double> %12, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> %11, <2 x double> %14) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %8, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %4, <2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %18, %24
  %26 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 1023>
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 1.024000e+03, double 1.024000e+03>, i8 29) #7
  %34 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -2.000000e+03, double -2.000000e+03>, i8 17) #7
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = bitcast <2 x double> %34 to <2 x i64>
  %38 = xor <2 x i64> %36, <i64 -1, i64 -1>
  %39 = and <2 x i64> %38, %37
  %40 = bitcast <2 x i64> %39 to <2 x double>
  ret <2 x double> %40
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #7
  %5 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <2 x double> %0) #7
  %6 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <2 x double> %5) #7
  %7 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <2 x double> %6, <2 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>) #7
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %6, <2 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %8, <2 x double> %6, <2 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154>) #7
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> %6, <2 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #7
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %6, <2 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %6, <2 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %6, <2 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %6, <2 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %6, <2 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %6, <2 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %6, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %18 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %19 = add <4 x i32> %18, <i32 1023, i32 1023, i32 undef, i32 1023>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %21 = and <4 x i32> %20, <i32 0, i32 -1, i32 0, i32 -1>
  %22 = shl <4 x i32> %21, <i32 20, i32 20, i32 20, i32 20>
  %23 = bitcast <4 x i32> %22 to <2 x double>
  %24 = fmul <2 x double> %17, %23
  %25 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 1023>
  %26 = sub <4 x i32> %25, %18
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %28 = and <4 x i32> %27, <i32 0, i32 -1, i32 0, i32 -1>
  %29 = shl <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %30 = bitcast <4 x i32> %29 to <2 x double>
  %31 = fmul <2 x double> %24, %30
  %32 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %31, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -3.500000e+02, double -3.500000e+02>, i8 17) #7
  %35 = bitcast <2 x double> %34 to <2 x i64>
  %36 = bitcast <2 x double> %33 to <2 x i64>
  %37 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %38 = and <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <2 x double>
  ret <2 x double> %39
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #7
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #7
  %5 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <2 x double> %0) #7
  %6 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %3, <2 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <2 x double> %5) #7
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %7, %7
  %9 = fmul <2 x double> %8, %8
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>, <2 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #7
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <2 x double> %10) #7
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154>, <2 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #7
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>, <2 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %12, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>, <2 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78>, <2 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %8, <2 x double> %14, <2 x double> %17) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> %11, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %6, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %21 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %22 = add <4 x i32> %21, <i32 1023, i32 1023, i32 undef, i32 1023>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %24 = and <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %25 = shl <4 x i32> %24, <i32 20, i32 20, i32 20, i32 20>
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = fmul <2 x double> %20, %26
  %28 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 1023>
  %29 = sub <4 x i32> %28, %21
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %31 = and <4 x i32> %30, <i32 0, i32 -1, i32 0, i32 -1>
  %32 = shl <4 x i32> %31, <i32 20, i32 20, i32 20, i32 20>
  %33 = bitcast <4 x i32> %32 to <2 x double>
  %34 = fmul <2 x double> %27, %33
  %35 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #7
  %36 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %34, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -3.500000e+02, double -3.500000e+02>, i8 17) #7
  %38 = bitcast <2 x double> %37 to <2 x i64>
  %39 = bitcast <2 x double> %36 to <2 x i64>
  %40 = xor <2 x i64> %38, <i64 -1, i64 -1>
  %41 = and <2 x i64> %40, %39
  %42 = bitcast <2 x i64> %41 to <2 x double>
  ret <2 x double> %42
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expm1d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, zeroinitializer
  %3 = fmul <2 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %3, i32 8) #7
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %4) #7
  %6 = fmul <2 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <2 x double> %6, %0
  %8 = fsub <2 x double> %7, %0
  %9 = fsub <2 x double> %7, %8
  %10 = fsub <2 x double> %0, %9
  %11 = fsub <2 x double> %6, %8
  %12 = fadd <2 x double> %11, %10
  %13 = fadd <2 x double> %12, zeroinitializer
  %14 = fmul <2 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <2 x double> %14, %7
  %16 = fsub <2 x double> %15, %7
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %7, %17
  %19 = fsub <2 x double> %14, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fadd <2 x double> %20, %13
  %22 = fmul <2 x double> %15, %15
  %23 = fadd <2 x double> %15, %15
  %24 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %15, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %21, <2 x double> %25) #7
  %27 = fmul <2 x double> %22, %22
  %28 = fadd <2 x double> %22, %22
  %29 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %22, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %26, <2 x double> %30) #7
  %32 = fmul <2 x double> %27, %27
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %34, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %36, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %33, <2 x double> %40) #7
  %42 = fmul <2 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %44) #7
  %46 = fadd <2 x double> %42, <double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <2 x double> %42, %47
  %49 = fadd <2 x double> %48, %45
  %50 = fmul <2 x double> %15, %46
  %51 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %15, <2 x double> %51) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %15, <2 x double> %52) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %21, <2 x double> %53) #7
  %55 = fadd <2 x double> %50, <double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <2 x double> %50, %56
  %58 = fadd <2 x double> %57, %54
  %59 = fmul <2 x double> %15, %55
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %15, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %15, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %21, <2 x double> %62) #7
  %64 = fadd <2 x double> %59, <double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <2 x double> %59, %65
  %67 = fadd <2 x double> %66, %63
  %68 = fmul <2 x double> %27, %41
  %69 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %41, <2 x double> %69) #7
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %41, <2 x double> %70) #7
  %72 = fadd <2 x double> %64, %68
  %73 = fsub <2 x double> %64, %72
  %74 = fadd <2 x double> %68, %73
  %75 = fadd <2 x double> %74, %67
  %76 = fadd <2 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add <4 x i32> %77, <i32 1023, i32 1023, i32 undef, i32 1023>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %80 = and <4 x i32> %79, <i32 0, i32 -1, i32 0, i32 -1>
  %81 = shl <4 x i32> %80, <i32 20, i32 20, i32 20, i32 20>
  %82 = bitcast <4 x i32> %81 to <2 x double>
  %83 = fmul <2 x double> %72, %82
  %84 = add <4 x i32> %5, <i32 1023, i32 1023, i32 undef, i32 1023>
  %85 = sub <4 x i32> %84, %77
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %87 = and <4 x i32> %86, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <4 x i32> %88 to <2 x double>
  %90 = fmul <2 x double> %83, %89
  %91 = fmul <2 x double> %76, %82
  %92 = fmul <2 x double> %91, %89
  %93 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %94 = bitcast <2 x double> %93 to <2 x i64>
  %95 = bitcast <2 x double> %90 to <2 x i64>
  %96 = xor <2 x i64> %94, <i64 -1, i64 -1>
  %97 = and <2 x i64> %96, %95
  %98 = bitcast <2 x double> %92 to <2 x i64>
  %99 = and <2 x i64> %98, %96
  %100 = bitcast <2 x i64> %97 to <2 x double>
  %101 = bitcast <2 x i64> %99 to <2 x double>
  %102 = fadd <2 x double> %100, <double -1.000000e+00, double -1.000000e+00>
  %103 = fsub <2 x double> %102, %100
  %104 = fsub <2 x double> %102, %103
  %105 = fsub <2 x double> %100, %104
  %106 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %103
  %107 = fadd <2 x double> %106, %105
  %108 = fadd <2 x double> %107, %101
  %109 = fadd <2 x double> %102, %108
  %110 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #7
  %111 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #7
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %111, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %112) #7
  %114 = bitcast <2 x double> %0 to <2 x i64>
  %115 = icmp eq <2 x i64> %114, <i64 -9223372036854775808, i64 -9223372036854775808>
  %116 = sext <2 x i1> %115 to <2 x i64>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %113, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %117) #7
  ret <2 x double> %118
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log10d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <2 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <2 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <2 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %58, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <2 x double> %58, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <2 x double> %58, <2 x double> %61) #7
  %63 = fmul <2 x double> %38, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %64 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %63
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <2 x double> %66) #7
  %68 = fadd <2 x double> %59, %63
  %69 = fsub <2 x double> %59, %68
  %70 = fadd <2 x double> %63, %69
  %71 = fadd <2 x double> %62, %70
  %72 = fadd <2 x double> %67, %71
  %73 = fmul <2 x double> %38, %47
  %74 = fmul <2 x double> %55, %73
  %75 = fadd <2 x double> %68, %74
  %76 = fsub <2 x double> %68, %75
  %77 = fadd <2 x double> %74, %76
  %78 = fadd <2 x double> %77, %72
  %79 = fadd <2 x double> %75, %78
  %80 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %81 = sext <2 x i1> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %79, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %82) #7
  %84 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %85 = fcmp uno <2 x double> %4, zeroinitializer
  %86 = select <2 x i1> %85, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %84
  %87 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %83, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %86) #7
  %88 = fcmp oeq <2 x double> %4, zeroinitializer
  %89 = sext <2 x i1> %88 to <2 x i64>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %90) #7
  ret <2 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <2 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <2 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <2 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %38, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <2 x double> %62) #7
  %64 = fadd <2 x double> %59, %58
  %65 = fsub <2 x double> %64, %58
  %66 = fsub <2 x double> %64, %65
  %67 = fsub <2 x double> %58, %66
  %68 = fsub <2 x double> %59, %65
  %69 = fadd <2 x double> %68, %67
  %70 = fadd <2 x double> %63, %69
  %71 = fmul <2 x double> %38, %47
  %72 = fmul <2 x double> %55, %71
  %73 = fadd <2 x double> %64, %72
  %74 = fsub <2 x double> %73, %64
  %75 = fsub <2 x double> %73, %74
  %76 = fsub <2 x double> %64, %75
  %77 = fsub <2 x double> %72, %74
  %78 = fadd <2 x double> %77, %76
  %79 = fadd <2 x double> %70, %78
  %80 = fadd <2 x double> %73, %79
  %81 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %80, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %83) #7
  %85 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %86 = fcmp uno <2 x double> %4, zeroinitializer
  %87 = select <2 x i1> %86, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %85
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %87) #7
  %89 = fcmp oeq <2 x double> %4, zeroinitializer
  %90 = sext <2 x i1> %89 to <2 x i64>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %88, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %91) #7
  ret <2 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %27 = fdiv <2 x double> %25, %26
  %28 = fmul <2 x double> %27, %27
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <2 x double> %28, <2 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %28, <2 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %28, <2 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %28, <2 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %28, <2 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %28, <2 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %35 = bitcast <16 x i8> %24 to <4 x i32>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %27, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %39) #7
  %41 = fadd <2 x double> %38, %37
  %42 = fsub <2 x double> %37, %41
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = fmul <2 x double> %27, %28
  %46 = fadd <2 x double> %41, %44
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %45, <2 x double> %46) #7
  %48 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %49 = sext <2 x i1> %48 to <2 x i64>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %53 = fcmp uno <2 x double> %4, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %54) #7
  %56 = fcmp oeq <2 x double> %4, zeroinitializer
  %57 = sext <2 x i1> %56 to <2 x i64>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %55, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %58) #7
  ret <2 x double> %59
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log1pd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %2, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %4 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %4, <2 x double> %3) #7
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 2047, i32 2047>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = add <4 x i32> %15, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> %17, <2 x double> %18) #7
  %20 = bitcast <2 x double> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %23 = bitcast <4 x i32> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #7
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %29 = sitofp <2 x i32> %28 to <2 x double>
  %30 = fmul <2 x double> %29, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %29, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %29, <2 x double> %32) #7
  %34 = fadd <2 x double> %19, <double 2.000000e+00, double 2.000000e+00>
  %35 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %34
  %36 = fadd <2 x double> %19, %35
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %34
  %38 = fmul <2 x double> %19, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %19, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %34
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> zeroinitializer, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <2 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <2 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <2 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = fmul <2 x double> %38, <double 2.000000e+00, double 2.000000e+00>
  %57 = fmul <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %58 = fadd <2 x double> %56, %30
  %59 = fsub <2 x double> %30, %58
  %60 = fadd <2 x double> %56, %59
  %61 = fadd <2 x double> %33, %60
  %62 = fadd <2 x double> %61, %57
  %63 = fmul <2 x double> %38, %47
  %64 = fmul <2 x double> %63, %55
  %65 = fadd <2 x double> %58, %64
  %66 = fsub <2 x double> %58, %65
  %67 = fadd <2 x double> %64, %66
  %68 = fadd <2 x double> %62, %67
  %69 = fadd <2 x double> %65, %68
  %70 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #7
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %70) #7
  %72 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -1.000000e+00, double -1.000000e+00>, i8 17) #7
  %73 = fcmp uno <2 x double> %0, zeroinitializer
  %74 = select <2 x i1> %73, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %72
  %75 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %71, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %74) #7
  %76 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %78) #7
  %80 = bitcast <2 x double> %0 to <2 x i64>
  %81 = icmp eq <2 x i64> %80, <i64 -9223372036854775808, i64 -9223372036854775808>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %79, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %83) #7
  ret <2 x double> %84
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_fabsd2_avx2128(<2 x double>) local_unnamed_addr #3 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_copysignd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmaxd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #7
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmind2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #7
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fdimd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> zeroinitializer, i8 17) #7
  %5 = fcmp oeq <2 x double> %0, %1
  %6 = select <2 x i1> %5, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %4
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> zeroinitializer, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_truncd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_floord2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #7
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> zeroinitializer, i8 17) #7
  %13 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %13, <2 x double> %12) #7
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %17, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %20 = fsub <2 x double> %0, %14
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807>
  %23 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = or <2 x i64> %22, %23
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = select <2 x i1> %18, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %19
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %0, <2 x double> %26) #7
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_ceild2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #7
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> zeroinitializer, i8 18) #7
  %13 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %11, <2 x double> %12) #7
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %17, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %20 = fsub <2 x double> %0, %14
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807>
  %23 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = or <2 x i64> %22, %23
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = select <2 x i1> %18, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %19
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %0, <2 x double> %26) #7
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_roundd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #7
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %2, <2 x double> zeroinitializer, i8 18) #7
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %16 = select <2 x i1> %14, <2 x double> %13, <2 x double> zeroinitializer
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %12, <2 x double> zeroinitializer, i8 17) #7
  %19 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %19, <2 x double> %18) #7
  %21 = fcmp oeq <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> zeroinitializer, <2 x double> %23) #7
  %25 = bitcast <2 x double> %0 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fcmp oeq <2 x double> %27, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %29 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %27, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %30 = fsub <2 x double> %24, %20
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 9223372036854775807, i64 9223372036854775807>
  %33 = and <2 x i64> %25, <i64 -9223372036854775808, i64 -9223372036854775808>
  %34 = or <2 x i64> %32, %33
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = select <2 x i1> %28, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %29
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> %0, <2 x double> %36) #7
  ret <2 x double> %37
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_rintd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #7
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_nextafterd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = bitcast <2 x i64> %4 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #7
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = ashr <2 x i64> %10, <i64 63, i64 63>
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %1, <2 x double> %9, i8 29) #7
  %13 = bitcast <2 x double> %12 to <2 x i64>
  %14 = xor <2 x i64> %11, %13
  %15 = bitcast <2 x double> %9 to <4 x i32>
  %16 = xor <4 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <4 x i32> %16, <i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <4 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 1, i64 1>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %24 = bitcast <4 x float> %23 to <4 x i32>
  %25 = add <4 x i32> %17, %24
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = bitcast <2 x i64> %14 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %26, <2 x double> %27) #7
  %29 = fcmp une <2 x double> %9, %1
  %30 = sext <2 x i1> %29 to <2 x i64>
  %31 = bitcast <2 x double> %28 to <4 x i32>
  %32 = bitcast <2 x i64> %30 to <4 x i32>
  %33 = and <4 x i32> %32, <i32 1, i32 0, i32 1, i32 0>
  %34 = sub <4 x i32> %31, %33
  %35 = icmp eq <4 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 4294967295, i64 4294967295>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %41 = bitcast <4 x float> %40 to <4 x i32>
  %42 = add <4 x i32> %34, %41
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = bitcast <4 x i32> %34 to <2 x double>
  %45 = bitcast <2 x i64> %30 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %43, <2 x double> %45) #7
  %47 = bitcast <2 x double> %46 to <4 x i32>
  %48 = xor <4 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <4 x i32> %48, <i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 1, i64 1>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = bitcast <4 x float> %55 to <4 x i32>
  %57 = add <4 x i32> %49, %56
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> %58, <2 x double> %27) #7
  %60 = fcmp oeq <2 x double> %59, zeroinitializer
  %61 = fcmp une <2 x double> %9, zeroinitializer
  %62 = and <2 x i1> %60, %61
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = bitcast <2 x i64> %63 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> %65, <2 x double> %66) #7
  %68 = fcmp oeq <2 x double> %9, zeroinitializer
  %69 = fcmp oeq <2 x double> %1, zeroinitializer
  %70 = and <2 x i1> %68, %69
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> %1, <2 x double> %72) #7
  %74 = fcmp uno <2 x double> %9, %1
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #7
  ret <2 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_frfrexpd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <2 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <2 x i64> %10 to <2 x double>
  %12 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <2 x i1> %14 to <2 x i64>
  %16 = and <2 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <2 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = bitcast <2 x i64> %15 to <2 x double>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %18, <2 x double> %19) #7
  %21 = fcmp oeq <2 x double> %7, zeroinitializer
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %20, <2 x double> %7, <2 x double> %23) #7
  ret <2 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = bitcast <2 x double> %7 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 2047, i32 2047>
  %13 = add nsw <4 x i32> %12, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %14 = fcmp ueq <2 x double> %7, zeroinitializer
  %15 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %18 = or <2 x i1> %17, %14
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = bitcast <4 x i32> %13 to <16 x i8>
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> zeroinitializer, <16 x i8> %21) #7
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  ret <2 x i64> %23
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmad2_avx2128(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #0 {
  %4 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> %1, <2 x double> %2) #7
  ret <2 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u05avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %3 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %2) #7
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <2 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> %5, <2 x double> %4) #7
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x37F0000000000000, double 0x37F0000000000000>, <2 x double> %4) #7
  %8 = bitcast <2 x double> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %10 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <4 x i32> %10 to <2 x double>
  %12 = fmul <2 x double> %6, %11
  %13 = fmul <2 x double> %11, <double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %13, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %15, <2 x double> %12) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %15, <2 x double> %13) #7
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %17, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %19, <2 x double> %16) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %19, <2 x double> %17) #7
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %23, <2 x double> %20) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %23, <2 x double> %21) #7
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %25, <2 x double> <double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <2 x double> %25, %25
  %29 = fmul <2 x double> %28, %27
  %30 = fmul <2 x double> %6, %29
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %6, <2 x double> %31) #7
  %33 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %30, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %32, <2 x double> %34) #7
  %36 = fmul <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %36, <2 x double> %35, <2 x double> %32) #7
  %38 = fadd <2 x double> %30, %37
  %39 = fmul <2 x double> %7, %38
  %40 = fcmp oeq <2 x double> %6, zeroinitializer
  %41 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <2 x i1> %41, %40
  %43 = sext <2 x i1> %42 to <2 x i64>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %6, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %6, <2 x double> zeroinitializer, i8 17) #7
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %46) #7
  ret <2 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %0) #7
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %3 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %2) #7
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <2 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> %5, <2 x double> %4) #7
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x37F0000000000000, double 0x37F0000000000000>, <2 x double> %4) #7
  %8 = bitcast <2 x double> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %10 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <4 x i32> %10 to <2 x double>
  %12 = fmul <2 x double> %6, %11
  %13 = fmul <2 x double> %11, <double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %13, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %15, <2 x double> %12) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %15, <2 x double> %13) #7
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %17, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %19, <2 x double> %16) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %19, <2 x double> %17) #7
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %23, <2 x double> %20) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %23, <2 x double> %21) #7
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %25, <2 x double> <double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <2 x double> %25, %25
  %29 = fmul <2 x double> %28, %27
  %30 = fmul <2 x double> %6, %29
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %6, <2 x double> %31) #7
  %33 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %30, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %32, <2 x double> %34) #7
  %36 = fmul <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %36, <2 x double> %35, <2 x double> %32) #7
  %38 = fadd <2 x double> %30, %37
  %39 = fmul <2 x double> %7, %38
  %40 = fcmp oeq <2 x double> %6, zeroinitializer
  %41 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <2 x i1> %41, %40
  %43 = sext <2 x i1> %42 to <2 x i64>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %6, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %6, <2 x double> zeroinitializer, i8 17) #7
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %46) #7
  ret <2 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u05avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #7
  %11 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %10, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %12 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %12, <2 x double> %11) #7
  %14 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %11) #7
  %16 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <2 x double> %13, %16
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %13, <2 x double> %18) #7
  %20 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %16, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %16, <2 x double> %21) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> zeroinitializer, <2 x double> %16, <2 x double> %19) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %22, <2 x double> %23) #7
  %25 = fmul <2 x double> %17, %17
  %26 = fadd <2 x double> %17, %17
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %17, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <2 x double> %30, %25
  %32 = fsub <2 x double> %30, %31
  %33 = fsub <2 x double> %25, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <2 x double> %34, %33
  %36 = fadd <2 x double> %29, %35
  %37 = fadd <2 x double> %30, %36
  %38 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %37) #7
  %39 = fmul <2 x double> %38, %38
  %40 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %38, <2 x double> %40) #7
  %42 = fadd <2 x double> %30, %39
  %43 = fsub <2 x double> %42, %30
  %44 = fsub <2 x double> %42, %43
  %45 = fsub <2 x double> %30, %44
  %46 = fsub <2 x double> %39, %43
  %47 = fadd <2 x double> %46, %45
  %48 = fadd <2 x double> %41, %36
  %49 = fadd <2 x double> %48, %47
  %50 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %50, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %53 = fmul <2 x double> %50, %52
  %54 = fmul <2 x double> %50, %42
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %50, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %50, <2 x double> %56) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %53, <2 x double> %57) #7
  %59 = fmul <2 x double> %54, <double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <2 x double> %10, %59
  %62 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %10, <2 x double> %62) #7
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %10, <2 x double> %63) #7
  %65 = fadd <2 x double> %61, %64
  %66 = fcmp uno <2 x double> %65, zeroinitializer
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %65, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %68) #7
  %70 = fcmp oeq <2 x double> %9, zeroinitializer
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> %10, <2 x double> %72) #7
  %74 = fcmp uno <2 x double> %8, %5
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #7
  %78 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <2 x i1> %79, %78
  %81 = sext <2 x i1> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %82) #7
  ret <2 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u35avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #7
  %11 = fdiv <2 x double> %9, %10
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %11, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %12) #7
  %14 = fmul <2 x double> %10, %13
  %15 = fcmp oeq <2 x double> %9, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i64>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %10, <2 x double> %17) #7
  %19 = fcmp uno <2 x double> %8, %5
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %21) #7
  %23 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <2 x i1> %24, %23
  %26 = sext <2 x i1> %25 to <2 x i64>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %27) #7
  ret <2 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmodd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %8, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %10 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %10, <2 x double> %9) #7
  %12 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %12, <2 x double> %9) #7
  %14 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <2 x double> %14 to <2 x i64>
  %16 = add <2 x i64> %15, <i64 -1, i64 -1>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %14, zeroinitializer
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> zeroinitializer, <2 x double> %20) #7
  %22 = fmul <2 x double> %13, <double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <2 x double> %13, %13
  %24 = bitcast <2 x double> %13 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %70, %27 ]
  %29 = phi <2 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <2 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = add <2 x i64> %31, <i64 -1, i64 -1>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fcmp oeq <2 x double> %30, zeroinitializer
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> zeroinitializer, <2 x double> %36) #7
  %38 = fmul <2 x double> %21, %37
  %39 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %38, i32 11) #7
  %40 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %22, <2 x double> %30, i8 30) #7
  %41 = bitcast <2 x double> %40 to <2 x i64>
  %42 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %13, i8 29) #7
  %43 = bitcast <2 x double> %42 to <2 x i64>
  %44 = and <2 x i64> %43, %41
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %45) #7
  %47 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %23, <2 x double> %30, i8 30) #7
  %48 = bitcast <2 x double> %47 to <2 x i64>
  %49 = and <2 x i64> %48, %43
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %50) #7
  %52 = fmul <2 x double> %51, %26
  %53 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %26, <2 x double> %53) #7
  %55 = fadd <2 x double> %30, %52
  %56 = fsub <2 x double> %55, %30
  %57 = fsub <2 x double> %55, %56
  %58 = fsub <2 x double> %30, %57
  %59 = fsub <2 x double> %52, %56
  %60 = fadd <2 x double> %59, %58
  %61 = fadd <2 x double> %29, %54
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %55, %62
  %64 = fsub <2 x double> %55, %63
  %65 = fadd <2 x double> %62, %64
  %66 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %63, <2 x double> %13, i8 17) #7
  %67 = bitcast <2 x double> %66 to <16 x i8>
  %68 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %67) #7
  %69 = icmp ne i32 %68, 65535
  %70 = add nuw nsw i32 %28, 1
  %71 = icmp ult i32 %70, 21
  %72 = and i1 %69, %71
  br i1 %72, label %27, label %73

; <label>:73:                                     ; preds = %27
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %9) #7
  %75 = fmul <2 x double> %74, %63
  %76 = fadd <2 x double> %63, %65
  %77 = fcmp oeq <2 x double> %76, %13
  %78 = sext <2 x i1> %77 to <2 x i64>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> zeroinitializer, <2 x double> %79) #7
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = xor <2 x i64> %82, %81
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> %13, i8 17) #7
  %86 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> %0, <2 x double> %85) #7
  %87 = fcmp oeq <2 x double> %13, zeroinitializer
  %88 = sext <2 x i1> %87 to <2 x i64>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %86, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %89) #7
  ret <2 x double> %90
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_remainderd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %8, <2 x double> <double 0x20000000000000, double 0x20000000000000>, i8 17) #7
  %10 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %10, <2 x double> %9) #7
  %12 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %12, <2 x double> %9) #7
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %9) #7
  %15 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <2 x double> %13, <double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <2 x double> %13, <double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <2 x double> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  br label %21

; <label>:21:                                     ; preds = %2, %46
  %22 = phi i32 [ 0, %2 ], [ %78, %46 ]
  %23 = phi <2 x i64> [ zeroinitializer, %2 ], [ %63, %46 ]
  %24 = phi <2 x double> [ zeroinitializer, %2 ], [ %77, %46 ]
  %25 = phi <2 x double> [ %11, %2 ], [ %75, %46 ]
  %26 = fmul <2 x double> %15, %25
  %27 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %26, i32 8) #7
  %28 = bitcast <2 x double> %25 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %16, i8 17) #7
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %27, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %17, i8 17) #7
  %34 = bitcast <2 x double> %33 to <2 x i64>
  %35 = fcmp oeq <2 x double> %17, %30
  %36 = xor <2 x i64> %23, <i64 -1, i64 -1>
  %37 = select <2 x i1> %35, <2 x i64> %36, <2 x i64> zeroinitializer
  %38 = or <2 x i64> %37, %34
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> zeroinitializer, <2 x double> %39) #7
  %41 = fcmp oeq <2 x double> %40, zeroinitializer
  %42 = sext <2 x i1> %41 to <2 x i64>
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %43) #7
  %45 = icmp eq i32 %44, 65535
  br i1 %45, label %80, label %46

; <label>:46:                                     ; preds = %21
  %47 = fmul <2 x double> %40, %20
  %48 = bitcast <2 x double> %47 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 9223372036854775807, i64 9223372036854775807>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fcmp oeq <2 x double> %50, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %52 = sext <2 x i1> %51 to <2 x i64>
  %53 = and <2 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808>
  %54 = xor <2 x i64> %53, <i64 -4616189618054758400, i64 -4616189618054758400>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fadd <2 x double> %40, %55
  %57 = bitcast <2 x i64> %52 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %40, <2 x double> %56, <2 x double> %57) #7
  %59 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %60 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %59, i32 11) #7
  %61 = fcmp une <2 x double> %60, %59
  %62 = sext <2 x i1> %61 to <2 x i64>
  %63 = xor <2 x i64> %23, %62
  %64 = fmul <2 x double> %58, %20
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %20, <2 x double> %65) #7
  %67 = fadd <2 x double> %25, %64
  %68 = fsub <2 x double> %67, %25
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %25, %69
  %71 = fsub <2 x double> %64, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %24, %66
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %67, %74
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %74, %76
  %78 = add nuw nsw i32 %22, 1
  %79 = icmp ult i32 %78, 21
  br i1 %79, label %21, label %80

; <label>:80:                                     ; preds = %21, %46
  %81 = phi <2 x double> [ %25, %21 ], [ %75, %46 ]
  %82 = fmul <2 x double> %14, %81
  %83 = bitcast <2 x double> %82 to <2 x i64>
  %84 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = xor <2 x i64> %84, %83
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %88 = sext <2 x i1> %87 to <2 x i64>
  %89 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <2 x i1> %89 to <2 x i64>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %91) #7
  %93 = bitcast <2 x i64> %88 to <2 x double>
  %94 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %86, <2 x double> %92, <2 x double> %93) #7
  %95 = fcmp oeq <2 x double> %13, zeroinitializer
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %97) #7
  ret <2 x double> %98
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_tgammad2_u10avx2128(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <2 x double>, <2 x double>* %4, align 16
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <2 x double>, <2 x double>* %6, align 16
  %8 = fadd <2 x double> %5, %7
  %9 = fmul <2 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %9, i32 8) #7
  %11 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %10) #7
  %12 = fmul <2 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <2 x double> %5, %12
  %14 = fsub <2 x double> %13, %5
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> %5, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fadd <2 x double> %7, %18
  %20 = fmul <2 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <2 x double> %20, %13
  %22 = fsub <2 x double> %21, %13
  %23 = fsub <2 x double> %21, %22
  %24 = fsub <2 x double> %13, %23
  %25 = fsub <2 x double> %20, %22
  %26 = fadd <2 x double> %25, %24
  %27 = fadd <2 x double> %26, %19
  %28 = fmul <2 x double> %21, %21
  %29 = fadd <2 x double> %21, %21
  %30 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %21, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %27, <2 x double> %31) #7
  %33 = fmul <2 x double> %28, %28
  %34 = fadd <2 x double> %28, %28
  %35 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %28, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %32, <2 x double> %36) #7
  %38 = fmul <2 x double> %33, %33
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %43, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %42, <2 x double> %45) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %39, <2 x double> %46) #7
  %48 = fmul <2 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %50) #7
  %52 = fadd <2 x double> %48, <double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <2 x double> %48, %53
  %55 = fadd <2 x double> %54, %51
  %56 = fmul <2 x double> %21, %52
  %57 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %21, <2 x double> %57) #7
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %21, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %27, <2 x double> %59) #7
  %61 = fadd <2 x double> %56, <double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <2 x double> %56, %62
  %64 = fadd <2 x double> %63, %60
  %65 = fmul <2 x double> %21, %61
  %66 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %21, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %21, <2 x double> %67) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %27, <2 x double> %68) #7
  %70 = fadd <2 x double> %65, <double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <2 x double> %65, %71
  %73 = fadd <2 x double> %72, %69
  %74 = fmul <2 x double> %33, %47
  %75 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %47, <2 x double> %75) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %47, <2 x double> %76) #7
  %78 = fadd <2 x double> %70, %74
  %79 = fsub <2 x double> %70, %78
  %80 = fadd <2 x double> %74, %79
  %81 = fadd <2 x double> %80, %73
  %82 = fadd <2 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add <4 x i32> %83, <i32 1023, i32 1023, i32 undef, i32 1023>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %86 = and <4 x i32> %85, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %87 to <2 x double>
  %89 = fmul <2 x double> %78, %88
  %90 = add <4 x i32> %11, <i32 1023, i32 1023, i32 undef, i32 1023>
  %91 = sub <4 x i32> %90, %83
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %93 = and <4 x i32> %92, <i32 0, i32 -1, i32 0, i32 -1>
  %94 = shl <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = bitcast <4 x i32> %94 to <2 x double>
  %96 = fmul <2 x double> %89, %95
  %97 = fmul <2 x double> %82, %88
  %98 = fmul <2 x double> %97, %95
  %99 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %100 = bitcast <2 x double> %99 to <2 x i64>
  %101 = bitcast <2 x double> %96 to <2 x i64>
  %102 = xor <2 x i64> %100, <i64 -1, i64 -1>
  %103 = and <2 x i64> %102, %101
  %104 = bitcast <2 x double> %98 to <2 x i64>
  %105 = and <2 x i64> %104, %102
  %106 = bitcast <2 x i64> %103 to <2 x double>
  %107 = bitcast <2 x i64> %105 to <2 x double>
  %108 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %109 = load <2 x double>, <2 x double>* %108, align 16
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %111 = load <2 x double>, <2 x double>* %110, align 16
  %112 = fmul <2 x double> %109, %106
  %113 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %109, <2 x double> %113) #7
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> %109, <2 x double> %114) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %111, <2 x double> %115) #7
  %117 = fadd <2 x double> %112, %116
  %118 = fcmp oeq <2 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000>
  %119 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %120 = bitcast <2 x double> %119 to <2 x i64>
  %121 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  %122 = fcmp oeq <2 x double> %121, %0
  %123 = select <2 x i1> %122, <2 x i64> %120, <2 x i64> zeroinitializer
  %124 = select <2 x i1> %118, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %123
  %125 = bitcast <2 x double> %0 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 9223372036854775807, i64 9223372036854775807>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = fcmp une <2 x double> %127, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %129 = fcmp ord <2 x double> %0, zeroinitializer
  %130 = and <2 x i1> %128, %129
  %131 = fcmp uno <2 x double> %117, zeroinitializer
  %132 = and <2 x i1> %131, %130
  %133 = select <2 x i1> %132, <2 x i64> %120, <2 x i64> zeroinitializer
  %134 = or <2 x i64> %124, %133
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %135) #7
  %137 = fcmp oeq <2 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %138 = or <2 x i1> %130, %137
  %139 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x8010000000000000, double 0x8010000000000000>, i8 29) #7
  %140 = bitcast <2 x double> %139 to <2 x i64>
  %141 = select <2 x i1> %138, <2 x i64> %140, <2 x i64> zeroinitializer
  %142 = fcmp oeq <2 x double> %0, zeroinitializer
  %143 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 2.000000e+02, double 2.000000e+02>, i8 30) #7
  %144 = bitcast <2 x double> %143 to <2 x i64>
  %145 = fcmp uno <2 x double> %136, zeroinitializer
  %146 = or <2 x i1> %145, %142
  %147 = select <2 x i1> %146, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %144
  %148 = and <2 x i64> %147, %141
  %149 = and <2 x i64> %125, <i64 -9223372036854775808, i64 -9223372036854775808>
  %150 = or <2 x i64> %149, <i64 9218868437227405312, i64 9218868437227405312>
  %151 = bitcast <2 x i64> %150 to <2 x double>
  %152 = bitcast <2 x i64> %148 to <2 x double>
  %153 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %136, <2 x double> %151, <2 x double> %152) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #7
  ret <2 x double> %153
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, <2 x double>) unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double 1.000000e-306, double 1.000000e-306>, i8 17) #7
  %7 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %1, <2 x double> <double 5.000000e-01, double 5.000000e-01>, i8 17) #7
  %8 = xor <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = fadd <2 x double> %9, <double 1.000000e+00, double 1.000000e+00>
  %11 = fadd <2 x double> %10, <double -1.000000e+00, double -1.000000e+00>
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %10, <2 x double> %7) #7
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %15, <2 x double> %7) #7
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %16, <2 x double> zeroinitializer, <2 x double> %6) #7
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> zeroinitializer, <2 x double> %6) #7
  %20 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %18, i8 18) #7
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %18, <2 x double> <double 1.100000e+00, double 1.100000e+00>, i8 18) #7
  %23 = bitcast <2 x double> %22 to <2 x i64>
  %24 = and <2 x i64> %23, %21
  %25 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> <double 2.300000e+00, double 2.300000e+00>, <2 x double> %18, i8 18) #7
  %26 = bitcast <2 x double> %25 to <2 x i64>
  %27 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %28 = fsub <2 x double> %27, %18
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> %18, %29
  %31 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, %32
  %34 = fmul <2 x double> %18, %27
  %35 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %34
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %18, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %18, <2 x double> %36) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %19, <2 x double> %37) #7
  %39 = fadd <2 x double> %34, %38
  %40 = fsub <2 x double> %34, %39
  %41 = fadd <2 x double> %38, %40
  %42 = fadd <2 x double> %18, <double 2.000000e+00, double 2.000000e+00>
  %43 = fsub <2 x double> %42, %18
  %44 = fsub <2 x double> %42, %43
  %45 = fsub <2 x double> %18, %44
  %46 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %43
  %47 = fadd <2 x double> %46, %45
  %48 = fadd <2 x double> %19, %47
  %49 = fmul <2 x double> %42, %39
  %50 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %39, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %39, <2 x double> %51) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %41, <2 x double> %52) #7
  %54 = fadd <2 x double> %49, %53
  %55 = fsub <2 x double> %49, %54
  %56 = fadd <2 x double> %53, %55
  %57 = fadd <2 x double> %18, <double 3.000000e+00, double 3.000000e+00>
  %58 = fsub <2 x double> %57, %18
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> %18, %59
  %61 = fsub <2 x double> <double 3.000000e+00, double 3.000000e+00>, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %19, %62
  %64 = fmul <2 x double> %57, %54
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %57, <2 x double> %54, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %54, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %57, <2 x double> %56, <2 x double> %67) #7
  %69 = fadd <2 x double> %64, %68
  %70 = fsub <2 x double> %64, %69
  %71 = fadd <2 x double> %68, %70
  %72 = fadd <2 x double> %18, <double 4.000000e+00, double 4.000000e+00>
  %73 = fsub <2 x double> %72, %18
  %74 = fsub <2 x double> %72, %73
  %75 = fsub <2 x double> %18, %74
  %76 = fsub <2 x double> <double 4.000000e+00, double 4.000000e+00>, %73
  %77 = fadd <2 x double> %76, %75
  %78 = fadd <2 x double> %19, %77
  %79 = fmul <2 x double> %72, %69
  %80 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %72, <2 x double> %69, <2 x double> %80) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %69, <2 x double> %81) #7
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %72, <2 x double> %71, <2 x double> %82) #7
  %84 = fadd <2 x double> %79, %83
  %85 = fsub <2 x double> %79, %84
  %86 = fadd <2 x double> %83, %85
  %87 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %18, <2 x double> <double 7.000000e+00, double 7.000000e+00>, i8 18) #7
  %88 = bitcast <2 x double> %87 to <2 x i64>
  %89 = and <2 x i64> %88, %26
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %84, <2 x double> %90) #7
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %86, <2 x double> %90) #7
  %93 = fadd <2 x double> %18, <double 5.000000e+00, double 5.000000e+00>
  %94 = fsub <2 x double> %93, %18
  %95 = fsub <2 x double> %93, %94
  %96 = fsub <2 x double> %18, %95
  %97 = fsub <2 x double> <double 5.000000e+00, double 5.000000e+00>, %94
  %98 = fadd <2 x double> %97, %96
  %99 = fadd <2 x double> %19, %98
  %100 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> %93, <2 x double> %90) #7
  %101 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> %99, <2 x double> %90) #7
  %102 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %100
  %103 = bitcast <2 x i64> %24 to <2 x double>
  %104 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -2.000000e+00, double -2.000000e+00>, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %103) #7
  %105 = fadd <2 x double> %100, %104
  %106 = fsub <2 x double> %105, %100
  %107 = fsub <2 x double> %105, %106
  %108 = fsub <2 x double> %100, %107
  %109 = fsub <2 x double> %104, %106
  %110 = fadd <2 x double> %109, %108
  %111 = fadd <2 x double> %101, %110
  %112 = fadd <2 x double> %105, %111
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %112, <2 x double> %102, <2 x double> %25) #7
  %114 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E72FDC6CB0D558F, double 0x3E72FDC6CB0D558F>, <2 x double> <double 0x403D7AAABC7A3EA1, double 0x403D7AAABC7A3EA1>, <2 x double> %103) #7
  %115 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %114, <2 x double> <double 0xC06399A52C414C0D, double 0xC06399A52C414C0D>, <2 x double> %25) #7
  %116 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E9AE7D44E1AB8F6, double 0x3E9AE7D44E1AB8F6>, <2 x double> <double 0x406004ABC79048B9, double 0x406004ABC79048B9>, <2 x double> %103) #7
  %117 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %116, <2 x double> <double 0x3FF1EED0A9756022, double 0x3FF1EED0A9756022>, <2 x double> %25) #7
  %118 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %115, <2 x double> %113, <2 x double> %117) #7
  %119 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB1734224875A66, double 0x3EB1734224875A66>, <2 x double> <double 0x40705C120870277A, double 0x40705C120870277A>, <2 x double> %103) #7
  %120 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %119, <2 x double> <double 0x402ACBC4BFE43E00, double 0x402ACBC4BFE43E00>, <2 x double> %25) #7
  %121 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> %113, <2 x double> %120) #7
  %122 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB94E4F6E12FEE0, double 0x3EB94E4F6E12FEE0>, <2 x double> <double 0x40748B3C8FCAD7FF, double 0x40748B3C8FCAD7FF>, <2 x double> %103) #7
  %123 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0xBFBDD5FA0E771B94, double 0xBFBDD5FA0E771B94>, <2 x double> %25) #7
  %124 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %121, <2 x double> %113, <2 x double> %123) #7
  %125 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB59C884A045AF0, double 0x3EB59C884A045AF0>, <2 x double> <double 0x40719D088C23DF05, double 0x40719D088C23DF05>, <2 x double> %103) #7
  %126 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %125, <2 x double> <double 0xBFF644D13921C967, double 0xBFF644D13921C967>, <2 x double> %25) #7
  %127 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %113, <2 x double> %126) #7
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E9FD66B0AC39DFF, double 0x3E9FD66B0AC39DFF>, <2 x double> <double 0x40659BBECDBF523B, double 0x40659BBECDBF523B>, <2 x double> %103) #7
  %129 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0x3F8ED5BD48E4F389, double 0x3F8ED5BD48E4F389>, <2 x double> %25) #7
  %130 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %127, <2 x double> %113, <2 x double> %129) #7
  %131 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE71986F7AC19AC9, double 0xBE71986F7AC19AC9>, <2 x double> <double 0x40535F30DE19A3FA, double 0x40535F30DE19A3FA>, <2 x double> %103) #7
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %131, <2 x double> <double 0x3FC6FB2BA98C8BC4, double 0x3FC6FB2BA98C8BC4>, <2 x double> %25) #7
  %133 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %130, <2 x double> %113, <2 x double> %132) #7
  %134 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE956718120CF4B7, double 0xBE956718120CF4B7>, <2 x double> <double 0x403920E9BAC7B07E, double 0x403920E9BAC7B07E>, <2 x double> %103) #7
  %135 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %134, <2 x double> <double 0xBF645497F334CD1D, double 0xBF645497F334CD1D>, <2 x double> %25) #7
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %113, <2 x double> %135) #7
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E823D16D999C674, double 0x3E823D16D999C674>, <2 x double> <double 0x40171131F32ACF74, double 0x40171131F32ACF74>, <2 x double> %103) #7
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double 0xBF9E3C8E8BED86BB, double 0xBF9E3C8E8BED86BB>, <2 x double> %25) #7
  %139 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %136, <2 x double> %113, <2 x double> %138) #7
  %140 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE9D26D12E073976, double 0xBE9D26D12E073976>, <2 x double> <double 0x3FE743CF466BEB1B, double 0x3FE743CF466BEB1B>, <2 x double> %103) #7
  %141 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %140, <2 x double> <double 0x3F41B33B019B3E6F, double 0x3F41B33B019B3E6F>, <2 x double> %25) #7
  %142 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %139, <2 x double> %113, <2 x double> %141) #7
  %143 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB050C384661C46, double 0x3EB050C384661C46>, <2 x double> <double 0x3FB57EDE06D746AF, double 0x3FB57EDE06D746AF>, <2 x double> %103) #7
  %144 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %143, <2 x double> <double 0x3F7A3A699F4A401B, double 0x3F7A3A699F4A401B>, <2 x double> %25) #7
  %145 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %142, <2 x double> %113, <2 x double> %144) #7
  %146 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEC1162DF3C28D5A, double 0xBEC1162DF3C28D5A>, <2 x double> <double 0xBFB50586EF5B83AC, double 0xBFB50586EF5B83AC>, <2 x double> %103) #7
  %147 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %146, <2 x double> <double 0xBF254D241144693F, double 0xBF254D241144693F>, <2 x double> %25) #7
  %148 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %145, <2 x double> %113, <2 x double> %147) #7
  %149 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3ED257DCE81F6BB4, double 0x3ED257DCE81F6BB4>, <2 x double> <double 0x3FB17B57DDB9E32F, double 0x3FB17B57DDB9E32F>, <2 x double> %103) #7
  %150 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %149, <2 x double> <double 0xBF5F5DBCAF756CDE, double 0xBF5F5DBCAF756CDE>, <2 x double> %25) #7
  %151 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %148, <2 x double> %113, <2 x double> %150) #7
  %152 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEE3CC0905ECA8BE, double 0xBEE3CC0905ECA8BE>, <2 x double> <double 0xBFB3BE73A742EECE, double 0xBFB3BE73A742EECE>, <2 x double> %103) #7
  %153 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %152, <2 x double> <double 0x3F12E31F9B7913EA, double 0x3F12E31F9B7913EA>, <2 x double> %25) #7
  %154 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %151, <2 x double> %113, <2 x double> %153) #7
  %155 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EF580E0E2726AC9, double 0x3EF580E0E2726AC9>, <2 x double> <double 0x3FB5580F0BB1F8CA, double 0x3FB5580F0BB1F8CA>, <2 x double> %103) #7
  %156 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %155, <2 x double> <double 0x3F4B8239C670E690, double 0x3F4B8239C670E690>, <2 x double> %25) #7
  %157 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %154, <2 x double> %113, <2 x double> %156) #7
  %158 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF078DE48A7816D9, double 0xBF078DE48A7816D9>, <2 x double> <double 0xBFB74879E96382CA, double 0xBFB74879E96382CA>, <2 x double> %103) #7
  %159 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %158, <2 x double> <double 0xBF0B1D75D3346711, double 0xBF0B1D75D3346711>, <2 x double> %25) #7
  %160 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %157, <2 x double> %113, <2 x double> %159) #7
  %161 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F1A127B0D3DBB7D, double 0x3F1A127B0D3DBB7D>, <2 x double> <double 0x3FB9A0212305C3B9, double 0x3FB9A0212305C3B9>, <2 x double> %103) #7
  %162 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %161, <2 x double> <double 0xBF436773BDB97B48, double 0xBF436773BDB97B48>, <2 x double> %25) #7
  %163 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %160, <2 x double> %113, <2 x double> %162) #7
  %164 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF2D3FD4CA9D6B1F, double 0xBF2D3FD4CA9D6B1F>, <2 x double> <double 0xBFBC80675DF4ED19, double 0xBFBC80675DF4ED19>, <2 x double> %103) #7
  %165 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %164, <2 x double> <double 0x3F1247604839C038, double 0x3F1247604839C038>, <2 x double> %25) #7
  %166 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %163, <2 x double> %113, <2 x double> %165) #7
  %167 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F40B36AF85EF785, double 0x3F40B36AF85EF785>, <2 x double> <double 0x3FC010B3663D08D8, double 0x3FC010B3663D08D8>, <2 x double> %103) #7
  %168 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %167, <2 x double> <double 0x3F49B0FF6874F2C4, double 0x3F49B0FF6874F2C4>, <2 x double> %25) #7
  %169 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %166, <2 x double> %113, <2 x double> %168) #7
  %170 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF538AC5C2BD10CA, double 0xBF538AC5C2BD10CA>, <2 x double> <double 0xBFC2703A1DD72363, double 0xBFC2703A1DD72363>, <2 x double> %103) #7
  %171 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %170, <2 x double> <double 0xBF2E13CE465FA859, double 0xBF2E13CE465FA859>, <2 x double> %25) #7
  %172 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %169, <2 x double> %113, <2 x double> %171) #7
  %173 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F67ADD6EADB7260, double 0x3F67ADD6EADB7260>, <2 x double> <double 0x3FC5B40CB1047E2E, double 0x3FC5B40CB1047E2E>, <2 x double> %103) #7
  %174 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %173, <2 x double> <double 0xBF65F7268EDAB4C8, double 0xBF65F7268EDAB4C8>, <2 x double> %25) #7
  %175 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %172, <2 x double> %113, <2 x double> %174) #7
  %176 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF7E404FC218F817, double 0xBF7E404FC218F817>, <2 x double> <double 0xBFCA8B9C17AA3C08, double 0xBFCA8B9C17AA3C08>, <2 x double> %103) #7
  %177 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %176, <2 x double> <double 0x3F6C71C71C71C71C, double 0x3F6C71C71C71C71C>, <2 x double> %25) #7
  %178 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %175, <2 x double> %113, <2 x double> %177) #7
  %179 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F951322AC7D8485, double 0x3F951322AC7D8485>, <2 x double> <double 0x3FD151322AC7D813, double 0x3FD151322AC7D813>, <2 x double> %103) #7
  %180 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %179, <2 x double> <double 0x3FB5555555555555, double 0x3FB5555555555555>, <2 x double> %25) #7
  %181 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %178, <2 x double> %113, <2 x double> %180) #7
  %182 = fadd <2 x double> %100, <double -5.000000e-01, double -5.000000e-01>
  %183 = fsub <2 x double> %182, %100
  %184 = fsub <2 x double> %182, %183
  %185 = fsub <2 x double> %100, %184
  %186 = fsub <2 x double> <double -5.000000e-01, double -5.000000e-01>, %183
  %187 = fadd <2 x double> %186, %185
  %188 = fadd <2 x double> %101, %187
  %189 = fmul <2 x double> %100, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %190 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %189, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %191 = fmul <2 x double> %189, <double 0x52B0000000000000, double 0x52B0000000000000>
  %192 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %189, <2 x double> %191, <2 x double> %190) #7
  %193 = bitcast <2 x double> %192 to <4 x i32>
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %195 = lshr <4 x i32> %194, <i32 20, i32 20, i32 20, i32 20>
  %196 = bitcast <2 x double> %190 to <4 x i32>
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %198 = bitcast <4 x i32> %197 to <16 x i8>
  %199 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %198) #7
  %200 = bitcast <16 x i8> %199 to <4 x i32>
  %201 = sub <4 x i32> %195, %200
  %202 = sub <4 x i32> zeroinitializer, %201
  %203 = ashr <4 x i32> %202, <i32 1, i32 1, i32 1, i32 1>
  %204 = add <4 x i32> %203, <i32 1023, i32 1023, i32 undef, i32 1023>
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %206 = and <4 x i32> %205, <i32 0, i32 -1, i32 0, i32 -1>
  %207 = shl <4 x i32> %206, <i32 20, i32 20, i32 20, i32 20>
  %208 = bitcast <4 x i32> %207 to <2 x double>
  %209 = fmul <2 x double> %100, %208
  %210 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %201
  %211 = sub <4 x i32> %210, %203
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %213 = and <4 x i32> %212, <i32 0, i32 -1, i32 0, i32 -1>
  %214 = shl <4 x i32> %213, <i32 20, i32 20, i32 20, i32 20>
  %215 = bitcast <4 x i32> %214 to <2 x double>
  %216 = fmul <2 x double> %209, %215
  %217 = fmul <2 x double> %101, %208
  %218 = fmul <2 x double> %217, %215
  %219 = fadd <2 x double> %216, <double -1.000000e+00, double -1.000000e+00>
  %220 = fsub <2 x double> %219, %216
  %221 = fsub <2 x double> %219, %220
  %222 = fsub <2 x double> %216, %221
  %223 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %220
  %224 = fadd <2 x double> %223, %222
  %225 = fadd <2 x double> %218, %224
  %226 = fadd <2 x double> %216, <double 1.000000e+00, double 1.000000e+00>
  %227 = fsub <2 x double> %226, %216
  %228 = fsub <2 x double> %226, %227
  %229 = fsub <2 x double> %216, %228
  %230 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %227
  %231 = fadd <2 x double> %230, %229
  %232 = fadd <2 x double> %218, %231
  %233 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %226
  %234 = fmul <2 x double> %219, %233
  %235 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %234
  %236 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %233, <2 x double> %219, <2 x double> %235) #7
  %237 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %226
  %238 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %237, <2 x double> %233, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %239 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %232
  %240 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %239, <2 x double> %233, <2 x double> %238) #7
  %241 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %225, <2 x double> %233, <2 x double> %236) #7
  %242 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %234, <2 x double> %240, <2 x double> %241) #7
  %243 = fmul <2 x double> %234, %234
  %244 = fadd <2 x double> %234, %234
  %245 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %243
  %246 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %234, <2 x double> %234, <2 x double> %245) #7
  %247 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %244, <2 x double> %242, <2 x double> %246) #7
  %248 = fmul <2 x double> %243, %243
  %249 = fmul <2 x double> %248, %248
  %250 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %251 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %248, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %250) #7
  %252 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %253 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %254 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %248, <2 x double> %252, <2 x double> %253) #7
  %255 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %249, <2 x double> %251, <2 x double> %254) #7
  %256 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %255, <2 x double> %243, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %257 = shufflevector <4 x i32> %201, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %258 = sitofp <2 x i32> %257 to <2 x double>
  %259 = fmul <2 x double> %258, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %260 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %259
  %261 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %258, <2 x double> %260) #7
  %262 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %258, <2 x double> %261) #7
  %263 = fmul <2 x double> %234, <double 2.000000e+00, double 2.000000e+00>
  %264 = fmul <2 x double> %242, <double 2.000000e+00, double 2.000000e+00>
  %265 = fadd <2 x double> %259, %263
  %266 = fsub <2 x double> %259, %265
  %267 = fadd <2 x double> %263, %266
  %268 = fadd <2 x double> %262, %267
  %269 = fadd <2 x double> %264, %268
  %270 = fmul <2 x double> %234, %243
  %271 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %270
  %272 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> %234, <2 x double> %271) #7
  %273 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %247, <2 x double> %234, <2 x double> %272) #7
  %274 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %243, <2 x double> %242, <2 x double> %273) #7
  %275 = fmul <2 x double> %256, %270
  %276 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %275
  %277 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %270, <2 x double> %256, <2 x double> %276) #7
  %278 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %274, <2 x double> %256, <2 x double> %277) #7
  %279 = fadd <2 x double> %265, %275
  %280 = fsub <2 x double> %265, %279
  %281 = fadd <2 x double> %275, %280
  %282 = fadd <2 x double> %281, %269
  %283 = fadd <2 x double> %282, %278
  %284 = fmul <2 x double> %182, %279
  %285 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %284
  %286 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %182, <2 x double> %279, <2 x double> %285) #7
  %287 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %188, <2 x double> %279, <2 x double> %286) #7
  %288 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %182, <2 x double> %283, <2 x double> %287) #7
  %289 = bitcast <2 x double> %100 to <2 x i64>
  %290 = xor <2 x i64> %289, <i64 -9223372036854775808, i64 -9223372036854775808>
  %291 = bitcast <2 x double> %101 to <2 x i64>
  %292 = xor <2 x i64> %291, <i64 -9223372036854775808, i64 -9223372036854775808>
  %293 = bitcast <2 x i64> %290 to <2 x double>
  %294 = bitcast <2 x i64> %292 to <2 x double>
  %295 = fadd <2 x double> %284, %293
  %296 = fsub <2 x double> %295, %284
  %297 = fsub <2 x double> %295, %296
  %298 = fsub <2 x double> %284, %297
  %299 = fsub <2 x double> %293, %296
  %300 = fadd <2 x double> %299, %298
  %301 = fadd <2 x double> %288, %294
  %302 = fadd <2 x double> %300, %301
  %303 = fadd <2 x double> %295, <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>
  %304 = fsub <2 x double> %303, %295
  %305 = fsub <2 x double> %303, %304
  %306 = fsub <2 x double> %295, %305
  %307 = fsub <2 x double> <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>, %304
  %308 = fadd <2 x double> %307, %306
  %309 = fadd <2 x double> %302, <double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF>
  %310 = fadd <2 x double> %308, %309
  %311 = fmul <2 x double> %113, %181
  %312 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %311
  %313 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %181, <2 x double> %113, <2 x double> %312) #7
  %314 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB13E001A557607, double 0xBFB13E001A557607>, <2 x double> <double 0xBFD9A4D55BEAB2D8, double 0xBFD9A4D55BEAB2D8>, <2 x double> %103) #7
  %315 = fadd <2 x double> %311, %314
  %316 = fsub <2 x double> %315, %311
  %317 = fsub <2 x double> %315, %316
  %318 = fsub <2 x double> %311, %317
  %319 = fsub <2 x double> %314, %316
  %320 = fadd <2 x double> %319, %318
  %321 = fadd <2 x double> %313, %320
  %322 = fmul <2 x double> %113, %315
  %323 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %322
  %324 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %315, <2 x double> %113, <2 x double> %323) #7
  %325 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %321, <2 x double> %113, <2 x double> %324) #7
  %326 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FD4A34CC4A60FA6, double 0x3FD4A34CC4A60FA6>, <2 x double> <double 0x3FEA51A6625307D3, double 0x3FEA51A6625307D3>, <2 x double> %103) #7
  %327 = fadd <2 x double> %322, %326
  %328 = fsub <2 x double> %327, %322
  %329 = fsub <2 x double> %327, %328
  %330 = fsub <2 x double> %322, %329
  %331 = fsub <2 x double> %326, %328
  %332 = fadd <2 x double> %331, %330
  %333 = fadd <2 x double> %325, %332
  %334 = fmul <2 x double> %113, %327
  %335 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %334
  %336 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %327, <2 x double> %113, <2 x double> %335) #7
  %337 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %333, <2 x double> %113, <2 x double> %336) #7
  %338 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FDB0EE6072093CE, double 0x3FDB0EE6072093CE>, <2 x double> <double 0xBFE2788CFC6FB619, double 0xBFE2788CFC6FB619>, <2 x double> %103) #7
  %339 = fadd <2 x double> %334, %338
  %340 = fsub <2 x double> %339, %334
  %341 = fsub <2 x double> %339, %340
  %342 = fsub <2 x double> %334, %341
  %343 = fsub <2 x double> %338, %340
  %344 = fadd <2 x double> %343, %342
  %345 = fadd <2 x double> %337, %344
  %346 = fmul <2 x double> %113, %339
  %347 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %346
  %348 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %339, <2 x double> %113, <2 x double> %347) #7
  %349 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %345, <2 x double> %113, <2 x double> %348) #7
  %350 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %346, <2 x double> %303, <2 x double> %25) #7
  %351 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %349, <2 x double> %310, <2 x double> %25) #7
  %352 = fadd <2 x double> %311, <double 1.000000e+00, double 1.000000e+00>
  %353 = fsub <2 x double> %352, %311
  %354 = fsub <2 x double> %352, %353
  %355 = fsub <2 x double> %311, %354
  %356 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %353
  %357 = fadd <2 x double> %356, %355
  %358 = fadd <2 x double> %357, %313
  %359 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %352, <2 x double> %25) #7
  %360 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %358, <2 x double> %25) #7
  %361 = bitcast <2 x double> %350 to <2 x i64>
  %362 = xor <2 x i64> %361, <i64 -9223372036854775808, i64 -9223372036854775808>
  %363 = bitcast <2 x double> %351 to <2 x i64>
  %364 = xor <2 x i64> %363, <i64 -9223372036854775808, i64 -9223372036854775808>
  %365 = bitcast <2 x i64> %362 to <2 x double>
  %366 = bitcast <2 x i64> %364 to <2 x double>
  %367 = fadd <2 x double> %365, <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>
  %368 = fadd <2 x double> %367, <double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD>
  %369 = fsub <2 x double> %367, %368
  %370 = fsub <2 x double> <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>, %369
  %371 = fsub <2 x double> %365, %368
  %372 = fadd <2 x double> %371, %370
  %373 = fadd <2 x double> %366, <double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088>
  %374 = fadd <2 x double> %373, %372
  %375 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %350, <2 x double> %367, <2 x double> %7) #7
  %376 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %351, <2 x double> %374, <2 x double> %7) #7
  %377 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %375, <2 x double> <double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650>, <2 x double> %6) #7
  %378 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %376, <2 x double> <double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E>, <2 x double> %6) #7
  %379 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %359, <2 x double> %91, <2 x double> %7) #7
  %380 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %360, <2 x double> %92, <2 x double> %7) #7
  %381 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %379, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %6) #7
  %382 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %380, <2 x double> zeroinitializer, <2 x double> %6) #7
  %383 = bitcast <2 x double> %7 to <16 x i8>
  %384 = xor <16 x i8> %383, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %385 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %384) #7
  %386 = icmp eq i32 %385, 65535
  br i1 %386, label %480, label %387

; <label>:387:                                    ; preds = %2
  %388 = fmul <2 x double> %1, <double 0x3E30000000000000, double 0x3E30000000000000>
  %389 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %388) #7
  %390 = shufflevector <4 x i32> %389, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %391 = sitofp <2 x i32> %390 to <2 x double>
  %392 = fmul <2 x double> %391, <double 0x41B0000000000000, double 0x41B0000000000000>
  %393 = fsub <2 x double> %1, %392
  %394 = fmul <2 x double> %393, <double 4.000000e+00, double 4.000000e+00>
  %395 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %394) #7
  %396 = lshr <4 x i32> %395, <i32 31, i32 31, i32 31, i32 31>
  %397 = xor <4 x i32> %396, <i32 1, i32 1, i32 1, i32 1>
  %398 = add <4 x i32> %397, %395
  %399 = and <4 x i32> %398, <i32 2, i32 2, i32 2, i32 2>
  %400 = icmp ne <4 x i32> %399, zeroinitializer
  %401 = sext <4 x i1> %400 to <4 x i32>
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %403 = and <4 x i32> %398, <i32 -2, i32 -2, i32 undef, i32 undef>
  %404 = shufflevector <4 x i32> %403, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %405 = sitofp <2 x i32> %404 to <2 x double>
  %406 = fsub <2 x double> %394, %405
  %407 = fmul <2 x double> %406, %406
  %408 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %407
  %409 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %406, <2 x double> %406, <2 x double> %408) #7
  %410 = bitcast <4 x i32> %402 to <2 x double>
  %411 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %410) #7
  %412 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %410) #7
  %413 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %411, <2 x double> %407, <2 x double> %412) #7
  %414 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %410) #7
  %415 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %413, <2 x double> %407, <2 x double> %414) #7
  %416 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %410) #7
  %417 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %415, <2 x double> %407, <2 x double> %416) #7
  %418 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %410) #7
  %419 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %417, <2 x double> %407, <2 x double> %418) #7
  %420 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %410) #7
  %421 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %419, <2 x double> %407, <2 x double> %420) #7
  %422 = fmul <2 x double> %407, %421
  %423 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %410) #7
  %424 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %410) #7
  %425 = fadd <2 x double> %422, %423
  %426 = fsub <2 x double> %425, %422
  %427 = fsub <2 x double> %425, %426
  %428 = fsub <2 x double> %422, %427
  %429 = fsub <2 x double> %423, %426
  %430 = fadd <2 x double> %429, %428
  %431 = fadd <2 x double> %424, %430
  %432 = fmul <2 x double> %407, %425
  %433 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %432
  %434 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %407, <2 x double> %425, <2 x double> %433) #7
  %435 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %409, <2 x double> %425, <2 x double> %434) #7
  %436 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %407, <2 x double> %431, <2 x double> %435) #7
  %437 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %410) #7
  %438 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %410) #7
  %439 = fadd <2 x double> %432, %437
  %440 = fsub <2 x double> %439, %432
  %441 = fsub <2 x double> %439, %440
  %442 = fsub <2 x double> %432, %441
  %443 = fsub <2 x double> %437, %440
  %444 = fadd <2 x double> %443, %442
  %445 = fadd <2 x double> %436, %438
  %446 = fadd <2 x double> %445, %444
  %447 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %406, <2 x double> %407, <2 x double> %410) #7
  %448 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %409, <2 x double> %410) #7
  %449 = fmul <2 x double> %439, %447
  %450 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %449
  %451 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %439, <2 x double> %447, <2 x double> %450) #7
  %452 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %446, <2 x double> %447, <2 x double> %451) #7
  %453 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %439, <2 x double> %448, <2 x double> %452) #7
  %454 = fadd <2 x double> %449, <double 1.000000e+00, double 1.000000e+00>
  %455 = fsub <2 x double> %454, %449
  %456 = fsub <2 x double> %454, %455
  %457 = fsub <2 x double> %449, %456
  %458 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %455
  %459 = fadd <2 x double> %458, %457
  %460 = fadd <2 x double> %453, %459
  %461 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %449, <2 x double> %454, <2 x double> %410) #7
  %462 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %453, <2 x double> %460, <2 x double> %410) #7
  %463 = and <4 x i32> %398, <i32 4, i32 4, i32 4, i32 4>
  %464 = icmp ne <4 x i32> %463, zeroinitializer
  %465 = sext <4 x i1> %464 to <4 x i32>
  %466 = shufflevector <4 x i32> %465, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = and <2 x i64> %467, <i64 -9223372036854775808, i64 -9223372036854775808>
  %469 = bitcast <2 x double> %461 to <2 x i64>
  %470 = xor <2 x i64> %468, %469
  %471 = bitcast <2 x double> %462 to <2 x i64>
  %472 = xor <2 x i64> %468, %471
  %473 = bitcast <2 x i64> %470 to <2 x double>
  %474 = bitcast <2 x i64> %472 to <2 x double>
  %475 = fmul <2 x double> %359, %473
  %476 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %475
  %477 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %359, <2 x double> %473, <2 x double> %476) #7
  %478 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %360, <2 x double> %473, <2 x double> %477) #7
  %479 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %359, <2 x double> %474, <2 x double> %478) #7
  br label %480

; <label>:480:                                    ; preds = %2, %387
  %481 = phi <2 x double> [ %475, %387 ], [ %100, %2 ]
  %482 = phi <2 x double> [ %479, %387 ], [ %101, %2 ]
  %483 = fmul <2 x double> %1, <double 0x4770000000000000, double 0x4770000000000000>
  %484 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %91, <2 x double> %481, <2 x double> %7) #7
  %485 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %92, <2 x double> %482, <2 x double> %7) #7
  %486 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %484, <2 x double> %483, <2 x double> %6) #7
  %487 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %485, <2 x double> zeroinitializer, <2 x double> %6) #7
  %488 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %486
  %489 = fmul <2 x double> %381, %488
  %490 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %489
  %491 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %488, <2 x double> %381, <2 x double> %490) #7
  %492 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %486
  %493 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %492, <2 x double> %488, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %494 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %487
  %495 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %494, <2 x double> %488, <2 x double> %493) #7
  %496 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %382, <2 x double> %488, <2 x double> %491) #7
  %497 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %489, <2 x double> %495, <2 x double> %496) #7
  %498 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store <2 x double> %377, <2 x double>* %498, align 16
  %499 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store <2 x double> %378, <2 x double>* %499, align 16
  %500 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store <2 x double> %489, <2 x double>* %500, align 16
  %501 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store <2 x double> %497, <2 x double>* %501, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_lgammad2_u10avx2128(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <2 x double>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <2 x double>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = fmul <2 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %15, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %17 = fmul <2 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000>
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %17, <2 x double> %16) #7
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %21 = lshr <4 x i32> %20, <i32 20, i32 20, i32 20, i32 20>
  %22 = bitcast <2 x double> %16 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %21, %26
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = ashr <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %30 = add <4 x i32> %29, <i32 1023, i32 1023, i32 undef, i32 1023>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %13, %34
  %36 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %27
  %37 = sub <4 x i32> %36, %29
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %39 = and <4 x i32> %38, <i32 0, i32 -1, i32 0, i32 -1>
  %40 = shl <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = bitcast <4 x i32> %40 to <2 x double>
  %42 = fmul <2 x double> %35, %41
  %43 = fmul <2 x double> %14, %34
  %44 = fmul <2 x double> %43, %41
  %45 = fadd <2 x double> %42, <double -1.000000e+00, double -1.000000e+00>
  %46 = fsub <2 x double> %45, %42
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> %42, %47
  %49 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fadd <2 x double> %44, %50
  %52 = fadd <2 x double> %42, <double 1.000000e+00, double 1.000000e+00>
  %53 = fsub <2 x double> %52, %42
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %42, %54
  %56 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %44, %57
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %52
  %60 = fmul <2 x double> %45, %59
  %61 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %60
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %45, <2 x double> %61) #7
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %52
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %59, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %58
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %59, <2 x double> %64) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %59, <2 x double> %62) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %66, <2 x double> %67) #7
  %69 = fmul <2 x double> %60, %60
  %70 = fadd <2 x double> %60, %60
  %71 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %60, <2 x double> %71) #7
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %70, <2 x double> %68, <2 x double> %72) #7
  %74 = fmul <2 x double> %69, %69
  %75 = fmul <2 x double> %74, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %76) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %78, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %77, <2 x double> %80) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %81, <2 x double> %69, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %83 = shufflevector <4 x i32> %27, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %84 = sitofp <2 x i32> %83 to <2 x double>
  %85 = fmul <2 x double> %84, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %86 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %85
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %84, <2 x double> %86) #7
  %88 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %84, <2 x double> %87) #7
  %89 = fmul <2 x double> %60, <double 2.000000e+00, double 2.000000e+00>
  %90 = fmul <2 x double> %68, <double 2.000000e+00, double 2.000000e+00>
  %91 = fadd <2 x double> %85, %89
  %92 = fsub <2 x double> %85, %91
  %93 = fadd <2 x double> %89, %92
  %94 = fadd <2 x double> %88, %93
  %95 = fadd <2 x double> %90, %94
  %96 = fmul <2 x double> %60, %69
  %97 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %60, <2 x double> %97) #7
  %99 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %73, <2 x double> %60, <2 x double> %98) #7
  %100 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %68, <2 x double> %99) #7
  %101 = fmul <2 x double> %82, %96
  %102 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %96, <2 x double> %82, <2 x double> %102) #7
  %104 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %100, <2 x double> %82, <2 x double> %103) #7
  %105 = fadd <2 x double> %91, %101
  %106 = fsub <2 x double> %91, %105
  %107 = fadd <2 x double> %101, %106
  %108 = fadd <2 x double> %107, %95
  %109 = fadd <2 x double> %108, %104
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %111 = load <2 x double>, <2 x double>* %110, align 16
  %112 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %113 = load <2 x double>, <2 x double>* %112, align 16
  %114 = fadd <2 x double> %105, %111
  %115 = fsub <2 x double> %114, %111
  %116 = fsub <2 x double> %114, %115
  %117 = fsub <2 x double> %111, %116
  %118 = fsub <2 x double> %105, %115
  %119 = fadd <2 x double> %118, %117
  %120 = fadd <2 x double> %109, %113
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %114, %121
  %123 = bitcast <2 x double> %0 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 9223372036854775807, i64 9223372036854775807>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fcmp oeq <2 x double> %125, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %127 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 18) #7
  %128 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  %129 = fcmp oeq <2 x double> %128, %0
  %130 = fcmp une <2 x double> %125, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = fcmp ord <2 x double> %0, zeroinitializer
  %132 = and <2 x i1> %130, %131
  %133 = fcmp uno <2 x double> %122, zeroinitializer
  %134 = and <2 x i1> %132, %133
  %135 = or <2 x i1> %134, %126
  %136 = select <2 x i1> %129, <2 x double> %127, <2 x double> zeroinitializer
  %137 = select <2 x i1> %135, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %136
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %137) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #7
  ret <2 x double> %138
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 3.700000e+00, double 3.700000e+00>, i8 17) #7
  %7 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 6.000000e+00, double 6.000000e+00>, i8 17) #7
  %8 = fmul <2 x double> %4, %4
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %8, <2 x double> %5) #7
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC5AF69FE192740F, double 0xBC5AF69FE192740F>, <2 x double> <double 0x3D1FDFABBDFC43F1, double 0x3D1FDFABBDFC43F1>, <2 x double> %6) #7
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> <double 0x3BC00EFEFABE989B, double 0x3BC00EFEFABE989B>, <2 x double> %5) #7
  %12 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3CC5E4C21B562709, double 0x3CC5E4C21B562709>, <2 x double> <double 0xBD7A8E25B9CCCB64, double 0xBD7A8E25B9CCCB64>, <2 x double> %6) #7
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> <double 0xBC0FE6EC06B043F5, double 0xBC0FE6EC06B043F5>, <2 x double> %5) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %9, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD20EE4A859274F9, double 0xBD20EE4A859274F9>, <2 x double> <double 0x3DC50B3AE48C7164, double 0x3DC50B3AE48C7164>, <2 x double> %6) #7
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> <double 0x3C55A7F67BDE0C17, double 0x3C55A7F67BDE0C17>, <2 x double> %5) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %9, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D7095F3964F9BBA, double 0x3D7095F3964F9BBA>, <2 x double> <double 0xBE0518912B895660, double 0xBE0518912B895660>, <2 x double> %6) #7
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0xBC9A15164BF4F36C, double 0xBC9A15164BF4F36C>, <2 x double> %5) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %9, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBDB7174964833400, double 0xBDB7174964833400>, <2 x double> <double 0x3E3E0083E7FD4B05, double 0x3E3E0083E7FD4B05>, <2 x double> %6) #7
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %21, <2 x double> <double 0x3CDD6F95068FEEA8, double 0x3CDD6F95068FEEA8>, <2 x double> %5) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %9, <2 x double> %22) #7
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3DF84A341FC35F63, double 0x3DF84A341FC35F63>, <2 x double> <double 0xBE70131398DAE973, double 0xBE70131398DAE973>, <2 x double> %6) #7
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %24, <2 x double> <double 0xBD1F56D9FF51275A, double 0xBD1F56D9FF51275A>, <2 x double> %5) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %9, <2 x double> %25) #7
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE34092FAEC3CB81, double 0xBE34092FAEC3CB81>, <2 x double> <double 0x3E9AE1C4F259778D, double 0x3E9AE1C4F259778D>, <2 x double> %6) #7
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %27, <2 x double> <double 0x3D5F6839841402FB, double 0x3D5F6839841402FB>, <2 x double> %5) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %9, <2 x double> %28) #7
  %30 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E6A8ABD2DF8AA98, double 0x3E6A8ABD2DF8AA98>, <2 x double> <double 0xBEC1E2D7E8039AC0, double 0xBEC1E2D7E8039AC0>, <2 x double> %6) #7
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %30, <2 x double> <double 0xBD9D8453B9E7FD7B, double 0xBD9D8453B9E7FD7B>, <2 x double> %5) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %9, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE9CA9DF1E6D3F55, double 0xBE9CA9DF1E6D3F55>, <2 x double> <double 0x3EE3117A5DB988BA, double 0x3EE3117A5DB988BA>, <2 x double> %6) #7
  %34 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> <double 0x3DD9E6AD5DAB7034, double 0x3DD9E6AD5DAB7034>, <2 x double> %5) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %9, <2 x double> %34) #7
  %36 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EC9739C586B056B, double 0x3EC9739C586B056B>, <2 x double> <double 0xBF0024D0F7EE3723, double 0xBF0024D0F7EE3723>, <2 x double> %6) #7
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %36, <2 x double> <double 0xBE151D7181C08B9D, double 0xBE151D7181C08B9D>, <2 x double> %5) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %9, <2 x double> %37) #7
  %39 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEF2A034D3F36A50, double 0xBEF2A034D3F36A50>, <2 x double> <double 0x3F14E58666D1B46F, double 0x3F14E58666D1B46F>, <2 x double> %6) #7
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> <double 0x3E4FCC5720620921, double 0x3E4FCC5720620921>, <2 x double> %5) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %9, <2 x double> %40) #7
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F1658BA21A7397E, double 0x3F1658BA21A7397E>, <2 x double> <double 0xBF2230DCD58EAD99, double 0xBF2230DCD58EAD99>, <2 x double> %6) #7
  %43 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %42, <2 x double> <double 0xBE85F742EC43E5C7, double 0xBE85F742EC43E5C7>, <2 x double> %5) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %9, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF3590AE9D03C290, double 0xBF3590AE9D03C290>, <2 x double> <double 0x3F10F5BA38B6A6E5, double 0x3F10F5BA38B6A6E5>, <2 x double> %6) #7
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x3EBB9E6C9DC6519C, double 0x3EBB9E6C9DC6519C>, <2 x double> %5) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %44, <2 x double> %9, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F4FC6679B56D25A, double 0x3F4FC6679B56D25A>, <2 x double> <double 0x3F405F7D6748381E, double 0x3F405F7D6748381E>, <2 x double> %6) #7
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0xBEEF4D25C3E0C2EA, double 0xBEEF4D25C3E0C2EA>, <2 x double> %5) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> %9, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF5DB24AB8ACFC8B, double 0xBF5DB24AB8ACFC8B>, <2 x double> <double 0xBF5A9686E5DE05F7, double 0xBF5A9686E5DE05F7>, <2 x double> %6) #7
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x3F1F9A326F9B89B8, double 0x3F1F9A326F9B89B8>, <2 x double> %5) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %50, <2 x double> %9, <2 x double> %52) #7
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF3EF7EC1133F0A8, double 0xBF3EF7EC1133F0A8>, <2 x double> <double 0x3F252C1DCB0324BA, double 0x3F252C1DCB0324BA>, <2 x double> %6) #7
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %54, <2 x double> <double 0xBF4C02DB40040B84, double 0xBF4C02DB40040B84>, <2 x double> %5) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %9, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F9567A2F00CE3E5, double 0x3F9567A2F00CE3E5>, <2 x double> <double 0x3F939CBECA106F66, double 0x3F939CBECA106F66>, <2 x double> %6) #7
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> <double 0x3F7565BCD0E6A540, double 0x3F7565BCD0E6A540>, <2 x double> %5) #7
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %56, <2 x double> %9, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFBAEEA974D564EF, double 0xBFBAEEA974D564EF>, <2 x double> <double 0xBFBA4FE8F5D2A23C, double 0xBFBA4FE8F5D2A23C>, <2 x double> %6) #7
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> <double 0xBF9B82CE31288B52, double 0xBF9B82CE31288B52>, <2 x double> %5) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %9, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE44E1CB940DA9C, double 0xBFE44E1CB940DA9C>, <2 x double> <double 0xBFE45F2B34C61AC0, double 0xBFE45F2B34C61AC0>, <2 x double> %6) #7
  %64 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %63, <2 x double> <double 0x3FBCE2F21A042BE3, double 0x3FBCE2F21A042BE3>, <2 x double> %5) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %62, <2 x double> %9, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFF21232BFB32B5A, double 0xBFF21232BFB32B5A>, <2 x double> <double 0xBFF20DD7C1F4F99A, double 0xBFF20DD7C1F4F99A>, <2 x double> %6) #7
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %66, <2 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <2 x double> %5) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %9, <2 x double> %67) #7
  %69 = fmul <2 x double> %9, %68
  %70 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %68, <2 x double> %9, <2 x double> %70) #7
  %72 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F305C1A38102E9A, double 0x3F305C1A38102E9A>, <2 x double> <double 0x3E6250219DD8BAD1, double 0x3E6250219DD8BAD1>, <2 x double> %6) #7
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %72, <2 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <2 x double> %5) #7
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBBB9AC0AFE024E87, double 0xBBB9AC0AFE024E87>, <2 x double> <double 0xBB080EE9AD757828, double 0xBB080EE9AD757828>, <2 x double> %6) #7
  %75 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %74, <2 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <2 x double> %5) #7
  %76 = fadd <2 x double> %69, %73
  %77 = fsub <2 x double> %76, %69
  %78 = fsub <2 x double> %76, %77
  %79 = fsub <2 x double> %69, %78
  %80 = fsub <2 x double> %73, %77
  %81 = fadd <2 x double> %80, %79
  %82 = fadd <2 x double> %71, %75
  %83 = fadd <2 x double> %82, %81
  %84 = fmul <2 x double> %76, %4
  %85 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %84
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %4, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %4, <2 x double> %86) #7
  %88 = fadd <2 x double> %76, %83
  %89 = fmul <2 x double> %88, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %90 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %89, i32 8) #7
  %91 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %90) #7
  %92 = fmul <2 x double> %90, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %93 = fadd <2 x double> %76, %92
  %94 = fsub <2 x double> %93, %76
  %95 = fsub <2 x double> %93, %94
  %96 = fsub <2 x double> %76, %95
  %97 = fsub <2 x double> %92, %94
  %98 = fadd <2 x double> %97, %96
  %99 = fadd <2 x double> %83, %98
  %100 = fmul <2 x double> %90, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %101 = fadd <2 x double> %100, %93
  %102 = fsub <2 x double> %101, %93
  %103 = fsub <2 x double> %101, %102
  %104 = fsub <2 x double> %93, %103
  %105 = fsub <2 x double> %100, %102
  %106 = fadd <2 x double> %105, %104
  %107 = fadd <2 x double> %106, %99
  %108 = fmul <2 x double> %101, %101
  %109 = fadd <2 x double> %101, %101
  %110 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %108
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %101, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %109, <2 x double> %107, <2 x double> %111) #7
  %113 = fmul <2 x double> %108, %108
  %114 = fadd <2 x double> %108, %108
  %115 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %113
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %108, <2 x double> %115) #7
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %114, <2 x double> %112, <2 x double> %116) #7
  %118 = fmul <2 x double> %113, %113
  %119 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %120 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %121 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %122 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %120, <2 x double> %121) #7
  %123 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %124 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %125 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %123, <2 x double> %124) #7
  %126 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %113, <2 x double> %122, <2 x double> %125) #7
  %127 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %118, <2 x double> %119, <2 x double> %126) #7
  %128 = fmul <2 x double> %101, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %129 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %128
  %130 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %129) #7
  %131 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %130) #7
  %132 = fadd <2 x double> %128, <double 5.000000e-01, double 5.000000e-01>
  %133 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %134, %131
  %136 = fmul <2 x double> %101, %132
  %137 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %132, <2 x double> %101, <2 x double> %137) #7
  %139 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %135, <2 x double> %101, <2 x double> %138) #7
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %132, <2 x double> %107, <2 x double> %139) #7
  %141 = fadd <2 x double> %136, <double 1.000000e+00, double 1.000000e+00>
  %142 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %141
  %143 = fadd <2 x double> %136, %142
  %144 = fadd <2 x double> %143, %140
  %145 = fmul <2 x double> %101, %141
  %146 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %145
  %147 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %141, <2 x double> %101, <2 x double> %146) #7
  %148 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %144, <2 x double> %101, <2 x double> %147) #7
  %149 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %141, <2 x double> %107, <2 x double> %148) #7
  %150 = fadd <2 x double> %145, <double 1.000000e+00, double 1.000000e+00>
  %151 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %150
  %152 = fadd <2 x double> %145, %151
  %153 = fadd <2 x double> %152, %149
  %154 = fmul <2 x double> %113, %127
  %155 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %154
  %156 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %113, <2 x double> %127, <2 x double> %155) #7
  %157 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %117, <2 x double> %127, <2 x double> %156) #7
  %158 = fadd <2 x double> %150, %154
  %159 = fsub <2 x double> %150, %158
  %160 = fadd <2 x double> %154, %159
  %161 = fadd <2 x double> %160, %153
  %162 = fadd <2 x double> %161, %157
  %163 = ashr <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %164 = add <4 x i32> %163, <i32 1023, i32 1023, i32 undef, i32 1023>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %166 = and <4 x i32> %165, <i32 0, i32 -1, i32 0, i32 -1>
  %167 = shl <4 x i32> %166, <i32 20, i32 20, i32 20, i32 20>
  %168 = bitcast <4 x i32> %167 to <2 x double>
  %169 = fmul <2 x double> %158, %168
  %170 = add <4 x i32> %91, <i32 1023, i32 1023, i32 undef, i32 1023>
  %171 = sub <4 x i32> %170, %163
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %173 = and <4 x i32> %172, <i32 0, i32 -1, i32 0, i32 -1>
  %174 = shl <4 x i32> %173, <i32 20, i32 20, i32 20, i32 20>
  %175 = bitcast <4 x i32> %174 to <2 x double>
  %176 = fmul <2 x double> %169, %175
  %177 = fmul <2 x double> %162, %168
  %178 = fmul <2 x double> %177, %175
  %179 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %76, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %180 = bitcast <2 x double> %179 to <2 x i64>
  %181 = bitcast <2 x double> %176 to <2 x i64>
  %182 = xor <2 x i64> %180, <i64 -1, i64 -1>
  %183 = and <2 x i64> %182, %181
  %184 = bitcast <2 x double> %178 to <2 x i64>
  %185 = and <2 x i64> %184, %182
  %186 = xor <2 x i64> %183, <i64 -9223372036854775808, i64 -9223372036854775808>
  %187 = xor <2 x i64> %185, <i64 -9223372036854775808, i64 -9223372036854775808>
  %188 = bitcast <2 x i64> %186 to <2 x double>
  %189 = bitcast <2 x i64> %187 to <2 x double>
  %190 = fadd <2 x double> %188, <double 1.000000e+00, double 1.000000e+00>
  %191 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %190
  %192 = fadd <2 x double> %191, %188
  %193 = fadd <2 x double> %192, %189
  %194 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %190, <2 x double> %84, <2 x double> %5) #7
  %195 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %193, <2 x double> %87, <2 x double> %5) #7
  %196 = fadd <2 x double> %194, %195
  %197 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %196, <2 x double> %7) #7
  %198 = bitcast <2 x double> %197 to <2 x i64>
  %199 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %200 = xor <2 x i64> %199, %198
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fcmp uno <2 x double> %4, zeroinitializer
  %203 = sext <2 x i1> %202 to <2 x i64>
  %204 = bitcast <2 x i64> %203 to <2 x double>
  %205 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %201, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %204) #7
  ret <2 x double> %205
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfcd2_u15avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 17) #7
  %6 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 2.200000e+00, double 2.200000e+00>, i8 17) #7
  %7 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 4.200000e+00, double 4.200000e+00>, i8 17) #7
  %8 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 2.730000e+01, double 2.730000e+01>, i8 17) #7
  %9 = fmul <2 x double> %4, %4
  %10 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %9
  %11 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %4, <2 x double> %4, <2 x double> %10) #7
  %12 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %13 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %13) #7
  %15 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %4
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %12, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %12, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> zeroinitializer, <2 x double> %12, <2 x double> %14) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %17, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %4, <2 x double> %6) #7
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %6) #7
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %20, <2 x double> %9, <2 x double> %5) #7
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %21, <2 x double> %11, <2 x double> %5) #7
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40D6CB9FD3B439A9, double 0x40D6CB9FD3B439A9>, <2 x double> <double 0xC04CCA024E41FBF2, double 0xC04CCA024E41FBF2>, <2 x double> %7) #7
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %24, <2 x double> <double 0x3D58315E6C186224, double 0x3D58315E6C186224>, <2 x double> %6) #7
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> <double 0x3BC00EFEFABE9897, double 0x3BC00EFEFABE9897>, <2 x double> %5) #7
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0E6ED9388CD091B, double 0xC0E6ED9388CD091B>, <2 x double> <double 0x407D2EDD0AE020CC, double 0x407D2EDD0AE020CC>, <2 x double> %7) #7
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %27, <2 x double> <double 0xBDAB33CF696F6246, double 0xBDAB33CF696F6246>, <2 x double> %6) #7
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %28, <2 x double> <double 0xBC0FE6EC06B043F2, double 0xBC0FE6EC06B043F2>, <2 x double> %5) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %22, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40DEFD81FD565E63, double 0x40DEFD81FD565E63>, <2 x double> <double 0xC09C1151CBEBE895, double 0xC09C1151CBEBE895>, <2 x double> %7) #7
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %31, <2 x double> <double 0x3DED1C000C3FE200, double 0x3DED1C000C3FE200>, <2 x double> %6) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> <double 0x3C55A7F67BDE0C13, double 0x3C55A7F67BDE0C13>, <2 x double> %5) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %22, <2 x double> %33) #7
  %35 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40A955F72FDA349C, double 0x40A955F72FDA349C>, <2 x double> <double 0x40B103E466CE6960, double 0x40B103E466CE6960>, <2 x double> %7) #7
  %36 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> <double 0xBE23ACFF2B1B8BEC, double 0xBE23ACFF2B1B8BEC>, <2 x double> %6) #7
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %36, <2 x double> <double 0xBC9A15164BF4F369, double 0xBC9A15164BF4F369>, <2 x double> %5) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %22, <2 x double> %37) #7
  %39 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0D3ACCB8514AB13, double 0xC0D3ACCB8514AB13>, <2 x double> <double 0xC0BD20424648FD63, double 0xC0BD20424648FD63>, <2 x double> %7) #7
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> <double 0x3E52C76D37FDB57D, double 0x3E52C76D37FDB57D>, <2 x double> %6) #7
  %41 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %40, <2 x double> <double 0x3CDD6F95068FEEA4, double 0x3CDD6F95068FEEA4>, <2 x double> %5) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %22, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40CE5A08EC3F1AF9, double 0x40CE5A08EC3F1AF9>, <2 x double> <double 0x40C2A8FD1A1289EB, double 0x40C2A8FD1A1289EB>, <2 x double> %7) #7
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> <double 0xBE7ABA200DE4015C, double 0xBE7ABA200DE4015C>, <2 x double> %6) #7
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> <double 0xBD1F56D9FF51274F, double 0xBD1F56D9FF51274F>, <2 x double> %5) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %22, <2 x double> %45) #7
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0B806DFCAF3E8F0, double 0xC0B806DFCAF3E8F0>, <2 x double> <double 0xC0C27F028C42F7FD, double 0xC0C27F028C42F7FD>, <2 x double> %7) #7
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x3E9D0EE6A4A80D73, double 0x3E9D0EE6A4A80D73>, <2 x double> %6) #7
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0x3D5F683984140301, double 0x3D5F683984140301>, <2 x double> %5) #7
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %22, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40936030E9797DA0, double 0x40936030E9797DA0>, <2 x double> <double 0x40BCDB58257A0C6D, double 0x40BCDB58257A0C6D>, <2 x double> %7) #7
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0xBEB8137ED27E2624, double 0xBEB8137ED27E2624>, <2 x double> %6) #7
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %52, <2 x double> <double 0xBD9D8453B9E7FD78, double 0xBD9D8453B9E7FD78>, <2 x double> %5) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %50, <2 x double> %22, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC054869BB9D7AF08, double 0xC054869BB9D7AF08>, <2 x double> <double 0xC0B1CDB68AB7C4E4, double 0xC0B1CDB68AB7C4E4>, <2 x double> %7) #7
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %55, <2 x double> <double 0x3ECD0697CBB9A376, double 0x3ECD0697CBB9A376>, <2 x double> %6) #7
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %56, <2 x double> <double 0x3DD9E6AD5DAB7037, double 0x3DD9E6AD5DAB7037>, <2 x double> %5) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %22, <2 x double> %57) #7
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x4040365402C89D37, double 0x4040365402C89D37>, <2 x double> <double 0x40A13FBBE32520BC, double 0x40A13FBBE32520BC>, <2 x double> %7) #7
  %60 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> <double 0xBED4ECCCA37D22C1, double 0xBED4ECCCA37D22C1>, <2 x double> %6) #7
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> <double 0xBE151D7181C08BA0, double 0xBE151D7181C08BA0>, <2 x double> %5) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %22, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC03D3BF3C95EBAA1, double 0xC03D3BF3C95EBAA1>, <2 x double> <double 0xC089AE616A35F399, double 0xC089AE616A35F399>, <2 x double> %7) #7
  %64 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %63, <2 x double> <double 0xBEB5F5266774B791, double 0xBEB5F5266774B791>, <2 x double> %6) #7
  %65 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %64, <2 x double> <double 0x3E4FCC572062092A, double 0x3E4FCC572062092A>, <2 x double> %5) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %62, <2 x double> %22, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FD620B48EBD7FD2, double 0x3FD620B48EBD7FD2>, <2 x double> <double 0x406C5BB5D950D59F, double 0x406C5BB5D950D59F>, <2 x double> %7) #7
  %68 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> <double 0x3EFD9F88B02EA0EC, double 0x3EFD9F88B02EA0EC>, <2 x double> %6) #7
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %68, <2 x double> <double 0xBE85F742EC43E5BC, double 0xBE85F742EC43E5BC>, <2 x double> %5) #7
  %70 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %66, <2 x double> %22, <2 x double> %69) #7
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x4015F57BD26EB8D7, double 0x4015F57BD26EB8D7>, <2 x double> <double 0xC0472AB3D15A1B99, double 0xC0472AB3D15A1B99>, <2 x double> %7) #7
  %72 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %71, <2 x double> <double 0xBF10C2E202FB0D80, double 0xBF10C2E202FB0D80>, <2 x double> %6) #7
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %72, <2 x double> <double 0x3EBB9E6C9DC6519D, double 0x3EBB9E6C9DC6519D>, <2 x double> %5) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %70, <2 x double> %22, <2 x double> %73) #7
  %75 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F598ED6853E65C9, double 0x3F598ED6853E65C9>, <2 x double> <double 0x40231D60ED75C166, double 0x40231D60ED75C166>, <2 x double> %7) #7
  %76 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> <double 0xBEFAE939BE608207, double 0xBEFAE939BE608207>, <2 x double> %6) #7
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %76, <2 x double> <double 0xBEEF4D25C3E0C2E2, double 0xBEEF4D25C3E0C2E2>, <2 x double> %5) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %22, <2 x double> %77) #7
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFF8AAF93486CD89, double 0xBFF8AAF93486CD89>, <2 x double> <double 0xC007AADCFF61A9EE, double 0xC007AADCFF61A9EE>, <2 x double> %7) #7
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %79, <2 x double> <double 0x3F4351BFC5997AEF, double 0x3F4351BFC5997AEF>, <2 x double> %6) #7
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %80, <2 x double> <double 0x3F1F9A326F9B89C2, double 0x3F1F9A326F9B89C2>, <2 x double> %5) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %22, <2 x double> %81) #7
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EC7AEAC5A2C6C34, double 0x3EC7AEAC5A2C6C34>, <2 x double> <double 0x3FC56155F28A44A2, double 0x3FC56155F28A44A2>, <2 x double> %7) #7
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %83, <2 x double> <double 0xBF5BC858BD2C3DEE, double 0xBF5BC858BD2C3DEE>, <2 x double> %6) #7
  %85 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 0xBF4C02DB40040B83, double 0xBF4C02DB40040B83>, <2 x double> %5) #7
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %82, <2 x double> %22, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE3FFFFD433AA8A, double 0x3FE3FFFFD433AA8A>, <2 x double> <double 0x3FE38258FA079AD9, double 0x3FE38258FA079AD9>, <2 x double> %7) #7
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> <double 0x3F2B61E95A64E1B4, double 0x3F2B61E95A64E1B4>, <2 x double> %6) #7
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %88, <2 x double> <double 0x3F7565BCD0E6A53F, double 0x3F7565BCD0E6A53F>, <2 x double> %5) #7
  %90 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %86, <2 x double> %22, <2 x double> %89) #7
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E1DEC4B817418DD, double 0x3E1DEC4B817418DD>, <2 x double> <double 0x3F515AA8B364E28B, double 0x3F515AA8B364E28B>, <2 x double> %7) #7
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %91, <2 x double> <double 0x3F93966FE5D12A2E, double 0x3F93966FE5D12A2E>, <2 x double> %6) #7
  %93 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %92, <2 x double> <double 0xBF9B82CE31288B51, double 0xBF9B82CE31288B51>, <2 x double> %5) #7
  %94 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %90, <2 x double> %22, <2 x double> %93) #7
  %95 = fmul <2 x double> %22, %94
  %96 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %95
  %97 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %94, <2 x double> %96) #7
  %98 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %94, <2 x double> %97) #7
  %99 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE0000000038D52, double 0xBFE0000000038D52>, <2 x double> <double 0xBFE0006CA4753FC8, double 0xBFE0006CA4753FC8>, <2 x double> %7) #7
  %100 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %99, <2 x double> <double 0xBFBA4F4EAB8311A0, double 0xBFBA4F4EAB8311A0>, <2 x double> %6) #7
  %101 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %100, <2 x double> <double 0x3FBCE2F21A042BE2, double 0x3FBCE2F21A042BE2>, <2 x double> %5) #7
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC8719E29ACB2723, double 0xBC8719E29ACB2723>, <2 x double> <double 0x3C7E64BB064EBF0B, double 0x3C7E64BB064EBF0B>, <2 x double> %7) #7
  %103 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %102, <2 x double> <double 0xBC5CBFA8068241AE, double 0xBC5CBFA8068241AE>, <2 x double> %6) #7
  %104 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %103, <2 x double> <double 0xBC52871BC5EF8ED7, double 0xBC52871BC5EF8ED7>, <2 x double> %5) #7
  %105 = fadd <2 x double> %95, %101
  %106 = fsub <2 x double> %105, %95
  %107 = fsub <2 x double> %105, %106
  %108 = fsub <2 x double> %95, %107
  %109 = fsub <2 x double> %101, %106
  %110 = fadd <2 x double> %109, %108
  %111 = fadd <2 x double> %98, %104
  %112 = fadd <2 x double> %111, %110
  %113 = fmul <2 x double> %22, %105
  %114 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %113
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %105, <2 x double> %22, <2 x double> %114) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %112, <2 x double> %22, <2 x double> %115) #7
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %105, <2 x double> %23, <2 x double> %116) #7
  %118 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D50B89397C75A64, double 0x3D50B89397C75A64>, <2 x double> <double 0x3EBADCB2F72A1080, double 0x3EBADCB2F72A1080>, <2 x double> %7) #7
  %119 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %118, <2 x double> <double 0xBFE45F306B230D62, double 0xBFE45F306B230D62>, <2 x double> %6) #7
  %120 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %119, <2 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <2 x double> %5) #7
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xB9ED96501FDC09B6, double 0xB9ED96501FDC09B6>, <2 x double> <double 0x3B2CF38C548C5245, double 0x3B2CF38C548C5245>, <2 x double> %7) #7
  %122 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %121, <2 x double> <double 0x3C619932A20CE10B, double 0x3C619932A20CE10B>, <2 x double> %6) #7
  %123 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0x3C6EE12E49CAD52E, double 0x3C6EE12E49CAD52E>, <2 x double> %5) #7
  %124 = fadd <2 x double> %113, %120
  %125 = fsub <2 x double> %124, %113
  %126 = fsub <2 x double> %124, %125
  %127 = fsub <2 x double> %113, %126
  %128 = fsub <2 x double> %120, %125
  %129 = fadd <2 x double> %128, %127
  %130 = fadd <2 x double> %117, %123
  %131 = fadd <2 x double> %130, %129
  %132 = fmul <2 x double> %22, %124
  %133 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %22, <2 x double> %133) #7
  %135 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %131, <2 x double> %22, <2 x double> %134) #7
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %23, <2 x double> %135) #7
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE250D048E7A1C6, double 0xBFE250D048E7A1C6>, <2 x double> <double 0xBFE250D055891FD0, double 0xBFE250D055891FD0>, <2 x double> %7) #7
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double 0xBFF20DD7505C75E8, double 0xBFF20DD7505C75E8>, <2 x double> %6) #7
  %139 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %138, <2 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <2 x double> %5) #7
  %140 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC7BA6EE6A6AB496, double 0xBC7BA6EE6A6AB496>, <2 x double> <double 0x3C81B3313996DEA7, double 0x3C81B3313996DEA7>, <2 x double> %7) #7
  %141 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %140, <2 x double> <double 0x3C9751223FE9154D, double 0x3C9751223FE9154D>, <2 x double> %6) #7
  %142 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %141, <2 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <2 x double> %5) #7
  %143 = fadd <2 x double> %132, %139
  %144 = fsub <2 x double> %143, %132
  %145 = fsub <2 x double> %143, %144
  %146 = fsub <2 x double> %132, %145
  %147 = fsub <2 x double> %139, %144
  %148 = fadd <2 x double> %147, %146
  %149 = fadd <2 x double> %136, %142
  %150 = fadd <2 x double> %149, %148
  %151 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %152, <2 x double> %143, <2 x double> %6) #7
  %154 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %150, <2 x double> %6) #7
  %155 = fmul <2 x double> %153, %4
  %156 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %155
  %157 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %153, <2 x double> %4, <2 x double> %156) #7
  %158 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %154, <2 x double> %4, <2 x double> %157) #7
  %159 = fadd <2 x double> %143, %155
  %160 = fsub <2 x double> %159, %155
  %161 = fsub <2 x double> %159, %160
  %162 = fsub <2 x double> %155, %161
  %163 = fsub <2 x double> %143, %160
  %164 = fadd <2 x double> %163, %162
  %165 = fadd <2 x double> %150, %158
  %166 = fadd <2 x double> %165, %164
  %167 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %159, <2 x double> %155, <2 x double> %6) #7
  %168 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %166, <2 x double> %158, <2 x double> %6) #7
  %169 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %167
  %170 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %169
  %171 = fsub <2 x double> %170, %167
  %172 = fadd <2 x double> %171, zeroinitializer
  %173 = fsub <2 x double> %172, %168
  %174 = fadd <2 x double> %167, %168
  %175 = fmul <2 x double> %174, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %176 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %175, i32 8) #7
  %177 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %176) #7
  %178 = fmul <2 x double> %176, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %179 = fadd <2 x double> %167, %178
  %180 = fsub <2 x double> %179, %167
  %181 = fsub <2 x double> %179, %180
  %182 = fsub <2 x double> %167, %181
  %183 = fsub <2 x double> %178, %180
  %184 = fadd <2 x double> %183, %182
  %185 = fadd <2 x double> %168, %184
  %186 = fmul <2 x double> %176, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %187 = fadd <2 x double> %186, %179
  %188 = fsub <2 x double> %187, %179
  %189 = fsub <2 x double> %187, %188
  %190 = fsub <2 x double> %179, %189
  %191 = fsub <2 x double> %186, %188
  %192 = fadd <2 x double> %191, %190
  %193 = fadd <2 x double> %192, %185
  %194 = fmul <2 x double> %187, %187
  %195 = fadd <2 x double> %187, %187
  %196 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %194
  %197 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> %187, <2 x double> %196) #7
  %198 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %195, <2 x double> %193, <2 x double> %197) #7
  %199 = fmul <2 x double> %194, %194
  %200 = fadd <2 x double> %194, %194
  %201 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %199
  %202 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %194, <2 x double> %194, <2 x double> %201) #7
  %203 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %200, <2 x double> %198, <2 x double> %202) #7
  %204 = fmul <2 x double> %199, %199
  %205 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %206 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %207 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %208 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %194, <2 x double> %206, <2 x double> %207) #7
  %209 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %210 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %211 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %194, <2 x double> %209, <2 x double> %210) #7
  %212 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %199, <2 x double> %208, <2 x double> %211) #7
  %213 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %204, <2 x double> %205, <2 x double> %212) #7
  %214 = fmul <2 x double> %187, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %215 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %214
  %216 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %187, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %215) #7
  %217 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %193, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %216) #7
  %218 = fadd <2 x double> %214, <double 5.000000e-01, double 5.000000e-01>
  %219 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %218
  %220 = fadd <2 x double> %214, %219
  %221 = fadd <2 x double> %220, %217
  %222 = fmul <2 x double> %187, %218
  %223 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %222
  %224 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %218, <2 x double> %187, <2 x double> %223) #7
  %225 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %221, <2 x double> %187, <2 x double> %224) #7
  %226 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %218, <2 x double> %193, <2 x double> %225) #7
  %227 = fadd <2 x double> %222, <double 1.000000e+00, double 1.000000e+00>
  %228 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %227
  %229 = fadd <2 x double> %222, %228
  %230 = fadd <2 x double> %229, %226
  %231 = fmul <2 x double> %187, %227
  %232 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %231
  %233 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %227, <2 x double> %187, <2 x double> %232) #7
  %234 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %230, <2 x double> %187, <2 x double> %233) #7
  %235 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %227, <2 x double> %193, <2 x double> %234) #7
  %236 = fadd <2 x double> %231, <double 1.000000e+00, double 1.000000e+00>
  %237 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %236
  %238 = fadd <2 x double> %231, %237
  %239 = fadd <2 x double> %238, %235
  %240 = fmul <2 x double> %199, %213
  %241 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %240
  %242 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %199, <2 x double> %213, <2 x double> %241) #7
  %243 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %203, <2 x double> %213, <2 x double> %242) #7
  %244 = fadd <2 x double> %236, %240
  %245 = fsub <2 x double> %236, %244
  %246 = fadd <2 x double> %240, %245
  %247 = fadd <2 x double> %246, %239
  %248 = fadd <2 x double> %247, %243
  %249 = ashr <4 x i32> %177, <i32 1, i32 1, i32 1, i32 1>
  %250 = add <4 x i32> %249, <i32 1023, i32 1023, i32 undef, i32 1023>
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %252 = and <4 x i32> %251, <i32 0, i32 -1, i32 0, i32 -1>
  %253 = shl <4 x i32> %252, <i32 20, i32 20, i32 20, i32 20>
  %254 = bitcast <4 x i32> %253 to <2 x double>
  %255 = fmul <2 x double> %244, %254
  %256 = add <4 x i32> %177, <i32 1023, i32 1023, i32 undef, i32 1023>
  %257 = sub <4 x i32> %256, %249
  %258 = shufflevector <4 x i32> %257, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %259 = and <4 x i32> %258, <i32 0, i32 -1, i32 0, i32 -1>
  %260 = shl <4 x i32> %259, <i32 20, i32 20, i32 20, i32 20>
  %261 = bitcast <4 x i32> %260 to <2 x double>
  %262 = fmul <2 x double> %255, %261
  %263 = fmul <2 x double> %248, %254
  %264 = fmul <2 x double> %263, %261
  %265 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %167, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %266 = bitcast <2 x double> %265 to <2 x i64>
  %267 = bitcast <2 x double> %262 to <2 x i64>
  %268 = xor <2 x i64> %266, <i64 -1, i64 -1>
  %269 = and <2 x i64> %268, %267
  %270 = bitcast <2 x double> %264 to <2 x i64>
  %271 = and <2 x i64> %270, %268
  %272 = bitcast <2 x i64> %269 to <2 x double>
  %273 = bitcast <2 x i64> %271 to <2 x double>
  %274 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %272, <2 x double> %169, <2 x double> %5) #7
  %275 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %273, <2 x double> %173, <2 x double> %5) #7
  %276 = fmul <2 x double> %22, %274
  %277 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %276
  %278 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %274, <2 x double> %22, <2 x double> %277) #7
  %279 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %275, <2 x double> %22, <2 x double> %278) #7
  %280 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %274, <2 x double> %23, <2 x double> %279) #7
  %281 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %276, <2 x double> %274, <2 x double> %6) #7
  %282 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %280, <2 x double> %275, <2 x double> %6) #7
  %283 = fadd <2 x double> %281, %282
  %284 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %283, <2 x double> %8) #7
  %285 = ashr <2 x i64> %2, <i64 63, i64 63>
  %286 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %284
  %287 = bitcast <2 x i64> %285 to <2 x double>
  %288 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %284, <2 x double> %286, <2 x double> %287) #7
  %289 = fcmp uno <2 x double> %0, zeroinitializer
  %290 = sext <2 x i1> %289 to <2 x i64>
  %291 = bitcast <2 x i64> %290 to <2 x double>
  %292 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %288, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %291) #7
  ret <2 x double> %292
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid2_u05avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %11, <2 x double> %13) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> %12, <2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %12, <2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %12, <2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %12, <2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %12, <2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #7
  %20 = fmul <2 x double> %19, %12
  %21 = fadd <2 x double> %20, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %22 = fsub <2 x double> %21, %20
  %23 = fsub <2 x double> %21, %22
  %24 = fsub <2 x double> %20, %23
  %25 = fsub <2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %22
  %26 = fadd <2 x double> %25, %24
  %27 = fadd <2 x double> %26, <double 0x3C50B00000000000, double 0x3C50B00000000000>
  %28 = fmul <2 x double> %12, %21
  %29 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %28
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %21, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %21, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %27, <2 x double> %31) #7
  %33 = fadd <2 x double> %28, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %34 = fsub <2 x double> %33, %28
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %28, %35
  %37 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %32, <double 0x3C81A80000000000, double 0x3C81A80000000000>
  %40 = fadd <2 x double> %39, %38
  %41 = fmul <2 x double> %11, %33
  %42 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %11, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %40, <2 x double> %11, <2 x double> %43) #7
  %45 = fadd <2 x double> %44, %41
  %46 = bitcast <2 x double> %1 to <2 x i64>
  %47 = icmp eq <2 x i64> %46, <i64 -9223372036854775808, i64 -9223372036854775808>
  %48 = sext <2 x i1> %47 to <2 x i64>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %12, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %12, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %12, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %53, <2 x double> %12, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %54, <2 x double> %12, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #7
  %56 = fmul <2 x double> %12, %55
  %57 = fadd <2 x double> %56, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %58 = fsub <2 x double> %57, %56
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> %56, %59
  %61 = fsub <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %62, <double 0xBC33500000000000, double 0xBC33500000000000>
  %64 = fmul <2 x double> %12, %57
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %57, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %57, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %63, <2 x double> %67) #7
  %69 = fadd <2 x double> %64, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %70 = fsub <2 x double> %69, %64
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %64, %71
  %73 = fsub <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %68, <double 0xBC76900000000000, double 0xBC76900000000000>
  %76 = fadd <2 x double> %75, %74
  %77 = fmul <2 x double> %12, %69
  %78 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %77
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %12, <2 x double> %78) #7
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %12, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %14, <2 x double> %80) #7
  %82 = fadd <2 x double> %77, <double 1.000000e+00, double 1.000000e+00>
  %83 = fsub <2 x double> %82, %77
  %84 = fsub <2 x double> %82, %83
  %85 = fsub <2 x double> %77, %84
  %86 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %83
  %87 = fadd <2 x double> %86, %85
  %88 = fadd <2 x double> %81, %87
  %89 = fadd <2 x double> %82, %88
  %90 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %91 = icmp eq <4 x i32> %90, zeroinitializer
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %94 = bitcast <4 x i32> %93 to <2 x double>
  %95 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %89, <2 x double> %50, <2 x double> %94) #7
  %96 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %50, <2 x double> %89, <2 x double> %94) #7
  %97 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %98 = icmp ne <4 x i32> %97, zeroinitializer
  %99 = sext <4 x i1> %98 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -9223372036854775808, i64 -9223372036854775808>
  %103 = bitcast <2 x double> %95 to <2 x i64>
  %104 = xor <2 x i64> %102, %103
  %105 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %106 = and <4 x i32> %105, <i32 4, i32 4, i32 4, i32 4>
  %107 = icmp ne <4 x i32> %106, zeroinitializer
  %108 = sext <4 x i1> %107 to <4 x i32>
  %109 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -9223372036854775808, i64 -9223372036854775808>
  %112 = bitcast <2 x double> %96 to <2 x i64>
  %113 = xor <2 x i64> %111, %112
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = and <2 x i64> %46, <i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %116, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %118 = bitcast <2 x double> %117 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -1, i64 -1>
  %120 = and <2 x i64> %104, %119
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %114, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %117) #7
  %122 = fcmp oeq <2 x double> %116, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %123 = sext <2 x i1> %122 to <2 x i64>
  %124 = or <2 x i64> %120, %123
  %125 = bitcast <2 x double> %121 to <2 x i64>
  %126 = or <2 x i64> %125, %123
  %127 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %127, align 16, !alias.scope !27
  %128 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %129 = bitcast <2 x double>* %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 16, !alias.scope !27
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid2_u35avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <2 x double> %12, <2 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %12, <2 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %12, <2 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %12, <2 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %12, <2 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %12, <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #7
  %19 = fmul <2 x double> %18, %11
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <2 x double> %12, <2 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %12, <2 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %12, <2 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %12, <2 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %12, <2 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> %12, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %12, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %27 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <4 x i32> %27, zeroinitializer
  %29 = sext <4 x i1> %28 to <4 x i32>
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %26, <2 x double> %19, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> %26, <2 x double> %31) #7
  %34 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <4 x i32> %34, zeroinitializer
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <2 x i64> %38, <i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = bitcast <2 x double> %32 to <2 x i64>
  %41 = xor <2 x i64> %39, %40
  %42 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %43 = and <4 x i32> %42, <i32 4, i32 4, i32 4, i32 4>
  %44 = icmp ne <4 x i32> %43, zeroinitializer
  %45 = sext <4 x i1> %44 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -9223372036854775808, i64 -9223372036854775808>
  %49 = bitcast <2 x double> %33 to <2 x i64>
  %50 = xor <2 x i64> %48, %49
  %51 = bitcast <2 x double> %1 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 9223372036854775807, i64 9223372036854775807>
  %53 = bitcast <2 x i64> %52 to <2 x double>
  %54 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %53, <2 x double> <double 2.500000e+08, double 2.500000e+08>, i8 30) #7
  %55 = bitcast <2 x double> %54 to <2 x i64>
  %56 = xor <2 x i64> %55, <i64 -1, i64 -1>
  %57 = and <2 x i64> %41, %56
  %58 = and <2 x i64> %50, %56
  %59 = fcmp oeq <2 x double> %53, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %60 = sext <2 x i1> %59 to <2 x i64>
  %61 = or <2 x i64> %57, %60
  %62 = or <2 x i64> %58, %60
  %63 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %63, align 16, !alias.scope !30
  %64 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %65 = bitcast <2 x double>* %64 to <2 x i64>*
  store <2 x i64> %62, <2 x i64>* %65, align 16, !alias.scope !30
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_modfd2_avx2128(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #7
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %15, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 30) #7
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> zeroinitializer, <2 x double> %16) #7
  %18 = bitcast <2 x double> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 9223372036854775807, i64 9223372036854775807>
  %20 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %21 = or <2 x i64> %19, %20
  %22 = fsub <2 x double> %1, %17
  %23 = bitcast <2 x double> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807>
  %25 = or <2 x i64> %24, %20
  %26 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %26, align 16, !alias.scope !33
  %27 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %28 = bitcast <2 x double>* %27 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %28, align 16, !alias.scope !33
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_logd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %27 = fdiv <2 x double> %25, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %28, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %27, %28
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <2 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <2 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <2 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %34, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %33, <2 x double> %36) #7
  %38 = bitcast <16 x i8> %24 to <4 x i32>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %40 = sitofp <2 x i32> %39 to <2 x double>
  %41 = fmul <2 x double> %40, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %37, <2 x double> %42) #7
  %44 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %45 = sext <2 x i1> %44 to <2 x i64>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %49 = fcmp uno <2 x double> %4, zeroinitializer
  %50 = select <2 x i1> %49, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %48
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %50) #7
  %52 = fcmp oeq <2 x double> %4, zeroinitializer
  %53 = sext <2 x i1> %52 to <2 x i64>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %54) #7
  ret <2 x double> %55
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_logd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <2 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <2 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <2 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %58, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %58, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %58, <2 x double> %61) #7
  %63 = fmul <2 x double> %38, <double 2.000000e+00, double 2.000000e+00>
  %64 = fmul <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %65 = fadd <2 x double> %59, %63
  %66 = fsub <2 x double> %59, %65
  %67 = fadd <2 x double> %63, %66
  %68 = fadd <2 x double> %62, %67
  %69 = fadd <2 x double> %64, %68
  %70 = fmul <2 x double> %38, %47
  %71 = fmul <2 x double> %55, %70
  %72 = fadd <2 x double> %65, %71
  %73 = fsub <2 x double> %65, %72
  %74 = fadd <2 x double> %71, %73
  %75 = fadd <2 x double> %74, %69
  %76 = fadd <2 x double> %72, %75
  %77 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %78 = sext <2 x i1> %77 to <2 x i64>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %76, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %82 = fcmp uno <2 x double> %4, zeroinitializer
  %83 = select <2 x i1> %82, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %81
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %80, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %83) #7
  %85 = fcmp oeq <2 x double> %4, zeroinitializer
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %87) #7
  ret <2 x double> %88
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_powd2_u10avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = tail call <2 x double> @Sleef_powd2_u10avx2128(<2 x double> %0, <2 x double> %1)
  ret <2 x double> %3
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_sinhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = fsub <2 x double> %103, %105
  %112 = fsub <2 x double> %103, %111
  %113 = fsub <2 x double> %112, %105
  %114 = fadd <2 x double> %113, %104
  %115 = fsub <2 x double> %114, %110
  %116 = fadd <2 x double> %111, %115
  %117 = fmul <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %119 = fcmp uno <2 x double> %117, zeroinitializer
  %120 = select <2 x i1> %119, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %118
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %120) #7
  %122 = bitcast <2 x double> %121 to <2 x i64>
  %123 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %124 = xor <2 x i64> %123, %122
  %125 = fcmp uno <2 x double> %0, zeroinitializer
  %126 = bitcast <2 x i64> %124 to <2 x double>
  %127 = select <2 x i1> %125, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %126
  ret <2 x double> %127
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_coshd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = fadd <2 x double> %105, %103
  %112 = fsub <2 x double> %103, %111
  %113 = fadd <2 x double> %105, %112
  %114 = fadd <2 x double> %113, %104
  %115 = fadd <2 x double> %110, %114
  %116 = fadd <2 x double> %111, %115
  %117 = fmul <2 x double> %116, <double 5.000000e-01, double 5.000000e-01>
  %118 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.100000e+02, double 7.100000e+02>, i8 30) #7
  %119 = fcmp uno <2 x double> %117, zeroinitializer
  %120 = select <2 x i1> %119, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %118
  %121 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %120) #7
  %122 = fcmp uno <2 x double> %0, zeroinitializer
  %123 = select <2 x i1> %122, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %121
  ret <2 x double> %123
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_tanhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = fmul <2 x double> %18, %18
  %26 = fadd <2 x double> %18, %18
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %18, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fmul <2 x double> %25, %25
  %31 = fadd <2 x double> %25, %25
  %32 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %25, <2 x double> %32) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %29, <2 x double> %33) #7
  %35 = fmul <2 x double> %30, %30
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %39, <2 x double> %42) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %35, <2 x double> %36, <2 x double> %43) #7
  %45 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %24, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %47) #7
  %49 = fadd <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <2 x double> %45, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fmul <2 x double> %18, %49
  %54 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %18, <2 x double> %54) #7
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %18, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %24, <2 x double> %56) #7
  %58 = fadd <2 x double> %53, <double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <2 x double> %53, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %18, %58
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %18, <2 x double> %63) #7
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %18, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %24, <2 x double> %65) #7
  %67 = fadd <2 x double> %62, <double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <2 x double> %62, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %30, %44
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %44, <2 x double> %72) #7
  %74 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %44, <2 x double> %73) #7
  %75 = fadd <2 x double> %67, %71
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %77, %70
  %79 = fadd <2 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add <4 x i32> %80, <i32 1023, i32 1023, i32 undef, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %83 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %84 to <2 x double>
  %86 = fmul <2 x double> %75, %85
  %87 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %88 = sub <4 x i32> %87, %80
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = bitcast <4 x i32> %91 to <2 x double>
  %93 = fmul <2 x double> %86, %92
  %94 = fmul <2 x double> %79, %85
  %95 = fmul <2 x double> %94, %92
  %96 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %97 = bitcast <2 x double> %96 to <2 x i64>
  %98 = bitcast <2 x double> %93 to <2 x i64>
  %99 = xor <2 x i64> %97, <i64 -1, i64 -1>
  %100 = and <2 x i64> %99, %98
  %101 = bitcast <2 x double> %95 to <2 x i64>
  %102 = and <2 x i64> %101, %99
  %103 = bitcast <2 x i64> %100 to <2 x double>
  %104 = bitcast <2 x i64> %102 to <2 x double>
  %105 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %103
  %106 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  %107 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %105, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %108 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %104
  %109 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %105, <2 x double> %107) #7
  %110 = fmul <2 x double> %109, %105
  %111 = bitcast <2 x double> %105 to <2 x i64>
  %112 = xor <2 x i64> %111, <i64 -9223372036854775808, i64 -9223372036854775808>
  %113 = bitcast <2 x double> %110 to <2 x i64>
  %114 = xor <2 x i64> %113, <i64 -9223372036854775808, i64 -9223372036854775808>
  %115 = bitcast <2 x i64> %112 to <2 x double>
  %116 = bitcast <2 x i64> %114 to <2 x double>
  %117 = fadd <2 x double> %103, %115
  %118 = fsub <2 x double> %117, %103
  %119 = fsub <2 x double> %117, %118
  %120 = fsub <2 x double> %103, %119
  %121 = fsub <2 x double> %115, %118
  %122 = fadd <2 x double> %121, %120
  %123 = fadd <2 x double> %104, %116
  %124 = fadd <2 x double> %123, %122
  %125 = fadd <2 x double> %105, %103
  %126 = fsub <2 x double> %125, %103
  %127 = fsub <2 x double> %125, %126
  %128 = fsub <2 x double> %103, %127
  %129 = fsub <2 x double> %105, %126
  %130 = fadd <2 x double> %129, %128
  %131 = fadd <2 x double> %110, %104
  %132 = fadd <2 x double> %131, %130
  %133 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %125
  %134 = fmul <2 x double> %133, %117
  %135 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %134
  %136 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %133, <2 x double> %117, <2 x double> %135) #7
  %137 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %125
  %138 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %137, <2 x double> %133, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %139 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %132
  %140 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %139, <2 x double> %133, <2 x double> %138) #7
  %141 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %124, <2 x double> %133, <2 x double> %136) #7
  %142 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %134, <2 x double> %140, <2 x double> %141) #7
  %143 = fadd <2 x double> %142, %134
  %144 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %145 = fcmp uno <2 x double> %143, zeroinitializer
  %146 = select <2 x i1> %145, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %144
  %147 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %143, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %146) #7
  %148 = bitcast <2 x double> %147 to <2 x i64>
  %149 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %150 = xor <2 x i64> %149, %148
  %151 = fcmp uno <2 x double> %0, zeroinitializer
  %152 = bitcast <2 x i64> %150 to <2 x double>
  %153 = select <2 x i1> %151, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %152
  ret <2 x double> %153
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_sinhd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #7
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %4) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %8) #7
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <2 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <2 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <2 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <2 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E>, <2 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %17, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %16, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %13, <2 x double> %20) #7
  %22 = fmul <2 x double> %9, %10
  %23 = fmul <2 x double> %22, %21
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %23) #7
  %25 = fadd <2 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %29 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %30 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %31 = add <4 x i32> %30, <i32 1023, i32 1023, i32 undef, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %33 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %34 = shl <4 x i32> %33, <i32 20, i32 20, i32 20, i32 20>
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %29, %35
  %37 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 1023>
  %38 = sub <4 x i32> %37, %30
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %40 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %36, %42
  %44 = fadd <2 x double> %43, <double -1.000000e+00, double -1.000000e+00>
  %45 = bitcast <4 x i32> %28 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %25, <2 x double> %45) #7
  %47 = fadd <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %48 = fadd <2 x double> %46, <double 1.000000e+00, double 1.000000e+00>
  %49 = fdiv <2 x double> %47, %48
  %50 = fmul <2 x double> %46, <double 5.000000e-01, double 5.000000e-01>
  %51 = fmul <2 x double> %50, %49
  %52 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %53 = fcmp uno <2 x double> %51, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %54) #7
  %56 = bitcast <2 x double> %55 to <2 x i64>
  %57 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <2 x i64> %57, %56
  %59 = fcmp uno <2 x double> %0, zeroinitializer
  %60 = bitcast <2 x i64> %58 to <2 x double>
  %61 = select <2 x i1> %59, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %60
  ret <2 x double> %61
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_coshd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #7
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #7
  %8 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %4) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %6, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %8) #7
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <2 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #7
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <2 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <2 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <2 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %9, <2 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <2 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %17, <2 x double> %18) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %16, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %13, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %9, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %9, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %9, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add <4 x i32> %25, <i32 1023, i32 1023, i32 undef, i32 1023>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %28 = and <4 x i32> %27, <i32 0, i32 -1, i32 0, i32 -1>
  %29 = shl <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %30 = bitcast <4 x i32> %29 to <2 x double>
  %31 = fmul <2 x double> %24, %30
  %32 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 1023>
  %33 = sub <4 x i32> %32, %25
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %35 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %31, %37
  %39 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #7
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %38, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %42 = bitcast <2 x double> %41 to <2 x i64>
  %43 = bitcast <2 x double> %40 to <2 x i64>
  %44 = xor <2 x i64> %42, <i64 -1, i64 -1>
  %45 = and <2 x i64> %44, %43
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %46
  %48 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %46, <2 x double> %47) #7
  %49 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 7.090000e+02, double 7.090000e+02>, i8 30) #7
  %50 = fcmp uno <2 x double> %48, zeroinitializer
  %51 = select <2 x i1> %50, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %49
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %51) #7
  %53 = fcmp uno <2 x double> %0, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  ret <2 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_tanhd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #7
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #7
  %9 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <2 x double> %5) #7
  %10 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %7, <2 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <2 x double> %9) #7
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <2 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #7
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <2 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <2 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <2 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #7
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E>, <2 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %18, <2 x double> %19) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %17, <2 x double> %20) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %14, <2 x double> %21) #7
  %23 = fmul <2 x double> %10, %11
  %24 = fmul <2 x double> %23, %22
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> %24) #7
  %26 = fadd <2 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %30 = fadd <2 x double> %26, <double 1.000000e+00, double 1.000000e+00>
  %31 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %32 = add <4 x i32> %31, <i32 1023, i32 1023, i32 undef, i32 1023>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  %38 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 1023>
  %39 = sub <4 x i32> %38, %31
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %41 = and <4 x i32> %40, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = fmul <2 x double> %37, %43
  %45 = fadd <2 x double> %44, <double -1.000000e+00, double -1.000000e+00>
  %46 = bitcast <4 x i32> %29 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> %26, <2 x double> %46) #7
  %48 = fadd <2 x double> %47, <double 2.000000e+00, double 2.000000e+00>
  %49 = fdiv <2 x double> %47, %48
  %50 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #7
  %51 = fcmp uno <2 x double> %49, zeroinitializer
  %52 = select <2 x i1> %51, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %50
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %49, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %52) #7
  %54 = bitcast <2 x double> %53 to <2 x i64>
  %55 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <2 x i64> %55, %54
  %57 = fcmp uno <2 x double> %0, zeroinitializer
  %58 = bitcast <2 x i64> %56 to <2 x double>
  %59 = select <2 x i1> %57, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %58
  ret <2 x double> %59
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_asinhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_asinhd2_u10avx2128(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_acoshd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_acoshd2_u10avx2128(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_atanhd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <2 x double> %5, <double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <2 x double> %5, %6
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <2 x double> %4, %6
  %10 = fadd <2 x double> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <2 x double> %5, %19
  %21 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %19, <2 x double> %5, <2 x double> %21) #7
  %23 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %19, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %25 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %25, <2 x double> %19, <2 x double> %24) #7
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %10, <2 x double> %19, <2 x double> %22) #7
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %26, <2 x double> %27) #7
  %29 = fmul <2 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %29, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %31 = fmul <2 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000>
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %31, <2 x double> %30) #7
  %33 = bitcast <2 x double> %32 to <4 x i32>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %35 = lshr <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <2 x double> %30 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %38) #7
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = sub <4 x i32> %35, %40
  %42 = sub <4 x i32> zeroinitializer, %41
  %43 = ashr <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = add <4 x i32> %43, <i32 1023, i32 1023, i32 undef, i32 1023>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %20, %48
  %50 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %41
  %51 = sub <4 x i32> %50, %43
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %53 = and <4 x i32> %52, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %54 to <2 x double>
  %56 = fmul <2 x double> %49, %55
  %57 = fmul <2 x double> %28, %48
  %58 = fmul <2 x double> %57, %55
  %59 = fadd <2 x double> %56, <double -1.000000e+00, double -1.000000e+00>
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %59, %60
  %62 = fsub <2 x double> %56, %61
  %63 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %60
  %64 = fadd <2 x double> %63, %62
  %65 = fadd <2 x double> %58, %64
  %66 = fadd <2 x double> %56, <double 1.000000e+00, double 1.000000e+00>
  %67 = fsub <2 x double> %66, %56
  %68 = fsub <2 x double> %66, %67
  %69 = fsub <2 x double> %56, %68
  %70 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %67
  %71 = fadd <2 x double> %70, %69
  %72 = fadd <2 x double> %58, %71
  %73 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %66
  %74 = fmul <2 x double> %59, %73
  %75 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %73, <2 x double> %59, <2 x double> %75) #7
  %77 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %66
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %77, <2 x double> %73, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %79 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %72
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %79, <2 x double> %73, <2 x double> %78) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %73, <2 x double> %76) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %80, <2 x double> %81) #7
  %83 = fmul <2 x double> %74, %74
  %84 = fadd <2 x double> %74, %74
  %85 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %83
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %74, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %84, <2 x double> %82, <2 x double> %86) #7
  %88 = fmul <2 x double> %83, %83
  %89 = fmul <2 x double> %88, %88
  %90 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %91 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %88, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %90) #7
  %92 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %93 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %94 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %88, <2 x double> %92, <2 x double> %93) #7
  %95 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %89, <2 x double> %91, <2 x double> %94) #7
  %96 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %95, <2 x double> %83, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %97 = shufflevector <4 x i32> %41, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %98 = sitofp <2 x i32> %97 to <2 x double>
  %99 = fmul <2 x double> %98, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %100 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %99
  %101 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %98, <2 x double> %100) #7
  %102 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %98, <2 x double> %101) #7
  %103 = fmul <2 x double> %74, <double 2.000000e+00, double 2.000000e+00>
  %104 = fmul <2 x double> %82, <double 2.000000e+00, double 2.000000e+00>
  %105 = fadd <2 x double> %99, %103
  %106 = fsub <2 x double> %99, %105
  %107 = fadd <2 x double> %103, %106
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fmul <2 x double> %74, %83
  %111 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %110
  %112 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %74, <2 x double> %111) #7
  %113 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %87, <2 x double> %74, <2 x double> %112) #7
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %82, <2 x double> %113) #7
  %115 = fmul <2 x double> %96, %110
  %116 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %115
  %117 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %110, <2 x double> %96, <2 x double> %116) #7
  %118 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %114, <2 x double> %96, <2 x double> %117) #7
  %119 = fadd <2 x double> %105, %115
  %120 = fsub <2 x double> %105, %119
  %121 = fadd <2 x double> %115, %120
  %122 = fadd <2 x double> %121, %109
  %123 = fadd <2 x double> %122, %118
  %124 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 1.000000e+00, double 1.000000e+00>, i8 30) #7
  %125 = bitcast <2 x double> %124 to <2 x i64>
  %126 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %127 = sext <2 x i1> %126 to <2 x i64>
  %128 = fadd <2 x double> %119, %123
  %129 = fmul <2 x double> %128, <double 5.000000e-01, double 5.000000e-01>
  %130 = bitcast <2 x i64> %127 to <2 x double>
  %131 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %129, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %130) #7
  %132 = bitcast <2 x double> %131 to <2 x i64>
  %133 = or <2 x i64> %132, %125
  %134 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = xor <2 x i64> %133, %134
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %138 = fcmp uno <2 x double> %136, zeroinitializer
  %139 = fcmp uno <2 x double> %0, zeroinitializer
  %140 = or <2 x i1> %137, %139
  %141 = or <2 x i1> %140, %138
  %142 = select <2 x i1> %141, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %136
  ret <2 x double> %142
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_cbrtd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = bitcast <2 x double> %5 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %13) #7
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = sub <4 x i32> %10, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 undef, i32 undef>
  %18 = xor <4 x i32> %16, <i32 -2, i32 -2, i32 -2, i32 -2>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %24, %0
  %26 = sub <4 x i32> <i32 1022, i32 1022, i32 undef, i32 1022>, %16
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = shufflevector <4 x i32> %17, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fadd <2 x double> %34, <double 6.144000e+03, double 6.144000e+03>
  %36 = fmul <2 x double> %35, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %36) #7
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %39, <double 3.000000e+00, double 3.000000e+00>
  %41 = fsub <2 x double> %35, %40
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #7
  %43 = icmp eq <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %46) #7
  %48 = icmp eq <4 x i32> %42, <i32 2, i32 2, i32 2, i32 2>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x double>
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %51) #7
  %53 = add <4 x i32> %37, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add <4 x i32> %54, <i32 1023, i32 1023, i32 undef, i32 1023>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %57 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %58 = shl <4 x i32> %57, <i32 20, i32 20, i32 20, i32 20>
  %59 = bitcast <4 x i32> %58 to <2 x double>
  %60 = fmul <2 x double> %52, %59
  %61 = add <4 x i32> %37, <i32 -1025, i32 -1025, i32 undef, i32 -1025>
  %62 = sub <4 x i32> %61, %54
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %64 = and <4 x i32> %63, <i32 0, i32 -1, i32 0, i32 -1>
  %65 = shl <4 x i32> %64, <i32 20, i32 20, i32 20, i32 20>
  %66 = bitcast <4 x i32> %65 to <2 x double>
  %67 = fmul <2 x double> %60, %66
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = bitcast <2 x double> %32 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = xor <2 x i64> %70, %68
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = and <2 x i64> %69, <i64 9223372036854775807, i64 9223372036854775807>
  %74 = bitcast <2 x i64> %73 to <2 x double>
  %75 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <2 x double> %74, <2 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %74, <2 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %74, <2 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %77, <2 x double> %74, <2 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %74, <2 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %80 = fmul <2 x double> %79, %79
  %81 = fmul <2 x double> %80, %80
  %82 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %81, <2 x double> %82) #7
  %84 = fmul <2 x double> %83, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %85 = fsub <2 x double> %79, %84
  %86 = fmul <2 x double> %85, %74
  %87 = fmul <2 x double> %85, %86
  %88 = fmul <2 x double> %87, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %89 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %87, <2 x double> %85, <2 x double> <double -1.000000e+00, double -1.000000e+00>) #7
  %90 = fmul <2 x double> %89, %88
  %91 = fsub <2 x double> %87, %90
  %92 = fmul <2 x double> %91, %72
  ret <2 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_cbrtd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %6 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = bitcast <2 x double> %5 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %13) #7
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = sub <4 x i32> %10, %15
  %17 = add <4 x i32> %16, <i32 1, i32 1, i32 undef, i32 undef>
  %18 = xor <4 x i32> %16, <i32 -2, i32 -2, i32 -2, i32 -2>
  %19 = ashr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = add <4 x i32> %19, <i32 1023, i32 1023, i32 undef, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %22 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <4 x i32> %23 to <2 x double>
  %25 = fmul <2 x double> %24, %0
  %26 = sub <4 x i32> <i32 1022, i32 1022, i32 undef, i32 1022>, %16
  %27 = sub <4 x i32> %26, %19
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %29 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %25, %31
  %33 = shufflevector <4 x i32> %17, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fadd <2 x double> %34, <double 6.144000e+03, double 6.144000e+03>
  %36 = fmul <2 x double> %35, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %36) #7
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %39, <double 3.000000e+00, double 3.000000e+00>
  %41 = fsub <2 x double> %35, %40
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #7
  %43 = icmp eq <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %46) #7
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <2 x double> %46) #7
  %49 = icmp eq <4 x i32> %42, <i32 2, i32 2, i32 2, i32 2>
  %50 = sext <4 x i1> %49 to <4 x i32>
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %52 = bitcast <4 x i32> %51 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %52) #7
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <2 x double> %52) #7
  %55 = bitcast <2 x double> %53 to <2 x i64>
  %56 = bitcast <2 x double> %32 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <2 x i64> %57, %55
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = bitcast <2 x double> %54 to <2 x i64>
  %61 = xor <2 x i64> %57, %60
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = and <2 x i64> %56, <i64 9223372036854775807, i64 9223372036854775807>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <2 x double> %64, <2 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %64, <2 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %66, <2 x double> %64, <2 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911>) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %67, <2 x double> %64, <2 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %68, <2 x double> %64, <2 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #7
  %70 = fmul <2 x double> %69, %69
  %71 = fmul <2 x double> %70, %70
  %72 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %71, <2 x double> %72) #7
  %74 = fmul <2 x double> %73, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %75 = fsub <2 x double> %69, %74
  %76 = fmul <2 x double> %75, %75
  %77 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %76
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %75, <2 x double> %77) #7
  %79 = fmul <2 x double> %76, %76
  %80 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %79
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %76, <2 x double> %80) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %78, <2 x double> %76, <2 x double> %81) #7
  %83 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %76, <2 x double> %78, <2 x double> %82) #7
  %84 = fmul <2 x double> %79, %64
  %85 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %84
  %86 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %79, <2 x double> %64, <2 x double> %85) #7
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %83, <2 x double> %64, <2 x double> %86) #7
  %88 = bitcast <2 x double> %75 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = fadd <2 x double> %84, %90
  %92 = fsub <2 x double> %91, %84
  %93 = fsub <2 x double> %91, %92
  %94 = fsub <2 x double> %84, %93
  %95 = fsub <2 x double> %90, %92
  %96 = fadd <2 x double> %95, %94
  %97 = fadd <2 x double> %87, %96
  %98 = fadd <2 x double> %91, %97
  %99 = fmul <2 x double> %98, <double 0xBFE5555555555555, double 0xBFE5555555555555>
  %100 = fmul <2 x double> %75, %99
  %101 = fadd <2 x double> %76, %100
  %102 = fsub <2 x double> %101, %76
  %103 = fsub <2 x double> %101, %102
  %104 = fsub <2 x double> %76, %103
  %105 = fsub <2 x double> %100, %102
  %106 = fadd <2 x double> %105, %104
  %107 = fadd <2 x double> %78, %106
  %108 = fmul <2 x double> %101, %64
  %109 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %108
  %110 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %101, <2 x double> %64, <2 x double> %109) #7
  %111 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> %64, <2 x double> %110) #7
  %112 = fmul <2 x double> %108, %59
  %113 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %59, <2 x double> %113) #7
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %111, <2 x double> %59, <2 x double> %114) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %108, <2 x double> %62, <2 x double> %115) #7
  %117 = fadd <2 x double> %116, %112
  %118 = add <4 x i32> %37, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %119 = ashr <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %120 = add <4 x i32> %119, <i32 1023, i32 1023, i32 undef, i32 1023>
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %122 = and <4 x i32> %121, <i32 0, i32 -1, i32 0, i32 -1>
  %123 = shl <4 x i32> %122, <i32 20, i32 20, i32 20, i32 20>
  %124 = bitcast <4 x i32> %123 to <2 x double>
  %125 = fmul <2 x double> %117, %124
  %126 = add <4 x i32> %37, <i32 -1025, i32 -1025, i32 undef, i32 -1025>
  %127 = sub <4 x i32> %126, %119
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %129 = and <4 x i32> %128, <i32 0, i32 -1, i32 0, i32 -1>
  %130 = shl <4 x i32> %129, <i32 20, i32 20, i32 20, i32 20>
  %131 = bitcast <4 x i32> %130 to <2 x double>
  %132 = fmul <2 x double> %125, %131
  %133 = fcmp oeq <2 x double> %64, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %134 = sext <2 x i1> %133 to <2 x i64>
  %135 = and <2 x i64> %58, <i64 -9223372036854775808, i64 -9223372036854775808>
  %136 = or <2 x i64> %135, <i64 9218868437227405312, i64 9218868437227405312>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = bitcast <2 x i64> %134 to <2 x double>
  %139 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> %137, <2 x double> %138) #7
  %140 = fcmp oeq <2 x double> %64, zeroinitializer
  %141 = sext <2 x i1> %140 to <2 x i64>
  %142 = bitcast <2 x i64> %135 to <2 x double>
  %143 = bitcast <2 x i64> %141 to <2 x double>
  %144 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %139, <2 x double> %142, <2 x double> %143) #7
  ret <2 x double> %144
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_expm1d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, zeroinitializer
  %3 = fmul <2 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %3, i32 8) #7
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %4) #7
  %6 = fmul <2 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <2 x double> %6, %0
  %8 = fsub <2 x double> %7, %0
  %9 = fsub <2 x double> %7, %8
  %10 = fsub <2 x double> %0, %9
  %11 = fsub <2 x double> %6, %8
  %12 = fadd <2 x double> %11, %10
  %13 = fadd <2 x double> %12, zeroinitializer
  %14 = fmul <2 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <2 x double> %14, %7
  %16 = fsub <2 x double> %15, %7
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %7, %17
  %19 = fsub <2 x double> %14, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fadd <2 x double> %20, %13
  %22 = fmul <2 x double> %15, %15
  %23 = fadd <2 x double> %15, %15
  %24 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> %15, <2 x double> %24) #7
  %26 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %23, <2 x double> %21, <2 x double> %25) #7
  %27 = fmul <2 x double> %22, %22
  %28 = fadd <2 x double> %22, %22
  %29 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %22, <2 x double> %29) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %26, <2 x double> %30) #7
  %32 = fmul <2 x double> %27, %27
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %34, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %38 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %37, <2 x double> %38) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %36, <2 x double> %39) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %33, <2 x double> %40) #7
  %42 = fmul <2 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %15, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %43) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %44) #7
  %46 = fadd <2 x double> %42, <double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <2 x double> %42, %47
  %49 = fadd <2 x double> %48, %45
  %50 = fmul <2 x double> %15, %46
  %51 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %15, <2 x double> %51) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %15, <2 x double> %52) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> %21, <2 x double> %53) #7
  %55 = fadd <2 x double> %50, <double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <2 x double> %50, %56
  %58 = fadd <2 x double> %57, %54
  %59 = fmul <2 x double> %15, %55
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %15, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %15, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %21, <2 x double> %62) #7
  %64 = fadd <2 x double> %59, <double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <2 x double> %59, %65
  %67 = fadd <2 x double> %66, %63
  %68 = fmul <2 x double> %27, %41
  %69 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> %41, <2 x double> %69) #7
  %71 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %41, <2 x double> %70) #7
  %72 = fadd <2 x double> %64, %68
  %73 = fsub <2 x double> %64, %72
  %74 = fadd <2 x double> %68, %73
  %75 = fadd <2 x double> %74, %67
  %76 = fadd <2 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add <4 x i32> %77, <i32 1023, i32 1023, i32 undef, i32 1023>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %80 = and <4 x i32> %79, <i32 0, i32 -1, i32 0, i32 -1>
  %81 = shl <4 x i32> %80, <i32 20, i32 20, i32 20, i32 20>
  %82 = bitcast <4 x i32> %81 to <2 x double>
  %83 = fmul <2 x double> %72, %82
  %84 = add <4 x i32> %5, <i32 1023, i32 1023, i32 undef, i32 1023>
  %85 = sub <4 x i32> %84, %77
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %87 = and <4 x i32> %86, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <4 x i32> %88 to <2 x double>
  %90 = fmul <2 x double> %83, %89
  %91 = fmul <2 x double> %76, %82
  %92 = fmul <2 x double> %91, %89
  %93 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %94 = bitcast <2 x double> %93 to <2 x i64>
  %95 = bitcast <2 x double> %90 to <2 x i64>
  %96 = xor <2 x i64> %94, <i64 -1, i64 -1>
  %97 = and <2 x i64> %96, %95
  %98 = bitcast <2 x double> %92 to <2 x i64>
  %99 = and <2 x i64> %98, %96
  %100 = bitcast <2 x i64> %97 to <2 x double>
  %101 = bitcast <2 x i64> %99 to <2 x double>
  %102 = fadd <2 x double> %100, <double -1.000000e+00, double -1.000000e+00>
  %103 = fsub <2 x double> %102, %100
  %104 = fsub <2 x double> %102, %103
  %105 = fsub <2 x double> %100, %104
  %106 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %103
  %107 = fadd <2 x double> %106, %105
  %108 = fadd <2 x double> %107, %101
  %109 = fadd <2 x double> %102, %108
  %110 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #7
  %111 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %110) #7
  %112 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #7
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %111, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %112) #7
  %114 = bitcast <2 x double> %0 to <2 x i64>
  %115 = icmp eq <2 x i64> %114, <i64 -9223372036854775808, i64 -9223372036854775808>
  %116 = sext <2 x i1> %115 to <2 x i64>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %113, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %117) #7
  ret <2 x double> %118
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_log10d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <2 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <2 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <2 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %58, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <2 x double> %58, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <2 x double> %58, <2 x double> %61) #7
  %63 = fmul <2 x double> %38, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %64 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %63
  %65 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <2 x double> %64) #7
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <2 x double> %65) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <2 x double> %66) #7
  %68 = fadd <2 x double> %59, %63
  %69 = fsub <2 x double> %59, %68
  %70 = fadd <2 x double> %63, %69
  %71 = fadd <2 x double> %62, %70
  %72 = fadd <2 x double> %67, %71
  %73 = fmul <2 x double> %38, %47
  %74 = fmul <2 x double> %55, %73
  %75 = fadd <2 x double> %68, %74
  %76 = fsub <2 x double> %68, %75
  %77 = fadd <2 x double> %74, %76
  %78 = fadd <2 x double> %77, %72
  %79 = fadd <2 x double> %75, %78
  %80 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %81 = sext <2 x i1> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %79, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %82) #7
  %84 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %85 = fcmp uno <2 x double> %4, zeroinitializer
  %86 = select <2 x i1> %85, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %84
  %87 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %83, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %86) #7
  %88 = fcmp oeq <2 x double> %4, zeroinitializer
  %89 = sext <2 x i1> %88 to <2 x i64>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %90) #7
  ret <2 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_log2d2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %27
  %29 = fsub <2 x double> %17, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %32 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %35 = fsub <2 x double> %17, %32
  %36 = fadd <2 x double> %35, %34
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %38 = fmul <2 x double> %25, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %25, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %31
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <2 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <2 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <2 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = bitcast <16 x i8> %24 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %38, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %60 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %60) #7
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %46, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %61) #7
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <2 x double> %62) #7
  %64 = fadd <2 x double> %59, %58
  %65 = fsub <2 x double> %64, %58
  %66 = fsub <2 x double> %64, %65
  %67 = fsub <2 x double> %58, %66
  %68 = fsub <2 x double> %59, %65
  %69 = fadd <2 x double> %68, %67
  %70 = fadd <2 x double> %63, %69
  %71 = fmul <2 x double> %38, %47
  %72 = fmul <2 x double> %55, %71
  %73 = fadd <2 x double> %64, %72
  %74 = fsub <2 x double> %73, %64
  %75 = fsub <2 x double> %73, %74
  %76 = fsub <2 x double> %64, %75
  %77 = fsub <2 x double> %72, %74
  %78 = fadd <2 x double> %77, %76
  %79 = fadd <2 x double> %70, %78
  %80 = fadd <2 x double> %73, %79
  %81 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %80, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %83) #7
  %85 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %86 = fcmp uno <2 x double> %4, zeroinitializer
  %87 = select <2 x i1> %86, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %85
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %87) #7
  %89 = fcmp oeq <2 x double> %4, zeroinitializer
  %90 = sext <2 x i1> %89 to <2 x i64>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %88, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %91) #7
  ret <2 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_log2d2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %3 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %4 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %3, <2 x double> %2) #7
  %5 = fmul <2 x double> %4, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %6 = bitcast <2 x double> %5 to <4 x i32>
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %8 = lshr <4 x i32> %7, <i32 20, i32 20, i32 20, i32 20>
  %9 = and <4 x i32> %8, <i32 2047, i32 2047, i32 2047, i32 2047>
  %10 = add nsw <4 x i32> %9, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %11 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %13 = and <4 x i32> %12, <i32 0, i32 -1, i32 0, i32 -1>
  %14 = shl <4 x i32> %13, <i32 20, i32 20, i32 20, i32 20>
  %15 = bitcast <2 x double> %4 to <4 x i32>
  %16 = add <4 x i32> %14, %15
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = bitcast <2 x double> %2 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = add nsw <4 x i32> %9, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %21 = bitcast <4 x i32> %10 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = bitcast <4 x i32> %19 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #7
  %25 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %26 = fadd <2 x double> %17, <double 1.000000e+00, double 1.000000e+00>
  %27 = fdiv <2 x double> %25, %26
  %28 = fmul <2 x double> %27, %27
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <2 x double> %28, <2 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #7
  %30 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %28, <2 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #7
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %30, <2 x double> %28, <2 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %31, <2 x double> %28, <2 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %32, <2 x double> %28, <2 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #7
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %28, <2 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #7
  %35 = bitcast <16 x i8> %24 to <4 x i32>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %27, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE>, <2 x double> %39) #7
  %41 = fadd <2 x double> %38, %37
  %42 = fsub <2 x double> %37, %41
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = fmul <2 x double> %27, %28
  %46 = fadd <2 x double> %41, %44
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %45, <2 x double> %46) #7
  %48 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %49 = sext <2 x i1> %48 to <2 x i64>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> zeroinitializer, i8 17) #7
  %53 = fcmp uno <2 x double> %4, zeroinitializer
  %54 = select <2 x i1> %53, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %52
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %54) #7
  %56 = fcmp oeq <2 x double> %4, zeroinitializer
  %57 = sext <2 x i1> %56 to <2 x i64>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %55, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %58) #7
  ret <2 x double> %59
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_log1pd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %2, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %4 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %4, <2 x double> %3) #7
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 2047, i32 2047>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = add <4 x i32> %15, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %17 = bitcast <4 x i32> %16 to <2 x double>
  %18 = fadd <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> %17, <2 x double> %18) #7
  %20 = bitcast <2 x double> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %23 = bitcast <4 x i32> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #7
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %29 = sitofp <2 x i32> %28 to <2 x double>
  %30 = fmul <2 x double> %29, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %29, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %29, <2 x double> %32) #7
  %34 = fadd <2 x double> %19, <double 2.000000e+00, double 2.000000e+00>
  %35 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %34
  %36 = fadd <2 x double> %19, %35
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %34
  %38 = fmul <2 x double> %19, %37
  %39 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %19, <2 x double> %39) #7
  %41 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %34
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %41, <2 x double> %37, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %43 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %36
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %43, <2 x double> %37, <2 x double> %42) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> zeroinitializer, <2 x double> %37, <2 x double> %40) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %44, <2 x double> %45) #7
  %47 = fmul <2 x double> %38, %38
  %48 = fmul <2 x double> %47, %47
  %49 = fmul <2 x double> %48, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <2 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035>) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <2 x double> %50) #7
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <2 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #7
  %53 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %47, <2 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <2 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #7
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %48, <2 x double> %52, <2 x double> %53) #7
  %55 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %51, <2 x double> %54) #7
  %56 = fmul <2 x double> %38, <double 2.000000e+00, double 2.000000e+00>
  %57 = fmul <2 x double> %46, <double 2.000000e+00, double 2.000000e+00>
  %58 = fadd <2 x double> %56, %30
  %59 = fsub <2 x double> %30, %58
  %60 = fadd <2 x double> %56, %59
  %61 = fadd <2 x double> %33, %60
  %62 = fadd <2 x double> %61, %57
  %63 = fmul <2 x double> %38, %47
  %64 = fmul <2 x double> %63, %55
  %65 = fadd <2 x double> %58, %64
  %66 = fsub <2 x double> %58, %65
  %67 = fadd <2 x double> %64, %66
  %68 = fadd <2 x double> %62, %67
  %69 = fadd <2 x double> %65, %68
  %70 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #7
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %70) #7
  %72 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double -1.000000e+00, double -1.000000e+00>, i8 17) #7
  %73 = fcmp uno <2 x double> %0, zeroinitializer
  %74 = select <2 x i1> %73, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %72
  %75 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %71, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %74) #7
  %76 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %78) #7
  %80 = bitcast <2 x double> %0 to <2 x i64>
  %81 = icmp eq <2 x i64> %80, <i64 -9223372036854775808, i64 -9223372036854775808>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %79, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %83) #7
  ret <2 x double> %84
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_finz_fabsd2_avx2128(<2 x double>) local_unnamed_addr #3 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_finz_copysignd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_fmaxd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #7
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_fmind2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #7
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_fdimd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> zeroinitializer, i8 17) #7
  %5 = fcmp oeq <2 x double> %0, %1
  %6 = select <2 x i1> %5, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %4
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> zeroinitializer, <2 x double> %6) #7
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_truncd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_floord2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #7
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> zeroinitializer, i8 17) #7
  %13 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %13, <2 x double> %12) #7
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %17, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %20 = fsub <2 x double> %0, %14
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807>
  %23 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = or <2 x i64> %22, %23
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = select <2 x i1> %18, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %19
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %0, <2 x double> %26) #7
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_ceild2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #7
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #7
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> zeroinitializer, i8 18) #7
  %13 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %11, <2 x double> %12) #7
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %17, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %20 = fsub <2 x double> %0, %14
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807>
  %23 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = or <2 x i64> %22, %23
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = select <2 x i1> %18, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %19
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %0, <2 x double> %26) #7
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_roundd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #7
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #7
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %2, <2 x double> zeroinitializer, i8 18) #7
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %16 = select <2 x i1> %14, <2 x double> %13, <2 x double> zeroinitializer
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %15, <2 x double> %16) #7
  %18 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %12, <2 x double> zeroinitializer, i8 17) #7
  %19 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %19, <2 x double> %18) #7
  %21 = fcmp oeq <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> zeroinitializer, <2 x double> %23) #7
  %25 = bitcast <2 x double> %0 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fcmp oeq <2 x double> %27, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %29 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %27, <2 x double> <double 0x4330000000000000, double 0x4330000000000000>, i8 29) #7
  %30 = fsub <2 x double> %24, %20
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 9223372036854775807, i64 9223372036854775807>
  %33 = and <2 x i64> %25, <i64 -9223372036854775808, i64 -9223372036854775808>
  %34 = or <2 x i64> %32, %33
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = select <2 x i1> %28, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %29
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> %0, <2 x double> %36) #7
  ret <2 x double> %37
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_rintd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #7
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_nextafterd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = bitcast <2 x i64> %4 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #7
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = ashr <2 x i64> %10, <i64 63, i64 63>
  %12 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %1, <2 x double> %9, i8 29) #7
  %13 = bitcast <2 x double> %12 to <2 x i64>
  %14 = xor <2 x i64> %11, %13
  %15 = bitcast <2 x double> %9 to <4 x i32>
  %16 = xor <4 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <4 x i32> %16, <i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <4 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 1, i64 1>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %24 = bitcast <4 x float> %23 to <4 x i32>
  %25 = add <4 x i32> %17, %24
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = bitcast <2 x i64> %14 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %26, <2 x double> %27) #7
  %29 = fcmp une <2 x double> %9, %1
  %30 = sext <2 x i1> %29 to <2 x i64>
  %31 = bitcast <2 x double> %28 to <4 x i32>
  %32 = bitcast <2 x i64> %30 to <4 x i32>
  %33 = and <4 x i32> %32, <i32 1, i32 0, i32 1, i32 0>
  %34 = sub <4 x i32> %31, %33
  %35 = icmp eq <4 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 4294967295, i64 4294967295>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %41 = bitcast <4 x float> %40 to <4 x i32>
  %42 = add <4 x i32> %34, %41
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = bitcast <4 x i32> %34 to <2 x double>
  %45 = bitcast <2 x i64> %30 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %43, <2 x double> %45) #7
  %47 = bitcast <2 x double> %46 to <4 x i32>
  %48 = xor <4 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <4 x i32> %48, <i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 1, i64 1>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = bitcast <4 x float> %55 to <4 x i32>
  %57 = add <4 x i32> %49, %56
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> %58, <2 x double> %27) #7
  %60 = fcmp oeq <2 x double> %59, zeroinitializer
  %61 = fcmp une <2 x double> %9, zeroinitializer
  %62 = and <2 x i1> %60, %61
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = bitcast <2 x i64> %63 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> %65, <2 x double> %66) #7
  %68 = fcmp oeq <2 x double> %9, zeroinitializer
  %69 = fcmp oeq <2 x double> %1, zeroinitializer
  %70 = and <2 x i1> %68, %69
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> %1, <2 x double> %72) #7
  %74 = fcmp uno <2 x double> %9, %1
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #7
  ret <2 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_frfrexpd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <2 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <2 x i64> %10 to <2 x double>
  %12 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <2 x i1> %14 to <2 x i64>
  %16 = and <2 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <2 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = bitcast <2 x i64> %15 to <2 x double>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %18, <2 x double> %19) #7
  %21 = fcmp oeq <2 x double> %7, zeroinitializer
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %20, <2 x double> %7, <2 x double> %23) #7
  ret <2 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_finz_expfrexpd2_avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %4, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %6, <2 x double> %5) #7
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = bitcast <2 x double> %7 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 2047, i32 2047>
  %13 = add nsw <4 x i32> %12, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %14 = fcmp ueq <2 x double> %7, zeroinitializer
  %15 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %18 = or <2 x i1> %17, %14
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = bitcast <4 x i32> %13 to <16 x i8>
  %21 = bitcast <2 x i64> %19 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> zeroinitializer, <16 x i8> %21) #7
  %23 = bitcast <16 x i8> %22 to <2 x i64>
  ret <2 x i64> %23
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_fmad2_avx2128(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #0 {
  %4 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %0, <2 x double> %1, <2 x double> %2) #7
  ret <2 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_sqrtd2_u05avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %3 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %2) #7
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <2 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> %5, <2 x double> %4) #7
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x37F0000000000000, double 0x37F0000000000000>, <2 x double> %4) #7
  %8 = bitcast <2 x double> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %10 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <4 x i32> %10 to <2 x double>
  %12 = fmul <2 x double> %6, %11
  %13 = fmul <2 x double> %11, <double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %13, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %15, <2 x double> %12) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %15, <2 x double> %13) #7
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %17, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %19, <2 x double> %16) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %19, <2 x double> %17) #7
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %23, <2 x double> %20) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %23, <2 x double> %21) #7
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %25, <2 x double> <double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <2 x double> %25, %25
  %29 = fmul <2 x double> %28, %27
  %30 = fmul <2 x double> %6, %29
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %6, <2 x double> %31) #7
  %33 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %30, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %32, <2 x double> %34) #7
  %36 = fmul <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %36, <2 x double> %35, <2 x double> %32) #7
  %38 = fadd <2 x double> %30, %37
  %39 = fmul <2 x double> %7, %38
  %40 = fcmp oeq <2 x double> %6, zeroinitializer
  %41 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <2 x i1> %41, %40
  %43 = sext <2 x i1> %42 to <2 x i64>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %6, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %6, <2 x double> zeroinitializer, i8 17) #7
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %46) #7
  ret <2 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_sqrtd2_u35avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %3 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %2) #7
  %4 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %3, <2 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #7
  %5 = fmul <2 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> %5, <2 x double> %4) #7
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x37F0000000000000, double 0x37F0000000000000>, <2 x double> %4) #7
  %8 = bitcast <2 x double> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %10 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %9
  %11 = bitcast <4 x i32> %10 to <2 x double>
  %12 = fmul <2 x double> %6, %11
  %13 = fmul <2 x double> %11, <double 5.000000e-01, double 5.000000e-01>
  %14 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %14, <2 x double> %13, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %16 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %12, <2 x double> %15, <2 x double> %12) #7
  %17 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %13, <2 x double> %15, <2 x double> %13) #7
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %16
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %18, <2 x double> %17, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %20 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %19, <2 x double> %16) #7
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %19, <2 x double> %17) #7
  %22 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %20
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %22, <2 x double> %21, <2 x double> <double 5.000000e-01, double 5.000000e-01>) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %23, <2 x double> %20) #7
  %25 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %23, <2 x double> %21) #7
  %26 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %24
  %27 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %25, <2 x double> <double 1.500000e+00, double 1.500000e+00>) #7
  %28 = fadd <2 x double> %25, %25
  %29 = fmul <2 x double> %28, %27
  %30 = fmul <2 x double> %6, %29
  %31 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %30
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %6, <2 x double> %31) #7
  %33 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %29
  %34 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %30, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %35 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %32, <2 x double> %34) #7
  %36 = fmul <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %36, <2 x double> %35, <2 x double> %32) #7
  %38 = fadd <2 x double> %30, %37
  %39 = fmul <2 x double> %7, %38
  %40 = fcmp oeq <2 x double> %6, zeroinitializer
  %41 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %42 = or <2 x i1> %41, %40
  %43 = sext <2 x i1> %42 to <2 x i64>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %6, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %6, <2 x double> zeroinitializer, i8 17) #7
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %46) #7
  ret <2 x double> %47
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_hypotd2_u05avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #7
  %11 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %10, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %12 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %12, <2 x double> %11) #7
  %14 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %11) #7
  %16 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <2 x double> %13, %16
  %18 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %16, <2 x double> %13, <2 x double> %18) #7
  %20 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %20, <2 x double> %16, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %22 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %16, <2 x double> %21) #7
  %23 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> zeroinitializer, <2 x double> %16, <2 x double> %19) #7
  %24 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %22, <2 x double> %23) #7
  %25 = fmul <2 x double> %17, %17
  %26 = fadd <2 x double> %17, %17
  %27 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %17, <2 x double> %17, <2 x double> %27) #7
  %29 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %26, <2 x double> %24, <2 x double> %28) #7
  %30 = fadd <2 x double> %25, <double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <2 x double> %30, %25
  %32 = fsub <2 x double> %30, %31
  %33 = fsub <2 x double> %25, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <2 x double> %34, %33
  %36 = fadd <2 x double> %29, %35
  %37 = fadd <2 x double> %30, %36
  %38 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %37) #7
  %39 = fmul <2 x double> %38, %38
  %40 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %38, <2 x double> %40) #7
  %42 = fadd <2 x double> %30, %39
  %43 = fsub <2 x double> %42, %30
  %44 = fsub <2 x double> %42, %43
  %45 = fsub <2 x double> %30, %44
  %46 = fsub <2 x double> %39, %43
  %47 = fadd <2 x double> %46, %45
  %48 = fadd <2 x double> %41, %36
  %49 = fadd <2 x double> %48, %47
  %50 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %50, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %53 = fmul <2 x double> %50, %52
  %54 = fmul <2 x double> %50, %42
  %55 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %50, <2 x double> %55) #7
  %57 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %49, <2 x double> %50, <2 x double> %56) #7
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %42, <2 x double> %53, <2 x double> %57) #7
  %59 = fmul <2 x double> %54, <double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <2 x double> %10, %59
  %62 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %10, <2 x double> %62) #7
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %10, <2 x double> %63) #7
  %65 = fadd <2 x double> %61, %64
  %66 = fcmp uno <2 x double> %65, zeroinitializer
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %65, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %68) #7
  %70 = fcmp oeq <2 x double> %9, zeroinitializer
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> %10, <2 x double> %72) #7
  %74 = fcmp uno <2 x double> %8, %5
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #7
  %78 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <2 x i1> %79, %78
  %81 = sext <2 x i1> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %82) #7
  ret <2 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_hypotd2_u35avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #7
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #7
  %11 = fdiv <2 x double> %9, %10
  %12 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %11, <2 x double> %11, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %13 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %12) #7
  %14 = fmul <2 x double> %10, %13
  %15 = fcmp oeq <2 x double> %9, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i64>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %10, <2 x double> %17) #7
  %19 = fcmp uno <2 x double> %8, %5
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %21) #7
  %23 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <2 x i1> %24, %23
  %26 = sext <2 x i1> %25 to <2 x i64>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %27) #7
  ret <2 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_fmodd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %8, <2 x double> <double 0x10000000000000, double 0x10000000000000>, i8 17) #7
  %10 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %10, <2 x double> %9) #7
  %12 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %12, <2 x double> %9) #7
  %14 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <2 x double> %14 to <2 x i64>
  %16 = add <2 x i64> %15, <i64 -1, i64 -1>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %14, zeroinitializer
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> zeroinitializer, <2 x double> %20) #7
  %22 = fmul <2 x double> %13, <double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <2 x double> %13, %13
  %24 = bitcast <2 x double> %13 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %70, %27 ]
  %29 = phi <2 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <2 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = add <2 x i64> %31, <i64 -1, i64 -1>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fcmp oeq <2 x double> %30, zeroinitializer
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> zeroinitializer, <2 x double> %36) #7
  %38 = fmul <2 x double> %21, %37
  %39 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %38, i32 11) #7
  %40 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %22, <2 x double> %30, i8 30) #7
  %41 = bitcast <2 x double> %40 to <2 x i64>
  %42 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %13, i8 29) #7
  %43 = bitcast <2 x double> %42 to <2 x i64>
  %44 = and <2 x i64> %43, %41
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %45) #7
  %47 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %23, <2 x double> %30, i8 30) #7
  %48 = bitcast <2 x double> %47 to <2 x i64>
  %49 = and <2 x i64> %48, %43
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %50) #7
  %52 = fmul <2 x double> %51, %26
  %53 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %26, <2 x double> %53) #7
  %55 = fadd <2 x double> %30, %52
  %56 = fsub <2 x double> %55, %30
  %57 = fsub <2 x double> %55, %56
  %58 = fsub <2 x double> %30, %57
  %59 = fsub <2 x double> %52, %56
  %60 = fadd <2 x double> %59, %58
  %61 = fadd <2 x double> %29, %54
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %55, %62
  %64 = fsub <2 x double> %55, %63
  %65 = fadd <2 x double> %62, %64
  %66 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %63, <2 x double> %13, i8 17) #7
  %67 = bitcast <2 x double> %66 to <16 x i8>
  %68 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %67) #7
  %69 = icmp ne i32 %68, 65535
  %70 = add nuw nsw i32 %28, 1
  %71 = icmp ult i32 %70, 21
  %72 = and i1 %71, %69
  br i1 %72, label %27, label %73

; <label>:73:                                     ; preds = %27
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %9) #7
  %75 = fmul <2 x double> %63, %74
  %76 = fadd <2 x double> %63, %65
  %77 = fcmp oeq <2 x double> %76, %13
  %78 = sext <2 x i1> %77 to <2 x i64>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %75, <2 x double> zeroinitializer, <2 x double> %79) #7
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = xor <2 x i64> %82, %81
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %11, <2 x double> %13, i8 17) #7
  %86 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %84, <2 x double> %0, <2 x double> %85) #7
  %87 = fcmp oeq <2 x double> %13, zeroinitializer
  %88 = sext <2 x i1> %87 to <2 x i64>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %86, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %89) #7
  ret <2 x double> %90
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_remainderd2_avx2128(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %8, <2 x double> <double 0x20000000000000, double 0x20000000000000>, i8 17) #7
  %10 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %10, <2 x double> %9) #7
  %12 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %12, <2 x double> %9) #7
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %9) #7
  %15 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <2 x double> %13, <double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <2 x double> %13, <double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <2 x double> %13 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  br label %21

; <label>:21:                                     ; preds = %46, %2
  %22 = phi i32 [ 0, %2 ], [ %78, %46 ]
  %23 = phi <2 x i64> [ zeroinitializer, %2 ], [ %63, %46 ]
  %24 = phi <2 x double> [ zeroinitializer, %2 ], [ %77, %46 ]
  %25 = phi <2 x double> [ %11, %2 ], [ %75, %46 ]
  %26 = fmul <2 x double> %15, %25
  %27 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %26, i32 8) #7
  %28 = bitcast <2 x double> %25 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %16, i8 17) #7
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %27, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %31) #7
  %33 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %30, <2 x double> %17, i8 17) #7
  %34 = bitcast <2 x double> %33 to <2 x i64>
  %35 = fcmp oeq <2 x double> %17, %30
  %36 = xor <2 x i64> %23, <i64 -1, i64 -1>
  %37 = select <2 x i1> %35, <2 x i64> %36, <2 x i64> zeroinitializer
  %38 = or <2 x i64> %37, %34
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %32, <2 x double> zeroinitializer, <2 x double> %39) #7
  %41 = fcmp oeq <2 x double> %40, zeroinitializer
  %42 = sext <2 x i1> %41 to <2 x i64>
  %43 = bitcast <2 x i64> %42 to <16 x i8>
  %44 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %43) #7
  %45 = icmp eq i32 %44, 65535
  br i1 %45, label %80, label %46

; <label>:46:                                     ; preds = %21
  %47 = fmul <2 x double> %40, %20
  %48 = bitcast <2 x double> %47 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 9223372036854775807, i64 9223372036854775807>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fcmp oeq <2 x double> %50, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %52 = sext <2 x i1> %51 to <2 x i64>
  %53 = and <2 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808>
  %54 = xor <2 x i64> %53, <i64 -4616189618054758400, i64 -4616189618054758400>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fadd <2 x double> %40, %55
  %57 = bitcast <2 x i64> %52 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %40, <2 x double> %56, <2 x double> %57) #7
  %59 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %60 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %59, i32 11) #7
  %61 = fcmp une <2 x double> %60, %59
  %62 = sext <2 x i1> %61 to <2 x i64>
  %63 = xor <2 x i64> %23, %62
  %64 = fmul <2 x double> %58, %20
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %64
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %58, <2 x double> %20, <2 x double> %65) #7
  %67 = fadd <2 x double> %25, %64
  %68 = fsub <2 x double> %67, %25
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %25, %69
  %71 = fsub <2 x double> %64, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %24, %66
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %67, %74
  %76 = fsub <2 x double> %67, %75
  %77 = fadd <2 x double> %74, %76
  %78 = add nuw nsw i32 %22, 1
  %79 = icmp ult i32 %78, 21
  br i1 %79, label %21, label %80

; <label>:80:                                     ; preds = %21, %46
  %81 = phi <2 x double> [ %25, %21 ], [ %75, %46 ]
  %82 = fmul <2 x double> %14, %81
  %83 = bitcast <2 x double> %82 to <2 x i64>
  %84 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = xor <2 x i64> %84, %83
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %88 = sext <2 x i1> %87 to <2 x i64>
  %89 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <2 x i1> %89 to <2 x i64>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %91) #7
  %93 = bitcast <2 x i64> %88 to <2 x double>
  %94 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %86, <2 x double> %92, <2 x double> %93) #7
  %95 = fcmp oeq <2 x double> %13, zeroinitializer
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %97) #7
  ret <2 x double> %98
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_finz_tgammad2_u10avx2128(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0) #7
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <2 x double>, <2 x double>* %4, align 16
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <2 x double>, <2 x double>* %6, align 16
  %8 = fadd <2 x double> %5, %7
  %9 = fmul <2 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %9, i32 8) #7
  %11 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %10) #7
  %12 = fmul <2 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <2 x double> %5, %12
  %14 = fsub <2 x double> %13, %5
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> %5, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fadd <2 x double> %7, %18
  %20 = fmul <2 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <2 x double> %20, %13
  %22 = fsub <2 x double> %21, %13
  %23 = fsub <2 x double> %21, %22
  %24 = fsub <2 x double> %13, %23
  %25 = fsub <2 x double> %20, %22
  %26 = fadd <2 x double> %25, %24
  %27 = fadd <2 x double> %26, %19
  %28 = fmul <2 x double> %21, %21
  %29 = fadd <2 x double> %21, %21
  %30 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> %21, <2 x double> %30) #7
  %32 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %29, <2 x double> %27, <2 x double> %31) #7
  %33 = fmul <2 x double> %28, %28
  %34 = fadd <2 x double> %28, %28
  %35 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %28, <2 x double> %35) #7
  %37 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %34, <2 x double> %32, <2 x double> %36) #7
  %38 = fmul <2 x double> %33, %33
  %39 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <2 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #7
  %40 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <2 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #7
  %41 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <2 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #7
  %42 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %40, <2 x double> %41) #7
  %43 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <2 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #7
  %44 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3F81111111111119, double 0x3F81111111111119>, <2 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A>) #7
  %45 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %28, <2 x double> %43, <2 x double> %44) #7
  %46 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %42, <2 x double> %45) #7
  %47 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %38, <2 x double> %39, <2 x double> %46) #7
  %48 = fmul <2 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %21, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %49) #7
  %51 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %27, <2 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555>, <2 x double> %50) #7
  %52 = fadd <2 x double> %48, <double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <2 x double> %48, %53
  %55 = fadd <2 x double> %54, %51
  %56 = fmul <2 x double> %21, %52
  %57 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %21, <2 x double> %57) #7
  %59 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %55, <2 x double> %21, <2 x double> %58) #7
  %60 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %52, <2 x double> %27, <2 x double> %59) #7
  %61 = fadd <2 x double> %56, <double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <2 x double> %56, %62
  %64 = fadd <2 x double> %63, %60
  %65 = fmul <2 x double> %21, %61
  %66 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %21, <2 x double> %66) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %64, <2 x double> %21, <2 x double> %67) #7
  %69 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %61, <2 x double> %27, <2 x double> %68) #7
  %70 = fadd <2 x double> %65, <double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <2 x double> %65, %71
  %73 = fadd <2 x double> %72, %69
  %74 = fmul <2 x double> %33, %47
  %75 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %33, <2 x double> %47, <2 x double> %75) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %37, <2 x double> %47, <2 x double> %76) #7
  %78 = fadd <2 x double> %70, %74
  %79 = fsub <2 x double> %70, %78
  %80 = fadd <2 x double> %74, %79
  %81 = fadd <2 x double> %80, %73
  %82 = fadd <2 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add <4 x i32> %83, <i32 1023, i32 1023, i32 undef, i32 1023>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %86 = and <4 x i32> %85, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %87 to <2 x double>
  %89 = fmul <2 x double> %78, %88
  %90 = add <4 x i32> %11, <i32 1023, i32 1023, i32 undef, i32 1023>
  %91 = sub <4 x i32> %90, %83
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %93 = and <4 x i32> %92, <i32 0, i32 -1, i32 0, i32 -1>
  %94 = shl <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = bitcast <4 x i32> %94 to <2 x double>
  %96 = fmul <2 x double> %89, %95
  %97 = fmul <2 x double> %82, %88
  %98 = fmul <2 x double> %97, %95
  %99 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %5, <2 x double> <double -1.000000e+03, double -1.000000e+03>, i8 17) #7
  %100 = bitcast <2 x double> %99 to <2 x i64>
  %101 = bitcast <2 x double> %96 to <2 x i64>
  %102 = xor <2 x i64> %100, <i64 -1, i64 -1>
  %103 = and <2 x i64> %102, %101
  %104 = bitcast <2 x double> %98 to <2 x i64>
  %105 = and <2 x i64> %104, %102
  %106 = bitcast <2 x i64> %103 to <2 x double>
  %107 = bitcast <2 x i64> %105 to <2 x double>
  %108 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %109 = load <2 x double>, <2 x double>* %108, align 16
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %111 = load <2 x double>, <2 x double>* %110, align 16
  %112 = fmul <2 x double> %109, %106
  %113 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %109, <2 x double> %113) #7
  %115 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %107, <2 x double> %109, <2 x double> %114) #7
  %116 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %106, <2 x double> %111, <2 x double> %115) #7
  %117 = fadd <2 x double> %112, %116
  %118 = fcmp oeq <2 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000>
  %119 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 17) #7
  %120 = bitcast <2 x double> %119 to <2 x i64>
  %121 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  %122 = fcmp oeq <2 x double> %121, %0
  %123 = select <2 x i1> %122, <2 x i64> %120, <2 x i64> zeroinitializer
  %124 = select <2 x i1> %118, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %123
  %125 = bitcast <2 x double> %0 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 9223372036854775807, i64 9223372036854775807>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = fcmp une <2 x double> %127, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %129 = fcmp ord <2 x double> %0, zeroinitializer
  %130 = and <2 x i1> %128, %129
  %131 = fcmp uno <2 x double> %117, zeroinitializer
  %132 = and <2 x i1> %131, %130
  %133 = select <2 x i1> %132, <2 x i64> %120, <2 x i64> zeroinitializer
  %134 = or <2 x i64> %124, %133
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %135) #7
  %137 = fcmp oeq <2 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %138 = or <2 x i1> %130, %137
  %139 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 0x8010000000000000, double 0x8010000000000000>, i8 29) #7
  %140 = bitcast <2 x double> %139 to <2 x i64>
  %141 = select <2 x i1> %138, <2 x i64> %140, <2 x i64> zeroinitializer
  %142 = fcmp oeq <2 x double> %0, zeroinitializer
  %143 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> <double 2.000000e+02, double 2.000000e+02>, i8 30) #7
  %144 = bitcast <2 x double> %143 to <2 x i64>
  %145 = fcmp uno <2 x double> %136, zeroinitializer
  %146 = or <2 x i1> %145, %142
  %147 = select <2 x i1> %146, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %144
  %148 = and <2 x i64> %147, %141
  %149 = and <2 x i64> %125, <i64 -9223372036854775808, i64 -9223372036854775808>
  %150 = or <2 x i64> %149, <i64 9218868437227405312, i64 9218868437227405312>
  %151 = bitcast <2 x i64> %150 to <2 x double>
  %152 = bitcast <2 x i64> %148 to <2 x double>
  %153 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %136, <2 x double> %151, <2 x double> %152) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #7
  ret <2 x double> %153
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_finz_lgammad2_u10avx2128(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #7
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0) #7
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <2 x double>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <2 x double>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = fmul <2 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %15, <2 x double> <double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #7
  %17 = fmul <2 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000>
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %17, <2 x double> %16) #7
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %21 = lshr <4 x i32> %20, <i32 20, i32 20, i32 20, i32 20>
  %22 = bitcast <2 x double> %16 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #7
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %21, %26
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = ashr <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %30 = add <4 x i32> %29, <i32 1023, i32 1023, i32 undef, i32 1023>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %13, %34
  %36 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 1023>, %27
  %37 = sub <4 x i32> %36, %29
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %39 = and <4 x i32> %38, <i32 0, i32 -1, i32 0, i32 -1>
  %40 = shl <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = bitcast <4 x i32> %40 to <2 x double>
  %42 = fmul <2 x double> %35, %41
  %43 = fmul <2 x double> %14, %34
  %44 = fmul <2 x double> %43, %41
  %45 = fadd <2 x double> %42, <double -1.000000e+00, double -1.000000e+00>
  %46 = fsub <2 x double> %45, %42
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> %42, %47
  %49 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fadd <2 x double> %44, %50
  %52 = fadd <2 x double> %42, <double 1.000000e+00, double 1.000000e+00>
  %53 = fsub <2 x double> %52, %42
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %42, %54
  %56 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %44, %57
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %52
  %60 = fmul <2 x double> %45, %59
  %61 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %60
  %62 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %59, <2 x double> %45, <2 x double> %61) #7
  %63 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %52
  %64 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %63, <2 x double> %59, <2 x double> <double 1.000000e+00, double 1.000000e+00>) #7
  %65 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %58
  %66 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %65, <2 x double> %59, <2 x double> %64) #7
  %67 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %51, <2 x double> %59, <2 x double> %62) #7
  %68 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %66, <2 x double> %67) #7
  %69 = fmul <2 x double> %60, %60
  %70 = fadd <2 x double> %60, %60
  %71 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %69
  %72 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %60, <2 x double> %60, <2 x double> %71) #7
  %73 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %70, <2 x double> %68, <2 x double> %72) #7
  %74 = fmul <2 x double> %69, %69
  %75 = fmul <2 x double> %74, %74
  %76 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <2 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #7
  %77 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <2 x double> %76) #7
  %78 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <2 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #7
  %79 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <2 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #7
  %80 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %74, <2 x double> %78, <2 x double> %79) #7
  %81 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %75, <2 x double> %77, <2 x double> %80) #7
  %82 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %81, <2 x double> %69, <2 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545>) #7
  %83 = shufflevector <4 x i32> %27, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %84 = sitofp <2 x i32> %83 to <2 x double>
  %85 = fmul <2 x double> %84, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %86 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %85
  %87 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <2 x double> %84, <2 x double> %86) #7
  %88 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <2 x double> %84, <2 x double> %87) #7
  %89 = fmul <2 x double> %60, <double 2.000000e+00, double 2.000000e+00>
  %90 = fmul <2 x double> %68, <double 2.000000e+00, double 2.000000e+00>
  %91 = fadd <2 x double> %85, %89
  %92 = fsub <2 x double> %85, %91
  %93 = fadd <2 x double> %89, %92
  %94 = fadd <2 x double> %88, %93
  %95 = fadd <2 x double> %90, %94
  %96 = fmul <2 x double> %60, %69
  %97 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %60, <2 x double> %97) #7
  %99 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %73, <2 x double> %60, <2 x double> %98) #7
  %100 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %69, <2 x double> %68, <2 x double> %99) #7
  %101 = fmul <2 x double> %82, %96
  %102 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %96, <2 x double> %82, <2 x double> %102) #7
  %104 = tail call <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double> %100, <2 x double> %82, <2 x double> %103) #7
  %105 = fadd <2 x double> %91, %101
  %106 = fsub <2 x double> %91, %105
  %107 = fadd <2 x double> %101, %106
  %108 = fadd <2 x double> %107, %95
  %109 = fadd <2 x double> %108, %104
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %111 = load <2 x double>, <2 x double>* %110, align 16
  %112 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %113 = load <2 x double>, <2 x double>* %112, align 16
  %114 = fadd <2 x double> %105, %111
  %115 = fsub <2 x double> %114, %111
  %116 = fsub <2 x double> %114, %115
  %117 = fsub <2 x double> %111, %116
  %118 = fsub <2 x double> %105, %115
  %119 = fadd <2 x double> %118, %117
  %120 = fadd <2 x double> %109, %113
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %114, %121
  %123 = bitcast <2 x double> %0 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 9223372036854775807, i64 9223372036854775807>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fcmp oeq <2 x double> %125, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %127 = tail call <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double> %0, <2 x double> zeroinitializer, i8 18) #7
  %128 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #7
  %129 = fcmp oeq <2 x double> %128, %0
  %130 = fcmp une <2 x double> %125, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = fcmp ord <2 x double> %0, zeroinitializer
  %132 = and <2 x i1> %130, %131
  %133 = fcmp uno <2 x double> %122, zeroinitializer
  %134 = and <2 x i1> %132, %133
  %135 = or <2 x i1> %134, %126
  %136 = select <2 x i1> %129, <2 x double> %127, <2 x double> zeroinitializer
  %137 = select <2 x i1> %135, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %136
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %137) #7
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #7
  ret <2 x double> %138
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_erfd2_u10avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_erfd2_u10avx2128(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_finz_erfcd2_u15avx2128(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_erfcd2_u15avx2128(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntd2_avx2128(i32) local_unnamed_addr #2 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %18

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 7, i32 0) #7
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !36
  %10 = and i32 %9, 32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #7
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %14 = load i32, i32* %13, align 8, !tbaa !36
  %15 = and i32 %14, 4096
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 3
  br label %18

; <label>:18:                                     ; preds = %12, %5, %1
  %19 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %17, %12 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd2_avx2128(i32) local_unnamed_addr #3 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse41.blendvpd(<2 x double>, <2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.cmp.pd(<2 x double>, <2 x double>, i8) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse41.round.pd(<2 x double>, i32) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.fma.vfmadd.pd(<2 x double>, <2 x double>, <2 x double>) #4

; Function Attrs: argmemonly nounwind readonly
declare <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double>, i8*, <4 x i32>, <2 x double>, i8) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.max.pd(<2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.min.pd(<2 x double>, <2 x double>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #6

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { argmemonly nounwind readonly }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"rempi: argument 0"}
!5 = distinct !{!5, !"rempi"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"rempi: argument 0"}
!8 = distinct !{!8, !"rempi"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"rempi: argument 0"}
!11 = distinct !{!11, !"rempi"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"rempi: argument 0"}
!14 = distinct !{!14, !"rempi"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"rempi: argument 0"}
!17 = distinct !{!17, !"rempi"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"rempi: argument 0"}
!20 = distinct !{!20, !"rempi"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"rempi: argument 0"}
!23 = distinct !{!23, !"rempi"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"rempi: argument 0"}
!26 = distinct !{!26, !"rempi"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"Sleef_sincospid2_u05avx2128: argument 0"}
!29 = distinct !{!29, !"Sleef_sincospid2_u05avx2128"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"Sleef_sincospid2_u35avx2128: argument 0"}
!32 = distinct !{!32, !"Sleef_sincospid2_u35avx2128"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"Sleef_modfd2_avx2128: argument 0"}
!35 = distinct !{!35, !"Sleef_modfd2_avx2128"}
!36 = !{!37, !37, i64 0}
!37 = !{!"int", !38, i64 0}
!38 = !{!"omnipotent char", !39, i64 0}
!39 = !{!"Simple C/C++ TBAA"}
