; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vdouble2 = type { <4 x double>, <4 x double> }
%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }

@.str = private unnamed_addr constant [15 x i8] c"AVX + AMD FMA4\00", align 1
@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_ldexpd4_fma4(<4 x double>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 9, i32 9, i32 9, i32 9>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 7, i32 7, i32 7, i32 7>
  %9 = shl <4 x i32> %7, <i32 9, i32 9, i32 9, i32 9>
  %10 = sub <4 x i32> %3, %9
  %11 = add nsw <4 x i32> %8, <i32 1023, i32 1023, i32 1023, i32 1023>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = icmp slt <4 x i32> %7, <i32 -7, i32 -7, i32 -7, i32 -7>
  %14 = sext <4 x i1> %13 to <4 x i32>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = xor <2 x i64> %15, <i64 -1, i64 -1>
  %17 = and <2 x i64> %16, %12
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = icmp sgt <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = sext <4 x i1> %19 to <4 x i32>
  %21 = bitcast <2 x i64> %17 to <16 x i8>
  %22 = bitcast <4 x i32> %20 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> <i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0>, <16 x i8> %22) #6
  %24 = bitcast <16 x i8> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <4 x i32> %28 to <2 x i64>
  %32 = bitcast <4 x i32> %30 to <2 x i64>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = fmul <4 x double> %36, %0
  %38 = fmul <4 x double> %37, %36
  %39 = fmul <4 x double> %38, %36
  %40 = fmul <4 x double> %39, %36
  %41 = add <4 x i32> %10, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %44 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <4 x double>
  %54 = fmul <4 x double> %40, %53
  ret <4 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %7, <4 x double> %5) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> %14, <2 x i32> <i32 2, i32 1>
  %19 = bitcast <2 x i64> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %20, %26
  %28 = sitofp <4 x i32> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %0, zeroinitializer
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x i64> %30 to <4 x double>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> <double 0xC1E0000000000000, double 0xC1E0000000000000, double 0xC1E0000000000000, double 0xC1E0000000000000>, <4 x double> %31) #6
  %33 = fcmp uno <4 x double> %0, zeroinitializer
  %34 = sext <4 x i1> %33 to <4 x i64>
  %35 = bitcast <4 x i64> %34 to <4 x double>
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <4 x double> %35) #6
  %37 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %38 = sext <4 x i1> %37 to <4 x i64>
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %36, <4 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <4 x double> %39) #6
  %41 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %40) #6
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  ret <2 x i64> %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sind4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <4 x double> %0) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>, <4 x double> %16) #6
  br label %237

; <label>:18:                                     ; preds = %1
  %19 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %22, %21
  %24 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %23, <2 x i64> <i64 -1, i64 -1>) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26, !prof !2

; <label>:26:                                     ; preds = %18
  %27 = fmul <4 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %28 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %27, i32 11) #6
  %29 = fmul <4 x double> %28, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %29
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> %30) #6
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 8) #6
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %0) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %34) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>, <4 x double> %38) #6
  %40 = fadd <4 x double> %29, %32
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>, <4 x double> %39) #6
  br label %237

; <label>:42:                                     ; preds = %18
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = bitcast <2 x i64> %44 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %50, <2 x i64> %47, <2 x i32> <i32 2, i32 1>
  %52 = bitcast <2 x i64> %51 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = and <4 x i32> %53, <i32 2047, i32 2047, i32 2047, i32 2047>
  %55 = add nsw <4 x i32> %54, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %56 = icmp ugt <4 x i32> %54, <i32 1723, i32 1723, i32 1723, i32 1723>
  %57 = select <4 x i1> %56, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %59 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %60 = and <4 x i32> %58, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = and <4 x i32> %59, <i32 0, i32 -1, i32 0, i32 -1>
  %63 = shl <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = add <4 x i32> %61, %45
  %65 = add <4 x i32> %63, %48
  %66 = bitcast <4 x i32> %64 to <2 x i64>
  %67 = bitcast <4 x i32> %65 to <2 x i64>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <4 x i64> %68, <4 x i64> %69, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %71 = bitcast <4 x i64> %70 to <4 x double>
  %72 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %73 = xor <4 x i32> %72, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %74 = and <4 x i32> %73, %55
  %75 = shl <4 x i32> %74, <i32 2, i32 2, i32 2, i32 2>
  %76 = extractelement <4 x i32> %75, i32 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !3, !noalias !7
  %80 = extractelement <4 x i32> %75, i32 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !3, !noalias !7
  %84 = extractelement <4 x i32> %75, i32 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !3, !noalias !7
  %88 = extractelement <4 x i32> %75, i32 0
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !3, !noalias !7
  %92 = insertelement <4 x double> undef, double %91, i32 0
  %93 = insertelement <4 x double> %92, double %87, i32 1
  %94 = insertelement <4 x double> %93, double %83, i32 2
  %95 = insertelement <4 x double> %94, double %79, i32 3
  %96 = fmul <4 x double> %95, %71
  %97 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %95, <4 x double> %97) #6
  %99 = fmul <4 x double> %96, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %100 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %99, i32 8) #6
  %101 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %96, i32 8) #6
  %102 = fmul <4 x double> %101, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %103 = fsub <4 x double> %100, %102
  %104 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %103) #6
  %105 = fmul <4 x double> %100, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %106 = fsub <4 x double> %96, %105
  %107 = fadd <4 x double> %98, %106
  %108 = fsub <4 x double> %106, %107
  %109 = fadd <4 x double> %98, %108
  %110 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %77
  %111 = load double, double* %110, align 8, !tbaa !3, !noalias !7
  %112 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %81
  %113 = load double, double* %112, align 8, !tbaa !3, !noalias !7
  %114 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %85
  %115 = load double, double* %114, align 8, !tbaa !3, !noalias !7
  %116 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %89
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !7
  %118 = insertelement <4 x double> undef, double %117, i32 0
  %119 = insertelement <4 x double> %118, double %115, i32 1
  %120 = insertelement <4 x double> %119, double %113, i32 2
  %121 = insertelement <4 x double> %120, double %111, i32 3
  %122 = fmul <4 x double> %121, %71
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %121, <4 x double> %123) #6
  %125 = fadd <4 x double> %107, %122
  %126 = fsub <4 x double> %125, %107
  %127 = fsub <4 x double> %125, %126
  %128 = fsub <4 x double> %107, %127
  %129 = fsub <4 x double> %122, %126
  %130 = fadd <4 x double> %129, %128
  %131 = fadd <4 x double> %109, %124
  %132 = fadd <4 x double> %131, %130
  %133 = fmul <4 x double> %125, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %134 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %133, i32 8) #6
  %135 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %125, i32 8) #6
  %136 = fmul <4 x double> %135, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %137 = fsub <4 x double> %134, %136
  %138 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %137) #6
  %139 = fmul <4 x double> %134, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %140 = fsub <4 x double> %125, %139
  %141 = add <4 x i32> %138, %104
  %142 = fadd <4 x double> %140, %132
  %143 = fsub <4 x double> %140, %142
  %144 = fadd <4 x double> %132, %143
  %145 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %77
  %146 = load double, double* %145, align 8, !tbaa !3, !noalias !7
  %147 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %81
  %148 = load double, double* %147, align 8, !tbaa !3, !noalias !7
  %149 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %85
  %150 = load double, double* %149, align 8, !tbaa !3, !noalias !7
  %151 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %89
  %152 = load double, double* %151, align 8, !tbaa !3, !noalias !7
  %153 = insertelement <4 x double> undef, double %152, i32 0
  %154 = insertelement <4 x double> %153, double %150, i32 1
  %155 = insertelement <4 x double> %154, double %148, i32 2
  %156 = insertelement <4 x double> %155, double %146, i32 3
  %157 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %77
  %158 = load double, double* %157, align 8, !tbaa !3, !noalias !7
  %159 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %81
  %160 = load double, double* %159, align 8, !tbaa !3, !noalias !7
  %161 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %85
  %162 = load double, double* %161, align 8, !tbaa !3, !noalias !7
  %163 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %89
  %164 = load double, double* %163, align 8, !tbaa !3, !noalias !7
  %165 = insertelement <4 x double> undef, double %164, i32 0
  %166 = insertelement <4 x double> %165, double %162, i32 1
  %167 = insertelement <4 x double> %166, double %160, i32 2
  %168 = insertelement <4 x double> %167, double %158, i32 3
  %169 = fmul <4 x double> %156, %71
  %170 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %169
  %171 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %71, <4 x double> %170) #6
  %172 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %71, <4 x double> %171) #6
  %173 = fadd <4 x double> %142, %169
  %174 = fsub <4 x double> %173, %142
  %175 = fsub <4 x double> %173, %174
  %176 = fsub <4 x double> %142, %175
  %177 = fsub <4 x double> %169, %174
  %178 = fadd <4 x double> %177, %176
  %179 = fadd <4 x double> %144, %172
  %180 = fadd <4 x double> %179, %178
  %181 = fadd <4 x double> %173, %180
  %182 = fsub <4 x double> %173, %181
  %183 = fadd <4 x double> %180, %182
  %184 = fmul <4 x double> %181, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %185 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %184
  %186 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %181, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %185) #6
  %187 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %186) #6
  %188 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %181, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %187) #6
  %189 = and <4 x i64> %70, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %190 = bitcast <4 x i64> %189 to <4 x double>
  %191 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %190, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %192 = bitcast <4 x double> %191 to <4 x i64>
  %193 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %184, <4 x double> %71, <4 x double> %191) #6
  %194 = bitcast <4 x double> %188 to <4 x i64>
  %195 = xor <4 x i64> %192, <i64 -1, i64 -1, i64 -1, i64 -1>
  %196 = and <4 x i64> %195, %194
  %197 = shl <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  %198 = and <4 x i32> %197, <i32 6, i32 6, i32 6, i32 6>
  %199 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %193, <4 x double> zeroinitializer, i8 30) #6
  %200 = bitcast <4 x double> %199 to <4 x i64>
  %201 = and <4 x i64> %200, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %202 = bitcast <4 x i64> %201 to <4 x double>
  %203 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %202) #6
  %204 = bitcast <4 x i32> %203 to <16 x i8>
  %205 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %204) #6
  %206 = bitcast <16 x i8> %205 to <4 x i32>
  %207 = add <4 x i32> %198, %206
  %208 = ashr <4 x i32> %207, <i32 2, i32 2, i32 2, i32 2>
  %209 = and <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  %210 = icmp ne <4 x i32> %209, zeroinitializer
  %211 = bitcast <4 x double> %193 to <4 x i64>
  %212 = and <4 x i64> %211, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %213 = xor <4 x i64> %212, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %214 = bitcast <4 x i64> %213 to <4 x double>
  %215 = xor <4 x i64> %212, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %216 = bitcast <4 x i64> %215 to <4 x double>
  %217 = bitcast <4 x i64> %196 to <4 x double>
  %218 = fadd <4 x double> %193, %214
  %219 = fsub <4 x double> %218, %193
  %220 = fsub <4 x double> %218, %219
  %221 = fsub <4 x double> %193, %220
  %222 = fsub <4 x double> %214, %219
  %223 = fadd <4 x double> %222, %221
  %224 = fadd <4 x double> %217, %216
  %225 = fadd <4 x double> %224, %223
  %226 = sitofp <4 x i1> %210 to <4 x double>
  %227 = fcmp oeq <4 x double> %226, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %228 = sext <4 x i1> %227 to <4 x i64>
  %229 = bitcast <4 x i64> %228 to <4 x double>
  %230 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %193, <4 x double> %218, <4 x double> %229) #6
  %231 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %217, <4 x double> %225, <4 x double> %229) #6
  %232 = fadd <4 x double> %230, %231
  %233 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %234 = fcmp uno <4 x double> %0, zeroinitializer
  %235 = or <4 x i1> %233, %234
  %236 = select <4 x i1> %235, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %232
  br label %237

; <label>:237:                                    ; preds = %26, %42, %12
  %238 = phi <4 x i32> [ %15, %12 ], [ %33, %26 ], [ %208, %42 ]
  %239 = phi <4 x double> [ %17, %12 ], [ %41, %26 ], [ %236, %42 ]
  %240 = fmul <4 x double> %239, %239
  %241 = and <4 x i32> %238, <i32 1, i32 1, i32 1, i32 1>
  %242 = icmp ne <4 x i32> %241, zeroinitializer
  %243 = sitofp <4 x i1> %242 to <4 x double>
  %244 = fcmp oeq <4 x double> %243, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %245 = select <4 x i1> %244, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %246 = bitcast <4 x double> %239 to <4 x i64>
  %247 = xor <4 x i64> %245, %246
  %248 = bitcast <4 x i64> %247 to <4 x double>
  %249 = fmul <4 x double> %240, %240
  %250 = fmul <4 x double> %249, %249
  %251 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %240, <4 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <4 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #6
  %252 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %240, <4 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <4 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #6
  %253 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %249, <4 x double> %251, <4 x double> %252) #6
  %254 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %240, <4 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <4 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #6
  %255 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %240, <4 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <4 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F>) #6
  %256 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %249, <4 x double> %254, <4 x double> %255) #6
  %257 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %250, <4 x double> %253, <4 x double> %256) #6
  %258 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %257, <4 x double> %240, <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>) #6
  %259 = fmul <4 x double> %258, %248
  %260 = fmul <4 x double> %240, %259
  %261 = fadd <4 x double> %260, %248
  %262 = xor <4 x i64> %2, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %263 = bitcast <4 x i64> %262 to <4 x double>
  %264 = fcmp oeq <4 x double> %263, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %265 = sext <4 x i1> %264 to <4 x i64>
  %266 = bitcast <4 x i64> %265 to <4 x double>
  %267 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %261, <4 x double> %0, <4 x double> %266) #6
  ret <4 x double> %267
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sind4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %21, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18, double 0xC00921FB54442D18>, <4 x double> %0) #6
  %17 = fmul <4 x double> %14, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %18 = fadd <4 x double> %17, %16
  %19 = fsub <4 x double> %16, %18
  %20 = fadd <4 x double> %17, %19
  br label %277

; <label>:21:                                     ; preds = %1
  %22 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %23 = bitcast <4 x double> %22 to <4 x i64>
  %24 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %25 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %26 = and <2 x i64> %25, %24
  %27 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %26, <2 x i64> <i64 -1, i64 -1>) #6
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %80, label %29, !prof !2

; <label>:29:                                     ; preds = %21
  %30 = fmul <4 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %31 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %30, i32 11) #6
  %32 = fmul <4 x double> %31, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %32
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> %33) #6
  %35 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %34, i32 8) #6
  %36 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>, <4 x double> %0) #6
  %38 = fmul <4 x double> %35, <double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000, double 0xC00921FB50000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fsub <4 x double> %37, %39
  %41 = fadd <4 x double> %38, %40
  %42 = fmul <4 x double> %32, <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>
  %43 = fadd <4 x double> %42, %39
  %44 = fsub <4 x double> %43, %39
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %39, %45
  %47 = fsub <4 x double> %42, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %35, <double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000, double 0xBE6110B460000000>
  %51 = fadd <4 x double> %50, %43
  %52 = fsub <4 x double> %51, %43
  %53 = fsub <4 x double> %51, %52
  %54 = fsub <4 x double> %43, %53
  %55 = fsub <4 x double> %50, %52
  %56 = fadd <4 x double> %55, %54
  %57 = fadd <4 x double> %56, %49
  %58 = fmul <4 x double> %32, <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %59 = fadd <4 x double> %58, %51
  %60 = fsub <4 x double> %59, %51
  %61 = fsub <4 x double> %59, %60
  %62 = fsub <4 x double> %51, %61
  %63 = fsub <4 x double> %58, %60
  %64 = fadd <4 x double> %63, %62
  %65 = fadd <4 x double> %64, %57
  %66 = fmul <4 x double> %35, <double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %67 = fadd <4 x double> %66, %59
  %68 = fsub <4 x double> %67, %59
  %69 = fsub <4 x double> %67, %68
  %70 = fsub <4 x double> %59, %69
  %71 = fsub <4 x double> %66, %68
  %72 = fadd <4 x double> %71, %70
  %73 = fadd <4 x double> %72, %65
  %74 = fadd <4 x double> %32, %35
  %75 = fmul <4 x double> %74, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %76 = fadd <4 x double> %75, %67
  %77 = fsub <4 x double> %67, %76
  %78 = fadd <4 x double> %75, %77
  %79 = fadd <4 x double> %78, %73
  br label %277

; <label>:80:                                     ; preds = %21
  %81 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %82 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %83 = bitcast <2 x i64> %81 to <4 x i32>
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = bitcast <2 x i64> %82 to <4 x i32>
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = shufflevector <2 x i64> %88, <2 x i64> %85, <2 x i32> <i32 2, i32 1>
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = lshr <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = and <4 x i32> %91, <i32 2047, i32 2047, i32 2047, i32 2047>
  %93 = add nsw <4 x i32> %92, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %94 = icmp ugt <4 x i32> %92, <i32 1723, i32 1723, i32 1723, i32 1723>
  %95 = select <4 x i1> %94, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %97 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %98 = and <4 x i32> %96, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %101 = shl <4 x i32> %100, <i32 20, i32 20, i32 20, i32 20>
  %102 = add <4 x i32> %99, %83
  %103 = add <4 x i32> %101, %86
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = bitcast <4 x i32> %103 to <2 x i64>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <4 x double>
  %110 = ashr <4 x i32> %93, <i32 31, i32 31, i32 31, i32 31>
  %111 = xor <4 x i32> %110, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %112 = and <4 x i32> %111, %93
  %113 = shl <4 x i32> %112, <i32 2, i32 2, i32 2, i32 2>
  %114 = extractelement <4 x i32> %113, i32 3
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !10
  %118 = extractelement <4 x i32> %113, i32 2
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %119
  %121 = load double, double* %120, align 8, !tbaa !3, !noalias !10
  %122 = extractelement <4 x i32> %113, i32 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %123
  %125 = load double, double* %124, align 8, !tbaa !3, !noalias !10
  %126 = extractelement <4 x i32> %113, i32 0
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %127
  %129 = load double, double* %128, align 8, !tbaa !3, !noalias !10
  %130 = insertelement <4 x double> undef, double %129, i32 0
  %131 = insertelement <4 x double> %130, double %125, i32 1
  %132 = insertelement <4 x double> %131, double %121, i32 2
  %133 = insertelement <4 x double> %132, double %117, i32 3
  %134 = fmul <4 x double> %133, %109
  %135 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %134
  %136 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %109, <4 x double> %133, <4 x double> %135) #6
  %137 = fmul <4 x double> %134, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %138 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %137, i32 8) #6
  %139 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %134, i32 8) #6
  %140 = fmul <4 x double> %139, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %141 = fsub <4 x double> %138, %140
  %142 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %141) #6
  %143 = fmul <4 x double> %138, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %144 = fsub <4 x double> %134, %143
  %145 = fadd <4 x double> %136, %144
  %146 = fsub <4 x double> %144, %145
  %147 = fadd <4 x double> %136, %146
  %148 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %115
  %149 = load double, double* %148, align 8, !tbaa !3, !noalias !10
  %150 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %119
  %151 = load double, double* %150, align 8, !tbaa !3, !noalias !10
  %152 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %123
  %153 = load double, double* %152, align 8, !tbaa !3, !noalias !10
  %154 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %127
  %155 = load double, double* %154, align 8, !tbaa !3, !noalias !10
  %156 = insertelement <4 x double> undef, double %155, i32 0
  %157 = insertelement <4 x double> %156, double %153, i32 1
  %158 = insertelement <4 x double> %157, double %151, i32 2
  %159 = insertelement <4 x double> %158, double %149, i32 3
  %160 = fmul <4 x double> %159, %109
  %161 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %160
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %109, <4 x double> %159, <4 x double> %161) #6
  %163 = fadd <4 x double> %145, %160
  %164 = fsub <4 x double> %163, %145
  %165 = fsub <4 x double> %163, %164
  %166 = fsub <4 x double> %145, %165
  %167 = fsub <4 x double> %160, %164
  %168 = fadd <4 x double> %167, %166
  %169 = fadd <4 x double> %147, %162
  %170 = fadd <4 x double> %169, %168
  %171 = fmul <4 x double> %163, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %172 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %171, i32 8) #6
  %173 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %163, i32 8) #6
  %174 = fmul <4 x double> %173, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %175 = fsub <4 x double> %172, %174
  %176 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %175) #6
  %177 = fmul <4 x double> %172, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %178 = fsub <4 x double> %163, %177
  %179 = add <4 x i32> %176, %142
  %180 = fadd <4 x double> %178, %170
  %181 = fsub <4 x double> %178, %180
  %182 = fadd <4 x double> %170, %181
  %183 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %115
  %184 = load double, double* %183, align 8, !tbaa !3, !noalias !10
  %185 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %119
  %186 = load double, double* %185, align 8, !tbaa !3, !noalias !10
  %187 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %123
  %188 = load double, double* %187, align 8, !tbaa !3, !noalias !10
  %189 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %127
  %190 = load double, double* %189, align 8, !tbaa !3, !noalias !10
  %191 = insertelement <4 x double> undef, double %190, i32 0
  %192 = insertelement <4 x double> %191, double %188, i32 1
  %193 = insertelement <4 x double> %192, double %186, i32 2
  %194 = insertelement <4 x double> %193, double %184, i32 3
  %195 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %115
  %196 = load double, double* %195, align 8, !tbaa !3, !noalias !10
  %197 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %119
  %198 = load double, double* %197, align 8, !tbaa !3, !noalias !10
  %199 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %123
  %200 = load double, double* %199, align 8, !tbaa !3, !noalias !10
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %127
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !10
  %203 = insertelement <4 x double> undef, double %202, i32 0
  %204 = insertelement <4 x double> %203, double %200, i32 1
  %205 = insertelement <4 x double> %204, double %198, i32 2
  %206 = insertelement <4 x double> %205, double %196, i32 3
  %207 = fmul <4 x double> %194, %109
  %208 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %207
  %209 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %194, <4 x double> %109, <4 x double> %208) #6
  %210 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %206, <4 x double> %109, <4 x double> %209) #6
  %211 = fadd <4 x double> %180, %207
  %212 = fsub <4 x double> %211, %180
  %213 = fsub <4 x double> %211, %212
  %214 = fsub <4 x double> %180, %213
  %215 = fsub <4 x double> %207, %212
  %216 = fadd <4 x double> %215, %214
  %217 = fadd <4 x double> %182, %210
  %218 = fadd <4 x double> %217, %216
  %219 = fadd <4 x double> %211, %218
  %220 = fsub <4 x double> %211, %219
  %221 = fadd <4 x double> %218, %220
  %222 = fmul <4 x double> %219, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %223 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %222
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %219, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %223) #6
  %225 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %221, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %224) #6
  %226 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %219, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %225) #6
  %227 = and <4 x i64> %108, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %228 = bitcast <4 x i64> %227 to <4 x double>
  %229 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %228, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %230 = bitcast <4 x double> %229 to <4 x i64>
  %231 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %222, <4 x double> %109, <4 x double> %229) #6
  %232 = bitcast <4 x double> %226 to <4 x i64>
  %233 = xor <4 x i64> %230, <i64 -1, i64 -1, i64 -1, i64 -1>
  %234 = and <4 x i64> %233, %232
  %235 = shl <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %236 = and <4 x i32> %235, <i32 6, i32 6, i32 6, i32 6>
  %237 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %231, <4 x double> zeroinitializer, i8 30) #6
  %238 = bitcast <4 x double> %237 to <4 x i64>
  %239 = and <4 x i64> %238, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %240 = bitcast <4 x i64> %239 to <4 x double>
  %241 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %240) #6
  %242 = bitcast <4 x i32> %241 to <16 x i8>
  %243 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %242) #6
  %244 = bitcast <16 x i8> %243 to <4 x i32>
  %245 = add <4 x i32> %236, %244
  %246 = ashr <4 x i32> %245, <i32 2, i32 2, i32 2, i32 2>
  %247 = and <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  %248 = icmp ne <4 x i32> %247, zeroinitializer
  %249 = bitcast <4 x double> %231 to <4 x i64>
  %250 = and <4 x i64> %249, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %251 = xor <4 x i64> %250, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %252 = bitcast <4 x i64> %251 to <4 x double>
  %253 = xor <4 x i64> %250, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %254 = bitcast <4 x i64> %253 to <4 x double>
  %255 = bitcast <4 x i64> %234 to <4 x double>
  %256 = fadd <4 x double> %231, %252
  %257 = fsub <4 x double> %256, %231
  %258 = fsub <4 x double> %256, %257
  %259 = fsub <4 x double> %231, %258
  %260 = fsub <4 x double> %252, %257
  %261 = fadd <4 x double> %260, %259
  %262 = fadd <4 x double> %255, %254
  %263 = fadd <4 x double> %262, %261
  %264 = sitofp <4 x i1> %248 to <4 x double>
  %265 = fcmp oeq <4 x double> %264, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %266 = sext <4 x i1> %265 to <4 x i64>
  %267 = bitcast <4 x i64> %266 to <4 x double>
  %268 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %231, <4 x double> %256, <4 x double> %267) #6
  %269 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %255, <4 x double> %263, <4 x double> %267) #6
  %270 = fadd <4 x double> %268, %269
  %271 = fsub <4 x double> %268, %270
  %272 = fadd <4 x double> %269, %271
  %273 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %274 = fcmp uno <4 x double> %0, zeroinitializer
  %275 = or <4 x i1> %273, %274
  %276 = select <4 x i1> %275, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %270
  br label %277

; <label>:277:                                    ; preds = %29, %80, %12
  %278 = phi <4 x double> [ %276, %80 ], [ %76, %29 ], [ %18, %12 ]
  %279 = phi <4 x double> [ %272, %80 ], [ %79, %29 ], [ %20, %12 ]
  %280 = phi <4 x i32> [ %246, %80 ], [ %36, %29 ], [ %15, %12 ]
  %281 = fmul <4 x double> %278, %278
  %282 = fadd <4 x double> %278, %278
  %283 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %281
  %284 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %278, <4 x double> %278, <4 x double> %283) #6
  %285 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %282, <4 x double> %279, <4 x double> %284) #6
  %286 = fmul <4 x double> %281, %281
  %287 = fmul <4 x double> %286, %286
  %288 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %281, <4 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <4 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #6
  %289 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %281, <4 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <4 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #6
  %290 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %281, <4 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <4 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #6
  %291 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %286, <4 x double> %289, <4 x double> %290) #6
  %292 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %287, <4 x double> %288, <4 x double> %291) #6
  %293 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %292, <4 x double> %281, <4 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9>) #6
  %294 = fmul <4 x double> %281, %293
  %295 = fadd <4 x double> %294, <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>
  %296 = fsub <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>, %295
  %297 = fadd <4 x double> %294, %296
  %298 = fmul <4 x double> %281, %295
  %299 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %298
  %300 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %295, <4 x double> %281, <4 x double> %299) #6
  %301 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %297, <4 x double> %281, <4 x double> %300) #6
  %302 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %295, <4 x double> %285, <4 x double> %301) #6
  %303 = fadd <4 x double> %298, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %304 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %303
  %305 = fadd <4 x double> %298, %304
  %306 = fadd <4 x double> %302, %305
  %307 = fmul <4 x double> %278, %306
  %308 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %279, <4 x double> %303, <4 x double> %307) #6
  %309 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %278, <4 x double> %303, <4 x double> %308) #6
  %310 = and <4 x i32> %280, <i32 1, i32 1, i32 1, i32 1>
  %311 = icmp ne <4 x i32> %310, zeroinitializer
  %312 = sitofp <4 x i1> %311 to <4 x double>
  %313 = fcmp oeq <4 x double> %312, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %314 = select <4 x i1> %313, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %315 = bitcast <4 x double> %309 to <4 x i64>
  %316 = xor <4 x i64> %314, %315
  %317 = bitcast <4 x i64> %316 to <4 x double>
  %318 = fcmp oeq <4 x double> %0, zeroinitializer
  %319 = sext <4 x i1> %318 to <4 x i64>
  %320 = bitcast <4 x i64> %319 to <4 x double>
  %321 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %317, <4 x double> %0, <4 x double> %320) #6
  ret <4 x double> %321
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cosd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %14, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %17) #6
  br label %242

; <label>:19:                                     ; preds = %1
  %20 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %46, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <4 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #6
  %29 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %28, i32 11) #6
  %30 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %32 = fadd <4 x double> %30, %31
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #6
  %34 = fmul <4 x double> %29, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %35 = shl <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = or <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>
  %37 = sitofp <4 x i32> %36 to <4 x double>
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %39) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %40) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %42) #6
  %44 = fadd <4 x double> %34, %37
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %43) #6
  br label %242

; <label>:46:                                     ; preds = %19
  %47 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %48 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %49 = bitcast <2 x i64> %47 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %48 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = shufflevector <2 x i64> %54, <2 x i64> %51, <2 x i32> <i32 2, i32 1>
  %56 = bitcast <2 x i64> %55 to <4 x i32>
  %57 = lshr <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = and <4 x i32> %57, <i32 2047, i32 2047, i32 2047, i32 2047>
  %59 = add nsw <4 x i32> %58, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %60 = icmp ugt <4 x i32> %58, <i32 1723, i32 1723, i32 1723, i32 1723>
  %61 = select <4 x i1> %60, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %63 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %64 = and <4 x i32> %62, <i32 0, i32 -1, i32 0, i32 -1>
  %65 = shl <4 x i32> %64, <i32 20, i32 20, i32 20, i32 20>
  %66 = and <4 x i32> %63, <i32 0, i32 -1, i32 0, i32 -1>
  %67 = shl <4 x i32> %66, <i32 20, i32 20, i32 20, i32 20>
  %68 = add <4 x i32> %65, %49
  %69 = add <4 x i32> %67, %52
  %70 = bitcast <4 x i32> %68 to <2 x i64>
  %71 = bitcast <4 x i32> %69 to <2 x i64>
  %72 = shufflevector <2 x i64> %70, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %73 = shufflevector <2 x i64> %71, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = shufflevector <4 x i64> %72, <4 x i64> %73, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %75 = bitcast <4 x i64> %74 to <4 x double>
  %76 = ashr <4 x i32> %59, <i32 31, i32 31, i32 31, i32 31>
  %77 = xor <4 x i32> %76, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %78 = and <4 x i32> %77, %59
  %79 = shl <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %80 = extractelement <4 x i32> %79, i32 3
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !3, !noalias !13
  %84 = extractelement <4 x i32> %79, i32 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !3, !noalias !13
  %88 = extractelement <4 x i32> %79, i32 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !3, !noalias !13
  %92 = extractelement <4 x i32> %79, i32 0
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %93
  %95 = load double, double* %94, align 8, !tbaa !3, !noalias !13
  %96 = insertelement <4 x double> undef, double %95, i32 0
  %97 = insertelement <4 x double> %96, double %91, i32 1
  %98 = insertelement <4 x double> %97, double %87, i32 2
  %99 = insertelement <4 x double> %98, double %83, i32 3
  %100 = fmul <4 x double> %99, %75
  %101 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %100
  %102 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %99, <4 x double> %101) #6
  %103 = fmul <4 x double> %100, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %104 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %103, i32 8) #6
  %105 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %100, i32 8) #6
  %106 = fmul <4 x double> %105, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %107 = fsub <4 x double> %104, %106
  %108 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %107) #6
  %109 = fmul <4 x double> %104, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %110 = fsub <4 x double> %100, %109
  %111 = fadd <4 x double> %102, %110
  %112 = fsub <4 x double> %110, %111
  %113 = fadd <4 x double> %102, %112
  %114 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %81
  %115 = load double, double* %114, align 8, !tbaa !3, !noalias !13
  %116 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %85
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !13
  %118 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %89
  %119 = load double, double* %118, align 8, !tbaa !3, !noalias !13
  %120 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %93
  %121 = load double, double* %120, align 8, !tbaa !3, !noalias !13
  %122 = insertelement <4 x double> undef, double %121, i32 0
  %123 = insertelement <4 x double> %122, double %119, i32 1
  %124 = insertelement <4 x double> %123, double %117, i32 2
  %125 = insertelement <4 x double> %124, double %115, i32 3
  %126 = fmul <4 x double> %125, %75
  %127 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %126
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %75, <4 x double> %125, <4 x double> %127) #6
  %129 = fadd <4 x double> %111, %126
  %130 = fsub <4 x double> %129, %111
  %131 = fsub <4 x double> %129, %130
  %132 = fsub <4 x double> %111, %131
  %133 = fsub <4 x double> %126, %130
  %134 = fadd <4 x double> %133, %132
  %135 = fadd <4 x double> %113, %128
  %136 = fadd <4 x double> %135, %134
  %137 = fmul <4 x double> %129, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %138 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %137, i32 8) #6
  %139 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %129, i32 8) #6
  %140 = fmul <4 x double> %139, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %141 = fsub <4 x double> %138, %140
  %142 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %141) #6
  %143 = fmul <4 x double> %138, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %144 = fsub <4 x double> %129, %143
  %145 = add <4 x i32> %142, %108
  %146 = fadd <4 x double> %144, %136
  %147 = fsub <4 x double> %144, %146
  %148 = fadd <4 x double> %136, %147
  %149 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %81
  %150 = load double, double* %149, align 8, !tbaa !3, !noalias !13
  %151 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %85
  %152 = load double, double* %151, align 8, !tbaa !3, !noalias !13
  %153 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %89
  %154 = load double, double* %153, align 8, !tbaa !3, !noalias !13
  %155 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %93
  %156 = load double, double* %155, align 8, !tbaa !3, !noalias !13
  %157 = insertelement <4 x double> undef, double %156, i32 0
  %158 = insertelement <4 x double> %157, double %154, i32 1
  %159 = insertelement <4 x double> %158, double %152, i32 2
  %160 = insertelement <4 x double> %159, double %150, i32 3
  %161 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %81
  %162 = load double, double* %161, align 8, !tbaa !3, !noalias !13
  %163 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %85
  %164 = load double, double* %163, align 8, !tbaa !3, !noalias !13
  %165 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %89
  %166 = load double, double* %165, align 8, !tbaa !3, !noalias !13
  %167 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %93
  %168 = load double, double* %167, align 8, !tbaa !3, !noalias !13
  %169 = insertelement <4 x double> undef, double %168, i32 0
  %170 = insertelement <4 x double> %169, double %166, i32 1
  %171 = insertelement <4 x double> %170, double %164, i32 2
  %172 = insertelement <4 x double> %171, double %162, i32 3
  %173 = fmul <4 x double> %160, %75
  %174 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %173
  %175 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> %75, <4 x double> %174) #6
  %176 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %172, <4 x double> %75, <4 x double> %175) #6
  %177 = fadd <4 x double> %146, %173
  %178 = fsub <4 x double> %177, %146
  %179 = fsub <4 x double> %177, %178
  %180 = fsub <4 x double> %146, %179
  %181 = fsub <4 x double> %173, %178
  %182 = fadd <4 x double> %181, %180
  %183 = fadd <4 x double> %148, %176
  %184 = fadd <4 x double> %183, %182
  %185 = fadd <4 x double> %177, %184
  %186 = fsub <4 x double> %177, %185
  %187 = fadd <4 x double> %184, %186
  %188 = fmul <4 x double> %185, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %189 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %188
  %190 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %185, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %189) #6
  %191 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %190) #6
  %192 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %185, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %191) #6
  %193 = and <4 x i64> %74, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %194 = bitcast <4 x i64> %193 to <4 x double>
  %195 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %194, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %196 = bitcast <4 x double> %195 to <4 x i64>
  %197 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %188, <4 x double> %75, <4 x double> %195) #6
  %198 = bitcast <4 x double> %192 to <4 x i64>
  %199 = xor <4 x i64> %196, <i64 -1, i64 -1, i64 -1, i64 -1>
  %200 = and <4 x i64> %199, %198
  %201 = shl <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %202 = and <4 x i32> %201, <i32 6, i32 6, i32 6, i32 6>
  %203 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %197, <4 x double> zeroinitializer, i8 30) #6
  %204 = bitcast <4 x double> %203 to <4 x i64>
  %205 = and <4 x i64> %204, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %206 = bitcast <4 x i64> %205 to <4 x double>
  %207 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %206) #6
  %208 = bitcast <4 x i32> %207 to <16 x i8>
  %209 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %208) #6
  %210 = bitcast <16 x i8> %209 to <4 x i32>
  %211 = add <4 x i32> %202, %210
  %212 = ashr <4 x i32> %211, <i32 1, i32 1, i32 1, i32 1>
  %213 = and <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %214 = icmp eq <4 x i32> %213, zeroinitializer
  %215 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer, <4 x double> %203) #6
  %216 = bitcast <4 x double> %215 to <4 x i64>
  %217 = and <4 x i64> %216, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %218 = xor <4 x i64> %217, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %219 = bitcast <4 x i64> %218 to <4 x double>
  %220 = xor <4 x i64> %217, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %221 = bitcast <4 x i64> %220 to <4 x double>
  %222 = bitcast <4 x i64> %200 to <4 x double>
  %223 = fadd <4 x double> %197, %219
  %224 = fsub <4 x double> %223, %197
  %225 = fsub <4 x double> %223, %224
  %226 = fsub <4 x double> %197, %225
  %227 = fsub <4 x double> %219, %224
  %228 = fadd <4 x double> %227, %226
  %229 = fadd <4 x double> %222, %221
  %230 = fadd <4 x double> %229, %228
  %231 = sitofp <4 x i1> %214 to <4 x double>
  %232 = fcmp oeq <4 x double> %231, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %233 = sext <4 x i1> %232 to <4 x i64>
  %234 = bitcast <4 x i64> %233 to <4 x double>
  %235 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %197, <4 x double> %223, <4 x double> %234) #6
  %236 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %222, <4 x double> %230, <4 x double> %234) #6
  %237 = fadd <4 x double> %235, %236
  %238 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %239 = fcmp uno <4 x double> %0, zeroinitializer
  %240 = or <4 x i1> %238, %239
  %241 = select <4 x i1> %240, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %237
  br label %242

; <label>:242:                                    ; preds = %27, %46, %12
  %243 = phi <4 x i32> [ %16, %12 ], [ %36, %27 ], [ %212, %46 ]
  %244 = phi <4 x double> [ %18, %12 ], [ %45, %27 ], [ %241, %46 ]
  %245 = fmul <4 x double> %244, %244
  %246 = and <4 x i32> %243, <i32 2, i32 2, i32 2, i32 2>
  %247 = icmp eq <4 x i32> %246, zeroinitializer
  %248 = sitofp <4 x i1> %247 to <4 x double>
  %249 = fcmp oeq <4 x double> %248, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %250 = select <4 x i1> %249, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %251 = bitcast <4 x double> %244 to <4 x i64>
  %252 = xor <4 x i64> %250, %251
  %253 = bitcast <4 x i64> %252 to <4 x double>
  %254 = fmul <4 x double> %245, %245
  %255 = fmul <4 x double> %254, %254
  %256 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %245, <4 x double> <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>, <4 x double> <double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592, double 0x3CE94FA618796592>) #6
  %257 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %245, <4 x double> <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>, <4 x double> <double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966, double 0x3DE6124601C23966>) #6
  %258 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %254, <4 x double> %256, <4 x double> %257) #6
  %259 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %245, <4 x double> <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>, <4 x double> <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>) #6
  %260 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %245, <4 x double> <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>, <4 x double> <double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F, double 0x3F8111111111110F>) #6
  %261 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %254, <4 x double> %259, <4 x double> %260) #6
  %262 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %255, <4 x double> %258, <4 x double> %261) #6
  %263 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %262, <4 x double> %245, <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>) #6
  %264 = fmul <4 x double> %263, %253
  %265 = fmul <4 x double> %245, %264
  %266 = fadd <4 x double> %265, %253
  ret <4 x double> %266
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cosd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %29, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %14, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #6
  %17 = fmul <4 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <4 x double> %17, %0
  %19 = fsub <4 x double> %18, %0
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %0, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fmul <4 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %25 = fadd <4 x double> %24, %18
  %26 = fsub <4 x double> %18, %25
  %27 = fadd <4 x double> %24, %26
  %28 = fadd <4 x double> %27, %23
  br label %292

; <label>:29:                                     ; preds = %1
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = and <2 x i64> %33, %32
  %35 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %34, <2 x i64> <i64 -1, i64 -1>) #6
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %94, label %37, !prof !2

; <label>:37:                                     ; preds = %29
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>, <4 x double> <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>) #6
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #6
  %40 = fmul <4 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> <double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000, double 0xC160000000000000>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %42 = fadd <4 x double> %40, %41
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = fmul <4 x double> %39, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %45 = shl <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>
  %46 = or <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = sitofp <4 x i32> %46 to <4 x double>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #6
  %49 = fmul <4 x double> %47, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %50 = fadd <4 x double> %48, %49
  %51 = fsub <4 x double> %50, %48
  %52 = fsub <4 x double> %50, %51
  %53 = fsub <4 x double> %48, %52
  %54 = fsub <4 x double> %49, %51
  %55 = fadd <4 x double> %54, %53
  %56 = fmul <4 x double> %44, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %57 = fadd <4 x double> %56, %50
  %58 = fsub <4 x double> %57, %50
  %59 = fsub <4 x double> %57, %58
  %60 = fsub <4 x double> %50, %59
  %61 = fsub <4 x double> %56, %58
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fmul <4 x double> %47, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %65 = fadd <4 x double> %64, %57
  %66 = fsub <4 x double> %65, %57
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %57, %67
  %69 = fsub <4 x double> %64, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %70, %63
  %72 = fmul <4 x double> %44, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %73 = fadd <4 x double> %72, %65
  %74 = fsub <4 x double> %73, %65
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %65, %75
  %77 = fsub <4 x double> %72, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %78, %71
  %80 = fmul <4 x double> %47, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %81 = fadd <4 x double> %80, %73
  %82 = fsub <4 x double> %81, %73
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %73, %83
  %85 = fsub <4 x double> %80, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %86, %79
  %88 = fadd <4 x double> %44, %47
  %89 = fmul <4 x double> %88, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %90 = fadd <4 x double> %89, %81
  %91 = fsub <4 x double> %81, %90
  %92 = fadd <4 x double> %89, %91
  %93 = fadd <4 x double> %92, %87
  br label %292

; <label>:94:                                     ; preds = %29
  %95 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %96 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %97 = bitcast <2 x i64> %95 to <4 x i32>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %99 = bitcast <4 x i32> %98 to <2 x i64>
  %100 = bitcast <2 x i64> %96 to <4 x i32>
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %102 = bitcast <4 x i32> %101 to <2 x i64>
  %103 = shufflevector <2 x i64> %102, <2 x i64> %99, <2 x i32> <i32 2, i32 1>
  %104 = bitcast <2 x i64> %103 to <4 x i32>
  %105 = lshr <4 x i32> %104, <i32 20, i32 20, i32 20, i32 20>
  %106 = and <4 x i32> %105, <i32 2047, i32 2047, i32 2047, i32 2047>
  %107 = add nsw <4 x i32> %106, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %108 = icmp ugt <4 x i32> %106, <i32 1723, i32 1723, i32 1723, i32 1723>
  %109 = select <4 x i1> %108, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %111 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %112 = and <4 x i32> %110, <i32 0, i32 -1, i32 0, i32 -1>
  %113 = shl <4 x i32> %112, <i32 20, i32 20, i32 20, i32 20>
  %114 = and <4 x i32> %111, <i32 0, i32 -1, i32 0, i32 -1>
  %115 = shl <4 x i32> %114, <i32 20, i32 20, i32 20, i32 20>
  %116 = add <4 x i32> %113, %97
  %117 = add <4 x i32> %115, %100
  %118 = bitcast <4 x i32> %116 to <2 x i64>
  %119 = bitcast <4 x i32> %117 to <2 x i64>
  %120 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <4 x i64> %120, <4 x i64> %121, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %123 = bitcast <4 x i64> %122 to <4 x double>
  %124 = ashr <4 x i32> %107, <i32 31, i32 31, i32 31, i32 31>
  %125 = xor <4 x i32> %124, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %126 = and <4 x i32> %125, %107
  %127 = shl <4 x i32> %126, <i32 2, i32 2, i32 2, i32 2>
  %128 = extractelement <4 x i32> %127, i32 3
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %129
  %131 = load double, double* %130, align 8, !tbaa !3, !noalias !16
  %132 = extractelement <4 x i32> %127, i32 2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %133
  %135 = load double, double* %134, align 8, !tbaa !3, !noalias !16
  %136 = extractelement <4 x i32> %127, i32 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %137
  %139 = load double, double* %138, align 8, !tbaa !3, !noalias !16
  %140 = extractelement <4 x i32> %127, i32 0
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %141
  %143 = load double, double* %142, align 8, !tbaa !3, !noalias !16
  %144 = insertelement <4 x double> undef, double %143, i32 0
  %145 = insertelement <4 x double> %144, double %139, i32 1
  %146 = insertelement <4 x double> %145, double %135, i32 2
  %147 = insertelement <4 x double> %146, double %131, i32 3
  %148 = fmul <4 x double> %147, %123
  %149 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %148
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %147, <4 x double> %149) #6
  %151 = fmul <4 x double> %148, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %152 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %151, i32 8) #6
  %153 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %148, i32 8) #6
  %154 = fmul <4 x double> %153, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %155 = fsub <4 x double> %152, %154
  %156 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %155) #6
  %157 = fmul <4 x double> %152, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %158 = fsub <4 x double> %148, %157
  %159 = fadd <4 x double> %150, %158
  %160 = fsub <4 x double> %158, %159
  %161 = fadd <4 x double> %150, %160
  %162 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %129
  %163 = load double, double* %162, align 8, !tbaa !3, !noalias !16
  %164 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %133
  %165 = load double, double* %164, align 8, !tbaa !3, !noalias !16
  %166 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %137
  %167 = load double, double* %166, align 8, !tbaa !3, !noalias !16
  %168 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %141
  %169 = load double, double* %168, align 8, !tbaa !3, !noalias !16
  %170 = insertelement <4 x double> undef, double %169, i32 0
  %171 = insertelement <4 x double> %170, double %167, i32 1
  %172 = insertelement <4 x double> %171, double %165, i32 2
  %173 = insertelement <4 x double> %172, double %163, i32 3
  %174 = fmul <4 x double> %173, %123
  %175 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %174
  %176 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %173, <4 x double> %175) #6
  %177 = fadd <4 x double> %159, %174
  %178 = fsub <4 x double> %177, %159
  %179 = fsub <4 x double> %177, %178
  %180 = fsub <4 x double> %159, %179
  %181 = fsub <4 x double> %174, %178
  %182 = fadd <4 x double> %181, %180
  %183 = fadd <4 x double> %161, %176
  %184 = fadd <4 x double> %183, %182
  %185 = fmul <4 x double> %177, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %186 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %185, i32 8) #6
  %187 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %177, i32 8) #6
  %188 = fmul <4 x double> %187, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %189 = fsub <4 x double> %186, %188
  %190 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %189) #6
  %191 = fmul <4 x double> %186, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %192 = fsub <4 x double> %177, %191
  %193 = add <4 x i32> %190, %156
  %194 = fadd <4 x double> %192, %184
  %195 = fsub <4 x double> %192, %194
  %196 = fadd <4 x double> %184, %195
  %197 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %129
  %198 = load double, double* %197, align 8, !tbaa !3, !noalias !16
  %199 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %133
  %200 = load double, double* %199, align 8, !tbaa !3, !noalias !16
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %137
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !16
  %203 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %141
  %204 = load double, double* %203, align 8, !tbaa !3, !noalias !16
  %205 = insertelement <4 x double> undef, double %204, i32 0
  %206 = insertelement <4 x double> %205, double %202, i32 1
  %207 = insertelement <4 x double> %206, double %200, i32 2
  %208 = insertelement <4 x double> %207, double %198, i32 3
  %209 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %129
  %210 = load double, double* %209, align 8, !tbaa !3, !noalias !16
  %211 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %133
  %212 = load double, double* %211, align 8, !tbaa !3, !noalias !16
  %213 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %137
  %214 = load double, double* %213, align 8, !tbaa !3, !noalias !16
  %215 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %141
  %216 = load double, double* %215, align 8, !tbaa !3, !noalias !16
  %217 = insertelement <4 x double> undef, double %216, i32 0
  %218 = insertelement <4 x double> %217, double %214, i32 1
  %219 = insertelement <4 x double> %218, double %212, i32 2
  %220 = insertelement <4 x double> %219, double %210, i32 3
  %221 = fmul <4 x double> %208, %123
  %222 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %221
  %223 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %208, <4 x double> %123, <4 x double> %222) #6
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %220, <4 x double> %123, <4 x double> %223) #6
  %225 = fadd <4 x double> %194, %221
  %226 = fsub <4 x double> %225, %194
  %227 = fsub <4 x double> %225, %226
  %228 = fsub <4 x double> %194, %227
  %229 = fsub <4 x double> %221, %226
  %230 = fadd <4 x double> %229, %228
  %231 = fadd <4 x double> %196, %224
  %232 = fadd <4 x double> %231, %230
  %233 = fadd <4 x double> %225, %232
  %234 = fsub <4 x double> %225, %233
  %235 = fadd <4 x double> %232, %234
  %236 = fmul <4 x double> %233, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %237 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %236
  %238 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %233, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %237) #6
  %239 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %235, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %238) #6
  %240 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %233, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %239) #6
  %241 = and <4 x i64> %122, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %242 = bitcast <4 x i64> %241 to <4 x double>
  %243 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %242, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %244 = bitcast <4 x double> %243 to <4 x i64>
  %245 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %236, <4 x double> %123, <4 x double> %243) #6
  %246 = bitcast <4 x double> %240 to <4 x i64>
  %247 = xor <4 x i64> %244, <i64 -1, i64 -1, i64 -1, i64 -1>
  %248 = and <4 x i64> %247, %246
  %249 = shl <4 x i32> %193, <i32 1, i32 1, i32 1, i32 1>
  %250 = and <4 x i32> %249, <i32 6, i32 6, i32 6, i32 6>
  %251 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %245, <4 x double> zeroinitializer, i8 30) #6
  %252 = bitcast <4 x double> %251 to <4 x i64>
  %253 = and <4 x i64> %252, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %254 = bitcast <4 x i64> %253 to <4 x double>
  %255 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %254) #6
  %256 = bitcast <4 x i32> %255 to <16 x i8>
  %257 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %256) #6
  %258 = bitcast <16 x i8> %257 to <4 x i32>
  %259 = add <4 x i32> %250, %258
  %260 = ashr <4 x i32> %259, <i32 1, i32 1, i32 1, i32 1>
  %261 = and <4 x i32> %193, <i32 1, i32 1, i32 1, i32 1>
  %262 = icmp eq <4 x i32> %261, zeroinitializer
  %263 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer, <4 x double> %251) #6
  %264 = bitcast <4 x double> %263 to <4 x i64>
  %265 = and <4 x i64> %264, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %266 = xor <4 x i64> %265, <i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456, i64 -4613618979930100456>
  %267 = bitcast <4 x i64> %266 to <4 x double>
  %268 = xor <4 x i64> %265, <i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169, i64 -4858919839960114169>
  %269 = bitcast <4 x i64> %268 to <4 x double>
  %270 = bitcast <4 x i64> %248 to <4 x double>
  %271 = fadd <4 x double> %245, %267
  %272 = fsub <4 x double> %271, %245
  %273 = fsub <4 x double> %271, %272
  %274 = fsub <4 x double> %245, %273
  %275 = fsub <4 x double> %267, %272
  %276 = fadd <4 x double> %275, %274
  %277 = fadd <4 x double> %270, %269
  %278 = fadd <4 x double> %277, %276
  %279 = sitofp <4 x i1> %262 to <4 x double>
  %280 = fcmp oeq <4 x double> %279, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %281 = sext <4 x i1> %280 to <4 x i64>
  %282 = bitcast <4 x i64> %281 to <4 x double>
  %283 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %245, <4 x double> %271, <4 x double> %282) #6
  %284 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %270, <4 x double> %278, <4 x double> %282) #6
  %285 = fadd <4 x double> %283, %284
  %286 = fsub <4 x double> %283, %285
  %287 = fadd <4 x double> %284, %286
  %288 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %289 = fcmp uno <4 x double> %0, zeroinitializer
  %290 = or <4 x i1> %288, %289
  %291 = select <4 x i1> %290, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %285
  br label %292

; <label>:292:                                    ; preds = %37, %94, %12
  %293 = phi <4 x double> [ %291, %94 ], [ %90, %37 ], [ %25, %12 ]
  %294 = phi <4 x double> [ %287, %94 ], [ %93, %37 ], [ %28, %12 ]
  %295 = phi <4 x i32> [ %260, %94 ], [ %46, %37 ], [ %16, %12 ]
  %296 = fmul <4 x double> %293, %293
  %297 = fadd <4 x double> %293, %293
  %298 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %296
  %299 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %293, <4 x double> %293, <4 x double> %298) #6
  %300 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %297, <4 x double> %294, <4 x double> %299) #6
  %301 = fmul <4 x double> %296, %296
  %302 = fmul <4 x double> %301, %301
  %303 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %296, <4 x double> <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>, <4 x double> <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>) #6
  %304 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %296, <4 x double> <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>, <4 x double> <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>) #6
  %305 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %296, <4 x double> <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>, <4 x double> <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>) #6
  %306 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %301, <4 x double> %304, <4 x double> %305) #6
  %307 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %302, <4 x double> %303, <4 x double> %306) #6
  %308 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %307, <4 x double> %296, <4 x double> <double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9, double 0x3F811111111110B9>) #6
  %309 = fmul <4 x double> %296, %308
  %310 = fadd <4 x double> %309, <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>
  %311 = fsub <4 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555, double 0xBFC5555555555555>, %310
  %312 = fadd <4 x double> %309, %311
  %313 = fmul <4 x double> %296, %310
  %314 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %313
  %315 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %310, <4 x double> %296, <4 x double> %314) #6
  %316 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %312, <4 x double> %296, <4 x double> %315) #6
  %317 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %310, <4 x double> %300, <4 x double> %316) #6
  %318 = fadd <4 x double> %313, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %319 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %318
  %320 = fadd <4 x double> %313, %319
  %321 = fadd <4 x double> %317, %320
  %322 = fmul <4 x double> %293, %321
  %323 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %294, <4 x double> %318, <4 x double> %322) #6
  %324 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %293, <4 x double> %318, <4 x double> %323) #6
  %325 = and <4 x i32> %295, <i32 2, i32 2, i32 2, i32 2>
  %326 = icmp eq <4 x i32> %325, zeroinitializer
  %327 = sitofp <4 x i1> %326 to <4 x double>
  %328 = fcmp oeq <4 x double> %327, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %329 = select <4 x i1> %328, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %330 = bitcast <4 x double> %324 to <4 x i64>
  %331 = xor <4 x i64> %329, %330
  %332 = bitcast <4 x i64> %331 to <4 x double>
  ret <4 x double> %332
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd4_u35fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %15 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %14, i32 8) #6
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %1) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %17) #6
  br label %204

; <label>:19:                                     ; preds = %2
  %20 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #6
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %43, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = fmul <4 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %29 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %28, i32 11) #6
  %30 = fmul <4 x double> %29, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %31 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %32 = fsub <4 x double> %31, %30
  %33 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %32, i32 8) #6
  %34 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %33) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %1) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %39) #6
  %41 = fadd <4 x double> %30, %33
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %40) #6
  br label %204

; <label>:43:                                     ; preds = %19
  %44 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %45 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %46 = bitcast <2 x i64> %44 to <4 x i32>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %48 = bitcast <4 x i32> %47 to <2 x i64>
  %49 = bitcast <2 x i64> %45 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = shufflevector <2 x i64> %51, <2 x i64> %48, <2 x i32> <i32 2, i32 1>
  %53 = bitcast <2 x i64> %52 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = and <4 x i32> %54, <i32 2047, i32 2047, i32 2047, i32 2047>
  %56 = add nsw <4 x i32> %55, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %57 = icmp ugt <4 x i32> %55, <i32 1723, i32 1723, i32 1723, i32 1723>
  %58 = select <4 x i1> %57, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %60 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %61 = and <4 x i32> %59, <i32 0, i32 -1, i32 0, i32 -1>
  %62 = shl <4 x i32> %61, <i32 20, i32 20, i32 20, i32 20>
  %63 = and <4 x i32> %60, <i32 0, i32 -1, i32 0, i32 -1>
  %64 = shl <4 x i32> %63, <i32 20, i32 20, i32 20, i32 20>
  %65 = add <4 x i32> %62, %46
  %66 = add <4 x i32> %64, %49
  %67 = bitcast <4 x i32> %65 to <2 x i64>
  %68 = bitcast <4 x i32> %66 to <2 x i64>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <2 x i64> %68, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %71 = shufflevector <4 x i64> %69, <4 x i64> %70, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = ashr <4 x i32> %56, <i32 31, i32 31, i32 31, i32 31>
  %74 = xor <4 x i32> %73, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %75 = and <4 x i32> %74, %56
  %76 = shl <4 x i32> %75, <i32 2, i32 2, i32 2, i32 2>
  %77 = extractelement <4 x i32> %76, i32 3
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !3, !noalias !19
  %81 = extractelement <4 x i32> %76, i32 2
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %82
  %84 = load double, double* %83, align 8, !tbaa !3, !noalias !19
  %85 = extractelement <4 x i32> %76, i32 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %86
  %88 = load double, double* %87, align 8, !tbaa !3, !noalias !19
  %89 = extractelement <4 x i32> %76, i32 0
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !3, !noalias !19
  %93 = insertelement <4 x double> undef, double %92, i32 0
  %94 = insertelement <4 x double> %93, double %88, i32 1
  %95 = insertelement <4 x double> %94, double %84, i32 2
  %96 = insertelement <4 x double> %95, double %80, i32 3
  %97 = fmul <4 x double> %96, %72
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %97
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %96, <4 x double> %98) #6
  %100 = fmul <4 x double> %97, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %101 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %100, i32 8) #6
  %102 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %97, i32 8) #6
  %103 = fmul <4 x double> %102, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %104 = fsub <4 x double> %101, %103
  %105 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %104) #6
  %106 = fmul <4 x double> %101, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %107 = fsub <4 x double> %97, %106
  %108 = fadd <4 x double> %99, %107
  %109 = fsub <4 x double> %107, %108
  %110 = fadd <4 x double> %99, %109
  %111 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %78
  %112 = load double, double* %111, align 8, !tbaa !3, !noalias !19
  %113 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %82
  %114 = load double, double* %113, align 8, !tbaa !3, !noalias !19
  %115 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %86
  %116 = load double, double* %115, align 8, !tbaa !3, !noalias !19
  %117 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %90
  %118 = load double, double* %117, align 8, !tbaa !3, !noalias !19
  %119 = insertelement <4 x double> undef, double %118, i32 0
  %120 = insertelement <4 x double> %119, double %116, i32 1
  %121 = insertelement <4 x double> %120, double %114, i32 2
  %122 = insertelement <4 x double> %121, double %112, i32 3
  %123 = fmul <4 x double> %122, %72
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %123
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %122, <4 x double> %124) #6
  %126 = fadd <4 x double> %108, %123
  %127 = fsub <4 x double> %126, %108
  %128 = fsub <4 x double> %126, %127
  %129 = fsub <4 x double> %108, %128
  %130 = fsub <4 x double> %123, %127
  %131 = fadd <4 x double> %130, %129
  %132 = fadd <4 x double> %110, %125
  %133 = fadd <4 x double> %132, %131
  %134 = fmul <4 x double> %126, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %135 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %134, i32 8) #6
  %136 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %126, i32 8) #6
  %137 = fmul <4 x double> %136, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %138 = fsub <4 x double> %135, %137
  %139 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %138) #6
  %140 = fmul <4 x double> %135, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %141 = fsub <4 x double> %126, %140
  %142 = add <4 x i32> %139, %105
  %143 = fadd <4 x double> %141, %133
  %144 = fsub <4 x double> %141, %143
  %145 = fadd <4 x double> %133, %144
  %146 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %78
  %147 = load double, double* %146, align 8, !tbaa !3, !noalias !19
  %148 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %82
  %149 = load double, double* %148, align 8, !tbaa !3, !noalias !19
  %150 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %86
  %151 = load double, double* %150, align 8, !tbaa !3, !noalias !19
  %152 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %90
  %153 = load double, double* %152, align 8, !tbaa !3, !noalias !19
  %154 = insertelement <4 x double> undef, double %153, i32 0
  %155 = insertelement <4 x double> %154, double %151, i32 1
  %156 = insertelement <4 x double> %155, double %149, i32 2
  %157 = insertelement <4 x double> %156, double %147, i32 3
  %158 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %78
  %159 = load double, double* %158, align 8, !tbaa !3, !noalias !19
  %160 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %82
  %161 = load double, double* %160, align 8, !tbaa !3, !noalias !19
  %162 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %86
  %163 = load double, double* %162, align 8, !tbaa !3, !noalias !19
  %164 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %90
  %165 = load double, double* %164, align 8, !tbaa !3, !noalias !19
  %166 = insertelement <4 x double> undef, double %165, i32 0
  %167 = insertelement <4 x double> %166, double %163, i32 1
  %168 = insertelement <4 x double> %167, double %161, i32 2
  %169 = insertelement <4 x double> %168, double %159, i32 3
  %170 = fmul <4 x double> %157, %72
  %171 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %170
  %172 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %157, <4 x double> %72, <4 x double> %171) #6
  %173 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %169, <4 x double> %72, <4 x double> %172) #6
  %174 = fadd <4 x double> %143, %170
  %175 = fsub <4 x double> %174, %143
  %176 = fsub <4 x double> %174, %175
  %177 = fsub <4 x double> %143, %176
  %178 = fsub <4 x double> %170, %175
  %179 = fadd <4 x double> %178, %177
  %180 = fadd <4 x double> %145, %173
  %181 = fadd <4 x double> %180, %179
  %182 = fadd <4 x double> %174, %181
  %183 = fsub <4 x double> %174, %182
  %184 = fadd <4 x double> %181, %183
  %185 = fmul <4 x double> %182, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %186 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %185
  %187 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %186) #6
  %188 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %184, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %187) #6
  %189 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %188) #6
  %190 = and <4 x i64> %71, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %191 = bitcast <4 x i64> %190 to <4 x double>
  %192 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %191, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %193 = bitcast <4 x double> %192 to <4 x i64>
  %194 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %185, <4 x double> %72, <4 x double> %192) #6
  %195 = bitcast <4 x double> %189 to <4 x i64>
  %196 = xor <4 x i64> %193, <i64 -1, i64 -1, i64 -1, i64 -1>
  %197 = and <4 x i64> %196, %195
  %198 = bitcast <4 x i64> %197 to <4 x double>
  %199 = fadd <4 x double> %194, %198
  %200 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %201 = fcmp uno <4 x double> %1, zeroinitializer
  %202 = or <4 x i1> %200, %201
  %203 = select <4 x i1> %202, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %199
  br label %204

; <label>:204:                                    ; preds = %27, %43, %13
  %205 = phi <4 x i32> [ %16, %13 ], [ %34, %27 ], [ %142, %43 ]
  %206 = phi <4 x double> [ %18, %13 ], [ %42, %27 ], [ %203, %43 ]
  %207 = fmul <4 x double> %206, %206
  %208 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <4 x double> %207, <4 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #6
  %209 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %208, <4 x double> %207, <4 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #6
  %210 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %209, <4 x double> %207, <4 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #6
  %211 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %210, <4 x double> %207, <4 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135>) #6
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %211, <4 x double> %207, <4 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542>) #6
  %213 = fmul <4 x double> %207, %212
  %214 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %213, <4 x double> %206, <4 x double> %206) #6
  %215 = xor <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %216 = bitcast <4 x i64> %215 to <4 x double>
  %217 = fcmp oeq <4 x double> %216, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %218 = sext <4 x i1> %217 to <4 x i64>
  %219 = bitcast <4 x i64> %218 to <4 x double>
  %220 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %214, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %219) #6
  %221 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <4 x double> %207, <4 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #6
  %222 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %221, <4 x double> %207, <4 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #6
  %223 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %222, <4 x double> %207, <4 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #6
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %223, <4 x double> %207, <4 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #6
  %225 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %224, <4 x double> %207, <4 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545>) #6
  %226 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %225, <4 x double> %207, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %227 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> %226, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %228 = and <4 x i32> %205, <i32 1, i32 1, i32 1, i32 1>
  %229 = icmp eq <4 x i32> %228, zeroinitializer
  %230 = sitofp <4 x i1> %229 to <4 x double>
  %231 = fcmp oeq <4 x double> %230, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %232 = sext <4 x i1> %231 to <4 x i64>
  %233 = bitcast <4 x i64> %232 to <4 x double>
  %234 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %227, <4 x double> %220, <4 x double> %233) #6
  %235 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %220, <4 x double> %227, <4 x double> %233) #6
  %236 = and <4 x i32> %205, <i32 2, i32 2, i32 2, i32 2>
  %237 = icmp ne <4 x i32> %236, zeroinitializer
  %238 = sitofp <4 x i1> %237 to <4 x double>
  %239 = fcmp oeq <4 x double> %238, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %240 = select <4 x i1> %239, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %241 = bitcast <4 x double> %234 to <4 x i64>
  %242 = xor <4 x i64> %240, %241
  %243 = add <4 x i32> %205, <i32 1, i32 1, i32 1, i32 1>
  %244 = and <4 x i32> %243, <i32 2, i32 2, i32 2, i32 2>
  %245 = icmp ne <4 x i32> %244, zeroinitializer
  %246 = sitofp <4 x i1> %245 to <4 x double>
  %247 = fcmp oeq <4 x double> %246, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %248 = select <4 x i1> %247, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %249 = bitcast <4 x double> %235 to <4 x i64>
  %250 = xor <4 x i64> %248, %249
  %251 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %242, <4 x i64>* %251, align 32
  %252 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %253 = bitcast <4 x double>* %252 to <4 x i64>*
  store <4 x i64> %250, <4 x i64>* %253, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd4_u10fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %15 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %14, i32 8) #6
  %16 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %1) #6
  %18 = fmul <4 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %19 = fadd <4 x double> %18, %17
  %20 = fsub <4 x double> %17, %19
  %21 = fadd <4 x double> %18, %20
  %22 = bitcast <4 x double> %21 to <4 x i64>
  br label %246

; <label>:23:                                     ; preds = %2
  %24 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %25 = bitcast <4 x double> %24 to <4 x i64>
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %28 = and <2 x i64> %27, %26
  %29 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %28, <2 x i64> <i64 -1, i64 -1>) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %83, label %31, !prof !2

; <label>:31:                                     ; preds = %23
  %32 = fmul <4 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %33 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %32, i32 11) #6
  %34 = fmul <4 x double> %33, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %35 = fmul <4 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %36 = fsub <4 x double> %35, %34
  %37 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %36, i32 8) #6
  %38 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %1) #6
  %40 = fmul <4 x double> %37, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %41 = fadd <4 x double> %40, %39
  %42 = fsub <4 x double> %39, %41
  %43 = fadd <4 x double> %40, %42
  %44 = fmul <4 x double> %34, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %45 = fadd <4 x double> %44, %41
  %46 = fsub <4 x double> %45, %41
  %47 = fsub <4 x double> %45, %46
  %48 = fsub <4 x double> %41, %47
  %49 = fsub <4 x double> %44, %46
  %50 = fadd <4 x double> %49, %48
  %51 = fadd <4 x double> %43, %50
  %52 = fmul <4 x double> %37, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %53 = fadd <4 x double> %52, %45
  %54 = fsub <4 x double> %53, %45
  %55 = fsub <4 x double> %53, %54
  %56 = fsub <4 x double> %45, %55
  %57 = fsub <4 x double> %52, %54
  %58 = fadd <4 x double> %57, %56
  %59 = fadd <4 x double> %58, %51
  %60 = fmul <4 x double> %34, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %61 = fadd <4 x double> %60, %53
  %62 = fsub <4 x double> %61, %53
  %63 = fsub <4 x double> %61, %62
  %64 = fsub <4 x double> %53, %63
  %65 = fsub <4 x double> %60, %62
  %66 = fadd <4 x double> %65, %64
  %67 = fadd <4 x double> %66, %59
  %68 = fmul <4 x double> %37, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %69 = fadd <4 x double> %68, %61
  %70 = fsub <4 x double> %69, %61
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %61, %71
  %73 = fsub <4 x double> %68, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %34, %37
  %77 = fmul <4 x double> %76, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %78 = fadd <4 x double> %77, %69
  %79 = fsub <4 x double> %69, %78
  %80 = fadd <4 x double> %77, %79
  %81 = fadd <4 x double> %80, %75
  %82 = bitcast <4 x double> %81 to <4 x i64>
  br label %246

; <label>:83:                                     ; preds = %23
  %84 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %85 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %86 = bitcast <2 x i64> %84 to <4 x i32>
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = bitcast <2 x i64> %85 to <4 x i32>
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = shufflevector <2 x i64> %91, <2 x i64> %88, <2 x i32> <i32 2, i32 1>
  %93 = bitcast <2 x i64> %92 to <4 x i32>
  %94 = lshr <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = and <4 x i32> %94, <i32 2047, i32 2047, i32 2047, i32 2047>
  %96 = add nsw <4 x i32> %95, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %97 = icmp ugt <4 x i32> %95, <i32 1723, i32 1723, i32 1723, i32 1723>
  %98 = select <4 x i1> %97, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %100 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %101 = and <4 x i32> %99, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = and <4 x i32> %100, <i32 0, i32 -1, i32 0, i32 -1>
  %104 = shl <4 x i32> %103, <i32 20, i32 20, i32 20, i32 20>
  %105 = add <4 x i32> %102, %86
  %106 = add <4 x i32> %104, %89
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = bitcast <4 x i32> %106 to <2 x i64>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <2 x i64> %108, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = shufflevector <4 x i64> %109, <4 x i64> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %112 = bitcast <4 x i64> %111 to <4 x double>
  %113 = ashr <4 x i32> %96, <i32 31, i32 31, i32 31, i32 31>
  %114 = xor <4 x i32> %113, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %115 = and <4 x i32> %114, %96
  %116 = shl <4 x i32> %115, <i32 2, i32 2, i32 2, i32 2>
  %117 = extractelement <4 x i32> %116, i32 3
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !3, !noalias !22
  %121 = extractelement <4 x i32> %116, i32 2
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %122
  %124 = load double, double* %123, align 8, !tbaa !3, !noalias !22
  %125 = extractelement <4 x i32> %116, i32 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %126
  %128 = load double, double* %127, align 8, !tbaa !3, !noalias !22
  %129 = extractelement <4 x i32> %116, i32 0
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !22
  %133 = insertelement <4 x double> undef, double %132, i32 0
  %134 = insertelement <4 x double> %133, double %128, i32 1
  %135 = insertelement <4 x double> %134, double %124, i32 2
  %136 = insertelement <4 x double> %135, double %120, i32 3
  %137 = fmul <4 x double> %136, %112
  %138 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %137
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %136, <4 x double> %138) #6
  %140 = fmul <4 x double> %137, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %141 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %140, i32 8) #6
  %142 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %137, i32 8) #6
  %143 = fmul <4 x double> %142, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %144 = fsub <4 x double> %141, %143
  %145 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %144) #6
  %146 = fmul <4 x double> %141, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %147 = fsub <4 x double> %137, %146
  %148 = fadd <4 x double> %139, %147
  %149 = fsub <4 x double> %147, %148
  %150 = fadd <4 x double> %139, %149
  %151 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %118
  %152 = load double, double* %151, align 8, !tbaa !3, !noalias !22
  %153 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %122
  %154 = load double, double* %153, align 8, !tbaa !3, !noalias !22
  %155 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %126
  %156 = load double, double* %155, align 8, !tbaa !3, !noalias !22
  %157 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %130
  %158 = load double, double* %157, align 8, !tbaa !3, !noalias !22
  %159 = insertelement <4 x double> undef, double %158, i32 0
  %160 = insertelement <4 x double> %159, double %156, i32 1
  %161 = insertelement <4 x double> %160, double %154, i32 2
  %162 = insertelement <4 x double> %161, double %152, i32 3
  %163 = fmul <4 x double> %162, %112
  %164 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %163
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %162, <4 x double> %164) #6
  %166 = fadd <4 x double> %148, %163
  %167 = fsub <4 x double> %166, %148
  %168 = fsub <4 x double> %166, %167
  %169 = fsub <4 x double> %148, %168
  %170 = fsub <4 x double> %163, %167
  %171 = fadd <4 x double> %170, %169
  %172 = fadd <4 x double> %150, %165
  %173 = fadd <4 x double> %172, %171
  %174 = fmul <4 x double> %166, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %175 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %174, i32 8) #6
  %176 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %166, i32 8) #6
  %177 = fmul <4 x double> %176, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %178 = fsub <4 x double> %175, %177
  %179 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %178) #6
  %180 = fmul <4 x double> %175, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %181 = fsub <4 x double> %166, %180
  %182 = add <4 x i32> %179, %145
  %183 = fadd <4 x double> %181, %173
  %184 = fsub <4 x double> %181, %183
  %185 = fadd <4 x double> %173, %184
  %186 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %118
  %187 = load double, double* %186, align 8, !tbaa !3, !noalias !22
  %188 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %122
  %189 = load double, double* %188, align 8, !tbaa !3, !noalias !22
  %190 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %126
  %191 = load double, double* %190, align 8, !tbaa !3, !noalias !22
  %192 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %130
  %193 = load double, double* %192, align 8, !tbaa !3, !noalias !22
  %194 = insertelement <4 x double> undef, double %193, i32 0
  %195 = insertelement <4 x double> %194, double %191, i32 1
  %196 = insertelement <4 x double> %195, double %189, i32 2
  %197 = insertelement <4 x double> %196, double %187, i32 3
  %198 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %118
  %199 = load double, double* %198, align 8, !tbaa !3, !noalias !22
  %200 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %122
  %201 = load double, double* %200, align 8, !tbaa !3, !noalias !22
  %202 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %126
  %203 = load double, double* %202, align 8, !tbaa !3, !noalias !22
  %204 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %130
  %205 = load double, double* %204, align 8, !tbaa !3, !noalias !22
  %206 = insertelement <4 x double> undef, double %205, i32 0
  %207 = insertelement <4 x double> %206, double %203, i32 1
  %208 = insertelement <4 x double> %207, double %201, i32 2
  %209 = insertelement <4 x double> %208, double %199, i32 3
  %210 = fmul <4 x double> %197, %112
  %211 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %210
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %197, <4 x double> %112, <4 x double> %211) #6
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %209, <4 x double> %112, <4 x double> %212) #6
  %214 = fadd <4 x double> %183, %210
  %215 = fsub <4 x double> %214, %183
  %216 = fsub <4 x double> %214, %215
  %217 = fsub <4 x double> %183, %216
  %218 = fsub <4 x double> %210, %215
  %219 = fadd <4 x double> %218, %217
  %220 = fadd <4 x double> %185, %213
  %221 = fadd <4 x double> %220, %219
  %222 = fadd <4 x double> %214, %221
  %223 = fsub <4 x double> %214, %222
  %224 = fadd <4 x double> %221, %223
  %225 = fmul <4 x double> %222, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %226 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %225
  %227 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %222, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %226) #6
  %228 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %224, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %227) #6
  %229 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %222, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %228) #6
  %230 = and <4 x i64> %111, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %231 = bitcast <4 x i64> %230 to <4 x double>
  %232 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %231, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %233 = bitcast <4 x double> %232 to <4 x i64>
  %234 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %225, <4 x double> %112, <4 x double> %232) #6
  %235 = bitcast <4 x double> %229 to <4 x i64>
  %236 = xor <4 x i64> %233, <i64 -1, i64 -1, i64 -1, i64 -1>
  %237 = and <4 x i64> %236, %235
  %238 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %239 = fcmp uno <4 x double> %1, zeroinitializer
  %240 = or <4 x i1> %238, %239
  %241 = sext <4 x i1> %240 to <4 x i64>
  %242 = bitcast <4 x double> %234 to <4 x i64>
  %243 = or <4 x i64> %242, %241
  %244 = bitcast <4 x i64> %243 to <4 x double>
  %245 = or <4 x i64> %237, %241
  br label %246

; <label>:246:                                    ; preds = %31, %83, %13
  %247 = phi <4 x double> [ %244, %83 ], [ %78, %31 ], [ %19, %13 ]
  %248 = phi <4 x i64> [ %245, %83 ], [ %82, %31 ], [ %22, %13 ]
  %249 = phi <4 x i32> [ %182, %83 ], [ %38, %31 ], [ %16, %13 ]
  %250 = bitcast <4 x i64> %248 to <4 x double>
  %251 = fmul <4 x double> %247, %250
  %252 = fadd <4 x double> %251, %251
  %253 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %247, <4 x double> %247, <4 x double> %252) #6
  %254 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>, <4 x double> %253, <4 x double> <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>) #6
  %255 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %254, <4 x double> %253, <4 x double> <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>) #6
  %256 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %255, <4 x double> %253, <4 x double> <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>) #6
  %257 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %256, <4 x double> %253, <4 x double> <double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135, double 0x3F8111111110F135>) #6
  %258 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %257, <4 x double> %253, <4 x double> <double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542, double 0xBFC5555555555542>) #6
  %259 = fmul <4 x double> %247, %253
  %260 = fmul <4 x double> %259, %258
  %261 = fadd <4 x double> %247, %260
  %262 = fsub <4 x double> %247, %261
  %263 = fadd <4 x double> %260, %262
  %264 = fadd <4 x double> %263, %250
  %265 = fadd <4 x double> %261, %264
  %266 = xor <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %267 = bitcast <4 x i64> %266 to <4 x double>
  %268 = fcmp oeq <4 x double> %267, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %269 = sext <4 x i1> %268 to <4 x i64>
  %270 = bitcast <4 x i64> %269 to <4 x double>
  %271 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %265, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %270) #6
  %272 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>, <4 x double> %253, <4 x double> <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>) #6
  %273 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %272, <4 x double> %253, <4 x double> <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>) #6
  %274 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %273, <4 x double> %253, <4 x double> <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>) #6
  %275 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %274, <4 x double> %253, <4 x double> <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>) #6
  %276 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %275, <4 x double> %253, <4 x double> <double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545, double 0x3FA5555555555545>) #6
  %277 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %276, <4 x double> %253, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>) #6
  %278 = fmul <4 x double> %253, %277
  %279 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %278
  %280 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %253, <4 x double> %277, <4 x double> %279) #6
  %281 = fadd <4 x double> %278, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %282 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %281
  %283 = fadd <4 x double> %278, %282
  %284 = fadd <4 x double> %280, %283
  %285 = fadd <4 x double> %281, %284
  %286 = and <4 x i32> %249, <i32 1, i32 1, i32 1, i32 1>
  %287 = icmp eq <4 x i32> %286, zeroinitializer
  %288 = sitofp <4 x i1> %287 to <4 x double>
  %289 = fcmp oeq <4 x double> %288, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %290 = sext <4 x i1> %289 to <4 x i64>
  %291 = bitcast <4 x i64> %290 to <4 x double>
  %292 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %285, <4 x double> %271, <4 x double> %291) #6
  %293 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %271, <4 x double> %285, <4 x double> %291) #6
  %294 = and <4 x i32> %249, <i32 2, i32 2, i32 2, i32 2>
  %295 = icmp ne <4 x i32> %294, zeroinitializer
  %296 = sitofp <4 x i1> %295 to <4 x double>
  %297 = fcmp oeq <4 x double> %296, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %298 = select <4 x i1> %297, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %299 = bitcast <4 x double> %292 to <4 x i64>
  %300 = xor <4 x i64> %298, %299
  %301 = add <4 x i32> %249, <i32 1, i32 1, i32 1, i32 1>
  %302 = and <4 x i32> %301, <i32 2, i32 2, i32 2, i32 2>
  %303 = icmp ne <4 x i32> %302, zeroinitializer
  %304 = sitofp <4 x i1> %303 to <4 x double>
  %305 = fcmp oeq <4 x double> %304, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %306 = select <4 x i1> %305, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %307 = bitcast <4 x double> %293 to <4 x i64>
  %308 = xor <4 x i64> %306, %307
  %309 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %300, <4 x i64>* %309, align 32
  %310 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %311 = bitcast <4 x double>* %310 to <4 x i64>*
  store <4 x i64> %308, <4 x i64>* %311, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid4_u05fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> %11, <4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %11, <4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #6
  %19 = fmul <4 x double> %18, %11
  %20 = fadd <4 x double> %19, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %21 = fsub <4 x double> %20, %19
  %22 = fsub <4 x double> %20, %21
  %23 = fsub <4 x double> %19, %22
  %24 = fsub <4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %21
  %25 = fadd <4 x double> %24, %23
  %26 = fadd <4 x double> %25, <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>
  %27 = fmul <4 x double> %11, %20
  %28 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %20, <4 x double> %28) #6
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %29) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %26, <4 x double> %30) #6
  %32 = fadd <4 x double> %27, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %33 = fsub <4 x double> %32, %27
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %27, %34
  %36 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %31, <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fmul <4 x double> %10, %32
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %10, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %10, <4 x double> %42) #6
  %44 = fadd <4 x double> %43, %40
  %45 = bitcast <4 x double> %1 to <4 x i64>
  %46 = xor <4 x i64> %45, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = fcmp oeq <4 x double> %47, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %49 = sext <4 x i1> %48 to <4 x i64>
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %11, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %11, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %11, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %11, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #6
  %57 = fmul <4 x double> %11, %56
  %58 = fadd <4 x double> %57, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %59 = fsub <4 x double> %58, %57
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %57, %60
  %62 = fsub <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %63, <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>
  %65 = fmul <4 x double> %11, %58
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %58, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %58, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %64, <4 x double> %68) #6
  %70 = fadd <4 x double> %65, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %71 = fsub <4 x double> %70, %65
  %72 = fsub <4 x double> %70, %71
  %73 = fsub <4 x double> %65, %72
  %74 = fsub <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %71
  %75 = fadd <4 x double> %74, %73
  %76 = fadd <4 x double> %69, <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>
  %77 = fadd <4 x double> %76, %75
  %78 = fmul <4 x double> %11, %70
  %79 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %78
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %11, <4 x double> %79) #6
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %11, <4 x double> %80) #6
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %13, <4 x double> %81) #6
  %83 = fadd <4 x double> %78, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %84 = fsub <4 x double> %83, %78
  %85 = fsub <4 x double> %83, %84
  %86 = fsub <4 x double> %78, %85
  %87 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %84
  %88 = fadd <4 x double> %87, %86
  %89 = fadd <4 x double> %82, %88
  %90 = fadd <4 x double> %83, %89
  %91 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %92 = icmp eq <4 x i32> %91, zeroinitializer
  %93 = sitofp <4 x i1> %92 to <4 x double>
  %94 = fcmp oeq <4 x double> %93, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %95 = sext <4 x i1> %94 to <4 x i64>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> %51, <4 x double> %96) #6
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %51, <4 x double> %90, <4 x double> %96) #6
  %99 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %100 = icmp ne <4 x i32> %99, zeroinitializer
  %101 = sitofp <4 x i1> %100 to <4 x double>
  %102 = fcmp oeq <4 x double> %101, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %103 = select <4 x i1> %102, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %104 = bitcast <4 x double> %97 to <4 x i64>
  %105 = xor <4 x i64> %103, %104
  %106 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %107 = and <4 x i32> %106, <i32 4, i32 4, i32 4, i32 4>
  %108 = icmp ne <4 x i32> %107, zeroinitializer
  %109 = sitofp <4 x i1> %108 to <4 x double>
  %110 = fcmp oeq <4 x double> %109, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %111 = select <4 x i1> %110, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %112 = bitcast <4 x double> %98 to <4 x i64>
  %113 = xor <4 x i64> %111, %112
  %114 = bitcast <4 x i64> %113 to <4 x double>
  %115 = and <4 x i64> %45, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <4 x i64> %115 to <4 x double>
  %117 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %116, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %118 = bitcast <4 x double> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -1, i64 -1, i64 -1, i64 -1>
  %120 = and <4 x i64> %105, %119
  %121 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %114, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %117) #6
  %122 = fcmp oeq <4 x double> %116, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %123 = sext <4 x i1> %122 to <4 x i64>
  %124 = or <4 x i64> %120, %123
  %125 = bitcast <4 x double> %121 to <4 x i64>
  %126 = or <4 x i64> %125, %123
  %127 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %124, <4 x i64>* %127, align 32
  %128 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %129 = bitcast <4 x double>* %128 to <4 x i64>*
  store <4 x i64> %126, <4 x i64>* %129, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid4_u35fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <4 x double> %11, <4 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %11, <4 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #6
  %18 = fmul <4 x double> %17, %10
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <4 x double> %11, <4 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %11, <4 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %11, <4 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %11, <4 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %11, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %26 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sitofp <4 x i1> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %28, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x i64> %30 to <4 x double>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %31) #6
  %34 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <4 x i32> %34, zeroinitializer
  %36 = sitofp <4 x i1> %35 to <4 x double>
  %37 = fcmp oeq <4 x double> %36, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = select <4 x i1> %37, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %39 = bitcast <4 x double> %32 to <4 x i64>
  %40 = xor <4 x i64> %38, %39
  %41 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %42 = and <4 x i32> %41, <i32 4, i32 4, i32 4, i32 4>
  %43 = icmp ne <4 x i32> %42, zeroinitializer
  %44 = sitofp <4 x i1> %43 to <4 x double>
  %45 = fcmp oeq <4 x double> %44, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %46 = select <4 x i1> %45, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %47 = bitcast <4 x double> %33 to <4 x i64>
  %48 = xor <4 x i64> %46, %47
  %49 = bitcast <4 x double> %1 to <4 x i64>
  %50 = and <4 x i64> %49, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %51 = bitcast <4 x i64> %50 to <4 x double>
  %52 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %51, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %53 = bitcast <4 x double> %52 to <4 x i64>
  %54 = xor <4 x i64> %53, <i64 -1, i64 -1, i64 -1, i64 -1>
  %55 = and <4 x i64> %40, %54
  %56 = and <4 x i64> %48, %54
  %57 = fcmp oeq <4 x double> %51, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %58 = sext <4 x i1> %57 to <4 x i64>
  %59 = or <4 x i64> %55, %58
  %60 = or <4 x i64> %56, %58
  %61 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %59, <4 x i64>* %61, align 32
  %62 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %63 = bitcast <4 x double>* %62 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %63, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modfd4_fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %1, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #6
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = bitcast <4 x double> %1 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 30) #6
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> zeroinitializer, <4 x double> %14) #6
  %16 = bitcast <4 x double> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %18 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <4 x i64> %17, %18
  %20 = fsub <4 x double> %1, %15
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = and <4 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %23 = or <4 x i64> %22, %18
  %24 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %24, align 32
  %25 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %26 = bitcast <4 x double>* %25 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %26, align 32
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinpid4_u05fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <4 x i32> %7, zeroinitializer
  %9 = sitofp <4 x i1> %8 to <4 x double>
  %10 = fcmp oeq <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %11 = sext <4 x i1> %10 to <4 x i64>
  %12 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %13 = sitofp <4 x i32> %12 to <4 x double>
  %14 = fsub <4 x double> %2, %13
  %15 = fmul <4 x double> %14, %14
  %16 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %14, <4 x double> %16) #6
  %18 = bitcast <4 x i64> %11 to <4 x double>
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <4 x double> %18) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %15, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <4 x double> %18) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %15, <4 x double> %22) #6
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <4 x double> %18) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %15, <4 x double> %24) #6
  %26 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <4 x double> %18) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %15, <4 x double> %26) #6
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <4 x double> %18) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %15, <4 x double> %28) #6
  %30 = fmul <4 x double> %15, %29
  %31 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <4 x double> %18) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>, <4 x double> <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>, <4 x double> %18) #6
  %33 = fadd <4 x double> %30, %31
  %34 = fsub <4 x double> %33, %30
  %35 = fsub <4 x double> %33, %34
  %36 = fsub <4 x double> %30, %35
  %37 = fsub <4 x double> %31, %34
  %38 = fadd <4 x double> %37, %36
  %39 = fadd <4 x double> %32, %38
  %40 = fmul <4 x double> %15, %33
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %33, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %33, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %39, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <4 x double> %18) #6
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>, <4 x double> <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>, <4 x double> %18) #6
  %47 = fadd <4 x double> %40, %45
  %48 = fsub <4 x double> %47, %40
  %49 = fsub <4 x double> %47, %48
  %50 = fsub <4 x double> %40, %49
  %51 = fsub <4 x double> %45, %48
  %52 = fadd <4 x double> %51, %50
  %53 = fadd <4 x double> %44, %46
  %54 = fadd <4 x double> %53, %52
  %55 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %15, <4 x double> %18) #6
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %17, <4 x double> %18) #6
  %57 = fmul <4 x double> %47, %55
  %58 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %55, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %55, <4 x double> %59) #6
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %56, <4 x double> %60) #6
  %62 = fadd <4 x double> %57, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %63 = fsub <4 x double> %62, %57
  %64 = fsub <4 x double> %62, %63
  %65 = fsub <4 x double> %57, %64
  %66 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %63
  %67 = fadd <4 x double> %66, %65
  %68 = fadd <4 x double> %61, %67
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %57, <4 x double> %62, <4 x double> %18) #6
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> %68, <4 x double> %18) #6
  %71 = and <4 x i32> %6, <i32 4, i32 4, i32 4, i32 4>
  %72 = icmp ne <4 x i32> %71, zeroinitializer
  %73 = sitofp <4 x i1> %72 to <4 x double>
  %74 = fcmp oeq <4 x double> %73, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %75 = select <4 x i1> %74, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %76 = bitcast <4 x double> %69 to <4 x i64>
  %77 = xor <4 x i64> %75, %76
  %78 = bitcast <4 x double> %70 to <4 x i64>
  %79 = xor <4 x i64> %75, %78
  %80 = bitcast <4 x i64> %77 to <4 x double>
  %81 = bitcast <4 x i64> %79 to <4 x double>
  %82 = fadd <4 x double> %80, %81
  %83 = bitcast <4 x double> %0 to <4 x i64>
  %84 = xor <4 x i64> %83, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %85 = bitcast <4 x i64> %84 to <4 x double>
  %86 = fcmp oeq <4 x double> %85, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %87 = sext <4 x i1> %86 to <4 x i64>
  %88 = bitcast <4 x i64> %87 to <4 x double>
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %82, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %88) #6
  %90 = and <4 x i64> %83, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %91, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %93 = bitcast <4 x double> %92 to <4 x i64>
  %94 = bitcast <4 x double> %89 to <4 x i64>
  %95 = xor <4 x i64> %93, <i64 -1, i64 -1, i64 -1, i64 -1>
  %96 = and <4 x i64> %95, %94
  %97 = fcmp oeq <4 x double> %91, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %98 = bitcast <4 x i64> %96 to <4 x double>
  %99 = select <4 x i1> %97, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %98
  ret <4 x double> %99
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cospid4_u05fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sitofp <4 x i1> %8 to <4 x double>
  %10 = fcmp oeq <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %11 = sext <4 x i1> %10 to <4 x i64>
  %12 = and <4 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2>
  %13 = sitofp <4 x i32> %12 to <4 x double>
  %14 = fsub <4 x double> %2, %13
  %15 = fmul <4 x double> %14, %14
  %16 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %14, <4 x double> %16) #6
  %18 = bitcast <4 x i64> %11 to <4 x double>
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <4 x double> %18) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %15, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <4 x double> %18) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %15, <4 x double> %22) #6
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <4 x double> %18) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %15, <4 x double> %24) #6
  %26 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <4 x double> %18) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %15, <4 x double> %26) #6
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <4 x double> %18) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %15, <4 x double> %28) #6
  %30 = fmul <4 x double> %15, %29
  %31 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <4 x double> %18) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>, <4 x double> <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>, <4 x double> %18) #6
  %33 = fadd <4 x double> %30, %31
  %34 = fsub <4 x double> %33, %30
  %35 = fsub <4 x double> %33, %34
  %36 = fsub <4 x double> %30, %35
  %37 = fsub <4 x double> %31, %34
  %38 = fadd <4 x double> %37, %36
  %39 = fadd <4 x double> %32, %38
  %40 = fmul <4 x double> %15, %33
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %33, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %33, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %39, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <4 x double> %18) #6
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>, <4 x double> <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>, <4 x double> %18) #6
  %47 = fadd <4 x double> %40, %45
  %48 = fsub <4 x double> %47, %40
  %49 = fsub <4 x double> %47, %48
  %50 = fsub <4 x double> %40, %49
  %51 = fsub <4 x double> %45, %48
  %52 = fadd <4 x double> %51, %50
  %53 = fadd <4 x double> %44, %46
  %54 = fadd <4 x double> %53, %52
  %55 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %15, <4 x double> %18) #6
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %17, <4 x double> %18) #6
  %57 = fmul <4 x double> %47, %55
  %58 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %55, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %55, <4 x double> %59) #6
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %56, <4 x double> %60) #6
  %62 = fadd <4 x double> %57, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %63 = fsub <4 x double> %62, %57
  %64 = fsub <4 x double> %62, %63
  %65 = fsub <4 x double> %57, %64
  %66 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %63
  %67 = fadd <4 x double> %66, %65
  %68 = fadd <4 x double> %61, %67
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %57, <4 x double> %62, <4 x double> %18) #6
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> %68, <4 x double> %18) #6
  %71 = add <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %72 = and <4 x i32> %71, <i32 4, i32 4, i32 4, i32 4>
  %73 = icmp ne <4 x i32> %72, zeroinitializer
  %74 = sitofp <4 x i1> %73 to <4 x double>
  %75 = fcmp oeq <4 x double> %74, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %76 = select <4 x i1> %75, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %77 = bitcast <4 x double> %69 to <4 x i64>
  %78 = xor <4 x i64> %76, %77
  %79 = bitcast <4 x double> %70 to <4 x i64>
  %80 = xor <4 x i64> %76, %79
  %81 = bitcast <4 x i64> %78 to <4 x double>
  %82 = bitcast <4 x i64> %80 to <4 x double>
  %83 = fadd <4 x double> %81, %82
  %84 = bitcast <4 x double> %0 to <4 x i64>
  %85 = and <4 x i64> %84, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %86 = bitcast <4 x i64> %85 to <4 x double>
  %87 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %86, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %88 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %83, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %87) #6
  %89 = fcmp oeq <4 x double> %86, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = select <4 x i1> %89, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %88
  ret <4 x double> %90
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tand4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>, <4 x double> %16) #6
  br label %203

; <label>:18:                                     ; preds = %1
  %19 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+06, double 1.000000e+06, double 1.000000e+06, double 1.000000e+06>, i8 17) #6
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %22, %21
  %24 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %23, <2 x i64> <i64 -1, i64 -1>) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %42, label %26, !prof !2

; <label>:26:                                     ; preds = %18
  %27 = fmul <4 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %28 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %27, i32 11) #6
  %29 = fmul <4 x double> %28, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %30 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %31 = fsub <4 x double> %30, %29
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 8) #6
  %33 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %34) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>, <4 x double> %38) #6
  %40 = fadd <4 x double> %29, %32
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>, <4 x double> %39) #6
  br label %203

; <label>:42:                                     ; preds = %18
  %43 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <4 x i32>
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = bitcast <2 x i64> %44 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %50 = bitcast <4 x i32> %49 to <2 x i64>
  %51 = shufflevector <2 x i64> %50, <2 x i64> %47, <2 x i32> <i32 2, i32 1>
  %52 = bitcast <2 x i64> %51 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = and <4 x i32> %53, <i32 2047, i32 2047, i32 2047, i32 2047>
  %55 = add nsw <4 x i32> %54, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %56 = icmp ugt <4 x i32> %54, <i32 1723, i32 1723, i32 1723, i32 1723>
  %57 = select <4 x i1> %56, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %59 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %60 = and <4 x i32> %58, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = and <4 x i32> %59, <i32 0, i32 -1, i32 0, i32 -1>
  %63 = shl <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = add <4 x i32> %61, %45
  %65 = add <4 x i32> %63, %48
  %66 = bitcast <4 x i32> %64 to <2 x i64>
  %67 = bitcast <4 x i32> %65 to <2 x i64>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <4 x i64> %68, <4 x i64> %69, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %71 = bitcast <4 x i64> %70 to <4 x double>
  %72 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %73 = xor <4 x i32> %72, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %74 = and <4 x i32> %73, %55
  %75 = shl <4 x i32> %74, <i32 2, i32 2, i32 2, i32 2>
  %76 = extractelement <4 x i32> %75, i32 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !3, !noalias !25
  %80 = extractelement <4 x i32> %75, i32 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !3, !noalias !25
  %84 = extractelement <4 x i32> %75, i32 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !3, !noalias !25
  %88 = extractelement <4 x i32> %75, i32 0
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !3, !noalias !25
  %92 = insertelement <4 x double> undef, double %91, i32 0
  %93 = insertelement <4 x double> %92, double %87, i32 1
  %94 = insertelement <4 x double> %93, double %83, i32 2
  %95 = insertelement <4 x double> %94, double %79, i32 3
  %96 = fmul <4 x double> %95, %71
  %97 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %95, <4 x double> %97) #6
  %99 = fmul <4 x double> %96, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %100 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %99, i32 8) #6
  %101 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %96, i32 8) #6
  %102 = fmul <4 x double> %101, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %103 = fsub <4 x double> %100, %102
  %104 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %103) #6
  %105 = fmul <4 x double> %100, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %106 = fsub <4 x double> %96, %105
  %107 = fadd <4 x double> %98, %106
  %108 = fsub <4 x double> %106, %107
  %109 = fadd <4 x double> %98, %108
  %110 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %77
  %111 = load double, double* %110, align 8, !tbaa !3, !noalias !25
  %112 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %81
  %113 = load double, double* %112, align 8, !tbaa !3, !noalias !25
  %114 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %85
  %115 = load double, double* %114, align 8, !tbaa !3, !noalias !25
  %116 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %89
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !25
  %118 = insertelement <4 x double> undef, double %117, i32 0
  %119 = insertelement <4 x double> %118, double %115, i32 1
  %120 = insertelement <4 x double> %119, double %113, i32 2
  %121 = insertelement <4 x double> %120, double %111, i32 3
  %122 = fmul <4 x double> %121, %71
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %121, <4 x double> %123) #6
  %125 = fadd <4 x double> %107, %122
  %126 = fsub <4 x double> %125, %107
  %127 = fsub <4 x double> %125, %126
  %128 = fsub <4 x double> %107, %127
  %129 = fsub <4 x double> %122, %126
  %130 = fadd <4 x double> %129, %128
  %131 = fadd <4 x double> %109, %124
  %132 = fadd <4 x double> %131, %130
  %133 = fmul <4 x double> %125, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %134 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %133, i32 8) #6
  %135 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %125, i32 8) #6
  %136 = fmul <4 x double> %135, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %137 = fsub <4 x double> %134, %136
  %138 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %137) #6
  %139 = fmul <4 x double> %134, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %140 = fsub <4 x double> %125, %139
  %141 = add <4 x i32> %138, %104
  %142 = fadd <4 x double> %140, %132
  %143 = fsub <4 x double> %140, %142
  %144 = fadd <4 x double> %132, %143
  %145 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %77
  %146 = load double, double* %145, align 8, !tbaa !3, !noalias !25
  %147 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %81
  %148 = load double, double* %147, align 8, !tbaa !3, !noalias !25
  %149 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %85
  %150 = load double, double* %149, align 8, !tbaa !3, !noalias !25
  %151 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %89
  %152 = load double, double* %151, align 8, !tbaa !3, !noalias !25
  %153 = insertelement <4 x double> undef, double %152, i32 0
  %154 = insertelement <4 x double> %153, double %150, i32 1
  %155 = insertelement <4 x double> %154, double %148, i32 2
  %156 = insertelement <4 x double> %155, double %146, i32 3
  %157 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %77
  %158 = load double, double* %157, align 8, !tbaa !3, !noalias !25
  %159 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %81
  %160 = load double, double* %159, align 8, !tbaa !3, !noalias !25
  %161 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %85
  %162 = load double, double* %161, align 8, !tbaa !3, !noalias !25
  %163 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %89
  %164 = load double, double* %163, align 8, !tbaa !3, !noalias !25
  %165 = insertelement <4 x double> undef, double %164, i32 0
  %166 = insertelement <4 x double> %165, double %162, i32 1
  %167 = insertelement <4 x double> %166, double %160, i32 2
  %168 = insertelement <4 x double> %167, double %158, i32 3
  %169 = fmul <4 x double> %156, %71
  %170 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %169
  %171 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %71, <4 x double> %170) #6
  %172 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %71, <4 x double> %171) #6
  %173 = fadd <4 x double> %142, %169
  %174 = fsub <4 x double> %173, %142
  %175 = fsub <4 x double> %173, %174
  %176 = fsub <4 x double> %142, %175
  %177 = fsub <4 x double> %169, %174
  %178 = fadd <4 x double> %177, %176
  %179 = fadd <4 x double> %144, %172
  %180 = fadd <4 x double> %179, %178
  %181 = fadd <4 x double> %173, %180
  %182 = fsub <4 x double> %173, %181
  %183 = fadd <4 x double> %180, %182
  %184 = fmul <4 x double> %181, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %185 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %184
  %186 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %181, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %185) #6
  %187 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %186) #6
  %188 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %181, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %187) #6
  %189 = and <4 x i64> %70, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %190 = bitcast <4 x i64> %189 to <4 x double>
  %191 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %190, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %192 = bitcast <4 x double> %191 to <4 x i64>
  %193 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %184, <4 x double> %71, <4 x double> %191) #6
  %194 = bitcast <4 x double> %188 to <4 x i64>
  %195 = xor <4 x i64> %192, <i64 -1, i64 -1, i64 -1, i64 -1>
  %196 = and <4 x i64> %195, %194
  %197 = bitcast <4 x i64> %196 to <4 x double>
  %198 = fadd <4 x double> %193, %197
  %199 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %200 = fcmp uno <4 x double> %0, zeroinitializer
  %201 = or <4 x i1> %199, %200
  %202 = select <4 x i1> %201, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %198
  br label %203

; <label>:203:                                    ; preds = %26, %42, %12
  %204 = phi <4 x i32> [ %15, %12 ], [ %33, %26 ], [ %141, %42 ]
  %205 = phi <4 x double> [ %17, %12 ], [ %41, %26 ], [ %202, %42 ]
  %206 = fmul <4 x double> %205, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %207 = fmul <4 x double> %206, %206
  %208 = fmul <4 x double> %207, %207
  %209 = fmul <4 x double> %208, %208
  %210 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <4 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #6
  %211 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <4 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #6
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %208, <4 x double> %210, <4 x double> %211) #6
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <4 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #6
  %214 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <4 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933>) #6
  %215 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %208, <4 x double> %213, <4 x double> %214) #6
  %216 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %209, <4 x double> %212, <4 x double> %215) #6
  %217 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %216, <4 x double> %207, <4 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568>) #6
  %218 = fmul <4 x double> %206, %217
  %219 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %207, <4 x double> %218, <4 x double> %206) #6
  %220 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %219, <4 x double> %219, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #6
  %221 = fmul <4 x double> %219, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %222 = and <4 x i32> %204, <i32 1, i32 1, i32 1, i32 1>
  %223 = icmp ne <4 x i32> %222, zeroinitializer
  %224 = sitofp <4 x i1> %223 to <4 x double>
  %225 = fcmp oeq <4 x double> %224, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %226 = sext <4 x i1> %225 to <4 x i64>
  %227 = bitcast <4 x double> %220 to <4 x i64>
  %228 = xor <4 x i64> %227, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %229 = bitcast <4 x i64> %228 to <4 x double>
  %230 = bitcast <4 x i64> %226 to <4 x double>
  %231 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %221, <4 x double> %229, <4 x double> %230) #6
  %232 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %220, <4 x double> %221, <4 x double> %230) #6
  %233 = fdiv <4 x double> %231, %232
  %234 = fcmp oeq <4 x double> %0, zeroinitializer
  %235 = sext <4 x i1> %234 to <4 x i64>
  %236 = bitcast <4 x i64> %235 to <4 x double>
  %237 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %233, <4 x double> %0, <4 x double> %236) #6
  ret <4 x double> %237
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tand4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.500000e+01, double 1.500000e+01, double 1.500000e+01, double 1.500000e+01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %14 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %13, i32 8) #6
  %15 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>, <4 x double> %0) #6
  %17 = fmul <4 x double> %14, <double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %18 = fadd <4 x double> %17, %16
  %19 = fsub <4 x double> %16, %18
  %20 = fadd <4 x double> %17, %19
  %21 = bitcast <4 x double> %20 to <4 x i64>
  br label %258

; <label>:22:                                     ; preds = %1
  %23 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+14, double 1.000000e+14, double 1.000000e+14, double 1.000000e+14>, i8 17) #6
  %24 = bitcast <4 x double> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #6
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %95, label %30, !prof !2

; <label>:30:                                     ; preds = %22
  %31 = fmul <4 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %32 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %31, i32 11) #6
  %33 = fmul <4 x double> %32, <double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000, double 0x4170000000000000>
  %34 = fmul <4 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %34
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>, <4 x double> %0, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC86B01EC5417056, double 0xBC86B01EC5417056, double 0xBC86B01EC5417056, double 0xBC86B01EC5417056>, <4 x double> %0, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>, <4 x double> %38) #6
  %40 = fsub <4 x double> %39, %33
  %41 = fadd <4 x double> %34, %40
  %42 = fsub <4 x double> %41, %34
  %43 = fsub <4 x double> %41, %42
  %44 = fsub <4 x double> %34, %43
  %45 = fsub <4 x double> %40, %42
  %46 = fadd <4 x double> %45, %44
  %47 = fadd <4 x double> %37, %46
  %48 = fadd <4 x double> %41, %47
  %49 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %48, i32 11) #6
  %50 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>, <4 x double> %0) #6
  %52 = fmul <4 x double> %49, <double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %53 = fadd <4 x double> %52, %51
  %54 = fsub <4 x double> %51, %53
  %55 = fadd <4 x double> %52, %54
  %56 = fmul <4 x double> %33, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %57 = fadd <4 x double> %56, %53
  %58 = fsub <4 x double> %57, %53
  %59 = fsub <4 x double> %57, %58
  %60 = fsub <4 x double> %53, %59
  %61 = fsub <4 x double> %56, %58
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fmul <4 x double> %49, <double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000, double 0xBE5110B460000000>
  %65 = fadd <4 x double> %64, %57
  %66 = fsub <4 x double> %65, %57
  %67 = fsub <4 x double> %65, %66
  %68 = fsub <4 x double> %57, %67
  %69 = fsub <4 x double> %64, %66
  %70 = fadd <4 x double> %69, %68
  %71 = fadd <4 x double> %70, %63
  %72 = fmul <4 x double> %33, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %73 = fadd <4 x double> %72, %65
  %74 = fsub <4 x double> %73, %65
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %65, %75
  %77 = fsub <4 x double> %72, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %78, %71
  %80 = fmul <4 x double> %49, <double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000, double 0xBC91A62630000000>
  %81 = fadd <4 x double> %80, %73
  %82 = fsub <4 x double> %81, %73
  %83 = fsub <4 x double> %81, %82
  %84 = fsub <4 x double> %73, %83
  %85 = fsub <4 x double> %80, %82
  %86 = fadd <4 x double> %85, %84
  %87 = fadd <4 x double> %86, %79
  %88 = fadd <4 x double> %33, %49
  %89 = fmul <4 x double> %88, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %90 = fadd <4 x double> %89, %81
  %91 = fsub <4 x double> %81, %90
  %92 = fadd <4 x double> %89, %91
  %93 = fadd <4 x double> %92, %87
  %94 = bitcast <4 x double> %93 to <4 x i64>
  br label %258

; <label>:95:                                     ; preds = %22
  %96 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %97 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %98 = bitcast <2 x i64> %96 to <4 x i32>
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = bitcast <2 x i64> %97 to <4 x i32>
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %103, <2 x i64> %100, <2 x i32> <i32 2, i32 1>
  %105 = bitcast <2 x i64> %104 to <4 x i32>
  %106 = lshr <4 x i32> %105, <i32 20, i32 20, i32 20, i32 20>
  %107 = and <4 x i32> %106, <i32 2047, i32 2047, i32 2047, i32 2047>
  %108 = add nsw <4 x i32> %107, <i32 -1078, i32 -1078, i32 -1078, i32 -1078>
  %109 = icmp ugt <4 x i32> %107, <i32 1723, i32 1723, i32 1723, i32 1723>
  %110 = select <4 x i1> %109, <4 x i32> <i32 -64, i32 -64, i32 -64, i32 -64>, <4 x i32> zeroinitializer
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %112 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %113 = and <4 x i32> %111, <i32 0, i32 -1, i32 0, i32 -1>
  %114 = shl <4 x i32> %113, <i32 20, i32 20, i32 20, i32 20>
  %115 = and <4 x i32> %112, <i32 0, i32 -1, i32 0, i32 -1>
  %116 = shl <4 x i32> %115, <i32 20, i32 20, i32 20, i32 20>
  %117 = add <4 x i32> %114, %98
  %118 = add <4 x i32> %116, %101
  %119 = bitcast <4 x i32> %117 to <2 x i64>
  %120 = bitcast <4 x i32> %118 to <2 x i64>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <4 x double>
  %125 = ashr <4 x i32> %108, <i32 31, i32 31, i32 31, i32 31>
  %126 = xor <4 x i32> %125, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %127 = and <4 x i32> %126, %108
  %128 = shl <4 x i32> %127, <i32 2, i32 2, i32 2, i32 2>
  %129 = extractelement <4 x i32> %128, i32 3
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !28
  %133 = extractelement <4 x i32> %128, i32 2
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %134
  %136 = load double, double* %135, align 8, !tbaa !3, !noalias !28
  %137 = extractelement <4 x i32> %128, i32 1
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %138
  %140 = load double, double* %139, align 8, !tbaa !3, !noalias !28
  %141 = extractelement <4 x i32> %128, i32 0
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %142
  %144 = load double, double* %143, align 8, !tbaa !3, !noalias !28
  %145 = insertelement <4 x double> undef, double %144, i32 0
  %146 = insertelement <4 x double> %145, double %140, i32 1
  %147 = insertelement <4 x double> %146, double %136, i32 2
  %148 = insertelement <4 x double> %147, double %132, i32 3
  %149 = fmul <4 x double> %148, %124
  %150 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %149
  %151 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %148, <4 x double> %150) #6
  %152 = fmul <4 x double> %149, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %153 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %152, i32 8) #6
  %154 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %149, i32 8) #6
  %155 = fmul <4 x double> %154, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %156 = fsub <4 x double> %153, %155
  %157 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %156) #6
  %158 = fmul <4 x double> %153, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %159 = fsub <4 x double> %149, %158
  %160 = fadd <4 x double> %151, %159
  %161 = fsub <4 x double> %159, %160
  %162 = fadd <4 x double> %151, %161
  %163 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %130
  %164 = load double, double* %163, align 8, !tbaa !3, !noalias !28
  %165 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %134
  %166 = load double, double* %165, align 8, !tbaa !3, !noalias !28
  %167 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %138
  %168 = load double, double* %167, align 8, !tbaa !3, !noalias !28
  %169 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %142
  %170 = load double, double* %169, align 8, !tbaa !3, !noalias !28
  %171 = insertelement <4 x double> undef, double %170, i32 0
  %172 = insertelement <4 x double> %171, double %168, i32 1
  %173 = insertelement <4 x double> %172, double %166, i32 2
  %174 = insertelement <4 x double> %173, double %164, i32 3
  %175 = fmul <4 x double> %174, %124
  %176 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %175
  %177 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %174, <4 x double> %176) #6
  %178 = fadd <4 x double> %160, %175
  %179 = fsub <4 x double> %178, %160
  %180 = fsub <4 x double> %178, %179
  %181 = fsub <4 x double> %160, %180
  %182 = fsub <4 x double> %175, %179
  %183 = fadd <4 x double> %182, %181
  %184 = fadd <4 x double> %162, %177
  %185 = fadd <4 x double> %184, %183
  %186 = fmul <4 x double> %178, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %187 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %186, i32 8) #6
  %188 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %178, i32 8) #6
  %189 = fmul <4 x double> %188, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %190 = fsub <4 x double> %187, %189
  %191 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %190) #6
  %192 = fmul <4 x double> %187, <double 2.500000e-01, double 2.500000e-01, double 2.500000e-01, double 2.500000e-01>
  %193 = fsub <4 x double> %178, %192
  %194 = add <4 x i32> %191, %157
  %195 = fadd <4 x double> %193, %185
  %196 = fsub <4 x double> %193, %195
  %197 = fadd <4 x double> %185, %196
  %198 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %130
  %199 = load double, double* %198, align 8, !tbaa !3, !noalias !28
  %200 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %134
  %201 = load double, double* %200, align 8, !tbaa !3, !noalias !28
  %202 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %138
  %203 = load double, double* %202, align 8, !tbaa !3, !noalias !28
  %204 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %142
  %205 = load double, double* %204, align 8, !tbaa !3, !noalias !28
  %206 = insertelement <4 x double> undef, double %205, i32 0
  %207 = insertelement <4 x double> %206, double %203, i32 1
  %208 = insertelement <4 x double> %207, double %201, i32 2
  %209 = insertelement <4 x double> %208, double %199, i32 3
  %210 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %130
  %211 = load double, double* %210, align 8, !tbaa !3, !noalias !28
  %212 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %134
  %213 = load double, double* %212, align 8, !tbaa !3, !noalias !28
  %214 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %138
  %215 = load double, double* %214, align 8, !tbaa !3, !noalias !28
  %216 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %142
  %217 = load double, double* %216, align 8, !tbaa !3, !noalias !28
  %218 = insertelement <4 x double> undef, double %217, i32 0
  %219 = insertelement <4 x double> %218, double %215, i32 1
  %220 = insertelement <4 x double> %219, double %213, i32 2
  %221 = insertelement <4 x double> %220, double %211, i32 3
  %222 = fmul <4 x double> %209, %124
  %223 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %222
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %209, <4 x double> %124, <4 x double> %223) #6
  %225 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %221, <4 x double> %124, <4 x double> %224) #6
  %226 = fadd <4 x double> %195, %222
  %227 = fsub <4 x double> %226, %195
  %228 = fsub <4 x double> %226, %227
  %229 = fsub <4 x double> %195, %228
  %230 = fsub <4 x double> %222, %227
  %231 = fadd <4 x double> %230, %229
  %232 = fadd <4 x double> %197, %225
  %233 = fadd <4 x double> %232, %231
  %234 = fadd <4 x double> %226, %233
  %235 = fsub <4 x double> %226, %234
  %236 = fadd <4 x double> %233, %235
  %237 = fmul <4 x double> %234, <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>
  %238 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %237
  %239 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %234, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %238) #6
  %240 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %236, <4 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18, double 0x401921FB54442D18>, <4 x double> %239) #6
  %241 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %234, <4 x double> <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>, <4 x double> %240) #6
  %242 = and <4 x i64> %123, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %243 = bitcast <4 x i64> %242 to <4 x double>
  %244 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %243, <4 x double> <double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666, double 0x3FE6666666666666>, i8 17) #6
  %245 = bitcast <4 x double> %244 to <4 x i64>
  %246 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %237, <4 x double> %124, <4 x double> %244) #6
  %247 = bitcast <4 x double> %241 to <4 x i64>
  %248 = xor <4 x i64> %245, <i64 -1, i64 -1, i64 -1, i64 -1>
  %249 = and <4 x i64> %248, %247
  %250 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %251 = fcmp uno <4 x double> %0, zeroinitializer
  %252 = or <4 x i1> %250, %251
  %253 = sext <4 x i1> %252 to <4 x i64>
  %254 = bitcast <4 x double> %246 to <4 x i64>
  %255 = or <4 x i64> %254, %253
  %256 = bitcast <4 x i64> %255 to <4 x double>
  %257 = or <4 x i64> %249, %253
  br label %258

; <label>:258:                                    ; preds = %30, %95, %12
  %259 = phi <4 x double> [ %256, %95 ], [ %90, %30 ], [ %18, %12 ]
  %260 = phi <4 x i64> [ %257, %95 ], [ %94, %30 ], [ %21, %12 ]
  %261 = phi <4 x i32> [ %194, %95 ], [ %50, %30 ], [ %15, %12 ]
  %262 = bitcast <4 x i64> %260 to <4 x double>
  %263 = fmul <4 x double> %259, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %264 = fmul <4 x double> %262, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %265 = fmul <4 x double> %263, %263
  %266 = fadd <4 x double> %263, %263
  %267 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %265
  %268 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %263, <4 x double> %263, <4 x double> %267) #6
  %269 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %266, <4 x double> %264, <4 x double> %268) #6
  %270 = fmul <4 x double> %265, %265
  %271 = fmul <4 x double> %270, %270
  %272 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> <double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED, double 0x3F35445F555134ED>, <4 x double> <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>) #6
  %273 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>, <4 x double> <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>) #6
  %274 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %270, <4 x double> %272, <4 x double> %273) #6
  %275 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>, <4 x double> <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>) #6
  %276 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>, <4 x double> <double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933, double 0x3FC111111110E933>) #6
  %277 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %270, <4 x double> %275, <4 x double> %276) #6
  %278 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> %274, <4 x double> %277) #6
  %279 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %278, <4 x double> %265, <4 x double> <double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568, double 0x3FD5555555555568>) #6
  %280 = fmul <4 x double> %263, %265
  %281 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %280
  %282 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> %263, <4 x double> %281) #6
  %283 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %269, <4 x double> %263, <4 x double> %282) #6
  %284 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> %264, <4 x double> %283) #6
  %285 = fmul <4 x double> %280, %279
  %286 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %285
  %287 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %280, <4 x double> %279, <4 x double> %286) #6
  %288 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %284, <4 x double> %279, <4 x double> %287) #6
  %289 = fadd <4 x double> %263, %285
  %290 = fsub <4 x double> %263, %289
  %291 = fadd <4 x double> %285, %290
  %292 = fadd <4 x double> %264, %291
  %293 = fadd <4 x double> %292, %288
  %294 = fmul <4 x double> %289, %289
  %295 = fadd <4 x double> %289, %289
  %296 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %294
  %297 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %289, <4 x double> %289, <4 x double> %296) #6
  %298 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %295, <4 x double> %293, <4 x double> %297) #6
  %299 = fadd <4 x double> %294, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %300 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %299
  %301 = fadd <4 x double> %294, %300
  %302 = fadd <4 x double> %301, %298
  %303 = fmul <4 x double> %289, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %304 = fmul <4 x double> %293, <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>
  %305 = and <4 x i32> %261, <i32 1, i32 1, i32 1, i32 1>
  %306 = icmp ne <4 x i32> %305, zeroinitializer
  %307 = sitofp <4 x i1> %306 to <4 x double>
  %308 = fcmp oeq <4 x double> %307, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %309 = sext <4 x i1> %308 to <4 x i64>
  %310 = bitcast <4 x double> %299 to <4 x i64>
  %311 = xor <4 x i64> %310, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %312 = bitcast <4 x double> %302 to <4 x i64>
  %313 = xor <4 x i64> %312, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %314 = bitcast <4 x i64> %311 to <4 x double>
  %315 = bitcast <4 x i64> %313 to <4 x double>
  %316 = bitcast <4 x i64> %309 to <4 x double>
  %317 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %303, <4 x double> %314, <4 x double> %316) #6
  %318 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %304, <4 x double> %315, <4 x double> %316) #6
  %319 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %299, <4 x double> %303, <4 x double> %316) #6
  %320 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %302, <4 x double> %304, <4 x double> %316) #6
  %321 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %319
  %322 = fmul <4 x double> %317, %321
  %323 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %322
  %324 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %321, <4 x double> %317, <4 x double> %323) #6
  %325 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %319
  %326 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %325, <4 x double> %321, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %327 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %320
  %328 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %327, <4 x double> %321, <4 x double> %326) #6
  %329 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %318, <4 x double> %321, <4 x double> %324) #6
  %330 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %322, <4 x double> %328, <4 x double> %329) #6
  %331 = fadd <4 x double> %322, %330
  %332 = fcmp oeq <4 x double> %0, zeroinitializer
  %333 = sext <4 x i1> %332 to <4 x i64>
  %334 = bitcast <4 x i64> %333 to <4 x double>
  %335 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %331, <4 x double> %0, <4 x double> %334) #6
  ret <4 x double> %335
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atan2d4_u35fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %8 = xor <4 x i64> %7, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %9 = bitcast <4 x i64> %8 to <4 x double>
  %10 = fcmp oeq <4 x double> %9, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %11 = select <4 x i1> %10, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer
  %12 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %11) #6
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -4294967298, i64 -4294967298>
  %15 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %16 = bitcast <4 x i64> %15 to <4 x double>
  %17 = bitcast <2 x i64> %14 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %16, <4 x double> %5, i8 17) #6
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = and <4 x i64> %20, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <2 x i64> %14 to <16 x i8>
  %25 = bitcast <4 x i32> %18 to <16 x i8>
  %26 = bitcast <4 x i32> %23 to <16 x i8>
  %27 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %24, <16 x i8> %25, <16 x i8> %26) #6
  %28 = or <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %29 = bitcast <4 x i64> %28 to <4 x double>
  %30 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %29, <4 x double> %19) #6
  %31 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %16, <4 x double> %5) #6
  %32 = fdiv <4 x double> %30, %31
  %33 = fmul <4 x double> %32, %32
  %34 = fmul <4 x double> %33, %33
  %35 = fmul <4 x double> %34, %34
  %36 = fmul <4 x double> %35, %35
  %37 = fmul <4 x double> %36, %36
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <4 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <4 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <4 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <4 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <4 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %43, <4 x double> %44) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %42, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <4 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <4 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #6
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %47, <4 x double> %48) #6
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <4 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <4 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %50, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %49, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %46, <4 x double> %53) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %39, <4 x double> %54) #6
  %56 = fmul <4 x double> %33, %55
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %56, <4 x double> %32) #6
  %58 = bitcast <16 x i8> %27 to <4 x i32>
  %59 = sitofp <4 x i32> %58 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %57) #6
  %61 = bitcast <4 x double> %60 to <4 x i64>
  %62 = xor <4 x i64> %7, %61
  %63 = bitcast <4 x i64> %62 to <4 x double>
  %64 = fcmp oeq <4 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %65 = fcmp oeq <4 x double> %1, zeroinitializer
  %66 = or <4 x i1> %64, %65
  %67 = sext <4 x i1> %66 to <4 x i64>
  %68 = or <4 x i64> %7, <i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352>
  %69 = bitcast <4 x i64> %68 to <4 x double>
  %70 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %69
  %71 = select <4 x i1> %64, <4 x double> %70, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %72 = bitcast <4 x i64> %67 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %63, <4 x double> %71, <4 x double> %72) #6
  %74 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = or <4 x i64> %7, <i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856>
  %77 = bitcast <4 x i64> %76 to <4 x double>
  %78 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %77
  %79 = select <4 x i1> %64, <4 x double> %78, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %80 = bitcast <4 x i64> %75 to <4 x double>
  %81 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> %79, <4 x double> %80) #6
  %82 = fcmp oeq <4 x double> %0, zeroinitializer
  %83 = sext <4 x i1> %82 to <4 x i64>
  %84 = select <4 x i1> %10, <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, <4 x double> zeroinitializer
  %85 = bitcast <4 x i64> %83 to <4 x double>
  %86 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %81, <4 x double> %84, <4 x double> %85) #6
  %87 = fcmp uno <4 x double> %0, %1
  %88 = bitcast <4 x double> %86 to <4 x i64>
  %89 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = xor <4 x i64> %89, %88
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = select <4 x i1> %87, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %91
  ret <4 x double> %92
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atan2d4_u10fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 0x4000000000001, double 0x4000000000001, double 0x4000000000001, double 0x4000000000001>, i8 17) #6
  %7 = fmul <4 x double> %1, <double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %7, <4 x double> %6) #6
  %9 = fmul <4 x double> %0, <double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000, double 0x4340000000000000>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %9, <4 x double> %6) #6
  %11 = bitcast <4 x double> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = bitcast <4 x double> %8 to <4 x i64>
  %15 = and <4 x i64> %14, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %16 = xor <4 x i64> %15, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = fcmp oeq <4 x double> %17, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %19 = select <4 x i1> %18, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer
  %20 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %19) #6
  %21 = bitcast <4 x i32> %20 to <2 x i64>
  %22 = and <2 x i64> %21, <i64 -4294967298, i64 -4294967298>
  %23 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> zeroinitializer, i8 17) #6
  %24 = bitcast <4 x double> %23 to <4 x i64>
  %25 = and <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = xor <4 x i64> %25, %14
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = bitcast <4 x i64> %25 to <4 x double>
  %29 = bitcast <2 x i64> %22 to <4 x i32>
  %30 = add <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %27, <4 x double> %13, i8 17) #6
  %32 = bitcast <4 x double> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %34 = bitcast <4 x i64> %33 to <4 x double>
  %35 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %34) #6
  %36 = bitcast <2 x i64> %22 to <16 x i8>
  %37 = bitcast <4 x i32> %30 to <16 x i8>
  %38 = bitcast <4 x i32> %35 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %36, <16 x i8> %37, <16 x i8> %38) #6
  %40 = xor <4 x i64> %26, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = xor <4 x i64> %25, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %42 = bitcast <4 x i64> %40 to <4 x double>
  %43 = bitcast <4 x i64> %41 to <4 x double>
  %44 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %13, <4 x double> %42, <4 x double> %31) #6
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %43, <4 x double> %31) #6
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> %13, <4 x double> %31) #6
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> zeroinitializer, <4 x double> %31) #6
  %48 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %46
  %49 = fmul <4 x double> %44, %48
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> %44, <4 x double> %50) #6
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %46
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %48, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %47
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %48, <4 x double> %53) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %45, <4 x double> %48, <4 x double> %51) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %55, <4 x double> %56) #6
  %58 = fmul <4 x double> %49, %49
  %59 = fadd <4 x double> %49, %49
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %58
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %49, <4 x double> %60) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %57, <4 x double> %61) #6
  %63 = fadd <4 x double> %58, %62
  %64 = fsub <4 x double> %58, %63
  %65 = fadd <4 x double> %62, %64
  %66 = fmul <4 x double> %63, %63
  %67 = fmul <4 x double> %66, %66
  %68 = fmul <4 x double> %67, %67
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <4 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <4 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %69, <4 x double> %70) #6
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <4 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #6
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <4 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %72, <4 x double> %73) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %71, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <4 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <4 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <4 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #6
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %63, <4 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <4 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #6
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %79, <4 x double> %80) #6
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %78, <4 x double> %81) #6
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %75, <4 x double> %82) #6
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %63, <4 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %84, <4 x double> %63, <4 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #6
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %85, <4 x double> %63, <4 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #6
  %87 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %63, <4 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A>) #6
  %88 = fmul <4 x double> %49, %63
  %89 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %88
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %63, <4 x double> %89) #6
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %63, <4 x double> %90) #6
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %65, <4 x double> %91) #6
  %93 = fmul <4 x double> %88, %87
  %94 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %93
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %88, <4 x double> %87, <4 x double> %94) #6
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %87, <4 x double> %95) #6
  %97 = fadd <4 x double> %49, %93
  %98 = fsub <4 x double> %49, %97
  %99 = fadd <4 x double> %93, %98
  %100 = fadd <4 x double> %57, %99
  %101 = fadd <4 x double> %100, %96
  %102 = bitcast <16 x i8> %39 to <4 x i32>
  %103 = sitofp <4 x i32> %102 to <4 x double>
  %104 = fmul <4 x double> %103, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %105 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %104
  %106 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %103, <4 x double> %105) #6
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <4 x double> %103, <4 x double> %106) #6
  %108 = fadd <4 x double> %104, %97
  %109 = fsub <4 x double> %104, %108
  %110 = fadd <4 x double> %97, %109
  %111 = fadd <4 x double> %110, %107
  %112 = fadd <4 x double> %101, %111
  %113 = fadd <4 x double> %108, %112
  %114 = bitcast <4 x double> %113 to <4 x i64>
  %115 = xor <4 x i64> %15, %114
  %116 = bitcast <4 x i64> %115 to <4 x double>
  %117 = and <4 x i64> %14, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %118 = bitcast <4 x i64> %117 to <4 x double>
  %119 = fcmp oeq <4 x double> %118, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %120 = fcmp oeq <4 x double> %8, zeroinitializer
  %121 = or <4 x i1> %119, %120
  %122 = sext <4 x i1> %121 to <4 x i64>
  %123 = or <4 x i64> %15, <i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352, i64 4609753056924675352>
  %124 = bitcast <4 x i64> %123 to <4 x double>
  %125 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %124
  %126 = select <4 x i1> %119, <4 x double> %125, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %127 = bitcast <4 x i64> %122 to <4 x double>
  %128 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %116, <4 x double> %126, <4 x double> %127) #6
  %129 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %130 = sext <4 x i1> %129 to <4 x i64>
  %131 = or <4 x i64> %15, <i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856, i64 4605249457297304856>
  %132 = bitcast <4 x i64> %131 to <4 x double>
  %133 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %132
  %134 = select <4 x i1> %119, <4 x double> %133, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %135 = bitcast <4 x i64> %130 to <4 x double>
  %136 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %128, <4 x double> %134, <4 x double> %135) #6
  %137 = fcmp oeq <4 x double> %10, zeroinitializer
  %138 = sext <4 x i1> %137 to <4 x i64>
  %139 = select <4 x i1> %18, <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, <4 x double> zeroinitializer
  %140 = bitcast <4 x i64> %138 to <4 x double>
  %141 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %136, <4 x double> %139, <4 x double> %140) #6
  %142 = fcmp uno <4 x double> %10, %8
  %143 = bitcast <4 x double> %141 to <4 x i64>
  %144 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %145 = xor <4 x i64> %144, %143
  %146 = bitcast <4 x i64> %145 to <4 x double>
  %147 = select <4 x i1> %142, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %146
  ret <4 x double> %147
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asind4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #6
  %6 = fmul <4 x double> %0, %0
  %7 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <4 x double> %7, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> %5) #6
  %10 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %9) #6
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %4, <4 x double> %5) #6
  %12 = fmul <4 x double> %9, %9
  %13 = fmul <4 x double> %12, %12
  %14 = fmul <4 x double> %13, %13
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %15, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %18, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %21, <4 x double> %22) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %23) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %17, <4 x double> %24) #6
  %26 = fmul <4 x double> %9, %11
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %26, <4 x double> %11) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>) #6
  %29 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> %27, <4 x double> %5) #6
  %30 = bitcast <4 x double> %29 to <4 x i64>
  %31 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = xor <4 x i64> %31, %30
  %33 = bitcast <4 x i64> %32 to <4 x double>
  ret <4 x double> %33
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asind4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #6
  %6 = fmul <4 x double> %0, %0
  %7 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %8 = fmul <4 x double> %7, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> %5) #6
  %10 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %9) #6
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #6
  %14 = fadd <4 x double> %9, %11
  %15 = fsub <4 x double> %14, %9
  %16 = fsub <4 x double> %14, %15
  %17 = fsub <4 x double> %9, %16
  %18 = fsub <4 x double> %11, %15
  %19 = fadd <4 x double> %18, %17
  %20 = fadd <4 x double> %13, %19
  %21 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %10
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %10
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %24 = fmul <4 x double> %21, %23
  %25 = fmul <4 x double> %21, %14
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %21, <4 x double> %26) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %21, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <4 x double> %29, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %30, <4 x double> %4, <4 x double> %5) #6
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %31, <4 x double> zeroinitializer, <4 x double> %5) #6
  %34 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #6
  %39 = fmul <4 x double> %9, %9
  %40 = fmul <4 x double> %39, %39
  %41 = fmul <4 x double> %40, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %42, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %45, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #6
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #6
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %48, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %47, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %44, <4 x double> %51) #6
  %53 = fmul <4 x double> %9, %37
  %54 = fmul <4 x double> %53, %52
  %55 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %37
  %56 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %55
  %57 = fsub <4 x double> %56, %37
  %58 = fadd <4 x double> %57, <double 0x3C81A62633145C07, double 0x3C81A62633145C07, double 0x3C81A62633145C07, double 0x3C81A62633145C07>
  %59 = fsub <4 x double> %58, %38
  %60 = fsub <4 x double> %55, %54
  %61 = fsub <4 x double> %55, %60
  %62 = fsub <4 x double> %61, %54
  %63 = fadd <4 x double> %59, %62
  %64 = fadd <4 x double> %37, %54
  %65 = fadd <4 x double> %60, %63
  %66 = fmul <4 x double> %65, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> %64, <4 x double> %5) #6
  %68 = bitcast <4 x double> %67 to <4 x i64>
  %69 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = xor <4 x i64> %69, %68
  %71 = bitcast <4 x i64> %70 to <4 x double>
  ret <4 x double> %71
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acosd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %0, %0
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <4 x double> %8, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %7, <4 x double> %5) #6
  %11 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %10) #6
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %4, <4 x double> %5) #6
  %13 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = sext <4 x i1> %13 to <4 x i64>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> zeroinitializer, <4 x double> %15) #6
  %17 = fmul <4 x double> %10, %10
  %18 = fmul <4 x double> %17, %17
  %19 = fmul <4 x double> %18, %18
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %20, <4 x double> %21) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %23, <4 x double> %24) #6
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %26, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %28) #6
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %22, <4 x double> %29) #6
  %31 = fmul <4 x double> %10, %16
  %32 = fmul <4 x double> %31, %30
  %33 = bitcast <4 x double> %16 to <4 x i64>
  %34 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = xor <4 x i64> %34, %33
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = bitcast <4 x double> %32 to <4 x i64>
  %38 = xor <4 x i64> %34, %37
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = fadd <4 x double> %36, %39
  %41 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %40
  %42 = fadd <4 x double> %16, %32
  %43 = fmul <4 x double> %42, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %44 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %43, <4 x double> %41, <4 x double> %5) #6
  %45 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %46 = bitcast <4 x double> %45 to <4 x i64>
  %47 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %46, %47
  %49 = bitcast <4 x double> %44 to <4 x i64>
  %50 = xor <4 x i64> %49, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %51 = bitcast <4 x i64> %50 to <4 x double>
  %52 = fadd <4 x double> %51, <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>
  %53 = bitcast <4 x i64> %48 to <4 x double>
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> %52, <4 x double> %53) #6
  ret <4 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acosd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %0, %0
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <4 x double> %8, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %7, <4 x double> %5) #6
  %11 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %10) #6
  %12 = fmul <4 x double> %11, %11
  %13 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> %13) #6
  %15 = fadd <4 x double> %10, %12
  %16 = fsub <4 x double> %15, %10
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %10, %17
  %19 = fsub <4 x double> %12, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %14, %20
  %22 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %11
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %22, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %25 = fmul <4 x double> %22, %24
  %26 = fmul <4 x double> %22, %15
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %22, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %22, <4 x double> %28) #6
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %25, <4 x double> %29) #6
  %31 = fmul <4 x double> %26, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = fmul <4 x double> %30, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %31, <4 x double> %4, <4 x double> %5) #6
  %34 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %5) #6
  %35 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %36 = sext <4 x i1> %35 to <4 x i64>
  %37 = bitcast <4 x i64> %36 to <4 x double>
  %38 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %34, <4 x double> zeroinitializer, <4 x double> %37) #6
  %40 = fmul <4 x double> %10, %10
  %41 = fmul <4 x double> %40, %40
  %42 = fmul <4 x double> %41, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>, <4 x double> <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>, <4 x double> <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %43, <4 x double> %44) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>, <4 x double> <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>, <4 x double> <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %46, <4 x double> %47) #6
  %49 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>, <4 x double> <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>) #6
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>, <4 x double> <double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4, double 0x3FC55555555552F4>) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %49, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %48, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %45, <4 x double> %52) #6
  %54 = fmul <4 x double> %10, %38
  %55 = fmul <4 x double> %54, %53
  %56 = bitcast <4 x double> %38 to <4 x i64>
  %57 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = xor <4 x i64> %57, %56
  %59 = bitcast <4 x i64> %58 to <4 x double>
  %60 = bitcast <4 x double> %55 to <4 x i64>
  %61 = xor <4 x i64> %57, %60
  %62 = bitcast <4 x i64> %61 to <4 x double>
  %63 = fadd <4 x double> %59, %62
  %64 = fsub <4 x double> %59, %63
  %65 = fadd <4 x double> %64, %62
  %66 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %63
  %67 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %66
  %68 = fsub <4 x double> %67, %63
  %69 = fadd <4 x double> %68, <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %70 = fsub <4 x double> %69, %65
  %71 = fadd <4 x double> %38, %55
  %72 = fsub <4 x double> %38, %71
  %73 = fadd <4 x double> %55, %72
  %74 = fadd <4 x double> %39, %73
  %75 = fmul <4 x double> %71, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fmul <4 x double> %74, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %75, <4 x double> %66, <4 x double> %5) #6
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %76, <4 x double> %70, <4 x double> %5) #6
  %79 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %80 = bitcast <4 x double> %79 to <4 x i64>
  %81 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %82 = and <4 x i64> %80, %81
  %83 = fsub <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, %77
  %84 = fsub <4 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18, double 0x400921FB54442D18>, %83
  %85 = fsub <4 x double> %84, %77
  %86 = fadd <4 x double> %85, <double 0x3CA1A62633145C07, double 0x3CA1A62633145C07, double 0x3CA1A62633145C07, double 0x3CA1A62633145C07>
  %87 = fsub <4 x double> %86, %78
  %88 = bitcast <4 x i64> %82 to <4 x double>
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> %83, <4 x double> %88) #6
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> %87, <4 x double> %88) #6
  %91 = fadd <4 x double> %89, %90
  ret <4 x double> %91
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atand4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> zeroinitializer) #6
  %6 = bitcast <4 x i32> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 -4294967298, i64 -4294967298>
  %8 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> zeroinitializer, i8 17) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = and <4 x i64> %9, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %11 = or <4 x i64> %10, <i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = bitcast <4 x i64> %10 to <4 x double>
  %14 = bitcast <2 x i64> %7 to <4 x i32>
  %15 = add <4 x i32> %14, <i32 1, i32 1, i32 1, i32 1>
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %12, <4 x double> %4, i8 17) #6
  %17 = bitcast <4 x double> %16 to <4 x i64>
  %18 = and <4 x i64> %17, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %19 = bitcast <4 x i64> %18 to <4 x double>
  %20 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %19) #6
  %21 = bitcast <2 x i64> %7 to <16 x i8>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = bitcast <4 x i32> %20 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %22, <16 x i8> %23) #6
  %25 = xor <4 x i64> %10, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %26 = xor <4 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %27 = bitcast <4 x i64> %25 to <4 x double>
  %28 = bitcast <4 x i64> %26 to <4 x double>
  %29 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %27, <4 x double> %16) #6
  %30 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %28, <4 x double> %16) #6
  %31 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> %4, <4 x double> %16) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %13, <4 x double> zeroinitializer, <4 x double> %16) #6
  %33 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %31
  %34 = fmul <4 x double> %29, %33
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %34
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %29, <4 x double> %35) #6
  %37 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %31
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %33, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %39 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %32
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %33, <4 x double> %38) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %33, <4 x double> %36) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %40, <4 x double> %41) #6
  %43 = fmul <4 x double> %34, %34
  %44 = fadd <4 x double> %34, %34
  %45 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %43
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %34, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %42, <4 x double> %46) #6
  %48 = fadd <4 x double> %43, %47
  %49 = fsub <4 x double> %43, %48
  %50 = fadd <4 x double> %47, %49
  %51 = fmul <4 x double> %48, %48
  %52 = fmul <4 x double> %51, %51
  %53 = fmul <4 x double> %52, %52
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>, <4 x double> <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>, <4 x double> <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %54, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>, <4 x double> <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>, <4 x double> <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %57, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %56, <4 x double> %59) #6
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>, <4 x double> <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>, <4 x double> <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>) #6
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %61, <4 x double> %62) #6
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>, <4 x double> <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %48, <4 x double> <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>, <4 x double> <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %64, <4 x double> %65) #6
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %63, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %60, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %48, <4 x double> <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %69, <4 x double> %48, <4 x double> <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %48, <4 x double> <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>) #6
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> %48, <4 x double> <double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A, double 0xBFD555555555543A>) #6
  %73 = fmul <4 x double> %34, %48
  %74 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %73
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %48, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %48, <4 x double> %75) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %50, <4 x double> %76) #6
  %78 = fmul <4 x double> %73, %72
  %79 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %78
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %72, <4 x double> %79) #6
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %72, <4 x double> %80) #6
  %82 = fadd <4 x double> %34, %78
  %83 = fsub <4 x double> %34, %82
  %84 = fadd <4 x double> %78, %83
  %85 = fadd <4 x double> %42, %84
  %86 = fadd <4 x double> %85, %81
  %87 = bitcast <16 x i8> %24 to <4 x i32>
  %88 = sitofp <4 x i32> %87 to <4 x double>
  %89 = fmul <4 x double> %88, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %89
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %88, <4 x double> %90) #6
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07, double 0x3C91A62633145C07>, <4 x double> %88, <4 x double> %91) #6
  %93 = fadd <4 x double> %89, %82
  %94 = fsub <4 x double> %89, %93
  %95 = fadd <4 x double> %82, %94
  %96 = fadd <4 x double> %95, %92
  %97 = fadd <4 x double> %86, %96
  %98 = fadd <4 x double> %93, %97
  %99 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %100 = sext <4 x i1> %99 to <4 x i64>
  %101 = bitcast <4 x i64> %100 to <4 x double>
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %98, <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <4 x double> %101) #6
  %103 = bitcast <4 x double> %102 to <4 x i64>
  %104 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %105 = xor <4 x i64> %104, %103
  %106 = bitcast <4 x i64> %105 to <4 x double>
  ret <4 x double> %106
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atand4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %4 = xor <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = fcmp oeq <4 x double> %5, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %7 = select <4 x i1> %6, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> zeroinitializer
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  %10 = and <2 x i64> %9, <i64 8589934594, i64 8589934594>
  %11 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = add <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %12, i8 17) #6
  %16 = bitcast <4 x double> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %18 = bitcast <4 x i64> %17 to <4 x double>
  %19 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %18) #6
  %20 = bitcast <2 x i64> %10 to <16 x i8>
  %21 = bitcast <4 x i32> %14 to <16 x i8>
  %22 = bitcast <4 x i32> %19 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> %21, <16 x i8> %22) #6
  %24 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %12
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> %24, <4 x double> %15) #6
  %26 = fmul <4 x double> %25, %25
  %27 = fmul <4 x double> %26, %26
  %28 = fmul <4 x double> %27, %27
  %29 = fmul <4 x double> %28, %28
  %30 = fmul <4 x double> %29, %29
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>, <4 x double> <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>, <4 x double> <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>, <4 x double> <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %33, <4 x double> %34) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>, <4 x double> <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>, <4 x double> <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %36, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %35, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>, <4 x double> <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>, <4 x double> <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>, <4 x double> <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>, <4 x double> <double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5, double 0xBFD55555555553C5>) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %43, <4 x double> %44) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %42, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %39, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %32, <4 x double> %47) #6
  %49 = fmul <4 x double> %26, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %49, <4 x double> %25) #6
  %51 = bitcast <16 x i8> %23 to <4 x i32>
  %52 = and <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  %53 = icmp ne <4 x i32> %52, zeroinitializer
  %54 = sitofp <4 x i1> %53 to <4 x double>
  %55 = fcmp oeq <4 x double> %54, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %56 = sext <4 x i1> %55 to <4 x i64>
  %57 = fsub <4 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %50
  %58 = bitcast <4 x i64> %56 to <4 x double>
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %57, <4 x double> %58) #6
  %60 = and <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %61 = icmp ne <4 x i32> %60, zeroinitializer
  %62 = sitofp <4 x i1> %61 to <4 x double>
  %63 = fcmp oeq <4 x double> %62, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %64 = select <4 x i1> %63, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %65 = bitcast <4 x double> %59 to <4 x i64>
  %66 = xor <4 x i64> %64, %65
  %67 = bitcast <4 x i64> %66 to <4 x double>
  ret <4 x double> %67
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_logd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fdiv <4 x double> %49, %50
  %52 = fmul <4 x double> %51, %51
  %53 = fmul <4 x double> %52, %52
  %54 = fmul <4 x double> %53, %53
  %55 = fmul <4 x double> %51, %52
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <4 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <4 x double> %56) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <4 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <4 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F>) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %58, <4 x double> %59) #6
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %57, <4 x double> %60) #6
  %62 = bitcast <16 x i8> %48 to <4 x i32>
  %63 = sitofp <4 x i32> %62 to <4 x double>
  %64 = fmul <4 x double> %63, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %61, <4 x double> %65) #6
  %67 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = bitcast <4 x i64> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %72 = fcmp uno <4 x double> %5, zeroinitializer
  %73 = select <4 x i1> %72, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %71
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %70, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %73) #6
  %75 = fcmp oeq <4 x double> %5, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i64>
  %77 = bitcast <4 x i64> %76 to <4 x double>
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %77) #6
  ret <4 x double> %78
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_expd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #6
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %0) #6
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %5) #6
  %7 = fmul <4 x double> %6, %6
  %8 = fmul <4 x double> %7, %7
  %9 = fmul <4 x double> %8, %8
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #6
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #6
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %11, <4 x double> %12) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %14, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %13, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %10, <4 x double> %17) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %6, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %22 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %23 = add nsw <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %25 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %26 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %27 = shl <4 x i32> %26, <i32 20, i32 20, i32 20, i32 20>
  %28 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %29 = shl <4 x i32> %28, <i32 20, i32 20, i32 20, i32 20>
  %30 = bitcast <4 x i32> %27 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <4 x i64> %32, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <4 x i64> %34 to <4 x double>
  %36 = fmul <4 x double> %21, %35
  %37 = sub <4 x i32> %4, %22
  %38 = add <4 x i32> %37, <i32 1023, i32 1023, i32 1023, i32 1023>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %40 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %41 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = and <4 x i32> %40, <i32 0, i32 -1, i32 0, i32 -1>
  %44 = shl <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = fmul <4 x double> %36, %50
  %52 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #6
  %53 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %51, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %55 = bitcast <4 x double> %54 to <4 x i64>
  %56 = bitcast <4 x double> %53 to <4 x i64>
  %57 = xor <4 x i64> %55, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %57, %56
  %59 = bitcast <4 x i64> %58 to <4 x double>
  ret <4 x double> %59
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_logd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %81, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %81, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %81, <4 x double> %84) #6
  %86 = fmul <4 x double> %62, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %87 = fmul <4 x double> %70, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %88 = fadd <4 x double> %82, %86
  %89 = fsub <4 x double> %82, %88
  %90 = fadd <4 x double> %86, %89
  %91 = fadd <4 x double> %85, %90
  %92 = fadd <4 x double> %87, %91
  %93 = fmul <4 x double> %62, %71
  %94 = fmul <4 x double> %79, %93
  %95 = fadd <4 x double> %88, %94
  %96 = fsub <4 x double> %88, %95
  %97 = fadd <4 x double> %94, %96
  %98 = fadd <4 x double> %97, %92
  %99 = fadd <4 x double> %95, %98
  %100 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %101 = sext <4 x i1> %100 to <4 x i64>
  %102 = bitcast <4 x i64> %101 to <4 x double>
  %103 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %99, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %102) #6
  %104 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %105 = fcmp uno <4 x double> %5, zeroinitializer
  %106 = select <4 x i1> %105, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %104
  %107 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %103, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %106) #6
  %108 = fcmp oeq <4 x double> %5, zeroinitializer
  %109 = sext <4 x i1> %108 to <4 x i64>
  %110 = bitcast <4 x i64> %109 to <4 x double>
  %111 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %107, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %110) #6
  ret <4 x double> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_powd4_u10fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %1, i32 11) #6
  %4 = fcmp oeq <4 x double> %3, %1
  %5 = sext <4 x i1> %4 to <4 x i64>
  %6 = fmul <4 x double> %1, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 11) #6
  %8 = fcmp une <4 x double> %7, %6
  %9 = and <4 x i1> %8, %4
  %10 = sext <4 x i1> %9 to <4 x i64>
  %11 = bitcast <4 x double> %0 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %15 = bitcast <4 x double> %14 to <4 x i64>
  %16 = fmul <4 x double> %13, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %13, <4 x double> %16, <4 x double> %14) #6
  %18 = fmul <4 x double> %17, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %22 = bitcast <2 x i64> %20 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %21 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shufflevector <2 x i64> %27, <2 x i64> %24, <2 x i32> <i32 2, i32 1>
  %29 = bitcast <2 x i64> %28 to <4 x i32>
  %30 = lshr <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = and <4 x i32> %30, <i32 2047, i32 2047, i32 2047, i32 2047>
  %32 = add nsw <4 x i32> %31, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %33 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %31
  %34 = bitcast <4 x double> %17 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %38 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %39 = and <4 x i32> %37, <i32 0, i32 -1, i32 0, i32 -1>
  %40 = shl <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = and <4 x i32> %38, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = bitcast <2 x i64> %35 to <4 x i32>
  %44 = add <4 x i32> %40, %43
  %45 = bitcast <2 x i64> %36 to <4 x i32>
  %46 = add <4 x i32> %42, %45
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = and <4 x i64> %15, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %54 = bitcast <4 x i64> %53 to <4 x double>
  %55 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %54) #6
  %56 = add nsw <4 x i32> %31, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %57 = bitcast <4 x i32> %32 to <16 x i8>
  %58 = bitcast <4 x i32> %56 to <16 x i8>
  %59 = bitcast <4 x i32> %55 to <16 x i8>
  %60 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %57, <16 x i8> %58, <16 x i8> %59) #6
  %61 = fadd <4 x double> %52, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %62 = fadd <4 x double> %61, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %63 = fsub <4 x double> %61, %62
  %64 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %63
  %65 = fsub <4 x double> %52, %62
  %66 = fadd <4 x double> %65, %64
  %67 = fadd <4 x double> %52, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fadd <4 x double> %67, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %69 = fsub <4 x double> %67, %68
  %70 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %69
  %71 = fsub <4 x double> %52, %68
  %72 = fadd <4 x double> %71, %70
  %73 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %74 = fmul <4 x double> %61, %73
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %61, <4 x double> %75) #6
  %77 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %67
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %73, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %79 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %72
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %79, <4 x double> %73, <4 x double> %78) #6
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %73, <4 x double> %76) #6
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %74, <4 x double> %80, <4 x double> %81) #6
  %83 = fmul <4 x double> %74, %74
  %84 = fadd <4 x double> %74, %74
  %85 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %83
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %74, <4 x double> %74, <4 x double> %85) #6
  %87 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %84, <4 x double> %82, <4 x double> %86) #6
  %88 = fmul <4 x double> %83, %83
  %89 = fmul <4 x double> %88, %88
  %90 = fmul <4 x double> %89, %89
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> <double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11>, <4 x double> <double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A>) #6
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> <double 0x3FC110F384A1865C, double 0x3FC110F384A1865C, double 0x3FC110F384A1865C, double 0x3FC110F384A1865C>, <4 x double> <double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1>) #6
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %88, <4 x double> %91, <4 x double> %92) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> <double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1>, <4 x double> <double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F>) #6
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> <double 0x3FD2492492492200, double 0x3FD2492492492200, double 0x3FD2492492492200, double 0x3FD2492492492200>, <4 x double> <double 0x3FD999999999999B, double 0x3FD999999999999B, double 0x3FD999999999999B, double 0x3FD999999999999B>) #6
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %88, <4 x double> %94, <4 x double> %95) #6
  %97 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %89, <4 x double> %93, <4 x double> %96) #6
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> <double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3>, <4 x double> %97) #6
  %99 = bitcast <16 x i8> %60 to <4 x i32>
  %100 = sitofp <4 x i32> %99 to <4 x double>
  %101 = fmul <4 x double> %100, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %102 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %100, <4 x double> %102) #6
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %100, <4 x double> %103) #6
  %105 = fmul <4 x double> %74, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %106 = fmul <4 x double> %82, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %107 = fadd <4 x double> %101, %105
  %108 = fsub <4 x double> %101, %107
  %109 = fadd <4 x double> %105, %108
  %110 = fadd <4 x double> %104, %109
  %111 = fadd <4 x double> %106, %110
  %112 = fmul <4 x double> %74, %83
  %113 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %112
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %74, <4 x double> %113) #6
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %74, <4 x double> %114) #6
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %82, <4 x double> %115) #6
  %117 = fmul <4 x double> %112, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %118 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %117
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double> %118) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %116, <4 x double> <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>, <4 x double> %119) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> <double 0x3C85F00000000000, double 0x3C85F00000000000, double 0x3C85F00000000000, double 0x3C85F00000000000>, <4 x double> %120) #6
  %122 = fadd <4 x double> %107, %117
  %123 = fsub <4 x double> %107, %122
  %124 = fadd <4 x double> %117, %123
  %125 = fadd <4 x double> %124, %111
  %126 = fadd <4 x double> %121, %125
  %127 = fmul <4 x double> %83, %112
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %112, <4 x double> %128) #6
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %112, <4 x double> %129) #6
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %116, <4 x double> %130) #6
  %132 = fmul <4 x double> %98, %127
  %133 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %127, <4 x double> %98, <4 x double> %133) #6
  %135 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %98, <4 x double> %134) #6
  %136 = fadd <4 x double> %122, %132
  %137 = fsub <4 x double> %122, %136
  %138 = fadd <4 x double> %132, %137
  %139 = fadd <4 x double> %138, %126
  %140 = fadd <4 x double> %135, %139
  %141 = fmul <4 x double> %136, %1
  %142 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %1, <4 x double> %142) #6
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %1, <4 x double> %143) #6
  %145 = fadd <4 x double> %141, %144
  %146 = fmul <4 x double> %145, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %147 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %146, i32 8) #6
  %148 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %147) #6
  %149 = fmul <4 x double> %147, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %150 = fadd <4 x double> %141, %149
  %151 = fsub <4 x double> %150, %141
  %152 = fsub <4 x double> %150, %151
  %153 = fsub <4 x double> %141, %152
  %154 = fsub <4 x double> %149, %151
  %155 = fadd <4 x double> %154, %153
  %156 = fadd <4 x double> %144, %155
  %157 = fmul <4 x double> %147, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %158 = fadd <4 x double> %157, %150
  %159 = fsub <4 x double> %158, %150
  %160 = fsub <4 x double> %158, %159
  %161 = fsub <4 x double> %150, %160
  %162 = fsub <4 x double> %157, %159
  %163 = fadd <4 x double> %162, %161
  %164 = fadd <4 x double> %163, %156
  %165 = fadd <4 x double> %158, %164
  %166 = fsub <4 x double> %158, %165
  %167 = fadd <4 x double> %164, %166
  %168 = fmul <4 x double> %165, %165
  %169 = fmul <4 x double> %168, %168
  %170 = fmul <4 x double> %169, %169
  %171 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> <double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9>, <4 x double> <double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD>) #6
  %172 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> <double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E>, <4 x double> <double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B>) #6
  %173 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> <double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D>, <4 x double> <double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B>) #6
  %174 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %172, <4 x double> %173) #6
  %175 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> <double 0x3F8111111110FB68, double 0x3F8111111110FB68, double 0x3F8111111110FB68, double 0x3F8111111110FB68>, <4 x double> <double 0x3FA5555555550E90, double 0x3FA5555555550E90, double 0x3FA5555555550E90, double 0x3FA5555555550E90>) #6
  %176 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> <double 0x3FC5555555555558, double 0x3FC5555555555558, double 0x3FC5555555555558, double 0x3FC5555555555558>, <4 x double> <double 0x3FE0000000000009, double 0x3FE0000000000009, double 0x3FE0000000000009, double 0x3FE0000000000009>) #6
  %177 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %175, <4 x double> %176) #6
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %169, <4 x double> %174, <4 x double> %177) #6
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %170, <4 x double> %171, <4 x double> %178) #6
  %180 = fadd <4 x double> %165, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %181 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %180
  %182 = fadd <4 x double> %165, %181
  %183 = fadd <4 x double> %167, %182
  %184 = fadd <4 x double> %165, %165
  %185 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %168
  %186 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %165, <4 x double> %165, <4 x double> %185) #6
  %187 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %184, <4 x double> %167, <4 x double> %186) #6
  %188 = fmul <4 x double> %168, %179
  %189 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %188
  %190 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %168, <4 x double> %179, <4 x double> %189) #6
  %191 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> %179, <4 x double> %190) #6
  %192 = fadd <4 x double> %180, %188
  %193 = fsub <4 x double> %180, %192
  %194 = fadd <4 x double> %188, %193
  %195 = fadd <4 x double> %183, %194
  %196 = fadd <4 x double> %191, %195
  %197 = fadd <4 x double> %192, %196
  %198 = ashr <4 x i32> %148, <i32 1, i32 1, i32 1, i32 1>
  %199 = add nsw <4 x i32> %198, <i32 1023, i32 1023, i32 1023, i32 1023>
  %200 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %201 = shufflevector <4 x i32> %199, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %202 = and <4 x i32> %200, <i32 0, i32 -1, i32 0, i32 -1>
  %203 = shl <4 x i32> %202, <i32 20, i32 20, i32 20, i32 20>
  %204 = and <4 x i32> %201, <i32 0, i32 -1, i32 0, i32 -1>
  %205 = shl <4 x i32> %204, <i32 20, i32 20, i32 20, i32 20>
  %206 = bitcast <4 x i32> %203 to <2 x i64>
  %207 = bitcast <4 x i32> %205 to <2 x i64>
  %208 = shufflevector <2 x i64> %206, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %209 = shufflevector <2 x i64> %207, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %210 = shufflevector <4 x i64> %208, <4 x i64> %209, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %211 = bitcast <4 x i64> %210 to <4 x double>
  %212 = fmul <4 x double> %197, %211
  %213 = sub <4 x i32> %148, %198
  %214 = add <4 x i32> %213, <i32 1023, i32 1023, i32 1023, i32 1023>
  %215 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %216 = shufflevector <4 x i32> %214, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %217 = and <4 x i32> %215, <i32 0, i32 -1, i32 0, i32 -1>
  %218 = shl <4 x i32> %217, <i32 20, i32 20, i32 20, i32 20>
  %219 = and <4 x i32> %216, <i32 0, i32 -1, i32 0, i32 -1>
  %220 = shl <4 x i32> %219, <i32 20, i32 20, i32 20, i32 20>
  %221 = bitcast <4 x i32> %218 to <2 x i64>
  %222 = bitcast <4 x i32> %220 to <2 x i64>
  %223 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = shufflevector <2 x i64> %222, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x i64> %223, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x i64> %225 to <4 x double>
  %227 = fmul <4 x double> %212, %226
  %228 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %141, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %229 = bitcast <4 x double> %228 to <4 x i64>
  %230 = bitcast <4 x double> %227 to <4 x i64>
  %231 = xor <4 x i64> %229, <i64 -1, i64 -1, i64 -1, i64 -1>
  %232 = and <4 x i64> %230, %231
  %233 = bitcast <4 x i64> %232 to <4 x double>
  %234 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %141, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #6
  %235 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %233, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %234) #6
  %236 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 30) #6
  %237 = bitcast <4 x i64> %10 to <4 x double>
  %238 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %237) #6
  %239 = bitcast <4 x i64> %5 to <4 x double>
  %240 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %238, <4 x double> %239) #6
  %241 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %240, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %236) #6
  %242 = fmul <4 x double> %235, %241
  %243 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %244 = bitcast <4 x double> %243 to <4 x i64>
  %245 = bitcast <4 x double> %1 to <4 x i64>
  %246 = and <4 x i64> %245, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %247 = xor <4 x i64> %246, %244
  %248 = bitcast <4 x i64> %247 to <4 x double>
  %249 = and <4 x i64> %245, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %250 = bitcast <4 x i64> %249 to <4 x double>
  %251 = fcmp oeq <4 x double> %250, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %252 = sext <4 x i1> %251 to <4 x i64>
  %253 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %248, <4 x double> zeroinitializer, i8 17) #6
  %254 = bitcast <4 x double> %253 to <4 x i64>
  %255 = fcmp oeq <4 x double> %248, zeroinitializer
  %256 = sext <4 x i1> %255 to <4 x i64>
  %257 = bitcast <4 x i64> %256 to <4 x double>
  %258 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %257) #6
  %259 = bitcast <4 x double> %258 to <4 x i64>
  %260 = xor <4 x i64> %254, <i64 -1, i64 -1, i64 -1, i64 -1>
  %261 = and <4 x i64> %259, %260
  %262 = bitcast <4 x i64> %261 to <4 x double>
  %263 = bitcast <4 x i64> %252 to <4 x double>
  %264 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %242, <4 x double> %262, <4 x double> %263) #6
  %265 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %266 = fcmp oeq <4 x double> %0, zeroinitializer
  %267 = sext <4 x i1> %266 to <4 x i64>
  %268 = or <4 x i1> %265, %266
  %269 = sext <4 x i1> %268 to <4 x i64>
  %270 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %271 = or <4 x i64> %270, <i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408, i64 4607182418800017408>
  %272 = bitcast <4 x i64> %271 to <4 x double>
  %273 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %272, <4 x double> %237) #6
  %274 = xor <4 x i64> %245, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %275 = bitcast <4 x i64> %274 to <4 x double>
  %276 = bitcast <4 x i64> %267 to <4 x double>
  %277 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %275, <4 x double> %276) #6
  %278 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %277, <4 x double> zeroinitializer, i8 17) #6
  %279 = bitcast <4 x double> %278 to <4 x i64>
  %280 = and <4 x i64> %279, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %281 = xor <4 x i64> %280, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %282 = bitcast <4 x i64> %281 to <4 x double>
  %283 = fmul <4 x double> %273, %282
  %284 = bitcast <4 x i64> %269 to <4 x double>
  %285 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %264, <4 x double> %283, <4 x double> %284) #6
  %286 = fcmp uno <4 x double> %1, %0
  %287 = select <4 x i1> %286, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %285
  %288 = fcmp oeq <4 x double> %1, zeroinitializer
  %289 = fcmp oeq <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %290 = or <4 x i1> %288, %289
  %291 = sext <4 x i1> %290 to <4 x i64>
  %292 = bitcast <4 x i64> %291 to <4 x double>
  %293 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %287, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %292) #6
  ret <4 x double> %293
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = fsub <4 x double> %119, %121
  %128 = fsub <4 x double> %119, %127
  %129 = fsub <4 x double> %128, %121
  %130 = fadd <4 x double> %129, %120
  %131 = fsub <4 x double> %130, %126
  %132 = fadd <4 x double> %127, %131
  %133 = fmul <4 x double> %132, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %134 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #6
  %135 = fcmp uno <4 x double> %133, zeroinitializer
  %136 = select <4 x i1> %135, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %134
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %136) #6
  %138 = bitcast <4 x double> %137 to <4 x i64>
  %139 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %140 = xor <4 x i64> %139, %138
  %141 = fcmp uno <4 x double> %0, zeroinitializer
  %142 = bitcast <4 x i64> %140 to <4 x double>
  %143 = select <4 x i1> %141, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %142
  ret <4 x double> %143
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_coshd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = fadd <4 x double> %121, %119
  %128 = fsub <4 x double> %119, %127
  %129 = fadd <4 x double> %121, %128
  %130 = fadd <4 x double> %129, %120
  %131 = fadd <4 x double> %126, %130
  %132 = fadd <4 x double> %127, %131
  %133 = fmul <4 x double> %132, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %134 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #6
  %135 = fcmp uno <4 x double> %133, zeroinitializer
  %136 = select <4 x i1> %135, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %134
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %136) #6
  %138 = fcmp uno <4 x double> %0, zeroinitializer
  %139 = select <4 x i1> %138, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %137
  ret <4 x double> %139
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tanhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = bitcast <4 x double> %121 to <4 x i64>
  %128 = xor <4 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <4 x double> %126 to <4 x i64>
  %130 = xor <4 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <4 x i64> %128 to <4 x double>
  %132 = bitcast <4 x i64> %130 to <4 x double>
  %133 = fadd <4 x double> %119, %131
  %134 = fsub <4 x double> %133, %119
  %135 = fsub <4 x double> %133, %134
  %136 = fsub <4 x double> %119, %135
  %137 = fsub <4 x double> %131, %134
  %138 = fadd <4 x double> %137, %136
  %139 = fadd <4 x double> %120, %132
  %140 = fadd <4 x double> %139, %138
  %141 = fadd <4 x double> %121, %119
  %142 = fsub <4 x double> %141, %119
  %143 = fsub <4 x double> %141, %142
  %144 = fsub <4 x double> %119, %143
  %145 = fsub <4 x double> %121, %142
  %146 = fadd <4 x double> %145, %144
  %147 = fadd <4 x double> %126, %120
  %148 = fadd <4 x double> %147, %146
  %149 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %141
  %150 = fmul <4 x double> %149, %133
  %151 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %150
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %133, <4 x double> %151) #6
  %153 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %149, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %155 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %148
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> %149, <4 x double> %154) #6
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %149, <4 x double> %152) #6
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> %156, <4 x double> %157) #6
  %159 = fadd <4 x double> %158, %150
  %160 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #6
  %161 = fcmp uno <4 x double> %159, zeroinitializer
  %162 = select <4 x i1> %161, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %160
  %163 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %159, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %162) #6
  %164 = bitcast <4 x double> %163 to <4 x i64>
  %165 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = xor <4 x i64> %165, %164
  %167 = fcmp uno <4 x double> %0, zeroinitializer
  %168 = bitcast <4 x i64> %166 to <4 x double>
  %169 = select <4 x i1> %167, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %168
  ret <4 x double> %169
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sinhd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #6
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #6
  %22 = fmul <4 x double> %9, %10
  %23 = fmul <4 x double> %22, %21
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %23) #6
  %25 = fadd <4 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sitofp <4 x i1> %26 to <4 x double>
  %28 = fcmp oeq <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %29 = sext <4 x i1> %28 to <4 x i64>
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %32 = add nsw <4 x i32> %31, <i32 1023, i32 1023, i32 1023, i32 1023>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %34 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %35 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %38 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = fmul <4 x double> %30, %44
  %46 = sub <4 x i32> %7, %31
  %47 = add <4 x i32> %46, <i32 1023, i32 1023, i32 1023, i32 1023>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %49 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %50 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = shl <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %53 = shl <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <4 x i32> %51 to <2 x i64>
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <4 x double>
  %60 = fmul <4 x double> %45, %59
  %61 = fadd <4 x double> %60, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %62 = bitcast <4 x i64> %29 to <4 x double>
  %63 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> %25, <4 x double> %62) #6
  %64 = fadd <4 x double> %63, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %65 = fadd <4 x double> %63, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fdiv <4 x double> %64, %65
  %67 = fmul <4 x double> %63, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %68 = fmul <4 x double> %67, %66
  %69 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #6
  %70 = fcmp uno <4 x double> %68, zeroinitializer
  %71 = select <4 x i1> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %69
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %68, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %71) #6
  %73 = bitcast <4 x double> %72 to <4 x i64>
  %74 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %75 = xor <4 x i64> %74, %73
  %76 = fcmp uno <4 x double> %0, zeroinitializer
  %77 = bitcast <4 x i64> %75 to <4 x double>
  %78 = select <4 x i1> %76, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %77
  ret <4 x double> %78
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_coshd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #6
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %9, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add nsw <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %28 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %29 = and <4 x i32> %27, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %32 = shl <4 x i32> %31, <i32 20, i32 20, i32 20, i32 20>
  %33 = bitcast <4 x i32> %30 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <4 x double>
  %39 = fmul <4 x double> %24, %38
  %40 = sub <4 x i32> %7, %25
  %41 = add <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %44 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <4 x double>
  %54 = fmul <4 x double> %39, %53
  %55 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #6
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %58 = bitcast <4 x double> %57 to <4 x i64>
  %59 = bitcast <4 x double> %56 to <4 x i64>
  %60 = xor <4 x i64> %58, <i64 -1, i64 -1, i64 -1, i64 -1>
  %61 = and <4 x i64> %60, %59
  %62 = bitcast <4 x i64> %61 to <4 x double>
  %63 = fdiv <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %62, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #6
  %66 = fcmp uno <4 x double> %64, zeroinitializer
  %67 = select <4 x i1> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %65
  %68 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %67) #6
  %69 = fcmp uno <4 x double> %0, zeroinitializer
  %70 = select <4 x i1> %69, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %68
  ret <4 x double> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_tanhd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %5) #6
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %9) #6
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = fmul <4 x double> %12, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %15, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %14, <4 x double> %21) #6
  %23 = fmul <4 x double> %10, %11
  %24 = fmul <4 x double> %23, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %24) #6
  %26 = fadd <4 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sitofp <4 x i1> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %28, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = fadd <4 x double> %26, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %32 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %33 = add nsw <4 x i32> %32, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %35 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %36 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = and <4 x i32> %35, <i32 0, i32 -1, i32 0, i32 -1>
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = fmul <4 x double> %31, %45
  %47 = sub <4 x i32> %8, %32
  %48 = add <4 x i32> %47, <i32 1023, i32 1023, i32 1023, i32 1023>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %50 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %51 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = and <4 x i32> %50, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %52 to <2 x i64>
  %56 = bitcast <4 x i32> %54 to <2 x i64>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <4 x double>
  %61 = fmul <4 x double> %46, %60
  %62 = fadd <4 x double> %61, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %63 = bitcast <4 x i64> %30 to <4 x double>
  %64 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> %26, <4 x double> %63) #6
  %65 = fadd <4 x double> %64, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %66 = fdiv <4 x double> %64, %65
  %67 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #6
  %68 = fcmp uno <4 x double> %66, zeroinitializer
  %69 = select <4 x i1> %68, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %67
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %69) #6
  %71 = bitcast <4 x double> %70 to <4 x i64>
  %72 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %73 = xor <4 x i64> %72, %71
  %74 = fcmp uno <4 x double> %0, zeroinitializer
  %75 = bitcast <4 x i64> %73 to <4 x double>
  %76 = select <4 x i1> %74, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %75
  ret <4 x double> %76
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_asinhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #6
  %6 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %0
  %7 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %0
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %9 = fmul <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %6, <4 x double> %5) #6
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %9, <4 x double> %5) #6
  %12 = fmul <4 x double> %10, %10
  %13 = fadd <4 x double> %10, %10
  %14 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> %15) #6
  %17 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = fsub <4 x double> %17, %12
  %19 = fsub <4 x double> %17, %18
  %20 = fsub <4 x double> %12, %19
  %21 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %18
  %22 = fadd <4 x double> %21, %20
  %23 = fadd <4 x double> %16, %22
  %24 = fadd <4 x double> %17, %23
  %25 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %24) #6
  %26 = fmul <4 x double> %25, %25
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %26
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %27) #6
  %29 = fadd <4 x double> %17, %26
  %30 = fsub <4 x double> %29, %17
  %31 = fsub <4 x double> %29, %30
  %32 = fsub <4 x double> %17, %31
  %33 = fsub <4 x double> %26, %30
  %34 = fadd <4 x double> %33, %32
  %35 = fadd <4 x double> %28, %23
  %36 = fadd <4 x double> %35, %34
  %37 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %25
  %38 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %37, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %40 = fmul <4 x double> %37, %39
  %41 = fmul <4 x double> %37, %29
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %37, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %36, <4 x double> %37, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %40, <4 x double> %44) #6
  %46 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fmul <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = fmul <4 x double> %46, %4
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %4, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %4, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> %48, <4 x double> %5) #6
  %53 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %47, <4 x double> %51, <4 x double> %5) #6
  %54 = fadd <4 x double> %52, %0
  %55 = fsub <4 x double> %54, %52
  %56 = fsub <4 x double> %54, %55
  %57 = fsub <4 x double> %52, %56
  %58 = fsub <4 x double> %0, %55
  %59 = fadd <4 x double> %58, %57
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %54, %60
  %62 = fsub <4 x double> %54, %61
  %63 = fadd <4 x double> %60, %62
  %64 = fmul <4 x double> %61, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %65 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %64, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %66 = bitcast <4 x double> %65 to <4 x i64>
  %67 = fmul <4 x double> %64, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %68 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> %67, <4 x double> %65) #6
  %69 = bitcast <4 x double> %68 to <4 x i64>
  %70 = shufflevector <4 x i64> %69, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %71 = shufflevector <4 x i64> %69, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %72 = bitcast <2 x i64> %70 to <4 x i32>
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = bitcast <2 x i64> %71 to <4 x i32>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <2 x i64> %77, <2 x i64> %74, <2 x i32> <i32 2, i32 1>
  %79 = bitcast <2 x i64> %78 to <4 x i32>
  %80 = lshr <4 x i32> %79, <i32 20, i32 20, i32 20, i32 20>
  %81 = and <4 x i64> %66, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %82) #6
  %84 = bitcast <4 x i32> %83 to <16 x i8>
  %85 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %84) #6
  %86 = bitcast <16 x i8> %85 to <4 x i32>
  %87 = sub <4 x i32> %80, %86
  %88 = sub <4 x i32> zeroinitializer, %87
  %89 = ashr <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %90 = add nsw <4 x i32> %89, <i32 1023, i32 1023, i32 1023, i32 1023>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %92 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %93 = and <4 x i32> %91, <i32 0, i32 -1, i32 0, i32 -1>
  %94 = shl <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = and <4 x i32> %92, <i32 0, i32 -1, i32 0, i32 -1>
  %96 = shl <4 x i32> %95, <i32 20, i32 20, i32 20, i32 20>
  %97 = bitcast <4 x i32> %94 to <2 x i64>
  %98 = bitcast <4 x i32> %96 to <2 x i64>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <2 x i64> %98, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %101 = shufflevector <4 x i64> %99, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %102 = bitcast <4 x i64> %101 to <4 x double>
  %103 = fmul <4 x double> %61, %102
  %104 = sub <4 x i32> %88, %89
  %105 = add <4 x i32> %104, <i32 1023, i32 1023, i32 1023, i32 1023>
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %107 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %108 = and <4 x i32> %106, <i32 0, i32 -1, i32 0, i32 -1>
  %109 = shl <4 x i32> %108, <i32 20, i32 20, i32 20, i32 20>
  %110 = and <4 x i32> %107, <i32 0, i32 -1, i32 0, i32 -1>
  %111 = shl <4 x i32> %110, <i32 20, i32 20, i32 20, i32 20>
  %112 = bitcast <4 x i32> %109 to <2 x i64>
  %113 = bitcast <4 x i32> %111 to <2 x i64>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <4 x i64> %114, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = fmul <4 x double> %103, %117
  %119 = fmul <4 x double> %63, %102
  %120 = fmul <4 x double> %119, %117
  %121 = fadd <4 x double> %118, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %122 = fsub <4 x double> %121, %118
  %123 = fsub <4 x double> %121, %122
  %124 = fsub <4 x double> %118, %123
  %125 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %122
  %126 = fadd <4 x double> %125, %124
  %127 = fadd <4 x double> %120, %126
  %128 = fadd <4 x double> %118, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %129 = fsub <4 x double> %128, %118
  %130 = fsub <4 x double> %128, %129
  %131 = fsub <4 x double> %118, %130
  %132 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %129
  %133 = fadd <4 x double> %132, %131
  %134 = fadd <4 x double> %120, %133
  %135 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %128
  %136 = fmul <4 x double> %121, %135
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %121, <4 x double> %137) #6
  %139 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %128
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %139, <4 x double> %135, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %141 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %134
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %135, <4 x double> %140) #6
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %127, <4 x double> %135, <4 x double> %138) #6
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %142, <4 x double> %143) #6
  %145 = fmul <4 x double> %136, %136
  %146 = fadd <4 x double> %136, %136
  %147 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %145
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %136, <4 x double> %147) #6
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> %144, <4 x double> %148) #6
  %150 = fmul <4 x double> %145, %145
  %151 = fmul <4 x double> %150, %150
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %152) #6
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %155 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> %154, <4 x double> %155) #6
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %151, <4 x double> %153, <4 x double> %156) #6
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %157, <4 x double> %145, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %159 = sitofp <4 x i32> %87 to <4 x double>
  %160 = fmul <4 x double> %159, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %161 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %160
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %159, <4 x double> %161) #6
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %159, <4 x double> %162) #6
  %164 = fmul <4 x double> %136, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %165 = fmul <4 x double> %144, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %166 = fadd <4 x double> %160, %164
  %167 = fsub <4 x double> %160, %166
  %168 = fadd <4 x double> %164, %167
  %169 = fadd <4 x double> %163, %168
  %170 = fadd <4 x double> %165, %169
  %171 = fmul <4 x double> %136, %145
  %172 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %171
  %173 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %136, <4 x double> %172) #6
  %174 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %136, <4 x double> %173) #6
  %175 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %144, <4 x double> %174) #6
  %176 = fmul <4 x double> %158, %171
  %177 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %176
  %178 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %171, <4 x double> %158, <4 x double> %177) #6
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %175, <4 x double> %158, <4 x double> %178) #6
  %180 = fadd <4 x double> %166, %176
  %181 = fsub <4 x double> %166, %180
  %182 = fadd <4 x double> %176, %181
  %183 = fadd <4 x double> %182, %170
  %184 = fadd <4 x double> %179, %183
  %185 = fadd <4 x double> %180, %184
  %186 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #6
  %187 = fcmp uno <4 x double> %185, zeroinitializer
  %188 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %189 = or <4 x i64> %188, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %190 = bitcast <4 x i64> %189 to <4 x double>
  %191 = select <4 x i1> %187, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %186
  %192 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %185, <4 x double> %190, <4 x double> %191) #6
  %193 = fcmp uno <4 x double> %0, zeroinitializer
  %194 = select <4 x i1> %193, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %192
  %195 = xor <4 x i64> %2, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %196 = bitcast <4 x i64> %195 to <4 x double>
  %197 = fcmp oeq <4 x double> %196, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %198 = sext <4 x i1> %197 to <4 x i64>
  %199 = bitcast <4 x i64> %198 to <4 x double>
  %200 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %194, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %199) #6
  ret <4 x double> %200
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_acoshd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = fsub <4 x double> %2, %0
  %4 = fsub <4 x double> %2, %3
  %5 = fsub <4 x double> %0, %4
  %6 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %3
  %7 = fadd <4 x double> %6, %5
  %8 = fadd <4 x double> %2, %7
  %9 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %8) #6
  %10 = fmul <4 x double> %9, %9
  %11 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %9, <4 x double> %11) #6
  %13 = fadd <4 x double> %2, %10
  %14 = fsub <4 x double> %13, %2
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %2, %15
  %17 = fsub <4 x double> %10, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %12
  %20 = fadd <4 x double> %19, %18
  %21 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %9
  %22 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %9
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %21, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %24 = fmul <4 x double> %21, %23
  %25 = fmul <4 x double> %21, %13
  %26 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %21, <4 x double> %26) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %21, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %31 = fmul <4 x double> %29, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %32 = fadd <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %33 = fsub <4 x double> %32, %0
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %0, %34
  %36 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %32, %37
  %39 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %38) #6
  %40 = fmul <4 x double> %39, %39
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %39, <4 x double> %41) #6
  %43 = fadd <4 x double> %32, %40
  %44 = fsub <4 x double> %43, %32
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %32, %45
  %47 = fsub <4 x double> %40, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %37, %42
  %50 = fadd <4 x double> %49, %48
  %51 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %39
  %52 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %51, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %54 = fmul <4 x double> %51, %53
  %55 = fmul <4 x double> %51, %43
  %56 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %51, <4 x double> %56) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %51, <4 x double> %57) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %54, <4 x double> %58) #6
  %60 = fmul <4 x double> %55, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %59, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = fmul <4 x double> %30, %60
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %60, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %60, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %61, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, %0
  %68 = fsub <4 x double> %67, %62
  %69 = fsub <4 x double> %67, %68
  %70 = fsub <4 x double> %62, %69
  %71 = fsub <4 x double> %0, %68
  %72 = fadd <4 x double> %71, %70
  %73 = fadd <4 x double> %66, %72
  %74 = fmul <4 x double> %67, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %75 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %74, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %76 = bitcast <4 x double> %75 to <4 x i64>
  %77 = fmul <4 x double> %74, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> %77, <4 x double> %75) #6
  %79 = bitcast <4 x double> %78 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %82 = bitcast <2 x i64> %80 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %84 = bitcast <4 x i32> %83 to <2 x i64>
  %85 = bitcast <2 x i64> %81 to <4 x i32>
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %87 = bitcast <4 x i32> %86 to <2 x i64>
  %88 = shufflevector <2 x i64> %87, <2 x i64> %84, <2 x i32> <i32 2, i32 1>
  %89 = bitcast <2 x i64> %88 to <4 x i32>
  %90 = lshr <4 x i32> %89, <i32 20, i32 20, i32 20, i32 20>
  %91 = and <4 x i64> %76, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %92 = bitcast <4 x i64> %91 to <4 x double>
  %93 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %92) #6
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %94) #6
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = sub <4 x i32> %90, %96
  %98 = sub <4 x i32> zeroinitializer, %97
  %99 = ashr <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  %100 = add nsw <4 x i32> %99, <i32 1023, i32 1023, i32 1023, i32 1023>
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %102 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %103 = and <4 x i32> %101, <i32 0, i32 -1, i32 0, i32 -1>
  %104 = shl <4 x i32> %103, <i32 20, i32 20, i32 20, i32 20>
  %105 = and <4 x i32> %102, <i32 0, i32 -1, i32 0, i32 -1>
  %106 = shl <4 x i32> %105, <i32 20, i32 20, i32 20, i32 20>
  %107 = bitcast <4 x i32> %104 to <2 x i64>
  %108 = bitcast <4 x i32> %106 to <2 x i64>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <2 x i64> %108, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = shufflevector <4 x i64> %109, <4 x i64> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %112 = bitcast <4 x i64> %111 to <4 x double>
  %113 = fmul <4 x double> %67, %112
  %114 = sub <4 x i32> %98, %99
  %115 = add <4 x i32> %114, <i32 1023, i32 1023, i32 1023, i32 1023>
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %117 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %118 = and <4 x i32> %116, <i32 0, i32 -1, i32 0, i32 -1>
  %119 = shl <4 x i32> %118, <i32 20, i32 20, i32 20, i32 20>
  %120 = and <4 x i32> %117, <i32 0, i32 -1, i32 0, i32 -1>
  %121 = shl <4 x i32> %120, <i32 20, i32 20, i32 20, i32 20>
  %122 = bitcast <4 x i32> %119 to <2 x i64>
  %123 = bitcast <4 x i32> %121 to <2 x i64>
  %124 = shufflevector <2 x i64> %122, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %125 = shufflevector <2 x i64> %123, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %126 = shufflevector <4 x i64> %124, <4 x i64> %125, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %127 = bitcast <4 x i64> %126 to <4 x double>
  %128 = fmul <4 x double> %113, %127
  %129 = fmul <4 x double> %73, %112
  %130 = fmul <4 x double> %129, %127
  %131 = fadd <4 x double> %128, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %132 = fsub <4 x double> %131, %128
  %133 = fsub <4 x double> %131, %132
  %134 = fsub <4 x double> %128, %133
  %135 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %132
  %136 = fadd <4 x double> %135, %134
  %137 = fadd <4 x double> %130, %136
  %138 = fadd <4 x double> %128, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %139 = fsub <4 x double> %138, %128
  %140 = fsub <4 x double> %138, %139
  %141 = fsub <4 x double> %128, %140
  %142 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %139
  %143 = fadd <4 x double> %142, %141
  %144 = fadd <4 x double> %130, %143
  %145 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %138
  %146 = fmul <4 x double> %131, %145
  %147 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %146
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %145, <4 x double> %131, <4 x double> %147) #6
  %149 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %138
  %150 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %145, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %151 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %144
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %151, <4 x double> %145, <4 x double> %150) #6
  %153 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %137, <4 x double> %145, <4 x double> %148) #6
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> %152, <4 x double> %153) #6
  %155 = fmul <4 x double> %146, %146
  %156 = fadd <4 x double> %146, %146
  %157 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %155
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> %146, <4 x double> %157) #6
  %159 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %156, <4 x double> %154, <4 x double> %158) #6
  %160 = fmul <4 x double> %155, %155
  %161 = fmul <4 x double> %160, %160
  %162 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %163 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %162) #6
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %165 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %166 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %160, <4 x double> %164, <4 x double> %165) #6
  %167 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> %163, <4 x double> %166) #6
  %168 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> %155, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %169 = sitofp <4 x i32> %97 to <4 x double>
  %170 = fmul <4 x double> %169, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %171 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %170
  %172 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %169, <4 x double> %171) #6
  %173 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %169, <4 x double> %172) #6
  %174 = fmul <4 x double> %146, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %175 = fmul <4 x double> %154, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %176 = fadd <4 x double> %170, %174
  %177 = fsub <4 x double> %170, %176
  %178 = fadd <4 x double> %174, %177
  %179 = fadd <4 x double> %173, %178
  %180 = fadd <4 x double> %175, %179
  %181 = fmul <4 x double> %146, %155
  %182 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %181
  %183 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> %146, <4 x double> %182) #6
  %184 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %159, <4 x double> %146, <4 x double> %183) #6
  %185 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> %154, <4 x double> %184) #6
  %186 = fmul <4 x double> %168, %181
  %187 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %186
  %188 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %181, <4 x double> %168, <4 x double> %187) #6
  %189 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %185, <4 x double> %168, <4 x double> %188) #6
  %190 = fadd <4 x double> %176, %186
  %191 = fsub <4 x double> %176, %190
  %192 = fadd <4 x double> %186, %191
  %193 = fadd <4 x double> %192, %180
  %194 = fadd <4 x double> %189, %193
  %195 = fadd <4 x double> %190, %194
  %196 = bitcast <4 x double> %0 to <4 x i64>
  %197 = and <4 x i64> %196, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %198 = bitcast <4 x i64> %197 to <4 x double>
  %199 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %198, <4 x double> <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>, i8 30) #6
  %200 = fcmp uno <4 x double> %195, zeroinitializer
  %201 = select <4 x i1> %200, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %199
  %202 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %195, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %201) #6
  %203 = fcmp une <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %204 = bitcast <4 x double> %202 to <4 x i64>
  %205 = select <4 x i1> %203, <4 x i64> %204, <4 x i64> zeroinitializer
  %206 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #6
  %207 = bitcast <4 x double> %206 to <4 x i64>
  %208 = or <4 x i64> %205, %207
  %209 = fcmp uno <4 x double> %0, zeroinitializer
  %210 = bitcast <4 x i64> %208 to <4 x double>
  %211 = select <4 x i1> %209, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %210
  ret <4 x double> %211
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_atanhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <4 x double> %5, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <4 x double> %5, %6
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <4 x double> %4, %6
  %10 = fadd <4 x double> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <4 x double> %5, %19
  %21 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %5, <4 x double> %21) #6
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %19, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %19, <4 x double> %24) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %19, <4 x double> %22) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %26, <4 x double> %27) #6
  %29 = fmul <4 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %29, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = fmul <4 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %29, <4 x double> %32, <4 x double> %30) #6
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = bitcast <2 x i64> %36 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %42, <2 x i64> %39, <2 x i32> <i32 2, i32 1>
  %44 = bitcast <2 x i64> %43 to <4 x i32>
  %45 = lshr <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i64> %31, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %47) #6
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %49) #6
  %51 = bitcast <16 x i8> %50 to <4 x i32>
  %52 = sub <4 x i32> %45, %51
  %53 = sub <4 x i32> zeroinitializer, %52
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %57 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %58 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %59 = shl <4 x i32> %58, <i32 20, i32 20, i32 20, i32 20>
  %60 = and <4 x i32> %57, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = bitcast <4 x i32> %59 to <2 x i64>
  %63 = bitcast <4 x i32> %61 to <2 x i64>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = bitcast <4 x i64> %66 to <4 x double>
  %68 = fmul <4 x double> %20, %67
  %69 = sub <4 x i32> %53, %54
  %70 = add <4 x i32> %69, <i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %72 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %73 = and <4 x i32> %71, <i32 0, i32 -1, i32 0, i32 -1>
  %74 = shl <4 x i32> %73, <i32 20, i32 20, i32 20, i32 20>
  %75 = and <4 x i32> %72, <i32 0, i32 -1, i32 0, i32 -1>
  %76 = shl <4 x i32> %75, <i32 20, i32 20, i32 20, i32 20>
  %77 = bitcast <4 x i32> %74 to <2 x i64>
  %78 = bitcast <4 x i32> %76 to <2 x i64>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = fmul <4 x double> %68, %82
  %84 = fmul <4 x double> %28, %67
  %85 = fmul <4 x double> %84, %82
  %86 = fadd <4 x double> %83, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %87 = fsub <4 x double> %86, %83
  %88 = fsub <4 x double> %86, %87
  %89 = fsub <4 x double> %83, %88
  %90 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %87
  %91 = fadd <4 x double> %90, %89
  %92 = fadd <4 x double> %85, %91
  %93 = fadd <4 x double> %83, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %94 = fsub <4 x double> %93, %83
  %95 = fsub <4 x double> %93, %94
  %96 = fsub <4 x double> %83, %95
  %97 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %94
  %98 = fadd <4 x double> %97, %96
  %99 = fadd <4 x double> %85, %98
  %100 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %93
  %101 = fmul <4 x double> %86, %100
  %102 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %86, <4 x double> %102) #6
  %104 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %93
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %104, <4 x double> %100, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %106 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %99
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %100, <4 x double> %105) #6
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %100, <4 x double> %103) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %107, <4 x double> %108) #6
  %110 = fmul <4 x double> %101, %101
  %111 = fadd <4 x double> %101, %101
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %110
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %101, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %111, <4 x double> %109, <4 x double> %113) #6
  %115 = fmul <4 x double> %110, %110
  %116 = fmul <4 x double> %115, %115
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %117) #6
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> %119, <4 x double> %120) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %116, <4 x double> %118, <4 x double> %121) #6
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %110, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %124 = sitofp <4 x i32> %52 to <4 x double>
  %125 = fmul <4 x double> %124, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %126 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %125
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %124, <4 x double> %126) #6
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %124, <4 x double> %127) #6
  %129 = fmul <4 x double> %101, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %130 = fmul <4 x double> %109, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %131 = fadd <4 x double> %125, %129
  %132 = fsub <4 x double> %125, %131
  %133 = fadd <4 x double> %129, %132
  %134 = fadd <4 x double> %128, %133
  %135 = fadd <4 x double> %130, %134
  %136 = fmul <4 x double> %101, %110
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %101, <4 x double> %137) #6
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %114, <4 x double> %101, <4 x double> %138) #6
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %109, <4 x double> %139) #6
  %141 = fmul <4 x double> %123, %136
  %142 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %123, <4 x double> %142) #6
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %123, <4 x double> %143) #6
  %145 = fadd <4 x double> %131, %141
  %146 = fsub <4 x double> %131, %145
  %147 = fadd <4 x double> %141, %146
  %148 = fadd <4 x double> %147, %135
  %149 = fadd <4 x double> %144, %148
  %150 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #6
  %151 = bitcast <4 x double> %150 to <4 x i64>
  %152 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = fadd <4 x double> %145, %149
  %155 = fmul <4 x double> %154, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %156 = bitcast <4 x i64> %153 to <4 x double>
  %157 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %155, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %156) #6
  %158 = bitcast <4 x double> %157 to <4 x i64>
  %159 = or <4 x i64> %158, %151
  %160 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %161 = xor <4 x i64> %159, %160
  %162 = bitcast <4 x i64> %161 to <4 x double>
  %163 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %164 = fcmp uno <4 x double> %162, zeroinitializer
  %165 = fcmp uno <4 x double> %0, zeroinitializer
  %166 = or <4 x i1> %163, %165
  %167 = or <4 x i1> %166, %164
  %168 = select <4 x i1> %167, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %162
  ret <4 x double> %168
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cbrtd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %7, <4 x double> %5) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> %14, <2 x i32> <i32 2, i32 1>
  %19 = bitcast <2 x i64> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %20, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %33 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %34 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = bitcast <4 x i32> %35 to <2 x i64>
  %39 = bitcast <4 x i32> %37 to <2 x i64>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <4 x double>
  %44 = fmul <4 x double> %43, %0
  %45 = sub <4 x i32> %29, %30
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 1023, i32 1023>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %48 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %49 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <4 x double>
  %59 = fmul <4 x double> %44, %58
  %60 = sitofp <4 x i32> %28 to <4 x double>
  %61 = fadd <4 x double> %60, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %62 = fmul <4 x double> %61, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %63 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %62) #6
  %64 = sitofp <4 x i32> %63 to <4 x double>
  %65 = fmul <4 x double> %64, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %66 = fsub <4 x double> %61, %65
  %67 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %66) #6
  %68 = icmp eq <4 x i32> %67, <i32 1, i32 1, i32 1, i32 1>
  %69 = sitofp <4 x i1> %68 to <4 x double>
  %70 = fcmp oeq <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %72) #6
  %74 = icmp eq <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %75 = sitofp <4 x i1> %74 to <4 x double>
  %76 = fcmp oeq <4 x double> %75, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %77 = sext <4 x i1> %76 to <4 x i64>
  %78 = bitcast <4 x i64> %77 to <4 x double>
  %79 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %78) #6
  %80 = add <4 x i32> %63, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %81 = ashr <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  %82 = add nsw <4 x i32> %81, <i32 1023, i32 1023, i32 1023, i32 1023>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %84 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %85 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %86 = shl <4 x i32> %85, <i32 20, i32 20, i32 20, i32 20>
  %87 = and <4 x i32> %84, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <4 x i32> %86 to <2 x i64>
  %90 = bitcast <4 x i32> %88 to <2 x i64>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <2 x i64> %90, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %93 = shufflevector <4 x i64> %91, <4 x i64> %92, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = fmul <4 x double> %79, %94
  %96 = sub <4 x i32> %80, %81
  %97 = add <4 x i32> %96, <i32 1023, i32 1023, i32 1023, i32 1023>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %99 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %100 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %101 = shl <4 x i32> %100, <i32 20, i32 20, i32 20, i32 20>
  %102 = and <4 x i32> %99, <i32 0, i32 -1, i32 0, i32 -1>
  %103 = shl <4 x i32> %102, <i32 20, i32 20, i32 20, i32 20>
  %104 = bitcast <4 x i32> %101 to <2 x i64>
  %105 = bitcast <4 x i32> %103 to <2 x i64>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <4 x double>
  %110 = fmul <4 x double> %95, %109
  %111 = bitcast <4 x double> %110 to <4 x i64>
  %112 = bitcast <4 x double> %59 to <4 x i64>
  %113 = and <4 x i64> %112, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %114 = xor <4 x i64> %113, %111
  %115 = bitcast <4 x i64> %114 to <4 x double>
  %116 = and <4 x i64> %112, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %117, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #6
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %117, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %119, <4 x double> %117, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> %117, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> %117, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #6
  %123 = fmul <4 x double> %122, %122
  %124 = fmul <4 x double> %123, %123
  %125 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %117, <4 x double> %124, <4 x double> %125) #6
  %127 = fmul <4 x double> %126, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %128 = fsub <4 x double> %122, %127
  %129 = fmul <4 x double> %128, %117
  %130 = fmul <4 x double> %128, %129
  %131 = fmul <4 x double> %130, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %130, <4 x double> %128, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #6
  %133 = fmul <4 x double> %132, %131
  %134 = fsub <4 x double> %130, %133
  %135 = fmul <4 x double> %134, %115
  ret <4 x double> %135
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_cbrtd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %7, <4 x double> %5) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> %14, <2 x i32> <i32 2, i32 1>
  %19 = bitcast <2 x i64> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %20, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %33 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %34 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = bitcast <4 x i32> %35 to <2 x i64>
  %39 = bitcast <4 x i32> %37 to <2 x i64>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <4 x double>
  %44 = fmul <4 x double> %43, %0
  %45 = sub <4 x i32> %29, %30
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 1023, i32 1023>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %48 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %49 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <4 x double>
  %59 = fmul <4 x double> %44, %58
  %60 = sitofp <4 x i32> %28 to <4 x double>
  %61 = fadd <4 x double> %60, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %62 = fmul <4 x double> %61, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %63 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %62) #6
  %64 = sitofp <4 x i32> %63 to <4 x double>
  %65 = fmul <4 x double> %64, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %66 = fsub <4 x double> %61, %65
  %67 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %66) #6
  %68 = icmp eq <4 x i32> %67, <i32 1, i32 1, i32 1, i32 1>
  %69 = sitofp <4 x i1> %68 to <4 x double>
  %70 = fcmp oeq <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <4 x double> %72) #6
  %75 = icmp eq <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %76 = sitofp <4 x i1> %75 to <4 x double>
  %77 = fcmp oeq <4 x double> %76, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %78 = sext <4 x i1> %77 to <4 x i64>
  %79 = bitcast <4 x i64> %78 to <4 x double>
  %80 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %79) #6
  %81 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <4 x double> %79) #6
  %82 = bitcast <4 x double> %80 to <4 x i64>
  %83 = bitcast <4 x double> %59 to <4 x i64>
  %84 = and <4 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = xor <4 x i64> %84, %82
  %86 = bitcast <4 x i64> %85 to <4 x double>
  %87 = bitcast <4 x double> %81 to <4 x i64>
  %88 = xor <4 x i64> %84, %87
  %89 = bitcast <4 x i64> %88 to <4 x double>
  %90 = and <4 x i64> %83, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %91, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #6
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %91, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %91, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #6
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %91, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #6
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %91, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #6
  %97 = fmul <4 x double> %96, %96
  %98 = fmul <4 x double> %97, %97
  %99 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %91, <4 x double> %98, <4 x double> %99) #6
  %101 = fmul <4 x double> %100, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %102 = fsub <4 x double> %96, %101
  %103 = fmul <4 x double> %102, %102
  %104 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %103
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %102, <4 x double> %104) #6
  %106 = fmul <4 x double> %103, %103
  %107 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %103, <4 x double> %107) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> %103, <4 x double> %108) #6
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %105, <4 x double> %109) #6
  %111 = fmul <4 x double> %106, %91
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %91, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %91, <4 x double> %113) #6
  %115 = bitcast <4 x double> %102 to <4 x i64>
  %116 = xor <4 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = fadd <4 x double> %111, %117
  %119 = fsub <4 x double> %118, %111
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %111, %120
  %122 = fsub <4 x double> %117, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %114, %123
  %125 = fadd <4 x double> %118, %124
  %126 = fmul <4 x double> %125, <double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555>
  %127 = fmul <4 x double> %102, %126
  %128 = fadd <4 x double> %103, %127
  %129 = fsub <4 x double> %128, %103
  %130 = fsub <4 x double> %128, %129
  %131 = fsub <4 x double> %103, %130
  %132 = fsub <4 x double> %127, %129
  %133 = fadd <4 x double> %132, %131
  %134 = fadd <4 x double> %105, %133
  %135 = fmul <4 x double> %128, %91
  %136 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %135
  %137 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %91, <4 x double> %136) #6
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %134, <4 x double> %91, <4 x double> %137) #6
  %139 = fmul <4 x double> %135, %86
  %140 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %139
  %141 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %86, <4 x double> %140) #6
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %138, <4 x double> %86, <4 x double> %141) #6
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %89, <4 x double> %142) #6
  %144 = fadd <4 x double> %143, %139
  %145 = add <4 x i32> %63, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %146 = ashr <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %147 = add nsw <4 x i32> %146, <i32 1023, i32 1023, i32 1023, i32 1023>
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %149 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %150 = and <4 x i32> %148, <i32 0, i32 -1, i32 0, i32 -1>
  %151 = shl <4 x i32> %150, <i32 20, i32 20, i32 20, i32 20>
  %152 = and <4 x i32> %149, <i32 0, i32 -1, i32 0, i32 -1>
  %153 = shl <4 x i32> %152, <i32 20, i32 20, i32 20, i32 20>
  %154 = bitcast <4 x i32> %151 to <2 x i64>
  %155 = bitcast <4 x i32> %153 to <2 x i64>
  %156 = shufflevector <2 x i64> %154, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = bitcast <4 x i64> %158 to <4 x double>
  %160 = fmul <4 x double> %144, %159
  %161 = sub <4 x i32> %145, %146
  %162 = add <4 x i32> %161, <i32 1023, i32 1023, i32 1023, i32 1023>
  %163 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %164 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %165 = and <4 x i32> %163, <i32 0, i32 -1, i32 0, i32 -1>
  %166 = shl <4 x i32> %165, <i32 20, i32 20, i32 20, i32 20>
  %167 = and <4 x i32> %164, <i32 0, i32 -1, i32 0, i32 -1>
  %168 = shl <4 x i32> %167, <i32 20, i32 20, i32 20, i32 20>
  %169 = bitcast <4 x i32> %166 to <2 x i64>
  %170 = bitcast <4 x i32> %168 to <2 x i64>
  %171 = shufflevector <2 x i64> %169, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = shufflevector <2 x i64> %170, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %173 = shufflevector <4 x i64> %171, <4 x i64> %172, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %174 = bitcast <4 x i64> %173 to <4 x double>
  %175 = fmul <4 x double> %160, %174
  %176 = fcmp oeq <4 x double> %91, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = sext <4 x i1> %176 to <4 x i64>
  %178 = and <4 x i64> %85, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %179 = or <4 x i64> %178, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %180 = bitcast <4 x i64> %179 to <4 x double>
  %181 = bitcast <4 x i64> %177 to <4 x double>
  %182 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %175, <4 x double> %180, <4 x double> %181) #6
  %183 = fcmp oeq <4 x double> %91, zeroinitializer
  %184 = sext <4 x i1> %183 to <4 x i64>
  %185 = bitcast <4 x i64> %178 to <4 x double>
  %186 = bitcast <4 x i64> %184 to <4 x double>
  %187 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %182, <4 x double> %185, <4 x double> %186) #6
  ret <4 x double> %187
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp2d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %2) #6
  %4 = fsub <4 x double> %0, %2
  %5 = fmul <4 x double> %4, %4
  %6 = fmul <4 x double> %5, %5
  %7 = fmul <4 x double> %6, %6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <4 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <4 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #6
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <4 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #6
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %9, <4 x double> %10) #6
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <4 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <4 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %12, <4 x double> %13) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> %11, <4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %8, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %4, <4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add nsw <4 x i32> %19, <i32 1023, i32 1023, i32 1023, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %22 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %23 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %24 = shl <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %25 = and <4 x i32> %22, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %24 to <2 x i64>
  %28 = bitcast <4 x i32> %26 to <2 x i64>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <4 x i64> %29, <4 x i64> %30, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = bitcast <4 x i64> %31 to <4 x double>
  %33 = fmul <4 x double> %18, %32
  %34 = sub <4 x i32> %3, %19
  %35 = add <4 x i32> %34, <i32 1023, i32 1023, i32 1023, i32 1023>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %37 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %38 = and <4 x i32> %36, <i32 0, i32 -1, i32 0, i32 -1>
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = and <4 x i32> %37, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %39 to <2 x i64>
  %43 = bitcast <4 x i32> %41 to <2 x i64>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x i64> %44, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = fmul <4 x double> %33, %47
  %49 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.024000e+03, double 1.024000e+03, double 1.024000e+03, double 1.024000e+03>, i8 29) #6
  %50 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %48, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -2.000000e+03, double -2.000000e+03, double -2.000000e+03, double -2.000000e+03>, i8 17) #6
  %52 = bitcast <4 x double> %51 to <4 x i64>
  %53 = bitcast <4 x double> %50 to <4 x i64>
  %54 = xor <4 x i64> %52, <i64 -1, i64 -1, i64 -1, i64 -1>
  %55 = and <4 x i64> %54, %53
  %56 = bitcast <4 x i64> %55 to <4 x double>
  ret <4 x double> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp2d4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %2) #6
  %4 = fsub <4 x double> %0, %2
  %5 = fmul <4 x double> %4, %4
  %6 = fmul <4 x double> %5, %5
  %7 = fmul <4 x double> %6, %6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>, <4 x double> <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>, <4 x double> <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>) #6
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>, <4 x double> <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>) #6
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %9, <4 x double> %10) #6
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>, <4 x double> <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>, <4 x double> <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %5, <4 x double> %12, <4 x double> %13) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> %11, <4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %8, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %4, <4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %19 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %20 = add nsw <4 x i32> %19, <i32 1023, i32 1023, i32 1023, i32 1023>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %22 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %23 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %24 = shl <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %25 = and <4 x i32> %22, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %24 to <2 x i64>
  %28 = bitcast <4 x i32> %26 to <2 x i64>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <4 x i64> %29, <4 x i64> %30, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = bitcast <4 x i64> %31 to <4 x double>
  %33 = fmul <4 x double> %18, %32
  %34 = sub <4 x i32> %3, %19
  %35 = add <4 x i32> %34, <i32 1023, i32 1023, i32 1023, i32 1023>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %37 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %38 = and <4 x i32> %36, <i32 0, i32 -1, i32 0, i32 -1>
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = and <4 x i32> %37, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %39 to <2 x i64>
  %43 = bitcast <4 x i32> %41 to <2 x i64>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x i64> %44, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = fmul <4 x double> %33, %47
  %49 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 1.024000e+03, double 1.024000e+03, double 1.024000e+03, double 1.024000e+03>, i8 29) #6
  %50 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %48, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -2.000000e+03, double -2.000000e+03, double -2.000000e+03, double -2.000000e+03>, i8 17) #6
  %52 = bitcast <4 x double> %51 to <4 x i64>
  %53 = bitcast <4 x double> %50 to <4 x i64>
  %54 = xor <4 x i64> %52, <i64 -1, i64 -1, i64 -1, i64 -1>
  %55 = and <4 x i64> %54, %53
  %56 = bitcast <4 x i64> %55 to <4 x double>
  ret <4 x double> %56
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp10d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #6
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <4 x double> %0) #6
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <4 x double> %5) #6
  %7 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <4 x double> %6, <4 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>) #6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %6, <4 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %6, <4 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154>) #6
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %6, <4 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #6
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %6, <4 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>) #6
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %6, <4 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %6, <4 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %6, <4 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %6, <4 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %6, <4 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %18 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %19 = add nsw <4 x i32> %18, <i32 1023, i32 1023, i32 1023, i32 1023>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %21 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %22 = and <4 x i32> %20, <i32 0, i32 -1, i32 0, i32 -1>
  %23 = shl <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = and <4 x i32> %21, <i32 0, i32 -1, i32 0, i32 -1>
  %25 = shl <4 x i32> %24, <i32 20, i32 20, i32 20, i32 20>
  %26 = bitcast <4 x i32> %23 to <2 x i64>
  %27 = bitcast <4 x i32> %25 to <2 x i64>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <4 x i64> %28, <4 x i64> %29, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %31 = bitcast <4 x i64> %30 to <4 x double>
  %32 = fmul <4 x double> %17, %31
  %33 = sub <4 x i32> %4, %18
  %34 = add <4 x i32> %33, <i32 1023, i32 1023, i32 1023, i32 1023>
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %36 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %37 = and <4 x i32> %35, <i32 0, i32 -1, i32 0, i32 -1>
  %38 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %39 = and <4 x i32> %36, <i32 0, i32 -1, i32 0, i32 -1>
  %40 = shl <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = bitcast <4 x i32> %38 to <2 x i64>
  %42 = bitcast <4 x i32> %40 to <2 x i64>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <4 x double>
  %47 = fmul <4 x double> %32, %46
  %48 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #6
  %49 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %47, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %48) #6
  %50 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -3.500000e+02, double -3.500000e+02, double -3.500000e+02, double -3.500000e+02>, i8 17) #6
  %51 = bitcast <4 x double> %50 to <4 x i64>
  %52 = bitcast <4 x double> %49 to <4 x i64>
  %53 = xor <4 x i64> %51, <i64 -1, i64 -1, i64 -1, i64 -1>
  %54 = and <4 x i64> %53, %52
  %55 = bitcast <4 x i64> %54 to <4 x double>
  ret <4 x double> %55
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_exp10d4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %3) #6
  %5 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000, double 0xBFD34413509F7000>, <4 x double> %0) #6
  %6 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %3, <4 x double> <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>, <4 x double> %5) #6
  %7 = fmul <4 x double> %6, %6
  %8 = fmul <4 x double> %7, %7
  %9 = fmul <4 x double> %8, %8
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>, <4 x double> <double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706, double 0x3F748988CFF14706>) #6
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>, <4 x double> %10) #6
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154, double 0x3F9411663B046154>, <4 x double> <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>, <4 x double> <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %12, <4 x double> %13) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>, <4 x double> <double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43, double 0x4000470591DE2C43>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78, double 0x40053524C73CEA78>, <4 x double> <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> %15, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %8, <4 x double> %14, <4 x double> %17) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %6, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %21 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %22 = add nsw <4 x i32> %21, <i32 1023, i32 1023, i32 1023, i32 1023>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %24 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %25 = and <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = bitcast <4 x i32> %26 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <4 x double>
  %35 = fmul <4 x double> %20, %34
  %36 = sub <4 x i32> %4, %21
  %37 = add <4 x i32> %36, <i32 1023, i32 1023, i32 1023, i32 1023>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %39 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %40 = and <4 x i32> %38, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %43 = shl <4 x i32> %42, <i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <4 x i32> %41 to <2 x i64>
  %45 = bitcast <4 x i32> %43 to <2 x i64>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <4 x double>
  %50 = fmul <4 x double> %35, %49
  %51 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE, double 0x40734413509F79FE>, i8 30) #6
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -3.500000e+02, double -3.500000e+02, double -3.500000e+02, double -3.500000e+02>, i8 17) #6
  %54 = bitcast <4 x double> %53 to <4 x i64>
  %55 = bitcast <4 x double> %52 to <4 x i64>
  %56 = xor <4 x i64> %54, <i64 -1, i64 -1, i64 -1, i64 -1>
  %57 = and <4 x i64> %56, %55
  %58 = bitcast <4 x i64> %57 to <4 x double>
  ret <4 x double> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_expm1d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, zeroinitializer
  %3 = fmul <4 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %3, i32 8) #6
  %5 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %4) #6
  %6 = fmul <4 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <4 x double> %6, %0
  %8 = fsub <4 x double> %7, %0
  %9 = fsub <4 x double> %7, %8
  %10 = fsub <4 x double> %0, %9
  %11 = fsub <4 x double> %6, %8
  %12 = fadd <4 x double> %11, %10
  %13 = fadd <4 x double> %12, zeroinitializer
  %14 = fmul <4 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <4 x double> %14, %7
  %16 = fsub <4 x double> %15, %7
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %7, %17
  %19 = fsub <4 x double> %14, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %20, %13
  %22 = fmul <4 x double> %15, %15
  %23 = fadd <4 x double> %15, %15
  %24 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %15, <4 x double> %24) #6
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %21, <4 x double> %25) #6
  %27 = fmul <4 x double> %22, %22
  %28 = fadd <4 x double> %22, %22
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %22, <4 x double> %29) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %26, <4 x double> %30) #6
  %32 = fmul <4 x double> %27, %27
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %34, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %36, <4 x double> %39) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %33, <4 x double> %40) #6
  %42 = fmul <4 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %44) #6
  %46 = fadd <4 x double> %42, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <4 x double> %42, %47
  %49 = fadd <4 x double> %48, %45
  %50 = fmul <4 x double> %15, %46
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %15, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %15, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %21, <4 x double> %53) #6
  %55 = fadd <4 x double> %50, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <4 x double> %50, %56
  %58 = fadd <4 x double> %57, %54
  %59 = fmul <4 x double> %15, %55
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %15, <4 x double> %60) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %15, <4 x double> %61) #6
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %62) #6
  %64 = fadd <4 x double> %59, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <4 x double> %59, %65
  %67 = fadd <4 x double> %66, %63
  %68 = fmul <4 x double> %27, %41
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %41, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %41, <4 x double> %70) #6
  %72 = fadd <4 x double> %64, %68
  %73 = fsub <4 x double> %64, %72
  %74 = fadd <4 x double> %68, %73
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add nsw <4 x i32> %77, <i32 1023, i32 1023, i32 1023, i32 1023>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %80 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %81 = and <4 x i32> %79, <i32 0, i32 -1, i32 0, i32 -1>
  %82 = shl <4 x i32> %81, <i32 20, i32 20, i32 20, i32 20>
  %83 = and <4 x i32> %80, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %82 to <2 x i64>
  %86 = bitcast <4 x i32> %84 to <2 x i64>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <4 x double>
  %91 = fmul <4 x double> %72, %90
  %92 = sub <4 x i32> %5, %77
  %93 = add <4 x i32> %92, <i32 1023, i32 1023, i32 1023, i32 1023>
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %95 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %96 = and <4 x i32> %94, <i32 0, i32 -1, i32 0, i32 -1>
  %97 = shl <4 x i32> %96, <i32 20, i32 20, i32 20, i32 20>
  %98 = and <4 x i32> %95, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = bitcast <4 x i32> %97 to <2 x i64>
  %101 = bitcast <4 x i32> %99 to <2 x i64>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <4 x double>
  %106 = fmul <4 x double> %91, %105
  %107 = fmul <4 x double> %76, %90
  %108 = fmul <4 x double> %107, %105
  %109 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %110 = bitcast <4 x double> %109 to <4 x i64>
  %111 = bitcast <4 x double> %106 to <4 x i64>
  %112 = xor <4 x i64> %110, <i64 -1, i64 -1, i64 -1, i64 -1>
  %113 = and <4 x i64> %112, %111
  %114 = bitcast <4 x double> %108 to <4 x i64>
  %115 = and <4 x i64> %114, %112
  %116 = bitcast <4 x i64> %113 to <4 x double>
  %117 = bitcast <4 x i64> %115 to <4 x double>
  %118 = fadd <4 x double> %116, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %119 = fsub <4 x double> %118, %116
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %116, %120
  %122 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %123, %117
  %125 = fadd <4 x double> %118, %124
  %126 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #6
  %127 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %125, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %126) #6
  %128 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #6
  %129 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %127, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %128) #6
  %130 = bitcast <4 x double> %0 to <4 x i64>
  %131 = xor <4 x i64> %130, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %132 = bitcast <4 x i64> %131 to <4 x double>
  %133 = fcmp oeq <4 x double> %132, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %134 = sext <4 x i1> %133 to <4 x i64>
  %135 = bitcast <4 x i64> %134 to <4 x double>
  %136 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %129, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %135) #6
  ret <4 x double> %136
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log10d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <4 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <4 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <4 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %81, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <4 x double> %81, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <4 x double> %81, <4 x double> %84) #6
  %86 = fmul <4 x double> %62, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %87 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %86
  %88 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %87) #6
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %88) #6
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <4 x double> %89) #6
  %91 = fadd <4 x double> %82, %86
  %92 = fsub <4 x double> %82, %91
  %93 = fadd <4 x double> %86, %92
  %94 = fadd <4 x double> %85, %93
  %95 = fadd <4 x double> %90, %94
  %96 = fmul <4 x double> %62, %71
  %97 = fmul <4 x double> %79, %96
  %98 = fadd <4 x double> %91, %97
  %99 = fsub <4 x double> %91, %98
  %100 = fadd <4 x double> %97, %99
  %101 = fadd <4 x double> %100, %95
  %102 = fadd <4 x double> %98, %101
  %103 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %104 = sext <4 x i1> %103 to <4 x i64>
  %105 = bitcast <4 x i64> %104 to <4 x double>
  %106 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %102, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %105) #6
  %107 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %108 = fcmp uno <4 x double> %5, zeroinitializer
  %109 = select <4 x i1> %108, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %107
  %110 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %106, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %109) #6
  %111 = fcmp oeq <4 x double> %5, zeroinitializer
  %112 = sext <4 x i1> %111 to <4 x i64>
  %113 = bitcast <4 x i64> %112 to <4 x double>
  %114 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %110, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %113) #6
  ret <4 x double> %114
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log2d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %62, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %84) #6
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <4 x double> %85) #6
  %87 = fadd <4 x double> %82, %81
  %88 = fsub <4 x double> %87, %81
  %89 = fsub <4 x double> %87, %88
  %90 = fsub <4 x double> %81, %89
  %91 = fsub <4 x double> %82, %88
  %92 = fadd <4 x double> %91, %90
  %93 = fadd <4 x double> %86, %92
  %94 = fmul <4 x double> %62, %71
  %95 = fmul <4 x double> %79, %94
  %96 = fadd <4 x double> %87, %95
  %97 = fsub <4 x double> %96, %87
  %98 = fsub <4 x double> %96, %97
  %99 = fsub <4 x double> %87, %98
  %100 = fsub <4 x double> %95, %97
  %101 = fadd <4 x double> %100, %99
  %102 = fadd <4 x double> %93, %101
  %103 = fadd <4 x double> %96, %102
  %104 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %105 = sext <4 x i1> %104 to <4 x i64>
  %106 = bitcast <4 x i64> %105 to <4 x double>
  %107 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %103, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %106) #6
  %108 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %109 = fcmp uno <4 x double> %5, zeroinitializer
  %110 = select <4 x i1> %109, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %108
  %111 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %107, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %110) #6
  %112 = fcmp oeq <4 x double> %5, zeroinitializer
  %113 = sext <4 x i1> %112 to <4 x i64>
  %114 = bitcast <4 x i64> %113 to <4 x double>
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %111, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %114) #6
  ret <4 x double> %115
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log2d4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fdiv <4 x double> %49, %50
  %52 = fmul <4 x double> %51, %51
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %52, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %52, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %52, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %52, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %52, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %52, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #6
  %59 = bitcast <16 x i8> %48 to <4 x i32>
  %60 = sitofp <4 x i32> %59 to <4 x double>
  %61 = fmul <4 x double> %51, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %62) #6
  %64 = fadd <4 x double> %61, %60
  %65 = fsub <4 x double> %60, %64
  %66 = fadd <4 x double> %61, %65
  %67 = fadd <4 x double> %63, %66
  %68 = fmul <4 x double> %51, %52
  %69 = fadd <4 x double> %64, %67
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %68, <4 x double> %69) #6
  %71 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %72 = sext <4 x i1> %71 to <4 x i64>
  %73 = bitcast <4 x i64> %72 to <4 x double>
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %70, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %73) #6
  %75 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %76 = fcmp uno <4 x double> %5, zeroinitializer
  %77 = select <4 x i1> %76, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %75
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %77) #6
  %79 = fcmp oeq <4 x double> %5, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i64>
  %81 = bitcast <4 x i64> %80 to <4 x double>
  %82 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %81) #6
  ret <4 x double> %82
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_log1pd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %4 = bitcast <4 x double> %3 to <4 x i64>
  %5 = fmul <4 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %5, <4 x double> %3) #6
  %7 = fmul <4 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = bitcast <2 x i64> %10 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> %13, <2 x i32> <i32 2, i32 1>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %22 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %20
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %24 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %25 = and <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = add <4 x i32> %26, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %30 = add <4 x i32> %28, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = bitcast <4 x i32> %30 to <2 x i64>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = fadd <4 x double> %36, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %36, <4 x double> %37) #6
  %39 = and <4 x i64> %4, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %40) #6
  %42 = add nsw <4 x i32> %20, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %43 = bitcast <4 x i32> %21 to <16 x i8>
  %44 = bitcast <4 x i32> %42 to <16 x i8>
  %45 = bitcast <4 x i32> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #6
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = sitofp <4 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %48, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %48, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %48, <4 x double> %51) #6
  %53 = fadd <4 x double> %38, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %54 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %53
  %55 = fadd <4 x double> %38, %54
  %56 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %53
  %57 = fmul <4 x double> %38, %56
  %58 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %38, <4 x double> %58) #6
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %56, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %56, <4 x double> %61) #6
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %56, <4 x double> %59) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %63, <4 x double> %64) #6
  %66 = fmul <4 x double> %57, %57
  %67 = fmul <4 x double> %66, %66
  %68 = fmul <4 x double> %67, %67
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #6
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #6
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %71, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %70, <4 x double> %73) #6
  %75 = fmul <4 x double> %57, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fmul <4 x double> %65, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %77 = fadd <4 x double> %75, %49
  %78 = fsub <4 x double> %49, %77
  %79 = fadd <4 x double> %75, %78
  %80 = fadd <4 x double> %52, %79
  %81 = fadd <4 x double> %80, %76
  %82 = fmul <4 x double> %57, %66
  %83 = fmul <4 x double> %82, %74
  %84 = fadd <4 x double> %77, %83
  %85 = fsub <4 x double> %77, %84
  %86 = fadd <4 x double> %83, %85
  %87 = fadd <4 x double> %81, %86
  %88 = fadd <4 x double> %84, %87
  %89 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #6
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %89) #6
  %91 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, i8 17) #6
  %92 = fcmp uno <4 x double> %0, zeroinitializer
  %93 = select <4 x i1> %92, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %91
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #6
  %95 = fcmp oeq <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %96 = sext <4 x i1> %95 to <4 x i64>
  %97 = bitcast <4 x i64> %96 to <4 x double>
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %94, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %97) #6
  %99 = bitcast <4 x double> %0 to <4 x i64>
  %100 = xor <4 x i64> %99, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %101 = bitcast <4 x i64> %100 to <4 x double>
  %102 = fcmp oeq <4 x double> %101, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %103 = sext <4 x i1> %102 to <4 x i64>
  %104 = bitcast <4 x i64> %103 to <4 x double>
  %105 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %98, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %104) #6
  ret <4 x double> %105
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_fabsd4_fma4(<4 x double>) local_unnamed_addr #3 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  ret <4 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_copysignd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #3 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <4 x double>
  ret <4 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmaxd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %0, <4 x double> %1) #6
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmind4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %0, <4 x double> %1) #6
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fdimd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fsub <4 x double> %0, %1
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> zeroinitializer, i8 17) #6
  %5 = fcmp oeq <4 x double> %0, %1
  %6 = select <4 x i1> %5, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %4
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> zeroinitializer, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_truncd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_floord4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #6
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 17) #6
  %11 = fadd <4 x double> %9, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %10) #6
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #6
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_ceild4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #6
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 18) #6
  %11 = fadd <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %9, <4 x double> %10) #6
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #6
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_roundd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <4 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %2, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #6
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> zeroinitializer, i8 18) #6
  %12 = fcmp oeq <4 x double> %10, zeroinitializer
  %13 = fadd <4 x double> %2, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %14 = select <4 x i1> %12, <4 x double> %11, <4 x double> zeroinitializer
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %13, <4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> zeroinitializer, i8 17) #6
  %17 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %16) #6
  %19 = fcmp oeq <4 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> zeroinitializer, <4 x double> %21) #6
  %23 = bitcast <4 x double> %0 to <4 x i64>
  %24 = and <4 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <4 x i64> %24 to <4 x double>
  %26 = fcmp oeq <4 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %25, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %28 = fsub <4 x double> %22, %18
  %29 = bitcast <4 x double> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %31 = and <4 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = or <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = select <4 x i1> %26, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %27
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> %0, <4 x double> %34) #6
  ret <4 x double> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_rintd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #6
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_nextafterd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x double> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <4 x i64> %6 to <4 x double>
  %8 = bitcast <4 x i64> %4 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %7, <4 x double> %8) #6
  %10 = bitcast <4 x double> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = and <4 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %14 = xor <4 x i64> %13, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %17 = sext <4 x i1> %16 to <4 x i64>
  %18 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> %9, i8 29) #6
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = xor <4 x i64> %17, %19
  %21 = bitcast <2 x i64> %11 to <4 x i32>
  %22 = xor <4 x i32> %21, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %23 = add <4 x i32> %22, <i32 1, i32 0, i32 1, i32 0>
  %24 = bitcast <2 x i64> %12 to <4 x i32>
  %25 = xor <4 x i32> %24, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %26 = add <4 x i32> %25, <i32 1, i32 0, i32 1, i32 0>
  %27 = icmp eq <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = icmp eq <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = sext <4 x i1> %29 to <4 x i32>
  %31 = bitcast <4 x i32> %28 to <2 x i64>
  %32 = bitcast <4 x i32> %30 to <2 x i64>
  %33 = and <2 x i64> %31, <i64 1, i64 1>
  %34 = and <2 x i64> %32, <i64 1, i64 1>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <2 x i64> %41 to <4 x i32>
  %44 = add <4 x i32> %23, %43
  %45 = bitcast <2 x i64> %42 to <4 x i32>
  %46 = add <4 x i32> %26, %45
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = bitcast <4 x i64> %20 to <4 x double>
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %52, <4 x double> %53) #6
  %55 = bitcast <4 x double> %54 to <4 x i64>
  %56 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %57 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %58 = fcmp une <4 x double> %9, %1
  %59 = sext <4 x i1> %58 to <4 x i64>
  %60 = and <4 x i64> %59, <i64 1, i64 1, i64 1, i64 1>
  %61 = shufflevector <4 x i64> %60, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %62 = shufflevector <4 x i64> %60, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast <2 x i64> %56 to <4 x i32>
  %64 = bitcast <2 x i64> %61 to <4 x i32>
  %65 = sub <4 x i32> %63, %64
  %66 = bitcast <2 x i64> %57 to <4 x i32>
  %67 = bitcast <2 x i64> %62 to <4 x i32>
  %68 = sub <4 x i32> %66, %67
  %69 = bitcast <4 x i32> %65 to <2 x i64>
  %70 = bitcast <4 x i32> %68 to <2 x i64>
  %71 = icmp eq <4 x i32> %65, <i32 -1, i32 0, i32 -1, i32 0>
  %72 = sext <4 x i1> %71 to <4 x i32>
  %73 = icmp eq <4 x i32> %68, <i32 -1, i32 0, i32 -1, i32 0>
  %74 = sext <4 x i1> %73 to <4 x i32>
  %75 = bitcast <4 x i32> %72 to <2 x i64>
  %76 = bitcast <4 x i32> %74 to <2 x i64>
  %77 = and <2 x i64> %75, <i64 4294967295, i64 4294967295>
  %78 = and <2 x i64> %76, <i64 4294967295, i64 4294967295>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = shufflevector <8 x float> %82, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %84 = bitcast <8 x float> %83 to <4 x i64>
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast <2 x i64> %85 to <4 x i32>
  %88 = add <4 x i32> %65, %87
  %89 = bitcast <2 x i64> %86 to <4 x i32>
  %90 = add <4 x i32> %68, %89
  %91 = bitcast <4 x i32> %88 to <2 x i64>
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = shufflevector <2 x i64> %69, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %70, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <4 x double>
  %101 = bitcast <4 x i64> %59 to <4 x double>
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %100, <4 x double> %96, <4 x double> %101) #6
  %103 = bitcast <4 x double> %102 to <4 x i64>
  %104 = shufflevector <4 x i64> %103, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %105 = shufflevector <4 x i64> %103, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %106 = bitcast <2 x i64> %104 to <4 x i32>
  %107 = xor <4 x i32> %106, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %108 = add <4 x i32> %107, <i32 1, i32 0, i32 1, i32 0>
  %109 = bitcast <2 x i64> %105 to <4 x i32>
  %110 = xor <4 x i32> %109, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %111 = add <4 x i32> %110, <i32 1, i32 0, i32 1, i32 0>
  %112 = icmp eq <4 x i32> %108, <i32 0, i32 -1, i32 0, i32 -1>
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = icmp eq <4 x i32> %111, <i32 0, i32 -1, i32 0, i32 -1>
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %113 to <2 x i64>
  %117 = bitcast <4 x i32> %115 to <2 x i64>
  %118 = and <2 x i64> %116, <i64 1, i64 1>
  %119 = and <2 x i64> %117, <i64 1, i64 1>
  %120 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <4 x i64> %120, <4 x i64> %121, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = shufflevector <8 x float> %123, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %125 = bitcast <8 x float> %124 to <4 x i64>
  %126 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %127 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %128 = bitcast <2 x i64> %126 to <4 x i32>
  %129 = add <4 x i32> %108, %128
  %130 = bitcast <2 x i64> %127 to <4 x i32>
  %131 = add <4 x i32> %111, %130
  %132 = bitcast <4 x i32> %129 to <2 x i64>
  %133 = bitcast <4 x i32> %131 to <2 x i64>
  %134 = shufflevector <2 x i64> %132, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %135 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <4 x i64> %134, <4 x i64> %135, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %102, <4 x double> %137, <4 x double> %53) #6
  %139 = fcmp oeq <4 x double> %138, zeroinitializer
  %140 = fcmp une <4 x double> %9, zeroinitializer
  %141 = and <4 x i1> %139, %140
  %142 = sext <4 x i1> %141 to <4 x i64>
  %143 = bitcast <4 x i64> %13 to <4 x double>
  %144 = bitcast <4 x i64> %142 to <4 x double>
  %145 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> %143, <4 x double> %144) #6
  %146 = fcmp oeq <4 x double> %9, zeroinitializer
  %147 = fcmp oeq <4 x double> %1, zeroinitializer
  %148 = and <4 x i1> %146, %147
  %149 = sext <4 x i1> %148 to <4 x i64>
  %150 = bitcast <4 x i64> %149 to <4 x double>
  %151 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %145, <4 x double> %1, <4 x double> %150) #6
  %152 = fcmp uno <4 x double> %9, %1
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = bitcast <4 x i64> %153 to <4 x double>
  %155 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %151, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %154) #6
  ret <4 x double> %155
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_frfrexpd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #6
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <4 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <4 x i64> %10 to <4 x double>
  %12 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <4 x i1> %14 to <4 x i64>
  %16 = and <4 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <4 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <4 x i64> %17 to <4 x double>
  %19 = bitcast <4 x i64> %15 to <4 x double>
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #6
  %21 = fcmp oeq <4 x double> %7, zeroinitializer
  %22 = sext <4 x i1> %21 to <4 x i64>
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %7, <4 x double> %23) #6
  ret <4 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #6
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = bitcast <2 x i64> %10 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> %13, <2 x i32> <i32 2, i32 1>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %22 = fcmp ueq <4 x double> %7, zeroinitializer
  %23 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %24 = bitcast <4 x i64> %23 to <4 x double>
  %25 = fcmp oeq <4 x double> %24, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %22
  %27 = sext <4 x i1> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = bitcast <4 x i32> %21 to <16 x i8>
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %29, <16 x i8> zeroinitializer, <16 x i8> %30) #6
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmad4_fma4(<4 x double>, <4 x double>, <4 x double>) local_unnamed_addr #0 {
  %4 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %1, <4 x double> %2) #6
  ret <4 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_u05fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #6
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #6
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #6
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #6
  %8 = bitcast <4 x double> %6 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %12
  %16 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %14
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = bitcast <4 x i32> %16 to <2 x i64>
  %19 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = fmul <4 x double> %6, %22
  %24 = fmul <4 x double> %22, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %23
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %24, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %26, <4 x double> %23) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %26, <4 x double> %24) #6
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %28, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %30, <4 x double> %27) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %30, <4 x double> %28) #6
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %31
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %34, <4 x double> %31) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %34, <4 x double> %32) #6
  %37 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %36, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #6
  %39 = fadd <4 x double> %36, %36
  %40 = fmul <4 x double> %39, %38
  %41 = fmul <4 x double> %6, %40
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %6, <4 x double> %42) #6
  %44 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %41, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #6
  %47 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %46, <4 x double> %43) #6
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %7, %49
  %51 = fcmp oeq <4 x double> %6, zeroinitializer
  %52 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = or <4 x i1> %52, %51
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = bitcast <4 x i64> %54 to <4 x double>
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %6, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #6
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %57) #6
  ret <4 x double> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %0) #6
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_sqrtd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #6
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #6
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #6
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #6
  %8 = bitcast <4 x double> %6 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %12
  %16 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %14
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = bitcast <4 x i32> %16 to <2 x i64>
  %19 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = fmul <4 x double> %6, %22
  %24 = fmul <4 x double> %22, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %23
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %24, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %26, <4 x double> %23) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %26, <4 x double> %24) #6
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %28, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %30, <4 x double> %27) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %30, <4 x double> %28) #6
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %31
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %34, <4 x double> %31) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %34, <4 x double> %32) #6
  %37 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %36, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #6
  %39 = fadd <4 x double> %36, %36
  %40 = fmul <4 x double> %39, %38
  %41 = fmul <4 x double> %6, %40
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %6, <4 x double> %42) #6
  %44 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %41, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #6
  %47 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %46, <4 x double> %43) #6
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %7, %49
  %51 = fcmp oeq <4 x double> %6, zeroinitializer
  %52 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = or <4 x i1> %52, %51
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = bitcast <4 x i64> %54 to <4 x double>
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %6, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #6
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %57) #6
  ret <4 x double> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_hypotd4_u05fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #6
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #6
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %12 = fmul <4 x double> %9, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %12, <4 x double> %11) #6
  %14 = fmul <4 x double> %10, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %11) #6
  %16 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <4 x double> %13, %16
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %13, <4 x double> %18) #6
  %20 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %16, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %16, <4 x double> %21) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %19) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %22, <4 x double> %23) #6
  %25 = fmul <4 x double> %17, %17
  %26 = fadd <4 x double> %17, %17
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <4 x double> %30, %25
  %32 = fsub <4 x double> %30, %31
  %33 = fsub <4 x double> %25, %32
  %34 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <4 x double> %34, %33
  %36 = fadd <4 x double> %29, %35
  %37 = fadd <4 x double> %30, %36
  %38 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %37) #6
  %39 = fmul <4 x double> %38, %38
  %40 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %38, <4 x double> %40) #6
  %42 = fadd <4 x double> %30, %39
  %43 = fsub <4 x double> %42, %30
  %44 = fsub <4 x double> %42, %43
  %45 = fsub <4 x double> %30, %44
  %46 = fsub <4 x double> %39, %43
  %47 = fadd <4 x double> %46, %45
  %48 = fadd <4 x double> %41, %36
  %49 = fadd <4 x double> %48, %47
  %50 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %50, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %53 = fmul <4 x double> %50, %52
  %54 = fmul <4 x double> %50, %42
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %50, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %50, <4 x double> %56) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %53, <4 x double> %57) #6
  %59 = fmul <4 x double> %54, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <4 x double> %58, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %10, %59
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %10, <4 x double> %62) #6
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %10, <4 x double> %63) #6
  %65 = fadd <4 x double> %61, %64
  %66 = fcmp uno <4 x double> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i64>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %65, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %68) #6
  %70 = fcmp oeq <4 x double> %9, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %69, <4 x double> %10, <4 x double> %72) #6
  %74 = fcmp uno <4 x double> %8, %5
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #6
  %78 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <4 x i1> %79, %78
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %82) #6
  ret <4 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_hypotd4_u35fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #6
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #6
  %11 = fdiv <4 x double> %9, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %13 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %12) #6
  %14 = fmul <4 x double> %10, %13
  %15 = fcmp oeq <4 x double> %9, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i64>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %10, <4 x double> %17) #6
  %19 = fcmp uno <4 x double> %8, %5
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %21) #6
  %23 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <4 x i1> %24, %23
  %26 = sext <4 x i1> %25 to <4 x i64>
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %22, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %27) #6
  ret <4 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_fmodd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #6
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #6
  %14 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <4 x double> %14 to <4 x i64>
  %16 = add <4 x i64> %15, <i64 -1, i64 -1, i64 -1, i64 -1>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = fcmp oeq <4 x double> %14, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i64>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %20) #6
  %22 = fmul <4 x double> %13, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <4 x double> %13, %13
  %24 = bitcast <4 x double> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <4 x i64> %25 to <4 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %73, %27 ]
  %29 = phi <4 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <4 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = add <4 x i64> %31, <i64 -1, i64 -1, i64 -1, i64 -1>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = fcmp oeq <4 x double> %30, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #6
  %38 = fmul <4 x double> %21, %37
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #6
  %40 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %22, <4 x double> %30, i8 30) #6
  %41 = bitcast <4 x double> %40 to <4 x i64>
  %42 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %13, i8 29) #6
  %43 = bitcast <4 x double> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %23, <4 x double> %30, i8 30) #6
  %48 = bitcast <4 x double> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %50) #6
  %52 = fmul <4 x double> %51, %26
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %26, <4 x double> %53) #6
  %55 = fadd <4 x double> %30, %52
  %56 = fsub <4 x double> %55, %30
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> %30, %57
  %59 = fsub <4 x double> %52, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fadd <4 x double> %29, %54
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fsub <4 x double> %55, %63
  %65 = fadd <4 x double> %62, %64
  %66 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %63, <4 x double> %13, i8 17) #6
  %67 = bitcast <4 x double> %66 to <4 x i64>
  %68 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %70 = and <2 x i64> %69, %68
  %71 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %70, <2 x i64> <i64 -1, i64 -1>) #6
  %72 = icmp eq i32 %71, 0
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp ult i32 %73, 21
  %75 = and i1 %72, %74
  br i1 %75, label %27, label %76

; <label>:76:                                     ; preds = %27
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #6
  %78 = fmul <4 x double> %77, %63
  %79 = fadd <4 x double> %63, %65
  %80 = fcmp oeq <4 x double> %79, %13
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> zeroinitializer, <4 x double> %82) #6
  %84 = bitcast <4 x double> %83 to <4 x i64>
  %85 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = xor <4 x i64> %85, %84
  %87 = bitcast <4 x i64> %86 to <4 x double>
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %11, <4 x double> %13, i8 17) #6
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> %0, <4 x double> %88) #6
  %90 = fcmp oeq <4 x double> %13, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i64>
  %92 = bitcast <4 x i64> %91 to <4 x double>
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %89, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %92) #6
  ret <4 x double> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_remainderd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x20000000000000, double 0x20000000000000, double 0x20000000000000, double 0x20000000000000>, i8 17) #6
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #6
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #6
  %14 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #6
  %15 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <4 x double> %13, <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <4 x double> %13, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <4 x double> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  br label %21

; <label>:21:                                     ; preds = %2, %48
  %22 = phi i32 [ 0, %2 ], [ %80, %48 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %65, %48 ]
  %24 = phi <4 x double> [ zeroinitializer, %2 ], [ %79, %48 ]
  %25 = phi <4 x double> [ %11, %2 ], [ %77, %48 ]
  %26 = fmul <4 x double> %15, %25
  %27 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %26, i32 8) #6
  %28 = bitcast <4 x double> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <4 x i64> %29 to <4 x double>
  %31 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %16, i8 17) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %17, i8 17) #6
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = fcmp oeq <4 x double> %17, %30
  %36 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %37 = select <4 x i1> %35, <4 x i64> %36, <4 x i64> zeroinitializer
  %38 = or <4 x i64> %37, %34
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %39) #6
  %41 = fcmp oeq <4 x double> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %44, %43
  %46 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %45, <2 x i64> <i64 -1, i64 -1>) #6
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %82

; <label>:48:                                     ; preds = %21
  %49 = fmul <4 x double> %40, %20
  %50 = bitcast <4 x double> %49 to <4 x i64>
  %51 = and <4 x i64> %50, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = fcmp oeq <4 x double> %52, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = and <4 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <4 x i64> %55, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = fadd <4 x double> %40, %57
  %59 = bitcast <4 x i64> %54 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> %58, <4 x double> %59) #6
  %61 = fmul <4 x double> %60, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %61, i32 11) #6
  %63 = fcmp une <4 x double> %62, %61
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = xor <4 x i64> %23, %64
  %66 = fmul <4 x double> %60, %20
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %66
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %20, <4 x double> %67) #6
  %69 = fadd <4 x double> %25, %66
  %70 = fsub <4 x double> %69, %25
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %25, %71
  %73 = fsub <4 x double> %66, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %24, %68
  %76 = fadd <4 x double> %75, %74
  %77 = fadd <4 x double> %69, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fadd <4 x double> %76, %78
  %80 = add nuw nsw i32 %22, 1
  %81 = icmp ult i32 %80, 21
  br i1 %81, label %21, label %82

; <label>:82:                                     ; preds = %21, %48
  %83 = phi <4 x double> [ %25, %21 ], [ %77, %48 ]
  %84 = fmul <4 x double> %14, %83
  %85 = bitcast <4 x double> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <4 x double>
  %89 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <4 x i1> %89 to <4 x i64>
  %91 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #6
  %95 = bitcast <4 x i64> %90 to <4 x double>
  %96 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %94, <4 x double> %95) #6
  %97 = fcmp oeq <4 x double> %13, zeroinitializer
  %98 = sext <4 x i1> %97 to <4 x i64>
  %99 = bitcast <4 x i64> %98 to <4 x double>
  %100 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %96, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %99) #6
  ret <4 x double> %100
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_tgammad4_u10fma4(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x double>, <4 x double>* %4, align 32
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x double>, <4 x double>* %6, align 32
  %8 = fadd <4 x double> %5, %7
  %9 = fmul <4 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %9, i32 8) #6
  %11 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %10) #6
  %12 = fmul <4 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <4 x double> %5, %12
  %14 = fsub <4 x double> %13, %5
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %5, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %18
  %20 = fmul <4 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <4 x double> %20, %13
  %22 = fsub <4 x double> %21, %13
  %23 = fsub <4 x double> %21, %22
  %24 = fsub <4 x double> %13, %23
  %25 = fsub <4 x double> %20, %22
  %26 = fadd <4 x double> %25, %24
  %27 = fadd <4 x double> %26, %19
  %28 = fmul <4 x double> %21, %21
  %29 = fadd <4 x double> %21, %21
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %21, <4 x double> %30) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %27, <4 x double> %31) #6
  %33 = fmul <4 x double> %28, %28
  %34 = fadd <4 x double> %28, %28
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %28, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %32, <4 x double> %36) #6
  %38 = fmul <4 x double> %33, %33
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %43, <4 x double> %44) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %42, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %39, <4 x double> %46) #6
  %48 = fmul <4 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %50) #6
  %52 = fadd <4 x double> %48, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <4 x double> %48, %53
  %55 = fadd <4 x double> %54, %51
  %56 = fmul <4 x double> %21, %52
  %57 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %21, <4 x double> %57) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %27, <4 x double> %59) #6
  %61 = fadd <4 x double> %56, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <4 x double> %56, %62
  %64 = fadd <4 x double> %63, %60
  %65 = fmul <4 x double> %21, %61
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %21, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %21, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %27, <4 x double> %68) #6
  %70 = fadd <4 x double> %65, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <4 x double> %65, %71
  %73 = fadd <4 x double> %72, %69
  %74 = fmul <4 x double> %33, %47
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %47, <4 x double> %75) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %47, <4 x double> %76) #6
  %78 = fadd <4 x double> %70, %74
  %79 = fsub <4 x double> %70, %78
  %80 = fadd <4 x double> %74, %79
  %81 = fadd <4 x double> %80, %73
  %82 = fadd <4 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add nsw <4 x i32> %83, <i32 1023, i32 1023, i32 1023, i32 1023>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %86 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %87 = and <4 x i32> %85, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = and <4 x i32> %86, <i32 0, i32 -1, i32 0, i32 -1>
  %90 = shl <4 x i32> %89, <i32 20, i32 20, i32 20, i32 20>
  %91 = bitcast <4 x i32> %88 to <2 x i64>
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = fmul <4 x double> %78, %96
  %98 = sub <4 x i32> %11, %83
  %99 = add <4 x i32> %98, <i32 1023, i32 1023, i32 1023, i32 1023>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %101 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %102 = and <4 x i32> %100, <i32 0, i32 -1, i32 0, i32 -1>
  %103 = shl <4 x i32> %102, <i32 20, i32 20, i32 20, i32 20>
  %104 = and <4 x i32> %101, <i32 0, i32 -1, i32 0, i32 -1>
  %105 = shl <4 x i32> %104, <i32 20, i32 20, i32 20, i32 20>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <4 x double>
  %112 = fmul <4 x double> %97, %111
  %113 = fmul <4 x double> %82, %96
  %114 = fmul <4 x double> %113, %111
  %115 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %116 = bitcast <4 x double> %115 to <4 x i64>
  %117 = bitcast <4 x double> %112 to <4 x i64>
  %118 = xor <4 x i64> %116, <i64 -1, i64 -1, i64 -1, i64 -1>
  %119 = and <4 x i64> %118, %117
  %120 = bitcast <4 x double> %114 to <4 x i64>
  %121 = and <4 x i64> %120, %118
  %122 = bitcast <4 x i64> %119 to <4 x double>
  %123 = bitcast <4 x i64> %121 to <4 x double>
  %124 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %125 = load <4 x double>, <4 x double>* %124, align 32
  %126 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %127 = load <4 x double>, <4 x double>* %126, align 32
  %128 = fmul <4 x double> %125, %122
  %129 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %128
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %125, <4 x double> %129) #6
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %125, <4 x double> %130) #6
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %127, <4 x double> %131) #6
  %133 = fadd <4 x double> %128, %132
  %134 = fcmp oeq <4 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>
  %135 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %136 = bitcast <4 x double> %135 to <4 x i64>
  %137 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  %138 = fcmp oeq <4 x double> %137, %0
  %139 = select <4 x i1> %138, <4 x i64> %136, <4 x i64> zeroinitializer
  %140 = select <4 x i1> %134, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %139
  %141 = bitcast <4 x double> %0 to <4 x i64>
  %142 = and <4 x i64> %141, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %143 = bitcast <4 x i64> %142 to <4 x double>
  %144 = fcmp une <4 x double> %143, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %145 = fcmp ord <4 x double> %0, zeroinitializer
  %146 = and <4 x i1> %144, %145
  %147 = fcmp uno <4 x double> %133, zeroinitializer
  %148 = and <4 x i1> %147, %146
  %149 = select <4 x i1> %148, <4 x i64> %136, <4 x i64> zeroinitializer
  %150 = or <4 x i64> %140, %149
  %151 = bitcast <4 x i64> %150 to <4 x double>
  %152 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %151) #6
  %153 = fcmp oeq <4 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %154 = or <4 x i1> %146, %153
  %155 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000>, i8 29) #6
  %156 = bitcast <4 x double> %155 to <4 x i64>
  %157 = select <4 x i1> %154, <4 x i64> %156, <4 x i64> zeroinitializer
  %158 = fcmp oeq <4 x double> %0, zeroinitializer
  %159 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 2.000000e+02, double 2.000000e+02, double 2.000000e+02, double 2.000000e+02>, i8 30) #6
  %160 = bitcast <4 x double> %159 to <4 x i64>
  %161 = fcmp uno <4 x double> %152, zeroinitializer
  %162 = or <4 x i1> %161, %158
  %163 = select <4 x i1> %162, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %160
  %164 = and <4 x i64> %163, %157
  %165 = and <4 x i64> %141, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = or <4 x i64> %165, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %167 = bitcast <4 x i64> %166 to <4 x double>
  %168 = bitcast <4 x i64> %164 to <4 x double>
  %169 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %152, <4 x double> %167, <4 x double> %168) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  ret <4 x double> %169
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, <4 x double>) unnamed_addr #2 {
  %3 = bitcast <4 x double> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double 1.000000e-306, double 1.000000e-306, double 1.000000e-306, double 1.000000e-306>, i8 17) #6
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, i8 17) #6
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = xor <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %10 = bitcast <4 x i64> %9 to <4 x double>
  %11 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = fadd <4 x double> %11, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %13 = fsub <4 x double> %11, %12
  %14 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = fsub <4 x double> %10, %12
  %16 = fadd <4 x double> %15, %14
  %17 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %1, <4 x double> %11, <4 x double> %7) #6
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %7) #6
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %6) #6
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> zeroinitializer, <4 x double> %6) #6
  %21 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %19, i8 18) #6
  %22 = bitcast <4 x double> %21 to <4 x i64>
  %23 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %19, <4 x double> <double 1.100000e+00, double 1.100000e+00, double 1.100000e+00, double 1.100000e+00>, i8 18) #6
  %24 = bitcast <4 x double> %23 to <4 x i64>
  %25 = and <4 x i64> %24, %22
  %26 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> <double 2.300000e+00, double 2.300000e+00, double 2.300000e+00, double 2.300000e+00>, <4 x double> %19, i8 18) #6
  %27 = bitcast <4 x double> %26 to <4 x i64>
  %28 = fadd <4 x double> %19, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <4 x double> %28, %19
  %30 = fsub <4 x double> %28, %29
  %31 = fsub <4 x double> %19, %30
  %32 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %29
  %33 = fadd <4 x double> %32, %31
  %34 = fadd <4 x double> %20, %33
  %35 = fmul <4 x double> %19, %28
  %36 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %19, <4 x double> %36) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %19, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %20, <4 x double> %38) #6
  %40 = fadd <4 x double> %35, %39
  %41 = fsub <4 x double> %35, %40
  %42 = fadd <4 x double> %39, %41
  %43 = fadd <4 x double> %19, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %44 = fsub <4 x double> %43, %19
  %45 = fsub <4 x double> %43, %44
  %46 = fsub <4 x double> %19, %45
  %47 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %44
  %48 = fadd <4 x double> %47, %46
  %49 = fadd <4 x double> %20, %48
  %50 = fmul <4 x double> %43, %40
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %40, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %40, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %43, <4 x double> %42, <4 x double> %53) #6
  %55 = fadd <4 x double> %50, %54
  %56 = fsub <4 x double> %50, %55
  %57 = fadd <4 x double> %54, %56
  %58 = fadd <4 x double> %19, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %59 = fsub <4 x double> %58, %19
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %19, %60
  %62 = fsub <4 x double> <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %20, %63
  %65 = fmul <4 x double> %58, %55
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %55, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %55, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %57, <4 x double> %68) #6
  %70 = fadd <4 x double> %65, %69
  %71 = fsub <4 x double> %65, %70
  %72 = fadd <4 x double> %69, %71
  %73 = fadd <4 x double> %19, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %74 = fsub <4 x double> %73, %19
  %75 = fsub <4 x double> %73, %74
  %76 = fsub <4 x double> %19, %75
  %77 = fsub <4 x double> <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>, %74
  %78 = fadd <4 x double> %77, %76
  %79 = fadd <4 x double> %20, %78
  %80 = fmul <4 x double> %73, %70
  %81 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %80
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %70, <4 x double> %81) #6
  %83 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %79, <4 x double> %70, <4 x double> %82) #6
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %72, <4 x double> %83) #6
  %85 = fadd <4 x double> %80, %84
  %86 = fsub <4 x double> %80, %85
  %87 = fadd <4 x double> %84, %86
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %19, <4 x double> <double 7.000000e+00, double 7.000000e+00, double 7.000000e+00, double 7.000000e+00>, i8 18) #6
  %89 = bitcast <4 x double> %88 to <4 x i64>
  %90 = and <4 x i64> %89, %27
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %85, <4 x double> %91) #6
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %87, <4 x double> %91) #6
  %94 = fadd <4 x double> %19, <double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00>
  %95 = fsub <4 x double> %94, %19
  %96 = fsub <4 x double> %94, %95
  %97 = fsub <4 x double> %19, %96
  %98 = fsub <4 x double> <double 5.000000e+00, double 5.000000e+00, double 5.000000e+00, double 5.000000e+00>, %95
  %99 = fadd <4 x double> %98, %97
  %100 = fadd <4 x double> %20, %99
  %101 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %19, <4 x double> %94, <4 x double> %91) #6
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %100, <4 x double> %91) #6
  %103 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %101
  %104 = bitcast <4 x i64> %25 to <4 x double>
  %105 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double -2.000000e+00, double -2.000000e+00, double -2.000000e+00, double -2.000000e+00>, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %104) #6
  %106 = fadd <4 x double> %101, %105
  %107 = fsub <4 x double> %106, %101
  %108 = fsub <4 x double> %106, %107
  %109 = fsub <4 x double> %101, %108
  %110 = fsub <4 x double> %105, %107
  %111 = fadd <4 x double> %110, %109
  %112 = fadd <4 x double> %102, %111
  %113 = fadd <4 x double> %106, %112
  %114 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %113, <4 x double> %103, <4 x double> %26) #6
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E72FDC6CB0D558F, double 0x3E72FDC6CB0D558F, double 0x3E72FDC6CB0D558F, double 0x3E72FDC6CB0D558F>, <4 x double> <double 0x403D7AAABC7A3EA1, double 0x403D7AAABC7A3EA1, double 0x403D7AAABC7A3EA1, double 0x403D7AAABC7A3EA1>, <4 x double> %104) #6
  %116 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %115, <4 x double> <double 0xC06399A52C414C0D, double 0xC06399A52C414C0D, double 0xC06399A52C414C0D, double 0xC06399A52C414C0D>, <4 x double> %26) #6
  %117 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E9AE7D44E1AB8F6, double 0x3E9AE7D44E1AB8F6, double 0x3E9AE7D44E1AB8F6, double 0x3E9AE7D44E1AB8F6>, <4 x double> <double 0x406004ABC79048B9, double 0x406004ABC79048B9, double 0x406004ABC79048B9, double 0x406004ABC79048B9>, <4 x double> %104) #6
  %118 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %117, <4 x double> <double 0x3FF1EED0A9756022, double 0x3FF1EED0A9756022, double 0x3FF1EED0A9756022, double 0x3FF1EED0A9756022>, <4 x double> %26) #6
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %116, <4 x double> %114, <4 x double> %118) #6
  %120 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EB1734224875A66, double 0x3EB1734224875A66, double 0x3EB1734224875A66, double 0x3EB1734224875A66>, <4 x double> <double 0x40705C120870277A, double 0x40705C120870277A, double 0x40705C120870277A, double 0x40705C120870277A>, <4 x double> %104) #6
  %121 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %120, <4 x double> <double 0x402ACBC4BFE43E00, double 0x402ACBC4BFE43E00, double 0x402ACBC4BFE43E00, double 0x402ACBC4BFE43E00>, <4 x double> %26) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %119, <4 x double> %114, <4 x double> %121) #6
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EB94E4F6E12FEE0, double 0x3EB94E4F6E12FEE0, double 0x3EB94E4F6E12FEE0, double 0x3EB94E4F6E12FEE0>, <4 x double> <double 0x40748B3C8FCAD7FF, double 0x40748B3C8FCAD7FF, double 0x40748B3C8FCAD7FF, double 0x40748B3C8FCAD7FF>, <4 x double> %104) #6
  %124 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %123, <4 x double> <double 0xBFBDD5FA0E771B94, double 0xBFBDD5FA0E771B94, double 0xBFBDD5FA0E771B94, double 0xBFBDD5FA0E771B94>, <4 x double> %26) #6
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %114, <4 x double> %124) #6
  %126 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EB59C884A045AF0, double 0x3EB59C884A045AF0, double 0x3EB59C884A045AF0, double 0x3EB59C884A045AF0>, <4 x double> <double 0x40719D088C23DF05, double 0x40719D088C23DF05, double 0x40719D088C23DF05, double 0x40719D088C23DF05>, <4 x double> %104) #6
  %127 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %126, <4 x double> <double 0xBFF644D13921C967, double 0xBFF644D13921C967, double 0xBFF644D13921C967, double 0xBFF644D13921C967>, <4 x double> %26) #6
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %125, <4 x double> %114, <4 x double> %127) #6
  %129 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E9FD66B0AC39DFF, double 0x3E9FD66B0AC39DFF, double 0x3E9FD66B0AC39DFF, double 0x3E9FD66B0AC39DFF>, <4 x double> <double 0x40659BBECDBF523B, double 0x40659BBECDBF523B, double 0x40659BBECDBF523B, double 0x40659BBECDBF523B>, <4 x double> %104) #6
  %130 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %129, <4 x double> <double 0x3F8ED5BD48E4F389, double 0x3F8ED5BD48E4F389, double 0x3F8ED5BD48E4F389, double 0x3F8ED5BD48E4F389>, <4 x double> %26) #6
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %114, <4 x double> %130) #6
  %132 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE71986F7AC19AC9, double 0xBE71986F7AC19AC9, double 0xBE71986F7AC19AC9, double 0xBE71986F7AC19AC9>, <4 x double> <double 0x40535F30DE19A3FA, double 0x40535F30DE19A3FA, double 0x40535F30DE19A3FA, double 0x40535F30DE19A3FA>, <4 x double> %104) #6
  %133 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %132, <4 x double> <double 0x3FC6FB2BA98C8BC4, double 0x3FC6FB2BA98C8BC4, double 0x3FC6FB2BA98C8BC4, double 0x3FC6FB2BA98C8BC4>, <4 x double> %26) #6
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %114, <4 x double> %133) #6
  %135 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE956718120CF4B7, double 0xBE956718120CF4B7, double 0xBE956718120CF4B7, double 0xBE956718120CF4B7>, <4 x double> <double 0x403920E9BAC7B07E, double 0x403920E9BAC7B07E, double 0x403920E9BAC7B07E, double 0x403920E9BAC7B07E>, <4 x double> %104) #6
  %136 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %135, <4 x double> <double 0xBF645497F334CD1D, double 0xBF645497F334CD1D, double 0xBF645497F334CD1D, double 0xBF645497F334CD1D>, <4 x double> %26) #6
  %137 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %134, <4 x double> %114, <4 x double> %136) #6
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E823D16D999C674, double 0x3E823D16D999C674, double 0x3E823D16D999C674, double 0x3E823D16D999C674>, <4 x double> <double 0x40171131F32ACF74, double 0x40171131F32ACF74, double 0x40171131F32ACF74, double 0x40171131F32ACF74>, <4 x double> %104) #6
  %139 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> <double 0xBF9E3C8E8BED86BB, double 0xBF9E3C8E8BED86BB, double 0xBF9E3C8E8BED86BB, double 0xBF9E3C8E8BED86BB>, <4 x double> %26) #6
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %137, <4 x double> %114, <4 x double> %139) #6
  %141 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE9D26D12E073976, double 0xBE9D26D12E073976, double 0xBE9D26D12E073976, double 0xBE9D26D12E073976>, <4 x double> <double 0x3FE743CF466BEB1B, double 0x3FE743CF466BEB1B, double 0x3FE743CF466BEB1B, double 0x3FE743CF466BEB1B>, <4 x double> %104) #6
  %142 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %141, <4 x double> <double 0x3F41B33B019B3E6F, double 0x3F41B33B019B3E6F, double 0x3F41B33B019B3E6F, double 0x3F41B33B019B3E6F>, <4 x double> %26) #6
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %114, <4 x double> %142) #6
  %144 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EB050C384661C46, double 0x3EB050C384661C46, double 0x3EB050C384661C46, double 0x3EB050C384661C46>, <4 x double> <double 0x3FB57EDE06D746AF, double 0x3FB57EDE06D746AF, double 0x3FB57EDE06D746AF, double 0x3FB57EDE06D746AF>, <4 x double> %104) #6
  %145 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %144, <4 x double> <double 0x3F7A3A699F4A401B, double 0x3F7A3A699F4A401B, double 0x3F7A3A699F4A401B, double 0x3F7A3A699F4A401B>, <4 x double> %26) #6
  %146 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %143, <4 x double> %114, <4 x double> %145) #6
  %147 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBEC1162DF3C28D5A, double 0xBEC1162DF3C28D5A, double 0xBEC1162DF3C28D5A, double 0xBEC1162DF3C28D5A>, <4 x double> <double 0xBFB50586EF5B83AC, double 0xBFB50586EF5B83AC, double 0xBFB50586EF5B83AC, double 0xBFB50586EF5B83AC>, <4 x double> %104) #6
  %148 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %147, <4 x double> <double 0xBF254D241144693F, double 0xBF254D241144693F, double 0xBF254D241144693F, double 0xBF254D241144693F>, <4 x double> %26) #6
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %146, <4 x double> %114, <4 x double> %148) #6
  %150 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3ED257DCE81F6BB4, double 0x3ED257DCE81F6BB4, double 0x3ED257DCE81F6BB4, double 0x3ED257DCE81F6BB4>, <4 x double> <double 0x3FB17B57DDB9E32F, double 0x3FB17B57DDB9E32F, double 0x3FB17B57DDB9E32F, double 0x3FB17B57DDB9E32F>, <4 x double> %104) #6
  %151 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %150, <4 x double> <double 0xBF5F5DBCAF756CDE, double 0xBF5F5DBCAF756CDE, double 0xBF5F5DBCAF756CDE, double 0xBF5F5DBCAF756CDE>, <4 x double> %26) #6
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %114, <4 x double> %151) #6
  %153 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBEE3CC0905ECA8BE, double 0xBEE3CC0905ECA8BE, double 0xBEE3CC0905ECA8BE, double 0xBEE3CC0905ECA8BE>, <4 x double> <double 0xBFB3BE73A742EECE, double 0xBFB3BE73A742EECE, double 0xBFB3BE73A742EECE, double 0xBFB3BE73A742EECE>, <4 x double> %104) #6
  %154 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %153, <4 x double> <double 0x3F12E31F9B7913EA, double 0x3F12E31F9B7913EA, double 0x3F12E31F9B7913EA, double 0x3F12E31F9B7913EA>, <4 x double> %26) #6
  %155 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %152, <4 x double> %114, <4 x double> %154) #6
  %156 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EF580E0E2726AC9, double 0x3EF580E0E2726AC9, double 0x3EF580E0E2726AC9, double 0x3EF580E0E2726AC9>, <4 x double> <double 0x3FB5580F0BB1F8CA, double 0x3FB5580F0BB1F8CA, double 0x3FB5580F0BB1F8CA, double 0x3FB5580F0BB1F8CA>, <4 x double> %104) #6
  %157 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %156, <4 x double> <double 0x3F4B8239C670E690, double 0x3F4B8239C670E690, double 0x3F4B8239C670E690, double 0x3F4B8239C670E690>, <4 x double> %26) #6
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> %114, <4 x double> %157) #6
  %159 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF078DE48A7816D9, double 0xBF078DE48A7816D9, double 0xBF078DE48A7816D9, double 0xBF078DE48A7816D9>, <4 x double> <double 0xBFB74879E96382CA, double 0xBFB74879E96382CA, double 0xBFB74879E96382CA, double 0xBFB74879E96382CA>, <4 x double> %104) #6
  %160 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %159, <4 x double> <double 0xBF0B1D75D3346711, double 0xBF0B1D75D3346711, double 0xBF0B1D75D3346711, double 0xBF0B1D75D3346711>, <4 x double> %26) #6
  %161 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %158, <4 x double> %114, <4 x double> %160) #6
  %162 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F1A127B0D3DBB7D, double 0x3F1A127B0D3DBB7D, double 0x3F1A127B0D3DBB7D, double 0x3F1A127B0D3DBB7D>, <4 x double> <double 0x3FB9A0212305C3B9, double 0x3FB9A0212305C3B9, double 0x3FB9A0212305C3B9, double 0x3FB9A0212305C3B9>, <4 x double> %104) #6
  %163 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %162, <4 x double> <double 0xBF436773BDB97B48, double 0xBF436773BDB97B48, double 0xBF436773BDB97B48, double 0xBF436773BDB97B48>, <4 x double> %26) #6
  %164 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %161, <4 x double> %114, <4 x double> %163) #6
  %165 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF2D3FD4CA9D6B1F, double 0xBF2D3FD4CA9D6B1F, double 0xBF2D3FD4CA9D6B1F, double 0xBF2D3FD4CA9D6B1F>, <4 x double> <double 0xBFBC80675DF4ED19, double 0xBFBC80675DF4ED19, double 0xBFBC80675DF4ED19, double 0xBFBC80675DF4ED19>, <4 x double> %104) #6
  %166 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %165, <4 x double> <double 0x3F1247604839C038, double 0x3F1247604839C038, double 0x3F1247604839C038, double 0x3F1247604839C038>, <4 x double> %26) #6
  %167 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %164, <4 x double> %114, <4 x double> %166) #6
  %168 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F40B36AF85EF785, double 0x3F40B36AF85EF785, double 0x3F40B36AF85EF785, double 0x3F40B36AF85EF785>, <4 x double> <double 0x3FC010B3663D08D8, double 0x3FC010B3663D08D8, double 0x3FC010B3663D08D8, double 0x3FC010B3663D08D8>, <4 x double> %104) #6
  %169 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %168, <4 x double> <double 0x3F49B0FF6874F2C4, double 0x3F49B0FF6874F2C4, double 0x3F49B0FF6874F2C4, double 0x3F49B0FF6874F2C4>, <4 x double> %26) #6
  %170 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %167, <4 x double> %114, <4 x double> %169) #6
  %171 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF538AC5C2BD10CA, double 0xBF538AC5C2BD10CA, double 0xBF538AC5C2BD10CA, double 0xBF538AC5C2BD10CA>, <4 x double> <double 0xBFC2703A1DD72363, double 0xBFC2703A1DD72363, double 0xBFC2703A1DD72363, double 0xBFC2703A1DD72363>, <4 x double> %104) #6
  %172 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %171, <4 x double> <double 0xBF2E13CE465FA859, double 0xBF2E13CE465FA859, double 0xBF2E13CE465FA859, double 0xBF2E13CE465FA859>, <4 x double> %26) #6
  %173 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %170, <4 x double> %114, <4 x double> %172) #6
  %174 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F67ADD6EADB7260, double 0x3F67ADD6EADB7260, double 0x3F67ADD6EADB7260, double 0x3F67ADD6EADB7260>, <4 x double> <double 0x3FC5B40CB1047E2E, double 0x3FC5B40CB1047E2E, double 0x3FC5B40CB1047E2E, double 0x3FC5B40CB1047E2E>, <4 x double> %104) #6
  %175 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %174, <4 x double> <double 0xBF65F7268EDAB4C8, double 0xBF65F7268EDAB4C8, double 0xBF65F7268EDAB4C8, double 0xBF65F7268EDAB4C8>, <4 x double> %26) #6
  %176 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %173, <4 x double> %114, <4 x double> %175) #6
  %177 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF7E404FC218F817, double 0xBF7E404FC218F817, double 0xBF7E404FC218F817, double 0xBF7E404FC218F817>, <4 x double> <double 0xBFCA8B9C17AA3C08, double 0xBFCA8B9C17AA3C08, double 0xBFCA8B9C17AA3C08, double 0xBFCA8B9C17AA3C08>, <4 x double> %104) #6
  %178 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %177, <4 x double> <double 0x3F6C71C71C71C71C, double 0x3F6C71C71C71C71C, double 0x3F6C71C71C71C71C, double 0x3F6C71C71C71C71C>, <4 x double> %26) #6
  %179 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %176, <4 x double> %114, <4 x double> %178) #6
  %180 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F951322AC7D8485, double 0x3F951322AC7D8485, double 0x3F951322AC7D8485, double 0x3F951322AC7D8485>, <4 x double> <double 0x3FD151322AC7D813, double 0x3FD151322AC7D813, double 0x3FD151322AC7D813, double 0x3FD151322AC7D813>, <4 x double> %104) #6
  %181 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %180, <4 x double> <double 0x3FB5555555555555, double 0x3FB5555555555555, double 0x3FB5555555555555, double 0x3FB5555555555555>, <4 x double> %26) #6
  %182 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %179, <4 x double> %114, <4 x double> %181) #6
  %183 = fadd <4 x double> %101, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %184 = fsub <4 x double> %183, %101
  %185 = fsub <4 x double> %183, %184
  %186 = fsub <4 x double> %101, %185
  %187 = fsub <4 x double> <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>, %184
  %188 = fadd <4 x double> %187, %186
  %189 = fadd <4 x double> %102, %188
  %190 = fmul <4 x double> %101, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %191 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %190, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %192 = bitcast <4 x double> %191 to <4 x i64>
  %193 = fmul <4 x double> %190, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %194 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %190, <4 x double> %193, <4 x double> %191) #6
  %195 = bitcast <4 x double> %194 to <4 x i64>
  %196 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %198 = bitcast <2 x i64> %196 to <4 x i32>
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %200 = bitcast <4 x i32> %199 to <2 x i64>
  %201 = bitcast <2 x i64> %197 to <4 x i32>
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = shufflevector <2 x i64> %203, <2 x i64> %200, <2 x i32> <i32 2, i32 1>
  %205 = bitcast <2 x i64> %204 to <4 x i32>
  %206 = lshr <4 x i32> %205, <i32 20, i32 20, i32 20, i32 20>
  %207 = and <4 x i64> %192, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %208 = bitcast <4 x i64> %207 to <4 x double>
  %209 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %208) #6
  %210 = bitcast <4 x i32> %209 to <16 x i8>
  %211 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %210) #6
  %212 = bitcast <16 x i8> %211 to <4 x i32>
  %213 = sub <4 x i32> %206, %212
  %214 = sub <4 x i32> zeroinitializer, %213
  %215 = ashr <4 x i32> %214, <i32 1, i32 1, i32 1, i32 1>
  %216 = add nsw <4 x i32> %215, <i32 1023, i32 1023, i32 1023, i32 1023>
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %218 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %219 = and <4 x i32> %217, <i32 0, i32 -1, i32 0, i32 -1>
  %220 = shl <4 x i32> %219, <i32 20, i32 20, i32 20, i32 20>
  %221 = and <4 x i32> %218, <i32 0, i32 -1, i32 0, i32 -1>
  %222 = shl <4 x i32> %221, <i32 20, i32 20, i32 20, i32 20>
  %223 = bitcast <4 x i32> %220 to <2 x i64>
  %224 = bitcast <4 x i32> %222 to <2 x i64>
  %225 = shufflevector <2 x i64> %223, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %226 = shufflevector <2 x i64> %224, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %227 = shufflevector <4 x i64> %225, <4 x i64> %226, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %228 = bitcast <4 x i64> %227 to <4 x double>
  %229 = fmul <4 x double> %101, %228
  %230 = sub <4 x i32> %214, %215
  %231 = add <4 x i32> %230, <i32 1023, i32 1023, i32 1023, i32 1023>
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %233 = shufflevector <4 x i32> %231, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %234 = and <4 x i32> %232, <i32 0, i32 -1, i32 0, i32 -1>
  %235 = shl <4 x i32> %234, <i32 20, i32 20, i32 20, i32 20>
  %236 = and <4 x i32> %233, <i32 0, i32 -1, i32 0, i32 -1>
  %237 = shl <4 x i32> %236, <i32 20, i32 20, i32 20, i32 20>
  %238 = bitcast <4 x i32> %235 to <2 x i64>
  %239 = bitcast <4 x i32> %237 to <2 x i64>
  %240 = shufflevector <2 x i64> %238, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %241 = shufflevector <2 x i64> %239, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %242 = shufflevector <4 x i64> %240, <4 x i64> %241, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %243 = bitcast <4 x i64> %242 to <4 x double>
  %244 = fmul <4 x double> %229, %243
  %245 = fmul <4 x double> %102, %228
  %246 = fmul <4 x double> %245, %243
  %247 = fadd <4 x double> %244, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %248 = fsub <4 x double> %247, %244
  %249 = fsub <4 x double> %247, %248
  %250 = fsub <4 x double> %244, %249
  %251 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %248
  %252 = fadd <4 x double> %251, %250
  %253 = fadd <4 x double> %246, %252
  %254 = fadd <4 x double> %244, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %255 = fsub <4 x double> %254, %244
  %256 = fsub <4 x double> %254, %255
  %257 = fsub <4 x double> %244, %256
  %258 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %255
  %259 = fadd <4 x double> %258, %257
  %260 = fadd <4 x double> %246, %259
  %261 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %254
  %262 = fmul <4 x double> %247, %261
  %263 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %262
  %264 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %261, <4 x double> %247, <4 x double> %263) #6
  %265 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %254
  %266 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %265, <4 x double> %261, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %267 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %260
  %268 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %267, <4 x double> %261, <4 x double> %266) #6
  %269 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %253, <4 x double> %261, <4 x double> %264) #6
  %270 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %262, <4 x double> %268, <4 x double> %269) #6
  %271 = fmul <4 x double> %262, %262
  %272 = fadd <4 x double> %262, %262
  %273 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %271
  %274 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %262, <4 x double> %262, <4 x double> %273) #6
  %275 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %272, <4 x double> %270, <4 x double> %274) #6
  %276 = fmul <4 x double> %271, %271
  %277 = fmul <4 x double> %276, %276
  %278 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %279 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %276, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %278) #6
  %280 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %281 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %282 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %276, <4 x double> %280, <4 x double> %281) #6
  %283 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %277, <4 x double> %279, <4 x double> %282) #6
  %284 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %283, <4 x double> %271, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %285 = sitofp <4 x i32> %213 to <4 x double>
  %286 = fmul <4 x double> %285, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %287 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %286
  %288 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %285, <4 x double> %287) #6
  %289 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %285, <4 x double> %288) #6
  %290 = fmul <4 x double> %262, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %291 = fmul <4 x double> %270, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %292 = fadd <4 x double> %286, %290
  %293 = fsub <4 x double> %286, %292
  %294 = fadd <4 x double> %290, %293
  %295 = fadd <4 x double> %289, %294
  %296 = fadd <4 x double> %291, %295
  %297 = fmul <4 x double> %262, %271
  %298 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %297
  %299 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> %262, <4 x double> %298) #6
  %300 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %275, <4 x double> %262, <4 x double> %299) #6
  %301 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %271, <4 x double> %270, <4 x double> %300) #6
  %302 = fmul <4 x double> %284, %297
  %303 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %302
  %304 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %297, <4 x double> %284, <4 x double> %303) #6
  %305 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %301, <4 x double> %284, <4 x double> %304) #6
  %306 = fadd <4 x double> %292, %302
  %307 = fsub <4 x double> %292, %306
  %308 = fadd <4 x double> %302, %307
  %309 = fadd <4 x double> %308, %296
  %310 = fadd <4 x double> %305, %309
  %311 = fmul <4 x double> %183, %306
  %312 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %311
  %313 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> %306, <4 x double> %312) #6
  %314 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %189, <4 x double> %306, <4 x double> %313) #6
  %315 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %183, <4 x double> %310, <4 x double> %314) #6
  %316 = bitcast <4 x double> %101 to <4 x i64>
  %317 = xor <4 x i64> %316, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %318 = bitcast <4 x double> %102 to <4 x i64>
  %319 = xor <4 x i64> %318, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %320 = bitcast <4 x i64> %317 to <4 x double>
  %321 = bitcast <4 x i64> %319 to <4 x double>
  %322 = fadd <4 x double> %311, %320
  %323 = fsub <4 x double> %322, %311
  %324 = fsub <4 x double> %322, %323
  %325 = fsub <4 x double> %311, %324
  %326 = fsub <4 x double> %320, %323
  %327 = fadd <4 x double> %326, %325
  %328 = fadd <4 x double> %315, %321
  %329 = fadd <4 x double> %328, %327
  %330 = fadd <4 x double> %322, <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>
  %331 = fsub <4 x double> %330, %322
  %332 = fsub <4 x double> %330, %331
  %333 = fsub <4 x double> %322, %332
  %334 = fsub <4 x double> <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>, %331
  %335 = fadd <4 x double> %334, %333
  %336 = fadd <4 x double> %329, <double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF>
  %337 = fadd <4 x double> %335, %336
  %338 = fmul <4 x double> %114, %182
  %339 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %338
  %340 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %182, <4 x double> %114, <4 x double> %339) #6
  %341 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFB13E001A557607, double 0xBFB13E001A557607, double 0xBFB13E001A557607, double 0xBFB13E001A557607>, <4 x double> <double 0xBFD9A4D55BEAB2D8, double 0xBFD9A4D55BEAB2D8, double 0xBFD9A4D55BEAB2D8, double 0xBFD9A4D55BEAB2D8>, <4 x double> %104) #6
  %342 = fadd <4 x double> %338, %341
  %343 = fsub <4 x double> %342, %338
  %344 = fsub <4 x double> %342, %343
  %345 = fsub <4 x double> %338, %344
  %346 = fsub <4 x double> %341, %343
  %347 = fadd <4 x double> %346, %345
  %348 = fadd <4 x double> %340, %347
  %349 = fmul <4 x double> %114, %342
  %350 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %349
  %351 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %342, <4 x double> %114, <4 x double> %350) #6
  %352 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %348, <4 x double> %114, <4 x double> %351) #6
  %353 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FD4A34CC4A60FA6, double 0x3FD4A34CC4A60FA6, double 0x3FD4A34CC4A60FA6, double 0x3FD4A34CC4A60FA6>, <4 x double> <double 0x3FEA51A6625307D3, double 0x3FEA51A6625307D3, double 0x3FEA51A6625307D3, double 0x3FEA51A6625307D3>, <4 x double> %104) #6
  %354 = fadd <4 x double> %349, %353
  %355 = fsub <4 x double> %354, %349
  %356 = fsub <4 x double> %354, %355
  %357 = fsub <4 x double> %349, %356
  %358 = fsub <4 x double> %353, %355
  %359 = fadd <4 x double> %358, %357
  %360 = fadd <4 x double> %352, %359
  %361 = fmul <4 x double> %114, %354
  %362 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %361
  %363 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %354, <4 x double> %114, <4 x double> %362) #6
  %364 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %360, <4 x double> %114, <4 x double> %363) #6
  %365 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FDB0EE6072093CE, double 0x3FDB0EE6072093CE, double 0x3FDB0EE6072093CE, double 0x3FDB0EE6072093CE>, <4 x double> <double 0xBFE2788CFC6FB619, double 0xBFE2788CFC6FB619, double 0xBFE2788CFC6FB619, double 0xBFE2788CFC6FB619>, <4 x double> %104) #6
  %366 = fadd <4 x double> %361, %365
  %367 = fsub <4 x double> %366, %361
  %368 = fsub <4 x double> %366, %367
  %369 = fsub <4 x double> %361, %368
  %370 = fsub <4 x double> %365, %367
  %371 = fadd <4 x double> %370, %369
  %372 = fadd <4 x double> %364, %371
  %373 = fmul <4 x double> %114, %366
  %374 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %373
  %375 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %366, <4 x double> %114, <4 x double> %374) #6
  %376 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %372, <4 x double> %114, <4 x double> %375) #6
  %377 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %373, <4 x double> %330, <4 x double> %26) #6
  %378 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %376, <4 x double> %337, <4 x double> %26) #6
  %379 = fadd <4 x double> %338, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %380 = fsub <4 x double> %379, %338
  %381 = fsub <4 x double> %379, %380
  %382 = fsub <4 x double> %338, %381
  %383 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %380
  %384 = fadd <4 x double> %383, %382
  %385 = fadd <4 x double> %384, %340
  %386 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %379, <4 x double> %26) #6
  %387 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %385, <4 x double> %26) #6
  %388 = bitcast <4 x double> %377 to <4 x i64>
  %389 = xor <4 x i64> %388, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %390 = bitcast <4 x double> %378 to <4 x i64>
  %391 = xor <4 x i64> %390, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %392 = bitcast <4 x i64> %389 to <4 x double>
  %393 = bitcast <4 x i64> %391 to <4 x double>
  %394 = fadd <4 x double> %392, <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>
  %395 = fadd <4 x double> %394, <double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD>
  %396 = fsub <4 x double> %394, %395
  %397 = fsub <4 x double> <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>, %396
  %398 = fsub <4 x double> %392, %395
  %399 = fadd <4 x double> %398, %397
  %400 = fadd <4 x double> %393, <double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088>
  %401 = fadd <4 x double> %400, %399
  %402 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %377, <4 x double> %394, <4 x double> %7) #6
  %403 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %378, <4 x double> %401, <4 x double> %7) #6
  %404 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %402, <4 x double> <double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650>, <4 x double> %6) #6
  %405 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %403, <4 x double> <double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E>, <4 x double> %6) #6
  %406 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %386, <4 x double> %92, <4 x double> %7) #6
  %407 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %387, <4 x double> %93, <4 x double> %7) #6
  %408 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %406, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %6) #6
  %409 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %407, <4 x double> zeroinitializer, <4 x double> %6) #6
  %410 = xor <4 x i64> %8, <i64 -1, i64 -1, i64 -1, i64 -1>
  %411 = shufflevector <4 x i64> %410, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %412 = shufflevector <4 x i64> %410, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %413 = and <2 x i64> %412, %411
  %414 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %413, <2 x i64> <i64 -1, i64 -1>) #6
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %507

; <label>:416:                                    ; preds = %2
  %417 = fmul <4 x double> %1, <double 0x3E30000000000000, double 0x3E30000000000000, double 0x3E30000000000000, double 0x3E30000000000000>
  %418 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %417) #6
  %419 = sitofp <4 x i32> %418 to <4 x double>
  %420 = fmul <4 x double> %419, <double 0x41B0000000000000, double 0x41B0000000000000, double 0x41B0000000000000, double 0x41B0000000000000>
  %421 = fsub <4 x double> %1, %420
  %422 = fmul <4 x double> %421, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %423 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %422) #6
  %424 = lshr <4 x i32> %423, <i32 31, i32 31, i32 31, i32 31>
  %425 = xor <4 x i32> %424, <i32 1, i32 1, i32 1, i32 1>
  %426 = add <4 x i32> %425, %423
  %427 = and <4 x i32> %426, <i32 2, i32 2, i32 2, i32 2>
  %428 = icmp ne <4 x i32> %427, zeroinitializer
  %429 = sitofp <4 x i1> %428 to <4 x double>
  %430 = fcmp oeq <4 x double> %429, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %431 = sext <4 x i1> %430 to <4 x i64>
  %432 = and <4 x i32> %426, <i32 -2, i32 -2, i32 -2, i32 -2>
  %433 = sitofp <4 x i32> %432 to <4 x double>
  %434 = fsub <4 x double> %422, %433
  %435 = fmul <4 x double> %434, %434
  %436 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %435
  %437 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %434, <4 x double> %434, <4 x double> %436) #6
  %438 = bitcast <4 x i64> %431 to <4 x double>
  %439 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %438) #6
  %440 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <4 x double> %438) #6
  %441 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %439, <4 x double> %435, <4 x double> %440) #6
  %442 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <4 x double> %438) #6
  %443 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %441, <4 x double> %435, <4 x double> %442) #6
  %444 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <4 x double> %438) #6
  %445 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %443, <4 x double> %435, <4 x double> %444) #6
  %446 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <4 x double> %438) #6
  %447 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %445, <4 x double> %435, <4 x double> %446) #6
  %448 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <4 x double> %438) #6
  %449 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %447, <4 x double> %435, <4 x double> %448) #6
  %450 = fmul <4 x double> %435, %449
  %451 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <4 x double> %438) #6
  %452 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>, <4 x double> <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>, <4 x double> %438) #6
  %453 = fadd <4 x double> %450, %451
  %454 = fsub <4 x double> %453, %450
  %455 = fsub <4 x double> %453, %454
  %456 = fsub <4 x double> %450, %455
  %457 = fsub <4 x double> %451, %454
  %458 = fadd <4 x double> %457, %456
  %459 = fadd <4 x double> %452, %458
  %460 = fmul <4 x double> %435, %453
  %461 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %460
  %462 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %435, <4 x double> %453, <4 x double> %461) #6
  %463 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %437, <4 x double> %453, <4 x double> %462) #6
  %464 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %435, <4 x double> %459, <4 x double> %463) #6
  %465 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <4 x double> %438) #6
  %466 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>, <4 x double> <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>, <4 x double> %438) #6
  %467 = fadd <4 x double> %460, %465
  %468 = fsub <4 x double> %467, %460
  %469 = fsub <4 x double> %467, %468
  %470 = fsub <4 x double> %460, %469
  %471 = fsub <4 x double> %465, %468
  %472 = fadd <4 x double> %471, %470
  %473 = fadd <4 x double> %464, %466
  %474 = fadd <4 x double> %473, %472
  %475 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %434, <4 x double> %435, <4 x double> %438) #6
  %476 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %437, <4 x double> %438) #6
  %477 = fmul <4 x double> %467, %475
  %478 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %477
  %479 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %467, <4 x double> %475, <4 x double> %478) #6
  %480 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %474, <4 x double> %475, <4 x double> %479) #6
  %481 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %467, <4 x double> %476, <4 x double> %480) #6
  %482 = fadd <4 x double> %477, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %483 = fsub <4 x double> %482, %477
  %484 = fsub <4 x double> %482, %483
  %485 = fsub <4 x double> %477, %484
  %486 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %483
  %487 = fadd <4 x double> %486, %485
  %488 = fadd <4 x double> %481, %487
  %489 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %477, <4 x double> %482, <4 x double> %438) #6
  %490 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %481, <4 x double> %488, <4 x double> %438) #6
  %491 = and <4 x i32> %426, <i32 4, i32 4, i32 4, i32 4>
  %492 = icmp ne <4 x i32> %491, zeroinitializer
  %493 = sitofp <4 x i1> %492 to <4 x double>
  %494 = fcmp oeq <4 x double> %493, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %495 = select <4 x i1> %494, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %496 = bitcast <4 x double> %489 to <4 x i64>
  %497 = xor <4 x i64> %495, %496
  %498 = bitcast <4 x double> %490 to <4 x i64>
  %499 = xor <4 x i64> %495, %498
  %500 = bitcast <4 x i64> %497 to <4 x double>
  %501 = bitcast <4 x i64> %499 to <4 x double>
  %502 = fmul <4 x double> %386, %500
  %503 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %502
  %504 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %386, <4 x double> %500, <4 x double> %503) #6
  %505 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %387, <4 x double> %500, <4 x double> %504) #6
  %506 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %386, <4 x double> %501, <4 x double> %505) #6
  br label %507

; <label>:507:                                    ; preds = %2, %416
  %508 = phi <4 x double> [ %502, %416 ], [ %101, %2 ]
  %509 = phi <4 x double> [ %506, %416 ], [ %102, %2 ]
  %510 = fmul <4 x double> %1, <double 0x4770000000000000, double 0x4770000000000000, double 0x4770000000000000, double 0x4770000000000000>
  %511 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %92, <4 x double> %508, <4 x double> %7) #6
  %512 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %93, <4 x double> %509, <4 x double> %7) #6
  %513 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %511, <4 x double> %510, <4 x double> %6) #6
  %514 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %512, <4 x double> zeroinitializer, <4 x double> %6) #6
  %515 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %513
  %516 = fmul <4 x double> %408, %515
  %517 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %516
  %518 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %515, <4 x double> %408, <4 x double> %517) #6
  %519 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %513
  %520 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %519, <4 x double> %515, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %521 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %514
  %522 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %521, <4 x double> %515, <4 x double> %520) #6
  %523 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %409, <4 x double> %515, <4 x double> %518) #6
  %524 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %516, <4 x double> %522, <4 x double> %523) #6
  %525 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store <4 x double> %404, <4 x double>* %525, align 32
  %526 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store <4 x double> %405, <4 x double>* %526, align 32
  %527 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store <4 x double> %516, <4 x double>* %527, align 32
  %528 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store <4 x double> %524, <4 x double>* %528, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_lgammad4_u10fma4(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x double>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <4 x double>
  %14 = bitcast <4 x i64> %12 to <4 x double>
  %15 = fmul <4 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %17 = bitcast <4 x double> %16 to <4 x i64>
  %18 = fmul <4 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> %18, <4 x double> %16) #6
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %21 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %22 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %28, <2 x i64> %25, <2 x i32> <i32 2, i32 1>
  %30 = bitcast <2 x i64> %29 to <4 x i32>
  %31 = lshr <4 x i32> %30, <i32 20, i32 20, i32 20, i32 20>
  %32 = and <4 x i64> %17, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %33) #6
  %35 = bitcast <4 x i32> %34 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %35) #6
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = sub <4 x i32> %31, %37
  %39 = sub <4 x i32> zeroinitializer, %38
  %40 = ashr <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %41 = add nsw <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %44 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <4 x double>
  %54 = fmul <4 x double> %13, %53
  %55 = sub <4 x i32> %39, %40
  %56 = add <4 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %58 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %59 = and <4 x i32> %57, <i32 0, i32 -1, i32 0, i32 -1>
  %60 = shl <4 x i32> %59, <i32 20, i32 20, i32 20, i32 20>
  %61 = and <4 x i32> %58, <i32 0, i32 -1, i32 0, i32 -1>
  %62 = shl <4 x i32> %61, <i32 20, i32 20, i32 20, i32 20>
  %63 = bitcast <4 x i32> %60 to <2 x i64>
  %64 = bitcast <4 x i32> %62 to <2 x i64>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = fmul <4 x double> %54, %68
  %70 = fmul <4 x double> %14, %53
  %71 = fmul <4 x double> %70, %68
  %72 = fadd <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %73 = fsub <4 x double> %72, %69
  %74 = fsub <4 x double> %72, %73
  %75 = fsub <4 x double> %69, %74
  %76 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %73
  %77 = fadd <4 x double> %76, %75
  %78 = fadd <4 x double> %71, %77
  %79 = fadd <4 x double> %69, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %80 = fsub <4 x double> %79, %69
  %81 = fsub <4 x double> %79, %80
  %82 = fsub <4 x double> %69, %81
  %83 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %80
  %84 = fadd <4 x double> %83, %82
  %85 = fadd <4 x double> %71, %84
  %86 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %79
  %87 = fmul <4 x double> %72, %86
  %88 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %72, <4 x double> %88) #6
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %79
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %86, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %92 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %85
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %86, <4 x double> %91) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %86, <4 x double> %89) #6
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %93, <4 x double> %94) #6
  %96 = fmul <4 x double> %87, %87
  %97 = fadd <4 x double> %87, %87
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %87, <4 x double> %98) #6
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %95, <4 x double> %99) #6
  %101 = fmul <4 x double> %96, %96
  %102 = fmul <4 x double> %101, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %103) #6
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %106 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %105, <4 x double> %106) #6
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %104, <4 x double> %107) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %96, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %110 = sitofp <4 x i32> %38 to <4 x double>
  %111 = fmul <4 x double> %110, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %110, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %110, <4 x double> %113) #6
  %115 = fmul <4 x double> %87, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %116 = fmul <4 x double> %95, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %117 = fadd <4 x double> %111, %115
  %118 = fsub <4 x double> %111, %117
  %119 = fadd <4 x double> %115, %118
  %120 = fadd <4 x double> %114, %119
  %121 = fadd <4 x double> %116, %120
  %122 = fmul <4 x double> %87, %96
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %87, <4 x double> %123) #6
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %87, <4 x double> %124) #6
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %95, <4 x double> %125) #6
  %127 = fmul <4 x double> %109, %122
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %109, <4 x double> %128) #6
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %109, <4 x double> %129) #6
  %131 = fadd <4 x double> %117, %127
  %132 = fsub <4 x double> %117, %131
  %133 = fadd <4 x double> %127, %132
  %134 = fadd <4 x double> %133, %121
  %135 = fadd <4 x double> %130, %134
  %136 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %137 = load <4 x double>, <4 x double>* %136, align 32
  %138 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %139 = load <4 x double>, <4 x double>* %138, align 32
  %140 = fadd <4 x double> %137, %131
  %141 = fsub <4 x double> %140, %137
  %142 = fsub <4 x double> %140, %141
  %143 = fsub <4 x double> %137, %142
  %144 = fsub <4 x double> %131, %141
  %145 = fadd <4 x double> %144, %143
  %146 = fadd <4 x double> %139, %135
  %147 = fadd <4 x double> %146, %145
  %148 = fadd <4 x double> %140, %147
  %149 = bitcast <4 x double> %0 to <4 x i64>
  %150 = and <4 x i64> %149, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %151 = bitcast <4 x i64> %150 to <4 x double>
  %152 = fcmp oeq <4 x double> %151, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %153 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 18) #6
  %154 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  %155 = fcmp oeq <4 x double> %154, %0
  %156 = fcmp une <4 x double> %151, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %157 = fcmp ord <4 x double> %0, zeroinitializer
  %158 = and <4 x i1> %156, %157
  %159 = fcmp uno <4 x double> %148, zeroinitializer
  %160 = and <4 x i1> %158, %159
  %161 = or <4 x i1> %160, %152
  %162 = select <4 x i1> %155, <4 x double> %153, <4 x double> zeroinitializer
  %163 = select <4 x i1> %161, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %162
  %164 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %148, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %163) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  ret <4 x double> %164
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_erfd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #6
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 3.700000e+00, double 3.700000e+00, double 3.700000e+00, double 3.700000e+00>, i8 17) #6
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00>, i8 17) #6
  %8 = fmul <4 x double> %4, %4
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %8, <4 x double> %5) #6
  %10 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBC5AF69FE192740F, double 0xBC5AF69FE192740F, double 0xBC5AF69FE192740F, double 0xBC5AF69FE192740F>, <4 x double> <double 0x3D1FDFABBDFC43F1, double 0x3D1FDFABBDFC43F1, double 0x3D1FDFABBDFC43F1, double 0x3D1FDFABBDFC43F1>, <4 x double> %6) #6
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> <double 0x3BC00EFEFABE989B, double 0x3BC00EFEFABE989B, double 0x3BC00EFEFABE989B, double 0x3BC00EFEFABE989B>, <4 x double> %5) #6
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3CC5E4C21B562709, double 0x3CC5E4C21B562709, double 0x3CC5E4C21B562709, double 0x3CC5E4C21B562709>, <4 x double> <double 0xBD7A8E25B9CCCB64, double 0xBD7A8E25B9CCCB64, double 0xBD7A8E25B9CCCB64, double 0xBD7A8E25B9CCCB64>, <4 x double> %6) #6
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> <double 0xBC0FE6EC06B043F5, double 0xBC0FE6EC06B043F5, double 0xBC0FE6EC06B043F5, double 0xBC0FE6EC06B043F5>, <4 x double> %5) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %9, <4 x double> %13) #6
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBD20EE4A859274F9, double 0xBD20EE4A859274F9, double 0xBD20EE4A859274F9, double 0xBD20EE4A859274F9>, <4 x double> <double 0x3DC50B3AE48C7164, double 0x3DC50B3AE48C7164, double 0x3DC50B3AE48C7164, double 0x3DC50B3AE48C7164>, <4 x double> %6) #6
  %16 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> <double 0x3C55A7F67BDE0C17, double 0x3C55A7F67BDE0C17, double 0x3C55A7F67BDE0C17, double 0x3C55A7F67BDE0C17>, <4 x double> %5) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %9, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3D7095F3964F9BBA, double 0x3D7095F3964F9BBA, double 0x3D7095F3964F9BBA, double 0x3D7095F3964F9BBA>, <4 x double> <double 0xBE0518912B895660, double 0xBE0518912B895660, double 0xBE0518912B895660, double 0xBE0518912B895660>, <4 x double> %6) #6
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> <double 0xBC9A15164BF4F36C, double 0xBC9A15164BF4F36C, double 0xBC9A15164BF4F36C, double 0xBC9A15164BF4F36C>, <4 x double> %5) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %9, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBDB7174964833400, double 0xBDB7174964833400, double 0xBDB7174964833400, double 0xBDB7174964833400>, <4 x double> <double 0x3E3E0083E7FD4B05, double 0x3E3E0083E7FD4B05, double 0x3E3E0083E7FD4B05, double 0x3E3E0083E7FD4B05>, <4 x double> %6) #6
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %21, <4 x double> <double 0x3CDD6F95068FEEA8, double 0x3CDD6F95068FEEA8, double 0x3CDD6F95068FEEA8, double 0x3CDD6F95068FEEA8>, <4 x double> %5) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %9, <4 x double> %22) #6
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3DF84A341FC35F63, double 0x3DF84A341FC35F63, double 0x3DF84A341FC35F63, double 0x3DF84A341FC35F63>, <4 x double> <double 0xBE70131398DAE973, double 0xBE70131398DAE973, double 0xBE70131398DAE973, double 0xBE70131398DAE973>, <4 x double> %6) #6
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %24, <4 x double> <double 0xBD1F56D9FF51275A, double 0xBD1F56D9FF51275A, double 0xBD1F56D9FF51275A, double 0xBD1F56D9FF51275A>, <4 x double> %5) #6
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %9, <4 x double> %25) #6
  %27 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE34092FAEC3CB81, double 0xBE34092FAEC3CB81, double 0xBE34092FAEC3CB81, double 0xBE34092FAEC3CB81>, <4 x double> <double 0x3E9AE1C4F259778D, double 0x3E9AE1C4F259778D, double 0x3E9AE1C4F259778D, double 0x3E9AE1C4F259778D>, <4 x double> %6) #6
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 0x3D5F6839841402FB, double 0x3D5F6839841402FB, double 0x3D5F6839841402FB, double 0x3D5F6839841402FB>, <4 x double> %5) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %9, <4 x double> %28) #6
  %30 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E6A8ABD2DF8AA98, double 0x3E6A8ABD2DF8AA98, double 0x3E6A8ABD2DF8AA98, double 0x3E6A8ABD2DF8AA98>, <4 x double> <double 0xBEC1E2D7E8039AC0, double 0xBEC1E2D7E8039AC0, double 0xBEC1E2D7E8039AC0, double 0xBEC1E2D7E8039AC0>, <4 x double> %6) #6
  %31 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %30, <4 x double> <double 0xBD9D8453B9E7FD7B, double 0xBD9D8453B9E7FD7B, double 0xBD9D8453B9E7FD7B, double 0xBD9D8453B9E7FD7B>, <4 x double> %5) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %9, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBE9CA9DF1E6D3F55, double 0xBE9CA9DF1E6D3F55, double 0xBE9CA9DF1E6D3F55, double 0xBE9CA9DF1E6D3F55>, <4 x double> <double 0x3EE3117A5DB988BA, double 0x3EE3117A5DB988BA, double 0x3EE3117A5DB988BA, double 0x3EE3117A5DB988BA>, <4 x double> %6) #6
  %34 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> <double 0x3DD9E6AD5DAB7034, double 0x3DD9E6AD5DAB7034, double 0x3DD9E6AD5DAB7034, double 0x3DD9E6AD5DAB7034>, <4 x double> %5) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %9, <4 x double> %34) #6
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EC9739C586B056B, double 0x3EC9739C586B056B, double 0x3EC9739C586B056B, double 0x3EC9739C586B056B>, <4 x double> <double 0xBF0024D0F7EE3723, double 0xBF0024D0F7EE3723, double 0xBF0024D0F7EE3723, double 0xBF0024D0F7EE3723>, <4 x double> %6) #6
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %36, <4 x double> <double 0xBE151D7181C08B9D, double 0xBE151D7181C08B9D, double 0xBE151D7181C08B9D, double 0xBE151D7181C08B9D>, <4 x double> %5) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %9, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBEF2A034D3F36A50, double 0xBEF2A034D3F36A50, double 0xBEF2A034D3F36A50, double 0xBEF2A034D3F36A50>, <4 x double> <double 0x3F14E58666D1B46F, double 0x3F14E58666D1B46F, double 0x3F14E58666D1B46F, double 0x3F14E58666D1B46F>, <4 x double> %6) #6
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 0x3E4FCC5720620921, double 0x3E4FCC5720620921, double 0x3E4FCC5720620921, double 0x3E4FCC5720620921>, <4 x double> %5) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %9, <4 x double> %40) #6
  %42 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F1658BA21A7397E, double 0x3F1658BA21A7397E, double 0x3F1658BA21A7397E, double 0x3F1658BA21A7397E>, <4 x double> <double 0xBF2230DCD58EAD99, double 0xBF2230DCD58EAD99, double 0xBF2230DCD58EAD99, double 0xBF2230DCD58EAD99>, <4 x double> %6) #6
  %43 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %42, <4 x double> <double 0xBE85F742EC43E5C7, double 0xBE85F742EC43E5C7, double 0xBE85F742EC43E5C7, double 0xBE85F742EC43E5C7>, <4 x double> %5) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %41, <4 x double> %9, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF3590AE9D03C290, double 0xBF3590AE9D03C290, double 0xBF3590AE9D03C290, double 0xBF3590AE9D03C290>, <4 x double> <double 0x3F10F5BA38B6A6E5, double 0x3F10F5BA38B6A6E5, double 0x3F10F5BA38B6A6E5, double 0x3F10F5BA38B6A6E5>, <4 x double> %6) #6
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %45, <4 x double> <double 0x3EBB9E6C9DC6519C, double 0x3EBB9E6C9DC6519C, double 0x3EBB9E6C9DC6519C, double 0x3EBB9E6C9DC6519C>, <4 x double> %5) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %9, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F4FC6679B56D25A, double 0x3F4FC6679B56D25A, double 0x3F4FC6679B56D25A, double 0x3F4FC6679B56D25A>, <4 x double> <double 0x3F405F7D6748381E, double 0x3F405F7D6748381E, double 0x3F405F7D6748381E, double 0x3F405F7D6748381E>, <4 x double> %6) #6
  %49 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %48, <4 x double> <double 0xBEEF4D25C3E0C2EA, double 0xBEEF4D25C3E0C2EA, double 0xBEEF4D25C3E0C2EA, double 0xBEEF4D25C3E0C2EA>, <4 x double> %5) #6
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %9, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF5DB24AB8ACFC8B, double 0xBF5DB24AB8ACFC8B, double 0xBF5DB24AB8ACFC8B, double 0xBF5DB24AB8ACFC8B>, <4 x double> <double 0xBF5A9686E5DE05F7, double 0xBF5A9686E5DE05F7, double 0xBF5A9686E5DE05F7, double 0xBF5A9686E5DE05F7>, <4 x double> %6) #6
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %51, <4 x double> <double 0x3F1F9A326F9B89B8, double 0x3F1F9A326F9B89B8, double 0x3F1F9A326F9B89B8, double 0x3F1F9A326F9B89B8>, <4 x double> %5) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %9, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBF3EF7EC1133F0A8, double 0xBF3EF7EC1133F0A8, double 0xBF3EF7EC1133F0A8, double 0xBF3EF7EC1133F0A8>, <4 x double> <double 0x3F252C1DCB0324BA, double 0x3F252C1DCB0324BA, double 0x3F252C1DCB0324BA, double 0x3F252C1DCB0324BA>, <4 x double> %6) #6
  %55 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 0xBF4C02DB40040B84, double 0xBF4C02DB40040B84, double 0xBF4C02DB40040B84, double 0xBF4C02DB40040B84>, <4 x double> %5) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %9, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F9567A2F00CE3E5, double 0x3F9567A2F00CE3E5, double 0x3F9567A2F00CE3E5, double 0x3F9567A2F00CE3E5>, <4 x double> <double 0x3F939CBECA106F66, double 0x3F939CBECA106F66, double 0x3F939CBECA106F66, double 0x3F939CBECA106F66>, <4 x double> %6) #6
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %57, <4 x double> <double 0x3F7565BCD0E6A540, double 0x3F7565BCD0E6A540, double 0x3F7565BCD0E6A540, double 0x3F7565BCD0E6A540>, <4 x double> %5) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %9, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFBAEEA974D564EF, double 0xBFBAEEA974D564EF, double 0xBFBAEEA974D564EF, double 0xBFBAEEA974D564EF>, <4 x double> <double 0xBFBA4FE8F5D2A23C, double 0xBFBA4FE8F5D2A23C, double 0xBFBA4FE8F5D2A23C, double 0xBFBA4FE8F5D2A23C>, <4 x double> %6) #6
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %60, <4 x double> <double 0xBF9B82CE31288B52, double 0xBF9B82CE31288B52, double 0xBF9B82CE31288B52, double 0xBF9B82CE31288B52>, <4 x double> %5) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %9, <4 x double> %61) #6
  %63 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFE44E1CB940DA9C, double 0xBFE44E1CB940DA9C, double 0xBFE44E1CB940DA9C, double 0xBFE44E1CB940DA9C>, <4 x double> <double 0xBFE45F2B34C61AC0, double 0xBFE45F2B34C61AC0, double 0xBFE45F2B34C61AC0, double 0xBFE45F2B34C61AC0>, <4 x double> %6) #6
  %64 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %63, <4 x double> <double 0x3FBCE2F21A042BE3, double 0x3FBCE2F21A042BE3, double 0x3FBCE2F21A042BE3, double 0x3FBCE2F21A042BE3>, <4 x double> %5) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %9, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFF21232BFB32B5A, double 0xBFF21232BFB32B5A, double 0xBFF21232BFB32B5A, double 0xBFF21232BFB32B5A>, <4 x double> <double 0xBFF20DD7C1F4F99A, double 0xBFF20DD7C1F4F99A, double 0xBFF20DD7C1F4F99A, double 0xBFF20DD7C1F4F99A>, <4 x double> %6) #6
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7, double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <4 x double> %5) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %9, <4 x double> %67) #6
  %69 = fmul <4 x double> %9, %68
  %70 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %69
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %9, <4 x double> %70) #6
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F305C1A38102E9A, double 0x3F305C1A38102E9A, double 0x3F305C1A38102E9A, double 0x3F305C1A38102E9A>, <4 x double> <double 0x3E6250219DD8BAD1, double 0x3E6250219DD8BAD1, double 0x3E6250219DD8BAD1, double 0x3E6250219DD8BAD1>, <4 x double> %6) #6
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %72, <4 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <4 x double> %5) #6
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBBB9AC0AFE024E87, double 0xBBB9AC0AFE024E87, double 0xBBB9AC0AFE024E87, double 0xBBB9AC0AFE024E87>, <4 x double> <double 0xBB080EE9AD757828, double 0xBB080EE9AD757828, double 0xBB080EE9AD757828, double 0xBB080EE9AD757828>, <4 x double> %6) #6
  %75 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <4 x double> %5) #6
  %76 = fadd <4 x double> %69, %73
  %77 = fsub <4 x double> %76, %69
  %78 = fsub <4 x double> %76, %77
  %79 = fsub <4 x double> %69, %78
  %80 = fsub <4 x double> %73, %77
  %81 = fadd <4 x double> %80, %79
  %82 = fadd <4 x double> %71, %75
  %83 = fadd <4 x double> %82, %81
  %84 = fmul <4 x double> %76, %4
  %85 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %84
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %76, <4 x double> %4, <4 x double> %85) #6
  %87 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %83, <4 x double> %4, <4 x double> %86) #6
  %88 = fadd <4 x double> %76, %83
  %89 = fmul <4 x double> %88, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %90 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %89, i32 8) #6
  %91 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %90) #6
  %92 = fmul <4 x double> %90, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %93 = fadd <4 x double> %76, %92
  %94 = fsub <4 x double> %93, %76
  %95 = fsub <4 x double> %93, %94
  %96 = fsub <4 x double> %76, %95
  %97 = fsub <4 x double> %92, %94
  %98 = fadd <4 x double> %97, %96
  %99 = fadd <4 x double> %83, %98
  %100 = fmul <4 x double> %90, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %101 = fadd <4 x double> %100, %93
  %102 = fsub <4 x double> %101, %93
  %103 = fsub <4 x double> %101, %102
  %104 = fsub <4 x double> %93, %103
  %105 = fsub <4 x double> %100, %102
  %106 = fadd <4 x double> %105, %104
  %107 = fadd <4 x double> %106, %99
  %108 = fmul <4 x double> %101, %101
  %109 = fadd <4 x double> %101, %101
  %110 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %108
  %111 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %101, <4 x double> %110) #6
  %112 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %109, <4 x double> %107, <4 x double> %111) #6
  %113 = fmul <4 x double> %108, %108
  %114 = fadd <4 x double> %108, %108
  %115 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %113
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %108, <4 x double> %115) #6
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %114, <4 x double> %112, <4 x double> %116) #6
  %118 = fmul <4 x double> %113, %113
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %120, <4 x double> %121) #6
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %123, <4 x double> %124) #6
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %113, <4 x double> %122, <4 x double> %125) #6
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %119, <4 x double> %126) #6
  %128 = fmul <4 x double> %101, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %129 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %128
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %129) #6
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %107, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %130) #6
  %132 = fadd <4 x double> %128, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %133 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %132
  %134 = fadd <4 x double> %128, %133
  %135 = fadd <4 x double> %134, %131
  %136 = fmul <4 x double> %101, %132
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %101, <4 x double> %137) #6
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %101, <4 x double> %138) #6
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %132, <4 x double> %107, <4 x double> %139) #6
  %141 = fadd <4 x double> %136, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %142 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %141
  %143 = fadd <4 x double> %136, %142
  %144 = fadd <4 x double> %143, %140
  %145 = fmul <4 x double> %101, %141
  %146 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %145
  %147 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %101, <4 x double> %146) #6
  %148 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %144, <4 x double> %101, <4 x double> %147) #6
  %149 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %141, <4 x double> %107, <4 x double> %148) #6
  %150 = fadd <4 x double> %145, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %151 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %150
  %152 = fadd <4 x double> %145, %151
  %153 = fadd <4 x double> %152, %149
  %154 = fmul <4 x double> %113, %127
  %155 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %154
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %113, <4 x double> %127, <4 x double> %155) #6
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %117, <4 x double> %127, <4 x double> %156) #6
  %158 = fadd <4 x double> %150, %154
  %159 = fsub <4 x double> %150, %158
  %160 = fadd <4 x double> %154, %159
  %161 = fadd <4 x double> %160, %153
  %162 = fadd <4 x double> %161, %157
  %163 = ashr <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %164 = add nsw <4 x i32> %163, <i32 1023, i32 1023, i32 1023, i32 1023>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %166 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %167 = and <4 x i32> %165, <i32 0, i32 -1, i32 0, i32 -1>
  %168 = shl <4 x i32> %167, <i32 20, i32 20, i32 20, i32 20>
  %169 = and <4 x i32> %166, <i32 0, i32 -1, i32 0, i32 -1>
  %170 = shl <4 x i32> %169, <i32 20, i32 20, i32 20, i32 20>
  %171 = bitcast <4 x i32> %168 to <2 x i64>
  %172 = bitcast <4 x i32> %170 to <2 x i64>
  %173 = shufflevector <2 x i64> %171, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = shufflevector <2 x i64> %172, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %175 = shufflevector <4 x i64> %173, <4 x i64> %174, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %176 = bitcast <4 x i64> %175 to <4 x double>
  %177 = fmul <4 x double> %158, %176
  %178 = sub <4 x i32> %91, %163
  %179 = add <4 x i32> %178, <i32 1023, i32 1023, i32 1023, i32 1023>
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %181 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %182 = and <4 x i32> %180, <i32 0, i32 -1, i32 0, i32 -1>
  %183 = shl <4 x i32> %182, <i32 20, i32 20, i32 20, i32 20>
  %184 = and <4 x i32> %181, <i32 0, i32 -1, i32 0, i32 -1>
  %185 = shl <4 x i32> %184, <i32 20, i32 20, i32 20, i32 20>
  %186 = bitcast <4 x i32> %183 to <2 x i64>
  %187 = bitcast <4 x i32> %185 to <2 x i64>
  %188 = shufflevector <2 x i64> %186, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <2 x i64> %187, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %190 = shufflevector <4 x i64> %188, <4 x i64> %189, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %191 = bitcast <4 x i64> %190 to <4 x double>
  %192 = fmul <4 x double> %177, %191
  %193 = fmul <4 x double> %162, %176
  %194 = fmul <4 x double> %193, %191
  %195 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %76, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %196 = bitcast <4 x double> %195 to <4 x i64>
  %197 = bitcast <4 x double> %192 to <4 x i64>
  %198 = xor <4 x i64> %196, <i64 -1, i64 -1, i64 -1, i64 -1>
  %199 = and <4 x i64> %198, %197
  %200 = bitcast <4 x double> %194 to <4 x i64>
  %201 = and <4 x i64> %200, %198
  %202 = xor <4 x i64> %199, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %203 = xor <4 x i64> %201, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %204 = bitcast <4 x i64> %202 to <4 x double>
  %205 = bitcast <4 x i64> %203 to <4 x double>
  %206 = fadd <4 x double> %204, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %207 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %206
  %208 = fadd <4 x double> %207, %204
  %209 = fadd <4 x double> %208, %205
  %210 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %206, <4 x double> %84, <4 x double> %5) #6
  %211 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %209, <4 x double> %87, <4 x double> %5) #6
  %212 = fadd <4 x double> %210, %211
  %213 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %212, <4 x double> %7) #6
  %214 = bitcast <4 x double> %213 to <4 x i64>
  %215 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %216 = xor <4 x i64> %215, %214
  %217 = bitcast <4 x i64> %216 to <4 x double>
  %218 = fcmp uno <4 x double> %4, zeroinitializer
  %219 = sext <4 x i1> %218 to <4 x i64>
  %220 = bitcast <4 x i64> %219 to <4 x double>
  %221 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %217, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %220) #6
  ret <4 x double> %221
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_erfcd4_u15fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 17) #6
  %6 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 2.200000e+00, double 2.200000e+00, double 2.200000e+00, double 2.200000e+00>, i8 17) #6
  %7 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 4.200000e+00, double 4.200000e+00, double 4.200000e+00, double 4.200000e+00>, i8 17) #6
  %8 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 2.730000e+01, double 2.730000e+01, double 2.730000e+01, double 2.730000e+01>, i8 17) #6
  %9 = fmul <4 x double> %4, %4
  %10 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %9
  %11 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %4, <4 x double> %4, <4 x double> %10) #6
  %12 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %4
  %13 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %13) #6
  %15 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %4
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %12, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %12, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %12, <4 x double> %14) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %12, <4 x double> %4, <4 x double> %6) #6
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %19, <4 x double> zeroinitializer, <4 x double> %6) #6
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %9, <4 x double> %5) #6
  %23 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> %5) #6
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x40D6CB9FD3B439A9, double 0x40D6CB9FD3B439A9, double 0x40D6CB9FD3B439A9, double 0x40D6CB9FD3B439A9>, <4 x double> <double 0xC04CCA024E41FBF2, double 0xC04CCA024E41FBF2, double 0xC04CCA024E41FBF2, double 0xC04CCA024E41FBF2>, <4 x double> %7) #6
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %24, <4 x double> <double 0x3D58315E6C186224, double 0x3D58315E6C186224, double 0x3D58315E6C186224, double 0x3D58315E6C186224>, <4 x double> %6) #6
  %26 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> <double 0x3BC00EFEFABE9897, double 0x3BC00EFEFABE9897, double 0x3BC00EFEFABE9897, double 0x3BC00EFEFABE9897>, <4 x double> %5) #6
  %27 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xC0E6ED9388CD091B, double 0xC0E6ED9388CD091B, double 0xC0E6ED9388CD091B, double 0xC0E6ED9388CD091B>, <4 x double> <double 0x407D2EDD0AE020CC, double 0x407D2EDD0AE020CC, double 0x407D2EDD0AE020CC, double 0x407D2EDD0AE020CC>, <4 x double> %7) #6
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 0xBDAB33CF696F6246, double 0xBDAB33CF696F6246, double 0xBDAB33CF696F6246, double 0xBDAB33CF696F6246>, <4 x double> %6) #6
  %29 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %28, <4 x double> <double 0xBC0FE6EC06B043F2, double 0xBC0FE6EC06B043F2, double 0xBC0FE6EC06B043F2, double 0xBC0FE6EC06B043F2>, <4 x double> %5) #6
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %22, <4 x double> %29) #6
  %31 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x40DEFD81FD565E63, double 0x40DEFD81FD565E63, double 0x40DEFD81FD565E63, double 0x40DEFD81FD565E63>, <4 x double> <double 0xC09C1151CBEBE895, double 0xC09C1151CBEBE895, double 0xC09C1151CBEBE895, double 0xC09C1151CBEBE895>, <4 x double> %7) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %31, <4 x double> <double 0x3DED1C000C3FE200, double 0x3DED1C000C3FE200, double 0x3DED1C000C3FE200, double 0x3DED1C000C3FE200>, <4 x double> %6) #6
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> <double 0x3C55A7F67BDE0C13, double 0x3C55A7F67BDE0C13, double 0x3C55A7F67BDE0C13, double 0x3C55A7F67BDE0C13>, <4 x double> %5) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %22, <4 x double> %33) #6
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x40A955F72FDA349C, double 0x40A955F72FDA349C, double 0x40A955F72FDA349C, double 0x40A955F72FDA349C>, <4 x double> <double 0x40B103E466CE6960, double 0x40B103E466CE6960, double 0x40B103E466CE6960, double 0x40B103E466CE6960>, <4 x double> %7) #6
  %36 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %35, <4 x double> <double 0xBE23ACFF2B1B8BEC, double 0xBE23ACFF2B1B8BEC, double 0xBE23ACFF2B1B8BEC, double 0xBE23ACFF2B1B8BEC>, <4 x double> %6) #6
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %36, <4 x double> <double 0xBC9A15164BF4F369, double 0xBC9A15164BF4F369, double 0xBC9A15164BF4F369, double 0xBC9A15164BF4F369>, <4 x double> %5) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %22, <4 x double> %37) #6
  %39 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xC0D3ACCB8514AB13, double 0xC0D3ACCB8514AB13, double 0xC0D3ACCB8514AB13, double 0xC0D3ACCB8514AB13>, <4 x double> <double 0xC0BD20424648FD63, double 0xC0BD20424648FD63, double 0xC0BD20424648FD63, double 0xC0BD20424648FD63>, <4 x double> %7) #6
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 0x3E52C76D37FDB57D, double 0x3E52C76D37FDB57D, double 0x3E52C76D37FDB57D, double 0x3E52C76D37FDB57D>, <4 x double> %6) #6
  %41 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> <double 0x3CDD6F95068FEEA4, double 0x3CDD6F95068FEEA4, double 0x3CDD6F95068FEEA4, double 0x3CDD6F95068FEEA4>, <4 x double> %5) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %22, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x40CE5A08EC3F1AF9, double 0x40CE5A08EC3F1AF9, double 0x40CE5A08EC3F1AF9, double 0x40CE5A08EC3F1AF9>, <4 x double> <double 0x40C2A8FD1A1289EB, double 0x40C2A8FD1A1289EB, double 0x40C2A8FD1A1289EB, double 0x40C2A8FD1A1289EB>, <4 x double> %7) #6
  %44 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %43, <4 x double> <double 0xBE7ABA200DE4015C, double 0xBE7ABA200DE4015C, double 0xBE7ABA200DE4015C, double 0xBE7ABA200DE4015C>, <4 x double> %6) #6
  %45 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> <double 0xBD1F56D9FF51274F, double 0xBD1F56D9FF51274F, double 0xBD1F56D9FF51274F, double 0xBD1F56D9FF51274F>, <4 x double> %5) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %22, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xC0B806DFCAF3E8F0, double 0xC0B806DFCAF3E8F0, double 0xC0B806DFCAF3E8F0, double 0xC0B806DFCAF3E8F0>, <4 x double> <double 0xC0C27F028C42F7FD, double 0xC0C27F028C42F7FD, double 0xC0C27F028C42F7FD, double 0xC0C27F028C42F7FD>, <4 x double> %7) #6
  %48 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %47, <4 x double> <double 0x3E9D0EE6A4A80D73, double 0x3E9D0EE6A4A80D73, double 0x3E9D0EE6A4A80D73, double 0x3E9D0EE6A4A80D73>, <4 x double> %6) #6
  %49 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %48, <4 x double> <double 0x3D5F683984140301, double 0x3D5F683984140301, double 0x3D5F683984140301, double 0x3D5F683984140301>, <4 x double> %5) #6
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %22, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x40936030E9797DA0, double 0x40936030E9797DA0, double 0x40936030E9797DA0, double 0x40936030E9797DA0>, <4 x double> <double 0x40BCDB58257A0C6D, double 0x40BCDB58257A0C6D, double 0x40BCDB58257A0C6D, double 0x40BCDB58257A0C6D>, <4 x double> %7) #6
  %52 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %51, <4 x double> <double 0xBEB8137ED27E2624, double 0xBEB8137ED27E2624, double 0xBEB8137ED27E2624, double 0xBEB8137ED27E2624>, <4 x double> %6) #6
  %53 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %52, <4 x double> <double 0xBD9D8453B9E7FD78, double 0xBD9D8453B9E7FD78, double 0xBD9D8453B9E7FD78, double 0xBD9D8453B9E7FD78>, <4 x double> %5) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %50, <4 x double> %22, <4 x double> %53) #6
  %55 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xC054869BB9D7AF08, double 0xC054869BB9D7AF08, double 0xC054869BB9D7AF08, double 0xC054869BB9D7AF08>, <4 x double> <double 0xC0B1CDB68AB7C4E4, double 0xC0B1CDB68AB7C4E4, double 0xC0B1CDB68AB7C4E4, double 0xC0B1CDB68AB7C4E4>, <4 x double> %7) #6
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %55, <4 x double> <double 0x3ECD0697CBB9A376, double 0x3ECD0697CBB9A376, double 0x3ECD0697CBB9A376, double 0x3ECD0697CBB9A376>, <4 x double> %6) #6
  %57 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x3DD9E6AD5DAB7037, double 0x3DD9E6AD5DAB7037, double 0x3DD9E6AD5DAB7037, double 0x3DD9E6AD5DAB7037>, <4 x double> %5) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %22, <4 x double> %57) #6
  %59 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x4040365402C89D37, double 0x4040365402C89D37, double 0x4040365402C89D37, double 0x4040365402C89D37>, <4 x double> <double 0x40A13FBBE32520BC, double 0x40A13FBBE32520BC, double 0x40A13FBBE32520BC, double 0x40A13FBBE32520BC>, <4 x double> %7) #6
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %59, <4 x double> <double 0xBED4ECCCA37D22C1, double 0xBED4ECCCA37D22C1, double 0xBED4ECCCA37D22C1, double 0xBED4ECCCA37D22C1>, <4 x double> %6) #6
  %61 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %60, <4 x double> <double 0xBE151D7181C08BA0, double 0xBE151D7181C08BA0, double 0xBE151D7181C08BA0, double 0xBE151D7181C08BA0>, <4 x double> %5) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %22, <4 x double> %61) #6
  %63 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xC03D3BF3C95EBAA1, double 0xC03D3BF3C95EBAA1, double 0xC03D3BF3C95EBAA1, double 0xC03D3BF3C95EBAA1>, <4 x double> <double 0xC089AE616A35F399, double 0xC089AE616A35F399, double 0xC089AE616A35F399, double 0xC089AE616A35F399>, <4 x double> %7) #6
  %64 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %63, <4 x double> <double 0xBEB5F5266774B791, double 0xBEB5F5266774B791, double 0xBEB5F5266774B791, double 0xBEB5F5266774B791>, <4 x double> %6) #6
  %65 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> <double 0x3E4FCC572062092A, double 0x3E4FCC572062092A, double 0x3E4FCC572062092A, double 0x3E4FCC572062092A>, <4 x double> %5) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %22, <4 x double> %65) #6
  %67 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FD620B48EBD7FD2, double 0x3FD620B48EBD7FD2, double 0x3FD620B48EBD7FD2, double 0x3FD620B48EBD7FD2>, <4 x double> <double 0x406C5BB5D950D59F, double 0x406C5BB5D950D59F, double 0x406C5BB5D950D59F, double 0x406C5BB5D950D59F>, <4 x double> %7) #6
  %68 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %67, <4 x double> <double 0x3EFD9F88B02EA0EC, double 0x3EFD9F88B02EA0EC, double 0x3EFD9F88B02EA0EC, double 0x3EFD9F88B02EA0EC>, <4 x double> %6) #6
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %68, <4 x double> <double 0xBE85F742EC43E5BC, double 0xBE85F742EC43E5BC, double 0xBE85F742EC43E5BC, double 0xBE85F742EC43E5BC>, <4 x double> %5) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> %22, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x4015F57BD26EB8D7, double 0x4015F57BD26EB8D7, double 0x4015F57BD26EB8D7, double 0x4015F57BD26EB8D7>, <4 x double> <double 0xC0472AB3D15A1B99, double 0xC0472AB3D15A1B99, double 0xC0472AB3D15A1B99, double 0xC0472AB3D15A1B99>, <4 x double> %7) #6
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %71, <4 x double> <double 0xBF10C2E202FB0D80, double 0xBF10C2E202FB0D80, double 0xBF10C2E202FB0D80, double 0xBF10C2E202FB0D80>, <4 x double> %6) #6
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %72, <4 x double> <double 0x3EBB9E6C9DC6519D, double 0x3EBB9E6C9DC6519D, double 0x3EBB9E6C9DC6519D, double 0x3EBB9E6C9DC6519D>, <4 x double> %5) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %22, <4 x double> %73) #6
  %75 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3F598ED6853E65C9, double 0x3F598ED6853E65C9, double 0x3F598ED6853E65C9, double 0x3F598ED6853E65C9>, <4 x double> <double 0x40231D60ED75C166, double 0x40231D60ED75C166, double 0x40231D60ED75C166, double 0x40231D60ED75C166>, <4 x double> %7) #6
  %76 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %75, <4 x double> <double 0xBEFAE939BE608207, double 0xBEFAE939BE608207, double 0xBEFAE939BE608207, double 0xBEFAE939BE608207>, <4 x double> %6) #6
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %76, <4 x double> <double 0xBEEF4D25C3E0C2E2, double 0xBEEF4D25C3E0C2E2, double 0xBEEF4D25C3E0C2E2, double 0xBEEF4D25C3E0C2E2>, <4 x double> %5) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %74, <4 x double> %22, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFF8AAF93486CD89, double 0xBFF8AAF93486CD89, double 0xBFF8AAF93486CD89, double 0xBFF8AAF93486CD89>, <4 x double> <double 0xC007AADCFF61A9EE, double 0xC007AADCFF61A9EE, double 0xC007AADCFF61A9EE, double 0xC007AADCFF61A9EE>, <4 x double> %7) #6
  %80 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %79, <4 x double> <double 0x3F4351BFC5997AEF, double 0x3F4351BFC5997AEF, double 0x3F4351BFC5997AEF, double 0x3F4351BFC5997AEF>, <4 x double> %6) #6
  %81 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %80, <4 x double> <double 0x3F1F9A326F9B89C2, double 0x3F1F9A326F9B89C2, double 0x3F1F9A326F9B89C2, double 0x3F1F9A326F9B89C2>, <4 x double> %5) #6
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %22, <4 x double> %81) #6
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3EC7AEAC5A2C6C34, double 0x3EC7AEAC5A2C6C34, double 0x3EC7AEAC5A2C6C34, double 0x3EC7AEAC5A2C6C34>, <4 x double> <double 0x3FC56155F28A44A2, double 0x3FC56155F28A44A2, double 0x3FC56155F28A44A2, double 0x3FC56155F28A44A2>, <4 x double> %7) #6
  %84 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %83, <4 x double> <double 0xBF5BC858BD2C3DEE, double 0xBF5BC858BD2C3DEE, double 0xBF5BC858BD2C3DEE, double 0xBF5BC858BD2C3DEE>, <4 x double> %6) #6
  %85 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %84, <4 x double> <double 0xBF4C02DB40040B83, double 0xBF4C02DB40040B83, double 0xBF4C02DB40040B83, double 0xBF4C02DB40040B83>, <4 x double> %5) #6
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %82, <4 x double> %22, <4 x double> %85) #6
  %87 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3FE3FFFFD433AA8A, double 0x3FE3FFFFD433AA8A, double 0x3FE3FFFFD433AA8A, double 0x3FE3FFFFD433AA8A>, <4 x double> <double 0x3FE38258FA079AD9, double 0x3FE38258FA079AD9, double 0x3FE38258FA079AD9, double 0x3FE38258FA079AD9>, <4 x double> %7) #6
  %88 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> <double 0x3F2B61E95A64E1B4, double 0x3F2B61E95A64E1B4, double 0x3F2B61E95A64E1B4, double 0x3F2B61E95A64E1B4>, <4 x double> %6) #6
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> <double 0x3F7565BCD0E6A53F, double 0x3F7565BCD0E6A53F, double 0x3F7565BCD0E6A53F, double 0x3F7565BCD0E6A53F>, <4 x double> %5) #6
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %22, <4 x double> %89) #6
  %91 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3E1DEC4B817418DD, double 0x3E1DEC4B817418DD, double 0x3E1DEC4B817418DD, double 0x3E1DEC4B817418DD>, <4 x double> <double 0x3F515AA8B364E28B, double 0x3F515AA8B364E28B, double 0x3F515AA8B364E28B, double 0x3F515AA8B364E28B>, <4 x double> %7) #6
  %92 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %91, <4 x double> <double 0x3F93966FE5D12A2E, double 0x3F93966FE5D12A2E, double 0x3F93966FE5D12A2E, double 0x3F93966FE5D12A2E>, <4 x double> %6) #6
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %92, <4 x double> <double 0xBF9B82CE31288B51, double 0xBF9B82CE31288B51, double 0xBF9B82CE31288B51, double 0xBF9B82CE31288B51>, <4 x double> %5) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %22, <4 x double> %93) #6
  %95 = fmul <4 x double> %22, %94
  %96 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %95
  %97 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %94, <4 x double> %96) #6
  %98 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %94, <4 x double> %97) #6
  %99 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFE0000000038D52, double 0xBFE0000000038D52, double 0xBFE0000000038D52, double 0xBFE0000000038D52>, <4 x double> <double 0xBFE0006CA4753FC8, double 0xBFE0006CA4753FC8, double 0xBFE0006CA4753FC8, double 0xBFE0006CA4753FC8>, <4 x double> %7) #6
  %100 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %99, <4 x double> <double 0xBFBA4F4EAB8311A0, double 0xBFBA4F4EAB8311A0, double 0xBFBA4F4EAB8311A0, double 0xBFBA4F4EAB8311A0>, <4 x double> %6) #6
  %101 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %100, <4 x double> <double 0x3FBCE2F21A042BE2, double 0x3FBCE2F21A042BE2, double 0x3FBCE2F21A042BE2, double 0x3FBCE2F21A042BE2>, <4 x double> %5) #6
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBC8719E29ACB2723, double 0xBC8719E29ACB2723, double 0xBC8719E29ACB2723, double 0xBC8719E29ACB2723>, <4 x double> <double 0x3C7E64BB064EBF0B, double 0x3C7E64BB064EBF0B, double 0x3C7E64BB064EBF0B, double 0x3C7E64BB064EBF0B>, <4 x double> %7) #6
  %103 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %102, <4 x double> <double 0xBC5CBFA8068241AE, double 0xBC5CBFA8068241AE, double 0xBC5CBFA8068241AE, double 0xBC5CBFA8068241AE>, <4 x double> %6) #6
  %104 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %103, <4 x double> <double 0xBC52871BC5EF8ED7, double 0xBC52871BC5EF8ED7, double 0xBC52871BC5EF8ED7, double 0xBC52871BC5EF8ED7>, <4 x double> %5) #6
  %105 = fadd <4 x double> %95, %101
  %106 = fsub <4 x double> %105, %95
  %107 = fsub <4 x double> %105, %106
  %108 = fsub <4 x double> %95, %107
  %109 = fsub <4 x double> %101, %106
  %110 = fadd <4 x double> %109, %108
  %111 = fadd <4 x double> %98, %104
  %112 = fadd <4 x double> %111, %110
  %113 = fmul <4 x double> %22, %105
  %114 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %113
  %115 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> %22, <4 x double> %114) #6
  %116 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %112, <4 x double> %22, <4 x double> %115) #6
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> %23, <4 x double> %116) #6
  %118 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0x3D50B89397C75A64, double 0x3D50B89397C75A64, double 0x3D50B89397C75A64, double 0x3D50B89397C75A64>, <4 x double> <double 0x3EBADCB2F72A1080, double 0x3EBADCB2F72A1080, double 0x3EBADCB2F72A1080, double 0x3EBADCB2F72A1080>, <4 x double> %7) #6
  %119 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %118, <4 x double> <double 0xBFE45F306B230D62, double 0xBFE45F306B230D62, double 0xBFE45F306B230D62, double 0xBFE45F306B230D62>, <4 x double> %6) #6
  %120 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %119, <4 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7, double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <4 x double> %5) #6
  %121 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xB9ED96501FDC09B6, double 0xB9ED96501FDC09B6, double 0xB9ED96501FDC09B6, double 0xB9ED96501FDC09B6>, <4 x double> <double 0x3B2CF38C548C5245, double 0x3B2CF38C548C5245, double 0x3B2CF38C548C5245, double 0x3B2CF38C548C5245>, <4 x double> %7) #6
  %122 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %121, <4 x double> <double 0x3C619932A20CE10B, double 0x3C619932A20CE10B, double 0x3C619932A20CE10B, double 0x3C619932A20CE10B>, <4 x double> %6) #6
  %123 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %122, <4 x double> <double 0x3C6EE12E49CAD52E, double 0x3C6EE12E49CAD52E, double 0x3C6EE12E49CAD52E, double 0x3C6EE12E49CAD52E>, <4 x double> %5) #6
  %124 = fadd <4 x double> %113, %120
  %125 = fsub <4 x double> %124, %113
  %126 = fsub <4 x double> %124, %125
  %127 = fsub <4 x double> %113, %126
  %128 = fsub <4 x double> %120, %125
  %129 = fadd <4 x double> %128, %127
  %130 = fadd <4 x double> %117, %123
  %131 = fadd <4 x double> %130, %129
  %132 = fmul <4 x double> %22, %124
  %133 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %132
  %134 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %22, <4 x double> %133) #6
  %135 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %131, <4 x double> %22, <4 x double> %134) #6
  %136 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %23, <4 x double> %135) #6
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBFE250D048E7A1C6, double 0xBFE250D048E7A1C6, double 0xBFE250D048E7A1C6, double 0xBFE250D048E7A1C6>, <4 x double> <double 0xBFE250D055891FD0, double 0xBFE250D055891FD0, double 0xBFE250D055891FD0, double 0xBFE250D055891FD0>, <4 x double> %7) #6
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %137, <4 x double> <double 0xBFF20DD7505C75E8, double 0xBFF20DD7505C75E8, double 0xBFF20DD7505C75E8, double 0xBFF20DD7505C75E8>, <4 x double> %6) #6
  %139 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <4 x double> %5) #6
  %140 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 0xBC7BA6EE6A6AB496, double 0xBC7BA6EE6A6AB496, double 0xBC7BA6EE6A6AB496, double 0xBC7BA6EE6A6AB496>, <4 x double> <double 0x3C81B3313996DEA7, double 0x3C81B3313996DEA7, double 0x3C81B3313996DEA7, double 0x3C81B3313996DEA7>, <4 x double> %7) #6
  %141 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %140, <4 x double> <double 0x3C9751223FE9154D, double 0x3C9751223FE9154D, double 0x3C9751223FE9154D, double 0x3C9751223FE9154D>, <4 x double> %6) #6
  %142 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %141, <4 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <4 x double> %5) #6
  %143 = fadd <4 x double> %132, %139
  %144 = fsub <4 x double> %143, %132
  %145 = fsub <4 x double> %143, %144
  %146 = fsub <4 x double> %132, %145
  %147 = fsub <4 x double> %139, %144
  %148 = fadd <4 x double> %147, %146
  %149 = fadd <4 x double> %136, %142
  %150 = fadd <4 x double> %149, %148
  %151 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <4 x i64> %151 to <4 x double>
  %153 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %152, <4 x double> %143, <4 x double> %6) #6
  %154 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %150, <4 x double> %6) #6
  %155 = fmul <4 x double> %153, %4
  %156 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %155
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %4, <4 x double> %156) #6
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %154, <4 x double> %4, <4 x double> %157) #6
  %159 = fadd <4 x double> %143, %155
  %160 = fsub <4 x double> %159, %155
  %161 = fsub <4 x double> %159, %160
  %162 = fsub <4 x double> %155, %161
  %163 = fsub <4 x double> %143, %160
  %164 = fadd <4 x double> %163, %162
  %165 = fadd <4 x double> %150, %158
  %166 = fadd <4 x double> %165, %164
  %167 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %159, <4 x double> %155, <4 x double> %6) #6
  %168 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %166, <4 x double> %158, <4 x double> %6) #6
  %169 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %167
  %170 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %169
  %171 = fsub <4 x double> %170, %167
  %172 = fadd <4 x double> %171, zeroinitializer
  %173 = fsub <4 x double> %172, %168
  %174 = fadd <4 x double> %167, %168
  %175 = fmul <4 x double> %174, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %176 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %175, i32 8) #6
  %177 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %176) #6
  %178 = fmul <4 x double> %176, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %179 = fadd <4 x double> %167, %178
  %180 = fsub <4 x double> %179, %167
  %181 = fsub <4 x double> %179, %180
  %182 = fsub <4 x double> %167, %181
  %183 = fsub <4 x double> %178, %180
  %184 = fadd <4 x double> %183, %182
  %185 = fadd <4 x double> %168, %184
  %186 = fmul <4 x double> %176, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %187 = fadd <4 x double> %186, %179
  %188 = fsub <4 x double> %187, %179
  %189 = fsub <4 x double> %187, %188
  %190 = fsub <4 x double> %179, %189
  %191 = fsub <4 x double> %186, %188
  %192 = fadd <4 x double> %191, %190
  %193 = fadd <4 x double> %192, %185
  %194 = fmul <4 x double> %187, %187
  %195 = fadd <4 x double> %187, %187
  %196 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %194
  %197 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> %187, <4 x double> %196) #6
  %198 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %195, <4 x double> %193, <4 x double> %197) #6
  %199 = fmul <4 x double> %194, %194
  %200 = fadd <4 x double> %194, %194
  %201 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %199
  %202 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %194, <4 x double> %194, <4 x double> %201) #6
  %203 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %200, <4 x double> %198, <4 x double> %202) #6
  %204 = fmul <4 x double> %199, %199
  %205 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %206 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %207 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %208 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %194, <4 x double> %206, <4 x double> %207) #6
  %209 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %210 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %211 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %194, <4 x double> %209, <4 x double> %210) #6
  %212 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %199, <4 x double> %208, <4 x double> %211) #6
  %213 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %204, <4 x double> %205, <4 x double> %212) #6
  %214 = fmul <4 x double> %187, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %215 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %214
  %216 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %187, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %215) #6
  %217 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %193, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %216) #6
  %218 = fadd <4 x double> %214, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %219 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %218
  %220 = fadd <4 x double> %214, %219
  %221 = fadd <4 x double> %220, %217
  %222 = fmul <4 x double> %187, %218
  %223 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %222
  %224 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %218, <4 x double> %187, <4 x double> %223) #6
  %225 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %221, <4 x double> %187, <4 x double> %224) #6
  %226 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %218, <4 x double> %193, <4 x double> %225) #6
  %227 = fadd <4 x double> %222, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %228 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %227
  %229 = fadd <4 x double> %222, %228
  %230 = fadd <4 x double> %229, %226
  %231 = fmul <4 x double> %187, %227
  %232 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %231
  %233 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %227, <4 x double> %187, <4 x double> %232) #6
  %234 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %230, <4 x double> %187, <4 x double> %233) #6
  %235 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %227, <4 x double> %193, <4 x double> %234) #6
  %236 = fadd <4 x double> %231, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %237 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %236
  %238 = fadd <4 x double> %231, %237
  %239 = fadd <4 x double> %238, %235
  %240 = fmul <4 x double> %199, %213
  %241 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %240
  %242 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %199, <4 x double> %213, <4 x double> %241) #6
  %243 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %203, <4 x double> %213, <4 x double> %242) #6
  %244 = fadd <4 x double> %236, %240
  %245 = fsub <4 x double> %236, %244
  %246 = fadd <4 x double> %240, %245
  %247 = fadd <4 x double> %246, %239
  %248 = fadd <4 x double> %247, %243
  %249 = ashr <4 x i32> %177, <i32 1, i32 1, i32 1, i32 1>
  %250 = add nsw <4 x i32> %249, <i32 1023, i32 1023, i32 1023, i32 1023>
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %252 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %253 = and <4 x i32> %251, <i32 0, i32 -1, i32 0, i32 -1>
  %254 = shl <4 x i32> %253, <i32 20, i32 20, i32 20, i32 20>
  %255 = and <4 x i32> %252, <i32 0, i32 -1, i32 0, i32 -1>
  %256 = shl <4 x i32> %255, <i32 20, i32 20, i32 20, i32 20>
  %257 = bitcast <4 x i32> %254 to <2 x i64>
  %258 = bitcast <4 x i32> %256 to <2 x i64>
  %259 = shufflevector <2 x i64> %257, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %260 = shufflevector <2 x i64> %258, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %261 = shufflevector <4 x i64> %259, <4 x i64> %260, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %262 = bitcast <4 x i64> %261 to <4 x double>
  %263 = fmul <4 x double> %244, %262
  %264 = sub <4 x i32> %177, %249
  %265 = add <4 x i32> %264, <i32 1023, i32 1023, i32 1023, i32 1023>
  %266 = shufflevector <4 x i32> %265, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %267 = shufflevector <4 x i32> %265, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %268 = and <4 x i32> %266, <i32 0, i32 -1, i32 0, i32 -1>
  %269 = shl <4 x i32> %268, <i32 20, i32 20, i32 20, i32 20>
  %270 = and <4 x i32> %267, <i32 0, i32 -1, i32 0, i32 -1>
  %271 = shl <4 x i32> %270, <i32 20, i32 20, i32 20, i32 20>
  %272 = bitcast <4 x i32> %269 to <2 x i64>
  %273 = bitcast <4 x i32> %271 to <2 x i64>
  %274 = shufflevector <2 x i64> %272, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = shufflevector <2 x i64> %273, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <4 x i64> %274, <4 x i64> %275, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %277 = bitcast <4 x i64> %276 to <4 x double>
  %278 = fmul <4 x double> %263, %277
  %279 = fmul <4 x double> %248, %262
  %280 = fmul <4 x double> %279, %277
  %281 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %167, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %282 = bitcast <4 x double> %281 to <4 x i64>
  %283 = bitcast <4 x double> %278 to <4 x i64>
  %284 = xor <4 x i64> %282, <i64 -1, i64 -1, i64 -1, i64 -1>
  %285 = and <4 x i64> %284, %283
  %286 = bitcast <4 x double> %280 to <4 x i64>
  %287 = and <4 x i64> %286, %284
  %288 = bitcast <4 x i64> %285 to <4 x double>
  %289 = bitcast <4 x i64> %287 to <4 x double>
  %290 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %288, <4 x double> %169, <4 x double> %5) #6
  %291 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %289, <4 x double> %173, <4 x double> %5) #6
  %292 = fmul <4 x double> %22, %290
  %293 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %292
  %294 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %290, <4 x double> %22, <4 x double> %293) #6
  %295 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %291, <4 x double> %22, <4 x double> %294) #6
  %296 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %290, <4 x double> %23, <4 x double> %295) #6
  %297 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %292, <4 x double> %290, <4 x double> %6) #6
  %298 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %296, <4 x double> %291, <4 x double> %6) #6
  %299 = fadd <4 x double> %297, %298
  %300 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> %299, <4 x double> %8) #6
  %301 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %302 = xor <4 x i64> %301, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %303 = bitcast <4 x i64> %302 to <4 x double>
  %304 = fcmp oeq <4 x double> %303, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %305 = sext <4 x i1> %304 to <4 x i64>
  %306 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %300
  %307 = bitcast <4 x i64> %305 to <4 x double>
  %308 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %300, <4 x double> %306, <4 x double> %307) #6
  %309 = fcmp uno <4 x double> %0, zeroinitializer
  %310 = sext <4 x i1> %309 to <4 x i64>
  %311 = bitcast <4 x i64> %310 to <4 x double>
  %312 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %308, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %311) #6
  ret <4 x double> %312
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid4_u05fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %10, <4 x double> %12) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <4 x double> %11, <4 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8, double 0x3E950783486A74C8>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %11, <4 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>) #6
  %19 = fmul <4 x double> %18, %11
  %20 = fadd <4 x double> %19, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %21 = fsub <4 x double> %20, %19
  %22 = fsub <4 x double> %20, %21
  %23 = fsub <4 x double> %19, %22
  %24 = fsub <4 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %21
  %25 = fadd <4 x double> %24, %23
  %26 = fadd <4 x double> %25, <double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000, double 0x3C50B00000000000>
  %27 = fmul <4 x double> %11, %20
  %28 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %20, <4 x double> %28) #6
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %20, <4 x double> %29) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %26, <4 x double> %30) #6
  %32 = fadd <4 x double> %27, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %33 = fsub <4 x double> %32, %27
  %34 = fsub <4 x double> %32, %33
  %35 = fsub <4 x double> %27, %34
  %36 = fsub <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %33
  %37 = fadd <4 x double> %36, %35
  %38 = fadd <4 x double> %31, <double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000, double 0x3C81A80000000000>
  %39 = fadd <4 x double> %38, %37
  %40 = fmul <4 x double> %10, %32
  %41 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %10, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %39, <4 x double> %10, <4 x double> %42) #6
  %44 = fadd <4 x double> %43, %40
  %45 = bitcast <4 x double> %1 to <4 x i64>
  %46 = xor <4 x i64> %45, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = fcmp oeq <4 x double> %47, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %49 = sext <4 x i1> %48 to <4 x i64>
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %44, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <4 x double> %11, <4 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %11, <4 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %11, <4 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %11, <4 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>) #6
  %57 = fmul <4 x double> %11, %56
  %58 = fadd <4 x double> %57, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %59 = fsub <4 x double> %58, %57
  %60 = fsub <4 x double> %58, %59
  %61 = fsub <4 x double> %57, %60
  %62 = fsub <4 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %59
  %63 = fadd <4 x double> %62, %61
  %64 = fadd <4 x double> %63, <double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000, double 0xBC33500000000000>
  %65 = fmul <4 x double> %11, %58
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %58, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %58, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %64, <4 x double> %68) #6
  %70 = fadd <4 x double> %65, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %71 = fsub <4 x double> %70, %65
  %72 = fsub <4 x double> %70, %71
  %73 = fsub <4 x double> %65, %72
  %74 = fsub <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %71
  %75 = fadd <4 x double> %74, %73
  %76 = fadd <4 x double> %69, <double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000, double 0xBC76900000000000>
  %77 = fadd <4 x double> %76, %75
  %78 = fmul <4 x double> %11, %70
  %79 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %78
  %80 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %11, <4 x double> %79) #6
  %81 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %77, <4 x double> %11, <4 x double> %80) #6
  %82 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> %13, <4 x double> %81) #6
  %83 = fadd <4 x double> %78, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %84 = fsub <4 x double> %83, %78
  %85 = fsub <4 x double> %83, %84
  %86 = fsub <4 x double> %78, %85
  %87 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %84
  %88 = fadd <4 x double> %87, %86
  %89 = fadd <4 x double> %82, %88
  %90 = fadd <4 x double> %83, %89
  %91 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %92 = icmp eq <4 x i32> %91, zeroinitializer
  %93 = sitofp <4 x i1> %92 to <4 x double>
  %94 = fcmp oeq <4 x double> %93, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %95 = sext <4 x i1> %94 to <4 x i64>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> %51, <4 x double> %96) #6
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %51, <4 x double> %90, <4 x double> %96) #6
  %99 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %100 = icmp ne <4 x i32> %99, zeroinitializer
  %101 = sitofp <4 x i1> %100 to <4 x double>
  %102 = fcmp oeq <4 x double> %101, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %103 = select <4 x i1> %102, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %104 = bitcast <4 x double> %97 to <4 x i64>
  %105 = xor <4 x i64> %103, %104
  %106 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %107 = and <4 x i32> %106, <i32 4, i32 4, i32 4, i32 4>
  %108 = icmp ne <4 x i32> %107, zeroinitializer
  %109 = sitofp <4 x i1> %108 to <4 x double>
  %110 = fcmp oeq <4 x double> %109, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %111 = select <4 x i1> %110, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %112 = bitcast <4 x double> %98 to <4 x i64>
  %113 = xor <4 x i64> %111, %112
  %114 = bitcast <4 x i64> %113 to <4 x double>
  %115 = and <4 x i64> %45, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <4 x i64> %115 to <4 x double>
  %117 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %116, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %118 = bitcast <4 x double> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -1, i64 -1, i64 -1, i64 -1>
  %120 = and <4 x i64> %105, %119
  %121 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %114, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %117) #6
  %122 = fcmp oeq <4 x double> %116, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %123 = sext <4 x i1> %122 to <4 x i64>
  %124 = or <4 x i64> %120, %123
  %125 = bitcast <4 x double> %121 to <4 x i64>
  %126 = or <4 x i64> %125, %123
  %127 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %124, <4 x i64>* %127, align 32, !alias.scope !31
  %128 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %129 = bitcast <4 x double>* %128 to <4 x i64>*
  store <4 x i64> %126, <4 x i64>* %129, align 32, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospid4_u35fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 4.000000e+00, double 4.000000e+00, double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %3, %9
  %11 = fmul <4 x double> %10, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>, <4 x double> %11, <4 x double> <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>) #6
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %11, <4 x double> <double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C, double 0x3E9507830918116C>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %11, <4 x double> <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %14, <4 x double> %11, <4 x double> <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %11, <4 x double> <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %11, <4 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>) #6
  %18 = fmul <4 x double> %17, %10
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>, <4 x double> %11, <4 x double> <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %11, <4 x double> <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %11, <4 x double> <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %11, <4 x double> <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %11, <4 x double> <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %11, <4 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>) #6
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %26 = and <4 x i32> %7, <i32 2, i32 2, i32 2, i32 2>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sitofp <4 x i1> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %28, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = bitcast <4 x i64> %30 to <4 x double>
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %25, <4 x double> %18, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> %25, <4 x double> %31) #6
  %34 = and <4 x i32> %7, <i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <4 x i32> %34, zeroinitializer
  %36 = sitofp <4 x i1> %35 to <4 x double>
  %37 = fcmp oeq <4 x double> %36, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = select <4 x i1> %37, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %39 = bitcast <4 x double> %32 to <4 x i64>
  %40 = xor <4 x i64> %38, %39
  %41 = add <4 x i32> %8, <i32 2, i32 2, i32 2, i32 2>
  %42 = and <4 x i32> %41, <i32 4, i32 4, i32 4, i32 4>
  %43 = icmp ne <4 x i32> %42, zeroinitializer
  %44 = sitofp <4 x i1> %43 to <4 x double>
  %45 = fcmp oeq <4 x double> %44, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %46 = select <4 x i1> %45, <4 x i64> <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>, <4 x i64> zeroinitializer
  %47 = bitcast <4 x double> %33 to <4 x i64>
  %48 = xor <4 x i64> %46, %47
  %49 = bitcast <4 x double> %1 to <4 x i64>
  %50 = and <4 x i64> %49, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %51 = bitcast <4 x i64> %50 to <4 x double>
  %52 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %51, <4 x double> <double 2.500000e+08, double 2.500000e+08, double 2.500000e+08, double 2.500000e+08>, i8 30) #6
  %53 = bitcast <4 x double> %52 to <4 x i64>
  %54 = xor <4 x i64> %53, <i64 -1, i64 -1, i64 -1, i64 -1>
  %55 = and <4 x i64> %40, %54
  %56 = and <4 x i64> %48, %54
  %57 = fcmp oeq <4 x double> %51, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %58 = sext <4 x i1> %57 to <4 x i64>
  %59 = or <4 x i64> %55, %58
  %60 = or <4 x i64> %56, %58
  %61 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %59, <4 x i64>* %61, align 32, !alias.scope !34
  %62 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %63 = bitcast <4 x double>* %62 to <4 x i64>*
  store <4 x i64> %60, <4 x i64>* %63, align 32, !alias.scope !34
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_modfd4_fma4(%struct.vdouble2* noalias nocapture sret, <4 x double>) local_unnamed_addr #2 {
  %3 = fmul <4 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %1, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #6
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = bitcast <4 x double> %1 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %13, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 30) #6
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> zeroinitializer, <4 x double> %14) #6
  %16 = bitcast <4 x double> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %18 = and <4 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <4 x i64> %17, %18
  %20 = fsub <4 x double> %1, %15
  %21 = bitcast <4 x double> %20 to <4 x i64>
  %22 = and <4 x i64> %21, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %23 = or <4 x i64> %22, %18
  %24 = bitcast %struct.vdouble2* %0 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %24, align 32, !alias.scope !37
  %25 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %26 = bitcast <4 x double>* %25 to <4 x i64>*
  store <4 x i64> %23, <4 x i64>* %26, align 32, !alias.scope !37
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_logd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fdiv <4 x double> %49, %50
  %52 = fmul <4 x double> %51, %51
  %53 = fmul <4 x double> %52, %52
  %54 = fmul <4 x double> %53, %53
  %55 = fmul <4 x double> %51, %52
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>, <4 x double> <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>, <4 x double> %56) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>, <4 x double> <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> <double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E, double 0x3FD99999998C136E>, <4 x double> <double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F, double 0x3FE555555555593F>) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %58, <4 x double> %59) #6
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %57, <4 x double> %60) #6
  %62 = bitcast <16 x i8> %48 to <4 x i32>
  %63 = sitofp <4 x i32> %62 to <4 x double>
  %64 = fmul <4 x double> %63, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %61, <4 x double> %65) #6
  %67 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %68 = sext <4 x i1> %67 to <4 x i64>
  %69 = bitcast <4 x i64> %68 to <4 x double>
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %72 = fcmp uno <4 x double> %5, zeroinitializer
  %73 = select <4 x i1> %72, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %71
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %70, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %73) #6
  %75 = fcmp oeq <4 x double> %5, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i64>
  %77 = bitcast <4 x i64> %76 to <4 x double>
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %77) #6
  ret <4 x double> %78
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_logd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %81, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %81, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %81, <4 x double> %84) #6
  %86 = fmul <4 x double> %62, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %87 = fmul <4 x double> %70, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %88 = fadd <4 x double> %82, %86
  %89 = fsub <4 x double> %82, %88
  %90 = fadd <4 x double> %86, %89
  %91 = fadd <4 x double> %85, %90
  %92 = fadd <4 x double> %87, %91
  %93 = fmul <4 x double> %62, %71
  %94 = fmul <4 x double> %79, %93
  %95 = fadd <4 x double> %88, %94
  %96 = fsub <4 x double> %88, %95
  %97 = fadd <4 x double> %94, %96
  %98 = fadd <4 x double> %97, %92
  %99 = fadd <4 x double> %95, %98
  %100 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %101 = sext <4 x i1> %100 to <4 x i64>
  %102 = bitcast <4 x i64> %101 to <4 x double>
  %103 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %99, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %102) #6
  %104 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %105 = fcmp uno <4 x double> %5, zeroinitializer
  %106 = select <4 x i1> %105, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %104
  %107 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %103, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %106) #6
  %108 = fcmp oeq <4 x double> %5, zeroinitializer
  %109 = sext <4 x i1> %108 to <4 x i64>
  %110 = bitcast <4 x i64> %109 to <4 x double>
  %111 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %107, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %110) #6
  ret <4 x double> %111
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_powd4_u10fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = tail call <4 x double> @Sleef_powd4_u10fma4(<4 x double> %0, <4 x double> %1)
  ret <4 x double> %3
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sinhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = fsub <4 x double> %119, %121
  %128 = fsub <4 x double> %119, %127
  %129 = fsub <4 x double> %128, %121
  %130 = fadd <4 x double> %129, %120
  %131 = fsub <4 x double> %130, %126
  %132 = fadd <4 x double> %127, %131
  %133 = fmul <4 x double> %132, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %134 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #6
  %135 = fcmp uno <4 x double> %133, zeroinitializer
  %136 = select <4 x i1> %135, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %134
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %136) #6
  %138 = bitcast <4 x double> %137 to <4 x i64>
  %139 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %140 = xor <4 x i64> %139, %138
  %141 = fcmp uno <4 x double> %0, zeroinitializer
  %142 = bitcast <4 x i64> %140 to <4 x double>
  %143 = select <4 x i1> %141, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %142
  ret <4 x double> %143
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_coshd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = fadd <4 x double> %121, %119
  %128 = fsub <4 x double> %119, %127
  %129 = fadd <4 x double> %121, %128
  %130 = fadd <4 x double> %129, %120
  %131 = fadd <4 x double> %126, %130
  %132 = fadd <4 x double> %127, %131
  %133 = fmul <4 x double> %132, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %134 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.100000e+02, double 7.100000e+02, double 7.100000e+02, double 7.100000e+02>, i8 30) #6
  %135 = fcmp uno <4 x double> %133, zeroinitializer
  %136 = select <4 x i1> %135, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %134
  %137 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %136) #6
  %138 = fcmp uno <4 x double> %0, zeroinitializer
  %139 = select <4 x i1> %138, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %137
  ret <4 x double> %139
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_tanhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, zeroinitializer
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = fmul <4 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <4 x double> %9, %4
  %11 = fsub <4 x double> %10, %4
  %12 = fsub <4 x double> %10, %11
  %13 = fsub <4 x double> %4, %12
  %14 = fsub <4 x double> %9, %11
  %15 = fadd <4 x double> %14, %13
  %16 = fadd <4 x double> %15, zeroinitializer
  %17 = fmul <4 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <4 x double> %17, %10
  %19 = fsub <4 x double> %18, %10
  %20 = fsub <4 x double> %18, %19
  %21 = fsub <4 x double> %10, %20
  %22 = fsub <4 x double> %17, %19
  %23 = fadd <4 x double> %22, %21
  %24 = fadd <4 x double> %23, %16
  %25 = fmul <4 x double> %18, %18
  %26 = fadd <4 x double> %18, %18
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> %18, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fmul <4 x double> %25, %25
  %31 = fadd <4 x double> %25, %25
  %32 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %30
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %25, <4 x double> %32) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %29, <4 x double> %33) #6
  %35 = fmul <4 x double> %30, %30
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %39, <4 x double> %42) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %35, <4 x double> %36, <4 x double> %43) #6
  %45 = fmul <4 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %46 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %45
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %18, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %46) #6
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %47) #6
  %49 = fadd <4 x double> %45, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %50 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %49
  %51 = fadd <4 x double> %45, %50
  %52 = fadd <4 x double> %51, %48
  %53 = fmul <4 x double> %18, %49
  %54 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %18, <4 x double> %54) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %18, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %24, <4 x double> %56) #6
  %58 = fadd <4 x double> %53, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %59 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %58
  %60 = fadd <4 x double> %53, %59
  %61 = fadd <4 x double> %60, %57
  %62 = fmul <4 x double> %18, %58
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %18, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %18, <4 x double> %64) #6
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %24, <4 x double> %65) #6
  %67 = fadd <4 x double> %62, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %68 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %67
  %69 = fadd <4 x double> %62, %68
  %70 = fadd <4 x double> %69, %66
  %71 = fmul <4 x double> %30, %44
  %72 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %71
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %30, <4 x double> %44, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %44, <4 x double> %73) #6
  %75 = fadd <4 x double> %67, %71
  %76 = fsub <4 x double> %67, %75
  %77 = fadd <4 x double> %71, %76
  %78 = fadd <4 x double> %77, %70
  %79 = fadd <4 x double> %78, %74
  %80 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %81 = add nsw <4 x i32> %80, <i32 1023, i32 1023, i32 1023, i32 1023>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %83 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %84 = and <4 x i32> %82, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %87 = shl <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = bitcast <4 x i32> %85 to <2 x i64>
  %89 = bitcast <4 x i32> %87 to <2 x i64>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x i64> %90, <4 x i64> %91, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = fmul <4 x double> %75, %93
  %95 = sub <4 x i32> %8, %80
  %96 = add <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %99 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %100 = shl <4 x i32> %99, <i32 20, i32 20, i32 20, i32 20>
  %101 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %102 = shl <4 x i32> %101, <i32 20, i32 20, i32 20, i32 20>
  %103 = bitcast <4 x i32> %100 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <4 x double>
  %109 = fmul <4 x double> %94, %108
  %110 = fmul <4 x double> %79, %93
  %111 = fmul <4 x double> %110, %108
  %112 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %113 = bitcast <4 x double> %112 to <4 x i64>
  %114 = bitcast <4 x double> %109 to <4 x i64>
  %115 = xor <4 x i64> %113, <i64 -1, i64 -1, i64 -1, i64 -1>
  %116 = and <4 x i64> %115, %114
  %117 = bitcast <4 x double> %111 to <4 x i64>
  %118 = and <4 x i64> %117, %115
  %119 = bitcast <4 x i64> %116 to <4 x double>
  %120 = bitcast <4 x i64> %118 to <4 x double>
  %121 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %119
  %122 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %119
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %121, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %124 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %120
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %124, <4 x double> %121, <4 x double> %123) #6
  %126 = fmul <4 x double> %125, %121
  %127 = bitcast <4 x double> %121 to <4 x i64>
  %128 = xor <4 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <4 x double> %126 to <4 x i64>
  %130 = xor <4 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <4 x i64> %128 to <4 x double>
  %132 = bitcast <4 x i64> %130 to <4 x double>
  %133 = fadd <4 x double> %119, %131
  %134 = fsub <4 x double> %133, %119
  %135 = fsub <4 x double> %133, %134
  %136 = fsub <4 x double> %119, %135
  %137 = fsub <4 x double> %131, %134
  %138 = fadd <4 x double> %137, %136
  %139 = fadd <4 x double> %120, %132
  %140 = fadd <4 x double> %139, %138
  %141 = fadd <4 x double> %121, %119
  %142 = fsub <4 x double> %141, %119
  %143 = fsub <4 x double> %141, %142
  %144 = fsub <4 x double> %119, %143
  %145 = fsub <4 x double> %121, %142
  %146 = fadd <4 x double> %145, %144
  %147 = fadd <4 x double> %126, %120
  %148 = fadd <4 x double> %147, %146
  %149 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %141
  %150 = fmul <4 x double> %149, %133
  %151 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %150
  %152 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %149, <4 x double> %133, <4 x double> %151) #6
  %153 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %154 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %153, <4 x double> %149, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %155 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %148
  %156 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %155, <4 x double> %149, <4 x double> %154) #6
  %157 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %149, <4 x double> %152) #6
  %158 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %150, <4 x double> %156, <4 x double> %157) #6
  %159 = fadd <4 x double> %158, %150
  %160 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #6
  %161 = fcmp uno <4 x double> %159, zeroinitializer
  %162 = select <4 x i1> %161, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %160
  %163 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %159, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %162) #6
  %164 = bitcast <4 x double> %163 to <4 x i64>
  %165 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = xor <4 x i64> %165, %164
  %167 = fcmp uno <4 x double> %0, zeroinitializer
  %168 = bitcast <4 x i64> %166 to <4 x double>
  %169 = select <4 x i1> %167, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %168
  ret <4 x double> %169
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sinhd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #6
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #6
  %22 = fmul <4 x double> %9, %10
  %23 = fmul <4 x double> %22, %21
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %23) #6
  %25 = fadd <4 x double> %9, %24
  %26 = icmp eq <4 x i32> %7, zeroinitializer
  %27 = sitofp <4 x i1> %26 to <4 x double>
  %28 = fcmp oeq <4 x double> %27, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %29 = sext <4 x i1> %28 to <4 x i64>
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %32 = add nsw <4 x i32> %31, <i32 1023, i32 1023, i32 1023, i32 1023>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %34 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %35 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %38 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <4 x i32> %36 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <4 x double>
  %45 = fmul <4 x double> %30, %44
  %46 = sub <4 x i32> %7, %31
  %47 = add <4 x i32> %46, <i32 1023, i32 1023, i32 1023, i32 1023>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %49 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %50 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = shl <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %53 = shl <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <4 x i32> %51 to <2 x i64>
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <4 x double>
  %60 = fmul <4 x double> %45, %59
  %61 = fadd <4 x double> %60, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %62 = bitcast <4 x i64> %29 to <4 x double>
  %63 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %61, <4 x double> %25, <4 x double> %62) #6
  %64 = fadd <4 x double> %63, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %65 = fadd <4 x double> %63, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %66 = fdiv <4 x double> %64, %65
  %67 = fmul <4 x double> %63, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %68 = fmul <4 x double> %67, %66
  %69 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #6
  %70 = fcmp uno <4 x double> %68, zeroinitializer
  %71 = select <4 x i1> %70, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %69
  %72 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %68, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %71) #6
  %73 = bitcast <4 x double> %72 to <4 x i64>
  %74 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %75 = xor <4 x i64> %74, %73
  %76 = fcmp uno <4 x double> %0, zeroinitializer
  %77 = bitcast <4 x i64> %75 to <4 x double>
  %78 = select <4 x i1> %76, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %77
  ret <4 x double> %78
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_coshd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %6) #6
  %8 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %4) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %6, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %8) #6
  %10 = fmul <4 x double> %9, %9
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06, double 0x3E21E0C670AFFF06>, <4 x double> <double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C, double 0x3E5AF6C36F75740C>) #6
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654, double 0x3E927E5D38A23654>, <4 x double> <double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47, double 0x3EC71DDEF633FB47>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A, double 0x3EFA01A0127F883A>, <4 x double> <double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD, double 0x3F2A01A01B4421FD>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %15) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B, double 0x3F56C16C16C3396B>, <4 x double> <double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5, double 0x3F8111111110E7A5>) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %9, <4 x double> <double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9, double 0x3FA55555555554F9>, <4 x double> <double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E, double 0x3FC555555555555E>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %18) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %16, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %13, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %9, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %9, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %25 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %26 = add nsw <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %28 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %29 = and <4 x i32> %27, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = and <4 x i32> %28, <i32 0, i32 -1, i32 0, i32 -1>
  %32 = shl <4 x i32> %31, <i32 20, i32 20, i32 20, i32 20>
  %33 = bitcast <4 x i32> %30 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <4 x double>
  %39 = fmul <4 x double> %24, %38
  %40 = sub <4 x i32> %7, %25
  %41 = add <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %44 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <4 x double>
  %54 = fmul <4 x double> %39, %53
  %55 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83, double 0x40862E42FE102C83>, i8 30) #6
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %54, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %58 = bitcast <4 x double> %57 to <4 x i64>
  %59 = bitcast <4 x double> %56 to <4 x i64>
  %60 = xor <4 x i64> %58, <i64 -1, i64 -1, i64 -1, i64 -1>
  %61 = and <4 x i64> %60, %59
  %62 = bitcast <4 x i64> %61 to <4 x double>
  %63 = fdiv <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %62, <4 x double> %63) #6
  %65 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 7.090000e+02, double 7.090000e+02, double 7.090000e+02, double 7.090000e+02>, i8 30) #6
  %66 = fcmp uno <4 x double> %64, zeroinitializer
  %67 = select <4 x i1> %66, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %65
  %68 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %64, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %67) #6
  %69 = fcmp uno <4 x double> %0, zeroinitializer
  %70 = select <4 x i1> %69, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %68
  ret <4 x double> %70
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_tanhd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <4 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %7) #6
  %9 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>, <4 x double> %5) #6
  %10 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %7, <4 x double> <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>, <4 x double> %9) #6
  %11 = fmul <4 x double> %10, %10
  %12 = fmul <4 x double> %11, %11
  %13 = fmul <4 x double> %12, %12
  %14 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>, <4 x double> <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>) #6
  %15 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>, <4 x double> <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>) #6
  %16 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>, <4 x double> <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>) #6
  %17 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %15, <4 x double> %16) #6
  %18 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>, <4 x double> <double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39, double 0x3F8111111110EB39>) #6
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> <double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E, double 0x3FA555555555553E>, <4 x double> <double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C, double 0x3FC555555555555C>) #6
  %20 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #6
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %12, <4 x double> %17, <4 x double> %20) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %13, <4 x double> %14, <4 x double> %21) #6
  %23 = fmul <4 x double> %10, %11
  %24 = fmul <4 x double> %23, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <4 x double> %24) #6
  %26 = fadd <4 x double> %10, %25
  %27 = icmp eq <4 x i32> %8, zeroinitializer
  %28 = sitofp <4 x i1> %27 to <4 x double>
  %29 = fcmp oeq <4 x double> %28, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %30 = sext <4 x i1> %29 to <4 x i64>
  %31 = fadd <4 x double> %26, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %32 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %33 = add nsw <4 x i32> %32, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %35 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %36 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = and <4 x i32> %35, <i32 0, i32 -1, i32 0, i32 -1>
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = fmul <4 x double> %31, %45
  %47 = sub <4 x i32> %8, %32
  %48 = add <4 x i32> %47, <i32 1023, i32 1023, i32 1023, i32 1023>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %50 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %51 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = and <4 x i32> %50, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %52 to <2 x i64>
  %56 = bitcast <4 x i32> %54 to <2 x i64>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <4 x double>
  %61 = fmul <4 x double> %46, %60
  %62 = fadd <4 x double> %61, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %63 = bitcast <4 x i64> %30 to <4 x double>
  %64 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %62, <4 x double> %26, <4 x double> %63) #6
  %65 = fadd <4 x double> %64, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %66 = fdiv <4 x double> %64, %65
  %67 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90, double 0x4032B70887229E90>, i8 30) #6
  %68 = fcmp uno <4 x double> %66, zeroinitializer
  %69 = select <4 x i1> %68, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %67
  %70 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %66, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %69) #6
  %71 = bitcast <4 x double> %70 to <4 x i64>
  %72 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %73 = xor <4 x i64> %72, %71
  %74 = fcmp uno <4 x double> %0, zeroinitializer
  %75 = bitcast <4 x i64> %73 to <4 x double>
  %76 = select <4 x i1> %74, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %75
  ret <4 x double> %76
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_asinhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_asinhd4_u10fma4(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_acoshd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_acoshd4_u10fma4(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_atanhd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = fadd <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <4 x double> %5, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <4 x double> %5, %6
  %8 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <4 x double> %4, %6
  %10 = fadd <4 x double> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <4 x i64> %11 to <4 x double>
  %13 = fadd <4 x double> %12, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <4 x double> %13, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %20 = fmul <4 x double> %5, %19
  %21 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %20
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %19, <4 x double> %5, <4 x double> %21) #6
  %23 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %13
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %19, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %18
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %19, <4 x double> %24) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %10, <4 x double> %19, <4 x double> %22) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %26, <4 x double> %27) #6
  %29 = fmul <4 x double> %20, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %30 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %29, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = fmul <4 x double> %29, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %33 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %29, <4 x double> %32, <4 x double> %30) #6
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %39 = bitcast <4 x i32> %38 to <2 x i64>
  %40 = bitcast <2 x i64> %36 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = shufflevector <2 x i64> %42, <2 x i64> %39, <2 x i32> <i32 2, i32 1>
  %44 = bitcast <2 x i64> %43 to <4 x i32>
  %45 = lshr <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i64> %31, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %47 = bitcast <4 x i64> %46 to <4 x double>
  %48 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %47) #6
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %49) #6
  %51 = bitcast <16 x i8> %50 to <4 x i32>
  %52 = sub <4 x i32> %45, %51
  %53 = sub <4 x i32> zeroinitializer, %52
  %54 = ashr <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %57 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %58 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %59 = shl <4 x i32> %58, <i32 20, i32 20, i32 20, i32 20>
  %60 = and <4 x i32> %57, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = bitcast <4 x i32> %59 to <2 x i64>
  %63 = bitcast <4 x i32> %61 to <2 x i64>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = bitcast <4 x i64> %66 to <4 x double>
  %68 = fmul <4 x double> %20, %67
  %69 = sub <4 x i32> %53, %54
  %70 = add <4 x i32> %69, <i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %72 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %73 = and <4 x i32> %71, <i32 0, i32 -1, i32 0, i32 -1>
  %74 = shl <4 x i32> %73, <i32 20, i32 20, i32 20, i32 20>
  %75 = and <4 x i32> %72, <i32 0, i32 -1, i32 0, i32 -1>
  %76 = shl <4 x i32> %75, <i32 20, i32 20, i32 20, i32 20>
  %77 = bitcast <4 x i32> %74 to <2 x i64>
  %78 = bitcast <4 x i32> %76 to <2 x i64>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = fmul <4 x double> %68, %82
  %84 = fmul <4 x double> %28, %67
  %85 = fmul <4 x double> %84, %82
  %86 = fadd <4 x double> %83, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %87 = fsub <4 x double> %86, %83
  %88 = fsub <4 x double> %86, %87
  %89 = fsub <4 x double> %83, %88
  %90 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %87
  %91 = fadd <4 x double> %90, %89
  %92 = fadd <4 x double> %85, %91
  %93 = fadd <4 x double> %83, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %94 = fsub <4 x double> %93, %83
  %95 = fsub <4 x double> %93, %94
  %96 = fsub <4 x double> %83, %95
  %97 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %94
  %98 = fadd <4 x double> %97, %96
  %99 = fadd <4 x double> %85, %98
  %100 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %93
  %101 = fmul <4 x double> %86, %100
  %102 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %86, <4 x double> %102) #6
  %104 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %93
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %104, <4 x double> %100, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %106 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %99
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %100, <4 x double> %105) #6
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %100, <4 x double> %103) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %107, <4 x double> %108) #6
  %110 = fmul <4 x double> %101, %101
  %111 = fadd <4 x double> %101, %101
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %110
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %101, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %111, <4 x double> %109, <4 x double> %113) #6
  %115 = fmul <4 x double> %110, %110
  %116 = fmul <4 x double> %115, %115
  %117 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %117) #6
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %115, <4 x double> %119, <4 x double> %120) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %116, <4 x double> %118, <4 x double> %121) #6
  %123 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %110, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %124 = sitofp <4 x i32> %52 to <4 x double>
  %125 = fmul <4 x double> %124, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %126 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %125
  %127 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %124, <4 x double> %126) #6
  %128 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %124, <4 x double> %127) #6
  %129 = fmul <4 x double> %101, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %130 = fmul <4 x double> %109, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %131 = fadd <4 x double> %125, %129
  %132 = fsub <4 x double> %125, %131
  %133 = fadd <4 x double> %129, %132
  %134 = fadd <4 x double> %128, %133
  %135 = fadd <4 x double> %130, %134
  %136 = fmul <4 x double> %101, %110
  %137 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %136
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %101, <4 x double> %137) #6
  %139 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %114, <4 x double> %101, <4 x double> %138) #6
  %140 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %109, <4 x double> %139) #6
  %141 = fmul <4 x double> %123, %136
  %142 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %141
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %136, <4 x double> %123, <4 x double> %142) #6
  %144 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %140, <4 x double> %123, <4 x double> %143) #6
  %145 = fadd <4 x double> %131, %141
  %146 = fsub <4 x double> %131, %145
  %147 = fadd <4 x double> %141, %146
  %148 = fadd <4 x double> %147, %135
  %149 = fadd <4 x double> %144, %148
  %150 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, i8 30) #6
  %151 = bitcast <4 x double> %150 to <4 x i64>
  %152 = fcmp oeq <4 x double> %4, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = fadd <4 x double> %145, %149
  %155 = fmul <4 x double> %154, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %156 = bitcast <4 x i64> %153 to <4 x double>
  %157 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %155, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %156) #6
  %158 = bitcast <4 x double> %157 to <4 x i64>
  %159 = or <4 x i64> %158, %151
  %160 = and <4 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %161 = xor <4 x i64> %159, %160
  %162 = bitcast <4 x i64> %161 to <4 x double>
  %163 = fcmp oeq <4 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %164 = fcmp uno <4 x double> %162, zeroinitializer
  %165 = fcmp uno <4 x double> %0, zeroinitializer
  %166 = or <4 x i1> %163, %165
  %167 = or <4 x i1> %166, %164
  %168 = select <4 x i1> %167, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %162
  ret <4 x double> %168
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_cbrtd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %7, <4 x double> %5) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> %14, <2 x i32> <i32 2, i32 1>
  %19 = bitcast <2 x i64> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %20, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %33 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %34 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = bitcast <4 x i32> %35 to <2 x i64>
  %39 = bitcast <4 x i32> %37 to <2 x i64>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <4 x double>
  %44 = fmul <4 x double> %43, %0
  %45 = sub <4 x i32> %29, %30
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 1023, i32 1023>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %48 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %49 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <4 x double>
  %59 = fmul <4 x double> %44, %58
  %60 = sitofp <4 x i32> %28 to <4 x double>
  %61 = fadd <4 x double> %60, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %62 = fmul <4 x double> %61, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %63 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %62) #6
  %64 = sitofp <4 x i32> %63 to <4 x double>
  %65 = fmul <4 x double> %64, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %66 = fsub <4 x double> %61, %65
  %67 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %66) #6
  %68 = icmp eq <4 x i32> %67, <i32 1, i32 1, i32 1, i32 1>
  %69 = sitofp <4 x i1> %68 to <4 x double>
  %70 = fcmp oeq <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %72) #6
  %74 = icmp eq <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %75 = sitofp <4 x i1> %74 to <4 x double>
  %76 = fcmp oeq <4 x double> %75, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %77 = sext <4 x i1> %76 to <4 x i64>
  %78 = bitcast <4 x i64> %77 to <4 x double>
  %79 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %78) #6
  %80 = add <4 x i32> %63, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %81 = ashr <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  %82 = add nsw <4 x i32> %81, <i32 1023, i32 1023, i32 1023, i32 1023>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %84 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %85 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %86 = shl <4 x i32> %85, <i32 20, i32 20, i32 20, i32 20>
  %87 = and <4 x i32> %84, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = bitcast <4 x i32> %86 to <2 x i64>
  %90 = bitcast <4 x i32> %88 to <2 x i64>
  %91 = shufflevector <2 x i64> %89, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <2 x i64> %90, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %93 = shufflevector <4 x i64> %91, <4 x i64> %92, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %94 = bitcast <4 x i64> %93 to <4 x double>
  %95 = fmul <4 x double> %79, %94
  %96 = sub <4 x i32> %80, %81
  %97 = add <4 x i32> %96, <i32 1023, i32 1023, i32 1023, i32 1023>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %99 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %100 = and <4 x i32> %98, <i32 0, i32 -1, i32 0, i32 -1>
  %101 = shl <4 x i32> %100, <i32 20, i32 20, i32 20, i32 20>
  %102 = and <4 x i32> %99, <i32 0, i32 -1, i32 0, i32 -1>
  %103 = shl <4 x i32> %102, <i32 20, i32 20, i32 20, i32 20>
  %104 = bitcast <4 x i32> %101 to <2 x i64>
  %105 = bitcast <4 x i32> %103 to <2 x i64>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <4 x double>
  %110 = fmul <4 x double> %95, %109
  %111 = bitcast <4 x double> %110 to <4 x i64>
  %112 = bitcast <4 x double> %59 to <4 x i64>
  %113 = and <4 x i64> %112, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %114 = xor <4 x i64> %113, %111
  %115 = bitcast <4 x i64> %114 to <4 x double>
  %116 = and <4 x i64> %112, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %117, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #6
  %119 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %118, <4 x double> %117, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #6
  %120 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %119, <4 x double> %117, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #6
  %121 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %120, <4 x double> %117, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #6
  %122 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %121, <4 x double> %117, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #6
  %123 = fmul <4 x double> %122, %122
  %124 = fmul <4 x double> %123, %123
  %125 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %117, <4 x double> %124, <4 x double> %125) #6
  %127 = fmul <4 x double> %126, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %128 = fsub <4 x double> %122, %127
  %129 = fmul <4 x double> %128, %117
  %130 = fmul <4 x double> %128, %129
  %131 = fmul <4 x double> %130, <double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555, double 0x3FE5555555555555>
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %130, <4 x double> %128, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>) #6
  %133 = fmul <4 x double> %132, %131
  %134 = fsub <4 x double> %130, %133
  %135 = fmul <4 x double> %134, %115
  ret <4 x double> %135
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_cbrtd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %6 = bitcast <4 x double> %5 to <4 x i64>
  %7 = fmul <4 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %4, <4 x double> %7, <4 x double> %5) #6
  %9 = bitcast <4 x double> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = shufflevector <4 x i32> %15, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <2 x i64> %17, <2 x i64> %14, <2 x i32> <i32 2, i32 1>
  %19 = bitcast <2 x i64> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 20, i32 20, i32 20, i32 20>
  %21 = and <4 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %22) #6
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %24) #6
  %26 = bitcast <16 x i8> %25 to <4 x i32>
  %27 = sub <4 x i32> %20, %26
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = add nsw <4 x i32> %30, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %33 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %34 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = bitcast <4 x i32> %35 to <2 x i64>
  %39 = bitcast <4 x i32> %37 to <2 x i64>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <4 x double>
  %44 = fmul <4 x double> %43, %0
  %45 = sub <4 x i32> %29, %30
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 1023, i32 1023>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %48 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %49 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %52 = shl <4 x i32> %51, <i32 20, i32 20, i32 20, i32 20>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <4 x double>
  %59 = fmul <4 x double> %44, %58
  %60 = sitofp <4 x i32> %28 to <4 x double>
  %61 = fadd <4 x double> %60, <double 6.144000e+03, double 6.144000e+03, double 6.144000e+03, double 6.144000e+03>
  %62 = fmul <4 x double> %61, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %63 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %62) #6
  %64 = sitofp <4 x i32> %63 to <4 x double>
  %65 = fmul <4 x double> %64, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %66 = fsub <4 x double> %61, %65
  %67 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %66) #6
  %68 = icmp eq <4 x i32> %67, <i32 1, i32 1, i32 1, i32 1>
  %69 = sitofp <4 x i1> %68 to <4 x double>
  %70 = fcmp oeq <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> zeroinitializer, <4 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <4 x double> %72) #6
  %75 = icmp eq <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %76 = sitofp <4 x i1> %75 to <4 x double>
  %77 = fcmp oeq <4 x double> %76, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %78 = sext <4 x i1> %77 to <4 x i64>
  %79 = bitcast <4 x i64> %78 to <4 x double>
  %80 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <4 x double> %79) #6
  %81 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <4 x double> %79) #6
  %82 = bitcast <4 x double> %80 to <4 x i64>
  %83 = bitcast <4 x double> %59 to <4 x i64>
  %84 = and <4 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = xor <4 x i64> %84, %82
  %86 = bitcast <4 x i64> %85 to <4 x double>
  %87 = bitcast <4 x double> %81 to <4 x i64>
  %88 = xor <4 x i64> %84, %87
  %89 = bitcast <4 x i64> %88 to <4 x double>
  %90 = and <4 x i64> %83, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %91 = bitcast <4 x i64> %90 to <4 x double>
  %92 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>, <4 x double> %91, <4 x double> <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>) #6
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %91, <4 x double> <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %93, <4 x double> %91, <4 x double> <double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911, double 0x401828DC834C5911>) #6
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %94, <4 x double> %91, <4 x double> <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>) #6
  %96 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %95, <4 x double> %91, <4 x double> <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>) #6
  %97 = fmul <4 x double> %96, %96
  %98 = fmul <4 x double> %97, %97
  %99 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %91, <4 x double> %98, <4 x double> %99) #6
  %101 = fmul <4 x double> %100, <double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555, double 0x3FD5555555555555>
  %102 = fsub <4 x double> %96, %101
  %103 = fmul <4 x double> %102, %102
  %104 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %103
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %102, <4 x double> %104) #6
  %106 = fmul <4 x double> %103, %103
  %107 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %106
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %103, <4 x double> %107) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %105, <4 x double> %103, <4 x double> %108) #6
  %110 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %103, <4 x double> %105, <4 x double> %109) #6
  %111 = fmul <4 x double> %106, %91
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %106, <4 x double> %91, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %110, <4 x double> %91, <4 x double> %113) #6
  %115 = bitcast <4 x double> %102 to <4 x i64>
  %116 = xor <4 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <4 x i64> %116 to <4 x double>
  %118 = fadd <4 x double> %111, %117
  %119 = fsub <4 x double> %118, %111
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %111, %120
  %122 = fsub <4 x double> %117, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %114, %123
  %125 = fadd <4 x double> %118, %124
  %126 = fmul <4 x double> %125, <double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555, double 0xBFE5555555555555>
  %127 = fmul <4 x double> %102, %126
  %128 = fadd <4 x double> %103, %127
  %129 = fsub <4 x double> %128, %103
  %130 = fsub <4 x double> %128, %129
  %131 = fsub <4 x double> %103, %130
  %132 = fsub <4 x double> %127, %129
  %133 = fadd <4 x double> %132, %131
  %134 = fadd <4 x double> %105, %133
  %135 = fmul <4 x double> %128, %91
  %136 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %135
  %137 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %128, <4 x double> %91, <4 x double> %136) #6
  %138 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %134, <4 x double> %91, <4 x double> %137) #6
  %139 = fmul <4 x double> %135, %86
  %140 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %139
  %141 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %86, <4 x double> %140) #6
  %142 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %138, <4 x double> %86, <4 x double> %141) #6
  %143 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %135, <4 x double> %89, <4 x double> %142) #6
  %144 = fadd <4 x double> %143, %139
  %145 = add <4 x i32> %63, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %146 = ashr <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %147 = add nsw <4 x i32> %146, <i32 1023, i32 1023, i32 1023, i32 1023>
  %148 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %149 = shufflevector <4 x i32> %147, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %150 = and <4 x i32> %148, <i32 0, i32 -1, i32 0, i32 -1>
  %151 = shl <4 x i32> %150, <i32 20, i32 20, i32 20, i32 20>
  %152 = and <4 x i32> %149, <i32 0, i32 -1, i32 0, i32 -1>
  %153 = shl <4 x i32> %152, <i32 20, i32 20, i32 20, i32 20>
  %154 = bitcast <4 x i32> %151 to <2 x i64>
  %155 = bitcast <4 x i32> %153 to <2 x i64>
  %156 = shufflevector <2 x i64> %154, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = bitcast <4 x i64> %158 to <4 x double>
  %160 = fmul <4 x double> %144, %159
  %161 = sub <4 x i32> %145, %146
  %162 = add <4 x i32> %161, <i32 1023, i32 1023, i32 1023, i32 1023>
  %163 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %164 = shufflevector <4 x i32> %162, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %165 = and <4 x i32> %163, <i32 0, i32 -1, i32 0, i32 -1>
  %166 = shl <4 x i32> %165, <i32 20, i32 20, i32 20, i32 20>
  %167 = and <4 x i32> %164, <i32 0, i32 -1, i32 0, i32 -1>
  %168 = shl <4 x i32> %167, <i32 20, i32 20, i32 20, i32 20>
  %169 = bitcast <4 x i32> %166 to <2 x i64>
  %170 = bitcast <4 x i32> %168 to <2 x i64>
  %171 = shufflevector <2 x i64> %169, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = shufflevector <2 x i64> %170, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %173 = shufflevector <4 x i64> %171, <4 x i64> %172, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %174 = bitcast <4 x i64> %173 to <4 x double>
  %175 = fmul <4 x double> %160, %174
  %176 = fcmp oeq <4 x double> %91, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = sext <4 x i1> %176 to <4 x i64>
  %178 = and <4 x i64> %85, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %179 = or <4 x i64> %178, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %180 = bitcast <4 x i64> %179 to <4 x double>
  %181 = bitcast <4 x i64> %177 to <4 x double>
  %182 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %175, <4 x double> %180, <4 x double> %181) #6
  %183 = fcmp oeq <4 x double> %91, zeroinitializer
  %184 = sext <4 x i1> %183 to <4 x i64>
  %185 = bitcast <4 x i64> %178 to <4 x double>
  %186 = bitcast <4 x i64> %184 to <4 x double>
  %187 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %182, <4 x double> %185, <4 x double> %186) #6
  ret <4 x double> %187
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_expm1d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, zeroinitializer
  %3 = fmul <4 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %3, i32 8) #6
  %5 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %4) #6
  %6 = fmul <4 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <4 x double> %6, %0
  %8 = fsub <4 x double> %7, %0
  %9 = fsub <4 x double> %7, %8
  %10 = fsub <4 x double> %0, %9
  %11 = fsub <4 x double> %6, %8
  %12 = fadd <4 x double> %11, %10
  %13 = fadd <4 x double> %12, zeroinitializer
  %14 = fmul <4 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <4 x double> %14, %7
  %16 = fsub <4 x double> %15, %7
  %17 = fsub <4 x double> %15, %16
  %18 = fsub <4 x double> %7, %17
  %19 = fsub <4 x double> %14, %16
  %20 = fadd <4 x double> %19, %18
  %21 = fadd <4 x double> %20, %13
  %22 = fmul <4 x double> %15, %15
  %23 = fadd <4 x double> %15, %15
  %24 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %22
  %25 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> %15, <4 x double> %24) #6
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %21, <4 x double> %25) #6
  %27 = fmul <4 x double> %22, %22
  %28 = fadd <4 x double> %22, %22
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %22, <4 x double> %29) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %26, <4 x double> %30) #6
  %32 = fmul <4 x double> %27, %27
  %33 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %34, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %22, <4 x double> %37, <4 x double> %38) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %36, <4 x double> %39) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %33, <4 x double> %40) #6
  %42 = fmul <4 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %43 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %42
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %15, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %43) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %44) #6
  %46 = fadd <4 x double> %42, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %47 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %46
  %48 = fadd <4 x double> %42, %47
  %49 = fadd <4 x double> %48, %45
  %50 = fmul <4 x double> %15, %46
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %50
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %15, <4 x double> %51) #6
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %15, <4 x double> %52) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %46, <4 x double> %21, <4 x double> %53) #6
  %55 = fadd <4 x double> %50, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %57 = fadd <4 x double> %50, %56
  %58 = fadd <4 x double> %57, %54
  %59 = fmul <4 x double> %15, %55
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %59
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %15, <4 x double> %60) #6
  %62 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %15, <4 x double> %61) #6
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %62) #6
  %64 = fadd <4 x double> %59, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %65 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %64
  %66 = fadd <4 x double> %59, %65
  %67 = fadd <4 x double> %66, %63
  %68 = fmul <4 x double> %27, %41
  %69 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %68
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %41, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %41, <4 x double> %70) #6
  %72 = fadd <4 x double> %64, %68
  %73 = fsub <4 x double> %64, %72
  %74 = fadd <4 x double> %68, %73
  %75 = fadd <4 x double> %74, %67
  %76 = fadd <4 x double> %75, %71
  %77 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %78 = add nsw <4 x i32> %77, <i32 1023, i32 1023, i32 1023, i32 1023>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %80 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %81 = and <4 x i32> %79, <i32 0, i32 -1, i32 0, i32 -1>
  %82 = shl <4 x i32> %81, <i32 20, i32 20, i32 20, i32 20>
  %83 = and <4 x i32> %80, <i32 0, i32 -1, i32 0, i32 -1>
  %84 = shl <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = bitcast <4 x i32> %82 to <2 x i64>
  %86 = bitcast <4 x i32> %84 to <2 x i64>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <4 x double>
  %91 = fmul <4 x double> %72, %90
  %92 = sub <4 x i32> %5, %77
  %93 = add <4 x i32> %92, <i32 1023, i32 1023, i32 1023, i32 1023>
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %95 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %96 = and <4 x i32> %94, <i32 0, i32 -1, i32 0, i32 -1>
  %97 = shl <4 x i32> %96, <i32 20, i32 20, i32 20, i32 20>
  %98 = and <4 x i32> %95, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = bitcast <4 x i32> %97 to <2 x i64>
  %101 = bitcast <4 x i32> %99 to <2 x i64>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <4 x double>
  %106 = fmul <4 x double> %91, %105
  %107 = fmul <4 x double> %76, %90
  %108 = fmul <4 x double> %107, %105
  %109 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %110 = bitcast <4 x double> %109 to <4 x i64>
  %111 = bitcast <4 x double> %106 to <4 x i64>
  %112 = xor <4 x i64> %110, <i64 -1, i64 -1, i64 -1, i64 -1>
  %113 = and <4 x i64> %112, %111
  %114 = bitcast <4 x double> %108 to <4 x i64>
  %115 = and <4 x i64> %114, %112
  %116 = bitcast <4 x i64> %113 to <4 x double>
  %117 = bitcast <4 x i64> %115 to <4 x double>
  %118 = fadd <4 x double> %116, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %119 = fsub <4 x double> %118, %116
  %120 = fsub <4 x double> %118, %119
  %121 = fsub <4 x double> %116, %120
  %122 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %119
  %123 = fadd <4 x double> %122, %121
  %124 = fadd <4 x double> %123, %117
  %125 = fadd <4 x double> %118, %124
  %126 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>, i8 30) #6
  %127 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %125, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %126) #6
  %128 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>, i8 17) #6
  %129 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %127, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, <4 x double> %128) #6
  %130 = bitcast <4 x double> %0 to <4 x i64>
  %131 = xor <4 x i64> %130, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %132 = bitcast <4 x i64> %131 to <4 x double>
  %133 = fcmp oeq <4 x double> %132, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %134 = sext <4 x i1> %133 to <4 x i64>
  %135 = bitcast <4 x i64> %134 to <4 x double>
  %136 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %129, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %135) #6
  ret <4 x double> %136
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log10d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>, <4 x double> <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>, <4 x double> <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>, <4 x double> <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %81, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>, <4 x double> %81, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>, <4 x double> %81, <4 x double> %84) #6
  %86 = fmul <4 x double> %62, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %87 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %86
  %88 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %87) #6
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>, <4 x double> %88) #6
  %90 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>, <4 x double> %89) #6
  %91 = fadd <4 x double> %82, %86
  %92 = fsub <4 x double> %82, %91
  %93 = fadd <4 x double> %86, %92
  %94 = fadd <4 x double> %85, %93
  %95 = fadd <4 x double> %90, %94
  %96 = fmul <4 x double> %62, %71
  %97 = fmul <4 x double> %79, %96
  %98 = fadd <4 x double> %91, %97
  %99 = fsub <4 x double> %91, %98
  %100 = fadd <4 x double> %97, %99
  %101 = fadd <4 x double> %100, %95
  %102 = fadd <4 x double> %98, %101
  %103 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %104 = sext <4 x i1> %103 to <4 x i64>
  %105 = bitcast <4 x i64> %104 to <4 x double>
  %106 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %102, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %105) #6
  %107 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %108 = fcmp uno <4 x double> %5, zeroinitializer
  %109 = select <4 x i1> %108, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %107
  %110 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %106, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %109) #6
  %111 = fcmp oeq <4 x double> %5, zeroinitializer
  %112 = sext <4 x i1> %111 to <4 x i64>
  %113 = bitcast <4 x i64> %112 to <4 x double>
  %114 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %110, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %113) #6
  ret <4 x double> %114
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log2d4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %49, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <4 x double> %49, %50
  %52 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %51
  %53 = fsub <4 x double> %40, %50
  %54 = fadd <4 x double> %53, %52
  %55 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %56 = fadd <4 x double> %55, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %57
  %59 = fsub <4 x double> %40, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %55
  %62 = fmul <4 x double> %49, %61
  %63 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %62
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %49, <4 x double> %63) #6
  %65 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %66 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %65, <4 x double> %61, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %60
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %61, <4 x double> %66) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %61, <4 x double> %64) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %68, <4 x double> %69) #6
  %71 = fmul <4 x double> %62, %62
  %72 = fmul <4 x double> %71, %71
  %73 = fmul <4 x double> %72, %72
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #6
  %75 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %74) #6
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %71, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #6
  %78 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %72, <4 x double> %76, <4 x double> %77) #6
  %79 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %73, <4 x double> %75, <4 x double> %78) #6
  %80 = bitcast <16 x i8> %48 to <4 x i32>
  %81 = sitofp <4 x i32> %80 to <4 x double>
  %82 = fmul <4 x double> %62, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %83 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %82
  %84 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %83) #6
  %85 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %70, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %84) #6
  %86 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>, <4 x double> %85) #6
  %87 = fadd <4 x double> %82, %81
  %88 = fsub <4 x double> %87, %81
  %89 = fsub <4 x double> %87, %88
  %90 = fsub <4 x double> %81, %89
  %91 = fsub <4 x double> %82, %88
  %92 = fadd <4 x double> %91, %90
  %93 = fadd <4 x double> %86, %92
  %94 = fmul <4 x double> %62, %71
  %95 = fmul <4 x double> %79, %94
  %96 = fadd <4 x double> %87, %95
  %97 = fsub <4 x double> %96, %87
  %98 = fsub <4 x double> %96, %97
  %99 = fsub <4 x double> %87, %98
  %100 = fsub <4 x double> %95, %97
  %101 = fadd <4 x double> %100, %99
  %102 = fadd <4 x double> %93, %101
  %103 = fadd <4 x double> %96, %102
  %104 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %105 = sext <4 x i1> %104 to <4 x i64>
  %106 = bitcast <4 x i64> %105 to <4 x double>
  %107 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %103, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %106) #6
  %108 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %109 = fcmp uno <4 x double> %5, zeroinitializer
  %110 = select <4 x i1> %109, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %108
  %111 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %107, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %110) #6
  %112 = fcmp oeq <4 x double> %5, zeroinitializer
  %113 = sext <4 x i1> %112 to <4 x i64>
  %114 = bitcast <4 x i64> %113 to <4 x double>
  %115 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %111, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %114) #6
  ret <4 x double> %115
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log2d4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %3 = bitcast <4 x double> %2 to <4 x i64>
  %4 = fmul <4 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %4, <4 x double> %2) #6
  %6 = fmul <4 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <4 x double> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = bitcast <2 x i64> %9 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <2 x i64> %15, <2 x i64> %12, <2 x i32> <i32 2, i32 1>
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = lshr <4 x i32> %17, <i32 20, i32 20, i32 20, i32 20>
  %19 = and <4 x i32> %18, <i32 2047, i32 2047, i32 2047, i32 2047>
  %20 = add nsw <4 x i32> %19, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %21 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %19
  %22 = bitcast <4 x double> %5 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %26 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %27 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = shl <4 x i32> %29, <i32 20, i32 20, i32 20, i32 20>
  %31 = bitcast <2 x i64> %23 to <4 x i32>
  %32 = add <4 x i32> %28, %31
  %33 = bitcast <2 x i64> %24 to <4 x i32>
  %34 = add <4 x i32> %30, %33
  %35 = bitcast <4 x i32> %32 to <2 x i64>
  %36 = bitcast <4 x i32> %34 to <2 x i64>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = and <4 x i64> %3, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %42 = bitcast <4 x i64> %41 to <4 x double>
  %43 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %42) #6
  %44 = add nsw <4 x i32> %19, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %45 = bitcast <4 x i32> %20 to <16 x i8>
  %46 = bitcast <4 x i32> %44 to <16 x i8>
  %47 = bitcast <4 x i32> %43 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %45, <16 x i8> %46, <16 x i8> %47) #6
  %49 = fadd <4 x double> %40, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %50 = fadd <4 x double> %40, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %51 = fdiv <4 x double> %49, %50
  %52 = fmul <4 x double> %51, %51
  %53 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>, <4 x double> %52, <4 x double> <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>) #6
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %53, <4 x double> %52, <4 x double> <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>) #6
  %55 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %54, <4 x double> %52, <4 x double> <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>) #6
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %52, <4 x double> <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %52, <4 x double> <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %52, <4 x double> <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>) #6
  %59 = bitcast <16 x i8> %48 to <4 x i32>
  %60 = sitofp <4 x i32> %59 to <4 x double>
  %61 = fmul <4 x double> %51, <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> <double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE, double 0x40071547652B82FE>, <4 x double> %62) #6
  %64 = fadd <4 x double> %61, %60
  %65 = fsub <4 x double> %60, %64
  %66 = fadd <4 x double> %61, %65
  %67 = fadd <4 x double> %63, %66
  %68 = fmul <4 x double> %51, %52
  %69 = fadd <4 x double> %64, %67
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %58, <4 x double> %68, <4 x double> %69) #6
  %71 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %72 = sext <4 x i1> %71 to <4 x i64>
  %73 = bitcast <4 x i64> %72 to <4 x double>
  %74 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %70, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %73) #6
  %75 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> zeroinitializer, i8 17) #6
  %76 = fcmp uno <4 x double> %5, zeroinitializer
  %77 = select <4 x i1> %76, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %75
  %78 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %74, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %77) #6
  %79 = fcmp oeq <4 x double> %5, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i64>
  %81 = bitcast <4 x i64> %80 to <4 x double>
  %82 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %81) #6
  ret <4 x double> %82
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_log1pd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %3 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %4 = bitcast <4 x double> %3 to <4 x i64>
  %5 = fmul <4 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %5, <4 x double> %3) #6
  %7 = fmul <4 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = bitcast <2 x i64> %10 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> %13, <2 x i32> <i32 2, i32 1>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1023, i32 -1023, i32 -1023, i32 -1023>
  %22 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, %20
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %24 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %25 = and <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = add <4 x i32> %26, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %30 = add <4 x i32> %28, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = bitcast <4 x i32> %30 to <2 x i64>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = fadd <4 x double> %36, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %36, <4 x double> %37) #6
  %39 = and <4 x i64> %4, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %40 = bitcast <4 x i64> %39 to <4 x double>
  %41 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %40) #6
  %42 = add nsw <4 x i32> %20, <i32 -1087, i32 -1087, i32 -1087, i32 -1087>
  %43 = bitcast <4 x i32> %21 to <16 x i8>
  %44 = bitcast <4 x i32> %42 to <16 x i8>
  %45 = bitcast <4 x i32> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #6
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = sitofp <4 x i32> %47 to <4 x double>
  %49 = fmul <4 x double> %48, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %50 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %49
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %48, <4 x double> %50) #6
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %48, <4 x double> %51) #6
  %53 = fadd <4 x double> %38, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %54 = fsub <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, %53
  %55 = fadd <4 x double> %38, %54
  %56 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %53
  %57 = fmul <4 x double> %38, %56
  %58 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %57
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %56, <4 x double> %38, <4 x double> %58) #6
  %60 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %53
  %61 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %56, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %55
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %62, <4 x double> %56, <4 x double> %61) #6
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %56, <4 x double> %59) #6
  %65 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %57, <4 x double> %63, <4 x double> %64) #6
  %66 = fmul <4 x double> %57, %57
  %67 = fmul <4 x double> %66, %66
  %68 = fmul <4 x double> %67, %67
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>, <4 x double> <double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035, double 0x3FC747353A506035>) #6
  %70 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>, <4 x double> %69) #6
  %71 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>, <4 x double> <double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245, double 0x3FD249249A68A245>) #6
  %72 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %66, <4 x double> <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>, <4 x double> <double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE, double 0x3FE55555555557AE>) #6
  %73 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %67, <4 x double> %71, <4 x double> %72) #6
  %74 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %68, <4 x double> %70, <4 x double> %73) #6
  %75 = fmul <4 x double> %57, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %76 = fmul <4 x double> %65, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %77 = fadd <4 x double> %75, %49
  %78 = fsub <4 x double> %49, %77
  %79 = fadd <4 x double> %75, %78
  %80 = fadd <4 x double> %52, %79
  %81 = fadd <4 x double> %80, %76
  %82 = fmul <4 x double> %57, %66
  %83 = fmul <4 x double> %82, %74
  %84 = fadd <4 x double> %77, %83
  %85 = fsub <4 x double> %77, %84
  %86 = fadd <4 x double> %83, %85
  %87 = fadd <4 x double> %81, %86
  %88 = fadd <4 x double> %84, %87
  %89 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>, i8 30) #6
  %90 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %89) #6
  %91 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, i8 17) #6
  %92 = fcmp uno <4 x double> %0, zeroinitializer
  %93 = select <4 x i1> %92, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %91
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %90, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #6
  %95 = fcmp oeq <4 x double> %0, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %96 = sext <4 x i1> %95 to <4 x i64>
  %97 = bitcast <4 x i64> %96 to <4 x double>
  %98 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %94, <4 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>, <4 x double> %97) #6
  %99 = bitcast <4 x double> %0 to <4 x i64>
  %100 = xor <4 x i64> %99, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %101 = bitcast <4 x i64> %100 to <4 x double>
  %102 = fcmp oeq <4 x double> %101, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %103 = sext <4 x i1> %102 to <4 x i64>
  %104 = bitcast <4 x i64> %103 to <4 x double>
  %105 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %98, <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %104) #6
  ret <4 x double> %105
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_finz_fabsd4_fma4(<4 x double>) local_unnamed_addr #3 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  ret <4 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x double> @Sleef_finz_copysignd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #3 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <4 x double>
  ret <4 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmaxd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %0, <4 x double> %1) #6
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmind4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <4 x double> %1, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %0, <4 x double> %1) #6
  %6 = bitcast <4 x i64> %4 to <4 x double>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %0, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fdimd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fsub <4 x double> %0, %1
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> zeroinitializer, i8 17) #6
  %5 = fcmp oeq <4 x double> %0, %1
  %6 = select <4 x i1> %5, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %4
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> zeroinitializer, <4 x double> %6) #6
  ret <4 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_truncd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_floord4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #6
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 17) #6
  %11 = fadd <4 x double> %9, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %11, <4 x double> %10) #6
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #6
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_ceild4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fmul <4 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %2) #6
  %4 = sitofp <4 x i32> %3 to <4 x double>
  %5 = fmul <4 x double> %4, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %6 = fsub <4 x double> %0, %5
  %7 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %6) #6
  %8 = sitofp <4 x i32> %7 to <4 x double>
  %9 = fsub <4 x double> %6, %8
  %10 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %9, <4 x double> zeroinitializer, i8 18) #6
  %11 = fadd <4 x double> %9, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %12 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %9, <4 x double> %10) #6
  %13 = bitcast <4 x double> %0 to <4 x i64>
  %14 = and <4 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %18 = fsub <4 x double> %0, %12
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <4 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <4 x i64> %20, %21
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = select <4 x i1> %16, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %17
  %25 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %23, <4 x double> %0, <4 x double> %24) #6
  ret <4 x double> %25
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_roundd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = fadd <4 x double> %0, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <4 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %3) #6
  %5 = sitofp <4 x i32> %4 to <4 x double>
  %6 = fmul <4 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <4 x double> %2, %6
  %8 = tail call <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double> %7) #6
  %9 = sitofp <4 x i32> %8 to <4 x double>
  %10 = fsub <4 x double> %7, %9
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %2, <4 x double> zeroinitializer, i8 18) #6
  %12 = fcmp oeq <4 x double> %10, zeroinitializer
  %13 = fadd <4 x double> %2, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %14 = select <4 x i1> %12, <4 x double> %11, <4 x double> zeroinitializer
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %2, <4 x double> %13, <4 x double> %14) #6
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> zeroinitializer, i8 17) #6
  %17 = fadd <4 x double> %10, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %17, <4 x double> %16) #6
  %19 = fcmp oeq <4 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> zeroinitializer, <4 x double> %21) #6
  %23 = bitcast <4 x double> %0 to <4 x i64>
  %24 = and <4 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <4 x i64> %24 to <4 x double>
  %26 = fcmp oeq <4 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %25, <4 x double> <double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000, double 0x4330000000000000>, i8 29) #6
  %28 = fsub <4 x double> %22, %18
  %29 = bitcast <4 x double> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %31 = and <4 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = or <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = select <4 x i1> %26, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %27
  %35 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> %0, <4 x double> %34) #6
  ret <4 x double> %35
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_rintd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 8) #6
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_nextafterd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <4 x double> %0, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i64>
  %5 = bitcast <4 x double> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <4 x i64> %6 to <4 x double>
  %8 = bitcast <4 x i64> %4 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %7, <4 x double> %8) #6
  %10 = bitcast <4 x double> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = and <4 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %14 = xor <4 x i64> %13, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %15 = bitcast <4 x i64> %14 to <4 x double>
  %16 = fcmp oeq <4 x double> %15, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %17 = sext <4 x i1> %16 to <4 x i64>
  %18 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %1, <4 x double> %9, i8 29) #6
  %19 = bitcast <4 x double> %18 to <4 x i64>
  %20 = xor <4 x i64> %17, %19
  %21 = bitcast <2 x i64> %11 to <4 x i32>
  %22 = xor <4 x i32> %21, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %23 = add <4 x i32> %22, <i32 1, i32 0, i32 1, i32 0>
  %24 = bitcast <2 x i64> %12 to <4 x i32>
  %25 = xor <4 x i32> %24, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %26 = add <4 x i32> %25, <i32 1, i32 0, i32 1, i32 0>
  %27 = icmp eq <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = icmp eq <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %30 = sext <4 x i1> %29 to <4 x i32>
  %31 = bitcast <4 x i32> %28 to <2 x i64>
  %32 = bitcast <4 x i32> %30 to <2 x i64>
  %33 = and <2 x i64> %31, <i64 1, i64 1>
  %34 = and <2 x i64> %32, <i64 1, i64 1>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <2 x i64> %41 to <4 x i32>
  %44 = add <4 x i32> %23, %43
  %45 = bitcast <2 x i64> %42 to <4 x i32>
  %46 = add <4 x i32> %26, %45
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = bitcast <4 x i64> %20 to <4 x double>
  %54 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %52, <4 x double> %53) #6
  %55 = bitcast <4 x double> %54 to <4 x i64>
  %56 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %57 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %58 = fcmp une <4 x double> %9, %1
  %59 = sext <4 x i1> %58 to <4 x i64>
  %60 = and <4 x i64> %59, <i64 1, i64 1, i64 1, i64 1>
  %61 = shufflevector <4 x i64> %60, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %62 = shufflevector <4 x i64> %60, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %63 = bitcast <2 x i64> %56 to <4 x i32>
  %64 = bitcast <2 x i64> %61 to <4 x i32>
  %65 = sub <4 x i32> %63, %64
  %66 = bitcast <2 x i64> %57 to <4 x i32>
  %67 = bitcast <2 x i64> %62 to <4 x i32>
  %68 = sub <4 x i32> %66, %67
  %69 = bitcast <4 x i32> %65 to <2 x i64>
  %70 = bitcast <4 x i32> %68 to <2 x i64>
  %71 = icmp eq <4 x i32> %65, <i32 -1, i32 0, i32 -1, i32 0>
  %72 = sext <4 x i1> %71 to <4 x i32>
  %73 = icmp eq <4 x i32> %68, <i32 -1, i32 0, i32 -1, i32 0>
  %74 = sext <4 x i1> %73 to <4 x i32>
  %75 = bitcast <4 x i32> %72 to <2 x i64>
  %76 = bitcast <4 x i32> %74 to <2 x i64>
  %77 = and <2 x i64> %75, <i64 4294967295, i64 4294967295>
  %78 = and <2 x i64> %76, <i64 4294967295, i64 4294967295>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = shufflevector <8 x float> %82, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %84 = bitcast <8 x float> %83 to <4 x i64>
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast <2 x i64> %85 to <4 x i32>
  %88 = add <4 x i32> %65, %87
  %89 = bitcast <2 x i64> %86 to <4 x i32>
  %90 = add <4 x i32> %68, %89
  %91 = bitcast <4 x i32> %88 to <2 x i64>
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = shufflevector <2 x i64> %69, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %70, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <4 x double>
  %101 = bitcast <4 x i64> %59 to <4 x double>
  %102 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %100, <4 x double> %96, <4 x double> %101) #6
  %103 = bitcast <4 x double> %102 to <4 x i64>
  %104 = shufflevector <4 x i64> %103, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %105 = shufflevector <4 x i64> %103, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %106 = bitcast <2 x i64> %104 to <4 x i32>
  %107 = xor <4 x i32> %106, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %108 = add <4 x i32> %107, <i32 1, i32 0, i32 1, i32 0>
  %109 = bitcast <2 x i64> %105 to <4 x i32>
  %110 = xor <4 x i32> %109, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %111 = add <4 x i32> %110, <i32 1, i32 0, i32 1, i32 0>
  %112 = icmp eq <4 x i32> %108, <i32 0, i32 -1, i32 0, i32 -1>
  %113 = sext <4 x i1> %112 to <4 x i32>
  %114 = icmp eq <4 x i32> %111, <i32 0, i32 -1, i32 0, i32 -1>
  %115 = sext <4 x i1> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %113 to <2 x i64>
  %117 = bitcast <4 x i32> %115 to <2 x i64>
  %118 = and <2 x i64> %116, <i64 1, i64 1>
  %119 = and <2 x i64> %117, <i64 1, i64 1>
  %120 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <4 x i64> %120, <4 x i64> %121, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = shufflevector <8 x float> %123, <8 x float> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6>
  %125 = bitcast <8 x float> %124 to <4 x i64>
  %126 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %127 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %128 = bitcast <2 x i64> %126 to <4 x i32>
  %129 = add <4 x i32> %108, %128
  %130 = bitcast <2 x i64> %127 to <4 x i32>
  %131 = add <4 x i32> %111, %130
  %132 = bitcast <4 x i32> %129 to <2 x i64>
  %133 = bitcast <4 x i32> %131 to <2 x i64>
  %134 = shufflevector <2 x i64> %132, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %135 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <4 x i64> %134, <4 x i64> %135, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %137 = bitcast <4 x i64> %136 to <4 x double>
  %138 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %102, <4 x double> %137, <4 x double> %53) #6
  %139 = fcmp oeq <4 x double> %138, zeroinitializer
  %140 = fcmp une <4 x double> %9, zeroinitializer
  %141 = and <4 x i1> %139, %140
  %142 = sext <4 x i1> %141 to <4 x i64>
  %143 = bitcast <4 x i64> %13 to <4 x double>
  %144 = bitcast <4 x i64> %142 to <4 x double>
  %145 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %138, <4 x double> %143, <4 x double> %144) #6
  %146 = fcmp oeq <4 x double> %9, zeroinitializer
  %147 = fcmp oeq <4 x double> %1, zeroinitializer
  %148 = and <4 x i1> %146, %147
  %149 = sext <4 x i1> %148 to <4 x i64>
  %150 = bitcast <4 x i64> %149 to <4 x double>
  %151 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %145, <4 x double> %1, <4 x double> %150) #6
  %152 = fcmp uno <4 x double> %9, %1
  %153 = sext <4 x i1> %152 to <4 x i64>
  %154 = bitcast <4 x i64> %153 to <4 x double>
  %155 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %151, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %154) #6
  ret <4 x double> %155
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_frfrexpd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #6
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <4 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912, i64 4602678819172646912>
  %11 = bitcast <4 x i64> %10 to <4 x double>
  %12 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <4 x i64> %12 to <4 x double>
  %14 = fcmp oeq <4 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %15 = sext <4 x i1> %14 to <4 x i64>
  %16 = and <4 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %17 = or <4 x i64> %16, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %18 = bitcast <4 x i64> %17 to <4 x double>
  %19 = bitcast <4 x i64> %15 to <4 x double>
  %20 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %11, <4 x double> %18, <4 x double> %19) #6
  %21 = fcmp oeq <4 x double> %7, zeroinitializer
  %22 = sext <4 x i1> %21 to <4 x i64>
  %23 = bitcast <4 x i64> %22 to <4 x double>
  %24 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %20, <4 x double> %7, <4 x double> %23) #6
  ret <4 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_finz_expfrexpd4_fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = bitcast <4 x double> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <4 x i64> %3 to <4 x double>
  %5 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %4, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %6 = fmul <4 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> %6, <4 x double> %5) #6
  %8 = bitcast <4 x double> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = bitcast <2 x i64> %10 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <2 x i64> %16, <2 x i64> %13, <2 x i32> <i32 2, i32 1>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 20, i32 20, i32 20, i32 20>
  %20 = and <4 x i32> %19, <i32 2047, i32 2047, i32 2047, i32 2047>
  %21 = add nsw <4 x i32> %20, <i32 -1022, i32 -1022, i32 -1022, i32 -1022>
  %22 = fcmp ueq <4 x double> %7, zeroinitializer
  %23 = and <4 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %24 = bitcast <4 x i64> %23 to <4 x double>
  %25 = fcmp oeq <4 x double> %24, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <4 x i1> %25, %22
  %27 = sext <4 x i1> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = bitcast <4 x i32> %21 to <16 x i8>
  %30 = bitcast <2 x i64> %28 to <16 x i8>
  %31 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %29, <16 x i8> zeroinitializer, <16 x i8> %30) #6
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmad4_fma4(<4 x double>, <4 x double>, <4 x double>) local_unnamed_addr #0 {
  %4 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %0, <4 x double> %1, <4 x double> %2) #6
  ret <4 x double> %4
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sqrtd4_u05fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #6
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #6
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #6
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #6
  %8 = bitcast <4 x double> %6 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %12
  %16 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %14
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = bitcast <4 x i32> %16 to <2 x i64>
  %19 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = fmul <4 x double> %6, %22
  %24 = fmul <4 x double> %22, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %23
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %24, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %26, <4 x double> %23) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %26, <4 x double> %24) #6
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %28, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %30, <4 x double> %27) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %30, <4 x double> %28) #6
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %31
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %34, <4 x double> %31) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %34, <4 x double> %32) #6
  %37 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %36, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #6
  %39 = fadd <4 x double> %36, %36
  %40 = fmul <4 x double> %39, %38
  %41 = fmul <4 x double> %6, %40
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %6, <4 x double> %42) #6
  %44 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %41, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #6
  %47 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %46, <4 x double> %43) #6
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %7, %49
  %51 = fcmp oeq <4 x double> %6, zeroinitializer
  %52 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = or <4 x i1> %52, %51
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = bitcast <4 x i64> %54 to <4 x double>
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %6, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #6
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %57) #6
  ret <4 x double> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_sqrtd4_u35fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %3 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %2) #6
  %4 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %3, <4 x double> <double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000, double 0x2FF0000000000000>, i8 17) #6
  %5 = fmul <4 x double> %3, <double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000, double 0x4FF0000000000000>
  %6 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %3, <4 x double> %5, <4 x double> %4) #6
  %7 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000, double 0x37F0000000000000>, <4 x double> %4) #6
  %8 = bitcast <4 x double> %6 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %15 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %12
  %16 = sub <4 x i32> <i32 -404868902, i32 1608969349, i32 -404868902, i32 1608969349>, %14
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = bitcast <4 x i32> %16 to <2 x i64>
  %19 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = bitcast <4 x i64> %21 to <4 x double>
  %23 = fmul <4 x double> %6, %22
  %24 = fmul <4 x double> %22, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %25 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %23
  %26 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %25, <4 x double> %24, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %27 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %23, <4 x double> %26, <4 x double> %23) #6
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %24, <4 x double> %26, <4 x double> %24) #6
  %29 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %27
  %30 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %28, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> %30, <4 x double> %27) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %30, <4 x double> %28) #6
  %33 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %31
  %34 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %32, <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>) #6
  %35 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %31, <4 x double> %34, <4 x double> %31) #6
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %32, <4 x double> %34, <4 x double> %32) #6
  %37 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %35
  %38 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %36, <4 x double> <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>) #6
  %39 = fadd <4 x double> %36, %36
  %40 = fmul <4 x double> %39, %38
  %41 = fmul <4 x double> %6, %40
  %42 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %41
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %40, <4 x double> %6, <4 x double> %42) #6
  %44 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %40
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %41, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %44, <4 x double> %43, <4 x double> %45) #6
  %47 = fmul <4 x double> %41, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %48 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %47, <4 x double> %46, <4 x double> %43) #6
  %49 = fadd <4 x double> %41, %48
  %50 = fmul <4 x double> %7, %49
  %51 = fcmp oeq <4 x double> %6, zeroinitializer
  %52 = fcmp oeq <4 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = or <4 x i1> %52, %51
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = bitcast <4 x i64> %54 to <4 x double>
  %56 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %50, <4 x double> %6, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %6, <4 x double> zeroinitializer, i8 17) #6
  %58 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %56, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %57) #6
  ret <4 x double> %58
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_hypotd4_u05fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #6
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #6
  %11 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %10, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %12 = fmul <4 x double> %9, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %9, <4 x double> %12, <4 x double> %11) #6
  %14 = fmul <4 x double> %10, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %10, <4 x double> %14, <4 x double> %11) #6
  %16 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fmul <4 x double> %13, %16
  %18 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %17
  %19 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %16, <4 x double> %13, <4 x double> %18) #6
  %20 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %15
  %21 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %20, <4 x double> %16, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %22 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, <4 x double> %16, <4 x double> %21) #6
  %23 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> zeroinitializer, <4 x double> %16, <4 x double> %19) #6
  %24 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %22, <4 x double> %23) #6
  %25 = fmul <4 x double> %17, %17
  %26 = fadd <4 x double> %17, %17
  %27 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %25
  %28 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %17, <4 x double> %17, <4 x double> %27) #6
  %29 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %26, <4 x double> %24, <4 x double> %28) #6
  %30 = fadd <4 x double> %25, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <4 x double> %30, %25
  %32 = fsub <4 x double> %30, %31
  %33 = fsub <4 x double> %25, %32
  %34 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <4 x double> %34, %33
  %36 = fadd <4 x double> %29, %35
  %37 = fadd <4 x double> %30, %36
  %38 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %37) #6
  %39 = fmul <4 x double> %38, %38
  %40 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %39
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %38, <4 x double> %40) #6
  %42 = fadd <4 x double> %30, %39
  %43 = fsub <4 x double> %42, %30
  %44 = fsub <4 x double> %42, %43
  %45 = fsub <4 x double> %30, %44
  %46 = fsub <4 x double> %39, %43
  %47 = fadd <4 x double> %46, %45
  %48 = fadd <4 x double> %41, %36
  %49 = fadd <4 x double> %48, %47
  %50 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %38
  %51 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %38
  %52 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %50, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %53 = fmul <4 x double> %50, %52
  %54 = fmul <4 x double> %50, %42
  %55 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %54
  %56 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %50, <4 x double> %55) #6
  %57 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %49, <4 x double> %50, <4 x double> %56) #6
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %42, <4 x double> %53, <4 x double> %57) #6
  %59 = fmul <4 x double> %54, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %60 = fmul <4 x double> %58, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %61 = fmul <4 x double> %10, %59
  %62 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %61
  %63 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %59, <4 x double> %10, <4 x double> %62) #6
  %64 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %10, <4 x double> %63) #6
  %65 = fadd <4 x double> %61, %64
  %66 = fcmp uno <4 x double> %65, zeroinitializer
  %67 = sext <4 x i1> %66 to <4 x i64>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %65, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %68) #6
  %70 = fcmp oeq <4 x double> %9, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i64>
  %72 = bitcast <4 x i64> %71 to <4 x double>
  %73 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %69, <4 x double> %10, <4 x double> %72) #6
  %74 = fcmp uno <4 x double> %8, %5
  %75 = sext <4 x i1> %74 to <4 x i64>
  %76 = bitcast <4 x i64> %75 to <4 x double>
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %73, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %76) #6
  %78 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %79 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %80 = or <4 x i1> %79, %78
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %77, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %82) #6
  ret <4 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_hypotd4_u35fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.min.pd.256(<4 x double> %5, <4 x double> %8) #6
  %10 = tail call <4 x double> @llvm.x86.avx.max.pd.256(<4 x double> %5, <4 x double> %8) #6
  %11 = fdiv <4 x double> %9, %10
  %12 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %11, <4 x double> %11, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %13 = tail call <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double> %12) #6
  %14 = fmul <4 x double> %10, %13
  %15 = fcmp oeq <4 x double> %9, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i64>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %14, <4 x double> %10, <4 x double> %17) #6
  %19 = fcmp uno <4 x double> %8, %5
  %20 = sext <4 x i1> %19 to <4 x i64>
  %21 = bitcast <4 x i64> %20 to <4 x double>
  %22 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %18, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %21) #6
  %23 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %24 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = or <4 x i1> %24, %23
  %26 = sext <4 x i1> %25 to <4 x i64>
  %27 = bitcast <4 x i64> %26 to <4 x double>
  %28 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %22, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %27) #6
  ret <4 x double> %28
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_fmodd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x10000000000000, double 0x10000000000000, double 0x10000000000000, double 0x10000000000000>, i8 17) #6
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #6
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #6
  %14 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %15 = bitcast <4 x double> %14 to <4 x i64>
  %16 = add <4 x i64> %15, <i64 -1, i64 -1, i64 -1, i64 -1>
  %17 = bitcast <4 x i64> %16 to <4 x double>
  %18 = fcmp oeq <4 x double> %14, zeroinitializer
  %19 = sext <4 x i1> %18 to <4 x i64>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  %21 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %17, <4 x double> zeroinitializer, <4 x double> %20) #6
  %22 = fmul <4 x double> %13, <double 3.000000e+00, double 3.000000e+00, double 3.000000e+00, double 3.000000e+00>
  %23 = fadd <4 x double> %13, %13
  %24 = bitcast <4 x double> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <4 x i64> %25 to <4 x double>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %73, %27 ]
  %29 = phi <4 x double> [ zeroinitializer, %2 ], [ %65, %27 ]
  %30 = phi <4 x double> [ %11, %2 ], [ %63, %27 ]
  %31 = bitcast <4 x double> %30 to <4 x i64>
  %32 = add <4 x i64> %31, <i64 -1, i64 -1, i64 -1, i64 -1>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = fcmp oeq <4 x double> %30, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i64>
  %36 = bitcast <4 x i64> %35 to <4 x double>
  %37 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %33, <4 x double> zeroinitializer, <4 x double> %36) #6
  %38 = fmul <4 x double> %21, %37
  %39 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %38, i32 11) #6
  %40 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %22, <4 x double> %30, i8 30) #6
  %41 = bitcast <4 x double> %40 to <4 x i64>
  %42 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %13, i8 29) #6
  %43 = bitcast <4 x double> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <4 x double>
  %46 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %39, <4 x double> <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %23, <4 x double> %30, i8 30) #6
  %48 = bitcast <4 x double> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <4 x double>
  %51 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %46, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %50) #6
  %52 = fmul <4 x double> %51, %26
  %53 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %52
  %54 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %51, <4 x double> %26, <4 x double> %53) #6
  %55 = fadd <4 x double> %30, %52
  %56 = fsub <4 x double> %55, %30
  %57 = fsub <4 x double> %55, %56
  %58 = fsub <4 x double> %30, %57
  %59 = fsub <4 x double> %52, %56
  %60 = fadd <4 x double> %59, %58
  %61 = fadd <4 x double> %29, %54
  %62 = fadd <4 x double> %61, %60
  %63 = fadd <4 x double> %55, %62
  %64 = fsub <4 x double> %55, %63
  %65 = fadd <4 x double> %62, %64
  %66 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %63, <4 x double> %13, i8 17) #6
  %67 = bitcast <4 x double> %66 to <4 x i64>
  %68 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %69 = shufflevector <4 x i64> %67, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %70 = and <2 x i64> %69, %68
  %71 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %70, <2 x i64> <i64 -1, i64 -1>) #6
  %72 = icmp eq i32 %71, 0
  %73 = add nuw nsw i32 %28, 1
  %74 = icmp ult i32 %73, 21
  %75 = and i1 %74, %72
  br i1 %75, label %27, label %76

; <label>:76:                                     ; preds = %27
  %77 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #6
  %78 = fmul <4 x double> %63, %77
  %79 = fadd <4 x double> %63, %65
  %80 = fcmp oeq <4 x double> %79, %13
  %81 = sext <4 x i1> %80 to <4 x i64>
  %82 = bitcast <4 x i64> %81 to <4 x double>
  %83 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %78, <4 x double> zeroinitializer, <4 x double> %82) #6
  %84 = bitcast <4 x double> %83 to <4 x i64>
  %85 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = xor <4 x i64> %85, %84
  %87 = bitcast <4 x i64> %86 to <4 x double>
  %88 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %11, <4 x double> %13, i8 17) #6
  %89 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %87, <4 x double> %0, <4 x double> %88) #6
  %90 = fcmp oeq <4 x double> %13, zeroinitializer
  %91 = sext <4 x i1> %90 to <4 x i64>
  %92 = bitcast <4 x i64> %91 to <4 x double>
  %93 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %89, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %92) #6
  ret <4 x double> %93
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_remainderd4_fma4(<4 x double>, <4 x double>) local_unnamed_addr #0 {
  %3 = bitcast <4 x double> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <4 x i64> %4 to <4 x double>
  %6 = bitcast <4 x double> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <4 x i64> %7 to <4 x double>
  %9 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %8, <4 x double> <double 0x20000000000000, double 0x20000000000000, double 0x20000000000000, double 0x20000000000000>, i8 17) #6
  %10 = fmul <4 x double> %5, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %11 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %5, <4 x double> %10, <4 x double> %9) #6
  %12 = fmul <4 x double> %8, <double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000, double 0x4350000000000000>
  %13 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %8, <4 x double> %12, <4 x double> %9) #6
  %14 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> <double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000, double 0x3C90000000000000>, <4 x double> %9) #6
  %15 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %13
  %16 = fmul <4 x double> %13, <double 1.500000e+00, double 1.500000e+00, double 1.500000e+00, double 1.500000e+00>
  %17 = fmul <4 x double> %13, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %18 = bitcast <4 x double> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <4 x i64> %19 to <4 x double>
  br label %21

; <label>:21:                                     ; preds = %48, %2
  %22 = phi i32 [ 0, %2 ], [ %80, %48 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %65, %48 ]
  %24 = phi <4 x double> [ zeroinitializer, %2 ], [ %79, %48 ]
  %25 = phi <4 x double> [ %11, %2 ], [ %77, %48 ]
  %26 = fmul <4 x double> %15, %25
  %27 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %26, i32 8) #6
  %28 = bitcast <4 x double> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %30 = bitcast <4 x i64> %29 to <4 x double>
  %31 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %16, i8 17) #6
  %32 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %27, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, <4 x double> %31) #6
  %33 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %30, <4 x double> %17, i8 17) #6
  %34 = bitcast <4 x double> %33 to <4 x i64>
  %35 = fcmp oeq <4 x double> %17, %30
  %36 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %37 = select <4 x i1> %35, <4 x i64> %36, <4 x i64> zeroinitializer
  %38 = or <4 x i64> %37, %34
  %39 = bitcast <4 x i64> %38 to <4 x double>
  %40 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %32, <4 x double> zeroinitializer, <4 x double> %39) #6
  %41 = fcmp oeq <4 x double> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %44, %43
  %46 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %45, <2 x i64> <i64 -1, i64 -1>) #6
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %82

; <label>:48:                                     ; preds = %21
  %49 = fmul <4 x double> %40, %20
  %50 = bitcast <4 x double> %49 to <4 x i64>
  %51 = and <4 x i64> %50, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %52 = bitcast <4 x i64> %51 to <4 x double>
  %53 = fcmp oeq <4 x double> %52, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %54 = sext <4 x i1> %53 to <4 x i64>
  %55 = and <4 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = xor <4 x i64> %55, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %57 = bitcast <4 x i64> %56 to <4 x double>
  %58 = fadd <4 x double> %40, %57
  %59 = bitcast <4 x i64> %54 to <4 x double>
  %60 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %40, <4 x double> %58, <4 x double> %59) #6
  %61 = fmul <4 x double> %60, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %62 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %61, i32 11) #6
  %63 = fcmp une <4 x double> %62, %61
  %64 = sext <4 x i1> %63 to <4 x i64>
  %65 = xor <4 x i64> %23, %64
  %66 = fmul <4 x double> %60, %20
  %67 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %66
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %60, <4 x double> %20, <4 x double> %67) #6
  %69 = fadd <4 x double> %25, %66
  %70 = fsub <4 x double> %69, %25
  %71 = fsub <4 x double> %69, %70
  %72 = fsub <4 x double> %25, %71
  %73 = fsub <4 x double> %66, %70
  %74 = fadd <4 x double> %73, %72
  %75 = fadd <4 x double> %24, %68
  %76 = fadd <4 x double> %75, %74
  %77 = fadd <4 x double> %69, %76
  %78 = fsub <4 x double> %69, %77
  %79 = fadd <4 x double> %76, %78
  %80 = add nuw nsw i32 %22, 1
  %81 = icmp ult i32 %80, 21
  br i1 %81, label %21, label %82

; <label>:82:                                     ; preds = %21, %48
  %83 = phi <4 x double> [ %25, %21 ], [ %77, %48 ]
  %84 = fmul <4 x double> %14, %83
  %85 = bitcast <4 x double> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <4 x double>
  %89 = fcmp oeq <4 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %90 = sext <4 x i1> %89 to <4 x i64>
  %91 = fcmp oeq <4 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %92 = sext <4 x i1> %91 to <4 x i64>
  %93 = bitcast <4 x i64> %92 to <4 x double>
  %94 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %0, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %93) #6
  %95 = bitcast <4 x i64> %90 to <4 x double>
  %96 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %88, <4 x double> %94, <4 x double> %95) #6
  %97 = fcmp oeq <4 x double> %13, zeroinitializer
  %98 = sext <4 x i1> %97 to <4 x i64>
  %99 = bitcast <4 x i64> %98 to <4 x double>
  %100 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %96, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %99) #6
  ret <4 x double> %100
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_finz_tgammad4_u10fma4(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0) #6
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <4 x double>, <4 x double>* %4, align 32
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <4 x double>, <4 x double>* %6, align 32
  %8 = fadd <4 x double> %5, %7
  %9 = fmul <4 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %9, i32 8) #6
  %11 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %10) #6
  %12 = fmul <4 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <4 x double> %5, %12
  %14 = fsub <4 x double> %13, %5
  %15 = fsub <4 x double> %13, %14
  %16 = fsub <4 x double> %5, %15
  %17 = fsub <4 x double> %12, %14
  %18 = fadd <4 x double> %17, %16
  %19 = fadd <4 x double> %7, %18
  %20 = fmul <4 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <4 x double> %20, %13
  %22 = fsub <4 x double> %21, %13
  %23 = fsub <4 x double> %21, %22
  %24 = fsub <4 x double> %13, %23
  %25 = fsub <4 x double> %20, %22
  %26 = fadd <4 x double> %25, %24
  %27 = fadd <4 x double> %26, %19
  %28 = fmul <4 x double> %21, %21
  %29 = fadd <4 x double> %21, %21
  %30 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %28
  %31 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> %21, <4 x double> %30) #6
  %32 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %29, <4 x double> %27, <4 x double> %31) #6
  %33 = fmul <4 x double> %28, %28
  %34 = fadd <4 x double> %28, %28
  %35 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %33
  %36 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %28, <4 x double> %35) #6
  %37 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %34, <4 x double> %32, <4 x double> %36) #6
  %38 = fmul <4 x double> %33, %33
  %39 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C, double 0x3DE60632A887194C>, <4 x double> <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>) #6
  %40 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>, <4 x double> <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>) #6
  %41 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>, <4 x double> <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>) #6
  %42 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %40, <4 x double> %41) #6
  %43 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>, <4 x double> <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>) #6
  %44 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119, double 0x3F81111111111119>, <4 x double> <double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A, double 0x3FA555555555555A>) #6
  %45 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %28, <4 x double> %43, <4 x double> %44) #6
  %46 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %42, <4 x double> %45) #6
  %47 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %38, <4 x double> %39, <4 x double> %46) #6
  %48 = fmul <4 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>
  %49 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %48
  %50 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %21, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %49) #6
  %51 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %27, <4 x double> <double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555, double 0x3FC5555555555555>, <4 x double> %50) #6
  %52 = fadd <4 x double> %48, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %53 = fsub <4 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, %52
  %54 = fadd <4 x double> %48, %53
  %55 = fadd <4 x double> %54, %51
  %56 = fmul <4 x double> %21, %52
  %57 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %56
  %58 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %21, <4 x double> %57) #6
  %59 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %55, <4 x double> %21, <4 x double> %58) #6
  %60 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %52, <4 x double> %27, <4 x double> %59) #6
  %61 = fadd <4 x double> %56, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %62 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %61
  %63 = fadd <4 x double> %56, %62
  %64 = fadd <4 x double> %63, %60
  %65 = fmul <4 x double> %21, %61
  %66 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %65
  %67 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %21, <4 x double> %66) #6
  %68 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %64, <4 x double> %21, <4 x double> %67) #6
  %69 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %61, <4 x double> %27, <4 x double> %68) #6
  %70 = fadd <4 x double> %65, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %71 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %70
  %72 = fadd <4 x double> %65, %71
  %73 = fadd <4 x double> %72, %69
  %74 = fmul <4 x double> %33, %47
  %75 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %74
  %76 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %33, <4 x double> %47, <4 x double> %75) #6
  %77 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %37, <4 x double> %47, <4 x double> %76) #6
  %78 = fadd <4 x double> %70, %74
  %79 = fsub <4 x double> %70, %78
  %80 = fadd <4 x double> %74, %79
  %81 = fadd <4 x double> %80, %73
  %82 = fadd <4 x double> %81, %77
  %83 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %84 = add nsw <4 x i32> %83, <i32 1023, i32 1023, i32 1023, i32 1023>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %86 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %87 = and <4 x i32> %85, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = and <4 x i32> %86, <i32 0, i32 -1, i32 0, i32 -1>
  %90 = shl <4 x i32> %89, <i32 20, i32 20, i32 20, i32 20>
  %91 = bitcast <4 x i32> %88 to <2 x i64>
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <4 x double>
  %97 = fmul <4 x double> %78, %96
  %98 = sub <4 x i32> %11, %83
  %99 = add <4 x i32> %98, <i32 1023, i32 1023, i32 1023, i32 1023>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %101 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %102 = and <4 x i32> %100, <i32 0, i32 -1, i32 0, i32 -1>
  %103 = shl <4 x i32> %102, <i32 20, i32 20, i32 20, i32 20>
  %104 = and <4 x i32> %101, <i32 0, i32 -1, i32 0, i32 -1>
  %105 = shl <4 x i32> %104, <i32 20, i32 20, i32 20, i32 20>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <4 x double>
  %112 = fmul <4 x double> %97, %111
  %113 = fmul <4 x double> %82, %96
  %114 = fmul <4 x double> %113, %111
  %115 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %5, <4 x double> <double -1.000000e+03, double -1.000000e+03, double -1.000000e+03, double -1.000000e+03>, i8 17) #6
  %116 = bitcast <4 x double> %115 to <4 x i64>
  %117 = bitcast <4 x double> %112 to <4 x i64>
  %118 = xor <4 x i64> %116, <i64 -1, i64 -1, i64 -1, i64 -1>
  %119 = and <4 x i64> %118, %117
  %120 = bitcast <4 x double> %114 to <4 x i64>
  %121 = and <4 x i64> %120, %118
  %122 = bitcast <4 x i64> %119 to <4 x double>
  %123 = bitcast <4 x i64> %121 to <4 x double>
  %124 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %125 = load <4 x double>, <4 x double>* %124, align 32
  %126 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %127 = load <4 x double>, <4 x double>* %126, align 32
  %128 = fmul <4 x double> %125, %122
  %129 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %128
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %125, <4 x double> %129) #6
  %131 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %123, <4 x double> %125, <4 x double> %130) #6
  %132 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %127, <4 x double> %131) #6
  %133 = fadd <4 x double> %128, %132
  %134 = fcmp oeq <4 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000, double 0xFFF0000000000000>
  %135 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 17) #6
  %136 = bitcast <4 x double> %135 to <4 x i64>
  %137 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  %138 = fcmp oeq <4 x double> %137, %0
  %139 = select <4 x i1> %138, <4 x i64> %136, <4 x i64> zeroinitializer
  %140 = select <4 x i1> %134, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %139
  %141 = bitcast <4 x double> %0 to <4 x i64>
  %142 = and <4 x i64> %141, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %143 = bitcast <4 x i64> %142 to <4 x double>
  %144 = fcmp une <4 x double> %143, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %145 = fcmp ord <4 x double> %0, zeroinitializer
  %146 = and <4 x i1> %144, %145
  %147 = fcmp uno <4 x double> %133, zeroinitializer
  %148 = and <4 x i1> %147, %146
  %149 = select <4 x i1> %148, <4 x i64> %136, <4 x i64> zeroinitializer
  %150 = or <4 x i64> %140, %149
  %151 = bitcast <4 x i64> %150 to <4 x double>
  %152 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %133, <4 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000, double 0x7FF8000000000000>, <4 x double> %151) #6
  %153 = fcmp oeq <4 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %154 = or <4 x i1> %146, %153
  %155 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000, double 0x8010000000000000>, i8 29) #6
  %156 = bitcast <4 x double> %155 to <4 x i64>
  %157 = select <4 x i1> %154, <4 x i64> %156, <4 x i64> zeroinitializer
  %158 = fcmp oeq <4 x double> %0, zeroinitializer
  %159 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> <double 2.000000e+02, double 2.000000e+02, double 2.000000e+02, double 2.000000e+02>, i8 30) #6
  %160 = bitcast <4 x double> %159 to <4 x i64>
  %161 = fcmp uno <4 x double> %152, zeroinitializer
  %162 = or <4 x i1> %161, %158
  %163 = select <4 x i1> %162, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, <4 x i64> %160
  %164 = and <4 x i64> %163, %157
  %165 = and <4 x i64> %141, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = or <4 x i64> %165, <i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312, i64 9218868437227405312>
  %167 = bitcast <4 x i64> %166 to <4 x double>
  %168 = bitcast <4 x i64> %164 to <4 x double>
  %169 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %152, <4 x double> %167, <4 x double> %168) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  ret <4 x double> %169
}

; Function Attrs: nounwind uwtable
define <4 x double> @Sleef_finz_lgammad4_u10fma4(<4 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 32
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <4 x double> %0) #6
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <4 x double>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <4 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <4 x double>
  %14 = bitcast <4 x i64> %12 to <4 x double>
  %15 = fmul <4 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %15, <4 x double> <double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000, double 0x2D30000000000000>, i8 17) #6
  %17 = bitcast <4 x double> %16 to <4 x i64>
  %18 = fmul <4 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000, double 0x52B0000000000000>
  %19 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %15, <4 x double> %18, <4 x double> %16) #6
  %20 = bitcast <4 x double> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %21 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 undef, i32 undef>
  %25 = bitcast <4 x i32> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %22 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 1, i32 3>
  %28 = bitcast <4 x i32> %27 to <2 x i64>
  %29 = shufflevector <2 x i64> %28, <2 x i64> %25, <2 x i32> <i32 2, i32 1>
  %30 = bitcast <2 x i64> %29 to <4 x i32>
  %31 = lshr <4 x i32> %30, <i32 20, i32 20, i32 20, i32 20>
  %32 = and <4 x i64> %17, <i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400, i64 -4616189618054758400>
  %33 = bitcast <4 x i64> %32 to <4 x double>
  %34 = tail call <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double> %33) #6
  %35 = bitcast <4 x i32> %34 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0>, <16 x i8> %35) #6
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = sub <4 x i32> %31, %37
  %39 = sub <4 x i32> zeroinitializer, %38
  %40 = ashr <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %41 = add nsw <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %43 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %44 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <4 x double>
  %54 = fmul <4 x double> %13, %53
  %55 = sub <4 x i32> %39, %40
  %56 = add <4 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %58 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 3>
  %59 = and <4 x i32> %57, <i32 0, i32 -1, i32 0, i32 -1>
  %60 = shl <4 x i32> %59, <i32 20, i32 20, i32 20, i32 20>
  %61 = and <4 x i32> %58, <i32 0, i32 -1, i32 0, i32 -1>
  %62 = shl <4 x i32> %61, <i32 20, i32 20, i32 20, i32 20>
  %63 = bitcast <4 x i32> %60 to <2 x i64>
  %64 = bitcast <4 x i32> %62 to <2 x i64>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <4 x double>
  %69 = fmul <4 x double> %54, %68
  %70 = fmul <4 x double> %14, %53
  %71 = fmul <4 x double> %70, %68
  %72 = fadd <4 x double> %69, <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>
  %73 = fsub <4 x double> %72, %69
  %74 = fsub <4 x double> %72, %73
  %75 = fsub <4 x double> %69, %74
  %76 = fsub <4 x double> <double -1.000000e+00, double -1.000000e+00, double -1.000000e+00, double -1.000000e+00>, %73
  %77 = fadd <4 x double> %76, %75
  %78 = fadd <4 x double> %71, %77
  %79 = fadd <4 x double> %69, <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>
  %80 = fsub <4 x double> %79, %69
  %81 = fsub <4 x double> %79, %80
  %82 = fsub <4 x double> %69, %81
  %83 = fsub <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %80
  %84 = fadd <4 x double> %83, %82
  %85 = fadd <4 x double> %71, %84
  %86 = fdiv <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %79
  %87 = fmul <4 x double> %72, %86
  %88 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %87
  %89 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %86, <4 x double> %72, <4 x double> %88) #6
  %90 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %79
  %91 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %90, <4 x double> %86, <4 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>) #6
  %92 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %85
  %93 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %92, <4 x double> %86, <4 x double> %91) #6
  %94 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %78, <4 x double> %86, <4 x double> %89) #6
  %95 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %93, <4 x double> %94) #6
  %96 = fmul <4 x double> %87, %87
  %97 = fadd <4 x double> %87, %87
  %98 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %96
  %99 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %87, <4 x double> %87, <4 x double> %98) #6
  %100 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %97, <4 x double> %95, <4 x double> %99) #6
  %101 = fmul <4 x double> %96, %96
  %102 = fmul <4 x double> %101, %101
  %103 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>, <4 x double> <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>) #6
  %104 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>, <4 x double> %103) #6
  %105 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>, <4 x double> <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>) #6
  %106 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>, <4 x double> <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>) #6
  %107 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %101, <4 x double> %105, <4 x double> %106) #6
  %108 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %102, <4 x double> %104, <4 x double> %107) #6
  %109 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %108, <4 x double> %96, <4 x double> <double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545, double 0x3FE5555555555545>) #6
  %110 = sitofp <4 x i32> %38 to <4 x double>
  %111 = fmul <4 x double> %110, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %112 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %111
  %113 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>, <4 x double> %110, <4 x double> %112) #6
  %114 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>, <4 x double> %110, <4 x double> %113) #6
  %115 = fmul <4 x double> %87, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %116 = fmul <4 x double> %95, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %117 = fadd <4 x double> %111, %115
  %118 = fsub <4 x double> %111, %117
  %119 = fadd <4 x double> %115, %118
  %120 = fadd <4 x double> %114, %119
  %121 = fadd <4 x double> %116, %120
  %122 = fmul <4 x double> %87, %96
  %123 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %122
  %124 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %87, <4 x double> %123) #6
  %125 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %100, <4 x double> %87, <4 x double> %124) #6
  %126 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %96, <4 x double> %95, <4 x double> %125) #6
  %127 = fmul <4 x double> %109, %122
  %128 = fsub <4 x double> <double -0.000000e+00, double -0.000000e+00, double -0.000000e+00, double -0.000000e+00>, %127
  %129 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %122, <4 x double> %109, <4 x double> %128) #6
  %130 = tail call <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double> %126, <4 x double> %109, <4 x double> %129) #6
  %131 = fadd <4 x double> %117, %127
  %132 = fsub <4 x double> %117, %131
  %133 = fadd <4 x double> %127, %132
  %134 = fadd <4 x double> %133, %121
  %135 = fadd <4 x double> %130, %134
  %136 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %137 = load <4 x double>, <4 x double>* %136, align 32
  %138 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %139 = load <4 x double>, <4 x double>* %138, align 32
  %140 = fadd <4 x double> %137, %131
  %141 = fsub <4 x double> %140, %137
  %142 = fsub <4 x double> %140, %141
  %143 = fsub <4 x double> %137, %142
  %144 = fsub <4 x double> %131, %141
  %145 = fadd <4 x double> %144, %143
  %146 = fadd <4 x double> %139, %135
  %147 = fadd <4 x double> %146, %145
  %148 = fadd <4 x double> %140, %147
  %149 = bitcast <4 x double> %0 to <4 x i64>
  %150 = and <4 x i64> %149, <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>
  %151 = bitcast <4 x i64> %150 to <4 x double>
  %152 = fcmp oeq <4 x double> %151, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %153 = tail call <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double> %0, <4 x double> zeroinitializer, i8 18) #6
  %154 = tail call <4 x double> @llvm.x86.avx.round.pd.256(<4 x double> %0, i32 11) #6
  %155 = fcmp oeq <4 x double> %154, %0
  %156 = fcmp une <4 x double> %151, <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>
  %157 = fcmp ord <4 x double> %0, zeroinitializer
  %158 = and <4 x i1> %156, %157
  %159 = fcmp uno <4 x double> %148, zeroinitializer
  %160 = and <4 x i1> %158, %159
  %161 = or <4 x i1> %160, %152
  %162 = select <4 x i1> %155, <4 x double> %153, <4 x double> zeroinitializer
  %163 = select <4 x i1> %161, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <4 x double> %162
  %164 = tail call <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double> %148, <4 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000, double 0x7FF0000000000000>, <4 x double> %163) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #6
  ret <4 x double> %164
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_erfd4_u10fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_erfd4_u10fma4(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <4 x double> @Sleef_finz_erfcd4_u15fma4(<4 x double>) local_unnamed_addr #0 {
  %2 = tail call <4 x double> @Sleef_erfcd4_u15fma4(<4 x double> %0)
  ret <4 x double> %2
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntd4_fma4(i32) local_unnamed_addr #2 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %17

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %9 = load i32, i32* %8, align 8, !tbaa !40
  %10 = and i32 %9, 268435456
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %17, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 -2147483647, i32 0) #6
  %13 = load i32, i32* %8, align 8, !tbaa !40
  %14 = and i32 %13, 65536
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, i32 0, i32 3
  br label %17

; <label>:17:                                     ; preds = %12, %5, %1
  %18 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %16, %12 ]
  ret i32 %18
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd4_fma4(i32) local_unnamed_addr #3 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.blendv.pd.256(<4 x double>, <4 x double>, <4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.avx.cvt.pd2dq.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.cmp.pd.256(<4 x double>, <4 x double>, i8) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.round.pd.256(<4 x double>, i32) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.fma.vfmadd.pd.256(<4 x double>, <4 x double>, <4 x double>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.avx.cvtt.pd2dq.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.sqrt.pd.256(<4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.max.pd.256(<4 x double>, <4 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.x86.avx.min.pd.256(<4 x double>, <4 x double>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #5

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fma4,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+sse4a,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4, !4, i64 0}
!4 = !{!"double", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempi: argument 0"}
!9 = distinct !{!9, !"rempi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempi: argument 0"}
!12 = distinct !{!12, !"rempi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempi: argument 0"}
!15 = distinct !{!15, !"rempi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempi: argument 0"}
!18 = distinct !{!18, !"rempi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempi: argument 0"}
!21 = distinct !{!21, !"rempi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempi: argument 0"}
!24 = distinct !{!24, !"rempi"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempi: argument 0"}
!27 = distinct !{!27, !"rempi"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempi: argument 0"}
!30 = distinct !{!30, !"rempi"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospid4_u05fma4: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospid4_u05fma4"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_sincospid4_u35fma4: argument 0"}
!36 = distinct !{!36, !"Sleef_sincospid4_u35fma4"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"Sleef_modfd4_fma4: argument 0"}
!39 = distinct !{!39, !"Sleef_modfd4_fma4"}
!40 = !{!41, !41, i64 0}
!41 = !{!"int", !5, i64 0}
