; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }
%struct.vdouble2 = type { double, double }

@.str = private unnamed_addr constant [23 x i8] c"Pure C scalar with FMA\00", align 1
@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_ldexpd1_purecfma(double, i32) local_unnamed_addr #0 {
  %3 = ashr i32 %1, 31
  %4 = add nsw i32 %3, %1
  %5 = ashr i32 %4, 9
  %6 = sub nsw i32 %5, %3
  %7 = shl nsw i32 %6, 7
  %8 = shl i32 %6, 9
  %9 = add nsw i32 %7, 1023
  %10 = icmp sgt i32 %6, -8
  %11 = select i1 %10, i32 %9, i32 0
  %12 = icmp slt i32 %11, 2047
  %13 = select i1 %12, i32 %11, i32 2047
  %14 = zext i32 %13 to i64
  %15 = shl i64 %14, 52
  %16 = bitcast i64 %15 to double
  %17 = fmul double %16, %0
  %18 = fmul double %17, %16
  %19 = fmul double %18, %16
  %20 = fmul double %19, %16
  %21 = add i32 %1, 1023
  %22 = sub i32 %21, %8
  %23 = zext i32 %22 to i64
  %24 = shl i64 %23, 52
  %25 = bitcast i64 %24 to double
  %26 = fmul double %20, %25
  ret double %26
}

; Function Attrs: nounwind readnone uwtable
define i32 @Sleef_ilogbd1_purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = sitofp i32 %12 to double
  %14 = fcmp une double %0, 0.000000e+00
  %15 = select i1 %14, double %13, double 0xC1E0000000000000
  %16 = fcmp ord double %0, 0.000000e+00
  %17 = fcmp une double %0, 0x7FF0000000000000
  %18 = fcmp une double %0, 0xFFF0000000000000
  %19 = and i1 %18, %17
  %20 = and i1 %16, %19
  %21 = select i1 %20, double %15, double 0x41DFFFFFFFC00000
  %22 = tail call double @llvm.rint.f64(double %21) #6
  %23 = fptosi double %22 to i32
  ret i32 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sind1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %12, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xC00921FB54442D18, double %0) #6
  %11 = tail call double @llvm.fma.f64(double %8, double 0xBCA1A62633145C07, double %10) #6
  br label %162

; <label>:12:                                     ; preds = %1
  %13 = fcmp uge double %4, 1.000000e+14
  br i1 %13, label %30, label %14, !prof !2

; <label>:14:                                     ; preds = %12
  %15 = fmul double %0, 0x3E545F306DC9C883
  %16 = tail call double @llvm.trunc.f64(double %15) #6
  %17 = fmul double %16, 0x4170000000000000
  %18 = fsub double -0.000000e+00, %17
  %19 = tail call double @llvm.fma.f64(double %0, double 0x3FD45F306DC9C883, double %18) #6
  %20 = tail call double @llvm.rint.f64(double %19) #6
  %21 = fptosi double %20 to i32
  %22 = tail call double @llvm.fma.f64(double %17, double 0xC00921FB50000000, double %0) #6
  %23 = tail call double @llvm.fma.f64(double %20, double 0xC00921FB50000000, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %17, double 0xBE6110B460000000, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %20, double 0xBE6110B460000000, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %17, double 0xBCA1A62630000000, double %25) #6
  %27 = tail call double @llvm.fma.f64(double %20, double 0xBCA1A62630000000, double %26) #6
  %28 = fadd double %17, %20
  %29 = tail call double @llvm.fma.f64(double %28, double 0xBAF8A2E03707344A, double %27) #6
  br label %162

; <label>:30:                                     ; preds = %12
  %31 = lshr i64 %2, 52
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 2047
  %34 = add nsw i32 %33, -1078
  %35 = icmp ugt i32 %33, 1723
  %36 = select i1 %35, i64 -288230376151711744, i64 0
  %37 = and i64 %2, -4294967296
  %38 = add i64 %36, %37
  %39 = and i64 %2, 4294967295
  %40 = or i64 %38, %39
  %41 = bitcast i64 %40 to double
  %42 = ashr i32 %34, 31
  %43 = xor i32 %42, 1073741823
  %44 = and i32 %43, %34
  %45 = shl i32 %44, 2
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %46
  %48 = load double, double* %47, align 8, !tbaa !3, !noalias !7
  %49 = fmul double %48, %41
  %50 = fsub double -0.000000e+00, %49
  %51 = tail call double @llvm.fma.f64(double %41, double %48, double %50) #6
  %52 = fmul double %49, 4.000000e+00
  %53 = tail call double @llvm.rint.f64(double %52) #6
  %54 = fmul double %53, 2.500000e-01
  %55 = fsub double %49, %54
  %56 = fadd double %51, %55
  %57 = fsub double %55, %56
  %58 = fadd double %51, %57
  %59 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %46
  %60 = load double, double* %59, align 8, !tbaa !3, !noalias !7
  %61 = fmul double %60, %41
  %62 = fsub double -0.000000e+00, %61
  %63 = tail call double @llvm.fma.f64(double %41, double %60, double %62) #6
  %64 = fadd double %61, %56
  %65 = fsub double %64, %56
  %66 = fsub double %64, %65
  %67 = fsub double %56, %66
  %68 = fsub double %61, %65
  %69 = fadd double %68, %67
  %70 = fadd double %63, %58
  %71 = fadd double %70, %69
  %72 = fmul double %64, 4.000000e+00
  %73 = tail call double @llvm.rint.f64(double %72) #6
  %74 = insertelement <2 x double> undef, double %64, i32 0
  %75 = insertelement <2 x double> %74, double %49, i32 1
  %76 = call <2 x double> @llvm.rint.v2f64(<2 x double> %75)
  %77 = fmul <2 x double> %76, <double 4.000000e+00, double 4.000000e+00>
  %78 = insertelement <2 x double> undef, double %73, i32 0
  %79 = insertelement <2 x double> %78, double %53, i32 1
  %80 = fsub <2 x double> %79, %77
  %81 = call <2 x double> @llvm.trunc.v2f64(<2 x double> %80)
  %82 = fptosi <2 x double> %81 to <2 x i32>
  %83 = fmul double %73, 2.500000e-01
  %84 = fsub double %64, %83
  %85 = extractelement <2 x i32> %82, i32 0
  %86 = extractelement <2 x i32> %82, i32 1
  %87 = add nsw i32 %85, %86
  %88 = fadd double %84, %71
  %89 = fsub double %84, %88
  %90 = fadd double %71, %89
  %91 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %46
  %92 = load double, double* %91, align 8, !tbaa !3, !noalias !7
  %93 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %46
  %94 = load double, double* %93, align 8, !tbaa !3, !noalias !7
  %95 = fmul double %92, %41
  %96 = fsub double -0.000000e+00, %95
  %97 = tail call double @llvm.fma.f64(double %92, double %41, double %96) #6
  %98 = tail call double @llvm.fma.f64(double %94, double %41, double %97) #6
  %99 = fadd double %95, %88
  %100 = fsub double %99, %88
  %101 = fsub double %99, %100
  %102 = fsub double %88, %101
  %103 = fsub double %95, %100
  %104 = fadd double %103, %102
  %105 = fadd double %98, %90
  %106 = fadd double %105, %104
  %107 = fadd double %99, %106
  %108 = fsub double %99, %107
  %109 = fadd double %106, %108
  %110 = fmul double %107, 0x401921FB54442D18
  %111 = fsub double -0.000000e+00, %110
  %112 = tail call double @llvm.fma.f64(double %107, double 0x401921FB54442D18, double %111) #6
  %113 = tail call double @llvm.fma.f64(double %109, double 0x401921FB54442D18, double %112) #6
  %114 = tail call double @llvm.fma.f64(double %107, double 0x3CB1A62633145C07, double %113) #6
  %115 = and i64 %40, 9223372036854775807
  %116 = bitcast i64 %115 to double
  %117 = fcmp olt double %116, 0x3FE6666666666666
  %118 = select i1 %117, double %41, double %110
  %119 = bitcast double %114 to i64
  %120 = select i1 %117, i64 4294967295, i64 0
  %121 = shl nuw i64 %120, 32
  %122 = or i64 %121, %120
  %123 = xor i64 %122, -1
  %124 = and i64 %119, %123
  %125 = shl i32 %87, 1
  %126 = and i32 %125, 6
  %127 = fcmp ule double %118, 0.000000e+00
  %128 = select i1 %127, i32 1, i32 2
  %129 = add nuw nsw i32 %128, %126
  %130 = lshr i32 %129, 2
  %131 = bitcast double %118 to i64
  %132 = and i64 %131, -9223372036854775808
  %133 = xor i64 %132, -4613618979930100456
  %134 = bitcast i64 %133 to double
  %135 = xor i64 %132, -4858919839960114169
  %136 = bitcast i64 %135 to double
  %137 = bitcast i64 %124 to double
  %138 = fadd double %118, %134
  %139 = fsub double %138, %118
  %140 = fsub double %138, %139
  %141 = fsub double %118, %140
  %142 = fsub double %134, %139
  %143 = fadd double %142, %141
  %144 = fadd double %136, %137
  %145 = fadd double %144, %143
  %146 = and i32 %87, 1
  %147 = icmp eq i32 %146, 0
  %148 = select i1 %147, double %118, double %138
  %149 = select i1 %147, double %137, double %145
  %150 = fadd double %148, %149
  %151 = fcmp oeq double %0, 0x7FF0000000000000
  %152 = fcmp oeq double %0, 0xFFF0000000000000
  %153 = or i1 %151, %152
  %154 = fcmp uno double %0, 0.000000e+00
  %155 = or i1 %154, %153
  %156 = bitcast double %150 to i64
  %157 = select i1 %155, i64 4294967295, i64 0
  %158 = shl nuw i64 %157, 32
  %159 = or i64 %158, %157
  %160 = or i64 %159, %156
  %161 = bitcast i64 %160 to double
  br label %162

; <label>:162:                                    ; preds = %14, %30, %6
  %163 = phi i32 [ %9, %6 ], [ %21, %14 ], [ %130, %30 ]
  %164 = phi double [ %11, %6 ], [ %29, %14 ], [ %161, %30 ]
  %165 = fmul double %164, %164
  %166 = shl i32 %163, 31
  %167 = zext i32 %166 to i64
  %168 = shl nuw i64 %167, 32
  %169 = bitcast double %164 to i64
  %170 = xor i64 %168, %169
  %171 = bitcast i64 %170 to double
  %172 = fmul double %165, %165
  %173 = fmul double %172, %172
  %174 = tail call double @llvm.fma.f64(double %165, double 0xBC62622B22D526BE, double 0x3CE94FA618796592) #6
  %175 = tail call double @llvm.fma.f64(double %165, double 0xBD6AE7EA531357BF, double 0x3DE6124601C23966) #6
  %176 = tail call double @llvm.fma.f64(double %172, double %174, double %175) #6
  %177 = tail call double @llvm.fma.f64(double %165, double 0xBE5AE64567CB5786, double 0x3EC71DE3A5568A50) #6
  %178 = tail call double @llvm.fma.f64(double %165, double 0xBF2A01A01A019FC7, double 0x3F8111111111110F) #6
  %179 = tail call double @llvm.fma.f64(double %172, double %177, double %178) #6
  %180 = tail call double @llvm.fma.f64(double %173, double %176, double %179) #6
  %181 = tail call double @llvm.fma.f64(double %180, double %165, double 0xBFC5555555555555) #6
  %182 = fmul double %181, %171
  %183 = fmul double %165, %182
  %184 = fadd double %183, %171
  %185 = icmp eq i64 %2, -9223372036854775808
  %186 = select i1 %185, double %0, double %184
  ret double %186
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sind1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %15, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xC00921FB54442D18, double %0) #6
  %11 = fmul double %8, 0xBCA1A62633145C07
  %12 = fadd double %10, %11
  %13 = fsub double %10, %12
  %14 = fadd double %11, %13
  br label %202

; <label>:15:                                     ; preds = %1
  %16 = fcmp uge double %4, 1.000000e+14
  br i1 %16, label %68, label %17, !prof !2

; <label>:17:                                     ; preds = %15
  %18 = fmul double %0, 0x3E545F306DC9C883
  %19 = tail call double @llvm.trunc.f64(double %18) #6
  %20 = fmul double %19, 0x4170000000000000
  %21 = fsub double -0.000000e+00, %20
  %22 = tail call double @llvm.fma.f64(double %0, double 0x3FD45F306DC9C883, double %21) #6
  %23 = tail call double @llvm.rint.f64(double %22) #6
  %24 = fptosi double %23 to i32
  %25 = tail call double @llvm.fma.f64(double %20, double 0xC00921FB50000000, double %0) #6
  %26 = fmul double %23, 0xC00921FB50000000
  %27 = fadd double %25, %26
  %28 = fsub double %25, %27
  %29 = fadd double %26, %28
  %30 = fmul double %20, 0xBE6110B460000000
  %31 = fadd double %30, %27
  %32 = fsub double %31, %27
  %33 = fsub double %31, %32
  %34 = fsub double %27, %33
  %35 = fsub double %30, %32
  %36 = fadd double %35, %34
  %37 = fadd double %29, %36
  %38 = fmul double %23, 0xBE6110B460000000
  %39 = fadd double %38, %31
  %40 = fsub double %39, %31
  %41 = fsub double %39, %40
  %42 = fsub double %31, %41
  %43 = fsub double %38, %40
  %44 = fadd double %43, %42
  %45 = fadd double %44, %37
  %46 = fmul double %20, 0xBCA1A62630000000
  %47 = fadd double %46, %39
  %48 = fsub double %47, %39
  %49 = fsub double %47, %48
  %50 = fsub double %39, %49
  %51 = fsub double %46, %48
  %52 = fadd double %51, %50
  %53 = fadd double %52, %45
  %54 = fmul double %23, 0xBCA1A62630000000
  %55 = fadd double %54, %47
  %56 = fsub double %55, %47
  %57 = fsub double %55, %56
  %58 = fsub double %47, %57
  %59 = fsub double %54, %56
  %60 = fadd double %59, %58
  %61 = fadd double %60, %53
  %62 = fadd double %20, %23
  %63 = fmul double %62, 0xBAF8A2E03707344A
  %64 = fadd double %63, %55
  %65 = fsub double %55, %64
  %66 = fadd double %63, %65
  %67 = fadd double %66, %61
  br label %202

; <label>:68:                                     ; preds = %15
  %69 = lshr i64 %2, 52
  %70 = trunc i64 %69 to i32
  %71 = and i32 %70, 2047
  %72 = add nsw i32 %71, -1078
  %73 = icmp ugt i32 %71, 1723
  %74 = select i1 %73, i64 -288230376151711744, i64 0
  %75 = and i64 %2, -4294967296
  %76 = add i64 %74, %75
  %77 = and i64 %2, 4294967295
  %78 = or i64 %76, %77
  %79 = bitcast i64 %78 to double
  %80 = ashr i32 %72, 31
  %81 = xor i32 %80, 1073741823
  %82 = and i32 %81, %72
  %83 = shl i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %84
  %86 = load double, double* %85, align 8, !tbaa !3, !noalias !10
  %87 = fmul double %86, %79
  %88 = fsub double -0.000000e+00, %87
  %89 = tail call double @llvm.fma.f64(double %79, double %86, double %88) #6
  %90 = fmul double %87, 4.000000e+00
  %91 = tail call double @llvm.rint.f64(double %90) #6
  %92 = fmul double %91, 2.500000e-01
  %93 = fsub double %87, %92
  %94 = fadd double %89, %93
  %95 = fsub double %93, %94
  %96 = fadd double %89, %95
  %97 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %84
  %98 = load double, double* %97, align 8, !tbaa !3, !noalias !10
  %99 = fmul double %98, %79
  %100 = fsub double -0.000000e+00, %99
  %101 = tail call double @llvm.fma.f64(double %79, double %98, double %100) #6
  %102 = fadd double %99, %94
  %103 = fsub double %102, %94
  %104 = fsub double %102, %103
  %105 = fsub double %94, %104
  %106 = fsub double %99, %103
  %107 = fadd double %106, %105
  %108 = fadd double %101, %96
  %109 = fadd double %108, %107
  %110 = fmul double %102, 4.000000e+00
  %111 = tail call double @llvm.rint.f64(double %110) #6
  %112 = insertelement <2 x double> undef, double %102, i32 0
  %113 = insertelement <2 x double> %112, double %87, i32 1
  %114 = call <2 x double> @llvm.rint.v2f64(<2 x double> %113)
  %115 = fmul <2 x double> %114, <double 4.000000e+00, double 4.000000e+00>
  %116 = insertelement <2 x double> undef, double %111, i32 0
  %117 = insertelement <2 x double> %116, double %91, i32 1
  %118 = fsub <2 x double> %117, %115
  %119 = call <2 x double> @llvm.trunc.v2f64(<2 x double> %118)
  %120 = fptosi <2 x double> %119 to <2 x i32>
  %121 = fmul double %111, 2.500000e-01
  %122 = fsub double %102, %121
  %123 = extractelement <2 x i32> %120, i32 0
  %124 = extractelement <2 x i32> %120, i32 1
  %125 = add nsw i32 %123, %124
  %126 = fadd double %122, %109
  %127 = fsub double %122, %126
  %128 = fadd double %109, %127
  %129 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %84
  %130 = load double, double* %129, align 8, !tbaa !3, !noalias !10
  %131 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %84
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !10
  %133 = fmul double %130, %79
  %134 = fsub double -0.000000e+00, %133
  %135 = tail call double @llvm.fma.f64(double %130, double %79, double %134) #6
  %136 = tail call double @llvm.fma.f64(double %132, double %79, double %135) #6
  %137 = fadd double %133, %126
  %138 = fsub double %137, %126
  %139 = fsub double %137, %138
  %140 = fsub double %126, %139
  %141 = fsub double %133, %138
  %142 = fadd double %141, %140
  %143 = fadd double %136, %128
  %144 = fadd double %143, %142
  %145 = fadd double %137, %144
  %146 = fsub double %137, %145
  %147 = fadd double %144, %146
  %148 = fmul double %145, 0x401921FB54442D18
  %149 = fsub double -0.000000e+00, %148
  %150 = tail call double @llvm.fma.f64(double %145, double 0x401921FB54442D18, double %149) #6
  %151 = tail call double @llvm.fma.f64(double %147, double 0x401921FB54442D18, double %150) #6
  %152 = tail call double @llvm.fma.f64(double %145, double 0x3CB1A62633145C07, double %151) #6
  %153 = and i64 %78, 9223372036854775807
  %154 = bitcast i64 %153 to double
  %155 = fcmp olt double %154, 0x3FE6666666666666
  %156 = select i1 %155, double %79, double %148
  %157 = bitcast double %152 to i64
  %158 = select i1 %155, i64 4294967295, i64 0
  %159 = shl nuw i64 %158, 32
  %160 = or i64 %159, %158
  %161 = xor i64 %160, -1
  %162 = and i64 %157, %161
  %163 = shl i32 %125, 1
  %164 = and i32 %163, 6
  %165 = fcmp ule double %156, 0.000000e+00
  %166 = select i1 %165, i32 1, i32 2
  %167 = add nuw nsw i32 %166, %164
  %168 = lshr i32 %167, 2
  %169 = bitcast double %156 to i64
  %170 = and i64 %169, -9223372036854775808
  %171 = xor i64 %170, -4613618979930100456
  %172 = bitcast i64 %171 to double
  %173 = xor i64 %170, -4858919839960114169
  %174 = bitcast i64 %173 to double
  %175 = bitcast i64 %162 to double
  %176 = fadd double %156, %172
  %177 = fsub double %176, %156
  %178 = fsub double %176, %177
  %179 = fsub double %156, %178
  %180 = fsub double %172, %177
  %181 = fadd double %180, %179
  %182 = fadd double %174, %175
  %183 = fadd double %182, %181
  %184 = and i32 %125, 1
  %185 = icmp eq i32 %184, 0
  %186 = select i1 %185, double %156, double %176
  %187 = select i1 %185, double %175, double %183
  %188 = fadd double %186, %187
  %189 = fsub double %186, %188
  %190 = fadd double %187, %189
  %191 = fcmp oeq double %0, 0x7FF0000000000000
  %192 = fcmp oeq double %0, 0xFFF0000000000000
  %193 = or i1 %191, %192
  %194 = fcmp uno double %0, 0.000000e+00
  %195 = or i1 %194, %193
  %196 = bitcast double %188 to i64
  %197 = select i1 %195, i64 4294967295, i64 0
  %198 = shl nuw i64 %197, 32
  %199 = or i64 %198, %197
  %200 = or i64 %199, %196
  %201 = bitcast i64 %200 to double
  br label %202

; <label>:202:                                    ; preds = %17, %68, %6
  %203 = phi i32 [ %9, %6 ], [ %24, %17 ], [ %168, %68 ]
  %204 = phi double [ %12, %6 ], [ %64, %17 ], [ %201, %68 ]
  %205 = phi double [ %14, %6 ], [ %67, %17 ], [ %190, %68 ]
  %206 = fmul double %204, %204
  %207 = fadd double %204, %204
  %208 = fsub double -0.000000e+00, %206
  %209 = tail call double @llvm.fma.f64(double %204, double %204, double %208) #6
  %210 = tail call double @llvm.fma.f64(double %207, double %205, double %209) #6
  %211 = fmul double %206, %206
  %212 = fmul double %211, %211
  %213 = tail call double @llvm.fma.f64(double %206, double 0x3CE8811A03B2B11D, double 0xBD6AE422BC319350) #6
  %214 = tail call double @llvm.fma.f64(double %206, double 0x3DE6123C74705F67, double 0xBE5AE6454BAA2959) #6
  %215 = tail call double @llvm.fma.f64(double %206, double 0x3EC71DE3A525FBED, double 0xBF2A01A01A014225) #6
  %216 = tail call double @llvm.fma.f64(double %211, double %214, double %215) #6
  %217 = tail call double @llvm.fma.f64(double %212, double %213, double %216) #6
  %218 = tail call double @llvm.fma.f64(double %217, double %206, double 0x3F811111111110B9) #6
  %219 = fmul double %206, %218
  %220 = fadd double %219, 0xBFC5555555555555
  %221 = fsub double 0xBFC5555555555555, %220
  %222 = fadd double %219, %221
  %223 = fmul double %206, %220
  %224 = fsub double -0.000000e+00, %223
  %225 = tail call double @llvm.fma.f64(double %220, double %206, double %224) #6
  %226 = tail call double @llvm.fma.f64(double %222, double %206, double %225) #6
  %227 = tail call double @llvm.fma.f64(double %220, double %210, double %226) #6
  %228 = fadd double %223, 1.000000e+00
  %229 = fsub double 1.000000e+00, %228
  %230 = fadd double %223, %229
  %231 = fadd double %230, %227
  %232 = fmul double %204, %231
  %233 = tail call double @llvm.fma.f64(double %205, double %228, double %232) #6
  %234 = tail call double @llvm.fma.f64(double %204, double %228, double %233) #6
  %235 = shl i32 %203, 31
  %236 = zext i32 %235 to i64
  %237 = shl nuw i64 %236, 32
  %238 = bitcast double %234 to i64
  %239 = xor i64 %237, %238
  %240 = bitcast i64 %239 to double
  %241 = fcmp une double %0, 0.000000e+00
  %242 = select i1 %241, double %240, double %0
  ret double %242
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cosd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %14, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = tail call double @llvm.fma.f64(double %0, double 0x3FD45F306DC9C883, double -5.000000e-01) #6
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = tail call double @llvm.fma.f64(double %8, double 2.000000e+00, double 1.000000e+00) #6
  %10 = tail call double @llvm.rint.f64(double %9) #6
  %11 = fptosi double %10 to i32
  %12 = tail call double @llvm.fma.f64(double %9, double 0xBFF921FB54442D18, double %0) #6
  %13 = tail call double @llvm.fma.f64(double %9, double 0xBC91A62633145C07, double %12) #6
  br label %167

; <label>:14:                                     ; preds = %1
  %15 = fcmp uge double %4, 1.000000e+14
  br i1 %15, label %36, label %16, !prof !2

; <label>:16:                                     ; preds = %14
  %17 = tail call double @llvm.fma.f64(double %0, double 0x3E645F306DC9C883, double 0xBE545F306DC9C883) #6
  %18 = tail call double @llvm.trunc.f64(double %17) #6
  %19 = fmul double %0, 0x3FD45F306DC9C883
  %20 = tail call double @llvm.fma.f64(double %18, double 0xC160000000000000, double -5.000000e-01) #6
  %21 = fadd double %19, %20
  %22 = tail call double @llvm.rint.f64(double %21) #6
  %23 = fptosi double %22 to i32
  %24 = fmul double %18, 0x4170000000000000
  %25 = shl nsw i32 %23, 1
  %26 = or i32 %25, 1
  %27 = sitofp i32 %26 to double
  %28 = tail call double @llvm.fma.f64(double %24, double 0xBFF921FB50000000, double %0) #6
  %29 = tail call double @llvm.fma.f64(double %27, double 0xBFF921FB50000000, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %24, double 0xBE5110B460000000, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %27, double 0xBE5110B460000000, double %30) #6
  %32 = tail call double @llvm.fma.f64(double %24, double 0xBC91A62630000000, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %27, double 0xBC91A62630000000, double %32) #6
  %34 = fadd double %24, %27
  %35 = tail call double @llvm.fma.f64(double %34, double 0xBAE8A2E03707344A, double %33) #6
  br label %167

; <label>:36:                                     ; preds = %14
  %37 = lshr i64 %2, 52
  %38 = trunc i64 %37 to i32
  %39 = and i32 %38, 2047
  %40 = add nsw i32 %39, -1078
  %41 = icmp ugt i32 %39, 1723
  %42 = select i1 %41, i64 -288230376151711744, i64 0
  %43 = and i64 %2, -4294967296
  %44 = add i64 %42, %43
  %45 = and i64 %2, 4294967295
  %46 = or i64 %44, %45
  %47 = bitcast i64 %46 to double
  %48 = ashr i32 %40, 31
  %49 = xor i32 %48, 1073741823
  %50 = and i32 %49, %40
  %51 = shl i32 %50, 2
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %52
  %54 = load double, double* %53, align 8, !tbaa !3, !noalias !13
  %55 = fmul double %54, %47
  %56 = fsub double -0.000000e+00, %55
  %57 = tail call double @llvm.fma.f64(double %47, double %54, double %56) #6
  %58 = fmul double %55, 4.000000e+00
  %59 = tail call double @llvm.rint.f64(double %58) #6
  %60 = fmul double %59, 2.500000e-01
  %61 = fsub double %55, %60
  %62 = fadd double %57, %61
  %63 = fsub double %61, %62
  %64 = fadd double %57, %63
  %65 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %52
  %66 = load double, double* %65, align 8, !tbaa !3, !noalias !13
  %67 = fmul double %66, %47
  %68 = fsub double -0.000000e+00, %67
  %69 = tail call double @llvm.fma.f64(double %47, double %66, double %68) #6
  %70 = fadd double %67, %62
  %71 = fsub double %70, %62
  %72 = fsub double %70, %71
  %73 = fsub double %62, %72
  %74 = fsub double %67, %71
  %75 = fadd double %74, %73
  %76 = fadd double %69, %64
  %77 = fadd double %76, %75
  %78 = fmul double %70, 4.000000e+00
  %79 = tail call double @llvm.rint.f64(double %78) #6
  %80 = insertelement <2 x double> undef, double %70, i32 0
  %81 = insertelement <2 x double> %80, double %55, i32 1
  %82 = call <2 x double> @llvm.rint.v2f64(<2 x double> %81)
  %83 = fmul <2 x double> %82, <double 4.000000e+00, double 4.000000e+00>
  %84 = insertelement <2 x double> undef, double %79, i32 0
  %85 = insertelement <2 x double> %84, double %59, i32 1
  %86 = fsub <2 x double> %85, %83
  %87 = call <2 x double> @llvm.trunc.v2f64(<2 x double> %86)
  %88 = fptosi <2 x double> %87 to <2 x i32>
  %89 = fmul double %79, 2.500000e-01
  %90 = fsub double %70, %89
  %91 = extractelement <2 x i32> %88, i32 0
  %92 = extractelement <2 x i32> %88, i32 1
  %93 = add nsw i32 %91, %92
  %94 = fadd double %90, %77
  %95 = fsub double %90, %94
  %96 = fadd double %77, %95
  %97 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %52
  %98 = load double, double* %97, align 8, !tbaa !3, !noalias !13
  %99 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %52
  %100 = load double, double* %99, align 8, !tbaa !3, !noalias !13
  %101 = fmul double %98, %47
  %102 = fsub double -0.000000e+00, %101
  %103 = tail call double @llvm.fma.f64(double %98, double %47, double %102) #6
  %104 = tail call double @llvm.fma.f64(double %100, double %47, double %103) #6
  %105 = fadd double %101, %94
  %106 = fsub double %105, %94
  %107 = fsub double %105, %106
  %108 = fsub double %94, %107
  %109 = fsub double %101, %106
  %110 = fadd double %109, %108
  %111 = fadd double %104, %96
  %112 = fadd double %111, %110
  %113 = fadd double %105, %112
  %114 = fsub double %105, %113
  %115 = fadd double %112, %114
  %116 = fmul double %113, 0x401921FB54442D18
  %117 = fsub double -0.000000e+00, %116
  %118 = tail call double @llvm.fma.f64(double %113, double 0x401921FB54442D18, double %117) #6
  %119 = tail call double @llvm.fma.f64(double %115, double 0x401921FB54442D18, double %118) #6
  %120 = tail call double @llvm.fma.f64(double %113, double 0x3CB1A62633145C07, double %119) #6
  %121 = and i64 %46, 9223372036854775807
  %122 = bitcast i64 %121 to double
  %123 = fcmp olt double %122, 0x3FE6666666666666
  %124 = select i1 %123, double %47, double %116
  %125 = bitcast double %120 to i64
  %126 = select i1 %123, i64 4294967295, i64 0
  %127 = shl nuw i64 %126, 32
  %128 = or i64 %127, %126
  %129 = xor i64 %128, -1
  %130 = and i64 %125, %129
  %131 = shl i32 %93, 1
  %132 = and i32 %131, 6
  %133 = fcmp ule double %124, 0.000000e+00
  %134 = select i1 %133, i32 7, i32 8
  %135 = add nuw nsw i32 %134, %132
  %136 = lshr i32 %135, 1
  %137 = and i32 %93, 1
  %138 = select i1 %133, i64 -9223372036854775808, i64 0
  %139 = xor i64 %138, -4613618979930100456
  %140 = bitcast i64 %139 to double
  %141 = xor i64 %138, -4858919839960114169
  %142 = bitcast i64 %141 to double
  %143 = bitcast i64 %130 to double
  %144 = fadd double %124, %140
  %145 = fsub double %144, %124
  %146 = fsub double %144, %145
  %147 = fsub double %124, %146
  %148 = fsub double %140, %145
  %149 = fadd double %148, %147
  %150 = fadd double %142, %143
  %151 = fadd double %150, %149
  %152 = icmp ne i32 %137, 0
  %153 = select i1 %152, double %124, double %144
  %154 = select i1 %152, double %143, double %151
  %155 = fadd double %153, %154
  %156 = fcmp oeq double %0, 0x7FF0000000000000
  %157 = fcmp oeq double %0, 0xFFF0000000000000
  %158 = or i1 %156, %157
  %159 = fcmp uno double %0, 0.000000e+00
  %160 = or i1 %159, %158
  %161 = bitcast double %155 to i64
  %162 = select i1 %160, i64 4294967295, i64 0
  %163 = shl nuw i64 %162, 32
  %164 = or i64 %163, %162
  %165 = or i64 %164, %161
  %166 = bitcast i64 %165 to double
  br label %167

; <label>:167:                                    ; preds = %16, %36, %6
  %168 = phi i32 [ %11, %6 ], [ %26, %16 ], [ %136, %36 ]
  %169 = phi double [ %13, %6 ], [ %35, %16 ], [ %166, %36 ]
  %170 = fmul double %169, %169
  %171 = lshr i32 %168, 1
  %172 = and i32 %171, 1
  %173 = add nsw i32 %172, -1
  %174 = zext i32 %173 to i64
  %175 = shl nuw i64 %174, 32
  %176 = and i64 %175, -9223372036854775808
  %177 = bitcast double %169 to i64
  %178 = xor i64 %176, %177
  %179 = bitcast i64 %178 to double
  %180 = fmul double %170, %170
  %181 = fmul double %180, %180
  %182 = tail call double @llvm.fma.f64(double %170, double 0xBC62622B22D526BE, double 0x3CE94FA618796592) #6
  %183 = tail call double @llvm.fma.f64(double %170, double 0xBD6AE7EA531357BF, double 0x3DE6124601C23966) #6
  %184 = tail call double @llvm.fma.f64(double %180, double %182, double %183) #6
  %185 = tail call double @llvm.fma.f64(double %170, double 0xBE5AE64567CB5786, double 0x3EC71DE3A5568A50) #6
  %186 = tail call double @llvm.fma.f64(double %170, double 0xBF2A01A01A019FC7, double 0x3F8111111111110F) #6
  %187 = tail call double @llvm.fma.f64(double %180, double %185, double %186) #6
  %188 = tail call double @llvm.fma.f64(double %181, double %184, double %187) #6
  %189 = tail call double @llvm.fma.f64(double %188, double %170, double 0xBFC5555555555555) #6
  %190 = fmul double %189, %179
  %191 = fmul double %170, %190
  %192 = fadd double %191, %179
  ret double %192
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cosd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %24, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = tail call double @llvm.fma.f64(double %0, double 0x3FD45F306DC9C883, double -5.000000e-01) #6
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = tail call double @llvm.fma.f64(double %8, double 2.000000e+00, double 1.000000e+00) #6
  %10 = tail call double @llvm.rint.f64(double %9) #6
  %11 = fptosi double %10 to i32
  %12 = fmul double %9, 0xBFF921FB54442D18
  %13 = fadd double %12, %0
  %14 = fsub double %13, %0
  %15 = fsub double %13, %14
  %16 = fsub double %0, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  %19 = fmul double %9, 0xBC91A62633145C07
  %20 = fadd double %19, %13
  %21 = fsub double %13, %20
  %22 = fadd double %19, %21
  %23 = fadd double %22, %18
  br label %217

; <label>:24:                                     ; preds = %1
  %25 = fcmp uge double %4, 1.000000e+14
  br i1 %25, label %84, label %26, !prof !2

; <label>:26:                                     ; preds = %24
  %27 = tail call double @llvm.fma.f64(double %0, double 0x3E645F306DC9C883, double 0xBE545F306DC9C883) #6
  %28 = tail call double @llvm.trunc.f64(double %27) #6
  %29 = fmul double %0, 0x3FD45F306DC9C883
  %30 = tail call double @llvm.fma.f64(double %28, double 0xC160000000000000, double -5.000000e-01) #6
  %31 = fadd double %29, %30
  %32 = tail call double @llvm.rint.f64(double %31) #6
  %33 = fptosi double %32 to i32
  %34 = fmul double %28, 0x4170000000000000
  %35 = shl nsw i32 %33, 1
  %36 = or i32 %35, 1
  %37 = sitofp i32 %36 to double
  %38 = tail call double @llvm.fma.f64(double %34, double 0xBFF921FB50000000, double %0) #6
  %39 = fmul double %37, 0xBFF921FB50000000
  %40 = fadd double %38, %39
  %41 = fsub double %40, %38
  %42 = fsub double %40, %41
  %43 = fsub double %38, %42
  %44 = fsub double %39, %41
  %45 = fadd double %44, %43
  %46 = fmul double %34, 0xBE5110B460000000
  %47 = fadd double %46, %40
  %48 = fsub double %47, %40
  %49 = fsub double %47, %48
  %50 = fsub double %40, %49
  %51 = fsub double %46, %48
  %52 = fadd double %51, %50
  %53 = fadd double %45, %52
  %54 = fmul double %37, 0xBE5110B460000000
  %55 = fadd double %54, %47
  %56 = fsub double %55, %47
  %57 = fsub double %55, %56
  %58 = fsub double %47, %57
  %59 = fsub double %54, %56
  %60 = fadd double %59, %58
  %61 = fadd double %60, %53
  %62 = fmul double %34, 0xBC91A62630000000
  %63 = fadd double %62, %55
  %64 = fsub double %63, %55
  %65 = fsub double %63, %64
  %66 = fsub double %55, %65
  %67 = fsub double %62, %64
  %68 = fadd double %67, %66
  %69 = fadd double %68, %61
  %70 = fmul double %37, 0xBC91A62630000000
  %71 = fadd double %70, %63
  %72 = fsub double %71, %63
  %73 = fsub double %71, %72
  %74 = fsub double %63, %73
  %75 = fsub double %70, %72
  %76 = fadd double %75, %74
  %77 = fadd double %76, %69
  %78 = fadd double %34, %37
  %79 = fmul double %78, 0xBAE8A2E03707344A
  %80 = fadd double %79, %71
  %81 = fsub double %71, %80
  %82 = fadd double %79, %81
  %83 = fadd double %82, %77
  br label %217

; <label>:84:                                     ; preds = %24
  %85 = lshr i64 %2, 52
  %86 = trunc i64 %85 to i32
  %87 = and i32 %86, 2047
  %88 = add nsw i32 %87, -1078
  %89 = icmp ugt i32 %87, 1723
  %90 = select i1 %89, i64 -288230376151711744, i64 0
  %91 = and i64 %2, -4294967296
  %92 = add i64 %90, %91
  %93 = and i64 %2, 4294967295
  %94 = or i64 %92, %93
  %95 = bitcast i64 %94 to double
  %96 = ashr i32 %88, 31
  %97 = xor i32 %96, 1073741823
  %98 = and i32 %97, %88
  %99 = shl i32 %98, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !3, !noalias !16
  %103 = fmul double %102, %95
  %104 = fsub double -0.000000e+00, %103
  %105 = tail call double @llvm.fma.f64(double %95, double %102, double %104) #6
  %106 = fmul double %103, 4.000000e+00
  %107 = tail call double @llvm.rint.f64(double %106) #6
  %108 = fmul double %107, 2.500000e-01
  %109 = fsub double %103, %108
  %110 = fadd double %105, %109
  %111 = fsub double %109, %110
  %112 = fadd double %105, %111
  %113 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %100
  %114 = load double, double* %113, align 8, !tbaa !3, !noalias !16
  %115 = fmul double %114, %95
  %116 = fsub double -0.000000e+00, %115
  %117 = tail call double @llvm.fma.f64(double %95, double %114, double %116) #6
  %118 = fadd double %115, %110
  %119 = fsub double %118, %110
  %120 = fsub double %118, %119
  %121 = fsub double %110, %120
  %122 = fsub double %115, %119
  %123 = fadd double %122, %121
  %124 = fadd double %117, %112
  %125 = fadd double %124, %123
  %126 = fmul double %118, 4.000000e+00
  %127 = tail call double @llvm.rint.f64(double %126) #6
  %128 = insertelement <2 x double> undef, double %118, i32 0
  %129 = insertelement <2 x double> %128, double %103, i32 1
  %130 = call <2 x double> @llvm.rint.v2f64(<2 x double> %129)
  %131 = fmul <2 x double> %130, <double 4.000000e+00, double 4.000000e+00>
  %132 = insertelement <2 x double> undef, double %127, i32 0
  %133 = insertelement <2 x double> %132, double %107, i32 1
  %134 = fsub <2 x double> %133, %131
  %135 = call <2 x double> @llvm.trunc.v2f64(<2 x double> %134)
  %136 = fptosi <2 x double> %135 to <2 x i32>
  %137 = fmul double %127, 2.500000e-01
  %138 = fsub double %118, %137
  %139 = extractelement <2 x i32> %136, i32 0
  %140 = extractelement <2 x i32> %136, i32 1
  %141 = add nsw i32 %139, %140
  %142 = fadd double %138, %125
  %143 = fsub double %138, %142
  %144 = fadd double %125, %143
  %145 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %100
  %146 = load double, double* %145, align 8, !tbaa !3, !noalias !16
  %147 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %100
  %148 = load double, double* %147, align 8, !tbaa !3, !noalias !16
  %149 = fmul double %146, %95
  %150 = fsub double -0.000000e+00, %149
  %151 = tail call double @llvm.fma.f64(double %146, double %95, double %150) #6
  %152 = tail call double @llvm.fma.f64(double %148, double %95, double %151) #6
  %153 = fadd double %149, %142
  %154 = fsub double %153, %142
  %155 = fsub double %153, %154
  %156 = fsub double %142, %155
  %157 = fsub double %149, %154
  %158 = fadd double %157, %156
  %159 = fadd double %152, %144
  %160 = fadd double %159, %158
  %161 = fadd double %153, %160
  %162 = fsub double %153, %161
  %163 = fadd double %160, %162
  %164 = fmul double %161, 0x401921FB54442D18
  %165 = fsub double -0.000000e+00, %164
  %166 = tail call double @llvm.fma.f64(double %161, double 0x401921FB54442D18, double %165) #6
  %167 = tail call double @llvm.fma.f64(double %163, double 0x401921FB54442D18, double %166) #6
  %168 = tail call double @llvm.fma.f64(double %161, double 0x3CB1A62633145C07, double %167) #6
  %169 = and i64 %94, 9223372036854775807
  %170 = bitcast i64 %169 to double
  %171 = fcmp olt double %170, 0x3FE6666666666666
  %172 = select i1 %171, double %95, double %164
  %173 = bitcast double %168 to i64
  %174 = select i1 %171, i64 4294967295, i64 0
  %175 = shl nuw i64 %174, 32
  %176 = or i64 %175, %174
  %177 = xor i64 %176, -1
  %178 = and i64 %173, %177
  %179 = shl i32 %141, 1
  %180 = and i32 %179, 6
  %181 = fcmp ule double %172, 0.000000e+00
  %182 = select i1 %181, i32 7, i32 8
  %183 = add nuw nsw i32 %182, %180
  %184 = lshr i32 %183, 1
  %185 = and i32 %141, 1
  %186 = select i1 %181, i64 -9223372036854775808, i64 0
  %187 = xor i64 %186, -4613618979930100456
  %188 = bitcast i64 %187 to double
  %189 = xor i64 %186, -4858919839960114169
  %190 = bitcast i64 %189 to double
  %191 = bitcast i64 %178 to double
  %192 = fadd double %172, %188
  %193 = fsub double %192, %172
  %194 = fsub double %192, %193
  %195 = fsub double %172, %194
  %196 = fsub double %188, %193
  %197 = fadd double %196, %195
  %198 = fadd double %190, %191
  %199 = fadd double %198, %197
  %200 = icmp ne i32 %185, 0
  %201 = select i1 %200, double %172, double %192
  %202 = select i1 %200, double %191, double %199
  %203 = fadd double %201, %202
  %204 = fsub double %201, %203
  %205 = fadd double %202, %204
  %206 = fcmp oeq double %0, 0x7FF0000000000000
  %207 = fcmp oeq double %0, 0xFFF0000000000000
  %208 = or i1 %206, %207
  %209 = fcmp uno double %0, 0.000000e+00
  %210 = or i1 %209, %208
  %211 = bitcast double %203 to i64
  %212 = select i1 %210, i64 4294967295, i64 0
  %213 = shl nuw i64 %212, 32
  %214 = or i64 %213, %212
  %215 = or i64 %214, %211
  %216 = bitcast i64 %215 to double
  br label %217

; <label>:217:                                    ; preds = %26, %84, %6
  %218 = phi i32 [ %11, %6 ], [ %36, %26 ], [ %184, %84 ]
  %219 = phi double [ %20, %6 ], [ %80, %26 ], [ %216, %84 ]
  %220 = phi double [ %23, %6 ], [ %83, %26 ], [ %205, %84 ]
  %221 = fmul double %219, %219
  %222 = fadd double %219, %219
  %223 = fsub double -0.000000e+00, %221
  %224 = tail call double @llvm.fma.f64(double %219, double %219, double %223) #6
  %225 = tail call double @llvm.fma.f64(double %222, double %220, double %224) #6
  %226 = fmul double %221, %221
  %227 = fmul double %226, %226
  %228 = tail call double @llvm.fma.f64(double %221, double 0x3CE8811A03B2B11D, double 0xBD6AE422BC319350) #6
  %229 = tail call double @llvm.fma.f64(double %221, double 0x3DE6123C74705F67, double 0xBE5AE6454BAA2959) #6
  %230 = tail call double @llvm.fma.f64(double %221, double 0x3EC71DE3A525FBED, double 0xBF2A01A01A014225) #6
  %231 = tail call double @llvm.fma.f64(double %226, double %229, double %230) #6
  %232 = tail call double @llvm.fma.f64(double %227, double %228, double %231) #6
  %233 = tail call double @llvm.fma.f64(double %232, double %221, double 0x3F811111111110B9) #6
  %234 = fmul double %221, %233
  %235 = fadd double %234, 0xBFC5555555555555
  %236 = fsub double 0xBFC5555555555555, %235
  %237 = fadd double %234, %236
  %238 = fmul double %221, %235
  %239 = fsub double -0.000000e+00, %238
  %240 = tail call double @llvm.fma.f64(double %235, double %221, double %239) #6
  %241 = tail call double @llvm.fma.f64(double %237, double %221, double %240) #6
  %242 = tail call double @llvm.fma.f64(double %235, double %225, double %241) #6
  %243 = fadd double %238, 1.000000e+00
  %244 = fsub double 1.000000e+00, %243
  %245 = fadd double %238, %244
  %246 = fadd double %245, %242
  %247 = fmul double %219, %246
  %248 = tail call double @llvm.fma.f64(double %220, double %243, double %247) #6
  %249 = tail call double @llvm.fma.f64(double %219, double %243, double %248) #6
  %250 = lshr i32 %218, 1
  %251 = and i32 %250, 1
  %252 = add nsw i32 %251, -1
  %253 = zext i32 %252 to i64
  %254 = shl nuw i64 %253, 32
  %255 = and i64 %254, -9223372036854775808
  %256 = bitcast double %249 to i64
  %257 = xor i64 %255, %256
  %258 = bitcast i64 %257 to double
  ret double %258
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincosd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %12, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xBFF921FB54442D18, double %0) #6
  %11 = tail call double @llvm.fma.f64(double %8, double 0xBC91A62633145C07, double %10) #6
  br label %137

; <label>:12:                                     ; preds = %1
  %13 = fcmp uge double %4, 1.000000e+14
  br i1 %13, label %30, label %14, !prof !2

; <label>:14:                                     ; preds = %12
  %15 = fmul double %0, 0x3E645F306DC9C883
  %16 = tail call double @llvm.trunc.f64(double %15) #6
  %17 = fmul double %16, 0x4170000000000000
  %18 = fmul double %0, 0x3FE45F306DC9C883
  %19 = fsub double %18, %17
  %20 = tail call double @llvm.rint.f64(double %19) #6
  %21 = fptosi double %20 to i32
  %22 = tail call double @llvm.fma.f64(double %17, double 0xBFF921FB50000000, double %0) #6
  %23 = tail call double @llvm.fma.f64(double %20, double 0xBFF921FB50000000, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %17, double 0xBE5110B460000000, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %20, double 0xBE5110B460000000, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %17, double 0xBC91A62630000000, double %25) #6
  %27 = tail call double @llvm.fma.f64(double %20, double 0xBC91A62630000000, double %26) #6
  %28 = fadd double %17, %20
  %29 = tail call double @llvm.fma.f64(double %28, double 0xBAE8A2E03707344A, double %27) #6
  br label %137

; <label>:30:                                     ; preds = %12
  %31 = lshr i64 %2, 52
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 2047
  %34 = add nsw i32 %33, -1078
  %35 = icmp ugt i32 %33, 1723
  %36 = select i1 %35, i64 -288230376151711744, i64 0
  %37 = and i64 %2, -4294967296
  %38 = add i64 %36, %37
  %39 = and i64 %2, 4294967295
  %40 = or i64 %38, %39
  %41 = bitcast i64 %40 to double
  %42 = ashr i32 %34, 31
  %43 = xor i32 %42, 1073741823
  %44 = and i32 %43, %34
  %45 = shl i32 %44, 2
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %46
  %48 = load double, double* %47, align 8, !tbaa !3, !noalias !19
  %49 = fmul double %48, %41
  %50 = fsub double -0.000000e+00, %49
  %51 = tail call double @llvm.fma.f64(double %41, double %48, double %50) #6
  %52 = fmul double %49, 4.000000e+00
  %53 = tail call double @llvm.rint.f64(double %52) #6
  %54 = tail call double @llvm.rint.f64(double %49) #6
  %55 = fmul double %54, 4.000000e+00
  %56 = fsub double %53, %55
  %57 = tail call double @llvm.trunc.f64(double %56) #6
  %58 = fptosi double %57 to i32
  %59 = fmul double %53, 2.500000e-01
  %60 = fsub double %49, %59
  %61 = fadd double %51, %60
  %62 = fsub double %60, %61
  %63 = fadd double %51, %62
  %64 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %46
  %65 = load double, double* %64, align 8, !tbaa !3, !noalias !19
  %66 = fmul double %65, %41
  %67 = fsub double -0.000000e+00, %66
  %68 = tail call double @llvm.fma.f64(double %41, double %65, double %67) #6
  %69 = fadd double %66, %61
  %70 = fsub double %69, %61
  %71 = fsub double %69, %70
  %72 = fsub double %61, %71
  %73 = fsub double %66, %70
  %74 = fadd double %73, %72
  %75 = fadd double %68, %63
  %76 = fadd double %75, %74
  %77 = fmul double %69, 4.000000e+00
  %78 = tail call double @llvm.rint.f64(double %77) #6
  %79 = tail call double @llvm.rint.f64(double %69) #6
  %80 = fmul double %79, 4.000000e+00
  %81 = fsub double %78, %80
  %82 = tail call double @llvm.trunc.f64(double %81) #6
  %83 = fptosi double %82 to i32
  %84 = fmul double %78, 2.500000e-01
  %85 = fsub double %69, %84
  %86 = add nsw i32 %83, %58
  %87 = fadd double %85, %76
  %88 = fsub double %85, %87
  %89 = fadd double %76, %88
  %90 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %46
  %91 = load double, double* %90, align 8, !tbaa !3, !noalias !19
  %92 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %46
  %93 = load double, double* %92, align 8, !tbaa !3, !noalias !19
  %94 = fmul double %91, %41
  %95 = fsub double -0.000000e+00, %94
  %96 = tail call double @llvm.fma.f64(double %91, double %41, double %95) #6
  %97 = tail call double @llvm.fma.f64(double %93, double %41, double %96) #6
  %98 = fadd double %94, %87
  %99 = fsub double %98, %87
  %100 = fsub double %98, %99
  %101 = fsub double %87, %100
  %102 = fsub double %94, %99
  %103 = fadd double %102, %101
  %104 = fadd double %97, %89
  %105 = fadd double %104, %103
  %106 = fadd double %98, %105
  %107 = fsub double %98, %106
  %108 = fadd double %105, %107
  %109 = fmul double %106, 0x401921FB54442D18
  %110 = fsub double -0.000000e+00, %109
  %111 = tail call double @llvm.fma.f64(double %106, double 0x401921FB54442D18, double %110) #6
  %112 = tail call double @llvm.fma.f64(double %108, double 0x401921FB54442D18, double %111) #6
  %113 = tail call double @llvm.fma.f64(double %106, double 0x3CB1A62633145C07, double %112) #6
  %114 = and i64 %40, 9223372036854775807
  %115 = bitcast i64 %114 to double
  %116 = fcmp olt double %115, 0x3FE6666666666666
  %117 = select i1 %116, double %41, double %109
  %118 = bitcast double %113 to i64
  %119 = select i1 %116, i64 4294967295, i64 0
  %120 = shl nuw i64 %119, 32
  %121 = or i64 %120, %119
  %122 = xor i64 %121, -1
  %123 = and i64 %118, %122
  %124 = bitcast i64 %123 to double
  %125 = fadd double %117, %124
  %126 = fcmp oeq double %0, 0x7FF0000000000000
  %127 = fcmp oeq double %0, 0xFFF0000000000000
  %128 = or i1 %126, %127
  %129 = fcmp uno double %0, 0.000000e+00
  %130 = or i1 %129, %128
  %131 = bitcast double %125 to i64
  %132 = select i1 %130, i64 4294967295, i64 0
  %133 = shl nuw i64 %132, 32
  %134 = or i64 %133, %132
  %135 = or i64 %134, %131
  %136 = bitcast i64 %135 to double
  br label %137

; <label>:137:                                    ; preds = %14, %30, %6
  %138 = phi i32 [ %9, %6 ], [ %21, %14 ], [ %86, %30 ]
  %139 = phi double [ %11, %6 ], [ %29, %14 ], [ %136, %30 ]
  %140 = fmul double %139, %139
  %141 = tail call double @llvm.fma.f64(double %140, double 0x3DE5D82500BECB6B, double 0xBE5AE5E1E6F6F6D8) #6
  %142 = tail call double @llvm.fma.f64(double %141, double %140, double 0x3EC71DE3503EAE9C) #6
  %143 = tail call double @llvm.fma.f64(double %142, double %140, double 0xBF2A01A019B64F6A) #6
  %144 = tail call double @llvm.fma.f64(double %143, double %140, double 0x3F8111111110F135) #6
  %145 = tail call double @llvm.fma.f64(double %144, double %140, double 0xBFC5555555555542) #6
  %146 = fmul double %140, %145
  %147 = tail call double @llvm.fma.f64(double %146, double %139, double %139) #6
  %148 = icmp eq i64 %2, -9223372036854775808
  %149 = select i1 %148, double -0.000000e+00, double %147
  %150 = tail call double @llvm.fma.f64(double %140, double 0xBDA8FBF9C1BDB8CE, double 0x3E21EEA016409F05) #6
  %151 = tail call double @llvm.fma.f64(double %150, double %140, double 0xBE927E4F8130BE9C) #6
  %152 = tail call double @llvm.fma.f64(double %151, double %140, double 0x3EFA01A019C8F025) #6
  %153 = tail call double @llvm.fma.f64(double %152, double %140, double 0xBF56C16C16C14C96) #6
  %154 = tail call double @llvm.fma.f64(double %153, double %140, double 0x3FA5555555555545) #6
  %155 = tail call double @llvm.fma.f64(double %154, double %140, double -5.000000e-01) #6
  %156 = tail call double @llvm.fma.f64(double %140, double %155, double 1.000000e+00) #6
  %157 = and i32 %138, 1
  %158 = icmp ne i32 %157, 0
  %159 = select i1 %158, double %156, double %149
  %160 = select i1 %158, double %149, double %156
  %161 = shl i32 %138, 30
  %162 = zext i32 %161 to i64
  %163 = shl nuw i64 %162, 32
  %164 = and i64 %163, -9223372036854775808
  %165 = bitcast double %159 to i64
  %166 = xor i64 %164, %165
  %167 = bitcast i64 %166 to double
  %168 = add i32 %161, 1073741824
  %169 = zext i32 %168 to i64
  %170 = shl nuw i64 %169, 32
  %171 = and i64 %170, -9223372036854775808
  %172 = bitcast double %160 to i64
  %173 = xor i64 %171, %172
  %174 = bitcast i64 %173 to double
  %175 = insertvalue { double, double } undef, double %167, 0
  %176 = insertvalue { double, double } %175, double %174, 1
  ret { double, double } %176
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincosd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %15, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xBFF921FB54442D18, double %0) #6
  %11 = fmul double %8, 0xBC91A62633145C07
  %12 = fadd double %10, %11
  %13 = fsub double %10, %12
  %14 = fadd double %11, %13
  br label %175

; <label>:15:                                     ; preds = %1
  %16 = fcmp uge double %4, 1.000000e+14
  br i1 %16, label %68, label %17, !prof !2

; <label>:17:                                     ; preds = %15
  %18 = fmul double %0, 0x3E645F306DC9C883
  %19 = tail call double @llvm.trunc.f64(double %18) #6
  %20 = fmul double %19, 0x4170000000000000
  %21 = fmul double %0, 0x3FE45F306DC9C883
  %22 = fsub double %21, %20
  %23 = tail call double @llvm.rint.f64(double %22) #6
  %24 = fptosi double %23 to i32
  %25 = tail call double @llvm.fma.f64(double %20, double 0xBFF921FB50000000, double %0) #6
  %26 = fmul double %23, 0xBFF921FB50000000
  %27 = fadd double %25, %26
  %28 = fsub double %25, %27
  %29 = fadd double %26, %28
  %30 = fmul double %20, 0xBE5110B460000000
  %31 = fadd double %30, %27
  %32 = fsub double %31, %27
  %33 = fsub double %31, %32
  %34 = fsub double %27, %33
  %35 = fsub double %30, %32
  %36 = fadd double %35, %34
  %37 = fadd double %29, %36
  %38 = fmul double %23, 0xBE5110B460000000
  %39 = fadd double %38, %31
  %40 = fsub double %39, %31
  %41 = fsub double %39, %40
  %42 = fsub double %31, %41
  %43 = fsub double %38, %40
  %44 = fadd double %43, %42
  %45 = fadd double %44, %37
  %46 = fmul double %20, 0xBC91A62630000000
  %47 = fadd double %46, %39
  %48 = fsub double %47, %39
  %49 = fsub double %47, %48
  %50 = fsub double %39, %49
  %51 = fsub double %46, %48
  %52 = fadd double %51, %50
  %53 = fadd double %52, %45
  %54 = fmul double %23, 0xBC91A62630000000
  %55 = fadd double %54, %47
  %56 = fsub double %55, %47
  %57 = fsub double %55, %56
  %58 = fsub double %47, %57
  %59 = fsub double %54, %56
  %60 = fadd double %59, %58
  %61 = fadd double %60, %53
  %62 = fadd double %20, %23
  %63 = fmul double %62, 0xBAE8A2E03707344A
  %64 = fadd double %63, %55
  %65 = fsub double %55, %64
  %66 = fadd double %63, %65
  %67 = fadd double %66, %61
  br label %175

; <label>:68:                                     ; preds = %15
  %69 = lshr i64 %2, 52
  %70 = trunc i64 %69 to i32
  %71 = and i32 %70, 2047
  %72 = add nsw i32 %71, -1078
  %73 = icmp ugt i32 %71, 1723
  %74 = select i1 %73, i64 -288230376151711744, i64 0
  %75 = and i64 %2, -4294967296
  %76 = add i64 %74, %75
  %77 = and i64 %2, 4294967295
  %78 = or i64 %76, %77
  %79 = bitcast i64 %78 to double
  %80 = ashr i32 %72, 31
  %81 = xor i32 %80, 1073741823
  %82 = and i32 %81, %72
  %83 = shl i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %84
  %86 = load double, double* %85, align 8, !tbaa !3, !noalias !22
  %87 = fmul double %86, %79
  %88 = fsub double -0.000000e+00, %87
  %89 = tail call double @llvm.fma.f64(double %79, double %86, double %88) #6
  %90 = fmul double %87, 4.000000e+00
  %91 = tail call double @llvm.rint.f64(double %90) #6
  %92 = tail call double @llvm.rint.f64(double %87) #6
  %93 = fmul double %92, 4.000000e+00
  %94 = fsub double %91, %93
  %95 = tail call double @llvm.trunc.f64(double %94) #6
  %96 = fptosi double %95 to i32
  %97 = fmul double %91, 2.500000e-01
  %98 = fsub double %87, %97
  %99 = fadd double %89, %98
  %100 = fsub double %98, %99
  %101 = fadd double %89, %100
  %102 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %84
  %103 = load double, double* %102, align 8, !tbaa !3, !noalias !22
  %104 = fmul double %103, %79
  %105 = fsub double -0.000000e+00, %104
  %106 = tail call double @llvm.fma.f64(double %79, double %103, double %105) #6
  %107 = fadd double %104, %99
  %108 = fsub double %107, %99
  %109 = fsub double %107, %108
  %110 = fsub double %99, %109
  %111 = fsub double %104, %108
  %112 = fadd double %111, %110
  %113 = fadd double %106, %101
  %114 = fadd double %113, %112
  %115 = fmul double %107, 4.000000e+00
  %116 = tail call double @llvm.rint.f64(double %115) #6
  %117 = tail call double @llvm.rint.f64(double %107) #6
  %118 = fmul double %117, 4.000000e+00
  %119 = fsub double %116, %118
  %120 = tail call double @llvm.trunc.f64(double %119) #6
  %121 = fptosi double %120 to i32
  %122 = fmul double %116, 2.500000e-01
  %123 = fsub double %107, %122
  %124 = add nsw i32 %121, %96
  %125 = fadd double %123, %114
  %126 = fsub double %123, %125
  %127 = fadd double %114, %126
  %128 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %84
  %129 = load double, double* %128, align 8, !tbaa !3, !noalias !22
  %130 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %84
  %131 = load double, double* %130, align 8, !tbaa !3, !noalias !22
  %132 = fmul double %129, %79
  %133 = fsub double -0.000000e+00, %132
  %134 = tail call double @llvm.fma.f64(double %129, double %79, double %133) #6
  %135 = tail call double @llvm.fma.f64(double %131, double %79, double %134) #6
  %136 = fadd double %132, %125
  %137 = fsub double %136, %125
  %138 = fsub double %136, %137
  %139 = fsub double %125, %138
  %140 = fsub double %132, %137
  %141 = fadd double %140, %139
  %142 = fadd double %135, %127
  %143 = fadd double %142, %141
  %144 = fadd double %136, %143
  %145 = fsub double %136, %144
  %146 = fadd double %143, %145
  %147 = fmul double %144, 0x401921FB54442D18
  %148 = fsub double -0.000000e+00, %147
  %149 = tail call double @llvm.fma.f64(double %144, double 0x401921FB54442D18, double %148) #6
  %150 = tail call double @llvm.fma.f64(double %146, double 0x401921FB54442D18, double %149) #6
  %151 = tail call double @llvm.fma.f64(double %144, double 0x3CB1A62633145C07, double %150) #6
  %152 = and i64 %78, 9223372036854775807
  %153 = bitcast i64 %152 to double
  %154 = fcmp olt double %153, 0x3FE6666666666666
  %155 = select i1 %154, double %79, double %147
  %156 = bitcast double %151 to i64
  %157 = select i1 %154, i64 4294967295, i64 0
  %158 = shl nuw i64 %157, 32
  %159 = or i64 %158, %157
  %160 = xor i64 %159, -1
  %161 = and i64 %156, %160
  %162 = fcmp oeq double %0, 0x7FF0000000000000
  %163 = fcmp oeq double %0, 0xFFF0000000000000
  %164 = or i1 %162, %163
  %165 = fcmp uno double %0, 0.000000e+00
  %166 = or i1 %165, %164
  %167 = bitcast double %155 to i64
  %168 = select i1 %166, i64 4294967295, i64 0
  %169 = shl nuw i64 %168, 32
  %170 = or i64 %169, %168
  %171 = or i64 %170, %167
  %172 = bitcast i64 %171 to double
  %173 = or i64 %170, %161
  %174 = bitcast i64 %173 to double
  br label %175

; <label>:175:                                    ; preds = %17, %68, %6
  %176 = phi i32 [ %9, %6 ], [ %24, %17 ], [ %124, %68 ]
  %177 = phi double [ %12, %6 ], [ %64, %17 ], [ %172, %68 ]
  %178 = phi double [ %14, %6 ], [ %67, %17 ], [ %174, %68 ]
  %179 = fmul double %177, %178
  %180 = fadd double %179, %179
  %181 = tail call double @llvm.fma.f64(double %177, double %177, double %180) #6
  %182 = tail call double @llvm.fma.f64(double %181, double 0x3DE5D82500BECB6B, double 0xBE5AE5E1E6F6F6D8) #6
  %183 = tail call double @llvm.fma.f64(double %182, double %181, double 0x3EC71DE3503EAE9C) #6
  %184 = tail call double @llvm.fma.f64(double %183, double %181, double 0xBF2A01A019B64F6A) #6
  %185 = tail call double @llvm.fma.f64(double %184, double %181, double 0x3F8111111110F135) #6
  %186 = tail call double @llvm.fma.f64(double %185, double %181, double 0xBFC5555555555542) #6
  %187 = fmul double %177, %181
  %188 = fmul double %187, %186
  %189 = fadd double %177, %188
  %190 = fsub double %177, %189
  %191 = fadd double %188, %190
  %192 = fadd double %178, %191
  %193 = fadd double %189, %192
  %194 = icmp eq i64 %2, -9223372036854775808
  %195 = select i1 %194, double -0.000000e+00, double %193
  %196 = tail call double @llvm.fma.f64(double %181, double 0xBDA8FBF9C1BDB8CE, double 0x3E21EEA016409F05) #6
  %197 = tail call double @llvm.fma.f64(double %196, double %181, double 0xBE927E4F8130BE9C) #6
  %198 = tail call double @llvm.fma.f64(double %197, double %181, double 0x3EFA01A019C8F025) #6
  %199 = tail call double @llvm.fma.f64(double %198, double %181, double 0xBF56C16C16C14C96) #6
  %200 = tail call double @llvm.fma.f64(double %199, double %181, double 0x3FA5555555555545) #6
  %201 = tail call double @llvm.fma.f64(double %200, double %181, double -5.000000e-01) #6
  %202 = fmul double %181, %201
  %203 = fsub double -0.000000e+00, %202
  %204 = tail call double @llvm.fma.f64(double %181, double %201, double %203) #6
  %205 = fadd double %202, 1.000000e+00
  %206 = fsub double 1.000000e+00, %205
  %207 = fadd double %202, %206
  %208 = fadd double %204, %207
  %209 = fadd double %205, %208
  %210 = and i32 %176, 1
  %211 = icmp ne i32 %210, 0
  %212 = select i1 %211, double %209, double %195
  %213 = select i1 %211, double %195, double %209
  %214 = shl i32 %176, 30
  %215 = zext i32 %214 to i64
  %216 = shl nuw i64 %215, 32
  %217 = and i64 %216, -9223372036854775808
  %218 = bitcast double %212 to i64
  %219 = xor i64 %217, %218
  %220 = bitcast i64 %219 to double
  %221 = add i32 %214, 1073741824
  %222 = zext i32 %221 to i64
  %223 = shl nuw i64 %222, 32
  %224 = and i64 %223, -9223372036854775808
  %225 = bitcast double %213 to i64
  %226 = xor i64 %224, %225
  %227 = bitcast i64 %226 to double
  %228 = insertvalue { double, double } undef, double %220, 0
  %229 = insertvalue { double, double } %228, double %227, 1
  ret { double, double } %229
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincospid1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 4.000000e+00
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = lshr i32 %4, 31
  %6 = xor i32 %5, 1
  %7 = add nsw i32 %6, %4
  %8 = and i32 %7, -2
  %9 = sitofp i32 %8 to double
  %10 = fsub double %2, %9
  %11 = fmul double %10, %10
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %10, double %10, double %12) #6
  %14 = tail call double @llvm.fma.f64(double %11, double 0xBD16CB8B645A2115, double 0x3D9E8EFF936BEB38) #6
  %15 = tail call double @llvm.fma.f64(double %14, double %11, double 0xBE1E3074CBC7E020) #6
  %16 = tail call double @llvm.fma.f64(double %15, double %11, double 0x3E950783486A74C8) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %11, double 0xBF032D2CCE62B479) #6
  %18 = tail call double @llvm.fma.f64(double %17, double %11, double 0x3F6466BC6775AADE) #6
  %19 = fmul double %11, %18
  %20 = fadd double %19, 0xBFB4ABBCE625BE53
  %21 = fsub double %20, %19
  %22 = fsub double %20, %21
  %23 = fsub double %19, %22
  %24 = fsub double 0xBFB4ABBCE625BE53, %21
  %25 = fadd double %24, %23
  %26 = fadd double %25, 0x3C50B00000000000
  %27 = fmul double %11, %20
  %28 = fsub double -0.000000e+00, %27
  %29 = tail call double @llvm.fma.f64(double %11, double %20, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %13, double %20, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %11, double %26, double %30) #6
  %32 = fadd double %27, 0x3FE921FB54442D18
  %33 = fsub double %32, %27
  %34 = fsub double %32, %33
  %35 = fsub double %27, %34
  %36 = fsub double 0x3FE921FB54442D18, %33
  %37 = fadd double %36, %35
  %38 = fadd double %31, 0x3C81A80000000000
  %39 = fadd double %37, %38
  %40 = fmul double %10, %32
  %41 = fsub double -0.000000e+00, %40
  %42 = tail call double @llvm.fma.f64(double %32, double %10, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %39, double %10, double %42) #6
  %44 = fadd double %40, %43
  %45 = bitcast double %0 to i64
  %46 = icmp eq i64 %45, -9223372036854775808
  %47 = select i1 %46, double -0.000000e+00, double %44
  %48 = tail call double @llvm.fma.f64(double %11, double 0x3CD1EA3B366CF50B, double 0xBD5B6DF1CE46F480) #6
  %49 = tail call double @llvm.fma.f64(double %48, double %11, double 0x3DDF9D387B282B12) #6
  %50 = tail call double @llvm.fma.f64(double %49, double %11, double 0xBE5A6D1F2A0E516D) #6
  %51 = tail call double @llvm.fma.f64(double %50, double %11, double 0x3ECE1F506891B1AB) #6
  %52 = tail call double @llvm.fma.f64(double %51, double %11, double 0xBF355D3C7E3CBFF8) #6
  %53 = fmul double %11, %52
  %54 = fadd double %53, 0x3F903C1F081B5AC4
  %55 = fsub double %54, %53
  %56 = fsub double %54, %55
  %57 = fsub double %53, %56
  %58 = fsub double 0x3F903C1F081B5AC4, %55
  %59 = fadd double %58, %57
  %60 = fadd double %59, 0xBC33500000000000
  %61 = fmul double %11, %54
  %62 = fsub double -0.000000e+00, %61
  %63 = tail call double @llvm.fma.f64(double %11, double %54, double %62) #6
  %64 = tail call double @llvm.fma.f64(double %13, double %54, double %63) #6
  %65 = tail call double @llvm.fma.f64(double %11, double %60, double %64) #6
  %66 = fadd double %61, 0xBFD3BD3CC9BE45DE
  %67 = fsub double %66, %61
  %68 = fsub double %66, %67
  %69 = fsub double %61, %68
  %70 = fsub double 0xBFD3BD3CC9BE45DE, %67
  %71 = fadd double %70, %69
  %72 = fadd double %65, 0xBC76900000000000
  %73 = fadd double %71, %72
  %74 = fmul double %11, %66
  %75 = fsub double -0.000000e+00, %74
  %76 = tail call double @llvm.fma.f64(double %66, double %11, double %75) #6
  %77 = tail call double @llvm.fma.f64(double %73, double %11, double %76) #6
  %78 = tail call double @llvm.fma.f64(double %66, double %13, double %77) #6
  %79 = fadd double %74, 1.000000e+00
  %80 = fsub double %79, %74
  %81 = fsub double %79, %80
  %82 = fsub double %74, %81
  %83 = fsub double 1.000000e+00, %80
  %84 = fadd double %83, %82
  %85 = fadd double %84, %78
  %86 = fadd double %79, %85
  %87 = and i32 %7, 2
  %88 = icmp ne i32 %87, 0
  %89 = select i1 %88, double %86, double %47
  %90 = select i1 %88, double %47, double %86
  %91 = shl i32 %7, 29
  %92 = zext i32 %91 to i64
  %93 = shl nuw i64 %92, 32
  %94 = and i64 %93, -9223372036854775808
  %95 = bitcast double %89 to i64
  %96 = xor i64 %94, %95
  %97 = shl i32 %8, 29
  %98 = add i32 %97, 1073741824
  %99 = zext i32 %98 to i64
  %100 = shl nuw i64 %99, 32
  %101 = and i64 %100, -9223372036854775808
  %102 = bitcast double %90 to i64
  %103 = xor i64 %101, %102
  %104 = and i64 %45, 9223372036854775807
  %105 = bitcast i64 %104 to double
  %106 = fcmp ogt double %105, 2.500000e+08
  %107 = select i1 %106, i64 4294967295, i64 0
  %108 = shl nuw i64 %107, 32
  %109 = or i64 %108, %107
  %110 = xor i64 %109, -1
  %111 = and i64 %96, %110
  %112 = fcmp oeq double %0, 0x7FF0000000000000
  %113 = fcmp oeq double %0, 0xFFF0000000000000
  %114 = or i1 %112, %113
  %115 = select i1 %114, i64 4294967295, i64 0
  %116 = shl nuw i64 %115, 32
  %117 = or i64 %116, %115
  %118 = or i64 %117, %111
  %119 = bitcast i64 %118 to double
  %120 = select i1 %106, i64 4607182418800017408, i64 %103
  %121 = or i64 %117, %120
  %122 = bitcast i64 %121 to double
  %123 = insertvalue { double, double } undef, double %119, 0
  %124 = insertvalue { double, double } %123, double %122, 1
  ret { double, double } %124
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincospid1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 4.000000e+00
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = lshr i32 %4, 31
  %6 = xor i32 %5, 1
  %7 = add nsw i32 %6, %4
  %8 = and i32 %7, -2
  %9 = sitofp i32 %8 to double
  %10 = fsub double %2, %9
  %11 = fmul double %10, %10
  %12 = tail call double @llvm.fma.f64(double %11, double 0x3D9E42E923057D6C, double 0xBE1E3011CA3F21B5) #6
  %13 = tail call double @llvm.fma.f64(double %12, double %11, double 0x3E9507830918116C) #6
  %14 = tail call double @llvm.fma.f64(double %13, double %11, double 0xBF032D2CCE398CAE) #6
  %15 = tail call double @llvm.fma.f64(double %14, double %11, double 0x3F6466BC677591C5) #6
  %16 = tail call double @llvm.fma.f64(double %15, double %11, double 0xBFB4ABBCE625BE43) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %11, double 0x3FE921FB54442D18) #6
  %18 = fmul double %10, %17
  %19 = tail call double @llvm.fma.f64(double %11, double 0xBD5B29CFED2A85B3, double 0x3DDF9CD01C42C7CD) #6
  %20 = tail call double @llvm.fma.f64(double %19, double %11, double 0xBE5A6D1ED7B66707) #6
  %21 = tail call double @llvm.fma.f64(double %20, double %11, double 0x3ECE1F50684AD332) #6
  %22 = tail call double @llvm.fma.f64(double %21, double %11, double 0xBF355D3C7E3C9FCF) #6
  %23 = tail call double @llvm.fma.f64(double %22, double %11, double 0x3F903C1F081B5AAA) #6
  %24 = tail call double @llvm.fma.f64(double %23, double %11, double 0xBFD3BD3CC9BE45DE) #6
  %25 = tail call double @llvm.fma.f64(double %24, double %11, double 1.000000e+00) #6
  %26 = and i32 %7, 2
  %27 = icmp ne i32 %26, 0
  %28 = select i1 %27, double %25, double %18
  %29 = select i1 %27, double %18, double %25
  %30 = shl i32 %7, 29
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  %33 = and i64 %32, -9223372036854775808
  %34 = bitcast double %28 to i64
  %35 = xor i64 %33, %34
  %36 = shl i32 %8, 29
  %37 = add i32 %36, 1073741824
  %38 = zext i32 %37 to i64
  %39 = shl nuw i64 %38, 32
  %40 = and i64 %39, -9223372036854775808
  %41 = bitcast double %29 to i64
  %42 = xor i64 %40, %41
  %43 = bitcast double %0 to i64
  %44 = and i64 %43, 9223372036854775807
  %45 = bitcast i64 %44 to double
  %46 = fcmp ogt double %45, 2.500000e+08
  %47 = select i1 %46, i64 4294967295, i64 0
  %48 = shl nuw i64 %47, 32
  %49 = or i64 %48, %47
  %50 = xor i64 %49, -1
  %51 = and i64 %35, %50
  %52 = and i64 %42, %50
  %53 = fcmp oeq double %0, 0x7FF0000000000000
  %54 = fcmp oeq double %0, 0xFFF0000000000000
  %55 = or i1 %53, %54
  %56 = select i1 %55, i64 4294967295, i64 0
  %57 = shl nuw i64 %56, 32
  %58 = or i64 %57, %56
  %59 = or i64 %58, %51
  %60 = bitcast i64 %59 to double
  %61 = or i64 %58, %52
  %62 = bitcast i64 %61 to double
  %63 = insertvalue { double, double } undef, double %60, 0
  %64 = insertvalue { double, double } %63, double %62, 1
  ret { double, double } %64
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_modfd1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = bitcast double %0 to i64
  %13 = and i64 %12, 9223372036854775807
  %14 = bitcast i64 %13 to double
  %15 = fcmp ule double %14, 0x4330000000000000
  %16 = select i1 %15, double %11, double 0.000000e+00
  %17 = bitcast double %16 to i64
  %18 = and i64 %17, 9223372036854775807
  %19 = and i64 %12, -9223372036854775808
  %20 = or i64 %18, %19
  %21 = bitcast i64 %20 to double
  %22 = fsub double %0, %16
  %23 = bitcast double %22 to i64
  %24 = and i64 %23, 9223372036854775807
  %25 = or i64 %24, %19
  %26 = bitcast i64 %25 to double
  %27 = insertvalue { double, double } undef, double %21, 0
  %28 = insertvalue { double, double } %27, double %26, 1
  ret { double, double } %28
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sinpid1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 4.000000e+00
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = lshr i32 %4, 31
  %6 = xor i32 %5, 1
  %7 = add nsw i32 %6, %4
  %8 = and i32 %7, -2
  %9 = sitofp i32 %8 to double
  %10 = fsub double %2, %9
  %11 = fmul double %10, %10
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %10, double %10, double %12) #6
  %14 = and i32 %7, 2
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %17 = select i1 %15, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %18 = tail call double @llvm.fma.f64(double %16, double %11, double %17) #6
  %19 = select i1 %15, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %20 = tail call double @llvm.fma.f64(double %18, double %11, double %19) #6
  %21 = select i1 %15, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %22 = tail call double @llvm.fma.f64(double %20, double %11, double %21) #6
  %23 = select i1 %15, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %24 = tail call double @llvm.fma.f64(double %22, double %11, double %23) #6
  %25 = select i1 %15, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %26 = tail call double @llvm.fma.f64(double %24, double %11, double %25) #6
  %27 = fmul double %11, %26
  %28 = select i1 %15, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %29 = select i1 %15, double 0x3C50B00000000000, double 0xBC33500000000000
  %30 = fadd double %28, %27
  %31 = fsub double %30, %27
  %32 = fsub double %30, %31
  %33 = fsub double %27, %32
  %34 = fsub double %28, %31
  %35 = fadd double %34, %33
  %36 = fadd double %29, %35
  %37 = fmul double %11, %30
  %38 = fsub double -0.000000e+00, %37
  %39 = tail call double @llvm.fma.f64(double %11, double %30, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %13, double %30, double %39) #6
  %41 = tail call double @llvm.fma.f64(double %11, double %36, double %40) #6
  %42 = select i1 %15, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %43 = select i1 %15, double 0x3C81A80000000000, double 0xBC76900000000000
  %44 = fadd double %42, %37
  %45 = fsub double %44, %37
  %46 = fsub double %44, %45
  %47 = fsub double %37, %46
  %48 = fsub double %42, %45
  %49 = fadd double %48, %47
  %50 = fadd double %43, %41
  %51 = fadd double %49, %50
  %52 = select i1 %15, double %10, double %11
  %53 = select i1 %15, double 0.000000e+00, double %13
  %54 = fmul double %52, %44
  %55 = fsub double -0.000000e+00, %54
  %56 = tail call double @llvm.fma.f64(double %44, double %52, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %51, double %52, double %56) #6
  %58 = tail call double @llvm.fma.f64(double %44, double %53, double %57) #6
  %59 = fadd double %54, 1.000000e+00
  %60 = fsub double %59, %54
  %61 = fsub double %59, %60
  %62 = fsub double %54, %61
  %63 = fsub double 1.000000e+00, %60
  %64 = fadd double %63, %62
  %65 = fadd double %64, %58
  %66 = select i1 %15, double %54, double %59
  %67 = select i1 %15, double %58, double %65
  %68 = shl i32 %7, 29
  %69 = zext i32 %68 to i64
  %70 = shl nuw i64 %69, 32
  %71 = and i64 %70, -9223372036854775808
  %72 = bitcast double %66 to i64
  %73 = xor i64 %71, %72
  %74 = bitcast i64 %73 to double
  %75 = bitcast double %67 to i64
  %76 = xor i64 %71, %75
  %77 = bitcast i64 %76 to double
  %78 = fadd double %74, %77
  %79 = bitcast double %0 to i64
  %80 = icmp eq i64 %79, -9223372036854775808
  %81 = and i64 %79, 9223372036854775807
  %82 = bitcast i64 %81 to double
  %83 = fcmp ogt double %82, 2.500000e+08
  %84 = bitcast double %78 to i64
  %85 = select i1 %80, i64 -9223372036854775808, i64 %84
  %86 = select i1 %83, i64 4294967295, i64 0
  %87 = shl nuw i64 %86, 32
  %88 = or i64 %87, %86
  %89 = xor i64 %88, -1
  %90 = and i64 %85, %89
  %91 = fcmp oeq double %0, 0x7FF0000000000000
  %92 = fcmp oeq double %0, 0xFFF0000000000000
  %93 = or i1 %91, %92
  %94 = select i1 %93, i64 4294967295, i64 0
  %95 = shl nuw i64 %94, 32
  %96 = or i64 %95, %94
  %97 = or i64 %96, %90
  %98 = bitcast i64 %97 to double
  ret double %98
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cospid1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 4.000000e+00
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = lshr i32 %4, 31
  %6 = xor i32 %5, 1
  %7 = add nsw i32 %6, %4
  %8 = and i32 %7, -2
  %9 = and i32 %7, 2
  %10 = sitofp i32 %8 to double
  %11 = fsub double %2, %10
  %12 = fmul double %11, %11
  %13 = fsub double -0.000000e+00, %12
  %14 = tail call double @llvm.fma.f64(double %11, double %11, double %13) #6
  %15 = icmp ne i32 %9, 0
  %16 = select i1 %15, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %17 = select i1 %15, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %18 = tail call double @llvm.fma.f64(double %16, double %12, double %17) #6
  %19 = select i1 %15, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %20 = tail call double @llvm.fma.f64(double %18, double %12, double %19) #6
  %21 = select i1 %15, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %22 = tail call double @llvm.fma.f64(double %20, double %12, double %21) #6
  %23 = select i1 %15, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %24 = tail call double @llvm.fma.f64(double %22, double %12, double %23) #6
  %25 = select i1 %15, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %26 = tail call double @llvm.fma.f64(double %24, double %12, double %25) #6
  %27 = fmul double %12, %26
  %28 = select i1 %15, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %29 = select i1 %15, double 0x3C50B00000000000, double 0xBC33500000000000
  %30 = fadd double %28, %27
  %31 = fsub double %30, %27
  %32 = fsub double %30, %31
  %33 = fsub double %27, %32
  %34 = fsub double %28, %31
  %35 = fadd double %34, %33
  %36 = fadd double %29, %35
  %37 = fmul double %12, %30
  %38 = fsub double -0.000000e+00, %37
  %39 = tail call double @llvm.fma.f64(double %12, double %30, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %14, double %30, double %39) #6
  %41 = tail call double @llvm.fma.f64(double %12, double %36, double %40) #6
  %42 = select i1 %15, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %43 = select i1 %15, double 0x3C81A80000000000, double 0xBC76900000000000
  %44 = fadd double %42, %37
  %45 = fsub double %44, %37
  %46 = fsub double %44, %45
  %47 = fsub double %37, %46
  %48 = fsub double %42, %45
  %49 = fadd double %48, %47
  %50 = fadd double %43, %41
  %51 = fadd double %49, %50
  %52 = select i1 %15, double %11, double %12
  %53 = select i1 %15, double 0.000000e+00, double %14
  %54 = fmul double %52, %44
  %55 = fsub double -0.000000e+00, %54
  %56 = tail call double @llvm.fma.f64(double %44, double %52, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %51, double %52, double %56) #6
  %58 = tail call double @llvm.fma.f64(double %44, double %53, double %57) #6
  %59 = fadd double %54, 1.000000e+00
  %60 = fsub double %59, %54
  %61 = fsub double %59, %60
  %62 = fsub double %54, %61
  %63 = fsub double 1.000000e+00, %60
  %64 = fadd double %63, %62
  %65 = fadd double %64, %58
  %66 = select i1 %15, double %54, double %59
  %67 = select i1 %15, double %58, double %65
  %68 = shl i32 %8, 29
  %69 = add i32 %68, 1073741824
  %70 = zext i32 %69 to i64
  %71 = shl nuw i64 %70, 32
  %72 = and i64 %71, -9223372036854775808
  %73 = bitcast double %66 to i64
  %74 = xor i64 %72, %73
  %75 = bitcast i64 %74 to double
  %76 = bitcast double %67 to i64
  %77 = xor i64 %72, %76
  %78 = bitcast i64 %77 to double
  %79 = fadd double %75, %78
  %80 = bitcast double %0 to i64
  %81 = and i64 %80, 9223372036854775807
  %82 = bitcast i64 %81 to double
  %83 = fcmp ule double %82, 2.500000e+08
  %84 = fcmp oeq double %0, 0x7FF0000000000000
  %85 = fcmp oeq double %0, 0xFFF0000000000000
  %86 = or i1 %84, %85
  %87 = bitcast double %79 to i64
  %88 = select i1 %83, i64 %87, i64 4607182418800017408
  %89 = select i1 %86, i64 4294967295, i64 0
  %90 = shl nuw i64 %89, 32
  %91 = or i64 %90, %89
  %92 = or i64 %91, %88
  %93 = bitcast i64 %92 to double
  ret double %93
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tand1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %12, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xBFF921FB54442D18, double %0) #6
  %11 = tail call double @llvm.fma.f64(double %8, double 0xBC91A62633145C07, double %10) #6
  br label %141

; <label>:12:                                     ; preds = %1
  %13 = fcmp uge double %4, 1.000000e+06
  br i1 %13, label %30, label %14, !prof !2

; <label>:14:                                     ; preds = %12
  %15 = fmul double %0, 0x3E645F306DC9C883
  %16 = tail call double @llvm.trunc.f64(double %15) #6
  %17 = fmul double %16, 0x4170000000000000
  %18 = fmul double %0, 0x3FE45F306DC9C883
  %19 = fsub double %18, %17
  %20 = tail call double @llvm.rint.f64(double %19) #6
  %21 = fptosi double %20 to i32
  %22 = tail call double @llvm.fma.f64(double %17, double 0xBFF921FB50000000, double %0) #6
  %23 = tail call double @llvm.fma.f64(double %20, double 0xBFF921FB50000000, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %17, double 0xBE5110B460000000, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %20, double 0xBE5110B460000000, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %17, double 0xBC91A62630000000, double %25) #6
  %27 = tail call double @llvm.fma.f64(double %20, double 0xBC91A62630000000, double %26) #6
  %28 = fadd double %17, %20
  %29 = tail call double @llvm.fma.f64(double %28, double 0xBAE8A2E03707344A, double %27) #6
  br label %141

; <label>:30:                                     ; preds = %12
  %31 = lshr i64 %2, 52
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 2047
  %34 = add nsw i32 %33, -1078
  %35 = icmp ugt i32 %33, 1723
  %36 = select i1 %35, i64 -288230376151711744, i64 0
  %37 = and i64 %2, -4294967296
  %38 = add i64 %36, %37
  %39 = and i64 %2, 4294967295
  %40 = or i64 %38, %39
  %41 = bitcast i64 %40 to double
  %42 = ashr i32 %34, 31
  %43 = xor i32 %42, 1073741823
  %44 = and i32 %43, %34
  %45 = shl i32 %44, 2
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %46
  %48 = load double, double* %47, align 8, !tbaa !3, !noalias !25
  %49 = fmul double %48, %41
  %50 = fsub double -0.000000e+00, %49
  %51 = tail call double @llvm.fma.f64(double %41, double %48, double %50) #6
  %52 = fmul double %49, 4.000000e+00
  %53 = tail call double @llvm.rint.f64(double %52) #6
  %54 = tail call double @llvm.rint.f64(double %49) #6
  %55 = fmul double %54, 4.000000e+00
  %56 = fsub double %53, %55
  %57 = tail call double @llvm.trunc.f64(double %56) #6
  %58 = fptosi double %57 to i32
  %59 = fmul double %53, 2.500000e-01
  %60 = fsub double %49, %59
  %61 = fadd double %51, %60
  %62 = fsub double %60, %61
  %63 = fadd double %51, %62
  %64 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %46
  %65 = load double, double* %64, align 8, !tbaa !3, !noalias !25
  %66 = fmul double %65, %41
  %67 = fsub double -0.000000e+00, %66
  %68 = tail call double @llvm.fma.f64(double %41, double %65, double %67) #6
  %69 = fadd double %66, %61
  %70 = fsub double %69, %61
  %71 = fsub double %69, %70
  %72 = fsub double %61, %71
  %73 = fsub double %66, %70
  %74 = fadd double %73, %72
  %75 = fadd double %68, %63
  %76 = fadd double %75, %74
  %77 = fmul double %69, 4.000000e+00
  %78 = tail call double @llvm.rint.f64(double %77) #6
  %79 = tail call double @llvm.rint.f64(double %69) #6
  %80 = fmul double %79, 4.000000e+00
  %81 = fsub double %78, %80
  %82 = tail call double @llvm.trunc.f64(double %81) #6
  %83 = fptosi double %82 to i32
  %84 = fmul double %78, 2.500000e-01
  %85 = fsub double %69, %84
  %86 = add nsw i32 %83, %58
  %87 = fadd double %85, %76
  %88 = fsub double %85, %87
  %89 = fadd double %76, %88
  %90 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %46
  %91 = load double, double* %90, align 8, !tbaa !3, !noalias !25
  %92 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %46
  %93 = load double, double* %92, align 8, !tbaa !3, !noalias !25
  %94 = fmul double %91, %41
  %95 = fsub double -0.000000e+00, %94
  %96 = tail call double @llvm.fma.f64(double %91, double %41, double %95) #6
  %97 = tail call double @llvm.fma.f64(double %93, double %41, double %96) #6
  %98 = fadd double %94, %87
  %99 = fsub double %98, %87
  %100 = fsub double %98, %99
  %101 = fsub double %87, %100
  %102 = fsub double %94, %99
  %103 = fadd double %102, %101
  %104 = fadd double %97, %89
  %105 = fadd double %104, %103
  %106 = fadd double %98, %105
  %107 = fsub double %98, %106
  %108 = fadd double %105, %107
  %109 = fmul double %106, 0x401921FB54442D18
  %110 = fsub double -0.000000e+00, %109
  %111 = tail call double @llvm.fma.f64(double %106, double 0x401921FB54442D18, double %110) #6
  %112 = tail call double @llvm.fma.f64(double %108, double 0x401921FB54442D18, double %111) #6
  %113 = tail call double @llvm.fma.f64(double %106, double 0x3CB1A62633145C07, double %112) #6
  %114 = and i64 %40, 9223372036854775807
  %115 = bitcast i64 %114 to double
  %116 = fcmp olt double %115, 0x3FE6666666666666
  %117 = select i1 %116, double %41, double %109
  %118 = bitcast double %113 to i64
  %119 = select i1 %116, i64 4294967295, i64 0
  %120 = shl nuw i64 %119, 32
  %121 = or i64 %120, %119
  %122 = xor i64 %121, -1
  %123 = and i64 %118, %122
  %124 = bitcast i64 %123 to double
  %125 = fadd double %117, %124
  %126 = fcmp oeq double %0, 0x7FF0000000000000
  %127 = fcmp oeq double %0, 0xFFF0000000000000
  %128 = or i1 %126, %127
  %129 = bitcast double %125 to i64
  %130 = select i1 %128, i64 4294967295, i64 0
  %131 = shl nuw i64 %130, 32
  %132 = fcmp uno double %0, 0.000000e+00
  %133 = or i1 %132, %128
  %134 = select i1 %133, i64 4294967295, i64 0
  %135 = shl nuw i64 %134, 32
  %136 = or i64 %131, %130
  %137 = or i64 %136, %134
  %138 = or i64 %137, %135
  %139 = or i64 %138, %129
  %140 = bitcast i64 %139 to double
  br label %141

; <label>:141:                                    ; preds = %14, %30, %6
  %142 = phi i32 [ %9, %6 ], [ %21, %14 ], [ %86, %30 ]
  %143 = phi double [ %11, %6 ], [ %29, %14 ], [ %140, %30 ]
  %144 = fmul double %143, 5.000000e-01
  %145 = fmul double %144, %144
  %146 = fmul double %145, %145
  %147 = fmul double %146, %146
  %148 = tail call double @llvm.fma.f64(double %145, double 0x3F35445F555134ED, double 0x3F4269BE400DE3AF) #6
  %149 = tail call double @llvm.fma.f64(double %145, double 0x3F57EEF631E20B93, double 0x3F6D6C27C371C959) #6
  %150 = tail call double @llvm.fma.f64(double %146, double %148, double %149) #6
  %151 = tail call double @llvm.fma.f64(double %145, double 0x3F8226E7BFA35090, double 0x3F9664F4729F98E5) #6
  %152 = tail call double @llvm.fma.f64(double %145, double 0x3FABA1BA1BDCEC06, double 0x3FC111111110E933) #6
  %153 = tail call double @llvm.fma.f64(double %146, double %151, double %152) #6
  %154 = tail call double @llvm.fma.f64(double %147, double %150, double %153) #6
  %155 = tail call double @llvm.fma.f64(double %154, double %145, double 0x3FD5555555555568) #6
  %156 = fmul double %144, %155
  %157 = tail call double @llvm.fma.f64(double %145, double %156, double %144) #6
  %158 = tail call double @llvm.fma.f64(double %157, double %157, double -1.000000e+00) #6
  %159 = fmul double %157, -2.000000e+00
  %160 = fsub double -0.000000e+00, %158
  %161 = and i32 %142, 1
  %162 = icmp eq i32 %161, 0
  %163 = select i1 %162, double %159, double %160
  %164 = select i1 %162, double %158, double %159
  %165 = fdiv double %163, %164
  %166 = fcmp une double %0, 0.000000e+00
  %167 = select i1 %166, double %165, double %0
  ret double %167
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tand1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %15, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = tail call double @llvm.rint.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = tail call double @llvm.fma.f64(double %8, double 0xBFF921FB54442D18, double %0) #6
  %11 = fmul double %8, 0xBC91A62633145C07
  %12 = fadd double %10, %11
  %13 = fsub double %10, %12
  %14 = fadd double %11, %13
  br label %189

; <label>:15:                                     ; preds = %1
  %16 = fcmp uge double %4, 1.000000e+14
  br i1 %16, label %82, label %17, !prof !2

; <label>:17:                                     ; preds = %15
  %18 = fmul double %0, 0x3E645F306DC9C883
  %19 = tail call double @llvm.trunc.f64(double %18) #6
  %20 = fmul double %19, 0x4170000000000000
  %21 = fmul double %0, 0x3FE45F306DC9C883
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %0, double 0x3FE45F306DC9C883, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %0, double 0xBC86B01EC5417056, double %23) #6
  %25 = fcmp uge double %0, 0.000000e+00
  %26 = select i1 %25, double 5.000000e-01, double -5.000000e-01
  %27 = fsub double %26, %20
  %28 = fadd double %21, %27
  %29 = fsub double %28, %21
  %30 = fsub double %28, %29
  %31 = fsub double %21, %30
  %32 = fsub double %27, %29
  %33 = fadd double %32, %31
  %34 = fadd double %24, %33
  %35 = fadd double %28, %34
  %36 = tail call double @llvm.trunc.f64(double %35) #6
  %37 = tail call double @llvm.rint.f64(double %36) #6
  %38 = fptosi double %37 to i32
  %39 = tail call double @llvm.fma.f64(double %20, double 0xBFF921FB50000000, double %0) #6
  %40 = fmul double %36, 0xBFF921FB50000000
  %41 = fadd double %39, %40
  %42 = fsub double %39, %41
  %43 = fadd double %40, %42
  %44 = fmul double %20, 0xBE5110B460000000
  %45 = fadd double %44, %41
  %46 = fsub double %45, %41
  %47 = fsub double %45, %46
  %48 = fsub double %41, %47
  %49 = fsub double %44, %46
  %50 = fadd double %49, %48
  %51 = fadd double %43, %50
  %52 = fmul double %36, 0xBE5110B460000000
  %53 = fadd double %52, %45
  %54 = fsub double %53, %45
  %55 = fsub double %53, %54
  %56 = fsub double %45, %55
  %57 = fsub double %52, %54
  %58 = fadd double %57, %56
  %59 = fadd double %58, %51
  %60 = fmul double %20, 0xBC91A62630000000
  %61 = fadd double %60, %53
  %62 = fsub double %61, %53
  %63 = fsub double %61, %62
  %64 = fsub double %53, %63
  %65 = fsub double %60, %62
  %66 = fadd double %65, %64
  %67 = fadd double %66, %59
  %68 = fmul double %36, 0xBC91A62630000000
  %69 = fadd double %68, %61
  %70 = fsub double %69, %61
  %71 = fsub double %69, %70
  %72 = fsub double %61, %71
  %73 = fsub double %68, %70
  %74 = fadd double %73, %72
  %75 = fadd double %74, %67
  %76 = fadd double %20, %36
  %77 = fmul double %76, 0xBAE8A2E03707344A
  %78 = fadd double %77, %69
  %79 = fsub double %69, %78
  %80 = fadd double %77, %79
  %81 = fadd double %80, %75
  br label %189

; <label>:82:                                     ; preds = %15
  %83 = lshr i64 %2, 52
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 2047
  %86 = add nsw i32 %85, -1078
  %87 = icmp ugt i32 %85, 1723
  %88 = select i1 %87, i64 -288230376151711744, i64 0
  %89 = and i64 %2, -4294967296
  %90 = add i64 %88, %89
  %91 = and i64 %2, 4294967295
  %92 = or i64 %90, %91
  %93 = bitcast i64 %92 to double
  %94 = ashr i32 %86, 31
  %95 = xor i32 %94, 1073741823
  %96 = and i32 %95, %86
  %97 = shl i32 %96, 2
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %98
  %100 = load double, double* %99, align 8, !tbaa !3, !noalias !28
  %101 = fmul double %100, %93
  %102 = fsub double -0.000000e+00, %101
  %103 = tail call double @llvm.fma.f64(double %93, double %100, double %102) #6
  %104 = fmul double %101, 4.000000e+00
  %105 = tail call double @llvm.rint.f64(double %104) #6
  %106 = tail call double @llvm.rint.f64(double %101) #6
  %107 = fmul double %106, 4.000000e+00
  %108 = fsub double %105, %107
  %109 = tail call double @llvm.trunc.f64(double %108) #6
  %110 = fptosi double %109 to i32
  %111 = fmul double %105, 2.500000e-01
  %112 = fsub double %101, %111
  %113 = fadd double %103, %112
  %114 = fsub double %112, %113
  %115 = fadd double %103, %114
  %116 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %98
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !28
  %118 = fmul double %117, %93
  %119 = fsub double -0.000000e+00, %118
  %120 = tail call double @llvm.fma.f64(double %93, double %117, double %119) #6
  %121 = fadd double %118, %113
  %122 = fsub double %121, %113
  %123 = fsub double %121, %122
  %124 = fsub double %113, %123
  %125 = fsub double %118, %122
  %126 = fadd double %125, %124
  %127 = fadd double %120, %115
  %128 = fadd double %127, %126
  %129 = fmul double %121, 4.000000e+00
  %130 = tail call double @llvm.rint.f64(double %129) #6
  %131 = tail call double @llvm.rint.f64(double %121) #6
  %132 = fmul double %131, 4.000000e+00
  %133 = fsub double %130, %132
  %134 = tail call double @llvm.trunc.f64(double %133) #6
  %135 = fptosi double %134 to i32
  %136 = fmul double %130, 2.500000e-01
  %137 = fsub double %121, %136
  %138 = add nsw i32 %135, %110
  %139 = fadd double %137, %128
  %140 = fsub double %137, %139
  %141 = fadd double %128, %140
  %142 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %98
  %143 = load double, double* %142, align 8, !tbaa !3, !noalias !28
  %144 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %98
  %145 = load double, double* %144, align 8, !tbaa !3, !noalias !28
  %146 = fmul double %143, %93
  %147 = fsub double -0.000000e+00, %146
  %148 = tail call double @llvm.fma.f64(double %143, double %93, double %147) #6
  %149 = tail call double @llvm.fma.f64(double %145, double %93, double %148) #6
  %150 = fadd double %146, %139
  %151 = fsub double %150, %139
  %152 = fsub double %150, %151
  %153 = fsub double %139, %152
  %154 = fsub double %146, %151
  %155 = fadd double %154, %153
  %156 = fadd double %149, %141
  %157 = fadd double %156, %155
  %158 = fadd double %150, %157
  %159 = fsub double %150, %158
  %160 = fadd double %157, %159
  %161 = fmul double %158, 0x401921FB54442D18
  %162 = fsub double -0.000000e+00, %161
  %163 = tail call double @llvm.fma.f64(double %158, double 0x401921FB54442D18, double %162) #6
  %164 = tail call double @llvm.fma.f64(double %160, double 0x401921FB54442D18, double %163) #6
  %165 = tail call double @llvm.fma.f64(double %158, double 0x3CB1A62633145C07, double %164) #6
  %166 = and i64 %92, 9223372036854775807
  %167 = bitcast i64 %166 to double
  %168 = fcmp olt double %167, 0x3FE6666666666666
  %169 = select i1 %168, double %93, double %161
  %170 = bitcast double %165 to i64
  %171 = select i1 %168, i64 4294967295, i64 0
  %172 = shl nuw i64 %171, 32
  %173 = or i64 %172, %171
  %174 = xor i64 %173, -1
  %175 = and i64 %170, %174
  %176 = fcmp oeq double %0, 0x7FF0000000000000
  %177 = fcmp oeq double %0, 0xFFF0000000000000
  %178 = or i1 %176, %177
  %179 = fcmp uno double %0, 0.000000e+00
  %180 = or i1 %179, %178
  %181 = bitcast double %169 to i64
  %182 = select i1 %180, i64 4294967295, i64 0
  %183 = shl nuw i64 %182, 32
  %184 = or i64 %183, %182
  %185 = or i64 %184, %181
  %186 = bitcast i64 %185 to double
  %187 = or i64 %184, %175
  %188 = bitcast i64 %187 to double
  br label %189

; <label>:189:                                    ; preds = %17, %82, %6
  %190 = phi i32 [ %9, %6 ], [ %38, %17 ], [ %138, %82 ]
  %191 = phi double [ %12, %6 ], [ %78, %17 ], [ %186, %82 ]
  %192 = phi double [ %14, %6 ], [ %81, %17 ], [ %188, %82 ]
  %193 = fmul double %191, 5.000000e-01
  %194 = fmul double %192, 5.000000e-01
  %195 = fmul double %193, %193
  %196 = fadd double %193, %193
  %197 = fsub double -0.000000e+00, %195
  %198 = tail call double @llvm.fma.f64(double %193, double %193, double %197) #6
  %199 = tail call double @llvm.fma.f64(double %196, double %194, double %198) #6
  %200 = fmul double %195, %195
  %201 = fmul double %200, %200
  %202 = tail call double @llvm.fma.f64(double %195, double 0x3F35445F555134ED, double 0x3F4269BE400DE3AF) #6
  %203 = tail call double @llvm.fma.f64(double %195, double 0x3F57EEF631E20B93, double 0x3F6D6C27C371C959) #6
  %204 = tail call double @llvm.fma.f64(double %200, double %202, double %203) #6
  %205 = tail call double @llvm.fma.f64(double %195, double 0x3F8226E7BFA35090, double 0x3F9664F4729F98E5) #6
  %206 = tail call double @llvm.fma.f64(double %195, double 0x3FABA1BA1BDCEC06, double 0x3FC111111110E933) #6
  %207 = tail call double @llvm.fma.f64(double %200, double %205, double %206) #6
  %208 = tail call double @llvm.fma.f64(double %201, double %204, double %207) #6
  %209 = tail call double @llvm.fma.f64(double %208, double %195, double 0x3FD5555555555568) #6
  %210 = fmul double %193, %195
  %211 = fsub double -0.000000e+00, %210
  %212 = tail call double @llvm.fma.f64(double %195, double %193, double %211) #6
  %213 = tail call double @llvm.fma.f64(double %199, double %193, double %212) #6
  %214 = tail call double @llvm.fma.f64(double %195, double %194, double %213) #6
  %215 = fmul double %210, %209
  %216 = fsub double -0.000000e+00, %215
  %217 = tail call double @llvm.fma.f64(double %210, double %209, double %216) #6
  %218 = tail call double @llvm.fma.f64(double %214, double %209, double %217) #6
  %219 = fadd double %193, %215
  %220 = fsub double %193, %219
  %221 = fadd double %215, %220
  %222 = fadd double %194, %221
  %223 = fadd double %218, %222
  %224 = fmul double %219, %219
  %225 = fadd double %219, %219
  %226 = fsub double -0.000000e+00, %224
  %227 = tail call double @llvm.fma.f64(double %219, double %219, double %226) #6
  %228 = tail call double @llvm.fma.f64(double %225, double %223, double %227) #6
  %229 = fadd double %224, -1.000000e+00
  %230 = fsub double -1.000000e+00, %229
  %231 = fadd double %224, %230
  %232 = fadd double %231, %228
  %233 = fmul double %219, -2.000000e+00
  %234 = fmul double %223, -2.000000e+00
  %235 = fsub double -0.000000e+00, %229
  %236 = fsub double -0.000000e+00, %232
  %237 = and i32 %190, 1
  %238 = icmp eq i32 %237, 0
  %239 = select i1 %238, double %233, double %235
  %240 = select i1 %238, double %234, double %236
  %241 = select i1 %238, double %229, double %233
  %242 = select i1 %238, double %232, double %234
  %243 = fdiv double 1.000000e+00, %241
  %244 = fmul double %239, %243
  %245 = fsub double -0.000000e+00, %244
  %246 = tail call double @llvm.fma.f64(double %243, double %239, double %245) #6
  %247 = fsub double -0.000000e+00, %241
  %248 = tail call double @llvm.fma.f64(double %247, double %243, double 1.000000e+00) #6
  %249 = fsub double -0.000000e+00, %242
  %250 = tail call double @llvm.fma.f64(double %249, double %243, double %248) #6
  %251 = tail call double @llvm.fma.f64(double %240, double %243, double %246) #6
  %252 = tail call double @llvm.fma.f64(double %244, double %250, double %251) #6
  %253 = fadd double %244, %252
  %254 = fcmp une double %0, 0.000000e+00
  %255 = select i1 %254, double %253, double %0
  ret double %255
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_atan2d1_u35purecfma(double, double) local_unnamed_addr #1 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = ashr i64 %6, 63
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, -2
  %10 = and i64 %6, 9223372036854775807
  %11 = bitcast i64 %10 to double
  %12 = or i32 %8, 1
  %13 = fcmp uge double %11, %5
  %14 = select i1 %13, i32 %9, i32 %12
  %15 = fsub double -0.000000e+00, %11
  %16 = select i1 %13, double %5, double %15
  %17 = fcmp ogt double %11, %5
  %18 = select i1 %17, double %11, double %5
  %19 = fdiv double %16, %18
  %20 = fmul double %19, %19
  %21 = fmul double %20, %20
  %22 = fmul double %21, %21
  %23 = fmul double %22, %22
  %24 = fmul double %23, %23
  %25 = tail call double @llvm.fma.f64(double %20, double 0x3F2B81666EB938AF, double 0xBF521F657F3915DA) #6
  %26 = tail call double @llvm.fma.f64(double %21, double 0xBEF3CBF44A88555F, double %25) #6
  %27 = tail call double @llvm.fma.f64(double %20, double 0x3F6E5005F4C78C20, double 0xBF82399E74A75E56) #6
  %28 = tail call double @llvm.fma.f64(double %20, double 0x3F90FF6A2A0D2286, double 0xBF9A1006DE22CDAC) #6
  %29 = tail call double @llvm.fma.f64(double %21, double %27, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %20, double 0x3FA14C4D24651F2E, double 0xBFA4DEE09915F638) #6
  %31 = tail call double @llvm.fma.f64(double %20, double 0x3FA7E4B31D8A55AE, double 0xBFAACFE938E04FCA) #6
  %32 = tail call double @llvm.fma.f64(double %21, double %30, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %22, double %29, double %32) #6
  %34 = tail call double @llvm.fma.f64(double %20, double 0x3FAE16A933B73622, double 0xBFB11074E45F93E0) #6
  %35 = tail call double @llvm.fma.f64(double %20, double 0x3FB3B1283C0CA0B1, double 0xBFB745CFD878FEE8) #6
  %36 = tail call double @llvm.fma.f64(double %21, double %34, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %20, double 0x3FBC71C704FB4F9F, double 0xBFC2492491E100BB) #6
  %38 = tail call double @llvm.fma.f64(double %20, double 0x3FC999999997B9DD, double 0xBFD55555555553C5) #6
  %39 = tail call double @llvm.fma.f64(double %21, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %22, double %36, double %39) #6
  %41 = tail call double @llvm.fma.f64(double %23, double %33, double %40) #6
  %42 = tail call double @llvm.fma.f64(double %24, double %26, double %41) #6
  %43 = fmul double %20, %42
  %44 = tail call double @llvm.fma.f64(double %19, double %43, double %19) #6
  %45 = sitofp i32 %14 to double
  %46 = tail call double @llvm.fma.f64(double %45, double 0x3FF921FB54442D18, double %44) #6
  %47 = bitcast double %46 to i64
  %48 = and i64 %6, -9223372036854775808
  %49 = xor i64 %48, %47
  %50 = bitcast i64 %49 to double
  %51 = fcmp oeq double %1, 0x7FF0000000000000
  %52 = fcmp oeq double %1, 0xFFF0000000000000
  %53 = or i1 %51, %52
  %54 = fcmp oeq double %1, 0.000000e+00
  %55 = or i1 %54, %53
  %56 = or i64 %48, 4609753056924675352
  %57 = select i1 %53, i64 4294967295, i64 0
  %58 = shl nuw i64 %57, 32
  %59 = or i64 %58, %57
  %60 = and i64 %59, %56
  %61 = bitcast i64 %60 to double
  %62 = fsub double 0x3FF921FB54442D18, %61
  %63 = select i1 %55, double %62, double %50
  %64 = fcmp une double %0, 0x7FF0000000000000
  %65 = fcmp une double %0, 0xFFF0000000000000
  %66 = or i64 %48, 4605249457297304856
  %67 = and i64 %59, %66
  %68 = bitcast i64 %67 to double
  %69 = fsub double 0x3FF921FB54442D18, %68
  %70 = and i1 %65, %64
  %71 = select i1 %70, double %63, double %69
  %72 = fcmp une double %0, 0.000000e+00
  %73 = and i64 %7, 4294967295
  %74 = shl nuw i64 %73, 32
  %75 = or i64 %74, %73
  %76 = and i64 %75, 4614256656552045848
  %77 = fcmp uno double %0, %1
  %78 = bitcast double %71 to i64
  %79 = select i1 %72, i64 %78, i64 %76
  %80 = and i64 %3, -9223372036854775808
  %81 = xor i64 %79, %80
  %82 = select i1 %77, i64 4294967295, i64 0
  %83 = shl nuw i64 %82, 32
  %84 = or i64 %83, %82
  %85 = or i64 %84, %81
  %86 = bitcast i64 %85 to double
  ret double %86
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_atan2d1_u10purecfma(double, double) local_unnamed_addr #1 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp uge double %5, 0x4000000000001
  %7 = fmul double %1, 0x4340000000000000
  %8 = select i1 %6, double %1, double %7
  %9 = fmul double %0, 0x4340000000000000
  %10 = select i1 %6, double %0, double %9
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9223372036854775807
  %13 = bitcast i64 %12 to double
  %14 = bitcast double %8 to i64
  %15 = ashr i64 %14, 63
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, -2
  %18 = fcmp olt double %8, 0.000000e+00
  %19 = select i1 %18, i64 -9223372036854775808, i64 0
  %20 = xor i64 %19, %14
  %21 = bitcast i64 %20 to double
  %22 = bitcast i64 %19 to double
  %23 = or i32 %16, 1
  %24 = fcmp uge double %21, %13
  %25 = select i1 %24, i32 %17, i32 %23
  %26 = fsub double -0.000000e+00, %21
  %27 = fsub double -0.000000e+00, %22
  %28 = select i1 %24, double %13, double %26
  %29 = select i1 %24, double 0.000000e+00, double %27
  %30 = select i1 %24, double %21, double %13
  %31 = fdiv double 1.000000e+00, %30
  %32 = fmul double %28, %31
  %33 = fsub double -0.000000e+00, %32
  %34 = tail call double @llvm.fma.f64(double %31, double %28, double %33) #6
  %35 = fsub double -0.000000e+00, %30
  %36 = tail call double @llvm.fma.f64(double %35, double %31, double 1.000000e+00) #6
  %37 = select i1 %24, double %27, double -0.000000e+00
  %38 = tail call double @llvm.fma.f64(double %37, double %31, double %36) #6
  %39 = tail call double @llvm.fma.f64(double %29, double %31, double %34) #6
  %40 = tail call double @llvm.fma.f64(double %32, double %38, double %39) #6
  %41 = fmul double %32, %32
  %42 = fadd double %32, %32
  %43 = fsub double -0.000000e+00, %41
  %44 = tail call double @llvm.fma.f64(double %32, double %32, double %43) #6
  %45 = tail call double @llvm.fma.f64(double %42, double %40, double %44) #6
  %46 = fadd double %41, %45
  %47 = fsub double %41, %46
  %48 = fadd double %45, %47
  %49 = fmul double %46, %46
  %50 = fmul double %49, %49
  %51 = fmul double %50, %50
  %52 = tail call double @llvm.fma.f64(double %46, double 0x3EE64ADB3E06EE72, double 0xBF2077212AA7D6CE) #6
  %53 = tail call double @llvm.fma.f64(double %46, double 0x3F471ECE4D9CED98, double 0xBF64A20138B90CEE) #6
  %54 = tail call double @llvm.fma.f64(double %49, double %52, double %53) #6
  %55 = tail call double @llvm.fma.f64(double %46, double 0x3F7A788EC28E9FB3, double 0xBF8A45A2EA379DB5) #6
  %56 = tail call double @llvm.fma.f64(double %46, double 0x3F954D3ECCF8F320, double 0xBF9D9805E7BA23E7) #6
  %57 = tail call double @llvm.fma.f64(double %49, double %55, double %56) #6
  %58 = tail call double @llvm.fma.f64(double %50, double %54, double %57) #6
  %59 = tail call double @llvm.fma.f64(double %46, double 0x3FA26BC6260B1BDD, double 0xBFA56D2D526C0577) #6
  %60 = tail call double @llvm.fma.f64(double %46, double 0x3FA81B6EFB51F8A6, double 0xBFAAE027D1895F2E) #6
  %61 = tail call double @llvm.fma.f64(double %49, double %59, double %60) #6
  %62 = tail call double @llvm.fma.f64(double %46, double 0x3FAE1A556400767B, double 0xBFB110C441E542D6) #6
  %63 = tail call double @llvm.fma.f64(double %46, double 0x3FB3B131F3B00D10, double 0xBFB745D0AC14EFEC) #6
  %64 = tail call double @llvm.fma.f64(double %49, double %62, double %63) #6
  %65 = tail call double @llvm.fma.f64(double %50, double %61, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %51, double %58, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %66, double %46, double 0x3FBC71C710B37A0B) #6
  %68 = tail call double @llvm.fma.f64(double %67, double %46, double 0xBFC249249211AFC7) #6
  %69 = tail call double @llvm.fma.f64(double %68, double %46, double 0x3FC9999999987CF0) #6
  %70 = tail call double @llvm.fma.f64(double %69, double %46, double 0xBFD555555555543A) #6
  %71 = fmul double %32, %46
  %72 = fsub double -0.000000e+00, %71
  %73 = tail call double @llvm.fma.f64(double %32, double %46, double %72) #6
  %74 = tail call double @llvm.fma.f64(double %40, double %46, double %73) #6
  %75 = tail call double @llvm.fma.f64(double %32, double %48, double %74) #6
  %76 = fmul double %71, %70
  %77 = fsub double -0.000000e+00, %76
  %78 = tail call double @llvm.fma.f64(double %71, double %70, double %77) #6
  %79 = tail call double @llvm.fma.f64(double %75, double %70, double %78) #6
  %80 = fadd double %32, %76
  %81 = fsub double %32, %80
  %82 = fadd double %76, %81
  %83 = fadd double %40, %82
  %84 = fadd double %79, %83
  %85 = sitofp i32 %25 to double
  %86 = fmul double %85, 0x3FF921FB54442D18
  %87 = fsub double -0.000000e+00, %86
  %88 = tail call double @llvm.fma.f64(double %85, double 0x3FF921FB54442D18, double %87) #6
  %89 = tail call double @llvm.fma.f64(double %85, double 0x3C91A62633145C07, double %88) #6
  %90 = fadd double %86, %80
  %91 = fsub double %86, %90
  %92 = fadd double %80, %91
  %93 = fadd double %89, %92
  %94 = fadd double %93, %84
  %95 = fadd double %90, %94
  %96 = bitcast double %95 to i64
  %97 = and i64 %14, -9223372036854775808
  %98 = xor i64 %97, %96
  %99 = bitcast i64 %98 to double
  %100 = fcmp oeq double %8, 0x7FF0000000000000
  %101 = fcmp oeq double %8, 0xFFF0000000000000
  %102 = or i1 %100, %101
  %103 = fcmp oeq double %8, 0.000000e+00
  %104 = or i1 %103, %102
  %105 = or i64 %97, 4609753056924675352
  %106 = select i1 %102, i64 4294967295, i64 0
  %107 = shl nuw i64 %106, 32
  %108 = or i64 %107, %106
  %109 = and i64 %108, %105
  %110 = bitcast i64 %109 to double
  %111 = fsub double 0x3FF921FB54442D18, %110
  %112 = select i1 %104, double %111, double %99
  %113 = fcmp une double %10, 0x7FF0000000000000
  %114 = fcmp une double %10, 0xFFF0000000000000
  %115 = or i64 %97, 4605249457297304856
  %116 = and i64 %108, %115
  %117 = bitcast i64 %116 to double
  %118 = fsub double 0x3FF921FB54442D18, %117
  %119 = and i1 %114, %113
  %120 = select i1 %119, double %112, double %118
  %121 = fcmp une double %10, 0.000000e+00
  %122 = and i64 %15, 4294967295
  %123 = shl nuw i64 %122, 32
  %124 = or i64 %123, %122
  %125 = and i64 %124, 4614256656552045848
  %126 = fcmp uno double %10, %8
  %127 = bitcast double %120 to i64
  %128 = select i1 %121, i64 %127, i64 %125
  %129 = and i64 %11, -9223372036854775808
  %130 = xor i64 %128, %129
  %131 = select i1 %126, i64 4294967295, i64 0
  %132 = shl nuw i64 %131, 32
  %133 = or i64 %132, %131
  %134 = or i64 %133, %130
  %135 = bitcast i64 %134 to double
  ret double %135
}

; Function Attrs: nounwind uwtable
define double @Sleef_asind1_u35purecfma(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %8, double %6
  %10 = tail call double @sqrt(double %9) #6
  %11 = select i1 %5, double %10, double %4
  %12 = fmul double %9, %9
  %13 = fmul double %12, %12
  %14 = fmul double %13, %13
  %15 = tail call double @llvm.fma.f64(double %9, double 0x3FA02FF4C7428A47, double 0xBF9032E75CCD4AE8) #6
  %16 = tail call double @llvm.fma.f64(double %9, double 0x3F93C0E0817E9742, double 0x3F7B0EF96B727E7E) #6
  %17 = tail call double @llvm.fma.f64(double %12, double %15, double %16) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3F88E3FD48D0FB6F, double 0x3F8C70DDF81249FC) #6
  %19 = tail call double @llvm.fma.f64(double %9, double 0x3F91C6B5042EC6B2, double 0x3F96E89F8578B64E) #6
  %20 = tail call double @llvm.fma.f64(double %12, double %18, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %9, double 0x3F9F1C72C5FD95BA, double 0x3FA6DB6DB407C2B3) #6
  %22 = tail call double @llvm.fma.f64(double %9, double 0x3FB3333333375CD0, double 0x3FC55555555552F4) #6
  %23 = tail call double @llvm.fma.f64(double %12, double %21, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %13, double %20, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %14, double %17, double %24) #6
  %26 = fmul double %9, %11
  %27 = tail call double @llvm.fma.f64(double %25, double %26, double %11) #6
  %28 = tail call double @llvm.fma.f64(double %27, double -2.000000e+00, double 0x3FF921FB54442D18) #6
  %29 = select i1 %5, double %28, double %27
  %30 = bitcast double %29 to i64
  %31 = and i64 %2, -9223372036854775808
  %32 = xor i64 %31, %30
  %33 = bitcast i64 %32 to double
  ret double %33
}

; Function Attrs: nounwind uwtable
define double @Sleef_asind1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %8, double %6
  %10 = tail call double @sqrt(double %9) #6
  %11 = fmul double %10, %10
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %10, double %10, double %12) #6
  %14 = fadd double %9, %11
  %15 = fsub double %14, %9
  %16 = fsub double %14, %15
  %17 = fsub double %9, %16
  %18 = fsub double %11, %15
  %19 = fadd double %18, %17
  %20 = fadd double %13, %19
  %21 = fdiv double 1.000000e+00, %10
  %22 = fsub double -0.000000e+00, %10
  %23 = tail call double @llvm.fma.f64(double %22, double %21, double 1.000000e+00) #6
  %24 = fmul double %21, %23
  %25 = fmul double %21, %14
  %26 = fsub double -0.000000e+00, %25
  %27 = tail call double @llvm.fma.f64(double %14, double %21, double %26) #6
  %28 = tail call double @llvm.fma.f64(double %20, double %21, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %14, double %24, double %28) #6
  %30 = fmul double %25, 5.000000e-01
  %31 = fmul double %29, 5.000000e-01
  %32 = select i1 %5, double %30, double %4
  %33 = fcmp une double %4, 1.000000e+00
  %34 = select i1 %33, double %32, double 0.000000e+00
  %35 = and i1 %33, %5
  %36 = select i1 %35, double %31, double 0.000000e+00
  %37 = fmul double %9, %9
  %38 = fmul double %37, %37
  %39 = fmul double %38, %38
  %40 = tail call double @llvm.fma.f64(double %9, double 0x3FA02FF4C7428A47, double 0xBF9032E75CCD4AE8) #6
  %41 = tail call double @llvm.fma.f64(double %9, double 0x3F93C0E0817E9742, double 0x3F7B0EF96B727E7E) #6
  %42 = tail call double @llvm.fma.f64(double %37, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %9, double 0x3F88E3FD48D0FB6F, double 0x3F8C70DDF81249FC) #6
  %44 = tail call double @llvm.fma.f64(double %9, double 0x3F91C6B5042EC6B2, double 0x3F96E89F8578B64E) #6
  %45 = tail call double @llvm.fma.f64(double %37, double %43, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %9, double 0x3F9F1C72C5FD95BA, double 0x3FA6DB6DB407C2B3) #6
  %47 = tail call double @llvm.fma.f64(double %9, double 0x3FB3333333375CD0, double 0x3FC55555555552F4) #6
  %48 = tail call double @llvm.fma.f64(double %37, double %46, double %47) #6
  %49 = tail call double @llvm.fma.f64(double %38, double %45, double %48) #6
  %50 = tail call double @llvm.fma.f64(double %39, double %42, double %49) #6
  %51 = fmul double %9, %34
  %52 = fmul double %50, %51
  %53 = fsub double 0x3FE921FB54442D18, %34
  %54 = fsub double 0x3FE921FB54442D18, %53
  %55 = fsub double %54, %34
  %56 = fadd double %55, 0x3C81A62633145C07
  %57 = fsub double %56, %36
  %58 = fsub double %53, %52
  %59 = fsub double %53, %58
  %60 = fsub double %59, %52
  %61 = fadd double %60, %57
  %62 = fadd double %34, %52
  %63 = fadd double %58, %61
  %64 = fmul double %63, 2.000000e+00
  %65 = select i1 %5, double %64, double %62
  %66 = bitcast double %65 to i64
  %67 = and i64 %2, -9223372036854775808
  %68 = xor i64 %67, %66
  %69 = bitcast i64 %68 to double
  ret double %69
}

; Function Attrs: nounwind uwtable
define double @Sleef_acosd1_u35purecfma(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %6, double %8
  %10 = tail call double @sqrt(double %9) #6
  %11 = select i1 %5, double %4, double %10
  %12 = fcmp une double %4, 1.000000e+00
  %13 = select i1 %12, double %11, double 0.000000e+00
  %14 = fmul double %9, %9
  %15 = fmul double %14, %14
  %16 = fmul double %15, %15
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3FA02FF4C7428A47, double 0xBF9032E75CCD4AE8) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3F93C0E0817E9742, double 0x3F7B0EF96B727E7E) #6
  %19 = tail call double @llvm.fma.f64(double %14, double %17, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %9, double 0x3F88E3FD48D0FB6F, double 0x3F8C70DDF81249FC) #6
  %21 = tail call double @llvm.fma.f64(double %9, double 0x3F91C6B5042EC6B2, double 0x3F96E89F8578B64E) #6
  %22 = tail call double @llvm.fma.f64(double %14, double %20, double %21) #6
  %23 = tail call double @llvm.fma.f64(double %9, double 0x3F9F1C72C5FD95BA, double 0x3FA6DB6DB407C2B3) #6
  %24 = tail call double @llvm.fma.f64(double %9, double 0x3FB3333333375CD0, double 0x3FC55555555552F4) #6
  %25 = tail call double @llvm.fma.f64(double %14, double %23, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %15, double %22, double %25) #6
  %27 = tail call double @llvm.fma.f64(double %16, double %19, double %26) #6
  %28 = fmul double %9, %13
  %29 = fmul double %27, %28
  %30 = bitcast double %13 to i64
  %31 = and i64 %2, -9223372036854775808
  %32 = xor i64 %31, %30
  %33 = bitcast i64 %32 to double
  %34 = bitcast double %29 to i64
  %35 = xor i64 %31, %34
  %36 = bitcast i64 %35 to double
  %37 = fadd double %33, %36
  %38 = fsub double 0x3FF921FB54442D18, %37
  %39 = fadd double %13, %29
  %40 = fmul double %39, 2.000000e+00
  %41 = select i1 %5, double %38, double %40
  %42 = fcmp uge double %0, 0.000000e+00
  %43 = fsub double 0x400921FB54442D18, %41
  %44 = or i1 %42, %5
  %45 = select i1 %44, double %41, double %43
  ret double %45
}

; Function Attrs: nounwind uwtable
define double @Sleef_acosd1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %6, double %8
  %10 = tail call double @sqrt(double %9) #6
  %11 = fmul double %10, %10
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %10, double %10, double %12) #6
  %14 = fadd double %9, %11
  %15 = fsub double %14, %9
  %16 = fsub double %14, %15
  %17 = fsub double %9, %16
  %18 = fsub double %11, %15
  %19 = fadd double %18, %17
  %20 = fadd double %13, %19
  %21 = fdiv double 1.000000e+00, %10
  %22 = fsub double -0.000000e+00, %10
  %23 = tail call double @llvm.fma.f64(double %22, double %21, double 1.000000e+00) #6
  %24 = fmul double %21, %23
  %25 = fmul double %21, %14
  %26 = fsub double -0.000000e+00, %25
  %27 = tail call double @llvm.fma.f64(double %14, double %21, double %26) #6
  %28 = tail call double @llvm.fma.f64(double %20, double %21, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %14, double %24, double %28) #6
  %30 = fmul double %25, 5.000000e-01
  %31 = fmul double %29, 5.000000e-01
  %32 = select i1 %5, double %4, double %30
  %33 = select i1 %5, double 0.000000e+00, double %31
  %34 = fcmp une double %4, 1.000000e+00
  %35 = select i1 %34, double %32, double 0.000000e+00
  %36 = select i1 %34, double %33, double 0.000000e+00
  %37 = fmul double %9, %9
  %38 = fmul double %37, %37
  %39 = fmul double %38, %38
  %40 = tail call double @llvm.fma.f64(double %9, double 0x3FA02FF4C7428A47, double 0xBF9032E75CCD4AE8) #6
  %41 = tail call double @llvm.fma.f64(double %9, double 0x3F93C0E0817E9742, double 0x3F7B0EF96B727E7E) #6
  %42 = tail call double @llvm.fma.f64(double %37, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %9, double 0x3F88E3FD48D0FB6F, double 0x3F8C70DDF81249FC) #6
  %44 = tail call double @llvm.fma.f64(double %9, double 0x3F91C6B5042EC6B2, double 0x3F96E89F8578B64E) #6
  %45 = tail call double @llvm.fma.f64(double %37, double %43, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %9, double 0x3F9F1C72C5FD95BA, double 0x3FA6DB6DB407C2B3) #6
  %47 = tail call double @llvm.fma.f64(double %9, double 0x3FB3333333375CD0, double 0x3FC55555555552F4) #6
  %48 = tail call double @llvm.fma.f64(double %37, double %46, double %47) #6
  %49 = tail call double @llvm.fma.f64(double %38, double %45, double %48) #6
  %50 = tail call double @llvm.fma.f64(double %39, double %42, double %49) #6
  %51 = fmul double %9, %35
  %52 = fmul double %50, %51
  %53 = bitcast double %35 to i64
  %54 = and i64 %2, -9223372036854775808
  %55 = xor i64 %54, %53
  %56 = bitcast i64 %55 to double
  %57 = bitcast double %52 to i64
  %58 = xor i64 %54, %57
  %59 = bitcast i64 %58 to double
  %60 = fadd double %56, %59
  %61 = fsub double %56, %60
  %62 = fadd double %61, %59
  %63 = fsub double 0x3FF921FB54442D18, %60
  %64 = fsub double 0x3FF921FB54442D18, %63
  %65 = fsub double %64, %60
  %66 = fadd double %65, 0x3C91A62633145C07
  %67 = fsub double %66, %62
  %68 = fadd double %35, %52
  %69 = fsub double %35, %68
  %70 = fadd double %52, %69
  %71 = fadd double %70, %36
  %72 = fmul double %68, 2.000000e+00
  %73 = fmul double %71, 2.000000e+00
  %74 = select i1 %5, double %63, double %72
  %75 = select i1 %5, double %67, double %73
  %76 = fcmp uge double %0, 0.000000e+00
  %77 = fsub double 0x400921FB54442D18, %74
  %78 = fsub double 0x400921FB54442D18, %77
  %79 = fsub double %78, %74
  %80 = fadd double %79, 0x3CA1A62633145C07
  %81 = fsub double %80, %75
  %82 = or i1 %76, %5
  %83 = select i1 %82, double %74, double %77
  %84 = select i1 %82, double %75, double %81
  %85 = fadd double %83, %84
  ret double %85
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_atand1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ule double %4, 1.000000e+00
  %6 = xor i1 %5, true
  %7 = select i1 %5, double %4, double -1.000000e+00
  %8 = select i1 %5, double 0.000000e+00, double -0.000000e+00
  %9 = select i1 %5, double 1.000000e+00, double %4
  %10 = fdiv double 1.000000e+00, %9
  %11 = fmul double %7, %10
  %12 = fsub double -0.000000e+00, %11
  %13 = tail call double @llvm.fma.f64(double %10, double %7, double %12) #6
  %14 = fsub double -0.000000e+00, %9
  %15 = tail call double @llvm.fma.f64(double %14, double %10, double 1.000000e+00) #6
  %16 = tail call double @llvm.fma.f64(double %10, double -0.000000e+00, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %8, double %10, double %13) #6
  %18 = tail call double @llvm.fma.f64(double %11, double %16, double %17) #6
  %19 = fmul double %11, %11
  %20 = fadd double %11, %11
  %21 = fsub double -0.000000e+00, %19
  %22 = tail call double @llvm.fma.f64(double %11, double %11, double %21) #6
  %23 = tail call double @llvm.fma.f64(double %20, double %18, double %22) #6
  %24 = fadd double %19, %23
  %25 = fsub double %19, %24
  %26 = fadd double %23, %25
  %27 = fmul double %24, %24
  %28 = fmul double %27, %27
  %29 = fmul double %28, %28
  %30 = tail call double @llvm.fma.f64(double %24, double 0x3EE64ADB3E06EE72, double 0xBF2077212AA7D6CE) #6
  %31 = tail call double @llvm.fma.f64(double %24, double 0x3F471ECE4D9CED98, double 0xBF64A20138B90CEE) #6
  %32 = tail call double @llvm.fma.f64(double %27, double %30, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %24, double 0x3F7A788EC28E9FB3, double 0xBF8A45A2EA379DB5) #6
  %34 = tail call double @llvm.fma.f64(double %24, double 0x3F954D3ECCF8F320, double 0xBF9D9805E7BA23E7) #6
  %35 = tail call double @llvm.fma.f64(double %27, double %33, double %34) #6
  %36 = tail call double @llvm.fma.f64(double %28, double %32, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %24, double 0x3FA26BC6260B1BDD, double 0xBFA56D2D526C0577) #6
  %38 = tail call double @llvm.fma.f64(double %24, double 0x3FA81B6EFB51F8A6, double 0xBFAAE027D1895F2E) #6
  %39 = tail call double @llvm.fma.f64(double %27, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %24, double 0x3FAE1A556400767B, double 0xBFB110C441E542D6) #6
  %41 = tail call double @llvm.fma.f64(double %24, double 0x3FB3B131F3B00D10, double 0xBFB745D0AC14EFEC) #6
  %42 = tail call double @llvm.fma.f64(double %27, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %28, double %39, double %42) #6
  %44 = tail call double @llvm.fma.f64(double %29, double %36, double %43) #6
  %45 = tail call double @llvm.fma.f64(double %44, double %24, double 0x3FBC71C710B37A0B) #6
  %46 = tail call double @llvm.fma.f64(double %45, double %24, double 0xBFC249249211AFC7) #6
  %47 = tail call double @llvm.fma.f64(double %46, double %24, double 0x3FC9999999987CF0) #6
  %48 = tail call double @llvm.fma.f64(double %47, double %24, double 0xBFD555555555543A) #6
  %49 = fmul double %11, %24
  %50 = fsub double -0.000000e+00, %49
  %51 = tail call double @llvm.fma.f64(double %11, double %24, double %50) #6
  %52 = tail call double @llvm.fma.f64(double %18, double %24, double %51) #6
  %53 = tail call double @llvm.fma.f64(double %11, double %26, double %52) #6
  %54 = fmul double %49, %48
  %55 = fsub double -0.000000e+00, %54
  %56 = tail call double @llvm.fma.f64(double %49, double %48, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %53, double %48, double %56) #6
  %58 = fadd double %11, %54
  %59 = fsub double %11, %58
  %60 = fadd double %54, %59
  %61 = fadd double %18, %60
  %62 = fadd double %57, %61
  %63 = uitofp i1 %6 to double
  %64 = fmul double %63, 0x3FF921FB54442D18
  %65 = fsub double -0.000000e+00, %64
  %66 = tail call double @llvm.fma.f64(double %63, double 0x3FF921FB54442D18, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %63, double 0x3C91A62633145C07, double %66) #6
  %68 = fadd double %64, %58
  %69 = fsub double %64, %68
  %70 = fadd double %58, %69
  %71 = fadd double %67, %70
  %72 = fadd double %71, %62
  %73 = fadd double %68, %72
  %74 = fcmp une double %0, 0x7FF0000000000000
  %75 = fcmp une double %0, 0xFFF0000000000000
  %76 = and i1 %75, %74
  %77 = bitcast double %73 to i64
  %78 = select i1 %76, i64 %77, i64 4609753056924675352
  %79 = and i64 %2, -9223372036854775808
  %80 = xor i64 %78, %79
  %81 = bitcast i64 %80 to double
  ret double %81
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_atand1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ogt double %4, 1.000000e+00
  %6 = fcmp ule double %4, 1.000000e+00
  %7 = fdiv double 1.000000e+00, %4
  %8 = select i1 %6, double %4, double %7
  %9 = fmul double %8, %8
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = fmul double %12, %12
  %14 = tail call double @llvm.fma.f64(double %9, double 0x3F2B81666EB938AF, double 0xBF521F657F3915DA) #6
  %15 = tail call double @llvm.fma.f64(double %10, double 0xBEF3CBF44A88555F, double %14) #6
  %16 = tail call double @llvm.fma.f64(double %9, double 0x3F6E5005F4C78C20, double 0xBF82399E74A75E56) #6
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3F90FF6A2A0D2286, double 0xBF9A1006DE22CDAC) #6
  %18 = tail call double @llvm.fma.f64(double %10, double %16, double %17) #6
  %19 = tail call double @llvm.fma.f64(double %9, double 0x3FA14C4D24651F2E, double 0xBFA4DEE09915F638) #6
  %20 = tail call double @llvm.fma.f64(double %9, double 0x3FA7E4B31D8A55AE, double 0xBFAACFE938E04FCA) #6
  %21 = tail call double @llvm.fma.f64(double %10, double %19, double %20) #6
  %22 = tail call double @llvm.fma.f64(double %11, double %18, double %21) #6
  %23 = tail call double @llvm.fma.f64(double %9, double 0x3FAE16A933B73622, double 0xBFB11074E45F93E0) #6
  %24 = tail call double @llvm.fma.f64(double %9, double 0x3FB3B1283C0CA0B1, double 0xBFB745CFD878FEE8) #6
  %25 = tail call double @llvm.fma.f64(double %10, double %23, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %9, double 0x3FBC71C704FB4F9F, double 0xBFC2492491E100BB) #6
  %27 = tail call double @llvm.fma.f64(double %9, double 0x3FC999999997B9DD, double 0xBFD55555555553C5) #6
  %28 = tail call double @llvm.fma.f64(double %10, double %26, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %11, double %25, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %12, double %22, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %13, double %15, double %30) #6
  %32 = fmul double %9, %31
  %33 = tail call double @llvm.fma.f64(double %8, double %32, double %8) #6
  %34 = fsub double 0x3FF921FB54442D18, %33
  %35 = select i1 %5, double %34, double %33
  %36 = and i64 %2, -9223372036854775808
  %37 = bitcast double %35 to i64
  %38 = xor i64 %36, %37
  %39 = bitcast i64 %38 to double
  ret double %39
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_logd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, %24
  %28 = tail call double @llvm.fma.f64(double %24, double 0x3FC385C5CBC3F50D, double 0x3FC7474BA672B05F) #6
  %29 = tail call double @llvm.fma.f64(double %25, double 0x3FC3A5791D95DB39, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %24, double 0x3FCC71BFEED5D419, double 0x3FD249249BFBE987) #6
  %31 = tail call double @llvm.fma.f64(double %24, double 0x3FD99999998C136E, double 0x3FE555555555593F) #6
  %32 = tail call double @llvm.fma.f64(double %25, double %30, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %26, double %29, double %32) #6
  %34 = sitofp i32 %20 to double
  %35 = fmul double %34, 0x3FE62E42FEFA39EF
  %36 = tail call double @llvm.fma.f64(double %23, double 2.000000e+00, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %27, double %33, double %36) #6
  %38 = fcmp une double %4, 0x7FF0000000000000
  %39 = select i1 %38, double %37, double 0x7FF0000000000000
  %40 = fcmp oge double %4, 0.000000e+00
  %41 = select i1 %40, double %39, double 0x7FF8000000000000
  %42 = fcmp une double %4, 0.000000e+00
  %43 = select i1 %42, double %41, double 0xFFF0000000000000
  ret double %43
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_expd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3FF71547652B82FE
  %3 = tail call double @llvm.rint.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = tail call double @llvm.fma.f64(double %3, double 0xBFE62E42FEFA3000, double %0) #6
  %6 = tail call double @llvm.fma.f64(double %3, double 0xBD53DE6AF278ECE6, double %5) #6
  %7 = fmul double %6, %6
  %8 = fmul double %7, %7
  %9 = fmul double %8, %8
  %10 = tail call double @llvm.fma.f64(double %6, double 0x3E21E0C670AFFF06, double 0x3E5AF6C36F75740C) #6
  %11 = tail call double @llvm.fma.f64(double %6, double 0x3E927E5D38A23654, double 0x3EC71DDEF633FB47) #6
  %12 = tail call double @llvm.fma.f64(double %6, double 0x3EFA01A0127F883A, double 0x3F2A01A01B4421FD) #6
  %13 = tail call double @llvm.fma.f64(double %7, double %11, double %12) #6
  %14 = tail call double @llvm.fma.f64(double %6, double 0x3F56C16C16C3396B, double 0x3F8111111110E7A5) #6
  %15 = tail call double @llvm.fma.f64(double %6, double 0x3FA55555555554F9, double 0x3FC555555555555E) #6
  %16 = tail call double @llvm.fma.f64(double %7, double %14, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %8, double %13, double %16) #6
  %18 = tail call double @llvm.fma.f64(double %9, double %10, double %17) #6
  %19 = tail call double @llvm.fma.f64(double %18, double %6, double 5.000000e-01) #6
  %20 = tail call double @llvm.fma.f64(double %19, double %6, double 1.000000e+00) #6
  %21 = tail call double @llvm.fma.f64(double %20, double %6, double 1.000000e+00) #6
  %22 = ashr i32 %4, 1
  %23 = add nsw i32 %22, 1023
  %24 = zext i32 %23 to i64
  %25 = shl i64 %24, 52
  %26 = bitcast i64 %25 to double
  %27 = fmul double %21, %26
  %28 = add i32 %4, 1023
  %29 = sub i32 %28, %22
  %30 = zext i32 %29 to i64
  %31 = shl i64 %30, 52
  %32 = bitcast i64 %31 to double
  %33 = fmul double %27, %32
  %34 = fcmp ule double %0, 0x40862E42FE102C83
  %35 = fcmp olt double %0, -1.000000e+03
  %36 = bitcast double %33 to i64
  %37 = select i1 %34, i64 %36, i64 9218868437227405312
  %38 = select i1 %35, i64 4294967295, i64 0
  %39 = shl nuw i64 %38, 32
  %40 = or i64 %39, %38
  %41 = xor i64 %40, -1
  %42 = and i64 %37, %41
  %43 = bitcast i64 %42 to double
  ret double %43
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_logd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FC3872E67FE8E84, double 0x3FC747353A506035) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FC39C4F5407567E, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FCC71C0A65ECD8E, double 0x3FD249249A68A245) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FD99999998F92EA, double 0x3FE55555555557AE) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %52, 0x3FE62E42FEFA39EF
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %52, double 0x3FE62E42FEFA39EF, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double 0x3C7ABC9E3B39803F, double %55) #6
  %57 = fmul double %34, 2.000000e+00
  %58 = fmul double %42, 2.000000e+00
  %59 = fadd double %53, %57
  %60 = fsub double %53, %59
  %61 = fadd double %57, %60
  %62 = fadd double %56, %61
  %63 = fadd double %62, %58
  %64 = fmul double %34, %43
  %65 = fmul double %64, %51
  %66 = fadd double %59, %65
  %67 = fsub double %59, %66
  %68 = fadd double %65, %67
  %69 = fadd double %63, %68
  %70 = fadd double %66, %69
  %71 = fcmp une double %4, 0x7FF0000000000000
  %72 = select i1 %71, double %70, double 0x7FF0000000000000
  %73 = fcmp oge double %4, 0.000000e+00
  %74 = select i1 %73, double %72, double 0x7FF8000000000000
  %75 = fcmp une double %4, 0.000000e+00
  %76 = select i1 %75, double %74, double 0xFFF0000000000000
  ret double %76
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_powd1_u10purecfma(double, double) local_unnamed_addr #1 {
  %3 = tail call double @llvm.trunc.f64(double %1) #6
  %4 = fcmp oeq double %3, %1
  %5 = fmul double %1, 5.000000e-01
  %6 = tail call double @llvm.trunc.f64(double %5) #6
  %7 = fcmp une double %6, %5
  %8 = and i1 %4, %7
  %9 = bitcast double %0 to i64
  %10 = and i64 %9, 9223372036854775807
  %11 = bitcast i64 %10 to double
  %12 = fcmp uge double %11, 0x10000000000000
  %13 = fmul double %11, 0x43F0000000000000
  %14 = select i1 %12, double %11, double %13
  %15 = fmul double %14, 0x3FF5555555555555
  %16 = bitcast double %15 to i64
  %17 = lshr i64 %16, 52
  %18 = trunc i64 %17 to i32
  %19 = and i32 %18, 2047
  %20 = sub nsw i32 1023, %19
  %21 = bitcast double %14 to i64
  %22 = zext i32 %20 to i64
  %23 = shl i64 %22, 52
  %24 = and i64 %21, -4294967296
  %25 = add i64 %23, %24
  %26 = and i64 %21, 4294967295
  %27 = or i64 %25, %26
  %28 = bitcast i64 %27 to double
  %29 = select i1 %12, i32 -1023, i32 -1087
  %30 = add nsw i32 %19, %29
  %31 = fadd double %28, -1.000000e+00
  %32 = fadd double %31, 1.000000e+00
  %33 = fsub double %31, %32
  %34 = fsub double -1.000000e+00, %33
  %35 = fsub double %28, %32
  %36 = fadd double %35, %34
  %37 = fadd double %28, 1.000000e+00
  %38 = fadd double %37, -1.000000e+00
  %39 = fsub double %37, %38
  %40 = fsub double 1.000000e+00, %39
  %41 = fsub double %28, %38
  %42 = fadd double %41, %40
  %43 = fdiv double 1.000000e+00, %37
  %44 = fmul double %31, %43
  %45 = fsub double -0.000000e+00, %44
  %46 = tail call double @llvm.fma.f64(double %43, double %31, double %45) #6
  %47 = fsub double -0.000000e+00, %37
  %48 = tail call double @llvm.fma.f64(double %47, double %43, double 1.000000e+00) #6
  %49 = fsub double -0.000000e+00, %42
  %50 = tail call double @llvm.fma.f64(double %49, double %43, double %48) #6
  %51 = tail call double @llvm.fma.f64(double %36, double %43, double %46) #6
  %52 = tail call double @llvm.fma.f64(double %44, double %50, double %51) #6
  %53 = fmul double %44, %44
  %54 = fadd double %44, %44
  %55 = fsub double -0.000000e+00, %53
  %56 = tail call double @llvm.fma.f64(double %44, double %44, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %54, double %52, double %56) #6
  %58 = fmul double %53, %53
  %59 = fmul double %58, %58
  %60 = fmul double %59, %59
  %61 = tail call double @llvm.fma.f64(double %53, double 0x3FBA6DEA6D1E9D11, double 0x3FBE252DDF5F8D0A) #6
  %62 = tail call double @llvm.fma.f64(double %53, double 0x3FC110F384A1865C, double 0x3FC3B13BB108EFD1) #6
  %63 = tail call double @llvm.fma.f64(double %58, double %61, double %62) #6
  %64 = tail call double @llvm.fma.f64(double %53, double 0x3FC745D17248DAF1, double 0x3FCC71C71C76197F) #6
  %65 = tail call double @llvm.fma.f64(double %53, double 0x3FD2492492492200, double 0x3FD999999999999B) #6
  %66 = tail call double @llvm.fma.f64(double %58, double %64, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %59, double %63, double %66) #6
  %68 = tail call double @llvm.fma.f64(double %60, double 0x3FBDC2EC09E714D3, double %67) #6
  %69 = sitofp i32 %30 to double
  %70 = fmul double %69, 0x3FE62E42FEFA39EF
  %71 = fsub double -0.000000e+00, %70
  %72 = tail call double @llvm.fma.f64(double %69, double 0x3FE62E42FEFA39EF, double %71) #6
  %73 = tail call double @llvm.fma.f64(double %69, double 0x3C7ABC9E3B39803F, double %72) #6
  %74 = fmul double %44, 2.000000e+00
  %75 = fmul double %52, 2.000000e+00
  %76 = fadd double %70, %74
  %77 = fsub double %70, %76
  %78 = fadd double %74, %77
  %79 = fadd double %73, %78
  %80 = fadd double %79, %75
  %81 = fmul double %44, %53
  %82 = fsub double -0.000000e+00, %81
  %83 = tail call double @llvm.fma.f64(double %53, double %44, double %82) #6
  %84 = tail call double @llvm.fma.f64(double %57, double %44, double %83) #6
  %85 = tail call double @llvm.fma.f64(double %53, double %52, double %84) #6
  %86 = fmul double %81, 0x3FE5555555555555
  %87 = fsub double -0.000000e+00, %86
  %88 = tail call double @llvm.fma.f64(double %81, double 0x3FE5555555555555, double %87) #6
  %89 = tail call double @llvm.fma.f64(double %85, double 0x3FE5555555555555, double %88) #6
  %90 = tail call double @llvm.fma.f64(double %81, double 0x3C85F00000000000, double %89) #6
  %91 = fadd double %76, %86
  %92 = fsub double %76, %91
  %93 = fadd double %86, %92
  %94 = fadd double %93, %80
  %95 = fadd double %94, %90
  %96 = fmul double %53, %81
  %97 = fsub double -0.000000e+00, %96
  %98 = tail call double @llvm.fma.f64(double %53, double %81, double %97) #6
  %99 = tail call double @llvm.fma.f64(double %57, double %81, double %98) #6
  %100 = tail call double @llvm.fma.f64(double %53, double %85, double %99) #6
  %101 = fmul double %96, %68
  %102 = fsub double -0.000000e+00, %101
  %103 = tail call double @llvm.fma.f64(double %96, double %68, double %102) #6
  %104 = tail call double @llvm.fma.f64(double %100, double %68, double %103) #6
  %105 = fadd double %91, %101
  %106 = fsub double %91, %105
  %107 = fadd double %101, %106
  %108 = fadd double %107, %95
  %109 = fadd double %104, %108
  %110 = fmul double %105, %1
  %111 = fsub double -0.000000e+00, %110
  %112 = tail call double @llvm.fma.f64(double %105, double %1, double %111) #6
  %113 = tail call double @llvm.fma.f64(double %109, double %1, double %112) #6
  %114 = fadd double %110, %113
  %115 = fmul double %114, 0x3FF71547652B82FE
  %116 = tail call double @llvm.rint.f64(double %115) #6
  %117 = fptosi double %116 to i32
  %118 = fmul double %116, 0xBFE62E42FEFA3000
  %119 = fadd double %110, %118
  %120 = fsub double %119, %110
  %121 = fsub double %119, %120
  %122 = fsub double %110, %121
  %123 = fsub double %118, %120
  %124 = fadd double %123, %122
  %125 = fadd double %113, %124
  %126 = fmul double %116, 0xBD53DE6AF278ECE6
  %127 = fadd double %126, %119
  %128 = fsub double %127, %119
  %129 = fsub double %127, %128
  %130 = fsub double %119, %129
  %131 = fsub double %126, %128
  %132 = fadd double %131, %130
  %133 = fadd double %132, %125
  %134 = fadd double %127, %133
  %135 = fsub double %127, %134
  %136 = fadd double %133, %135
  %137 = fmul double %134, %134
  %138 = fmul double %137, %137
  %139 = fmul double %138, %138
  %140 = tail call double @llvm.fma.f64(double %134, double 0x3E5AF559D51456B9, double 0x3E928A8F696DB5AD) #6
  %141 = tail call double @llvm.fma.f64(double %134, double 0x3EC71DDFD27D265E, double 0x3EFA0199EC6C491B) #6
  %142 = tail call double @llvm.fma.f64(double %134, double 0x3F2A01A01AE0C33D, double 0x3F56C16C1828EC7B) #6
  %143 = tail call double @llvm.fma.f64(double %137, double %141, double %142) #6
  %144 = tail call double @llvm.fma.f64(double %134, double 0x3F8111111110FB68, double 0x3FA5555555550E90) #6
  %145 = tail call double @llvm.fma.f64(double %134, double 0x3FC5555555555558, double 0x3FE0000000000009) #6
  %146 = tail call double @llvm.fma.f64(double %137, double %144, double %145) #6
  %147 = tail call double @llvm.fma.f64(double %138, double %143, double %146) #6
  %148 = tail call double @llvm.fma.f64(double %139, double %140, double %147) #6
  %149 = fadd double %134, 1.000000e+00
  %150 = fsub double 1.000000e+00, %149
  %151 = fadd double %134, %150
  %152 = fadd double %136, %151
  %153 = fadd double %134, %134
  %154 = fsub double -0.000000e+00, %137
  %155 = tail call double @llvm.fma.f64(double %134, double %134, double %154) #6
  %156 = tail call double @llvm.fma.f64(double %153, double %136, double %155) #6
  %157 = fmul double %137, %148
  %158 = fsub double -0.000000e+00, %157
  %159 = tail call double @llvm.fma.f64(double %137, double %148, double %158) #6
  %160 = tail call double @llvm.fma.f64(double %156, double %148, double %159) #6
  %161 = fadd double %149, %157
  %162 = fsub double %149, %161
  %163 = fadd double %157, %162
  %164 = fadd double %152, %163
  %165 = fadd double %160, %164
  %166 = fadd double %161, %165
  %167 = ashr i32 %117, 1
  %168 = add nsw i32 %167, 1023
  %169 = zext i32 %168 to i64
  %170 = shl i64 %169, 52
  %171 = bitcast i64 %170 to double
  %172 = fmul double %166, %171
  %173 = add i32 %117, 1023
  %174 = sub i32 %173, %167
  %175 = zext i32 %174 to i64
  %176 = shl i64 %175, 52
  %177 = bitcast i64 %176 to double
  %178 = fmul double %172, %177
  %179 = fcmp olt double %110, -1.000000e+03
  %180 = bitcast double %178 to i64
  %181 = select i1 %179, i64 4294967295, i64 0
  %182 = shl nuw i64 %181, 32
  %183 = or i64 %182, %181
  %184 = xor i64 %183, -1
  %185 = and i64 %180, %184
  %186 = bitcast i64 %185 to double
  %187 = fcmp ule double %110, 0x40862E42FE102C83
  %188 = select i1 %187, double %186, double 0x7FF0000000000000
  %189 = fcmp ule double %0, 0.000000e+00
  %190 = select i1 %8, double -1.000000e+00, double 1.000000e+00
  %191 = select i1 %4, double %190, double 0x7FF8000000000000
  %192 = select i1 %189, double %191, double 1.000000e+00
  %193 = fmul double %192, %188
  %194 = fadd double %11, -1.000000e+00
  %195 = bitcast double %194 to i64
  %196 = bitcast double %1 to i64
  %197 = and i64 %196, -9223372036854775808
  %198 = xor i64 %197, %195
  %199 = bitcast i64 %198 to double
  %200 = fcmp une double %1, 0x7FF0000000000000
  %201 = fcmp une double %1, 0xFFF0000000000000
  %202 = fcmp olt double %199, 0.000000e+00
  %203 = fcmp une double %199, 0.000000e+00
  %204 = select i1 %203, i64 9218868437227405312, i64 4607182418800017408
  %205 = select i1 %202, i64 4294967295, i64 0
  %206 = shl nuw i64 %205, 32
  %207 = or i64 %206, %205
  %208 = xor i64 %207, -1
  %209 = and i64 %204, %208
  %210 = bitcast i64 %209 to double
  %211 = and i1 %201, %200
  %212 = select i1 %211, double %193, double %210
  %213 = fcmp oeq double %0, 0x7FF0000000000000
  %214 = fcmp oeq double %0, 0xFFF0000000000000
  %215 = or i1 %213, %214
  %216 = fcmp oeq double %0, 0.000000e+00
  %217 = or i1 %216, %215
  %218 = and i64 %9, -9223372036854775808
  %219 = or i64 %218, 4607182418800017408
  %220 = bitcast i64 %219 to double
  %221 = select i1 %8, double %220, double 1.000000e+00
  %222 = fsub double -0.000000e+00, %1
  %223 = select i1 %216, double %222, double %1
  %224 = fcmp olt double %223, 0.000000e+00
  %225 = select i1 %224, double 0.000000e+00, double 0x7FF0000000000000
  %226 = fmul double %225, %221
  %227 = select i1 %217, double %226, double %212
  %228 = fcmp uno double %1, %0
  %229 = bitcast double %227 to i64
  %230 = select i1 %228, i64 4294967295, i64 0
  %231 = shl nuw i64 %230, 32
  %232 = or i64 %231, %230
  %233 = or i64 %232, %229
  %234 = bitcast i64 %233 to double
  %235 = fcmp une double %1, 0.000000e+00
  %236 = fcmp une double %0, 1.000000e+00
  %237 = and i1 %236, %235
  %238 = select i1 %237, double %234, double 1.000000e+00
  ret double %238
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sinhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = tail call double @llvm.rint.f64(double %6) #6
  %8 = fptosi double %7 to i32
  %9 = fmul double %7, 0xBFE62E42FEFA3000
  %10 = fadd double %9, %4
  %11 = fsub double %10, %4
  %12 = fsub double %10, %11
  %13 = fsub double %4, %12
  %14 = fsub double %9, %11
  %15 = fadd double %14, %13
  %16 = fadd double %15, 0.000000e+00
  %17 = fmul double %7, 0xBD53DE6AF278ECE6
  %18 = fadd double %17, %10
  %19 = fsub double %18, %10
  %20 = fsub double %18, %19
  %21 = fsub double %10, %20
  %22 = fsub double %17, %19
  %23 = fadd double %22, %21
  %24 = fadd double %23, %16
  %25 = fmul double %18, %18
  %26 = fadd double %18, %18
  %27 = fsub double -0.000000e+00, %25
  %28 = tail call double @llvm.fma.f64(double %18, double %18, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %26, double %24, double %28) #6
  %30 = fmul double %25, %25
  %31 = fadd double %25, %25
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %25, double %25, double %32) #6
  %34 = tail call double @llvm.fma.f64(double %31, double %29, double %33) #6
  %35 = fmul double %30, %30
  %36 = tail call double @llvm.fma.f64(double %18, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %37 = tail call double @llvm.fma.f64(double %18, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %38 = tail call double @llvm.fma.f64(double %18, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %39 = tail call double @llvm.fma.f64(double %25, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %18, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %41 = tail call double @llvm.fma.f64(double %18, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %42 = tail call double @llvm.fma.f64(double %25, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %30, double %39, double %42) #6
  %44 = tail call double @llvm.fma.f64(double %35, double %36, double %43) #6
  %45 = fmul double %18, 0x3FC5555555555555
  %46 = fsub double -0.000000e+00, %45
  %47 = tail call double @llvm.fma.f64(double %18, double 0x3FC5555555555555, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %24, double 0x3FC5555555555555, double %47) #6
  %49 = fadd double %45, 5.000000e-01
  %50 = fsub double 5.000000e-01, %49
  %51 = fadd double %45, %50
  %52 = fadd double %51, %48
  %53 = fmul double %18, %49
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %49, double %18, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double %18, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %49, double %24, double %56) #6
  %58 = fadd double %53, 1.000000e+00
  %59 = fsub double 1.000000e+00, %58
  %60 = fadd double %53, %59
  %61 = fadd double %60, %57
  %62 = fmul double %18, %58
  %63 = fsub double -0.000000e+00, %62
  %64 = tail call double @llvm.fma.f64(double %58, double %18, double %63) #6
  %65 = tail call double @llvm.fma.f64(double %61, double %18, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %58, double %24, double %65) #6
  %67 = fadd double %62, 1.000000e+00
  %68 = fsub double 1.000000e+00, %67
  %69 = fadd double %62, %68
  %70 = fadd double %69, %66
  %71 = fmul double %30, %44
  %72 = fsub double -0.000000e+00, %71
  %73 = tail call double @llvm.fma.f64(double %30, double %44, double %72) #6
  %74 = tail call double @llvm.fma.f64(double %34, double %44, double %73) #6
  %75 = fadd double %71, %67
  %76 = fsub double %67, %75
  %77 = fadd double %71, %76
  %78 = fadd double %77, %70
  %79 = fadd double %74, %78
  %80 = ashr i32 %8, 1
  %81 = add nsw i32 %80, 1023
  %82 = zext i32 %81 to i64
  %83 = shl i64 %82, 52
  %84 = bitcast i64 %83 to double
  %85 = fmul double %75, %84
  %86 = add i32 %8, 1023
  %87 = sub i32 %86, %80
  %88 = zext i32 %87 to i64
  %89 = shl i64 %88, 52
  %90 = bitcast i64 %89 to double
  %91 = fmul double %85, %90
  %92 = fmul double %79, %84
  %93 = fmul double %92, %90
  %94 = fcmp olt double %4, -1.000000e+03
  %95 = bitcast double %91 to i64
  %96 = select i1 %94, i64 4294967295, i64 0
  %97 = shl nuw i64 %96, 32
  %98 = or i64 %97, %96
  %99 = xor i64 %98, -1
  %100 = and i64 %95, %99
  %101 = bitcast i64 %100 to double
  %102 = bitcast double %93 to i64
  %103 = and i64 %102, %99
  %104 = bitcast i64 %103 to double
  %105 = fdiv double 1.000000e+00, %101
  %106 = fsub double -0.000000e+00, %101
  %107 = tail call double @llvm.fma.f64(double %106, double %105, double 1.000000e+00) #6
  %108 = fsub double -0.000000e+00, %104
  %109 = tail call double @llvm.fma.f64(double %108, double %105, double %107) #6
  %110 = fmul double %105, %109
  %111 = fsub double %101, %105
  %112 = fsub double %101, %111
  %113 = fsub double %112, %105
  %114 = fadd double %113, %104
  %115 = fsub double %114, %110
  %116 = fadd double %111, %115
  %117 = fmul double %116, 5.000000e-01
  %118 = fcmp ule double %4, 7.100000e+02
  %119 = fcmp ord double %117, 0.000000e+00
  %120 = and i1 %118, %119
  %121 = bitcast double %117 to i64
  %122 = select i1 %120, i64 %121, i64 9218868437227405312
  %123 = and i64 %2, -9223372036854775808
  %124 = xor i64 %122, %123
  %125 = fcmp uno double %0, 0.000000e+00
  %126 = select i1 %125, i64 4294967295, i64 0
  %127 = shl nuw i64 %126, 32
  %128 = or i64 %127, %126
  %129 = or i64 %128, %124
  %130 = bitcast i64 %129 to double
  ret double %130
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_coshd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = tail call double @llvm.rint.f64(double %6) #6
  %8 = fptosi double %7 to i32
  %9 = fmul double %7, 0xBFE62E42FEFA3000
  %10 = fadd double %9, %4
  %11 = fsub double %10, %4
  %12 = fsub double %10, %11
  %13 = fsub double %4, %12
  %14 = fsub double %9, %11
  %15 = fadd double %14, %13
  %16 = fadd double %15, 0.000000e+00
  %17 = fmul double %7, 0xBD53DE6AF278ECE6
  %18 = fadd double %17, %10
  %19 = fsub double %18, %10
  %20 = fsub double %18, %19
  %21 = fsub double %10, %20
  %22 = fsub double %17, %19
  %23 = fadd double %22, %21
  %24 = fadd double %23, %16
  %25 = fmul double %18, %18
  %26 = fadd double %18, %18
  %27 = fsub double -0.000000e+00, %25
  %28 = tail call double @llvm.fma.f64(double %18, double %18, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %26, double %24, double %28) #6
  %30 = fmul double %25, %25
  %31 = fadd double %25, %25
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %25, double %25, double %32) #6
  %34 = tail call double @llvm.fma.f64(double %31, double %29, double %33) #6
  %35 = fmul double %30, %30
  %36 = tail call double @llvm.fma.f64(double %18, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %37 = tail call double @llvm.fma.f64(double %18, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %38 = tail call double @llvm.fma.f64(double %18, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %39 = tail call double @llvm.fma.f64(double %25, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %18, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %41 = tail call double @llvm.fma.f64(double %18, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %42 = tail call double @llvm.fma.f64(double %25, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %30, double %39, double %42) #6
  %44 = tail call double @llvm.fma.f64(double %35, double %36, double %43) #6
  %45 = fmul double %18, 0x3FC5555555555555
  %46 = fsub double -0.000000e+00, %45
  %47 = tail call double @llvm.fma.f64(double %18, double 0x3FC5555555555555, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %24, double 0x3FC5555555555555, double %47) #6
  %49 = fadd double %45, 5.000000e-01
  %50 = fsub double 5.000000e-01, %49
  %51 = fadd double %45, %50
  %52 = fadd double %51, %48
  %53 = fmul double %18, %49
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %49, double %18, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double %18, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %49, double %24, double %56) #6
  %58 = fadd double %53, 1.000000e+00
  %59 = fsub double 1.000000e+00, %58
  %60 = fadd double %53, %59
  %61 = fadd double %60, %57
  %62 = fmul double %18, %58
  %63 = fsub double -0.000000e+00, %62
  %64 = tail call double @llvm.fma.f64(double %58, double %18, double %63) #6
  %65 = tail call double @llvm.fma.f64(double %61, double %18, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %58, double %24, double %65) #6
  %67 = fadd double %62, 1.000000e+00
  %68 = fsub double 1.000000e+00, %67
  %69 = fadd double %62, %68
  %70 = fadd double %69, %66
  %71 = fmul double %30, %44
  %72 = fsub double -0.000000e+00, %71
  %73 = tail call double @llvm.fma.f64(double %30, double %44, double %72) #6
  %74 = tail call double @llvm.fma.f64(double %34, double %44, double %73) #6
  %75 = fadd double %71, %67
  %76 = fsub double %67, %75
  %77 = fadd double %71, %76
  %78 = fadd double %77, %70
  %79 = fadd double %74, %78
  %80 = ashr i32 %8, 1
  %81 = add nsw i32 %80, 1023
  %82 = zext i32 %81 to i64
  %83 = shl i64 %82, 52
  %84 = bitcast i64 %83 to double
  %85 = fmul double %75, %84
  %86 = add i32 %8, 1023
  %87 = sub i32 %86, %80
  %88 = zext i32 %87 to i64
  %89 = shl i64 %88, 52
  %90 = bitcast i64 %89 to double
  %91 = fmul double %85, %90
  %92 = fmul double %79, %84
  %93 = fmul double %92, %90
  %94 = fcmp olt double %4, -1.000000e+03
  %95 = bitcast double %91 to i64
  %96 = select i1 %94, i64 4294967295, i64 0
  %97 = shl nuw i64 %96, 32
  %98 = or i64 %97, %96
  %99 = xor i64 %98, -1
  %100 = and i64 %95, %99
  %101 = bitcast i64 %100 to double
  %102 = bitcast double %93 to i64
  %103 = and i64 %102, %99
  %104 = bitcast i64 %103 to double
  %105 = fdiv double 1.000000e+00, %101
  %106 = fsub double -0.000000e+00, %101
  %107 = tail call double @llvm.fma.f64(double %106, double %105, double 1.000000e+00) #6
  %108 = fsub double -0.000000e+00, %104
  %109 = tail call double @llvm.fma.f64(double %108, double %105, double %107) #6
  %110 = fmul double %105, %109
  %111 = fadd double %105, %101
  %112 = fsub double %101, %111
  %113 = fadd double %105, %112
  %114 = fadd double %113, %104
  %115 = fadd double %114, %110
  %116 = fadd double %111, %115
  %117 = fmul double %116, 5.000000e-01
  %118 = fcmp ule double %4, 7.100000e+02
  %119 = fcmp ord double %117, 0.000000e+00
  %120 = and i1 %118, %119
  %121 = fcmp uno double %0, 0.000000e+00
  %122 = bitcast double %117 to i64
  %123 = select i1 %120, i64 %122, i64 9218868437227405312
  %124 = select i1 %121, i64 4294967295, i64 0
  %125 = shl nuw i64 %124, 32
  %126 = or i64 %125, %124
  %127 = or i64 %126, %123
  %128 = bitcast i64 %127 to double
  ret double %128
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tanhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = tail call double @llvm.rint.f64(double %6) #6
  %8 = fptosi double %7 to i32
  %9 = fmul double %7, 0xBFE62E42FEFA3000
  %10 = fadd double %9, %4
  %11 = fsub double %10, %4
  %12 = fsub double %10, %11
  %13 = fsub double %4, %12
  %14 = fsub double %9, %11
  %15 = fadd double %14, %13
  %16 = fadd double %15, 0.000000e+00
  %17 = fmul double %7, 0xBD53DE6AF278ECE6
  %18 = fadd double %17, %10
  %19 = fsub double %18, %10
  %20 = fsub double %18, %19
  %21 = fsub double %10, %20
  %22 = fsub double %17, %19
  %23 = fadd double %22, %21
  %24 = fadd double %23, %16
  %25 = fmul double %18, %18
  %26 = fadd double %18, %18
  %27 = fsub double -0.000000e+00, %25
  %28 = tail call double @llvm.fma.f64(double %18, double %18, double %27) #6
  %29 = tail call double @llvm.fma.f64(double %26, double %24, double %28) #6
  %30 = fmul double %25, %25
  %31 = fadd double %25, %25
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %25, double %25, double %32) #6
  %34 = tail call double @llvm.fma.f64(double %31, double %29, double %33) #6
  %35 = fmul double %30, %30
  %36 = tail call double @llvm.fma.f64(double %18, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %37 = tail call double @llvm.fma.f64(double %18, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %38 = tail call double @llvm.fma.f64(double %18, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %39 = tail call double @llvm.fma.f64(double %25, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %18, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %41 = tail call double @llvm.fma.f64(double %18, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %42 = tail call double @llvm.fma.f64(double %25, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %30, double %39, double %42) #6
  %44 = tail call double @llvm.fma.f64(double %35, double %36, double %43) #6
  %45 = fmul double %18, 0x3FC5555555555555
  %46 = fsub double -0.000000e+00, %45
  %47 = tail call double @llvm.fma.f64(double %18, double 0x3FC5555555555555, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %24, double 0x3FC5555555555555, double %47) #6
  %49 = fadd double %45, 5.000000e-01
  %50 = fsub double 5.000000e-01, %49
  %51 = fadd double %45, %50
  %52 = fadd double %51, %48
  %53 = fmul double %18, %49
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %49, double %18, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double %18, double %55) #6
  %57 = tail call double @llvm.fma.f64(double %49, double %24, double %56) #6
  %58 = fadd double %53, 1.000000e+00
  %59 = fsub double 1.000000e+00, %58
  %60 = fadd double %53, %59
  %61 = fadd double %60, %57
  %62 = fmul double %18, %58
  %63 = fsub double -0.000000e+00, %62
  %64 = tail call double @llvm.fma.f64(double %58, double %18, double %63) #6
  %65 = tail call double @llvm.fma.f64(double %61, double %18, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %58, double %24, double %65) #6
  %67 = fadd double %62, 1.000000e+00
  %68 = fsub double 1.000000e+00, %67
  %69 = fadd double %62, %68
  %70 = fadd double %69, %66
  %71 = fmul double %30, %44
  %72 = fsub double -0.000000e+00, %71
  %73 = tail call double @llvm.fma.f64(double %30, double %44, double %72) #6
  %74 = tail call double @llvm.fma.f64(double %34, double %44, double %73) #6
  %75 = fadd double %71, %67
  %76 = fsub double %67, %75
  %77 = fadd double %71, %76
  %78 = fadd double %77, %70
  %79 = fadd double %74, %78
  %80 = ashr i32 %8, 1
  %81 = add nsw i32 %80, 1023
  %82 = zext i32 %81 to i64
  %83 = shl i64 %82, 52
  %84 = bitcast i64 %83 to double
  %85 = fmul double %75, %84
  %86 = add i32 %8, 1023
  %87 = sub i32 %86, %80
  %88 = zext i32 %87 to i64
  %89 = shl i64 %88, 52
  %90 = bitcast i64 %89 to double
  %91 = fmul double %85, %90
  %92 = fmul double %79, %84
  %93 = fmul double %92, %90
  %94 = fcmp olt double %4, -1.000000e+03
  %95 = bitcast double %91 to i64
  %96 = select i1 %94, i64 4294967295, i64 0
  %97 = shl nuw i64 %96, 32
  %98 = or i64 %97, %96
  %99 = xor i64 %98, -1
  %100 = and i64 %95, %99
  %101 = bitcast i64 %100 to double
  %102 = bitcast double %93 to i64
  %103 = and i64 %102, %99
  %104 = bitcast i64 %103 to double
  %105 = fdiv double 1.000000e+00, %101
  %106 = fsub double -0.000000e+00, %101
  %107 = tail call double @llvm.fma.f64(double %106, double %105, double 1.000000e+00) #6
  %108 = fsub double -0.000000e+00, %104
  %109 = tail call double @llvm.fma.f64(double %108, double %105, double %107) #6
  %110 = fmul double %105, %109
  %111 = fsub double -0.000000e+00, %105
  %112 = fsub double %101, %105
  %113 = fsub double %112, %101
  %114 = fsub double %112, %113
  %115 = fsub double %101, %114
  %116 = fsub double %111, %113
  %117 = fadd double %116, %115
  %118 = fsub double %104, %110
  %119 = fadd double %117, %118
  %120 = fadd double %105, %101
  %121 = fsub double %120, %101
  %122 = fsub double %120, %121
  %123 = fsub double %101, %122
  %124 = fsub double %105, %121
  %125 = fadd double %124, %123
  %126 = fadd double %110, %104
  %127 = fadd double %125, %126
  %128 = fdiv double 1.000000e+00, %120
  %129 = fmul double %112, %128
  %130 = fsub double -0.000000e+00, %129
  %131 = tail call double @llvm.fma.f64(double %128, double %112, double %130) #6
  %132 = fsub double -0.000000e+00, %120
  %133 = tail call double @llvm.fma.f64(double %132, double %128, double 1.000000e+00) #6
  %134 = fsub double -0.000000e+00, %127
  %135 = tail call double @llvm.fma.f64(double %134, double %128, double %133) #6
  %136 = tail call double @llvm.fma.f64(double %119, double %128, double %131) #6
  %137 = tail call double @llvm.fma.f64(double %129, double %135, double %136) #6
  %138 = fadd double %129, %137
  %139 = fcmp ule double %4, 0x4032B70887229E90
  %140 = fcmp ord double %138, 0.000000e+00
  %141 = and i1 %139, %140
  %142 = bitcast double %138 to i64
  %143 = select i1 %141, i64 %142, i64 4607182418800017408
  %144 = and i64 %2, -9223372036854775808
  %145 = xor i64 %143, %144
  %146 = fcmp uno double %0, 0.000000e+00
  %147 = select i1 %146, i64 4294967295, i64 0
  %148 = shl nuw i64 %147, 32
  %149 = or i64 %148, %147
  %150 = or i64 %149, %145
  %151 = bitcast i64 %150 to double
  ret double %151
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sinhd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = tail call double @llvm.rint.f64(double %5) #6
  %7 = fptosi double %6 to i32
  %8 = tail call double @llvm.fma.f64(double %6, double 0xBFE62E42FEFA3000, double %4) #6
  %9 = tail call double @llvm.fma.f64(double %6, double 0xBD53DE6AF278ECE6, double %8) #6
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = tail call double @llvm.fma.f64(double %9, double 0x3E21F0E4C4ECD775, double 0x3E5AF68A28CC800A) #6
  %14 = tail call double @llvm.fma.f64(double %9, double 0x3E927E52E0FCD573, double 0x3EC71DDF1629E6CE) #6
  %15 = tail call double @llvm.fma.f64(double %9, double 0x3EFA01A01780879E, double 0x3F2A01A01B3603F5) #6
  %16 = tail call double @llvm.fma.f64(double %10, double %14, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3F56C16C16C20BA0, double 0x3F8111111110EB39) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3FA555555555553E, double 0x3FC555555555555C) #6
  %19 = tail call double @llvm.fma.f64(double %10, double %17, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %16, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %13, double %20) #6
  %22 = fmul double %9, %10
  %23 = fmul double %22, %21
  %24 = tail call double @llvm.fma.f64(double %10, double 5.000000e-01, double %23) #6
  %25 = fadd double %9, %24
  %26 = icmp eq i32 %7, 0
  %27 = fadd double %25, 1.000000e+00
  %28 = ashr i32 %7, 1
  %29 = add nsw i32 %28, 1023
  %30 = zext i32 %29 to i64
  %31 = shl i64 %30, 52
  %32 = bitcast i64 %31 to double
  %33 = fmul double %27, %32
  %34 = add i32 %7, 1023
  %35 = sub i32 %34, %28
  %36 = zext i32 %35 to i64
  %37 = shl i64 %36, 52
  %38 = bitcast i64 %37 to double
  %39 = fmul double %33, %38
  %40 = fadd double %39, -1.000000e+00
  %41 = select i1 %26, double %25, double %40
  %42 = fadd double %41, 2.000000e+00
  %43 = fadd double %41, 1.000000e+00
  %44 = fdiv double %42, %43
  %45 = fmul double %41, 5.000000e-01
  %46 = fmul double %45, %44
  %47 = fcmp ule double %4, 7.090000e+02
  %48 = fcmp ord double %46, 0.000000e+00
  %49 = and i1 %47, %48
  %50 = bitcast double %46 to i64
  %51 = select i1 %49, i64 %50, i64 9218868437227405312
  %52 = and i64 %2, -9223372036854775808
  %53 = xor i64 %51, %52
  %54 = fcmp uno double %0, 0.000000e+00
  %55 = select i1 %54, i64 4294967295, i64 0
  %56 = shl nuw i64 %55, 32
  %57 = or i64 %56, %55
  %58 = or i64 %57, %53
  %59 = bitcast i64 %58 to double
  ret double %59
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_coshd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = tail call double @llvm.rint.f64(double %5) #6
  %7 = fptosi double %6 to i32
  %8 = tail call double @llvm.fma.f64(double %6, double 0xBFE62E42FEFA3000, double %4) #6
  %9 = tail call double @llvm.fma.f64(double %6, double 0xBD53DE6AF278ECE6, double %8) #6
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = tail call double @llvm.fma.f64(double %9, double 0x3E21E0C670AFFF06, double 0x3E5AF6C36F75740C) #6
  %14 = tail call double @llvm.fma.f64(double %9, double 0x3E927E5D38A23654, double 0x3EC71DDEF633FB47) #6
  %15 = tail call double @llvm.fma.f64(double %9, double 0x3EFA01A0127F883A, double 0x3F2A01A01B4421FD) #6
  %16 = tail call double @llvm.fma.f64(double %10, double %14, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3F56C16C16C3396B, double 0x3F8111111110E7A5) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3FA55555555554F9, double 0x3FC555555555555E) #6
  %19 = tail call double @llvm.fma.f64(double %10, double %17, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %16, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %13, double %20) #6
  %22 = tail call double @llvm.fma.f64(double %21, double %9, double 5.000000e-01) #6
  %23 = tail call double @llvm.fma.f64(double %22, double %9, double 1.000000e+00) #6
  %24 = tail call double @llvm.fma.f64(double %23, double %9, double 1.000000e+00) #6
  %25 = ashr i32 %7, 1
  %26 = add nsw i32 %25, 1023
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %24, %29
  %31 = add i32 %7, 1023
  %32 = sub i32 %31, %25
  %33 = zext i32 %32 to i64
  %34 = shl i64 %33, 52
  %35 = bitcast i64 %34 to double
  %36 = fmul double %30, %35
  %37 = fcmp ule double %4, 0x40862E42FE102C83
  %38 = fcmp olt double %4, -1.000000e+03
  %39 = bitcast double %36 to i64
  %40 = select i1 %37, i64 %39, i64 9218868437227405312
  %41 = select i1 %38, i64 4294967295, i64 0
  %42 = shl nuw i64 %41, 32
  %43 = or i64 %42, %41
  %44 = xor i64 %43, -1
  %45 = and i64 %40, %44
  %46 = bitcast i64 %45 to double
  %47 = fdiv double 5.000000e-01, %46
  %48 = tail call double @llvm.fma.f64(double %46, double 5.000000e-01, double %47) #6
  %49 = fcmp ule double %4, 7.090000e+02
  %50 = fcmp ord double %48, 0.000000e+00
  %51 = and i1 %49, %50
  %52 = fcmp uno double %0, 0.000000e+00
  %53 = bitcast double %48 to i64
  %54 = select i1 %51, i64 %53, i64 9218868437227405312
  %55 = select i1 %52, i64 4294967295, i64 0
  %56 = shl nuw i64 %55, 32
  %57 = or i64 %56, %55
  %58 = or i64 %57, %54
  %59 = bitcast i64 %58 to double
  ret double %59
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tanhd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 2.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = tail call double @llvm.rint.f64(double %6) #6
  %8 = fptosi double %7 to i32
  %9 = tail call double @llvm.fma.f64(double %7, double 0xBFE62E42FEFA3000, double %5) #6
  %10 = tail call double @llvm.fma.f64(double %7, double 0xBD53DE6AF278ECE6, double %9) #6
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = fmul double %12, %12
  %14 = tail call double @llvm.fma.f64(double %10, double 0x3E21F0E4C4ECD775, double 0x3E5AF68A28CC800A) #6
  %15 = tail call double @llvm.fma.f64(double %10, double 0x3E927E52E0FCD573, double 0x3EC71DDF1629E6CE) #6
  %16 = tail call double @llvm.fma.f64(double %10, double 0x3EFA01A01780879E, double 0x3F2A01A01B3603F5) #6
  %17 = tail call double @llvm.fma.f64(double %11, double %15, double %16) #6
  %18 = tail call double @llvm.fma.f64(double %10, double 0x3F56C16C16C20BA0, double 0x3F8111111110EB39) #6
  %19 = tail call double @llvm.fma.f64(double %10, double 0x3FA555555555553E, double 0x3FC555555555555C) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %18, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %17, double %20) #6
  %22 = tail call double @llvm.fma.f64(double %13, double %14, double %21) #6
  %23 = fmul double %10, %11
  %24 = fmul double %23, %22
  %25 = tail call double @llvm.fma.f64(double %11, double 5.000000e-01, double %24) #6
  %26 = fadd double %10, %25
  %27 = icmp eq i32 %8, 0
  %28 = fadd double %26, 1.000000e+00
  %29 = ashr i32 %8, 1
  %30 = add nsw i32 %29, 1023
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 52
  %33 = bitcast i64 %32 to double
  %34 = fmul double %28, %33
  %35 = add i32 %8, 1023
  %36 = sub i32 %35, %29
  %37 = zext i32 %36 to i64
  %38 = shl i64 %37, 52
  %39 = bitcast i64 %38 to double
  %40 = fmul double %34, %39
  %41 = fadd double %40, -1.000000e+00
  %42 = select i1 %27, double %26, double %41
  %43 = fadd double %42, 2.000000e+00
  %44 = fdiv double %42, %43
  %45 = fcmp ule double %4, 0x4032B70887229E90
  %46 = fcmp ord double %44, 0.000000e+00
  %47 = and i1 %45, %46
  %48 = bitcast double %44 to i64
  %49 = select i1 %47, i64 %48, i64 4607182418800017408
  %50 = and i64 %2, -9223372036854775808
  %51 = xor i64 %49, %50
  %52 = fcmp uno double %0, 0.000000e+00
  %53 = select i1 %52, i64 4294967295, i64 0
  %54 = shl nuw i64 %53, 32
  %55 = or i64 %54, %53
  %56 = or i64 %55, %51
  %57 = bitcast i64 %56 to double
  ret double %57
}

; Function Attrs: nounwind uwtable
define double @Sleef_asinhd1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ule double %4, 1.000000e+00
  %6 = fdiv double 1.000000e+00, %0
  %7 = fsub double -0.000000e+00, %0
  %8 = tail call double @llvm.fma.f64(double %7, double %6, double 1.000000e+00) #6
  %9 = fmul double %6, %8
  %10 = select i1 %5, double %4, double %6
  %11 = select i1 %5, double 0.000000e+00, double %9
  %12 = fmul double %10, %10
  %13 = fadd double %10, %10
  %14 = fsub double -0.000000e+00, %12
  %15 = tail call double @llvm.fma.f64(double %10, double %10, double %14) #6
  %16 = tail call double @llvm.fma.f64(double %13, double %11, double %15) #6
  %17 = fadd double %12, 1.000000e+00
  %18 = fsub double %17, %12
  %19 = fsub double %17, %18
  %20 = fsub double %12, %19
  %21 = fsub double 1.000000e+00, %18
  %22 = fadd double %21, %20
  %23 = fadd double %16, %22
  %24 = fadd double %17, %23
  %25 = tail call double @sqrt(double %24) #6
  %26 = fmul double %25, %25
  %27 = fsub double -0.000000e+00, %26
  %28 = tail call double @llvm.fma.f64(double %25, double %25, double %27) #6
  %29 = fadd double %17, %26
  %30 = fsub double %29, %17
  %31 = fsub double %29, %30
  %32 = fsub double %17, %31
  %33 = fsub double %26, %30
  %34 = fadd double %33, %32
  %35 = fadd double %23, %28
  %36 = fadd double %35, %34
  %37 = fdiv double 1.000000e+00, %25
  %38 = fsub double -0.000000e+00, %25
  %39 = tail call double @llvm.fma.f64(double %38, double %37, double 1.000000e+00) #6
  %40 = fmul double %37, %39
  %41 = fmul double %37, %29
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.fma.f64(double %29, double %37, double %42) #6
  %44 = tail call double @llvm.fma.f64(double %36, double %37, double %43) #6
  %45 = tail call double @llvm.fma.f64(double %29, double %40, double %44) #6
  %46 = fmul double %41, 5.000000e-01
  %47 = fmul double %45, 5.000000e-01
  %48 = fmul double %46, %4
  %49 = fsub double -0.000000e+00, %48
  %50 = tail call double @llvm.fma.f64(double %46, double %4, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %47, double %4, double %50) #6
  %52 = select i1 %5, double %46, double %48
  %53 = select i1 %5, double %47, double %51
  %54 = fadd double %52, %0
  %55 = fsub double %54, %52
  %56 = fsub double %54, %55
  %57 = fsub double %52, %56
  %58 = fsub double %0, %55
  %59 = fadd double %58, %57
  %60 = fadd double %59, %53
  %61 = fadd double %54, %60
  %62 = fsub double %54, %61
  %63 = fadd double %60, %62
  %64 = fmul double %61, 0x3FF5555555555555
  %65 = fcmp uge double %64, 0x2D30000000000000
  %66 = fmul double %64, 0x52B0000000000000
  %67 = select i1 %65, double %64, double %66
  %68 = bitcast double %67 to i64
  %69 = lshr i64 %68, 52
  %70 = trunc i64 %69 to i32
  %71 = select i1 %65, i32 1023, i32 1323
  %72 = sub nsw i32 %70, %71
  %73 = sub nsw i32 0, %72
  %74 = ashr i32 %73, 1
  %75 = add nsw i32 %74, 1023
  %76 = zext i32 %75 to i64
  %77 = shl i64 %76, 52
  %78 = bitcast i64 %77 to double
  %79 = fmul double %61, %78
  %80 = sub nsw i32 1023, %72
  %81 = sub nsw i32 %80, %74
  %82 = zext i32 %81 to i64
  %83 = shl i64 %82, 52
  %84 = bitcast i64 %83 to double
  %85 = fmul double %79, %84
  %86 = fmul double %63, %78
  %87 = fmul double %86, %84
  %88 = fadd double %85, -1.000000e+00
  %89 = fsub double %88, %85
  %90 = fsub double %88, %89
  %91 = fsub double %85, %90
  %92 = fsub double -1.000000e+00, %89
  %93 = fadd double %92, %91
  %94 = fadd double %87, %93
  %95 = fadd double %85, 1.000000e+00
  %96 = fsub double %95, %85
  %97 = fsub double %95, %96
  %98 = fsub double %85, %97
  %99 = fsub double 1.000000e+00, %96
  %100 = fadd double %99, %98
  %101 = fadd double %87, %100
  %102 = fdiv double 1.000000e+00, %95
  %103 = fmul double %88, %102
  %104 = fsub double -0.000000e+00, %103
  %105 = tail call double @llvm.fma.f64(double %102, double %88, double %104) #6
  %106 = fsub double -0.000000e+00, %95
  %107 = tail call double @llvm.fma.f64(double %106, double %102, double 1.000000e+00) #6
  %108 = fsub double -0.000000e+00, %101
  %109 = tail call double @llvm.fma.f64(double %108, double %102, double %107) #6
  %110 = tail call double @llvm.fma.f64(double %94, double %102, double %105) #6
  %111 = tail call double @llvm.fma.f64(double %103, double %109, double %110) #6
  %112 = fmul double %103, %103
  %113 = fadd double %103, %103
  %114 = fsub double -0.000000e+00, %112
  %115 = tail call double @llvm.fma.f64(double %103, double %103, double %114) #6
  %116 = tail call double @llvm.fma.f64(double %113, double %111, double %115) #6
  %117 = fmul double %112, %112
  %118 = fmul double %117, %117
  %119 = tail call double @llvm.fma.f64(double %112, double 0x3FC0DB8A525B4A6B, double 0x3FC3B3759FB81971) #6
  %120 = tail call double @llvm.fma.f64(double %117, double 0x3FC1BDC9AD06D760, double %119) #6
  %121 = tail call double @llvm.fma.f64(double %112, double 0x3FC745C38C19C82A, double 0x3FCC71C750354F90) #6
  %122 = tail call double @llvm.fma.f64(double %112, double 0x3FD2492492114D0C, double 0x3FD999999999D9EB) #6
  %123 = tail call double @llvm.fma.f64(double %117, double %121, double %122) #6
  %124 = tail call double @llvm.fma.f64(double %118, double %120, double %123) #6
  %125 = tail call double @llvm.fma.f64(double %124, double %112, double 0x3FE5555555555545) #6
  %126 = sitofp i32 %72 to double
  %127 = fmul double %126, 0x3FE62E42FEFA39EF
  %128 = fsub double -0.000000e+00, %127
  %129 = tail call double @llvm.fma.f64(double %126, double 0x3FE62E42FEFA39EF, double %128) #6
  %130 = tail call double @llvm.fma.f64(double %126, double 0x3C7ABC9E3B39803F, double %129) #6
  %131 = fmul double %103, 2.000000e+00
  %132 = fmul double %111, 2.000000e+00
  %133 = fadd double %127, %131
  %134 = fsub double %127, %133
  %135 = fadd double %131, %134
  %136 = fadd double %130, %135
  %137 = fadd double %136, %132
  %138 = fmul double %103, %112
  %139 = fsub double -0.000000e+00, %138
  %140 = tail call double @llvm.fma.f64(double %112, double %103, double %139) #6
  %141 = tail call double @llvm.fma.f64(double %116, double %103, double %140) #6
  %142 = tail call double @llvm.fma.f64(double %112, double %111, double %141) #6
  %143 = fmul double %138, %125
  %144 = fsub double -0.000000e+00, %143
  %145 = tail call double @llvm.fma.f64(double %138, double %125, double %144) #6
  %146 = tail call double @llvm.fma.f64(double %142, double %125, double %145) #6
  %147 = fadd double %133, %143
  %148 = fsub double %133, %147
  %149 = fadd double %143, %148
  %150 = fadd double %137, %149
  %151 = fadd double %146, %150
  %152 = fadd double %147, %151
  %153 = fcmp ule double %4, 0x5FEFFFFFFFFFFFFF
  %154 = fcmp ord double %152, 0.000000e+00
  %155 = and i64 %2, -9223372036854775808
  %156 = or i64 %155, 9218868437227405312
  %157 = and i1 %153, %154
  %158 = fcmp uno double %0, 0.000000e+00
  %159 = bitcast double %152 to i64
  %160 = select i1 %157, i64 %159, i64 %156
  %161 = select i1 %158, i64 4294967295, i64 0
  %162 = shl nuw i64 %161, 32
  %163 = or i64 %162, %161
  %164 = or i64 %163, %160
  %165 = bitcast i64 %164 to double
  %166 = icmp eq i64 %2, -9223372036854775808
  %167 = select i1 %166, double -0.000000e+00, double %165
  ret double %167
}

; Function Attrs: nounwind uwtable
define double @Sleef_acoshd1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = insertelement <2 x double> undef, double %0, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %3, <double 1.000000e+00, double -1.000000e+00>
  %5 = extractelement <2 x double> %4, i32 0
  %6 = fsub double %5, %0
  %7 = fsub double %5, %6
  %8 = fsub double %0, %7
  %9 = fsub double 1.000000e+00, %6
  %10 = fadd double %9, %8
  %11 = fadd double %5, %10
  %12 = tail call double @sqrt(double %11) #6
  %13 = extractelement <2 x double> %4, i32 1
  %14 = fsub double %13, %0
  %15 = fsub double %13, %14
  %16 = fsub double %0, %15
  %17 = fsub double -1.000000e+00, %14
  %18 = fadd double %17, %16
  %19 = fadd double %13, %18
  %20 = tail call double @sqrt(double %19) #6
  %21 = insertelement <2 x double> undef, double %12, i32 0
  %22 = insertelement <2 x double> %21, double %20, i32 1
  %23 = fmul <2 x double> %22, %22
  %24 = extractelement <2 x double> %23, i32 0
  %25 = fsub double -0.000000e+00, %24
  %26 = tail call double @llvm.fma.f64(double %12, double %12, double %25) #6
  %27 = fadd <2 x double> %4, %23
  %28 = extractelement <2 x double> %27, i32 0
  %29 = fsub double %28, %5
  %30 = fsub double %28, %29
  %31 = fsub double %5, %30
  %32 = fsub double %24, %29
  %33 = fadd double %32, %31
  %34 = fadd double %10, %26
  %35 = fadd double %34, %33
  %36 = fsub double -0.000000e+00, %12
  %37 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %22
  %38 = extractelement <2 x double> %37, i32 0
  %39 = tail call double @llvm.fma.f64(double %36, double %38, double 1.000000e+00) #6
  %40 = fmul double %38, %39
  %41 = fmul <2 x double> %37, %27
  %42 = extractelement <2 x double> %41, i32 0
  %43 = fsub double -0.000000e+00, %42
  %44 = tail call double @llvm.fma.f64(double %28, double %38, double %43) #6
  %45 = tail call double @llvm.fma.f64(double %35, double %38, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %28, double %40, double %45) #6
  %47 = fmul double %46, 5.000000e-01
  %48 = extractelement <2 x double> %23, i32 1
  %49 = fsub double -0.000000e+00, %48
  %50 = tail call double @llvm.fma.f64(double %20, double %20, double %49) #6
  %51 = extractelement <2 x double> %27, i32 1
  %52 = fsub double %51, %13
  %53 = fsub double %51, %52
  %54 = fsub double %13, %53
  %55 = fsub double %48, %52
  %56 = fadd double %55, %54
  %57 = fadd double %18, %50
  %58 = fadd double %57, %56
  %59 = fsub double -0.000000e+00, %20
  %60 = extractelement <2 x double> %37, i32 1
  %61 = tail call double @llvm.fma.f64(double %59, double %60, double 1.000000e+00) #6
  %62 = fmul double %60, %61
  %63 = extractelement <2 x double> %41, i32 1
  %64 = fsub double -0.000000e+00, %63
  %65 = tail call double @llvm.fma.f64(double %51, double %60, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %58, double %60, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %51, double %62, double %66) #6
  %68 = fmul <2 x double> %41, <double 5.000000e-01, double 5.000000e-01>
  %69 = fmul double %67, 5.000000e-01
  %70 = extractelement <2 x double> %68, i32 0
  %71 = extractelement <2 x double> %68, i32 1
  %72 = fmul double %70, %71
  %73 = fsub double -0.000000e+00, %72
  %74 = tail call double @llvm.fma.f64(double %70, double %71, double %73) #6
  %75 = tail call double @llvm.fma.f64(double %47, double %71, double %74) #6
  %76 = tail call double @llvm.fma.f64(double %70, double %69, double %75) #6
  %77 = fadd double %72, %0
  %78 = fsub double %77, %72
  %79 = fsub double %77, %78
  %80 = fsub double %72, %79
  %81 = fsub double %0, %78
  %82 = fadd double %81, %80
  %83 = fadd double %82, %76
  %84 = fmul double %77, 0x3FF5555555555555
  %85 = fcmp uge double %84, 0x2D30000000000000
  %86 = fmul double %84, 0x52B0000000000000
  %87 = select i1 %85, double %84, double %86
  %88 = bitcast double %87 to i64
  %89 = lshr i64 %88, 52
  %90 = trunc i64 %89 to i32
  %91 = select i1 %85, i32 1023, i32 1323
  %92 = sub nsw i32 %90, %91
  %93 = sub nsw i32 0, %92
  %94 = ashr i32 %93, 1
  %95 = add nsw i32 %94, 1023
  %96 = zext i32 %95 to i64
  %97 = shl i64 %96, 52
  %98 = bitcast i64 %97 to double
  %99 = fmul double %77, %98
  %100 = sub nsw i32 1023, %92
  %101 = sub nsw i32 %100, %94
  %102 = zext i32 %101 to i64
  %103 = shl i64 %102, 52
  %104 = bitcast i64 %103 to double
  %105 = fmul double %99, %104
  %106 = fmul double %83, %98
  %107 = fmul double %106, %104
  %108 = fadd double %105, -1.000000e+00
  %109 = fsub double %108, %105
  %110 = fsub double %108, %109
  %111 = fsub double %105, %110
  %112 = fsub double -1.000000e+00, %109
  %113 = fadd double %112, %111
  %114 = fadd double %107, %113
  %115 = fadd double %105, 1.000000e+00
  %116 = fsub double %115, %105
  %117 = fsub double %115, %116
  %118 = fsub double %105, %117
  %119 = fsub double 1.000000e+00, %116
  %120 = fadd double %119, %118
  %121 = fadd double %107, %120
  %122 = fdiv double 1.000000e+00, %115
  %123 = fmul double %108, %122
  %124 = fsub double -0.000000e+00, %123
  %125 = tail call double @llvm.fma.f64(double %122, double %108, double %124) #6
  %126 = fsub double -0.000000e+00, %115
  %127 = tail call double @llvm.fma.f64(double %126, double %122, double 1.000000e+00) #6
  %128 = fsub double -0.000000e+00, %121
  %129 = tail call double @llvm.fma.f64(double %128, double %122, double %127) #6
  %130 = tail call double @llvm.fma.f64(double %114, double %122, double %125) #6
  %131 = tail call double @llvm.fma.f64(double %123, double %129, double %130) #6
  %132 = fmul double %123, %123
  %133 = fadd double %123, %123
  %134 = fsub double -0.000000e+00, %132
  %135 = tail call double @llvm.fma.f64(double %123, double %123, double %134) #6
  %136 = tail call double @llvm.fma.f64(double %133, double %131, double %135) #6
  %137 = fmul double %132, %132
  %138 = fmul double %137, %137
  %139 = tail call double @llvm.fma.f64(double %132, double 0x3FC0DB8A525B4A6B, double 0x3FC3B3759FB81971) #6
  %140 = tail call double @llvm.fma.f64(double %137, double 0x3FC1BDC9AD06D760, double %139) #6
  %141 = tail call double @llvm.fma.f64(double %132, double 0x3FC745C38C19C82A, double 0x3FCC71C750354F90) #6
  %142 = tail call double @llvm.fma.f64(double %132, double 0x3FD2492492114D0C, double 0x3FD999999999D9EB) #6
  %143 = tail call double @llvm.fma.f64(double %137, double %141, double %142) #6
  %144 = tail call double @llvm.fma.f64(double %138, double %140, double %143) #6
  %145 = tail call double @llvm.fma.f64(double %144, double %132, double 0x3FE5555555555545) #6
  %146 = sitofp i32 %92 to double
  %147 = fmul double %146, 0x3FE62E42FEFA39EF
  %148 = fsub double -0.000000e+00, %147
  %149 = tail call double @llvm.fma.f64(double %146, double 0x3FE62E42FEFA39EF, double %148) #6
  %150 = tail call double @llvm.fma.f64(double %146, double 0x3C7ABC9E3B39803F, double %149) #6
  %151 = fmul double %123, 2.000000e+00
  %152 = fmul double %131, 2.000000e+00
  %153 = fadd double %147, %151
  %154 = fsub double %147, %153
  %155 = fadd double %151, %154
  %156 = fadd double %150, %155
  %157 = fadd double %156, %152
  %158 = fmul double %123, %132
  %159 = fsub double -0.000000e+00, %158
  %160 = tail call double @llvm.fma.f64(double %132, double %123, double %159) #6
  %161 = tail call double @llvm.fma.f64(double %136, double %123, double %160) #6
  %162 = tail call double @llvm.fma.f64(double %132, double %131, double %161) #6
  %163 = fmul double %158, %145
  %164 = fsub double -0.000000e+00, %163
  %165 = tail call double @llvm.fma.f64(double %158, double %145, double %164) #6
  %166 = tail call double @llvm.fma.f64(double %162, double %145, double %165) #6
  %167 = fadd double %153, %163
  %168 = fsub double %153, %167
  %169 = fadd double %163, %168
  %170 = fadd double %157, %169
  %171 = fadd double %166, %170
  %172 = fadd double %167, %171
  %173 = bitcast double %0 to i64
  %174 = and i64 %173, 9223372036854775807
  %175 = bitcast i64 %174 to double
  %176 = fcmp ule double %175, 0x5FEFFFFFFFFFFFFF
  %177 = fcmp ord double %172, 0.000000e+00
  %178 = and i1 %176, %177
  %179 = fcmp oeq double %0, 1.000000e+00
  %180 = bitcast double %172 to i64
  %181 = select i1 %178, i64 %180, i64 9218868437227405312
  %182 = select i1 %179, i64 4294967295, i64 0
  %183 = shl nuw i64 %182, 32
  %184 = or i64 %183, %182
  %185 = xor i64 %184, -1
  %186 = and i64 %181, %185
  %187 = fcmp olt double %0, 1.000000e+00
  %188 = select i1 %187, i64 4294967295, i64 0
  %189 = shl nuw i64 %188, 32
  %190 = fcmp uno double %0, 0.000000e+00
  %191 = select i1 %190, i64 4294967295, i64 0
  %192 = shl nuw i64 %191, 32
  %193 = or i64 %191, %188
  %194 = or i64 %193, %189
  %195 = or i64 %194, %192
  %196 = or i64 %195, %186
  %197 = bitcast i64 %196 to double
  ret double %197
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_atanhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 1.000000e+00
  %6 = fadd double %5, -1.000000e+00
  %7 = fsub double %5, %6
  %8 = fsub double 1.000000e+00, %7
  %9 = fsub double %4, %6
  %10 = fadd double %9, %8
  %11 = fsub double -0.000000e+00, %4
  %12 = fsub double 1.000000e+00, %4
  %13 = fadd double %12, -1.000000e+00
  %14 = fsub double %12, %13
  %15 = fsub double 1.000000e+00, %14
  %16 = fsub double %11, %13
  %17 = fadd double %16, %15
  %18 = fdiv double 1.000000e+00, %12
  %19 = fmul double %5, %18
  %20 = fsub double -0.000000e+00, %19
  %21 = tail call double @llvm.fma.f64(double %18, double %5, double %20) #6
  %22 = fsub double -0.000000e+00, %12
  %23 = tail call double @llvm.fma.f64(double %22, double %18, double 1.000000e+00) #6
  %24 = fsub double -0.000000e+00, %17
  %25 = tail call double @llvm.fma.f64(double %24, double %18, double %23) #6
  %26 = tail call double @llvm.fma.f64(double %10, double %18, double %21) #6
  %27 = tail call double @llvm.fma.f64(double %19, double %25, double %26) #6
  %28 = fmul double %19, 0x3FF5555555555555
  %29 = fcmp uge double %28, 0x2D30000000000000
  %30 = fmul double %28, 0x52B0000000000000
  %31 = select i1 %29, double %28, double %30
  %32 = bitcast double %31 to i64
  %33 = lshr i64 %32, 52
  %34 = trunc i64 %33 to i32
  %35 = select i1 %29, i32 1023, i32 1323
  %36 = sub nsw i32 %34, %35
  %37 = sub nsw i32 0, %36
  %38 = ashr i32 %37, 1
  %39 = add nsw i32 %38, 1023
  %40 = zext i32 %39 to i64
  %41 = shl i64 %40, 52
  %42 = bitcast i64 %41 to double
  %43 = fmul double %19, %42
  %44 = sub nsw i32 1023, %36
  %45 = sub nsw i32 %44, %38
  %46 = zext i32 %45 to i64
  %47 = shl i64 %46, 52
  %48 = bitcast i64 %47 to double
  %49 = fmul double %43, %48
  %50 = fmul double %27, %42
  %51 = fmul double %50, %48
  %52 = fadd double %49, -1.000000e+00
  %53 = fsub double %52, %49
  %54 = fsub double %52, %53
  %55 = fsub double %49, %54
  %56 = fsub double -1.000000e+00, %53
  %57 = fadd double %56, %55
  %58 = fadd double %51, %57
  %59 = fadd double %49, 1.000000e+00
  %60 = fsub double %59, %49
  %61 = fsub double %59, %60
  %62 = fsub double %49, %61
  %63 = fsub double 1.000000e+00, %60
  %64 = fadd double %63, %62
  %65 = fadd double %51, %64
  %66 = fdiv double 1.000000e+00, %59
  %67 = fmul double %52, %66
  %68 = fsub double -0.000000e+00, %67
  %69 = tail call double @llvm.fma.f64(double %66, double %52, double %68) #6
  %70 = fsub double -0.000000e+00, %59
  %71 = tail call double @llvm.fma.f64(double %70, double %66, double 1.000000e+00) #6
  %72 = fsub double -0.000000e+00, %65
  %73 = tail call double @llvm.fma.f64(double %72, double %66, double %71) #6
  %74 = tail call double @llvm.fma.f64(double %58, double %66, double %69) #6
  %75 = tail call double @llvm.fma.f64(double %67, double %73, double %74) #6
  %76 = fmul double %67, %67
  %77 = fadd double %67, %67
  %78 = fsub double -0.000000e+00, %76
  %79 = tail call double @llvm.fma.f64(double %67, double %67, double %78) #6
  %80 = tail call double @llvm.fma.f64(double %77, double %75, double %79) #6
  %81 = fmul double %76, %76
  %82 = fmul double %81, %81
  %83 = tail call double @llvm.fma.f64(double %76, double 0x3FC0DB8A525B4A6B, double 0x3FC3B3759FB81971) #6
  %84 = tail call double @llvm.fma.f64(double %81, double 0x3FC1BDC9AD06D760, double %83) #6
  %85 = tail call double @llvm.fma.f64(double %76, double 0x3FC745C38C19C82A, double 0x3FCC71C750354F90) #6
  %86 = tail call double @llvm.fma.f64(double %76, double 0x3FD2492492114D0C, double 0x3FD999999999D9EB) #6
  %87 = tail call double @llvm.fma.f64(double %81, double %85, double %86) #6
  %88 = tail call double @llvm.fma.f64(double %82, double %84, double %87) #6
  %89 = tail call double @llvm.fma.f64(double %88, double %76, double 0x3FE5555555555545) #6
  %90 = sitofp i32 %36 to double
  %91 = fmul double %90, 0x3FE62E42FEFA39EF
  %92 = fsub double -0.000000e+00, %91
  %93 = tail call double @llvm.fma.f64(double %90, double 0x3FE62E42FEFA39EF, double %92) #6
  %94 = tail call double @llvm.fma.f64(double %90, double 0x3C7ABC9E3B39803F, double %93) #6
  %95 = fmul double %67, 2.000000e+00
  %96 = fmul double %75, 2.000000e+00
  %97 = fadd double %91, %95
  %98 = fsub double %91, %97
  %99 = fadd double %95, %98
  %100 = fadd double %94, %99
  %101 = fadd double %100, %96
  %102 = fmul double %67, %76
  %103 = fsub double -0.000000e+00, %102
  %104 = tail call double @llvm.fma.f64(double %76, double %67, double %103) #6
  %105 = tail call double @llvm.fma.f64(double %80, double %67, double %104) #6
  %106 = tail call double @llvm.fma.f64(double %76, double %75, double %105) #6
  %107 = fmul double %102, %89
  %108 = fsub double -0.000000e+00, %107
  %109 = tail call double @llvm.fma.f64(double %102, double %89, double %108) #6
  %110 = tail call double @llvm.fma.f64(double %106, double %89, double %109) #6
  %111 = fadd double %97, %107
  %112 = fsub double %97, %111
  %113 = fadd double %107, %112
  %114 = fadd double %101, %113
  %115 = fadd double %110, %114
  %116 = fcmp ogt double %4, 1.000000e+00
  %117 = fcmp une double %4, 1.000000e+00
  %118 = fadd double %111, %115
  %119 = fmul double %118, 5.000000e-01
  %120 = bitcast double %119 to i64
  %121 = select i1 %117, i64 %120, i64 9218868437227405312
  %122 = select i1 %116, i64 4294967295, i64 0
  %123 = shl nuw i64 %122, 32
  %124 = or i64 %123, %122
  %125 = or i64 %124, %121
  %126 = and i64 %2, -9223372036854775808
  %127 = xor i64 %125, %126
  %128 = bitcast i64 %127 to double
  %129 = fcmp oeq double %0, 0x7FF0000000000000
  %130 = fcmp oeq double %0, 0xFFF0000000000000
  %131 = or i1 %129, %130
  %132 = fcmp uno double %128, 0.000000e+00
  %133 = or i1 %131, %132
  %134 = select i1 %133, i64 4294967295, i64 0
  %135 = shl nuw i64 %134, 32
  %136 = fcmp uno double %0, 0.000000e+00
  %137 = select i1 %136, i64 4294967295, i64 0
  %138 = shl nuw i64 %137, 32
  %139 = or i64 %138, %137
  %140 = or i64 %139, %127
  %141 = or i64 %140, %134
  %142 = or i64 %141, %135
  %143 = bitcast i64 %142 to double
  ret double %143
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cbrtd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = tail call double @llvm.trunc.f64(double %28) #6
  %30 = fptosi double %29 to i32
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 3.000000e+00
  %33 = fsub double %27, %32
  %34 = tail call double @llvm.trunc.f64(double %33) #6
  %35 = fptosi double %34 to i32
  %36 = icmp eq i32 %35, 1
  %37 = select i1 %36, double 0x3FF428A2F98D728B, double 1.000000e+00
  %38 = icmp eq i32 %35, 2
  %39 = select i1 %38, double 0x3FF965FEA53D6E3D, double %37
  %40 = add nsw i32 %30, -2048
  %41 = ashr i32 %40, 1
  %42 = add nsw i32 %41, 1023
  %43 = zext i32 %42 to i64
  %44 = shl i64 %43, 52
  %45 = bitcast i64 %44 to double
  %46 = fmul double %39, %45
  %47 = add i32 %30, 3071
  %48 = sub i32 %47, %41
  %49 = zext i32 %48 to i64
  %50 = shl i64 %49, 52
  %51 = bitcast i64 %50 to double
  %52 = fmul double %46, %51
  %53 = bitcast double %52 to i64
  %54 = bitcast double %25 to i64
  %55 = and i64 %54, -9223372036854775808
  %56 = xor i64 %55, %53
  %57 = bitcast i64 %56 to double
  %58 = and i64 %54, 9223372036854775807
  %59 = bitcast i64 %58 to double
  %60 = tail call double @llvm.fma.f64(double %59, double 0xBFE47CE4F76BED42, double 0x4007B141AAA12A9C) #6
  %61 = tail call double @llvm.fma.f64(double %60, double %59, double 0xC016EF22A5E505B3) #6
  %62 = tail call double @llvm.fma.f64(double %61, double %59, double 0x401828DC834C5911) #6
  %63 = tail call double @llvm.fma.f64(double %62, double %59, double 0xC00EDE0AF7836A8B) #6
  %64 = tail call double @llvm.fma.f64(double %63, double %59, double 0x4001D887ACE5AC54) #6
  %65 = fmul double %64, %64
  %66 = fmul double %65, %65
  %67 = fsub double -0.000000e+00, %64
  %68 = tail call double @llvm.fma.f64(double %59, double %66, double %67) #6
  %69 = fmul double %68, 0x3FD5555555555555
  %70 = fsub double %64, %69
  %71 = fmul double %70, %59
  %72 = fmul double %70, %71
  %73 = fmul double %72, 0x3FE5555555555555
  %74 = tail call double @llvm.fma.f64(double %72, double %70, double -1.000000e+00) #6
  %75 = fmul double %73, %74
  %76 = fsub double %72, %75
  %77 = fmul double %76, %57
  ret double %77
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cbrtd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = tail call double @llvm.trunc.f64(double %28) #6
  %30 = fptosi double %29 to i32
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 3.000000e+00
  %33 = fsub double %27, %32
  %34 = tail call double @llvm.trunc.f64(double %33) #6
  %35 = fptosi double %34 to i32
  %36 = icmp ne i32 %35, 1
  %37 = icmp ne i32 %35, 2
  %38 = select i1 %36, i64 4607182418800017408, i64 4608352999143469707
  %39 = select i1 %37, i64 %38, i64 4609827837958778429
  %40 = bitcast double %25 to i64
  %41 = and i64 %40, -9223372036854775808
  %42 = or i64 %39, %41
  %43 = bitcast i64 %42 to double
  %44 = select i1 %36, i64 0, i64 -4864489982484634594
  %45 = select i1 %37, i64 %44, i64 -4855069610512929015
  %46 = xor i64 %45, %41
  %47 = bitcast i64 %46 to double
  %48 = and i64 %40, 9223372036854775807
  %49 = bitcast i64 %48 to double
  %50 = tail call double @llvm.fma.f64(double %49, double 0xBFE47CE4F76BED42, double 0x4007B141AAA12A9C) #6
  %51 = tail call double @llvm.fma.f64(double %50, double %49, double 0xC016EF22A5E505B3) #6
  %52 = tail call double @llvm.fma.f64(double %51, double %49, double 0x401828DC834C5911) #6
  %53 = tail call double @llvm.fma.f64(double %52, double %49, double 0xC00EDE0AF7836A8B) #6
  %54 = tail call double @llvm.fma.f64(double %53, double %49, double 0x4001D887ACE5AC54) #6
  %55 = fmul double %54, %54
  %56 = fmul double %55, %55
  %57 = fsub double -0.000000e+00, %54
  %58 = tail call double @llvm.fma.f64(double %49, double %56, double %57) #6
  %59 = fmul double %58, 0x3FD5555555555555
  %60 = fsub double %54, %59
  %61 = fmul double %60, %60
  %62 = fsub double -0.000000e+00, %61
  %63 = tail call double @llvm.fma.f64(double %60, double %60, double %62) #6
  %64 = fmul double %61, %61
  %65 = fsub double -0.000000e+00, %64
  %66 = tail call double @llvm.fma.f64(double %61, double %61, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %63, double %61, double %66) #6
  %68 = tail call double @llvm.fma.f64(double %61, double %63, double %67) #6
  %69 = fmul double %64, %49
  %70 = fsub double -0.000000e+00, %69
  %71 = tail call double @llvm.fma.f64(double %64, double %49, double %70) #6
  %72 = tail call double @llvm.fma.f64(double %68, double %49, double %71) #6
  %73 = fsub double -0.000000e+00, %60
  %74 = fsub double %69, %60
  %75 = fsub double %74, %69
  %76 = fsub double %74, %75
  %77 = fsub double %69, %76
  %78 = fsub double %73, %75
  %79 = fadd double %78, %77
  %80 = fadd double %72, %79
  %81 = fadd double %74, %80
  %82 = fmul double %81, 0xBFE5555555555555
  %83 = fmul double %60, %82
  %84 = fadd double %61, %83
  %85 = fsub double %84, %61
  %86 = fsub double %84, %85
  %87 = fsub double %61, %86
  %88 = fsub double %83, %85
  %89 = fadd double %88, %87
  %90 = fadd double %63, %89
  %91 = fmul double %84, %49
  %92 = fsub double -0.000000e+00, %91
  %93 = tail call double @llvm.fma.f64(double %84, double %49, double %92) #6
  %94 = tail call double @llvm.fma.f64(double %90, double %49, double %93) #6
  %95 = fmul double %91, %43
  %96 = fsub double -0.000000e+00, %95
  %97 = tail call double @llvm.fma.f64(double %91, double %43, double %96) #6
  %98 = tail call double @llvm.fma.f64(double %94, double %43, double %97) #6
  %99 = tail call double @llvm.fma.f64(double %91, double %47, double %98) #6
  %100 = fadd double %95, %99
  %101 = add nsw i32 %30, -2048
  %102 = ashr i32 %101, 1
  %103 = add nsw i32 %102, 1023
  %104 = zext i32 %103 to i64
  %105 = shl i64 %104, 52
  %106 = bitcast i64 %105 to double
  %107 = fmul double %100, %106
  %108 = add i32 %30, 3071
  %109 = sub i32 %108, %102
  %110 = zext i32 %109 to i64
  %111 = shl i64 %110, 52
  %112 = bitcast i64 %111 to double
  %113 = fmul double %107, %112
  %114 = fcmp une double %49, 0x7FF0000000000000
  %115 = fcmp une double %49, 0xFFF0000000000000
  %116 = or i64 %41, 9218868437227405312
  %117 = bitcast i64 %116 to double
  %118 = and i1 %115, %114
  %119 = select i1 %118, double %113, double %117
  %120 = fcmp une double %49, 0.000000e+00
  %121 = bitcast i64 %41 to double
  %122 = select i1 %120, double %119, double %121
  ret double %122
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_exp2d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.rint.f64(double %0) #6
  %3 = fptosi double %2 to i32
  %4 = fsub double %0, %2
  %5 = fmul double %4, %4
  %6 = fmul double %5, %5
  %7 = fmul double %6, %6
  %8 = tail call double @llvm.fma.f64(double %4, double 0x3DFE7901CA95E150, double 0x3E3E6106D72C1C17) #6
  %9 = tail call double @llvm.fma.f64(double %4, double 0x3E7B5266946BF979, double 0x3EB62BFCDABCBB81) #6
  %10 = tail call double @llvm.fma.f64(double %4, double 0x3EEFFCBFBC12CC80, double 0x3F24309130CB34EC) #6
  %11 = tail call double @llvm.fma.f64(double %5, double %9, double %10) #6
  %12 = tail call double @llvm.fma.f64(double %4, double 0x3F55D87FE78C5960, double 0x3F83B2AB6FBA08F0) #6
  %13 = tail call double @llvm.fma.f64(double %4, double 0x3FAC6B08D704A01F, double 0x3FCEBFBDFF82C5A1) #6
  %14 = tail call double @llvm.fma.f64(double %5, double %12, double %13) #6
  %15 = tail call double @llvm.fma.f64(double %6, double %11, double %14) #6
  %16 = tail call double @llvm.fma.f64(double %7, double %8, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %4, double 0x3FE62E42FEFA39EF) #6
  %18 = tail call double @llvm.fma.f64(double %17, double %4, double 1.000000e+00) #6
  %19 = ashr i32 %3, 1
  %20 = add nsw i32 %19, 1023
  %21 = zext i32 %20 to i64
  %22 = shl i64 %21, 52
  %23 = bitcast i64 %22 to double
  %24 = fmul double %18, %23
  %25 = add i32 %3, 1023
  %26 = sub i32 %25, %19
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %24, %29
  %31 = fcmp ult double %0, 1.024000e+03
  %32 = fcmp olt double %0, -2.000000e+03
  %33 = bitcast double %30 to i64
  %34 = select i1 %31, i64 %33, i64 9218868437227405312
  %35 = select i1 %32, i64 4294967295, i64 0
  %36 = shl nuw i64 %35, 32
  %37 = or i64 %36, %35
  %38 = xor i64 %37, -1
  %39 = and i64 %34, %38
  %40 = bitcast i64 %39 to double
  ret double %40
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_exp2d1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.rint.f64(double %0) #6
  %3 = fptosi double %2 to i32
  %4 = fsub double %0, %2
  %5 = fmul double %4, %4
  %6 = fmul double %5, %5
  %7 = fmul double %6, %6
  %8 = tail call double @llvm.fma.f64(double %4, double 0x3DFE7901CA95E150, double 0x3E3E6106D72C1C17) #6
  %9 = tail call double @llvm.fma.f64(double %4, double 0x3E7B5266946BF979, double 0x3EB62BFCDABCBB81) #6
  %10 = tail call double @llvm.fma.f64(double %4, double 0x3EEFFCBFBC12CC80, double 0x3F24309130CB34EC) #6
  %11 = tail call double @llvm.fma.f64(double %5, double %9, double %10) #6
  %12 = tail call double @llvm.fma.f64(double %4, double 0x3F55D87FE78C5960, double 0x3F83B2AB6FBA08F0) #6
  %13 = tail call double @llvm.fma.f64(double %4, double 0x3FAC6B08D704A01F, double 0x3FCEBFBDFF82C5A1) #6
  %14 = tail call double @llvm.fma.f64(double %5, double %12, double %13) #6
  %15 = tail call double @llvm.fma.f64(double %6, double %11, double %14) #6
  %16 = tail call double @llvm.fma.f64(double %7, double %8, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %4, double 0x3FE62E42FEFA39EF) #6
  %18 = tail call double @llvm.fma.f64(double %17, double %4, double 1.000000e+00) #6
  %19 = ashr i32 %3, 1
  %20 = add nsw i32 %19, 1023
  %21 = zext i32 %20 to i64
  %22 = shl i64 %21, 52
  %23 = bitcast i64 %22 to double
  %24 = fmul double %18, %23
  %25 = add i32 %3, 1023
  %26 = sub i32 %25, %19
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %24, %29
  %31 = fcmp ult double %0, 1.024000e+03
  %32 = fcmp olt double %0, -2.000000e+03
  %33 = bitcast double %30 to i64
  %34 = select i1 %31, i64 %33, i64 9218868437227405312
  %35 = select i1 %32, i64 4294967295, i64 0
  %36 = shl nuw i64 %35, 32
  %37 = or i64 %36, %35
  %38 = xor i64 %37, -1
  %39 = and i64 %34, %38
  %40 = bitcast i64 %39 to double
  ret double %40
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_exp10d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = tail call double @llvm.rint.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = tail call double @llvm.fma.f64(double %3, double 0xBFD34413509F7000, double %0) #6
  %6 = tail call double @llvm.fma.f64(double %3, double 0xBD43FDE623E2566B, double %5) #6
  %7 = tail call double @llvm.fma.f64(double %6, double 0x3F2F9B875F46726F, double 0x3F52F6DBB8E3072A) #6
  %8 = tail call double @llvm.fma.f64(double %7, double %6, double 0x3F748988CFF14706) #6
  %9 = tail call double @llvm.fma.f64(double %8, double %6, double 0x3F9411663B046154) #6
  %10 = tail call double @llvm.fma.f64(double %9, double %6, double 0x3FB16E4DF78FCA37) #6
  %11 = tail call double @llvm.fma.f64(double %10, double %6, double 0x3FCA7ED709F2107E) #6
  %12 = tail call double @llvm.fma.f64(double %11, double %6, double 0x3FE1429FFD1EB6E2) #6
  %13 = tail call double @llvm.fma.f64(double %12, double %6, double 0x3FF2BD7609FD573B) #6
  %14 = tail call double @llvm.fma.f64(double %13, double %6, double 0x4000470591DE2C43) #6
  %15 = tail call double @llvm.fma.f64(double %14, double %6, double 0x40053524C73CEA78) #6
  %16 = tail call double @llvm.fma.f64(double %15, double %6, double 0x40026BB1BBB55516) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %6, double 1.000000e+00) #6
  %18 = ashr i32 %4, 1
  %19 = add nsw i32 %18, 1023
  %20 = zext i32 %19 to i64
  %21 = shl i64 %20, 52
  %22 = bitcast i64 %21 to double
  %23 = fmul double %17, %22
  %24 = add i32 %4, 1023
  %25 = sub i32 %24, %18
  %26 = zext i32 %25 to i64
  %27 = shl i64 %26, 52
  %28 = bitcast i64 %27 to double
  %29 = fmul double %23, %28
  %30 = fcmp ule double %0, 0x40734413509F79FE
  %31 = fcmp olt double %0, -3.500000e+02
  %32 = bitcast double %29 to i64
  %33 = select i1 %30, i64 %32, i64 9218868437227405312
  %34 = select i1 %31, i64 4294967295, i64 0
  %35 = shl nuw i64 %34, 32
  %36 = or i64 %35, %34
  %37 = xor i64 %36, -1
  %38 = and i64 %33, %37
  %39 = bitcast i64 %38 to double
  ret double %39
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_exp10d1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = tail call double @llvm.rint.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = tail call double @llvm.fma.f64(double %3, double 0xBFD34413509F7000, double %0) #6
  %6 = tail call double @llvm.fma.f64(double %3, double 0xBD43FDE623E2566B, double %5) #6
  %7 = fmul double %6, %6
  %8 = fmul double %7, %7
  %9 = fmul double %8, %8
  %10 = tail call double @llvm.fma.f64(double %6, double 0x3F52F6DBB8E3072A, double 0x3F748988CFF14706) #6
  %11 = tail call double @llvm.fma.f64(double %7, double 0x3F2F9B875F46726F, double %10) #6
  %12 = tail call double @llvm.fma.f64(double %6, double 0x3F9411663B046154, double 0x3FB16E4DF78FCA37) #6
  %13 = tail call double @llvm.fma.f64(double %6, double 0x3FCA7ED709F2107E, double 0x3FE1429FFD1EB6E2) #6
  %14 = tail call double @llvm.fma.f64(double %7, double %12, double %13) #6
  %15 = tail call double @llvm.fma.f64(double %6, double 0x3FF2BD7609FD573B, double 0x4000470591DE2C43) #6
  %16 = tail call double @llvm.fma.f64(double %6, double 0x40053524C73CEA78, double 0x40026BB1BBB55516) #6
  %17 = tail call double @llvm.fma.f64(double %7, double %15, double %16) #6
  %18 = tail call double @llvm.fma.f64(double %8, double %14, double %17) #6
  %19 = tail call double @llvm.fma.f64(double %9, double %11, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %19, double %6, double 1.000000e+00) #6
  %21 = ashr i32 %4, 1
  %22 = add nsw i32 %21, 1023
  %23 = zext i32 %22 to i64
  %24 = shl i64 %23, 52
  %25 = bitcast i64 %24 to double
  %26 = fmul double %20, %25
  %27 = add i32 %4, 1023
  %28 = sub i32 %27, %21
  %29 = zext i32 %28 to i64
  %30 = shl i64 %29, 52
  %31 = bitcast i64 %30 to double
  %32 = fmul double %26, %31
  %33 = fcmp ule double %0, 0x40734413509F79FE
  %34 = fcmp olt double %0, -3.500000e+02
  %35 = bitcast double %32 to i64
  %36 = select i1 %33, i64 %35, i64 9218868437227405312
  %37 = select i1 %34, i64 4294967295, i64 0
  %38 = shl nuw i64 %37, 32
  %39 = or i64 %38, %37
  %40 = xor i64 %39, -1
  %41 = and i64 %36, %40
  %42 = bitcast i64 %41 to double
  ret double %42
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_expm1d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fadd double %0, 0.000000e+00
  %3 = fmul double %2, 0x3FF71547652B82FE
  %4 = tail call double @llvm.rint.f64(double %3) #6
  %5 = fptosi double %4 to i32
  %6 = fmul double %4, 0xBFE62E42FEFA3000
  %7 = fadd double %6, %0
  %8 = fsub double %7, %0
  %9 = fsub double %7, %8
  %10 = fsub double %0, %9
  %11 = fsub double %6, %8
  %12 = fadd double %11, %10
  %13 = fadd double %12, 0.000000e+00
  %14 = fmul double %4, 0xBD53DE6AF278ECE6
  %15 = fadd double %14, %7
  %16 = fsub double %15, %7
  %17 = fsub double %15, %16
  %18 = fsub double %7, %17
  %19 = fsub double %14, %16
  %20 = fadd double %19, %18
  %21 = fadd double %20, %13
  %22 = fmul double %15, %15
  %23 = fadd double %15, %15
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %15, double %15, double %24) #6
  %26 = tail call double @llvm.fma.f64(double %23, double %21, double %25) #6
  %27 = fmul double %22, %22
  %28 = fadd double %22, %22
  %29 = fsub double -0.000000e+00, %27
  %30 = tail call double @llvm.fma.f64(double %22, double %22, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %28, double %26, double %30) #6
  %32 = fmul double %27, %27
  %33 = tail call double @llvm.fma.f64(double %15, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %34 = tail call double @llvm.fma.f64(double %15, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %35 = tail call double @llvm.fma.f64(double %15, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %36 = tail call double @llvm.fma.f64(double %22, double %34, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %15, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %38 = tail call double @llvm.fma.f64(double %15, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %39 = tail call double @llvm.fma.f64(double %22, double %37, double %38) #6
  %40 = tail call double @llvm.fma.f64(double %27, double %36, double %39) #6
  %41 = tail call double @llvm.fma.f64(double %32, double %33, double %40) #6
  %42 = fmul double %15, 0x3FC5555555555555
  %43 = fsub double -0.000000e+00, %42
  %44 = tail call double @llvm.fma.f64(double %15, double 0x3FC5555555555555, double %43) #6
  %45 = tail call double @llvm.fma.f64(double %21, double 0x3FC5555555555555, double %44) #6
  %46 = fadd double %42, 5.000000e-01
  %47 = fsub double 5.000000e-01, %46
  %48 = fadd double %42, %47
  %49 = fadd double %48, %45
  %50 = fmul double %15, %46
  %51 = fsub double -0.000000e+00, %50
  %52 = tail call double @llvm.fma.f64(double %46, double %15, double %51) #6
  %53 = tail call double @llvm.fma.f64(double %49, double %15, double %52) #6
  %54 = tail call double @llvm.fma.f64(double %46, double %21, double %53) #6
  %55 = fadd double %50, 1.000000e+00
  %56 = fsub double 1.000000e+00, %55
  %57 = fadd double %50, %56
  %58 = fadd double %57, %54
  %59 = fmul double %15, %55
  %60 = fsub double -0.000000e+00, %59
  %61 = tail call double @llvm.fma.f64(double %55, double %15, double %60) #6
  %62 = tail call double @llvm.fma.f64(double %58, double %15, double %61) #6
  %63 = tail call double @llvm.fma.f64(double %55, double %21, double %62) #6
  %64 = fadd double %59, 1.000000e+00
  %65 = fsub double 1.000000e+00, %64
  %66 = fadd double %59, %65
  %67 = fadd double %66, %63
  %68 = fmul double %27, %41
  %69 = fsub double -0.000000e+00, %68
  %70 = tail call double @llvm.fma.f64(double %27, double %41, double %69) #6
  %71 = tail call double @llvm.fma.f64(double %31, double %41, double %70) #6
  %72 = fadd double %68, %64
  %73 = fsub double %64, %72
  %74 = fadd double %68, %73
  %75 = fadd double %74, %67
  %76 = fadd double %71, %75
  %77 = ashr i32 %5, 1
  %78 = add nsw i32 %77, 1023
  %79 = zext i32 %78 to i64
  %80 = shl i64 %79, 52
  %81 = bitcast i64 %80 to double
  %82 = fmul double %72, %81
  %83 = add i32 %5, 1023
  %84 = sub i32 %83, %77
  %85 = zext i32 %84 to i64
  %86 = shl i64 %85, 52
  %87 = bitcast i64 %86 to double
  %88 = fmul double %82, %87
  %89 = fmul double %76, %81
  %90 = fmul double %89, %87
  %91 = fcmp olt double %0, -1.000000e+03
  %92 = bitcast double %88 to i64
  %93 = select i1 %91, i64 4294967295, i64 0
  %94 = shl nuw i64 %93, 32
  %95 = or i64 %94, %93
  %96 = xor i64 %95, -1
  %97 = and i64 %92, %96
  %98 = bitcast i64 %97 to double
  %99 = bitcast double %90 to i64
  %100 = and i64 %99, %96
  %101 = bitcast i64 %100 to double
  %102 = fadd double %98, -1.000000e+00
  %103 = fsub double %102, %98
  %104 = fsub double %102, %103
  %105 = fsub double %98, %104
  %106 = fsub double -1.000000e+00, %103
  %107 = fadd double %106, %105
  %108 = fadd double %107, %101
  %109 = fadd double %102, %108
  %110 = fcmp ule double %0, 0x40862E42FEFA39EF
  %111 = select i1 %110, double %109, double 0x7FF0000000000000
  %112 = fcmp uge double %0, 0xC0425E4F7B2737FA
  %113 = select i1 %112, double %111, double -1.000000e+00
  %114 = bitcast double %0 to i64
  %115 = icmp eq i64 %114, -9223372036854775808
  %116 = select i1 %115, double -0.000000e+00, double %113
  ret double %116
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_log10d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FB0F63BD2A55192, double 0x3FB4381A2BF55D48) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FB10895F3EA9496, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FB8B4D992891F74, double 0x3FBFC3FA6F6D7821) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FC63C6277499B88, double 0x3FD287A7636F4570) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %52, 0x3FD34413509F79FF
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %52, double 0x3FD34413509F79FF, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double 0xBC49DC1DA994FD21, double %55) #6
  %57 = fmul double %34, 0x3FEBCB7B1526E50E
  %58 = fsub double -0.000000e+00, %57
  %59 = tail call double @llvm.fma.f64(double %34, double 0x3FEBCB7B1526E50E, double %58) #6
  %60 = tail call double @llvm.fma.f64(double %42, double 0x3FEBCB7B1526E50E, double %59) #6
  %61 = tail call double @llvm.fma.f64(double %34, double 0x3C6A5B1DC915F38F, double %60) #6
  %62 = fadd double %53, %57
  %63 = fsub double %53, %62
  %64 = fadd double %57, %63
  %65 = fadd double %56, %64
  %66 = fadd double %65, %61
  %67 = fmul double %34, %43
  %68 = fmul double %67, %51
  %69 = fadd double %62, %68
  %70 = fsub double %62, %69
  %71 = fadd double %68, %70
  %72 = fadd double %66, %71
  %73 = fadd double %69, %72
  %74 = fcmp une double %4, 0x7FF0000000000000
  %75 = select i1 %74, double %73, double 0x7FF0000000000000
  %76 = fcmp oge double %4, 0.000000e+00
  %77 = select i1 %76, double %75, double 0x7FF8000000000000
  %78 = fcmp une double %4, 0.000000e+00
  %79 = select i1 %78, double %77, double 0xFFF0000000000000
  ret double %79
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_log2d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FCC2B7A962850E9, double 0x3FD0CAAEEB877481) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FCC501739F17BA9, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FD484AC6A7CB2DD, double 0x3FDA617636C2C254) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FE2776C50E7EDE9, double 0x3FEEC709DC3A07B2) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %34, %43
  %54 = insertelement <2 x double> <double 0x40071547652B82FE, double undef>, double %51, i32 1
  %55 = insertelement <2 x double> undef, double %34, i32 0
  %56 = insertelement <2 x double> %55, double %53, i32 1
  %57 = fmul <2 x double> %54, %56
  %58 = extractelement <2 x double> %57, i32 0
  %59 = fsub double -0.000000e+00, %58
  %60 = tail call double @llvm.fma.f64(double %34, double 0x40071547652B82FE, double %59) #6
  %61 = tail call double @llvm.fma.f64(double %42, double 0x40071547652B82FE, double %60) #6
  %62 = tail call double @llvm.fma.f64(double %34, double 0x3C5BEDDA32EBBCB1, double %61) #6
  %63 = fadd double %58, %52
  %64 = extractelement <2 x double> %57, i32 1
  %65 = fadd double %63, %64
  %66 = insertelement <2 x double> undef, double %63, i32 0
  %67 = insertelement <2 x double> %66, double %65, i32 1
  %68 = insertelement <2 x double> undef, double %52, i32 0
  %69 = insertelement <2 x double> %68, double %63, i32 1
  %70 = fsub <2 x double> %67, %69
  %71 = fsub <2 x double> %67, %70
  %72 = fsub <2 x double> %69, %71
  %73 = fsub <2 x double> %57, %70
  %74 = fadd <2 x double> %73, %72
  %75 = extractelement <2 x double> %74, i32 0
  %76 = fadd double %75, %62
  %77 = extractelement <2 x double> %74, i32 1
  %78 = fadd double %76, %77
  %79 = fadd double %65, %78
  %80 = fcmp une double %4, 0x7FF0000000000000
  %81 = select i1 %80, double %79, double 0x7FF0000000000000
  %82 = fcmp oge double %4, 0.000000e+00
  %83 = select i1 %82, double %81, double 0x7FF8000000000000
  %84 = fcmp une double %4, 0.000000e+00
  %85 = select i1 %84, double %83, double 0xFFF0000000000000
  ret double %85
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_log2d1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = tail call double @llvm.fma.f64(double %24, double 0x3FCC501739F17BA9, double 0x3FCC2B7A962850E9) #6
  %26 = tail call double @llvm.fma.f64(double %25, double %24, double 0x3FD0CAAEEB877481) #6
  %27 = tail call double @llvm.fma.f64(double %26, double %24, double 0x3FD484AC6A7CB2DD) #6
  %28 = tail call double @llvm.fma.f64(double %27, double %24, double 0x3FDA617636C2C254) #6
  %29 = tail call double @llvm.fma.f64(double %28, double %24, double 0x3FE2776C50E7EDE9) #6
  %30 = tail call double @llvm.fma.f64(double %29, double %24, double 0x3FEEC709DC3A07B2) #6
  %31 = sitofp i32 %20 to double
  %32 = fmul double %23, 0x40071547652B82FE
  %33 = fsub double -0.000000e+00, %32
  %34 = tail call double @llvm.fma.f64(double %23, double 0x40071547652B82FE, double %33) #6
  %35 = fadd double %32, %31
  %36 = fsub double %31, %35
  %37 = fadd double %32, %36
  %38 = fadd double %34, %37
  %39 = fmul double %23, %24
  %40 = fadd double %35, %38
  %41 = tail call double @llvm.fma.f64(double %30, double %39, double %40) #6
  %42 = fcmp une double %4, 0x7FF0000000000000
  %43 = select i1 %42, double %41, double 0x7FF0000000000000
  %44 = fcmp oge double %4, 0.000000e+00
  %45 = select i1 %44, double %43, double 0x7FF8000000000000
  %46 = fcmp une double %4, 0.000000e+00
  %47 = select i1 %46, double %45, double 0xFFF0000000000000
  ret double %47
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_log1pd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fadd double %0, 1.000000e+00
  %3 = fcmp uge double %2, 0x10000000000000
  %4 = fmul double %2, 0x43F0000000000000
  %5 = select i1 %3, double %2, double %4
  %6 = fmul double %5, 0x3FF5555555555555
  %7 = bitcast double %6 to i64
  %8 = lshr i64 %7, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 1023, %10
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 52
  %14 = add i64 %13, 4607182418800017408
  %15 = bitcast i64 %14 to double
  %16 = fadd double %15, -1.000000e+00
  %17 = tail call double @llvm.fma.f64(double %0, double %15, double %16) #6
  %18 = select i1 %3, i32 -1023, i32 -1087
  %19 = add nsw i32 %10, %18
  %20 = sitofp i32 %19 to double
  %21 = fmul double %20, 0x3FE62E42FEFA39EF
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %20, double 0x3FE62E42FEFA39EF, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %20, double 0x3C7ABC9E3B39803F, double %23) #6
  %25 = fadd double %17, 2.000000e+00
  %26 = fsub double 2.000000e+00, %25
  %27 = fadd double %17, %26
  %28 = fdiv double 1.000000e+00, %25
  %29 = fmul double %17, %28
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %28, double %17, double %30) #6
  %32 = fsub double -0.000000e+00, %25
  %33 = tail call double @llvm.fma.f64(double %32, double %28, double 1.000000e+00) #6
  %34 = fsub double -0.000000e+00, %27
  %35 = tail call double @llvm.fma.f64(double %34, double %28, double %33) #6
  %36 = tail call double @llvm.fma.f64(double %28, double 0.000000e+00, double %31) #6
  %37 = tail call double @llvm.fma.f64(double %29, double %35, double %36) #6
  %38 = fmul double %29, %29
  %39 = fmul double %38, %38
  %40 = fmul double %39, %39
  %41 = tail call double @llvm.fma.f64(double %38, double 0x3FC3872E67FE8E84, double 0x3FC747353A506035) #6
  %42 = tail call double @llvm.fma.f64(double %39, double 0x3FC39C4F5407567E, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %38, double 0x3FCC71C0A65ECD8E, double 0x3FD249249A68A245) #6
  %44 = tail call double @llvm.fma.f64(double %38, double 0x3FD99999998F92EA, double 0x3FE55555555557AE) #6
  %45 = tail call double @llvm.fma.f64(double %39, double %43, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %40, double %42, double %45) #6
  %47 = fmul double %29, 2.000000e+00
  %48 = fmul double %37, 2.000000e+00
  %49 = fadd double %21, %47
  %50 = fsub double %21, %49
  %51 = fadd double %47, %50
  %52 = fadd double %24, %51
  %53 = fadd double %48, %52
  %54 = fmul double %29, %38
  %55 = fmul double %54, %46
  %56 = fadd double %49, %55
  %57 = fsub double %49, %56
  %58 = fadd double %55, %57
  %59 = fadd double %53, %58
  %60 = fadd double %56, %59
  %61 = fcmp ule double %0, 0x7FAC7B1F3CAC7433
  %62 = select i1 %61, double %60, double 0x7FF0000000000000
  %63 = fcmp uge double %0, -1.000000e+00
  %64 = fcmp ord double %0, 0.000000e+00
  %65 = and i1 %63, %64
  %66 = select i1 %65, double %62, double 0x7FF8000000000000
  %67 = fcmp une double %0, -1.000000e+00
  %68 = select i1 %67, double %66, double 0xFFF0000000000000
  %69 = bitcast double %0 to i64
  %70 = icmp eq i64 %69, -9223372036854775808
  %71 = select i1 %70, double -0.000000e+00, double %68
  ret double %71
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fabsd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_copysignd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %6, %4
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmaxd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp ogt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmind1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp olt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fdimd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fsub double %0, %1
  %4 = fcmp uge double %3, 0.000000e+00
  %5 = fcmp une double %0, %1
  %6 = and i1 %5, %4
  %7 = select i1 %6, double %3, double 0.000000e+00
  ret double %7
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_truncd1_purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.trunc.f64(double %0) #6
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_floord1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = fcmp uge double %11, 0.000000e+00
  %13 = fadd double %11, 1.000000e+00
  %14 = select i1 %12, double %11, double %13
  %15 = fcmp oeq double %0, 0x7FF0000000000000
  %16 = fcmp oeq double %0, 0xFFF0000000000000
  %17 = or i1 %15, %16
  %18 = bitcast double %0 to i64
  %19 = and i64 %18, 9223372036854775807
  %20 = bitcast i64 %19 to double
  %21 = fcmp oge double %20, 0x4330000000000000
  %22 = or i1 %17, %21
  %23 = fsub double %0, %14
  %24 = bitcast double %23 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = and i64 %18, -9223372036854775808
  %27 = or i64 %25, %26
  %28 = bitcast i64 %27 to double
  %29 = select i1 %22, double %0, double %28
  ret double %29
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_ceild1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = fcmp ugt double %11, 0.000000e+00
  %13 = fadd double %11, -1.000000e+00
  %14 = select i1 %12, double %13, double %11
  %15 = fcmp oeq double %0, 0x7FF0000000000000
  %16 = fcmp oeq double %0, 0xFFF0000000000000
  %17 = or i1 %15, %16
  %18 = bitcast double %0 to i64
  %19 = and i64 %18, 9223372036854775807
  %20 = bitcast i64 %19 to double
  %21 = fcmp oge double %20, 0x4330000000000000
  %22 = or i1 %17, %21
  %23 = fsub double %0, %14
  %24 = bitcast double %23 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = and i64 %18, -9223372036854775808
  %27 = or i64 %25, %26
  %28 = bitcast i64 %27 to double
  %29 = select i1 %22, double %0, double %28
  ret double %29
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_roundd1_purecfma(double) local_unnamed_addr #1 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fmul double %2, 0x3E00000000000000
  %4 = tail call double @llvm.trunc.f64(double %3) #6
  %5 = fptosi double %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 0x41E0000000000000
  %8 = fsub double %2, %7
  %9 = tail call double @llvm.trunc.f64(double %8) #6
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fsub double %8, %11
  %13 = fcmp ugt double %2, 0.000000e+00
  %14 = fcmp une double %12, 0.000000e+00
  %15 = fadd double %2, -1.000000e+00
  %16 = or i1 %13, %14
  %17 = select i1 %16, double %2, double %15
  %18 = fcmp uge double %12, 0.000000e+00
  %19 = fadd double %12, 1.000000e+00
  %20 = select i1 %18, double %12, double %19
  %21 = fcmp une double %0, 0x3FDFFFFFFFFFFFFF
  %22 = select i1 %21, double %17, double 0.000000e+00
  %23 = fcmp oeq double %0, 0x7FF0000000000000
  %24 = fcmp oeq double %0, 0xFFF0000000000000
  %25 = or i1 %23, %24
  %26 = bitcast double %0 to i64
  %27 = and i64 %26, 9223372036854775807
  %28 = bitcast i64 %27 to double
  %29 = fcmp oge double %28, 0x4330000000000000
  %30 = or i1 %25, %29
  %31 = fsub double %22, %20
  %32 = bitcast double %31 to i64
  %33 = and i64 %32, 9223372036854775807
  %34 = and i64 %26, -9223372036854775808
  %35 = or i64 %33, %34
  %36 = bitcast i64 %35 to double
  %37 = select i1 %30, double %0, double %36
  ret double %37
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_rintd1_purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.rint.f64(double %0) #6
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_nextafterd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp une double %0, 0.000000e+00
  %4 = bitcast double %1 to i64
  %5 = and i64 %4, -9223372036854775808
  %6 = bitcast i64 %5 to double
  %7 = select i1 %3, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = ashr i64 %8, 63
  %10 = trunc i64 %9 to i32
  %11 = fcmp ole double %7, %1
  %12 = sext i1 %11 to i32
  %13 = xor i64 %8, 9223372036854775807
  %14 = and i64 %13, -4294967296
  %15 = add i64 %13, 1
  %16 = trunc i64 %15 to i32
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i64
  %19 = shl nuw nsw i64 %18, 32
  %20 = add i64 %19, %14
  %21 = and i64 %15, 4294967295
  %22 = or i64 %20, %21
  %23 = icmp eq i32 %12, %10
  %24 = select i1 %23, i64 %8, i64 %22
  %25 = fcmp une double %7, %1
  %26 = zext i1 %25 to i64
  %27 = sub i64 %24, %26
  %28 = and i64 %24, -4294967296
  %29 = and i64 %27, 4294967295
  %30 = trunc i64 %27 to i32
  %31 = icmp eq i32 %30, -1
  %32 = and i1 %25, %31
  %33 = select i1 %32, i64 -4294967296, i64 0
  %34 = add i64 %28, %33
  %35 = or i64 %29, %34
  %36 = xor i64 %35, 9223372036854775807
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 1
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %42, %37
  %44 = and i64 %38, 4294967295
  %45 = or i64 %43, %44
  %46 = select i1 %23, i64 %35, i64 %45
  %47 = bitcast i64 %46 to double
  %48 = fcmp une double %47, 0.000000e+00
  %49 = fcmp oeq double %7, 0.000000e+00
  %50 = and i64 %8, -9223372036854775808
  %51 = bitcast i64 %50 to double
  %52 = or i1 %49, %48
  %53 = select i1 %52, double %47, double %51
  %54 = fcmp une double %7, 0.000000e+00
  %55 = fcmp une double %1, 0.000000e+00
  %56 = or i1 %55, %54
  %57 = select i1 %56, double %53, double %1
  %58 = fcmp ord double %7, %1
  %59 = select i1 %58, double %57, double 0x7FF8000000000000
  ret double %59
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_frfrexpd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = and i64 %8, -9218868437227405313
  %10 = or i64 %9, 4602678819172646912
  %11 = fcmp une double %7, 0x7FF0000000000000
  %12 = fcmp une double %7, 0xFFF0000000000000
  %13 = and i64 %8, -9223372036854775808
  %14 = or i64 %13, 9218868437227405312
  %15 = and i1 %12, %11
  %16 = select i1 %15, i64 %10, i64 %14
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %7, 0.000000e+00
  %19 = select i1 %18, double %17, double %7
  ret double %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_expfrexpd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = add nsw i32 %11, -1022
  %13 = fcmp ueq double %7, 0.000000e+00
  %14 = fcmp oeq double %7, 0x7FF0000000000000
  %15 = fcmp oeq double %7, 0xFFF0000000000000
  %16 = or i1 %14, %15
  %17 = or i1 %13, %16
  %18 = select i1 %17, i32 0, i32 %12
  ret i32 %18
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_fmad1_purecfma(double, double, double) local_unnamed_addr #1 {
  %4 = tail call double @llvm.fma.f64(double %0, double %1, double %2) #6
  ret double %4
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sqrtd1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0.000000e+00
  %3 = select i1 %2, double %0, double 0x7FF8000000000000
  %4 = fcmp uge double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double %3, double %5
  %7 = select i1 %4, double 1.000000e+00, double 0x37F0000000000000
  %8 = bitcast double %6 to i64
  %9 = lshr i64 %8, 33
  %10 = lshr i64 %8, 1
  %11 = shl nuw nsw i64 %9, 32
  %12 = and i64 %10, 2147483647
  %13 = sub nsw i64 3890098394, %12
  %14 = sub nsw i64 6910470738111508698, %11
  %15 = and i64 %14, -4294967296
  %16 = or i64 %15, %13
  %17 = bitcast i64 %16 to double
  %18 = fmul double %6, %17
  %19 = fmul double %17, 5.000000e-01
  %20 = fsub double -0.000000e+00, %18
  %21 = tail call double @llvm.fma.f64(double %20, double %19, double 5.000000e-01) #6
  %22 = tail call double @llvm.fma.f64(double %18, double %21, double %18) #6
  %23 = tail call double @llvm.fma.f64(double %19, double %21, double %19) #6
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double 5.000000e-01) #6
  %26 = tail call double @llvm.fma.f64(double %22, double %25, double %22) #6
  %27 = tail call double @llvm.fma.f64(double %23, double %25, double %23) #6
  %28 = fsub double -0.000000e+00, %26
  %29 = tail call double @llvm.fma.f64(double %28, double %27, double 5.000000e-01) #6
  %30 = tail call double @llvm.fma.f64(double %26, double %29, double %26) #6
  %31 = tail call double @llvm.fma.f64(double %27, double %29, double %27) #6
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %32, double %31, double 1.500000e+00) #6
  %34 = fadd double %31, %31
  %35 = fmul double %34, %33
  %36 = fmul double %6, %35
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %35, double %6, double %37) #6
  %39 = fsub double -0.000000e+00, %35
  %40 = tail call double @llvm.fma.f64(double %39, double %36, double 1.000000e+00) #6
  %41 = tail call double @llvm.fma.f64(double %39, double %38, double %40) #6
  %42 = fmul double %36, 5.000000e-01
  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %38) #6
  %44 = fadd double %36, %43
  %45 = fmul double %7, %44
  %46 = fcmp une double %6, 0.000000e+00
  %47 = fcmp une double %6, 0x7FF0000000000000
  %48 = and i1 %46, %47
  %49 = select i1 %48, double %45, double %6
  %50 = fcmp uge double %6, 0.000000e+00
  %51 = select i1 %50, double %49, double 0x7FF8000000000000
  ret double %51
}

; Function Attrs: nounwind uwtable
define double @Sleef_sqrtd1_purecfma(double) local_unnamed_addr #3 {
  %2 = tail call double @sqrt(double %0) #6
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sqrtd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0.000000e+00
  %3 = select i1 %2, double %0, double 0x7FF8000000000000
  %4 = fcmp uge double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double %3, double %5
  %7 = select i1 %4, double 1.000000e+00, double 0x37F0000000000000
  %8 = bitcast double %6 to i64
  %9 = lshr i64 %8, 33
  %10 = lshr i64 %8, 1
  %11 = shl nuw nsw i64 %9, 32
  %12 = and i64 %10, 2147483647
  %13 = sub nsw i64 3890098394, %12
  %14 = sub nsw i64 6910470738111508698, %11
  %15 = and i64 %14, -4294967296
  %16 = or i64 %15, %13
  %17 = bitcast i64 %16 to double
  %18 = fmul double %6, %17
  %19 = fmul double %17, 5.000000e-01
  %20 = fsub double -0.000000e+00, %18
  %21 = tail call double @llvm.fma.f64(double %20, double %19, double 5.000000e-01) #6
  %22 = tail call double @llvm.fma.f64(double %18, double %21, double %18) #6
  %23 = tail call double @llvm.fma.f64(double %19, double %21, double %19) #6
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double 5.000000e-01) #6
  %26 = tail call double @llvm.fma.f64(double %22, double %25, double %22) #6
  %27 = tail call double @llvm.fma.f64(double %23, double %25, double %23) #6
  %28 = fsub double -0.000000e+00, %26
  %29 = tail call double @llvm.fma.f64(double %28, double %27, double 5.000000e-01) #6
  %30 = tail call double @llvm.fma.f64(double %26, double %29, double %26) #6
  %31 = tail call double @llvm.fma.f64(double %27, double %29, double %27) #6
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %32, double %31, double 1.500000e+00) #6
  %34 = fadd double %31, %31
  %35 = fmul double %34, %33
  %36 = fmul double %6, %35
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %35, double %6, double %37) #6
  %39 = fsub double -0.000000e+00, %35
  %40 = tail call double @llvm.fma.f64(double %39, double %36, double 1.000000e+00) #6
  %41 = tail call double @llvm.fma.f64(double %39, double %38, double %40) #6
  %42 = fmul double %36, 5.000000e-01
  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %38) #6
  %44 = fadd double %36, %43
  %45 = fmul double %7, %44
  %46 = fcmp une double %6, 0.000000e+00
  %47 = fcmp une double %6, 0x7FF0000000000000
  %48 = and i1 %46, %47
  %49 = select i1 %48, double %45, double %6
  %50 = fcmp uge double %6, 0.000000e+00
  %51 = select i1 %50, double %49, double 0x7FF8000000000000
  ret double %51
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypotd1_u05purecfma(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fcmp uge double %12, 0x10000000000000
  %14 = fmul double %10, 0x4350000000000000
  %15 = select i1 %13, double %10, double %14
  %16 = fmul double %12, 0x4350000000000000
  %17 = select i1 %13, double %12, double %16
  %18 = fdiv double 1.000000e+00, %17
  %19 = fmul double %15, %18
  %20 = fsub double -0.000000e+00, %19
  %21 = tail call double @llvm.fma.f64(double %18, double %15, double %20) #6
  %22 = fsub double -0.000000e+00, %17
  %23 = tail call double @llvm.fma.f64(double %22, double %18, double 1.000000e+00) #6
  %24 = tail call double @llvm.fma.f64(double %18, double -0.000000e+00, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %18, double 0.000000e+00, double %21) #6
  %26 = tail call double @llvm.fma.f64(double %19, double %24, double %25) #6
  %27 = fmul double %19, %19
  %28 = fadd double %19, %19
  %29 = fsub double -0.000000e+00, %27
  %30 = tail call double @llvm.fma.f64(double %19, double %19, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %28, double %26, double %30) #6
  %32 = fadd double %27, 1.000000e+00
  %33 = fsub double %32, %27
  %34 = fsub double %32, %33
  %35 = fsub double %27, %34
  %36 = fsub double 1.000000e+00, %33
  %37 = fadd double %36, %35
  %38 = fadd double %31, %37
  %39 = fadd double %32, %38
  %40 = tail call double @sqrt(double %39) #6
  %41 = fmul double %40, %40
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.fma.f64(double %40, double %40, double %42) #6
  %44 = fadd double %32, %41
  %45 = fsub double %44, %32
  %46 = fsub double %44, %45
  %47 = fsub double %32, %46
  %48 = fsub double %41, %45
  %49 = fadd double %48, %47
  %50 = fadd double %38, %43
  %51 = fadd double %50, %49
  %52 = fdiv double 1.000000e+00, %40
  %53 = fsub double -0.000000e+00, %40
  %54 = tail call double @llvm.fma.f64(double %53, double %52, double 1.000000e+00) #6
  %55 = fmul double %52, %54
  %56 = fmul double %52, %44
  %57 = fsub double -0.000000e+00, %56
  %58 = tail call double @llvm.fma.f64(double %44, double %52, double %57) #6
  %59 = tail call double @llvm.fma.f64(double %51, double %52, double %58) #6
  %60 = tail call double @llvm.fma.f64(double %44, double %55, double %59) #6
  %61 = fmul double %56, 5.000000e-01
  %62 = fmul double %60, 5.000000e-01
  %63 = fmul double %12, %61
  %64 = fsub double -0.000000e+00, %63
  %65 = tail call double @llvm.fma.f64(double %61, double %12, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %62, double %12, double %65) #6
  %67 = fadd double %63, %66
  %68 = fcmp ord double %67, 0.000000e+00
  %69 = select i1 %68, double %67, double 0x7FF0000000000000
  %70 = fcmp une double %10, 0.000000e+00
  %71 = select i1 %70, double %69, double %12
  %72 = fcmp ord double %8, %5
  %73 = select i1 %72, double %71, double 0x7FF8000000000000
  %74 = fcmp une double %5, 0x7FF0000000000000
  %75 = fcmp une double %8, 0x7FF0000000000000
  %76 = and i1 %74, %75
  %77 = select i1 %76, double %73, double 0x7FF0000000000000
  ret double %77
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypotd1_u35purecfma(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fdiv double %10, %12
  %14 = tail call double @llvm.fma.f64(double %13, double %13, double 1.000000e+00) #6
  %15 = tail call double @sqrt(double %14) #6
  %16 = fmul double %12, %15
  %17 = fcmp une double %10, 0.000000e+00
  %18 = select i1 %17, double %16, double %12
  %19 = fcmp ord double %8, %5
  %20 = select i1 %19, double %18, double 0x7FF8000000000000
  %21 = fcmp une double %5, 0x7FF0000000000000
  %22 = fcmp une double %8, 0x7FF0000000000000
  %23 = and i1 %21, %22
  %24 = select i1 %23, double %20, double 0x7FF0000000000000
  ret double %24
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_fmodd1_purecfma(double, double) local_unnamed_addr #1 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 0x10000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = select i1 %9, double %5, double %10
  %12 = fmul double %8, 0x4350000000000000
  %13 = select i1 %9, double %8, double %12
  %14 = fdiv double 1.000000e+00, %13
  %15 = bitcast double %14 to i64
  %16 = add i64 %15, -1
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %14, 0.000000e+00
  %19 = select i1 %18, double %17, double 0.000000e+00
  %20 = fmul double %13, 3.000000e+00
  %21 = fadd double %13, %13
  %22 = fsub double -0.000000e+00, %13
  br label %23

; <label>:23:                                     ; preds = %23, %2
  %24 = phi double [ 0.000000e+00, %2 ], [ %54, %23 ]
  %25 = phi double [ %11, %2 ], [ %52, %23 ]
  %26 = phi i32 [ 0, %2 ], [ %56, %23 ]
  %27 = bitcast double %25 to i64
  %28 = add i64 %27, -1
  %29 = bitcast i64 %28 to double
  %30 = fcmp une double %25, 0.000000e+00
  %31 = select i1 %30, double %29, double 0.000000e+00
  %32 = fmul double %19, %31
  %33 = tail call double @llvm.trunc.f64(double %32) #6
  %34 = fcmp ogt double %20, %25
  %35 = fcmp oge double %25, %13
  %36 = and i1 %35, %34
  %37 = select i1 %36, double 2.000000e+00, double %33
  %38 = fcmp ogt double %21, %25
  %39 = and i1 %35, %38
  %40 = select i1 %39, double 1.000000e+00, double %37
  %41 = fmul double %40, %22
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.fma.f64(double %40, double %22, double %42) #6
  %44 = fadd double %25, %41
  %45 = fsub double %44, %25
  %46 = fsub double %44, %45
  %47 = fsub double %25, %46
  %48 = fsub double %41, %45
  %49 = fadd double %48, %47
  %50 = fadd double %24, %43
  %51 = fadd double %50, %49
  %52 = fadd double %44, %51
  %53 = fsub double %44, %52
  %54 = fadd double %51, %53
  %55 = fcmp uge double %52, %13
  %56 = add nuw nsw i32 %26, 1
  %57 = icmp ult i32 %56, 21
  %58 = and i1 %55, %57
  br i1 %58, label %23, label %59

; <label>:59:                                     ; preds = %23
  %60 = select i1 %9, double 1.000000e+00, double 0x3C90000000000000
  %61 = fmul double %60, %52
  %62 = fadd double %52, %54
  %63 = fcmp une double %62, %13
  %64 = bitcast double %61 to i64
  %65 = select i1 %63, i64 %64, i64 0
  %66 = and i64 %3, -9223372036854775808
  %67 = xor i64 %65, %66
  %68 = bitcast i64 %67 to double
  %69 = fcmp uge double %11, %13
  %70 = select i1 %69, double %68, double %0
  %71 = fcmp une double %13, 0.000000e+00
  %72 = select i1 %71, double %70, double 0x7FF8000000000000
  ret double %72
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_remainderd1_purecfma(double, double) local_unnamed_addr #1 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 0x20000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = select i1 %9, double %5, double %10
  %12 = fmul double %8, 0x4350000000000000
  %13 = select i1 %9, double %8, double %12
  %14 = select i1 %9, double 1.000000e+00, double 0x3C90000000000000
  %15 = fdiv double 1.000000e+00, %13
  %16 = fmul double %13, 1.500000e+00
  %17 = fmul double %13, 5.000000e-01
  %18 = fsub double -0.000000e+00, %13
  br label %19

; <label>:19:                                     ; preds = %2, %38
  %20 = phi double [ 0.000000e+00, %2 ], [ %66, %38 ]
  %21 = phi double [ %11, %2 ], [ %64, %38 ]
  %22 = phi i32 [ 0, %2 ], [ %52, %38 ]
  %23 = phi i32 [ 0, %2 ], [ %67, %38 ]
  %24 = fmul double %15, %21
  %25 = tail call double @llvm.rint.f64(double %24) #6
  %26 = bitcast double %21 to i64
  %27 = and i64 %26, 9223372036854775807
  %28 = bitcast i64 %27 to double
  %29 = fcmp ule double %16, %28
  %30 = select i1 %29, double %25, double 1.000000e+00
  %31 = fcmp ule double %17, %28
  %32 = fcmp une double %17, %28
  %33 = icmp eq i32 %22, -1
  %34 = or i1 %33, %32
  %35 = and i1 %31, %34
  %36 = select i1 %35, double %30, double 0.000000e+00
  %37 = fcmp une double %36, 0.000000e+00
  br i1 %37, label %38, label %69

; <label>:38:                                     ; preds = %19
  %39 = fmul double %36, %18
  %40 = fcmp une double %39, 0x7FF0000000000000
  %41 = fcmp une double %39, 0xFFF0000000000000
  %42 = and i64 %26, -9223372036854775808
  %43 = xor i64 %42, -4616189618054758400
  %44 = bitcast i64 %43 to double
  %45 = fadd double %36, %44
  %46 = and i1 %41, %40
  %47 = select i1 %46, double %36, double %45
  %48 = fmul double %47, 5.000000e-01
  %49 = tail call double @llvm.trunc.f64(double %48) #6
  %50 = fcmp une double %49, %48
  %51 = sext i1 %50 to i32
  %52 = xor i32 %22, %51
  %53 = fmul double %47, %18
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %47, double %18, double %54) #6
  %56 = fadd double %21, %53
  %57 = fsub double %56, %21
  %58 = fsub double %56, %57
  %59 = fsub double %21, %58
  %60 = fsub double %53, %57
  %61 = fadd double %60, %59
  %62 = fadd double %20, %55
  %63 = fadd double %62, %61
  %64 = fadd double %56, %63
  %65 = fsub double %56, %64
  %66 = fadd double %63, %65
  %67 = add nuw nsw i32 %23, 1
  %68 = icmp ult i32 %67, 21
  br i1 %68, label %19, label %69

; <label>:69:                                     ; preds = %19, %38
  %70 = phi double [ %21, %19 ], [ %64, %38 ]
  %71 = fmul double %14, %70
  %72 = bitcast double %71 to i64
  %73 = and i64 %3, -9223372036854775808
  %74 = xor i64 %73, %72
  %75 = bitcast i64 %74 to double
  %76 = fcmp une double %1, 0x7FF0000000000000
  %77 = fcmp une double %1, 0xFFF0000000000000
  %78 = fcmp une double %0, 0x7FF0000000000000
  %79 = fcmp une double %0, 0xFFF0000000000000
  %80 = and i1 %79, %78
  %81 = select i1 %80, double %0, double 0x7FF8000000000000
  %82 = and i1 %77, %76
  %83 = select i1 %82, double %75, double %81
  %84 = fcmp une double %13, 0.000000e+00
  %85 = select i1 %84, double %83, double 0x7FF8000000000000
  ret double %85
}

; Function Attrs: nounwind uwtable
define double @Sleef_tgammad1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 8
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = fadd double %5, %7
  %9 = fmul double %8, 0x3FF71547652B82FE
  %10 = tail call double @llvm.rint.f64(double %9) #6
  %11 = fptosi double %10 to i32
  %12 = fmul double %10, 0xBFE62E42FEFA3000
  %13 = fadd double %5, %12
  %14 = fsub double %13, %5
  %15 = fsub double %13, %14
  %16 = fsub double %5, %15
  %17 = fsub double %12, %14
  %18 = fadd double %17, %16
  %19 = fadd double %7, %18
  %20 = fmul double %10, 0xBD53DE6AF278ECE6
  %21 = fadd double %20, %13
  %22 = fsub double %21, %13
  %23 = fsub double %21, %22
  %24 = fsub double %13, %23
  %25 = fsub double %20, %22
  %26 = fadd double %25, %24
  %27 = fadd double %26, %19
  %28 = fmul double %21, %21
  %29 = fadd double %21, %21
  %30 = fsub double -0.000000e+00, %28
  %31 = tail call double @llvm.fma.f64(double %21, double %21, double %30) #6
  %32 = tail call double @llvm.fma.f64(double %29, double %27, double %31) #6
  %33 = fmul double %28, %28
  %34 = fadd double %28, %28
  %35 = fsub double -0.000000e+00, %33
  %36 = tail call double @llvm.fma.f64(double %28, double %28, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %34, double %32, double %36) #6
  %38 = fmul double %33, %33
  %39 = tail call double @llvm.fma.f64(double %21, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %40 = tail call double @llvm.fma.f64(double %21, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %41 = tail call double @llvm.fma.f64(double %21, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %42 = tail call double @llvm.fma.f64(double %28, double %40, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %21, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %44 = tail call double @llvm.fma.f64(double %21, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %45 = tail call double @llvm.fma.f64(double %28, double %43, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %33, double %42, double %45) #6
  %47 = tail call double @llvm.fma.f64(double %38, double %39, double %46) #6
  %48 = fmul double %21, 0x3FC5555555555555
  %49 = fsub double -0.000000e+00, %48
  %50 = tail call double @llvm.fma.f64(double %21, double 0x3FC5555555555555, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %27, double 0x3FC5555555555555, double %50) #6
  %52 = fadd double %48, 5.000000e-01
  %53 = fsub double 5.000000e-01, %52
  %54 = fadd double %48, %53
  %55 = fadd double %54, %51
  %56 = fmul double %21, %52
  %57 = fsub double -0.000000e+00, %56
  %58 = tail call double @llvm.fma.f64(double %52, double %21, double %57) #6
  %59 = tail call double @llvm.fma.f64(double %55, double %21, double %58) #6
  %60 = tail call double @llvm.fma.f64(double %52, double %27, double %59) #6
  %61 = fadd double %56, 1.000000e+00
  %62 = fsub double 1.000000e+00, %61
  %63 = fadd double %56, %62
  %64 = fadd double %63, %60
  %65 = fmul double %21, %61
  %66 = fsub double -0.000000e+00, %65
  %67 = tail call double @llvm.fma.f64(double %61, double %21, double %66) #6
  %68 = tail call double @llvm.fma.f64(double %64, double %21, double %67) #6
  %69 = tail call double @llvm.fma.f64(double %61, double %27, double %68) #6
  %70 = fadd double %65, 1.000000e+00
  %71 = fsub double 1.000000e+00, %70
  %72 = fadd double %65, %71
  %73 = fadd double %72, %69
  %74 = fmul double %33, %47
  %75 = fsub double -0.000000e+00, %74
  %76 = tail call double @llvm.fma.f64(double %33, double %47, double %75) #6
  %77 = tail call double @llvm.fma.f64(double %37, double %47, double %76) #6
  %78 = fadd double %74, %70
  %79 = fsub double %70, %78
  %80 = fadd double %74, %79
  %81 = fadd double %80, %73
  %82 = fadd double %77, %81
  %83 = ashr i32 %11, 1
  %84 = add nsw i32 %83, 1023
  %85 = zext i32 %84 to i64
  %86 = shl i64 %85, 52
  %87 = bitcast i64 %86 to double
  %88 = fmul double %78, %87
  %89 = add i32 %11, 1023
  %90 = sub i32 %89, %83
  %91 = zext i32 %90 to i64
  %92 = shl i64 %91, 52
  %93 = bitcast i64 %92 to double
  %94 = fmul double %88, %93
  %95 = fmul double %82, %87
  %96 = fmul double %95, %93
  %97 = fcmp olt double %5, -1.000000e+03
  %98 = bitcast double %94 to i64
  %99 = select i1 %97, i64 4294967295, i64 0
  %100 = shl nuw i64 %99, 32
  %101 = or i64 %100, %99
  %102 = xor i64 %101, -1
  %103 = and i64 %98, %102
  %104 = bitcast i64 %103 to double
  %105 = bitcast double %96 to i64
  %106 = and i64 %105, %102
  %107 = bitcast i64 %106 to double
  %108 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %109 = load double, double* %108, align 8
  %110 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %111 = load double, double* %110, align 8
  %112 = fmul double %109, %104
  %113 = fsub double -0.000000e+00, %112
  %114 = tail call double @llvm.fma.f64(double %104, double %109, double %113) #6
  %115 = tail call double @llvm.fma.f64(double %107, double %109, double %114) #6
  %116 = tail call double @llvm.fma.f64(double %104, double %111, double %115) #6
  %117 = fadd double %112, %116
  %118 = fcmp oeq double %0, 0xFFF0000000000000
  %119 = fcmp olt double %0, 0.000000e+00
  %120 = tail call double @llvm.trunc.f64(double %0) #6
  %121 = fcmp oeq double %120, %0
  %122 = and i1 %119, %121
  %123 = or i1 %118, %122
  %124 = fcmp une double %0, 0x7FF0000000000000
  %125 = fcmp une double %0, 0xFFF0000000000000
  %126 = fcmp ord double %0, 0.000000e+00
  %127 = and i1 %125, %124
  %128 = and i1 %126, %127
  %129 = and i1 %119, %128
  %130 = fcmp uno double %117, 0.000000e+00
  %131 = and i1 %129, %130
  %132 = or i1 %123, %131
  %133 = select i1 %132, double 0x7FF8000000000000, double %117
  %134 = fcmp oeq double %0, 0x7FF0000000000000
  %135 = or i1 %134, %128
  %136 = fcmp oge double %0, 0x8010000000000000
  %137 = and i1 %136, %135
  %138 = fcmp oeq double %0, 0.000000e+00
  %139 = fcmp ogt double %0, 2.000000e+02
  %140 = or i1 %139, %138
  %141 = fcmp uno double %133, 0.000000e+00
  %142 = or i1 %140, %141
  %143 = and i1 %137, %142
  %144 = bitcast double %0 to i64
  %145 = and i64 %144, -9223372036854775808
  %146 = or i64 %145, 9218868437227405312
  %147 = bitcast i64 %146 to double
  %148 = select i1 %143, double %147, double %133
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #6
  ret double %148
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, double) unnamed_addr #3 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp uge double %5, 1.000000e-306
  %7 = fcmp olt double %1, 5.000000e-01
  %8 = fsub double -0.000000e+00, %1
  %9 = fsub double 1.000000e+00, %1
  %10 = fadd double %9, -1.000000e+00
  %11 = fsub double %9, %10
  %12 = fsub double 1.000000e+00, %11
  %13 = fsub double %8, %10
  %14 = fadd double %13, %12
  %15 = select i1 %7, double %9, double %1
  %16 = select i1 %6, double %15, double 0.000000e+00
  %17 = and i1 %7, %6
  %18 = select i1 %17, double %14, double 0.000000e+00
  %19 = fcmp ult double %16, 5.000000e-01
  %20 = fcmp ugt double %16, 1.100000e+00
  %21 = fcmp oge double %16, 2.300000e+00
  %22 = fadd double %16, 1.000000e+00
  %23 = fsub double %22, %16
  %24 = fsub double %22, %23
  %25 = fsub double %16, %24
  %26 = fsub double 1.000000e+00, %23
  %27 = fadd double %26, %25
  %28 = fadd double %18, %27
  %29 = fmul double %16, %22
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %22, double %16, double %30) #6
  %32 = tail call double @llvm.fma.f64(double %28, double %16, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %22, double %18, double %32) #6
  %34 = fadd double %29, %33
  %35 = fsub double %29, %34
  %36 = fadd double %33, %35
  %37 = fadd double %16, 2.000000e+00
  %38 = fsub double %37, %16
  %39 = fsub double %37, %38
  %40 = fsub double %16, %39
  %41 = fsub double 2.000000e+00, %38
  %42 = fadd double %41, %40
  %43 = fadd double %18, %42
  %44 = fmul double %37, %34
  %45 = fsub double -0.000000e+00, %44
  %46 = tail call double @llvm.fma.f64(double %37, double %34, double %45) #6
  %47 = tail call double @llvm.fma.f64(double %43, double %34, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %37, double %36, double %47) #6
  %49 = fadd double %44, %48
  %50 = fsub double %44, %49
  %51 = fadd double %48, %50
  %52 = fadd double %16, 3.000000e+00
  %53 = fsub double %52, %16
  %54 = fsub double %52, %53
  %55 = fsub double %16, %54
  %56 = fsub double 3.000000e+00, %53
  %57 = fadd double %56, %55
  %58 = fadd double %18, %57
  %59 = fmul double %52, %49
  %60 = fsub double -0.000000e+00, %59
  %61 = tail call double @llvm.fma.f64(double %52, double %49, double %60) #6
  %62 = tail call double @llvm.fma.f64(double %58, double %49, double %61) #6
  %63 = tail call double @llvm.fma.f64(double %52, double %51, double %62) #6
  %64 = fadd double %59, %63
  %65 = fsub double %59, %64
  %66 = fadd double %63, %65
  %67 = fadd double %16, 4.000000e+00
  %68 = fsub double %67, %16
  %69 = fsub double %67, %68
  %70 = fsub double %16, %69
  %71 = fsub double 4.000000e+00, %68
  %72 = fadd double %71, %70
  %73 = fadd double %18, %72
  %74 = fmul double %67, %64
  %75 = fsub double -0.000000e+00, %74
  %76 = tail call double @llvm.fma.f64(double %67, double %64, double %75) #6
  %77 = tail call double @llvm.fma.f64(double %73, double %64, double %76) #6
  %78 = tail call double @llvm.fma.f64(double %67, double %66, double %77) #6
  %79 = fadd double %74, %78
  %80 = fsub double %74, %79
  %81 = fadd double %78, %80
  %82 = fcmp ole double %16, 7.000000e+00
  %83 = and i1 %82, %21
  %84 = select i1 %83, double %79, double 1.000000e+00
  %85 = select i1 %83, double %81, double 0.000000e+00
  %86 = fadd double %16, 5.000000e+00
  %87 = fsub double %86, %16
  %88 = fsub double %86, %87
  %89 = fsub double %16, %88
  %90 = fsub double 5.000000e+00, %87
  %91 = fadd double %90, %89
  %92 = fadd double %18, %91
  %93 = select i1 %83, double %86, double %16
  %94 = select i1 %83, double %92, double %18
  %95 = fdiv double 1.000000e+00, %93
  %96 = or i1 %19, %20
  %97 = select i1 %96, double -2.000000e+00, double -1.000000e+00
  %98 = fadd double %93, %97
  %99 = fsub double %98, %93
  %100 = fsub double %98, %99
  %101 = fsub double %93, %100
  %102 = fsub double %97, %99
  %103 = fadd double %102, %101
  %104 = fadd double %94, %103
  %105 = fadd double %98, %104
  %106 = select i1 %21, double %95, double %105
  %107 = select i1 %96, double 0x3E72FDC6CB0D558F, double 0x403D7AAABC7A3EA1
  %108 = select i1 %21, double 0xC06399A52C414C0D, double %107
  %109 = select i1 %96, double 0x3E9AE7D44E1AB8F6, double 0x406004ABC79048B9
  %110 = select i1 %21, double 0x3FF1EED0A9756022, double %109
  %111 = tail call double @llvm.fma.f64(double %108, double %106, double %110) #6
  %112 = select i1 %96, double 0x3EB1734224875A66, double 0x40705C120870277A
  %113 = select i1 %21, double 0x402ACBC4BFE43E00, double %112
  %114 = tail call double @llvm.fma.f64(double %111, double %106, double %113) #6
  %115 = select i1 %96, double 0x3EB94E4F6E12FEE0, double 0x40748B3C8FCAD7FF
  %116 = select i1 %21, double 0xBFBDD5FA0E771B94, double %115
  %117 = tail call double @llvm.fma.f64(double %114, double %106, double %116) #6
  %118 = select i1 %96, double 0x3EB59C884A045AF0, double 0x40719D088C23DF05
  %119 = select i1 %21, double 0xBFF644D13921C967, double %118
  %120 = tail call double @llvm.fma.f64(double %117, double %106, double %119) #6
  %121 = select i1 %96, double 0x3E9FD66B0AC39DFF, double 0x40659BBECDBF523B
  %122 = select i1 %21, double 0x3F8ED5BD48E4F389, double %121
  %123 = tail call double @llvm.fma.f64(double %120, double %106, double %122) #6
  %124 = select i1 %96, double 0xBE71986F7AC19AC9, double 0x40535F30DE19A3FA
  %125 = select i1 %21, double 0x3FC6FB2BA98C8BC4, double %124
  %126 = tail call double @llvm.fma.f64(double %123, double %106, double %125) #6
  %127 = select i1 %96, double 0xBE956718120CF4B7, double 0x403920E9BAC7B07E
  %128 = select i1 %21, double 0xBF645497F334CD1D, double %127
  %129 = tail call double @llvm.fma.f64(double %126, double %106, double %128) #6
  %130 = select i1 %96, double 0x3E823D16D999C674, double 0x40171131F32ACF74
  %131 = select i1 %21, double 0xBF9E3C8E8BED86BB, double %130
  %132 = tail call double @llvm.fma.f64(double %129, double %106, double %131) #6
  %133 = select i1 %96, double 0xBE9D26D12E073976, double 0x3FE743CF466BEB1B
  %134 = select i1 %21, double 0x3F41B33B019B3E6F, double %133
  %135 = tail call double @llvm.fma.f64(double %132, double %106, double %134) #6
  %136 = select i1 %96, double 0x3EB050C384661C46, double 0x3FB57EDE06D746AF
  %137 = select i1 %21, double 0x3F7A3A699F4A401B, double %136
  %138 = tail call double @llvm.fma.f64(double %135, double %106, double %137) #6
  %139 = select i1 %96, double 0xBEC1162DF3C28D5A, double 0xBFB50586EF5B83AC
  %140 = select i1 %21, double 0xBF254D241144693F, double %139
  %141 = tail call double @llvm.fma.f64(double %138, double %106, double %140) #6
  %142 = select i1 %96, double 0x3ED257DCE81F6BB4, double 0x3FB17B57DDB9E32F
  %143 = select i1 %21, double 0xBF5F5DBCAF756CDE, double %142
  %144 = tail call double @llvm.fma.f64(double %141, double %106, double %143) #6
  %145 = select i1 %96, double 0xBEE3CC0905ECA8BE, double 0xBFB3BE73A742EECE
  %146 = select i1 %21, double 0x3F12E31F9B7913EA, double %145
  %147 = tail call double @llvm.fma.f64(double %144, double %106, double %146) #6
  %148 = select i1 %96, double 0x3EF580E0E2726AC9, double 0x3FB5580F0BB1F8CA
  %149 = select i1 %21, double 0x3F4B8239C670E690, double %148
  %150 = tail call double @llvm.fma.f64(double %147, double %106, double %149) #6
  %151 = select i1 %96, double 0xBF078DE48A7816D9, double 0xBFB74879E96382CA
  %152 = select i1 %21, double 0xBF0B1D75D3346711, double %151
  %153 = tail call double @llvm.fma.f64(double %150, double %106, double %152) #6
  %154 = select i1 %96, double 0x3F1A127B0D3DBB7D, double 0x3FB9A0212305C3B9
  %155 = select i1 %21, double 0xBF436773BDB97B48, double %154
  %156 = tail call double @llvm.fma.f64(double %153, double %106, double %155) #6
  %157 = select i1 %96, double 0xBF2D3FD4CA9D6B1F, double 0xBFBC80675DF4ED19
  %158 = select i1 %21, double 0x3F1247604839C038, double %157
  %159 = tail call double @llvm.fma.f64(double %156, double %106, double %158) #6
  %160 = select i1 %96, double 0x3F40B36AF85EF785, double 0x3FC010B3663D08D8
  %161 = select i1 %21, double 0x3F49B0FF6874F2C4, double %160
  %162 = tail call double @llvm.fma.f64(double %159, double %106, double %161) #6
  %163 = select i1 %96, double 0xBF538AC5C2BD10CA, double 0xBFC2703A1DD72363
  %164 = select i1 %21, double 0xBF2E13CE465FA859, double %163
  %165 = tail call double @llvm.fma.f64(double %162, double %106, double %164) #6
  %166 = select i1 %96, double 0x3F67ADD6EADB7260, double 0x3FC5B40CB1047E2E
  %167 = select i1 %21, double 0xBF65F7268EDAB4C8, double %166
  %168 = tail call double @llvm.fma.f64(double %165, double %106, double %167) #6
  %169 = select i1 %96, double 0xBF7E404FC218F817, double 0xBFCA8B9C17AA3C08
  %170 = select i1 %21, double 0x3F6C71C71C71C71C, double %169
  %171 = tail call double @llvm.fma.f64(double %168, double %106, double %170) #6
  %172 = select i1 %96, double 0x3F951322AC7D8485, double 0x3FD151322AC7D813
  %173 = select i1 %21, double 0x3FB5555555555555, double %172
  %174 = tail call double @llvm.fma.f64(double %171, double %106, double %173) #6
  %175 = fadd double %93, -5.000000e-01
  %176 = fsub double %175, %93
  %177 = fsub double %175, %176
  %178 = fsub double %93, %177
  %179 = fsub double -5.000000e-01, %176
  %180 = fadd double %179, %178
  %181 = fadd double %94, %180
  %182 = fmul double %93, 0x3FF5555555555555
  %183 = fcmp uge double %182, 0x2D30000000000000
  %184 = fmul double %182, 0x52B0000000000000
  %185 = select i1 %183, double %182, double %184
  %186 = bitcast double %185 to i64
  %187 = lshr i64 %186, 52
  %188 = trunc i64 %187 to i32
  %189 = select i1 %183, i32 1023, i32 1323
  %190 = sub nsw i32 %188, %189
  %191 = sub nsw i32 0, %190
  %192 = ashr i32 %191, 1
  %193 = add nsw i32 %192, 1023
  %194 = zext i32 %193 to i64
  %195 = shl i64 %194, 52
  %196 = bitcast i64 %195 to double
  %197 = fmul double %93, %196
  %198 = sub nsw i32 1023, %190
  %199 = sub nsw i32 %198, %192
  %200 = zext i32 %199 to i64
  %201 = shl i64 %200, 52
  %202 = bitcast i64 %201 to double
  %203 = fmul double %197, %202
  %204 = fmul double %94, %196
  %205 = fmul double %204, %202
  %206 = fadd double %203, -1.000000e+00
  %207 = fsub double %206, %203
  %208 = fsub double %206, %207
  %209 = fsub double %203, %208
  %210 = fsub double -1.000000e+00, %207
  %211 = fadd double %210, %209
  %212 = fadd double %205, %211
  %213 = fadd double %203, 1.000000e+00
  %214 = fsub double %213, %203
  %215 = fsub double %213, %214
  %216 = fsub double %203, %215
  %217 = fsub double 1.000000e+00, %214
  %218 = fadd double %217, %216
  %219 = fadd double %205, %218
  %220 = fdiv double 1.000000e+00, %213
  %221 = fmul double %206, %220
  %222 = fsub double -0.000000e+00, %221
  %223 = tail call double @llvm.fma.f64(double %220, double %206, double %222) #6
  %224 = fsub double -0.000000e+00, %213
  %225 = tail call double @llvm.fma.f64(double %224, double %220, double 1.000000e+00) #6
  %226 = fsub double -0.000000e+00, %219
  %227 = tail call double @llvm.fma.f64(double %226, double %220, double %225) #6
  %228 = tail call double @llvm.fma.f64(double %212, double %220, double %223) #6
  %229 = tail call double @llvm.fma.f64(double %221, double %227, double %228) #6
  %230 = fmul double %221, %221
  %231 = fadd double %221, %221
  %232 = fsub double -0.000000e+00, %230
  %233 = tail call double @llvm.fma.f64(double %221, double %221, double %232) #6
  %234 = tail call double @llvm.fma.f64(double %231, double %229, double %233) #6
  %235 = fmul double %230, %230
  %236 = fmul double %235, %235
  %237 = tail call double @llvm.fma.f64(double %230, double 0x3FC0DB8A525B4A6B, double 0x3FC3B3759FB81971) #6
  %238 = tail call double @llvm.fma.f64(double %235, double 0x3FC1BDC9AD06D760, double %237) #6
  %239 = tail call double @llvm.fma.f64(double %230, double 0x3FC745C38C19C82A, double 0x3FCC71C750354F90) #6
  %240 = tail call double @llvm.fma.f64(double %230, double 0x3FD2492492114D0C, double 0x3FD999999999D9EB) #6
  %241 = tail call double @llvm.fma.f64(double %235, double %239, double %240) #6
  %242 = tail call double @llvm.fma.f64(double %236, double %238, double %241) #6
  %243 = tail call double @llvm.fma.f64(double %242, double %230, double 0x3FE5555555555545) #6
  %244 = sitofp i32 %190 to double
  %245 = fmul double %244, 0x3FE62E42FEFA39EF
  %246 = fsub double -0.000000e+00, %245
  %247 = tail call double @llvm.fma.f64(double %244, double 0x3FE62E42FEFA39EF, double %246) #6
  %248 = tail call double @llvm.fma.f64(double %244, double 0x3C7ABC9E3B39803F, double %247) #6
  %249 = fmul double %221, 2.000000e+00
  %250 = fmul double %229, 2.000000e+00
  %251 = fadd double %245, %249
  %252 = fsub double %245, %251
  %253 = fadd double %249, %252
  %254 = fadd double %248, %253
  %255 = fadd double %254, %250
  %256 = fmul double %221, %230
  %257 = fsub double -0.000000e+00, %256
  %258 = tail call double @llvm.fma.f64(double %230, double %221, double %257) #6
  %259 = tail call double @llvm.fma.f64(double %234, double %221, double %258) #6
  %260 = tail call double @llvm.fma.f64(double %230, double %229, double %259) #6
  %261 = fmul double %256, %243
  %262 = fsub double -0.000000e+00, %261
  %263 = tail call double @llvm.fma.f64(double %256, double %243, double %262) #6
  %264 = tail call double @llvm.fma.f64(double %260, double %243, double %263) #6
  %265 = fadd double %251, %261
  %266 = fsub double %251, %265
  %267 = fadd double %261, %266
  %268 = fadd double %255, %267
  %269 = fadd double %264, %268
  %270 = fmul double %175, %265
  %271 = fsub double -0.000000e+00, %270
  %272 = tail call double @llvm.fma.f64(double %175, double %265, double %271) #6
  %273 = tail call double @llvm.fma.f64(double %181, double %265, double %272) #6
  %274 = tail call double @llvm.fma.f64(double %175, double %269, double %273) #6
  %275 = fsub double -0.000000e+00, %93
  %276 = fsub double %270, %93
  %277 = fsub double %276, %270
  %278 = fsub double %276, %277
  %279 = fsub double %270, %278
  %280 = fsub double %275, %277
  %281 = fadd double %280, %279
  %282 = fsub double %274, %94
  %283 = fadd double %282, %281
  %284 = fadd double %276, 0x3FED67F1C864BEB5
  %285 = fsub double %284, %276
  %286 = fsub double %284, %285
  %287 = fsub double %276, %286
  %288 = fsub double 0x3FED67F1C864BEB5, %285
  %289 = fadd double %288, %287
  %290 = fadd double %283, 0xBC865B5A1B7FF5DF
  %291 = fadd double %289, %290
  %292 = fmul double %106, %174
  %293 = fsub double -0.000000e+00, %292
  %294 = tail call double @llvm.fma.f64(double %174, double %106, double %293) #6
  %295 = select i1 %96, double 0xBFB13E001A557607, double 0xBFD9A4D55BEAB2D8
  %296 = fadd double %295, %292
  %297 = fsub double %296, %292
  %298 = fsub double %296, %297
  %299 = fsub double %292, %298
  %300 = fsub double %295, %297
  %301 = fadd double %300, %299
  %302 = fadd double %294, %301
  %303 = fmul double %106, %296
  %304 = fsub double -0.000000e+00, %303
  %305 = tail call double @llvm.fma.f64(double %296, double %106, double %304) #6
  %306 = tail call double @llvm.fma.f64(double %302, double %106, double %305) #6
  %307 = select i1 %96, double 0x3FD4A34CC4A60FA6, double 0x3FEA51A6625307D3
  %308 = fadd double %307, %303
  %309 = fsub double %308, %303
  %310 = fsub double %308, %309
  %311 = fsub double %303, %310
  %312 = fsub double %307, %309
  %313 = fadd double %312, %311
  %314 = fadd double %313, %306
  %315 = fmul double %106, %308
  %316 = fsub double -0.000000e+00, %315
  %317 = tail call double @llvm.fma.f64(double %308, double %106, double %316) #6
  %318 = tail call double @llvm.fma.f64(double %314, double %106, double %317) #6
  %319 = select i1 %96, double 0x3FDB0EE6072093CE, double 0xBFE2788CFC6FB619
  %320 = fadd double %319, %315
  %321 = fsub double %320, %315
  %322 = fsub double %320, %321
  %323 = fsub double %315, %322
  %324 = fsub double %319, %321
  %325 = fadd double %324, %323
  %326 = fadd double %325, %318
  %327 = fmul double %106, %320
  %328 = fsub double -0.000000e+00, %327
  %329 = tail call double @llvm.fma.f64(double %320, double %106, double %328) #6
  %330 = tail call double @llvm.fma.f64(double %326, double %106, double %329) #6
  %331 = select i1 %21, double %284, double %327
  %332 = select i1 %21, double %291, double %330
  %333 = fadd double %292, 1.000000e+00
  %334 = fsub double %333, %292
  %335 = fsub double %333, %334
  %336 = fsub double %292, %335
  %337 = fsub double 1.000000e+00, %334
  %338 = fadd double %337, %336
  %339 = fadd double %294, %338
  %340 = select i1 %21, double %333, double 1.000000e+00
  %341 = select i1 %21, double %339, double 0.000000e+00
  %342 = fsub double -0.000000e+00, %331
  %343 = fsub double 0x3FF250D048E7A1BD, %331
  %344 = fadd double %343, 0xBFF250D048E7A1BD
  %345 = fsub double %343, %344
  %346 = fsub double 0x3FF250D048E7A1BD, %345
  %347 = fsub double %342, %344
  %348 = fadd double %347, %346
  %349 = fsub double 0x3C67ABF2AD8D5088, %332
  %350 = fadd double %348, %349
  %351 = select i1 %7, double %343, double %331
  %352 = select i1 %7, double %350, double %332
  %353 = select i1 %6, double %351, double 0x4054CB5ECF0A9650
  %354 = select i1 %6, double %352, double 0x3CF0886A2BC2F41E
  %355 = select i1 %7, double %84, double %340
  %356 = select i1 %7, double %85, double %341
  %357 = select i1 %6, double %355, double 1.000000e+00
  %358 = select i1 %6, double %356, double 0.000000e+00
  br i1 %7, label %359, label %447

; <label>:359:                                    ; preds = %2
  %360 = fmul double %1, 0x3E30000000000000
  %361 = tail call double @llvm.trunc.f64(double %360) #6
  %362 = fptosi double %361 to i32
  %363 = sitofp i32 %362 to double
  %364 = fmul double %363, 0x41B0000000000000
  %365 = fsub double %1, %364
  %366 = fmul double %365, 4.000000e+00
  %367 = tail call double @llvm.trunc.f64(double %366) #6
  %368 = fptosi double %367 to i32
  %369 = lshr i32 %368, 31
  %370 = xor i32 %369, 1
  %371 = add nsw i32 %370, %368
  %372 = and i32 %371, -2
  %373 = sitofp i32 %372 to double
  %374 = fsub double %366, %373
  %375 = fmul double %374, %374
  %376 = fsub double -0.000000e+00, %375
  %377 = tail call double @llvm.fma.f64(double %374, double %374, double %376) #6
  %378 = and i32 %371, 2
  %379 = icmp eq i32 %378, 0
  %380 = select i1 %379, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %381 = select i1 %379, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %382 = tail call double @llvm.fma.f64(double %380, double %375, double %381) #6
  %383 = select i1 %379, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %384 = tail call double @llvm.fma.f64(double %382, double %375, double %383) #6
  %385 = select i1 %379, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %386 = tail call double @llvm.fma.f64(double %384, double %375, double %385) #6
  %387 = select i1 %379, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %388 = tail call double @llvm.fma.f64(double %386, double %375, double %387) #6
  %389 = select i1 %379, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %390 = tail call double @llvm.fma.f64(double %388, double %375, double %389) #6
  %391 = fmul double %375, %390
  %392 = select i1 %379, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %393 = select i1 %379, double 0x3C50B00000000000, double 0xBC33500000000000
  %394 = fadd double %392, %391
  %395 = fsub double %394, %391
  %396 = fsub double %394, %395
  %397 = fsub double %391, %396
  %398 = fsub double %392, %395
  %399 = fadd double %398, %397
  %400 = fadd double %393, %399
  %401 = fmul double %375, %394
  %402 = fsub double -0.000000e+00, %401
  %403 = tail call double @llvm.fma.f64(double %375, double %394, double %402) #6
  %404 = tail call double @llvm.fma.f64(double %377, double %394, double %403) #6
  %405 = tail call double @llvm.fma.f64(double %375, double %400, double %404) #6
  %406 = select i1 %379, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %407 = select i1 %379, double 0x3C81A80000000000, double 0xBC76900000000000
  %408 = fadd double %406, %401
  %409 = fsub double %408, %401
  %410 = fsub double %408, %409
  %411 = fsub double %401, %410
  %412 = fsub double %406, %409
  %413 = fadd double %412, %411
  %414 = fadd double %407, %405
  %415 = fadd double %413, %414
  %416 = select i1 %379, double %374, double %375
  %417 = select i1 %379, double 0.000000e+00, double %377
  %418 = fmul double %416, %408
  %419 = fsub double -0.000000e+00, %418
  %420 = tail call double @llvm.fma.f64(double %408, double %416, double %419) #6
  %421 = tail call double @llvm.fma.f64(double %415, double %416, double %420) #6
  %422 = tail call double @llvm.fma.f64(double %408, double %417, double %421) #6
  %423 = fadd double %418, 1.000000e+00
  %424 = fsub double %423, %418
  %425 = fsub double %423, %424
  %426 = fsub double %418, %425
  %427 = fsub double 1.000000e+00, %424
  %428 = fadd double %427, %426
  %429 = fadd double %428, %422
  %430 = select i1 %379, double %418, double %423
  %431 = select i1 %379, double %422, double %429
  %432 = shl i32 %371, 29
  %433 = zext i32 %432 to i64
  %434 = shl nuw i64 %433, 32
  %435 = and i64 %434, -9223372036854775808
  %436 = bitcast double %430 to i64
  %437 = xor i64 %435, %436
  %438 = bitcast i64 %437 to double
  %439 = bitcast double %431 to i64
  %440 = xor i64 %435, %439
  %441 = bitcast i64 %440 to double
  %442 = fmul double %340, %438
  %443 = fsub double -0.000000e+00, %442
  %444 = tail call double @llvm.fma.f64(double %340, double %438, double %443) #6
  %445 = tail call double @llvm.fma.f64(double %341, double %438, double %444) #6
  %446 = tail call double @llvm.fma.f64(double %340, double %441, double %445) #6
  br label %447

; <label>:447:                                    ; preds = %2, %359
  %448 = phi double [ %93, %2 ], [ %442, %359 ]
  %449 = phi double [ %94, %2 ], [ %446, %359 ]
  %450 = fmul double %1, 0x4770000000000000
  %451 = select i1 %7, double %448, double %84
  %452 = select i1 %7, double %449, double %85
  %453 = select i1 %6, double %451, double %450
  %454 = fdiv double 1.000000e+00, %453
  %455 = fmul double %357, %454
  %456 = fsub double -0.000000e+00, %455
  %457 = tail call double @llvm.fma.f64(double %454, double %357, double %456) #6
  %458 = fsub double -0.000000e+00, %453
  %459 = tail call double @llvm.fma.f64(double %458, double %454, double 1.000000e+00) #6
  %460 = fsub double -0.000000e+00, %452
  %461 = select i1 %6, double %460, double -0.000000e+00
  %462 = tail call double @llvm.fma.f64(double %461, double %454, double %459) #6
  %463 = tail call double @llvm.fma.f64(double %358, double %454, double %457) #6
  %464 = tail call double @llvm.fma.f64(double %455, double %462, double %463) #6
  %465 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store double %353, double* %465, align 8
  %466 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store double %354, double* %466, align 8
  %467 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store double %455, double* %467, align 8
  %468 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store double %464, double* %468, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define double @Sleef_lgammad1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %5 = bitcast double* %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %6, 9223372036854775807
  %11 = bitcast i64 %10 to double
  %12 = and i64 %6, -9223372036854775808
  %13 = xor i64 %12, %9
  %14 = bitcast i64 %13 to double
  %15 = fmul double %11, 0x3FF5555555555555
  %16 = fcmp uge double %15, 0x2D30000000000000
  %17 = fmul double %15, 0x52B0000000000000
  %18 = select i1 %16, double %15, double %17
  %19 = bitcast double %18 to i64
  %20 = lshr i64 %19, 52
  %21 = trunc i64 %20 to i32
  %22 = select i1 %16, i32 1023, i32 1323
  %23 = sub nsw i32 %21, %22
  %24 = sub nsw i32 0, %23
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %25, 1023
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %11, %29
  %31 = sub nsw i32 1023, %23
  %32 = sub nsw i32 %31, %25
  %33 = zext i32 %32 to i64
  %34 = shl i64 %33, 52
  %35 = bitcast i64 %34 to double
  %36 = fmul double %30, %35
  %37 = fmul double %14, %29
  %38 = fmul double %37, %35
  %39 = fadd double %36, -1.000000e+00
  %40 = fsub double %39, %36
  %41 = fsub double %39, %40
  %42 = fsub double %36, %41
  %43 = fsub double -1.000000e+00, %40
  %44 = fadd double %43, %42
  %45 = fadd double %38, %44
  %46 = fadd double %36, 1.000000e+00
  %47 = fsub double %46, %36
  %48 = fsub double %46, %47
  %49 = fsub double %36, %48
  %50 = fsub double 1.000000e+00, %47
  %51 = fadd double %50, %49
  %52 = fadd double %38, %51
  %53 = fdiv double 1.000000e+00, %46
  %54 = fmul double %39, %53
  %55 = fsub double -0.000000e+00, %54
  %56 = tail call double @llvm.fma.f64(double %53, double %39, double %55) #6
  %57 = fsub double -0.000000e+00, %46
  %58 = tail call double @llvm.fma.f64(double %57, double %53, double 1.000000e+00) #6
  %59 = fsub double -0.000000e+00, %52
  %60 = tail call double @llvm.fma.f64(double %59, double %53, double %58) #6
  %61 = tail call double @llvm.fma.f64(double %45, double %53, double %56) #6
  %62 = tail call double @llvm.fma.f64(double %54, double %60, double %61) #6
  %63 = fmul double %54, %54
  %64 = fadd double %54, %54
  %65 = fsub double -0.000000e+00, %63
  %66 = tail call double @llvm.fma.f64(double %54, double %54, double %65) #6
  %67 = tail call double @llvm.fma.f64(double %64, double %62, double %66) #6
  %68 = fmul double %63, %63
  %69 = fmul double %68, %68
  %70 = tail call double @llvm.fma.f64(double %63, double 0x3FC0DB8A525B4A6B, double 0x3FC3B3759FB81971) #6
  %71 = tail call double @llvm.fma.f64(double %68, double 0x3FC1BDC9AD06D760, double %70) #6
  %72 = tail call double @llvm.fma.f64(double %63, double 0x3FC745C38C19C82A, double 0x3FCC71C750354F90) #6
  %73 = tail call double @llvm.fma.f64(double %63, double 0x3FD2492492114D0C, double 0x3FD999999999D9EB) #6
  %74 = tail call double @llvm.fma.f64(double %68, double %72, double %73) #6
  %75 = tail call double @llvm.fma.f64(double %69, double %71, double %74) #6
  %76 = tail call double @llvm.fma.f64(double %75, double %63, double 0x3FE5555555555545) #6
  %77 = sitofp i32 %23 to double
  %78 = fmul double %77, 0x3FE62E42FEFA39EF
  %79 = fsub double -0.000000e+00, %78
  %80 = tail call double @llvm.fma.f64(double %77, double 0x3FE62E42FEFA39EF, double %79) #6
  %81 = tail call double @llvm.fma.f64(double %77, double 0x3C7ABC9E3B39803F, double %80) #6
  %82 = fmul double %54, 2.000000e+00
  %83 = fmul double %62, 2.000000e+00
  %84 = fadd double %78, %82
  %85 = fsub double %78, %84
  %86 = fadd double %82, %85
  %87 = fadd double %81, %86
  %88 = fadd double %87, %83
  %89 = fmul double %54, %63
  %90 = fsub double -0.000000e+00, %89
  %91 = tail call double @llvm.fma.f64(double %63, double %54, double %90) #6
  %92 = tail call double @llvm.fma.f64(double %67, double %54, double %91) #6
  %93 = tail call double @llvm.fma.f64(double %63, double %62, double %92) #6
  %94 = fmul double %89, %76
  %95 = fsub double -0.000000e+00, %94
  %96 = tail call double @llvm.fma.f64(double %89, double %76, double %95) #6
  %97 = tail call double @llvm.fma.f64(double %93, double %76, double %96) #6
  %98 = fadd double %84, %94
  %99 = fsub double %84, %98
  %100 = fadd double %94, %99
  %101 = fadd double %88, %100
  %102 = fadd double %97, %101
  %103 = bitcast %struct.dd2* %2 to <2 x double>*
  %104 = load <2 x double>, <2 x double>* %103, align 16
  %105 = insertelement <2 x double> undef, double %98, i32 0
  %106 = insertelement <2 x double> %105, double %102, i32 1
  %107 = fadd <2 x double> %104, %106
  %108 = extractelement <2 x double> %107, i32 0
  %109 = extractelement <2 x double> %104, i32 0
  %110 = fsub double %108, %109
  %111 = fsub double %108, %110
  %112 = fsub double %109, %111
  %113 = fsub double %98, %110
  %114 = fadd double %113, %112
  %115 = extractelement <2 x double> %107, i32 1
  %116 = fadd double %115, %114
  %117 = fadd double %108, %116
  %118 = fcmp oeq double %0, 0x7FF0000000000000
  %119 = fcmp oeq double %0, 0xFFF0000000000000
  %120 = or i1 %118, %119
  %121 = fcmp ole double %0, 0.000000e+00
  %122 = tail call double @llvm.trunc.f64(double %0) #6
  %123 = fcmp oeq double %122, %0
  %124 = and i1 %121, %123
  %125 = fcmp une double %0, 0x7FF0000000000000
  %126 = fcmp une double %0, 0xFFF0000000000000
  %127 = fcmp ord double %0, 0.000000e+00
  %128 = and i1 %126, %125
  %129 = and i1 %127, %128
  %130 = fcmp uno double %117, 0.000000e+00
  %131 = and i1 %129, %130
  %132 = or i1 %124, %131
  %133 = or i1 %120, %132
  %134 = select i1 %133, double 0x7FF0000000000000, double %117
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #6
  ret double %134
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_erfd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.000000e+00
  %6 = fcmp uge double %4, 3.700000e+00
  %7 = fcmp uge double %4, 6.000000e+00
  %8 = fmul double %4, %4
  %9 = select i1 %5, double %4, double %8
  %10 = select i1 %6, double 0xBC5AF69FE192740F, double 0x3D1FDFABBDFC43F1
  %11 = select i1 %5, double %10, double 0x3BC00EFEFABE989B
  %12 = select i1 %6, double 0x3CC5E4C21B562709, double 0xBD7A8E25B9CCCB64
  %13 = select i1 %5, double %12, double 0xBC0FE6EC06B043F5
  %14 = tail call double @llvm.fma.f64(double %11, double %9, double %13) #6
  %15 = select i1 %6, double 0xBD20EE4A859274F9, double 0x3DC50B3AE48C7164
  %16 = select i1 %5, double %15, double 0x3C55A7F67BDE0C17
  %17 = tail call double @llvm.fma.f64(double %14, double %9, double %16) #6
  %18 = select i1 %6, double 0x3D7095F3964F9BBA, double 0xBE0518912B895660
  %19 = select i1 %5, double %18, double 0xBC9A15164BF4F36C
  %20 = tail call double @llvm.fma.f64(double %17, double %9, double %19) #6
  %21 = select i1 %6, double 0xBDB7174964833400, double 0x3E3E0083E7FD4B05
  %22 = select i1 %5, double %21, double 0x3CDD6F95068FEEA8
  %23 = tail call double @llvm.fma.f64(double %20, double %9, double %22) #6
  %24 = select i1 %6, double 0x3DF84A341FC35F63, double 0xBE70131398DAE973
  %25 = select i1 %5, double %24, double 0xBD1F56D9FF51275A
  %26 = tail call double @llvm.fma.f64(double %23, double %9, double %25) #6
  %27 = select i1 %6, double 0xBE34092FAEC3CB81, double 0x3E9AE1C4F259778D
  %28 = select i1 %5, double %27, double 0x3D5F6839841402FB
  %29 = tail call double @llvm.fma.f64(double %26, double %9, double %28) #6
  %30 = select i1 %6, double 0x3E6A8ABD2DF8AA98, double 0xBEC1E2D7E8039AC0
  %31 = select i1 %5, double %30, double 0xBD9D8453B9E7FD7B
  %32 = tail call double @llvm.fma.f64(double %29, double %9, double %31) #6
  %33 = select i1 %6, double 0xBE9CA9DF1E6D3F55, double 0x3EE3117A5DB988BA
  %34 = select i1 %5, double %33, double 0x3DD9E6AD5DAB7034
  %35 = tail call double @llvm.fma.f64(double %32, double %9, double %34) #6
  %36 = select i1 %6, double 0x3EC9739C586B056B, double 0xBF0024D0F7EE3723
  %37 = select i1 %5, double %36, double 0xBE151D7181C08B9D
  %38 = tail call double @llvm.fma.f64(double %35, double %9, double %37) #6
  %39 = select i1 %6, double 0xBEF2A034D3F36A50, double 0x3F14E58666D1B46F
  %40 = select i1 %5, double %39, double 0x3E4FCC5720620921
  %41 = tail call double @llvm.fma.f64(double %38, double %9, double %40) #6
  %42 = select i1 %6, double 0x3F1658BA21A7397E, double 0xBF2230DCD58EAD99
  %43 = select i1 %5, double %42, double 0xBE85F742EC43E5C7
  %44 = tail call double @llvm.fma.f64(double %41, double %9, double %43) #6
  %45 = select i1 %6, double 0xBF3590AE9D03C290, double 0x3F10F5BA38B6A6E5
  %46 = select i1 %5, double %45, double 0x3EBB9E6C9DC6519C
  %47 = tail call double @llvm.fma.f64(double %44, double %9, double %46) #6
  %48 = select i1 %6, double 0x3F4FC6679B56D25A, double 0x3F405F7D6748381E
  %49 = select i1 %5, double %48, double 0xBEEF4D25C3E0C2EA
  %50 = tail call double @llvm.fma.f64(double %47, double %9, double %49) #6
  %51 = select i1 %6, double 0xBF5DB24AB8ACFC8B, double 0xBF5A9686E5DE05F7
  %52 = select i1 %5, double %51, double 0x3F1F9A326F9B89B8
  %53 = tail call double @llvm.fma.f64(double %50, double %9, double %52) #6
  %54 = select i1 %6, double 0xBF3EF7EC1133F0A8, double 0x3F252C1DCB0324BA
  %55 = select i1 %5, double %54, double 0xBF4C02DB40040B84
  %56 = tail call double @llvm.fma.f64(double %53, double %9, double %55) #6
  %57 = select i1 %6, double 0x3F9567A2F00CE3E5, double 0x3F939CBECA106F66
  %58 = select i1 %5, double %57, double 0x3F7565BCD0E6A540
  %59 = tail call double @llvm.fma.f64(double %56, double %9, double %58) #6
  %60 = select i1 %6, double 0xBFBAEEA974D564EF, double 0xBFBA4FE8F5D2A23C
  %61 = select i1 %5, double %60, double 0xBF9B82CE31288B52
  %62 = tail call double @llvm.fma.f64(double %59, double %9, double %61) #6
  %63 = select i1 %6, double 0xBFE44E1CB940DA9C, double 0xBFE45F2B34C61AC0
  %64 = select i1 %5, double %63, double 0x3FBCE2F21A042BE3
  %65 = tail call double @llvm.fma.f64(double %62, double %9, double %64) #6
  %66 = select i1 %6, double 0xBFF21232BFB32B5A, double 0xBFF20DD7C1F4F99A
  %67 = select i1 %5, double %66, double 0xBFD812746B0379E7
  %68 = tail call double @llvm.fma.f64(double %65, double %9, double %67) #6
  %69 = fmul double %9, %68
  %70 = fsub double -0.000000e+00, %69
  %71 = tail call double @llvm.fma.f64(double %68, double %9, double %70) #6
  %72 = select i1 %6, double 0x3F305C1A38102E9A, double 0x3E6250219DD8BAD1
  %73 = select i1 %5, double %72, double 0x3FF20DD750429B6D
  %74 = select i1 %6, double 0xBBB9AC0AFE024E87, double 0xBB080EE9AD757828
  %75 = select i1 %5, double %74, double 0x3C71AE3A914FED6D
  %76 = fadd double %73, %69
  %77 = fsub double %76, %69
  %78 = fsub double %76, %77
  %79 = fsub double %69, %78
  %80 = fsub double %73, %77
  %81 = fadd double %80, %79
  %82 = fadd double %75, %71
  %83 = fadd double %82, %81
  %84 = fmul double %76, %4
  %85 = fsub double -0.000000e+00, %84
  %86 = tail call double @llvm.fma.f64(double %76, double %4, double %85) #6
  %87 = tail call double @llvm.fma.f64(double %83, double %4, double %86) #6
  %88 = fadd double %76, %83
  %89 = fmul double %88, 0x3FF71547652B82FE
  %90 = tail call double @llvm.rint.f64(double %89) #6
  %91 = fptosi double %90 to i32
  %92 = fmul double %90, 0xBFE62E42FEFA3000
  %93 = fadd double %76, %92
  %94 = fsub double %93, %76
  %95 = fsub double %93, %94
  %96 = fsub double %76, %95
  %97 = fsub double %92, %94
  %98 = fadd double %97, %96
  %99 = fadd double %83, %98
  %100 = fmul double %90, 0xBD53DE6AF278ECE6
  %101 = fadd double %100, %93
  %102 = fsub double %101, %93
  %103 = fsub double %101, %102
  %104 = fsub double %93, %103
  %105 = fsub double %100, %102
  %106 = fadd double %105, %104
  %107 = fadd double %106, %99
  %108 = fmul double %101, %101
  %109 = fadd double %101, %101
  %110 = fsub double -0.000000e+00, %108
  %111 = tail call double @llvm.fma.f64(double %101, double %101, double %110) #6
  %112 = tail call double @llvm.fma.f64(double %109, double %107, double %111) #6
  %113 = fmul double %108, %108
  %114 = fadd double %108, %108
  %115 = fsub double -0.000000e+00, %113
  %116 = tail call double @llvm.fma.f64(double %108, double %108, double %115) #6
  %117 = tail call double @llvm.fma.f64(double %114, double %112, double %116) #6
  %118 = fmul double %113, %113
  %119 = tail call double @llvm.fma.f64(double %101, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %120 = tail call double @llvm.fma.f64(double %101, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %121 = tail call double @llvm.fma.f64(double %101, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %122 = tail call double @llvm.fma.f64(double %108, double %120, double %121) #6
  %123 = tail call double @llvm.fma.f64(double %101, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %124 = tail call double @llvm.fma.f64(double %101, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %125 = tail call double @llvm.fma.f64(double %108, double %123, double %124) #6
  %126 = tail call double @llvm.fma.f64(double %113, double %122, double %125) #6
  %127 = tail call double @llvm.fma.f64(double %118, double %119, double %126) #6
  %128 = fmul double %101, 0x3FC5555555555555
  %129 = fsub double -0.000000e+00, %128
  %130 = tail call double @llvm.fma.f64(double %101, double 0x3FC5555555555555, double %129) #6
  %131 = tail call double @llvm.fma.f64(double %107, double 0x3FC5555555555555, double %130) #6
  %132 = fadd double %128, 5.000000e-01
  %133 = fsub double 5.000000e-01, %132
  %134 = fadd double %128, %133
  %135 = fadd double %134, %131
  %136 = fmul double %101, %132
  %137 = fsub double -0.000000e+00, %136
  %138 = tail call double @llvm.fma.f64(double %132, double %101, double %137) #6
  %139 = tail call double @llvm.fma.f64(double %135, double %101, double %138) #6
  %140 = tail call double @llvm.fma.f64(double %132, double %107, double %139) #6
  %141 = fadd double %136, 1.000000e+00
  %142 = fsub double 1.000000e+00, %141
  %143 = fadd double %136, %142
  %144 = fadd double %143, %140
  %145 = fmul double %101, %141
  %146 = fsub double -0.000000e+00, %145
  %147 = tail call double @llvm.fma.f64(double %141, double %101, double %146) #6
  %148 = tail call double @llvm.fma.f64(double %144, double %101, double %147) #6
  %149 = tail call double @llvm.fma.f64(double %141, double %107, double %148) #6
  %150 = fadd double %145, 1.000000e+00
  %151 = fsub double 1.000000e+00, %150
  %152 = fadd double %145, %151
  %153 = fadd double %152, %149
  %154 = fmul double %113, %127
  %155 = fsub double -0.000000e+00, %154
  %156 = tail call double @llvm.fma.f64(double %113, double %127, double %155) #6
  %157 = tail call double @llvm.fma.f64(double %117, double %127, double %156) #6
  %158 = fadd double %154, %150
  %159 = fsub double %150, %158
  %160 = fadd double %154, %159
  %161 = fadd double %160, %153
  %162 = fadd double %157, %161
  %163 = ashr i32 %91, 1
  %164 = add nsw i32 %163, 1023
  %165 = zext i32 %164 to i64
  %166 = shl i64 %165, 52
  %167 = bitcast i64 %166 to double
  %168 = fmul double %158, %167
  %169 = add i32 %91, 1023
  %170 = sub i32 %169, %163
  %171 = zext i32 %170 to i64
  %172 = shl i64 %171, 52
  %173 = bitcast i64 %172 to double
  %174 = fmul double %168, %173
  %175 = fmul double %162, %167
  %176 = fmul double %175, %173
  %177 = fcmp olt double %76, -1.000000e+03
  %178 = bitcast double %174 to i64
  %179 = select i1 %177, i64 4294967295, i64 0
  %180 = shl nuw i64 %179, 32
  %181 = or i64 %180, %179
  %182 = xor i64 %181, -1
  %183 = and i64 %178, %182
  %184 = bitcast i64 %183 to double
  %185 = bitcast double %176 to i64
  %186 = and i64 %185, %182
  %187 = bitcast i64 %186 to double
  %188 = fsub double 1.000000e+00, %184
  %189 = fsub double 1.000000e+00, %188
  %190 = fsub double %189, %184
  %191 = fsub double %190, %187
  %192 = select i1 %5, double %188, double %84
  %193 = select i1 %5, double %191, double %87
  %194 = fadd double %192, %193
  %195 = bitcast double %194 to i64
  %196 = select i1 %7, i64 4607182418800017408, i64 %195
  %197 = and i64 %2, -9223372036854775808
  %198 = xor i64 %196, %197
  %199 = bitcast i64 %198 to double
  %200 = fcmp ord double %4, 0.000000e+00
  %201 = select i1 %200, double %199, double 0x7FF8000000000000
  ret double %201
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_erfcd1_u15purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.000000e+00
  %6 = fcmp uge double %4, 2.200000e+00
  %7 = fcmp uge double %4, 4.200000e+00
  %8 = fcmp uge double %4, 2.730000e+01
  %9 = fmul double %4, %4
  %10 = fsub double -0.000000e+00, %9
  %11 = tail call double @llvm.fma.f64(double %4, double %4, double %10) #6
  %12 = fdiv double 1.000000e+00, %4
  %13 = fsub double %12, %12
  %14 = fsub double -0.000000e+00, %4
  %15 = tail call double @llvm.fma.f64(double %14, double %12, double 1.000000e+00) #6
  %16 = tail call double @llvm.fma.f64(double %12, double -0.000000e+00, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %12, double 0.000000e+00, double %13) #6
  %18 = tail call double @llvm.fma.f64(double %12, double %16, double %17) #6
  %19 = select i1 %6, double %12, double %4
  %20 = select i1 %6, double %18, double 0.000000e+00
  %21 = select i1 %5, double %19, double %9
  %22 = select i1 %5, double %20, double %11
  %23 = select i1 %7, double 0x40D6CB9FD3B439A9, double 0xC04CCA024E41FBF2
  %24 = select i1 %6, double %23, double 0x3D58315E6C186224
  %25 = select i1 %5, double %24, double 0x3BC00EFEFABE9897
  %26 = select i1 %7, double 0xC0E6ED9388CD091B, double 0x407D2EDD0AE020CC
  %27 = select i1 %6, double %26, double 0xBDAB33CF696F6246
  %28 = select i1 %5, double %27, double 0xBC0FE6EC06B043F2
  %29 = tail call double @llvm.fma.f64(double %25, double %21, double %28) #6
  %30 = select i1 %7, double 0x40DEFD81FD565E63, double 0xC09C1151CBEBE895
  %31 = select i1 %6, double %30, double 0x3DED1C000C3FE200
  %32 = select i1 %5, double %31, double 0x3C55A7F67BDE0C13
  %33 = tail call double @llvm.fma.f64(double %29, double %21, double %32) #6
  %34 = select i1 %7, double 0x40A955F72FDA349C, double 0x40B103E466CE6960
  %35 = select i1 %6, double %34, double 0xBE23ACFF2B1B8BEC
  %36 = select i1 %5, double %35, double 0xBC9A15164BF4F369
  %37 = tail call double @llvm.fma.f64(double %33, double %21, double %36) #6
  %38 = select i1 %7, double 0xC0D3ACCB8514AB13, double 0xC0BD20424648FD63
  %39 = select i1 %6, double %38, double 0x3E52C76D37FDB57D
  %40 = select i1 %5, double %39, double 0x3CDD6F95068FEEA4
  %41 = tail call double @llvm.fma.f64(double %37, double %21, double %40) #6
  %42 = select i1 %7, double 0x40CE5A08EC3F1AF9, double 0x40C2A8FD1A1289EB
  %43 = select i1 %6, double %42, double 0xBE7ABA200DE4015C
  %44 = select i1 %5, double %43, double 0xBD1F56D9FF51274F
  %45 = tail call double @llvm.fma.f64(double %41, double %21, double %44) #6
  %46 = select i1 %7, double 0xC0B806DFCAF3E8F0, double 0xC0C27F028C42F7FD
  %47 = select i1 %6, double %46, double 0x3E9D0EE6A4A80D73
  %48 = select i1 %5, double %47, double 0x3D5F683984140301
  %49 = tail call double @llvm.fma.f64(double %45, double %21, double %48) #6
  %50 = select i1 %7, double 0x40936030E9797DA0, double 0x40BCDB58257A0C6D
  %51 = select i1 %6, double %50, double 0xBEB8137ED27E2624
  %52 = select i1 %5, double %51, double 0xBD9D8453B9E7FD78
  %53 = tail call double @llvm.fma.f64(double %49, double %21, double %52) #6
  %54 = select i1 %7, double 0xC054869BB9D7AF08, double 0xC0B1CDB68AB7C4E4
  %55 = select i1 %6, double %54, double 0x3ECD0697CBB9A376
  %56 = select i1 %5, double %55, double 0x3DD9E6AD5DAB7037
  %57 = tail call double @llvm.fma.f64(double %53, double %21, double %56) #6
  %58 = select i1 %7, double 0x4040365402C89D37, double 0x40A13FBBE32520BC
  %59 = select i1 %6, double %58, double 0xBED4ECCCA37D22C1
  %60 = select i1 %5, double %59, double 0xBE151D7181C08BA0
  %61 = tail call double @llvm.fma.f64(double %57, double %21, double %60) #6
  %62 = select i1 %7, double 0xC03D3BF3C95EBAA1, double 0xC089AE616A35F399
  %63 = select i1 %6, double %62, double 0xBEB5F5266774B791
  %64 = select i1 %5, double %63, double 0x3E4FCC572062092A
  %65 = tail call double @llvm.fma.f64(double %61, double %21, double %64) #6
  %66 = select i1 %7, double 0x3FD620B48EBD7FD2, double 0x406C5BB5D950D59F
  %67 = select i1 %6, double %66, double 0x3EFD9F88B02EA0EC
  %68 = select i1 %5, double %67, double 0xBE85F742EC43E5BC
  %69 = tail call double @llvm.fma.f64(double %65, double %21, double %68) #6
  %70 = select i1 %7, double 0x4015F57BD26EB8D7, double 0xC0472AB3D15A1B99
  %71 = select i1 %6, double %70, double 0xBF10C2E202FB0D80
  %72 = select i1 %5, double %71, double 0x3EBB9E6C9DC6519D
  %73 = tail call double @llvm.fma.f64(double %69, double %21, double %72) #6
  %74 = select i1 %7, double 0x3F598ED6853E65C9, double 0x40231D60ED75C166
  %75 = select i1 %6, double %74, double 0xBEFAE939BE608207
  %76 = select i1 %5, double %75, double 0xBEEF4D25C3E0C2E2
  %77 = tail call double @llvm.fma.f64(double %73, double %21, double %76) #6
  %78 = select i1 %7, double 0xBFF8AAF93486CD89, double 0xC007AADCFF61A9EE
  %79 = select i1 %6, double %78, double 0x3F4351BFC5997AEF
  %80 = select i1 %5, double %79, double 0x3F1F9A326F9B89C2
  %81 = tail call double @llvm.fma.f64(double %77, double %21, double %80) #6
  %82 = select i1 %7, double 0x3EC7AEAC5A2C6C34, double 0x3FC56155F28A44A2
  %83 = select i1 %6, double %82, double 0xBF5BC858BD2C3DEE
  %84 = select i1 %5, double %83, double 0xBF4C02DB40040B83
  %85 = tail call double @llvm.fma.f64(double %81, double %21, double %84) #6
  %86 = select i1 %7, double 0x3FE3FFFFD433AA8A, double 0x3FE38258FA079AD9
  %87 = select i1 %6, double %86, double 0x3F2B61E95A64E1B4
  %88 = select i1 %5, double %87, double 0x3F7565BCD0E6A53F
  %89 = tail call double @llvm.fma.f64(double %85, double %21, double %88) #6
  %90 = select i1 %7, double 0x3E1DEC4B817418DD, double 0x3F515AA8B364E28B
  %91 = select i1 %6, double %90, double 0x3F93966FE5D12A2E
  %92 = select i1 %5, double %91, double 0xBF9B82CE31288B51
  %93 = tail call double @llvm.fma.f64(double %89, double %21, double %92) #6
  %94 = fmul double %21, %93
  %95 = fsub double -0.000000e+00, %94
  %96 = tail call double @llvm.fma.f64(double %21, double %93, double %95) #6
  %97 = tail call double @llvm.fma.f64(double %22, double %93, double %96) #6
  %98 = select i1 %7, double 0xBFE0000000038D52, double 0xBFE0006CA4753FC8
  %99 = select i1 %6, double %98, double 0xBFBA4F4EAB8311A0
  %100 = select i1 %5, double %99, double 0x3FBCE2F21A042BE2
  %101 = select i1 %7, double 0xBC8719E29ACB2723, double 0x3C7E64BB064EBF0B
  %102 = select i1 %6, double %101, double 0xBC5CBFA8068241AE
  %103 = select i1 %5, double %102, double 0xBC52871BC5EF8ED7
  %104 = fadd double %100, %94
  %105 = fsub double %104, %94
  %106 = fsub double %104, %105
  %107 = fsub double %94, %106
  %108 = fsub double %100, %105
  %109 = fadd double %108, %107
  %110 = fadd double %103, %97
  %111 = fadd double %110, %109
  %112 = fmul double %21, %104
  %113 = fsub double -0.000000e+00, %112
  %114 = tail call double @llvm.fma.f64(double %104, double %21, double %113) #6
  %115 = tail call double @llvm.fma.f64(double %111, double %21, double %114) #6
  %116 = tail call double @llvm.fma.f64(double %104, double %22, double %115) #6
  %117 = select i1 %7, double 0x3D50B89397C75A64, double 0x3EBADCB2F72A1080
  %118 = select i1 %6, double %117, double 0xBFE45F306B230D62
  %119 = select i1 %5, double %118, double 0xBFD812746B0379E7
  %120 = select i1 %7, double 0xB9ED96501FDC09B6, double 0x3B2CF38C548C5245
  %121 = select i1 %6, double %120, double 0x3C619932A20CE10B
  %122 = select i1 %5, double %121, double 0x3C6EE12E49CAD52E
  %123 = fadd double %119, %112
  %124 = fsub double %123, %112
  %125 = fsub double %123, %124
  %126 = fsub double %112, %125
  %127 = fsub double %119, %124
  %128 = fadd double %127, %126
  %129 = fadd double %122, %116
  %130 = fadd double %128, %129
  %131 = fmul double %21, %123
  %132 = fsub double -0.000000e+00, %131
  %133 = tail call double @llvm.fma.f64(double %123, double %21, double %132) #6
  %134 = tail call double @llvm.fma.f64(double %130, double %21, double %133) #6
  %135 = tail call double @llvm.fma.f64(double %123, double %22, double %134) #6
  %136 = select i1 %7, double 0xBFE250D048E7A1C6, double 0xBFE250D055891FD0
  %137 = select i1 %6, double %136, double 0xBFF20DD7505C75E8
  %138 = select i1 %5, double %137, double 0x3FF20DD750429B6D
  %139 = select i1 %7, double 0xBC7BA6EE6A6AB496, double 0x3C81B3313996DEA7
  %140 = select i1 %6, double %139, double 0x3C9751223FE9154D
  %141 = select i1 %5, double %140, double 0x3C71AE3A914FED6D
  %142 = fadd double %138, %131
  %143 = fsub double %142, %131
  %144 = fsub double %142, %143
  %145 = fsub double %131, %144
  %146 = fsub double %138, %143
  %147 = fadd double %146, %145
  %148 = fadd double %141, %135
  %149 = fadd double %147, %148
  %150 = select i1 %6, double %14, double %142
  %151 = select i1 %6, double 0.000000e+00, double %149
  %152 = fmul double %150, %4
  %153 = fsub double -0.000000e+00, %152
  %154 = tail call double @llvm.fma.f64(double %150, double %4, double %153) #6
  %155 = tail call double @llvm.fma.f64(double %151, double %4, double %154) #6
  %156 = fadd double %142, %152
  %157 = fsub double %156, %152
  %158 = fsub double %156, %157
  %159 = fsub double %152, %158
  %160 = fsub double %142, %157
  %161 = fadd double %160, %159
  %162 = fadd double %149, %155
  %163 = fadd double %161, %162
  %164 = select i1 %6, double %156, double %152
  %165 = select i1 %6, double %163, double %155
  %166 = fsub double 1.000000e+00, %164
  %167 = fsub double 1.000000e+00, %166
  %168 = fsub double %167, %164
  %169 = fadd double %168, 0.000000e+00
  %170 = fsub double %169, %165
  %171 = fadd double %164, %165
  %172 = fmul double %171, 0x3FF71547652B82FE
  %173 = tail call double @llvm.rint.f64(double %172) #6
  %174 = fptosi double %173 to i32
  %175 = fmul double %173, 0xBFE62E42FEFA3000
  %176 = fadd double %164, %175
  %177 = fsub double %176, %164
  %178 = fsub double %176, %177
  %179 = fsub double %164, %178
  %180 = fsub double %175, %177
  %181 = fadd double %180, %179
  %182 = fadd double %165, %181
  %183 = fmul double %173, 0xBD53DE6AF278ECE6
  %184 = fadd double %183, %176
  %185 = fsub double %184, %176
  %186 = fsub double %184, %185
  %187 = fsub double %176, %186
  %188 = fsub double %183, %185
  %189 = fadd double %188, %187
  %190 = fadd double %189, %182
  %191 = fmul double %184, %184
  %192 = fadd double %184, %184
  %193 = fsub double -0.000000e+00, %191
  %194 = tail call double @llvm.fma.f64(double %184, double %184, double %193) #6
  %195 = tail call double @llvm.fma.f64(double %192, double %190, double %194) #6
  %196 = fmul double %191, %191
  %197 = fadd double %191, %191
  %198 = fsub double -0.000000e+00, %196
  %199 = tail call double @llvm.fma.f64(double %191, double %191, double %198) #6
  %200 = tail call double @llvm.fma.f64(double %197, double %195, double %199) #6
  %201 = fmul double %196, %196
  %202 = tail call double @llvm.fma.f64(double %184, double 0x3DE60632A887194C, double 0x3E21F8EAF54829DC) #6
  %203 = tail call double @llvm.fma.f64(double %184, double 0x3E5AE652E8103AB6, double 0x3E927E4C95A9765C) #6
  %204 = tail call double @llvm.fma.f64(double %184, double 0x3EC71DE3A11D7656, double 0x3EFA01A01AF6F0B7) #6
  %205 = tail call double @llvm.fma.f64(double %191, double %203, double %204) #6
  %206 = tail call double @llvm.fma.f64(double %184, double 0x3F2A01A01A02D002, double 0x3F56C16C16C145CC) #6
  %207 = tail call double @llvm.fma.f64(double %184, double 0x3F81111111111119, double 0x3FA555555555555A) #6
  %208 = tail call double @llvm.fma.f64(double %191, double %206, double %207) #6
  %209 = tail call double @llvm.fma.f64(double %196, double %205, double %208) #6
  %210 = tail call double @llvm.fma.f64(double %201, double %202, double %209) #6
  %211 = fmul double %184, 0x3FC5555555555555
  %212 = fsub double -0.000000e+00, %211
  %213 = tail call double @llvm.fma.f64(double %184, double 0x3FC5555555555555, double %212) #6
  %214 = tail call double @llvm.fma.f64(double %190, double 0x3FC5555555555555, double %213) #6
  %215 = fadd double %211, 5.000000e-01
  %216 = fsub double 5.000000e-01, %215
  %217 = fadd double %211, %216
  %218 = fadd double %217, %214
  %219 = fmul double %184, %215
  %220 = fsub double -0.000000e+00, %219
  %221 = tail call double @llvm.fma.f64(double %215, double %184, double %220) #6
  %222 = tail call double @llvm.fma.f64(double %218, double %184, double %221) #6
  %223 = tail call double @llvm.fma.f64(double %215, double %190, double %222) #6
  %224 = fadd double %219, 1.000000e+00
  %225 = fsub double 1.000000e+00, %224
  %226 = fadd double %219, %225
  %227 = fadd double %226, %223
  %228 = fmul double %184, %224
  %229 = fsub double -0.000000e+00, %228
  %230 = tail call double @llvm.fma.f64(double %224, double %184, double %229) #6
  %231 = tail call double @llvm.fma.f64(double %227, double %184, double %230) #6
  %232 = tail call double @llvm.fma.f64(double %224, double %190, double %231) #6
  %233 = fadd double %228, 1.000000e+00
  %234 = fsub double 1.000000e+00, %233
  %235 = fadd double %228, %234
  %236 = fadd double %235, %232
  %237 = fmul double %196, %210
  %238 = fsub double -0.000000e+00, %237
  %239 = tail call double @llvm.fma.f64(double %196, double %210, double %238) #6
  %240 = tail call double @llvm.fma.f64(double %200, double %210, double %239) #6
  %241 = fadd double %237, %233
  %242 = fsub double %233, %241
  %243 = fadd double %237, %242
  %244 = fadd double %243, %236
  %245 = fadd double %240, %244
  %246 = ashr i32 %174, 1
  %247 = add nsw i32 %246, 1023
  %248 = zext i32 %247 to i64
  %249 = shl i64 %248, 52
  %250 = bitcast i64 %249 to double
  %251 = fmul double %241, %250
  %252 = add i32 %174, 1023
  %253 = sub i32 %252, %246
  %254 = zext i32 %253 to i64
  %255 = shl i64 %254, 52
  %256 = bitcast i64 %255 to double
  %257 = fmul double %251, %256
  %258 = fmul double %245, %250
  %259 = fmul double %258, %256
  %260 = fcmp olt double %164, -1.000000e+03
  %261 = bitcast double %257 to i64
  %262 = select i1 %260, i64 4294967295, i64 0
  %263 = shl nuw i64 %262, 32
  %264 = or i64 %263, %262
  %265 = xor i64 %264, -1
  %266 = and i64 %261, %265
  %267 = bitcast i64 %266 to double
  %268 = bitcast double %259 to i64
  %269 = and i64 %268, %265
  %270 = bitcast i64 %269 to double
  %271 = select i1 %5, double %267, double %166
  %272 = select i1 %5, double %270, double %170
  %273 = fmul double %21, %271
  %274 = fsub double -0.000000e+00, %273
  %275 = tail call double @llvm.fma.f64(double %271, double %21, double %274) #6
  %276 = tail call double @llvm.fma.f64(double %272, double %21, double %275) #6
  %277 = tail call double @llvm.fma.f64(double %271, double %22, double %276) #6
  %278 = select i1 %6, double %273, double %271
  %279 = select i1 %6, double %277, double %272
  %280 = fadd double %278, %279
  %281 = select i1 %8, double 0.000000e+00, double %280
  %282 = ashr i64 %2, 63
  %283 = trunc i64 %282 to i32
  %284 = fsub double 2.000000e+00, %281
  %285 = icmp eq i32 %283, 0
  %286 = select i1 %285, double %281, double %284
  %287 = fcmp ord double %0, 0.000000e+00
  %288 = select i1 %287, double %286, double 0x7FF8000000000000
  ret double %288
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_finz_sincospid1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = tail call { double, double } @Sleef_sincospid1_u05purecfma(double %0)
  ret { double, double } %2
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_finz_sincospid1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 4.000000e+00
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = lshr i32 %4, 31
  %6 = xor i32 %5, 1
  %7 = add nsw i32 %6, %4
  %8 = and i32 %7, -2
  %9 = sitofp i32 %8 to double
  %10 = fsub double %2, %9
  %11 = fmul double %10, %10
  %12 = tail call double @llvm.fma.f64(double %11, double 0x3D9E42E923057D6C, double 0xBE1E3011CA3F21B5) #6
  %13 = tail call double @llvm.fma.f64(double %12, double %11, double 0x3E9507830918116C) #6
  %14 = tail call double @llvm.fma.f64(double %13, double %11, double 0xBF032D2CCE398CAE) #6
  %15 = tail call double @llvm.fma.f64(double %14, double %11, double 0x3F6466BC677591C5) #6
  %16 = tail call double @llvm.fma.f64(double %15, double %11, double 0xBFB4ABBCE625BE43) #6
  %17 = tail call double @llvm.fma.f64(double %16, double %11, double 0x3FE921FB54442D18) #6
  %18 = fmul double %10, %17
  %19 = tail call double @llvm.fma.f64(double %11, double 0xBD5B29CFED2A85B3, double 0x3DDF9CD01C42C7CD) #6
  %20 = tail call double @llvm.fma.f64(double %19, double %11, double 0xBE5A6D1ED7B66707) #6
  %21 = tail call double @llvm.fma.f64(double %20, double %11, double 0x3ECE1F50684AD332) #6
  %22 = tail call double @llvm.fma.f64(double %21, double %11, double 0xBF355D3C7E3C9FCF) #6
  %23 = tail call double @llvm.fma.f64(double %22, double %11, double 0x3F903C1F081B5AAA) #6
  %24 = tail call double @llvm.fma.f64(double %23, double %11, double 0xBFD3BD3CC9BE45DE) #6
  %25 = tail call double @llvm.fma.f64(double %24, double %11, double 1.000000e+00) #6
  %26 = and i32 %7, 2
  %27 = icmp ne i32 %26, 0
  %28 = select i1 %27, double %25, double %18
  %29 = select i1 %27, double %18, double %25
  %30 = shl i32 %7, 29
  %31 = zext i32 %30 to i64
  %32 = shl nuw i64 %31, 32
  %33 = and i64 %32, -9223372036854775808
  %34 = bitcast double %28 to i64
  %35 = xor i64 %33, %34
  %36 = shl i32 %8, 29
  %37 = add i32 %36, 1073741824
  %38 = zext i32 %37 to i64
  %39 = shl nuw i64 %38, 32
  %40 = and i64 %39, -9223372036854775808
  %41 = bitcast double %29 to i64
  %42 = xor i64 %40, %41
  %43 = bitcast double %0 to i64
  %44 = and i64 %43, 9223372036854775807
  %45 = bitcast i64 %44 to double
  %46 = fcmp ogt double %45, 2.500000e+08
  %47 = select i1 %46, i64 4294967295, i64 0
  %48 = shl nuw i64 %47, 32
  %49 = or i64 %48, %47
  %50 = xor i64 %49, -1
  %51 = and i64 %35, %50
  %52 = and i64 %42, %50
  %53 = fcmp oeq double %0, 0x7FF0000000000000
  %54 = fcmp oeq double %0, 0xFFF0000000000000
  %55 = or i1 %53, %54
  %56 = select i1 %55, i64 4294967295, i64 0
  %57 = shl nuw i64 %56, 32
  %58 = or i64 %57, %56
  %59 = or i64 %51, %58
  %60 = bitcast i64 %59 to double
  %61 = or i64 %52, %58
  %62 = bitcast i64 %61 to double
  %63 = insertvalue { double, double } undef, double %60, 0
  %64 = insertvalue { double, double } %63, double %62, 1
  ret { double, double } %64
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_finz_modfd1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = bitcast double %0 to i64
  %13 = and i64 %12, 9223372036854775807
  %14 = bitcast i64 %13 to double
  %15 = fcmp ule double %14, 0x4330000000000000
  %16 = select i1 %15, double %11, double 0.000000e+00
  %17 = bitcast double %16 to i64
  %18 = and i64 %17, 9223372036854775807
  %19 = and i64 %12, -9223372036854775808
  %20 = or i64 %18, %19
  %21 = bitcast i64 %20 to double
  %22 = fsub double %0, %16
  %23 = bitcast double %22 to i64
  %24 = and i64 %23, 9223372036854775807
  %25 = or i64 %24, %19
  %26 = bitcast i64 %25 to double
  %27 = insertvalue { double, double } undef, double %21, 0
  %28 = insertvalue { double, double } %27, double %26, 1
  ret { double, double } %28
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_logd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, %24
  %28 = tail call double @llvm.fma.f64(double %24, double 0x3FC385C5CBC3F50D, double 0x3FC7474BA672B05F) #6
  %29 = tail call double @llvm.fma.f64(double %25, double 0x3FC3A5791D95DB39, double %28) #6
  %30 = tail call double @llvm.fma.f64(double %24, double 0x3FCC71BFEED5D419, double 0x3FD249249BFBE987) #6
  %31 = tail call double @llvm.fma.f64(double %24, double 0x3FD99999998C136E, double 0x3FE555555555593F) #6
  %32 = tail call double @llvm.fma.f64(double %25, double %30, double %31) #6
  %33 = tail call double @llvm.fma.f64(double %26, double %29, double %32) #6
  %34 = sitofp i32 %20 to double
  %35 = fmul double %34, 0x3FE62E42FEFA39EF
  %36 = tail call double @llvm.fma.f64(double %23, double 2.000000e+00, double %35) #6
  %37 = tail call double @llvm.fma.f64(double %27, double %33, double %36) #6
  %38 = fcmp une double %4, 0x7FF0000000000000
  %39 = select i1 %38, double %37, double 0x7FF0000000000000
  %40 = fcmp oge double %4, 0.000000e+00
  %41 = select i1 %40, double %39, double 0x7FF8000000000000
  %42 = fcmp une double %4, 0.000000e+00
  %43 = select i1 %42, double %41, double 0xFFF0000000000000
  ret double %43
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_logd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FC3872E67FE8E84, double 0x3FC747353A506035) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FC39C4F5407567E, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FCC71C0A65ECD8E, double 0x3FD249249A68A245) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FD99999998F92EA, double 0x3FE55555555557AE) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %52, 0x3FE62E42FEFA39EF
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %52, double 0x3FE62E42FEFA39EF, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double 0x3C7ABC9E3B39803F, double %55) #6
  %57 = fmul double %34, 2.000000e+00
  %58 = fmul double %42, 2.000000e+00
  %59 = fadd double %53, %57
  %60 = fsub double %53, %59
  %61 = fadd double %57, %60
  %62 = fadd double %56, %61
  %63 = fadd double %62, %58
  %64 = fmul double %34, %43
  %65 = fmul double %64, %51
  %66 = fadd double %59, %65
  %67 = fsub double %59, %66
  %68 = fadd double %65, %67
  %69 = fadd double %63, %68
  %70 = fadd double %66, %69
  %71 = fcmp une double %4, 0x7FF0000000000000
  %72 = select i1 %71, double %70, double 0x7FF0000000000000
  %73 = fcmp oge double %4, 0.000000e+00
  %74 = select i1 %73, double %72, double 0x7FF8000000000000
  %75 = fcmp une double %4, 0.000000e+00
  %76 = select i1 %75, double %74, double 0xFFF0000000000000
  ret double %76
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_powd1_u10purecfma(double, double) local_unnamed_addr #1 {
  %3 = tail call double @Sleef_powd1_u10purecfma(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_sinhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_sinhd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_coshd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_coshd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_tanhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_tanhd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_sinhd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = tail call double @llvm.rint.f64(double %5) #6
  %7 = fptosi double %6 to i32
  %8 = tail call double @llvm.fma.f64(double %6, double 0xBFE62E42FEFA3000, double %4) #6
  %9 = tail call double @llvm.fma.f64(double %6, double 0xBD53DE6AF278ECE6, double %8) #6
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = tail call double @llvm.fma.f64(double %9, double 0x3E21F0E4C4ECD775, double 0x3E5AF68A28CC800A) #6
  %14 = tail call double @llvm.fma.f64(double %9, double 0x3E927E52E0FCD573, double 0x3EC71DDF1629E6CE) #6
  %15 = tail call double @llvm.fma.f64(double %9, double 0x3EFA01A01780879E, double 0x3F2A01A01B3603F5) #6
  %16 = tail call double @llvm.fma.f64(double %10, double %14, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3F56C16C16C20BA0, double 0x3F8111111110EB39) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3FA555555555553E, double 0x3FC555555555555C) #6
  %19 = tail call double @llvm.fma.f64(double %10, double %17, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %16, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %13, double %20) #6
  %22 = fmul double %9, %10
  %23 = fmul double %22, %21
  %24 = tail call double @llvm.fma.f64(double %10, double 5.000000e-01, double %23) #6
  %25 = fadd double %9, %24
  %26 = icmp eq i32 %7, 0
  %27 = fadd double %25, 1.000000e+00
  %28 = ashr i32 %7, 1
  %29 = add nsw i32 %28, 1023
  %30 = zext i32 %29 to i64
  %31 = shl i64 %30, 52
  %32 = bitcast i64 %31 to double
  %33 = fmul double %27, %32
  %34 = add i32 %7, 1023
  %35 = sub i32 %34, %28
  %36 = zext i32 %35 to i64
  %37 = shl i64 %36, 52
  %38 = bitcast i64 %37 to double
  %39 = fmul double %33, %38
  %40 = fadd double %39, -1.000000e+00
  %41 = select i1 %26, double %25, double %40
  %42 = fadd double %41, 2.000000e+00
  %43 = fadd double %41, 1.000000e+00
  %44 = fdiv double %42, %43
  %45 = fmul double %41, 5.000000e-01
  %46 = fmul double %45, %44
  %47 = fcmp ule double %4, 7.090000e+02
  %48 = fcmp ord double %46, 0.000000e+00
  %49 = and i1 %47, %48
  %50 = bitcast double %46 to i64
  %51 = select i1 %49, i64 %50, i64 9218868437227405312
  %52 = and i64 %2, -9223372036854775808
  %53 = xor i64 %51, %52
  %54 = fcmp uno double %0, 0.000000e+00
  %55 = select i1 %54, i64 4294967295, i64 0
  %56 = shl nuw i64 %55, 32
  %57 = or i64 %56, %55
  %58 = or i64 %57, %53
  %59 = bitcast i64 %58 to double
  ret double %59
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_coshd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = tail call double @llvm.rint.f64(double %5) #6
  %7 = fptosi double %6 to i32
  %8 = tail call double @llvm.fma.f64(double %6, double 0xBFE62E42FEFA3000, double %4) #6
  %9 = tail call double @llvm.fma.f64(double %6, double 0xBD53DE6AF278ECE6, double %8) #6
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = tail call double @llvm.fma.f64(double %9, double 0x3E21E0C670AFFF06, double 0x3E5AF6C36F75740C) #6
  %14 = tail call double @llvm.fma.f64(double %9, double 0x3E927E5D38A23654, double 0x3EC71DDEF633FB47) #6
  %15 = tail call double @llvm.fma.f64(double %9, double 0x3EFA01A0127F883A, double 0x3F2A01A01B4421FD) #6
  %16 = tail call double @llvm.fma.f64(double %10, double %14, double %15) #6
  %17 = tail call double @llvm.fma.f64(double %9, double 0x3F56C16C16C3396B, double 0x3F8111111110E7A5) #6
  %18 = tail call double @llvm.fma.f64(double %9, double 0x3FA55555555554F9, double 0x3FC555555555555E) #6
  %19 = tail call double @llvm.fma.f64(double %10, double %17, double %18) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %16, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %13, double %20) #6
  %22 = tail call double @llvm.fma.f64(double %21, double %9, double 5.000000e-01) #6
  %23 = tail call double @llvm.fma.f64(double %22, double %9, double 1.000000e+00) #6
  %24 = tail call double @llvm.fma.f64(double %23, double %9, double 1.000000e+00) #6
  %25 = ashr i32 %7, 1
  %26 = add nsw i32 %25, 1023
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %24, %29
  %31 = add i32 %7, 1023
  %32 = sub i32 %31, %25
  %33 = zext i32 %32 to i64
  %34 = shl i64 %33, 52
  %35 = bitcast i64 %34 to double
  %36 = fmul double %30, %35
  %37 = fcmp ule double %4, 0x40862E42FE102C83
  %38 = fcmp olt double %4, -1.000000e+03
  %39 = bitcast double %36 to i64
  %40 = select i1 %37, i64 %39, i64 9218868437227405312
  %41 = select i1 %38, i64 4294967295, i64 0
  %42 = shl nuw i64 %41, 32
  %43 = or i64 %42, %41
  %44 = xor i64 %43, -1
  %45 = and i64 %40, %44
  %46 = bitcast i64 %45 to double
  %47 = fdiv double 5.000000e-01, %46
  %48 = tail call double @llvm.fma.f64(double %46, double 5.000000e-01, double %47) #6
  %49 = fcmp ule double %4, 7.090000e+02
  %50 = fcmp ord double %48, 0.000000e+00
  %51 = and i1 %49, %50
  %52 = fcmp uno double %0, 0.000000e+00
  %53 = bitcast double %48 to i64
  %54 = select i1 %51, i64 %53, i64 9218868437227405312
  %55 = select i1 %52, i64 4294967295, i64 0
  %56 = shl nuw i64 %55, 32
  %57 = or i64 %56, %55
  %58 = or i64 %57, %54
  %59 = bitcast i64 %58 to double
  ret double %59
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_tanhd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 2.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = tail call double @llvm.rint.f64(double %6) #6
  %8 = fptosi double %7 to i32
  %9 = tail call double @llvm.fma.f64(double %7, double 0xBFE62E42FEFA3000, double %5) #6
  %10 = tail call double @llvm.fma.f64(double %7, double 0xBD53DE6AF278ECE6, double %9) #6
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = fmul double %12, %12
  %14 = tail call double @llvm.fma.f64(double %10, double 0x3E21F0E4C4ECD775, double 0x3E5AF68A28CC800A) #6
  %15 = tail call double @llvm.fma.f64(double %10, double 0x3E927E52E0FCD573, double 0x3EC71DDF1629E6CE) #6
  %16 = tail call double @llvm.fma.f64(double %10, double 0x3EFA01A01780879E, double 0x3F2A01A01B3603F5) #6
  %17 = tail call double @llvm.fma.f64(double %11, double %15, double %16) #6
  %18 = tail call double @llvm.fma.f64(double %10, double 0x3F56C16C16C20BA0, double 0x3F8111111110EB39) #6
  %19 = tail call double @llvm.fma.f64(double %10, double 0x3FA555555555553E, double 0x3FC555555555555C) #6
  %20 = tail call double @llvm.fma.f64(double %11, double %18, double %19) #6
  %21 = tail call double @llvm.fma.f64(double %12, double %17, double %20) #6
  %22 = tail call double @llvm.fma.f64(double %13, double %14, double %21) #6
  %23 = fmul double %10, %11
  %24 = fmul double %23, %22
  %25 = tail call double @llvm.fma.f64(double %11, double 5.000000e-01, double %24) #6
  %26 = fadd double %10, %25
  %27 = icmp eq i32 %8, 0
  %28 = fadd double %26, 1.000000e+00
  %29 = ashr i32 %8, 1
  %30 = add nsw i32 %29, 1023
  %31 = zext i32 %30 to i64
  %32 = shl i64 %31, 52
  %33 = bitcast i64 %32 to double
  %34 = fmul double %28, %33
  %35 = add i32 %8, 1023
  %36 = sub i32 %35, %29
  %37 = zext i32 %36 to i64
  %38 = shl i64 %37, 52
  %39 = bitcast i64 %38 to double
  %40 = fmul double %34, %39
  %41 = fadd double %40, -1.000000e+00
  %42 = select i1 %27, double %26, double %41
  %43 = fadd double %42, 2.000000e+00
  %44 = fdiv double %42, %43
  %45 = fcmp ule double %4, 0x4032B70887229E90
  %46 = fcmp ord double %44, 0.000000e+00
  %47 = and i1 %45, %46
  %48 = bitcast double %44 to i64
  %49 = select i1 %47, i64 %48, i64 4607182418800017408
  %50 = and i64 %2, -9223372036854775808
  %51 = xor i64 %49, %50
  %52 = fcmp uno double %0, 0.000000e+00
  %53 = select i1 %52, i64 4294967295, i64 0
  %54 = shl nuw i64 %53, 32
  %55 = or i64 %54, %53
  %56 = or i64 %55, %51
  %57 = bitcast i64 %56 to double
  ret double %57
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_asinhd1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_asinhd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_acoshd1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_acoshd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_atanhd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_atanhd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_cbrtd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = tail call double @llvm.trunc.f64(double %28) #6
  %30 = fptosi double %29 to i32
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 3.000000e+00
  %33 = fsub double %27, %32
  %34 = tail call double @llvm.trunc.f64(double %33) #6
  %35 = fptosi double %34 to i32
  %36 = icmp eq i32 %35, 1
  %37 = select i1 %36, double 0x3FF428A2F98D728B, double 1.000000e+00
  %38 = icmp eq i32 %35, 2
  %39 = select i1 %38, double 0x3FF965FEA53D6E3D, double %37
  %40 = add nsw i32 %30, -2048
  %41 = ashr i32 %40, 1
  %42 = add nsw i32 %41, 1023
  %43 = zext i32 %42 to i64
  %44 = shl i64 %43, 52
  %45 = bitcast i64 %44 to double
  %46 = fmul double %39, %45
  %47 = add i32 %30, 3071
  %48 = sub i32 %47, %41
  %49 = zext i32 %48 to i64
  %50 = shl i64 %49, 52
  %51 = bitcast i64 %50 to double
  %52 = fmul double %46, %51
  %53 = bitcast double %52 to i64
  %54 = bitcast double %25 to i64
  %55 = and i64 %54, -9223372036854775808
  %56 = xor i64 %55, %53
  %57 = bitcast i64 %56 to double
  %58 = and i64 %54, 9223372036854775807
  %59 = bitcast i64 %58 to double
  %60 = tail call double @llvm.fma.f64(double %59, double 0xBFE47CE4F76BED42, double 0x4007B141AAA12A9C) #6
  %61 = tail call double @llvm.fma.f64(double %60, double %59, double 0xC016EF22A5E505B3) #6
  %62 = tail call double @llvm.fma.f64(double %61, double %59, double 0x401828DC834C5911) #6
  %63 = tail call double @llvm.fma.f64(double %62, double %59, double 0xC00EDE0AF7836A8B) #6
  %64 = tail call double @llvm.fma.f64(double %63, double %59, double 0x4001D887ACE5AC54) #6
  %65 = fmul double %64, %64
  %66 = fmul double %65, %65
  %67 = fsub double -0.000000e+00, %64
  %68 = tail call double @llvm.fma.f64(double %59, double %66, double %67) #6
  %69 = fmul double %68, 0x3FD5555555555555
  %70 = fsub double %64, %69
  %71 = fmul double %70, %59
  %72 = fmul double %70, %71
  %73 = fmul double %72, 0x3FE5555555555555
  %74 = tail call double @llvm.fma.f64(double %72, double %70, double -1.000000e+00) #6
  %75 = fmul double %73, %74
  %76 = fsub double %72, %75
  %77 = fmul double %76, %57
  ret double %77
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_cbrtd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_cbrtd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_expm1d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_expm1d1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_log10d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FB0F63BD2A55192, double 0x3FB4381A2BF55D48) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FB10895F3EA9496, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FB8B4D992891F74, double 0x3FBFC3FA6F6D7821) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FC63C6277499B88, double 0x3FD287A7636F4570) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %52, 0x3FD34413509F79FF
  %54 = fsub double -0.000000e+00, %53
  %55 = tail call double @llvm.fma.f64(double %52, double 0x3FD34413509F79FF, double %54) #6
  %56 = tail call double @llvm.fma.f64(double %52, double 0xBC49DC1DA994FD21, double %55) #6
  %57 = fmul double %34, 0x3FEBCB7B1526E50E
  %58 = fsub double -0.000000e+00, %57
  %59 = tail call double @llvm.fma.f64(double %34, double 0x3FEBCB7B1526E50E, double %58) #6
  %60 = tail call double @llvm.fma.f64(double %42, double 0x3FEBCB7B1526E50E, double %59) #6
  %61 = tail call double @llvm.fma.f64(double %34, double 0x3C6A5B1DC915F38F, double %60) #6
  %62 = fadd double %53, %57
  %63 = fsub double %53, %62
  %64 = fadd double %57, %63
  %65 = fadd double %56, %64
  %66 = fadd double %65, %61
  %67 = fmul double %34, %43
  %68 = fmul double %67, %51
  %69 = fadd double %62, %68
  %70 = fsub double %62, %69
  %71 = fadd double %68, %70
  %72 = fadd double %66, %71
  %73 = fadd double %69, %72
  %74 = fcmp une double %4, 0x7FF0000000000000
  %75 = select i1 %74, double %73, double 0x7FF0000000000000
  %76 = fcmp oge double %4, 0.000000e+00
  %77 = select i1 %76, double %75, double 0x7FF8000000000000
  %78 = fcmp une double %4, 0.000000e+00
  %79 = select i1 %78, double %77, double 0xFFF0000000000000
  ret double %79
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_log2d1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = fmul double %21, %33
  %35 = fsub double -0.000000e+00, %34
  %36 = tail call double @llvm.fma.f64(double %33, double %21, double %35) #6
  %37 = fsub double -0.000000e+00, %27
  %38 = tail call double @llvm.fma.f64(double %37, double %33, double 1.000000e+00) #6
  %39 = fsub double -0.000000e+00, %32
  %40 = tail call double @llvm.fma.f64(double %39, double %33, double %38) #6
  %41 = tail call double @llvm.fma.f64(double %26, double %33, double %36) #6
  %42 = tail call double @llvm.fma.f64(double %34, double %40, double %41) #6
  %43 = fmul double %34, %34
  %44 = fmul double %43, %43
  %45 = fmul double %44, %44
  %46 = tail call double @llvm.fma.f64(double %43, double 0x3FCC2B7A962850E9, double 0x3FD0CAAEEB877481) #6
  %47 = tail call double @llvm.fma.f64(double %44, double 0x3FCC501739F17BA9, double %46) #6
  %48 = tail call double @llvm.fma.f64(double %43, double 0x3FD484AC6A7CB2DD, double 0x3FDA617636C2C254) #6
  %49 = tail call double @llvm.fma.f64(double %43, double 0x3FE2776C50E7EDE9, double 0x3FEEC709DC3A07B2) #6
  %50 = tail call double @llvm.fma.f64(double %44, double %48, double %49) #6
  %51 = tail call double @llvm.fma.f64(double %45, double %47, double %50) #6
  %52 = sitofp i32 %20 to double
  %53 = fmul double %34, %43
  %54 = insertelement <2 x double> <double 0x40071547652B82FE, double undef>, double %51, i32 1
  %55 = insertelement <2 x double> undef, double %34, i32 0
  %56 = insertelement <2 x double> %55, double %53, i32 1
  %57 = fmul <2 x double> %54, %56
  %58 = extractelement <2 x double> %57, i32 0
  %59 = fsub double -0.000000e+00, %58
  %60 = tail call double @llvm.fma.f64(double %34, double 0x40071547652B82FE, double %59) #6
  %61 = tail call double @llvm.fma.f64(double %42, double 0x40071547652B82FE, double %60) #6
  %62 = tail call double @llvm.fma.f64(double %34, double 0x3C5BEDDA32EBBCB1, double %61) #6
  %63 = fadd double %58, %52
  %64 = extractelement <2 x double> %57, i32 1
  %65 = fadd double %63, %64
  %66 = insertelement <2 x double> undef, double %63, i32 0
  %67 = insertelement <2 x double> %66, double %65, i32 1
  %68 = insertelement <2 x double> undef, double %52, i32 0
  %69 = insertelement <2 x double> %68, double %63, i32 1
  %70 = fsub <2 x double> %67, %69
  %71 = fsub <2 x double> %67, %70
  %72 = fsub <2 x double> %69, %71
  %73 = fsub <2 x double> %57, %70
  %74 = fadd <2 x double> %73, %72
  %75 = extractelement <2 x double> %74, i32 0
  %76 = fadd double %75, %62
  %77 = extractelement <2 x double> %74, i32 1
  %78 = fadd double %76, %77
  %79 = fadd double %65, %78
  %80 = fcmp une double %4, 0x7FF0000000000000
  %81 = select i1 %80, double %79, double 0x7FF0000000000000
  %82 = fcmp oge double %4, 0.000000e+00
  %83 = select i1 %82, double %81, double 0x7FF8000000000000
  %84 = fcmp une double %4, 0.000000e+00
  %85 = select i1 %84, double %83, double 0xFFF0000000000000
  ret double %85
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_log2d1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = tail call double @llvm.fma.f64(double %24, double 0x3FCC501739F17BA9, double 0x3FCC2B7A962850E9) #6
  %26 = tail call double @llvm.fma.f64(double %25, double %24, double 0x3FD0CAAEEB877481) #6
  %27 = tail call double @llvm.fma.f64(double %26, double %24, double 0x3FD484AC6A7CB2DD) #6
  %28 = tail call double @llvm.fma.f64(double %27, double %24, double 0x3FDA617636C2C254) #6
  %29 = tail call double @llvm.fma.f64(double %28, double %24, double 0x3FE2776C50E7EDE9) #6
  %30 = tail call double @llvm.fma.f64(double %29, double %24, double 0x3FEEC709DC3A07B2) #6
  %31 = sitofp i32 %20 to double
  %32 = fmul double %23, 0x40071547652B82FE
  %33 = fsub double -0.000000e+00, %32
  %34 = tail call double @llvm.fma.f64(double %23, double 0x40071547652B82FE, double %33) #6
  %35 = fadd double %32, %31
  %36 = fsub double %31, %35
  %37 = fadd double %32, %36
  %38 = fadd double %34, %37
  %39 = fmul double %23, %24
  %40 = fadd double %35, %38
  %41 = tail call double @llvm.fma.f64(double %30, double %39, double %40) #6
  %42 = fcmp une double %4, 0x7FF0000000000000
  %43 = select i1 %42, double %41, double 0x7FF0000000000000
  %44 = fcmp oge double %4, 0.000000e+00
  %45 = select i1 %44, double %43, double 0x7FF8000000000000
  %46 = fcmp une double %4, 0.000000e+00
  %47 = select i1 %46, double %45, double 0xFFF0000000000000
  ret double %47
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_log1pd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = fadd double %0, 1.000000e+00
  %3 = fcmp uge double %2, 0x10000000000000
  %4 = fmul double %2, 0x43F0000000000000
  %5 = select i1 %3, double %2, double %4
  %6 = fmul double %5, 0x3FF5555555555555
  %7 = bitcast double %6 to i64
  %8 = lshr i64 %7, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 1023, %10
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 52
  %14 = add i64 %13, 4607182418800017408
  %15 = bitcast i64 %14 to double
  %16 = fadd double %15, -1.000000e+00
  %17 = tail call double @llvm.fma.f64(double %0, double %15, double %16) #6
  %18 = select i1 %3, i32 -1023, i32 -1087
  %19 = add nsw i32 %10, %18
  %20 = sitofp i32 %19 to double
  %21 = fmul double %20, 0x3FE62E42FEFA39EF
  %22 = fsub double -0.000000e+00, %21
  %23 = tail call double @llvm.fma.f64(double %20, double 0x3FE62E42FEFA39EF, double %22) #6
  %24 = tail call double @llvm.fma.f64(double %20, double 0x3C7ABC9E3B39803F, double %23) #6
  %25 = fadd double %17, 2.000000e+00
  %26 = fsub double 2.000000e+00, %25
  %27 = fadd double %17, %26
  %28 = fdiv double 1.000000e+00, %25
  %29 = fmul double %17, %28
  %30 = fsub double -0.000000e+00, %29
  %31 = tail call double @llvm.fma.f64(double %28, double %17, double %30) #6
  %32 = fsub double -0.000000e+00, %25
  %33 = tail call double @llvm.fma.f64(double %32, double %28, double 1.000000e+00) #6
  %34 = fsub double -0.000000e+00, %27
  %35 = tail call double @llvm.fma.f64(double %34, double %28, double %33) #6
  %36 = tail call double @llvm.fma.f64(double %28, double 0.000000e+00, double %31) #6
  %37 = tail call double @llvm.fma.f64(double %29, double %35, double %36) #6
  %38 = fmul double %29, %29
  %39 = fmul double %38, %38
  %40 = fmul double %39, %39
  %41 = tail call double @llvm.fma.f64(double %38, double 0x3FC3872E67FE8E84, double 0x3FC747353A506035) #6
  %42 = tail call double @llvm.fma.f64(double %39, double 0x3FC39C4F5407567E, double %41) #6
  %43 = tail call double @llvm.fma.f64(double %38, double 0x3FCC71C0A65ECD8E, double 0x3FD249249A68A245) #6
  %44 = tail call double @llvm.fma.f64(double %38, double 0x3FD99999998F92EA, double 0x3FE55555555557AE) #6
  %45 = tail call double @llvm.fma.f64(double %39, double %43, double %44) #6
  %46 = tail call double @llvm.fma.f64(double %40, double %42, double %45) #6
  %47 = fmul double %29, 2.000000e+00
  %48 = fmul double %37, 2.000000e+00
  %49 = fadd double %21, %47
  %50 = fsub double %21, %49
  %51 = fadd double %47, %50
  %52 = fadd double %24, %51
  %53 = fadd double %48, %52
  %54 = fmul double %29, %38
  %55 = fmul double %54, %46
  %56 = fadd double %49, %55
  %57 = fsub double %49, %56
  %58 = fadd double %55, %57
  %59 = fadd double %53, %58
  %60 = fadd double %56, %59
  %61 = fcmp ule double %0, 0x7FAC7B1F3CAC7433
  %62 = select i1 %61, double %60, double 0x7FF0000000000000
  %63 = fcmp uge double %0, -1.000000e+00
  %64 = fcmp ord double %0, 0.000000e+00
  %65 = and i1 %63, %64
  %66 = select i1 %65, double %62, double 0x7FF8000000000000
  %67 = fcmp une double %0, -1.000000e+00
  %68 = select i1 %67, double %66, double 0xFFF0000000000000
  %69 = bitcast double %0 to i64
  %70 = icmp eq i64 %69, -9223372036854775808
  %71 = select i1 %70, double -0.000000e+00, double %68
  ret double %71
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_fabsd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_copysignd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %6, %4
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_fmaxd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp ogt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_fmind1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp olt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_fdimd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fsub double %0, %1
  %4 = fcmp uge double %3, 0.000000e+00
  %5 = fcmp une double %0, %1
  %6 = and i1 %5, %4
  %7 = select i1 %6, double %3, double 0.000000e+00
  ret double %7
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_truncd1_purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.trunc.f64(double %0) #6
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_floord1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = fcmp uge double %11, 0.000000e+00
  %13 = fadd double %11, 1.000000e+00
  %14 = select i1 %12, double %11, double %13
  %15 = fcmp oeq double %0, 0x7FF0000000000000
  %16 = fcmp oeq double %0, 0xFFF0000000000000
  %17 = or i1 %15, %16
  %18 = bitcast double %0 to i64
  %19 = and i64 %18, 9223372036854775807
  %20 = bitcast i64 %19 to double
  %21 = fcmp oge double %20, 0x4330000000000000
  %22 = or i1 %17, %21
  %23 = fsub double %0, %14
  %24 = bitcast double %23 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = and i64 %18, -9223372036854775808
  %27 = or i64 %25, %26
  %28 = bitcast i64 %27 to double
  %29 = select i1 %22, double %0, double %28
  ret double %29
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_ceild1_purecfma(double) local_unnamed_addr #1 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = tail call double @llvm.trunc.f64(double %2) #6
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %0, %6
  %8 = tail call double @llvm.trunc.f64(double %7) #6
  %9 = fptosi double %8 to i32
  %10 = sitofp i32 %9 to double
  %11 = fsub double %7, %10
  %12 = fcmp ugt double %11, 0.000000e+00
  %13 = fadd double %11, -1.000000e+00
  %14 = select i1 %12, double %13, double %11
  %15 = fcmp oeq double %0, 0x7FF0000000000000
  %16 = fcmp oeq double %0, 0xFFF0000000000000
  %17 = or i1 %15, %16
  %18 = bitcast double %0 to i64
  %19 = and i64 %18, 9223372036854775807
  %20 = bitcast i64 %19 to double
  %21 = fcmp oge double %20, 0x4330000000000000
  %22 = or i1 %17, %21
  %23 = fsub double %0, %14
  %24 = bitcast double %23 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = and i64 %18, -9223372036854775808
  %27 = or i64 %25, %26
  %28 = bitcast i64 %27 to double
  %29 = select i1 %22, double %0, double %28
  ret double %29
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_roundd1_purecfma(double) local_unnamed_addr #1 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fmul double %2, 0x3E00000000000000
  %4 = tail call double @llvm.trunc.f64(double %3) #6
  %5 = fptosi double %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 0x41E0000000000000
  %8 = fsub double %2, %7
  %9 = tail call double @llvm.trunc.f64(double %8) #6
  %10 = fptosi double %9 to i32
  %11 = sitofp i32 %10 to double
  %12 = fsub double %8, %11
  %13 = fcmp ugt double %2, 0.000000e+00
  %14 = fcmp une double %12, 0.000000e+00
  %15 = fadd double %2, -1.000000e+00
  %16 = or i1 %13, %14
  %17 = select i1 %16, double %2, double %15
  %18 = fcmp uge double %12, 0.000000e+00
  %19 = fadd double %12, 1.000000e+00
  %20 = select i1 %18, double %12, double %19
  %21 = fcmp une double %0, 0x3FDFFFFFFFFFFFFF
  %22 = select i1 %21, double %17, double 0.000000e+00
  %23 = fcmp oeq double %0, 0x7FF0000000000000
  %24 = fcmp oeq double %0, 0xFFF0000000000000
  %25 = or i1 %23, %24
  %26 = bitcast double %0 to i64
  %27 = and i64 %26, 9223372036854775807
  %28 = bitcast i64 %27 to double
  %29 = fcmp oge double %28, 0x4330000000000000
  %30 = or i1 %25, %29
  %31 = fsub double %22, %20
  %32 = bitcast double %31 to i64
  %33 = and i64 %32, 9223372036854775807
  %34 = and i64 %26, -9223372036854775808
  %35 = or i64 %33, %34
  %36 = bitcast i64 %35 to double
  %37 = select i1 %30, double %0, double %36
  ret double %37
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_rintd1_purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @llvm.rint.f64(double %0) #6
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_nextafterd1_purecfma(double, double) local_unnamed_addr #0 {
  %3 = fcmp une double %0, 0.000000e+00
  %4 = bitcast double %1 to i64
  %5 = and i64 %4, -9223372036854775808
  %6 = bitcast i64 %5 to double
  %7 = select i1 %3, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = ashr i64 %8, 63
  %10 = trunc i64 %9 to i32
  %11 = fcmp ole double %7, %1
  %12 = sext i1 %11 to i32
  %13 = xor i64 %8, 9223372036854775807
  %14 = and i64 %13, -4294967296
  %15 = add i64 %13, 1
  %16 = trunc i64 %15 to i32
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i64
  %19 = shl nuw nsw i64 %18, 32
  %20 = add i64 %19, %14
  %21 = and i64 %15, 4294967295
  %22 = or i64 %20, %21
  %23 = icmp eq i32 %12, %10
  %24 = select i1 %23, i64 %8, i64 %22
  %25 = fcmp une double %7, %1
  %26 = zext i1 %25 to i64
  %27 = sub i64 %24, %26
  %28 = and i64 %24, -4294967296
  %29 = and i64 %27, 4294967295
  %30 = trunc i64 %27 to i32
  %31 = icmp eq i32 %30, -1
  %32 = and i1 %25, %31
  %33 = select i1 %32, i64 -4294967296, i64 0
  %34 = add i64 %33, %28
  %35 = or i64 %34, %29
  %36 = xor i64 %35, 9223372036854775807
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 1
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %42, %37
  %44 = and i64 %38, 4294967295
  %45 = or i64 %43, %44
  %46 = select i1 %23, i64 %35, i64 %45
  %47 = bitcast i64 %46 to double
  %48 = fcmp une double %47, 0.000000e+00
  %49 = fcmp oeq double %7, 0.000000e+00
  %50 = and i64 %8, -9223372036854775808
  %51 = bitcast i64 %50 to double
  %52 = or i1 %49, %48
  %53 = select i1 %52, double %47, double %51
  %54 = fcmp une double %7, 0.000000e+00
  %55 = fcmp une double %1, 0.000000e+00
  %56 = or i1 %55, %54
  %57 = select i1 %56, double %53, double %1
  %58 = fcmp ord double %7, %1
  %59 = select i1 %58, double %57, double 0x7FF8000000000000
  ret double %59
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_finz_frfrexpd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = and i64 %8, -9218868437227405313
  %10 = or i64 %9, 4602678819172646912
  %11 = fcmp une double %7, 0x7FF0000000000000
  %12 = fcmp une double %7, 0xFFF0000000000000
  %13 = and i64 %8, -9223372036854775808
  %14 = or i64 %13, 9218868437227405312
  %15 = and i1 %12, %11
  %16 = select i1 %15, i64 %10, i64 %14
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %7, 0.000000e+00
  %19 = select i1 %18, double %17, double %7
  ret double %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_finz_expfrexpd1_purecfma(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = add nsw i32 %11, -1022
  %13 = fcmp ueq double %7, 0.000000e+00
  %14 = fcmp oeq double %7, 0x7FF0000000000000
  %15 = fcmp oeq double %7, 0xFFF0000000000000
  %16 = or i1 %14, %15
  %17 = or i1 %13, %16
  %18 = select i1 %17, i32 0, i32 %12
  ret i32 %18
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_fmad1_purecfma(double, double, double) local_unnamed_addr #1 {
  %4 = tail call double @llvm.fma.f64(double %0, double %1, double %2) #6
  ret double %4
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_sqrtd1_u05purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0.000000e+00
  %3 = select i1 %2, double %0, double 0x7FF8000000000000
  %4 = fcmp uge double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double %3, double %5
  %7 = select i1 %4, double 1.000000e+00, double 0x37F0000000000000
  %8 = bitcast double %6 to i64
  %9 = lshr i64 %8, 33
  %10 = lshr i64 %8, 1
  %11 = shl nuw nsw i64 %9, 32
  %12 = and i64 %10, 2147483647
  %13 = sub nsw i64 3890098394, %12
  %14 = sub nsw i64 6910470738111508698, %11
  %15 = and i64 %14, -4294967296
  %16 = or i64 %15, %13
  %17 = bitcast i64 %16 to double
  %18 = fmul double %6, %17
  %19 = fmul double %17, 5.000000e-01
  %20 = fsub double -0.000000e+00, %18
  %21 = tail call double @llvm.fma.f64(double %20, double %19, double 5.000000e-01) #6
  %22 = tail call double @llvm.fma.f64(double %18, double %21, double %18) #6
  %23 = tail call double @llvm.fma.f64(double %19, double %21, double %19) #6
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double 5.000000e-01) #6
  %26 = tail call double @llvm.fma.f64(double %22, double %25, double %22) #6
  %27 = tail call double @llvm.fma.f64(double %23, double %25, double %23) #6
  %28 = fsub double -0.000000e+00, %26
  %29 = tail call double @llvm.fma.f64(double %28, double %27, double 5.000000e-01) #6
  %30 = tail call double @llvm.fma.f64(double %26, double %29, double %26) #6
  %31 = tail call double @llvm.fma.f64(double %27, double %29, double %27) #6
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %32, double %31, double 1.500000e+00) #6
  %34 = fadd double %31, %31
  %35 = fmul double %34, %33
  %36 = fmul double %6, %35
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %35, double %6, double %37) #6
  %39 = fsub double -0.000000e+00, %35
  %40 = tail call double @llvm.fma.f64(double %39, double %36, double 1.000000e+00) #6
  %41 = tail call double @llvm.fma.f64(double %39, double %38, double %40) #6
  %42 = fmul double %36, 5.000000e-01
  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %38) #6
  %44 = fadd double %36, %43
  %45 = fmul double %7, %44
  %46 = fcmp une double %6, 0.000000e+00
  %47 = fcmp une double %6, 0x7FF0000000000000
  %48 = and i1 %46, %47
  %49 = select i1 %48, double %45, double %6
  %50 = fcmp uge double %6, 0.000000e+00
  %51 = select i1 %50, double %49, double 0x7FF8000000000000
  ret double %51
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_sqrtd1_u35purecfma(double) local_unnamed_addr #1 {
  %2 = fcmp uge double %0, 0.000000e+00
  %3 = select i1 %2, double %0, double 0x7FF8000000000000
  %4 = fcmp uge double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double %3, double %5
  %7 = select i1 %4, double 1.000000e+00, double 0x37F0000000000000
  %8 = bitcast double %6 to i64
  %9 = lshr i64 %8, 33
  %10 = lshr i64 %8, 1
  %11 = shl nuw nsw i64 %9, 32
  %12 = and i64 %10, 2147483647
  %13 = sub nsw i64 3890098394, %12
  %14 = sub nsw i64 6910470738111508698, %11
  %15 = and i64 %14, -4294967296
  %16 = or i64 %15, %13
  %17 = bitcast i64 %16 to double
  %18 = fmul double %6, %17
  %19 = fmul double %17, 5.000000e-01
  %20 = fsub double -0.000000e+00, %18
  %21 = tail call double @llvm.fma.f64(double %20, double %19, double 5.000000e-01) #6
  %22 = tail call double @llvm.fma.f64(double %18, double %21, double %18) #6
  %23 = tail call double @llvm.fma.f64(double %19, double %21, double %19) #6
  %24 = fsub double -0.000000e+00, %22
  %25 = tail call double @llvm.fma.f64(double %24, double %23, double 5.000000e-01) #6
  %26 = tail call double @llvm.fma.f64(double %22, double %25, double %22) #6
  %27 = tail call double @llvm.fma.f64(double %23, double %25, double %23) #6
  %28 = fsub double -0.000000e+00, %26
  %29 = tail call double @llvm.fma.f64(double %28, double %27, double 5.000000e-01) #6
  %30 = tail call double @llvm.fma.f64(double %26, double %29, double %26) #6
  %31 = tail call double @llvm.fma.f64(double %27, double %29, double %27) #6
  %32 = fsub double -0.000000e+00, %30
  %33 = tail call double @llvm.fma.f64(double %32, double %31, double 1.500000e+00) #6
  %34 = fadd double %31, %31
  %35 = fmul double %34, %33
  %36 = fmul double %6, %35
  %37 = fsub double -0.000000e+00, %36
  %38 = tail call double @llvm.fma.f64(double %35, double %6, double %37) #6
  %39 = fsub double -0.000000e+00, %35
  %40 = tail call double @llvm.fma.f64(double %39, double %36, double 1.000000e+00) #6
  %41 = tail call double @llvm.fma.f64(double %39, double %38, double %40) #6
  %42 = fmul double %36, 5.000000e-01
  %43 = tail call double @llvm.fma.f64(double %42, double %41, double %38) #6
  %44 = fadd double %36, %43
  %45 = fmul double %7, %44
  %46 = fcmp une double %6, 0.000000e+00
  %47 = fcmp une double %6, 0x7FF0000000000000
  %48 = and i1 %46, %47
  %49 = select i1 %48, double %45, double %6
  %50 = fcmp uge double %6, 0.000000e+00
  %51 = select i1 %50, double %49, double 0x7FF8000000000000
  ret double %51
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_hypotd1_u05purecfma(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fcmp uge double %12, 0x10000000000000
  %14 = fmul double %10, 0x4350000000000000
  %15 = select i1 %13, double %10, double %14
  %16 = fmul double %12, 0x4350000000000000
  %17 = select i1 %13, double %12, double %16
  %18 = fdiv double 1.000000e+00, %17
  %19 = fmul double %15, %18
  %20 = fsub double -0.000000e+00, %19
  %21 = tail call double @llvm.fma.f64(double %18, double %15, double %20) #6
  %22 = fsub double -0.000000e+00, %17
  %23 = tail call double @llvm.fma.f64(double %22, double %18, double 1.000000e+00) #6
  %24 = tail call double @llvm.fma.f64(double %18, double -0.000000e+00, double %23) #6
  %25 = tail call double @llvm.fma.f64(double %18, double 0.000000e+00, double %21) #6
  %26 = tail call double @llvm.fma.f64(double %19, double %24, double %25) #6
  %27 = fmul double %19, %19
  %28 = fadd double %19, %19
  %29 = fsub double -0.000000e+00, %27
  %30 = tail call double @llvm.fma.f64(double %19, double %19, double %29) #6
  %31 = tail call double @llvm.fma.f64(double %28, double %26, double %30) #6
  %32 = fadd double %27, 1.000000e+00
  %33 = fsub double %32, %27
  %34 = fsub double %32, %33
  %35 = fsub double %27, %34
  %36 = fsub double 1.000000e+00, %33
  %37 = fadd double %36, %35
  %38 = fadd double %31, %37
  %39 = fadd double %32, %38
  %40 = tail call double @sqrt(double %39) #6
  %41 = fmul double %40, %40
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.fma.f64(double %40, double %40, double %42) #6
  %44 = fadd double %32, %41
  %45 = fsub double %44, %32
  %46 = fsub double %44, %45
  %47 = fsub double %32, %46
  %48 = fsub double %41, %45
  %49 = fadd double %48, %47
  %50 = fadd double %38, %43
  %51 = fadd double %50, %49
  %52 = fdiv double 1.000000e+00, %40
  %53 = fsub double -0.000000e+00, %40
  %54 = tail call double @llvm.fma.f64(double %53, double %52, double 1.000000e+00) #6
  %55 = fmul double %52, %54
  %56 = fmul double %52, %44
  %57 = fsub double -0.000000e+00, %56
  %58 = tail call double @llvm.fma.f64(double %44, double %52, double %57) #6
  %59 = tail call double @llvm.fma.f64(double %51, double %52, double %58) #6
  %60 = tail call double @llvm.fma.f64(double %44, double %55, double %59) #6
  %61 = fmul double %56, 5.000000e-01
  %62 = fmul double %60, 5.000000e-01
  %63 = fmul double %12, %61
  %64 = fsub double -0.000000e+00, %63
  %65 = tail call double @llvm.fma.f64(double %61, double %12, double %64) #6
  %66 = tail call double @llvm.fma.f64(double %62, double %12, double %65) #6
  %67 = fadd double %63, %66
  %68 = fcmp ord double %67, 0.000000e+00
  %69 = select i1 %68, double %67, double 0x7FF0000000000000
  %70 = fcmp une double %10, 0.000000e+00
  %71 = select i1 %70, double %69, double %12
  %72 = fcmp ord double %8, %5
  %73 = select i1 %72, double %71, double 0x7FF8000000000000
  %74 = fcmp une double %5, 0x7FF0000000000000
  %75 = fcmp une double %8, 0x7FF0000000000000
  %76 = and i1 %74, %75
  %77 = select i1 %76, double %73, double 0x7FF0000000000000
  ret double %77
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_hypotd1_u35purecfma(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fdiv double %10, %12
  %14 = tail call double @llvm.fma.f64(double %13, double %13, double 1.000000e+00) #6
  %15 = tail call double @sqrt(double %14) #6
  %16 = fmul double %12, %15
  %17 = fcmp une double %10, 0.000000e+00
  %18 = select i1 %17, double %16, double %12
  %19 = fcmp ord double %8, %5
  %20 = select i1 %19, double %18, double 0x7FF8000000000000
  %21 = fcmp une double %5, 0x7FF0000000000000
  %22 = fcmp une double %8, 0x7FF0000000000000
  %23 = and i1 %21, %22
  %24 = select i1 %23, double %20, double 0x7FF0000000000000
  ret double %24
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_fmodd1_purecfma(double, double) local_unnamed_addr #1 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 0x10000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = select i1 %9, double %5, double %10
  %12 = fmul double %8, 0x4350000000000000
  %13 = select i1 %9, double %8, double %12
  %14 = fdiv double 1.000000e+00, %13
  %15 = bitcast double %14 to i64
  %16 = add i64 %15, -1
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %14, 0.000000e+00
  %19 = select i1 %18, double %17, double 0.000000e+00
  %20 = fmul double %13, 3.000000e+00
  %21 = fadd double %13, %13
  %22 = fsub double -0.000000e+00, %13
  br label %23

; <label>:23:                                     ; preds = %23, %2
  %24 = phi double [ 0.000000e+00, %2 ], [ %54, %23 ]
  %25 = phi double [ %11, %2 ], [ %52, %23 ]
  %26 = phi i32 [ 0, %2 ], [ %56, %23 ]
  %27 = bitcast double %25 to i64
  %28 = add i64 %27, -1
  %29 = bitcast i64 %28 to double
  %30 = fcmp une double %25, 0.000000e+00
  %31 = select i1 %30, double %29, double 0.000000e+00
  %32 = fmul double %19, %31
  %33 = tail call double @llvm.trunc.f64(double %32) #6
  %34 = fcmp ogt double %20, %25
  %35 = fcmp oge double %25, %13
  %36 = and i1 %35, %34
  %37 = select i1 %36, double 2.000000e+00, double %33
  %38 = fcmp ogt double %21, %25
  %39 = and i1 %35, %38
  %40 = select i1 %39, double 1.000000e+00, double %37
  %41 = fmul double %40, %22
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @llvm.fma.f64(double %40, double %22, double %42) #6
  %44 = fadd double %25, %41
  %45 = fsub double %44, %25
  %46 = fsub double %44, %45
  %47 = fsub double %25, %46
  %48 = fsub double %41, %45
  %49 = fadd double %48, %47
  %50 = fadd double %24, %43
  %51 = fadd double %50, %49
  %52 = fadd double %44, %51
  %53 = fsub double %44, %52
  %54 = fadd double %51, %53
  %55 = fcmp uge double %52, %13
  %56 = add nuw nsw i32 %26, 1
  %57 = icmp ult i32 %56, 21
  %58 = and i1 %57, %55
  br i1 %58, label %23, label %59

; <label>:59:                                     ; preds = %23
  %60 = select i1 %9, double 1.000000e+00, double 0x3C90000000000000
  %61 = fmul double %60, %52
  %62 = fadd double %52, %54
  %63 = fcmp une double %62, %13
  %64 = bitcast double %61 to i64
  %65 = select i1 %63, i64 %64, i64 0
  %66 = and i64 %3, -9223372036854775808
  %67 = xor i64 %65, %66
  %68 = bitcast i64 %67 to double
  %69 = fcmp uge double %11, %13
  %70 = select i1 %69, double %68, double %0
  %71 = fcmp une double %13, 0.000000e+00
  %72 = select i1 %71, double %70, double 0x7FF8000000000000
  ret double %72
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_remainderd1_purecfma(double, double) local_unnamed_addr #1 {
  %3 = tail call double @Sleef_remainderd1_purecfma(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_tgammad1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_tgammad1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_finz_lgammad1_u10purecfma(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_lgammad1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_erfd1_u10purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_erfd1_u10purecfma(double %0)
  ret double %2
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_finz_erfcd1_u15purecfma(double) local_unnamed_addr #1 {
  %2 = tail call double @Sleef_erfcd1_u15purecfma(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_getIntd1_purecfma(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 10
  %4 = sext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd1_purecfma(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.rint.f64(double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fma.f64(double, double, double) #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #4

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.rint.v2f64(<2 x double>) #4

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.trunc.v2f64(<2 x double>) #4

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4, !4, i64 0}
!4 = !{!"double", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempi: argument 0"}
!9 = distinct !{!9, !"rempi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempi: argument 0"}
!12 = distinct !{!12, !"rempi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempi: argument 0"}
!15 = distinct !{!15, !"rempi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempi: argument 0"}
!18 = distinct !{!18, !"rempi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempi: argument 0"}
!21 = distinct !{!21, !"rempi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempi: argument 0"}
!24 = distinct !{!24, !"rempi"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempi: argument 0"}
!27 = distinct !{!27, !"rempi"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempi: argument 0"}
!30 = distinct !{!30, !"rempi"}
