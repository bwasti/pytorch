; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }
%struct.vdouble2 = type { double, double }

@.str = private unnamed_addr constant [14 x i8] c"Pure C scalar\00", align 1
@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_ldexpd1_purec(double, i32) local_unnamed_addr #0 {
  %3 = ashr i32 %1, 31
  %4 = add nsw i32 %3, %1
  %5 = ashr i32 %4, 9
  %6 = sub nsw i32 %5, %3
  %7 = shl nsw i32 %6, 7
  %8 = shl i32 %6, 9
  %9 = add nsw i32 %7, 1023
  %10 = icmp sgt i32 %6, -8
  %11 = select i1 %10, i32 %9, i32 0
  %12 = icmp slt i32 %11, 2047
  %13 = select i1 %12, i32 %11, i32 2047
  %14 = zext i32 %13 to i64
  %15 = shl i64 %14, 52
  %16 = bitcast i64 %15 to double
  %17 = fmul double %16, %0
  %18 = fmul double %17, %16
  %19 = fmul double %18, %16
  %20 = fmul double %19, %16
  %21 = add i32 %1, 1023
  %22 = sub i32 %21, %8
  %23 = zext i32 %22 to i64
  %24 = shl i64 %23, 52
  %25 = bitcast i64 %24 to double
  %26 = fmul double %20, %25
  ret double %26
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_ilogbd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = sitofp i32 %12 to double
  %14 = fcmp une double %0, 0.000000e+00
  %15 = select i1 %14, double %13, double 0xC1E0000000000000
  %16 = fcmp ord double %0, 0.000000e+00
  %17 = fcmp une double %0, 0x7FF0000000000000
  %18 = fcmp une double %0, 0xFFF0000000000000
  %19 = and i1 %18, %17
  %20 = and i1 %16, %19
  %21 = select i1 %20, double %15, double 0x41DFFFFFFFC00000
  %22 = fcmp ogt double %21, 0.000000e+00
  %23 = select i1 %22, double 5.000000e-01, double -5.000000e-01
  %24 = fadd double %21, %23
  %25 = bitcast double %24 to i64
  %26 = fptosi double %24 to i32
  %27 = and i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = sub i64 %25, %28
  %30 = bitcast i64 %29 to double
  %31 = fptosi double %30 to i32
  ret i32 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sind1_u35purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %33, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x400921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0x3CA1A62633145C07
  %32 = fsub double %30, %31
  br label %318

; <label>:33:                                     ; preds = %1
  %34 = fcmp uge double %4, 1.000000e+14
  br i1 %34, label %78, label %35, !prof !2

; <label>:35:                                     ; preds = %33
  %36 = fmul double %0, 0x3E545F306DC9C883
  %37 = fptosi double %36 to i32
  %38 = sitofp i32 %37 to double
  %39 = fmul double %38, 0x4170000000000000
  %40 = fmul double %0, 0x3FD45F306DC9C883
  %41 = fsub double %40, %39
  %42 = fcmp ogt double %41, 0.000000e+00
  %43 = select i1 %42, double 5.000000e-01, double -5.000000e-01
  %44 = fadd double %41, %43
  %45 = bitcast double %44 to i64
  %46 = fptosi double %44 to i32
  %47 = and i32 %46, 1
  %48 = zext i32 %47 to i64
  %49 = sub i64 %45, %48
  %50 = bitcast i64 %49 to double
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = icmp sgt i32 %51, 0
  %54 = select i1 %53, double 5.000000e-01, double -5.000000e-01
  %55 = fadd double %54, %52
  %56 = bitcast double %55 to i64
  %57 = fptosi double %55 to i32
  %58 = and i32 %57, 1
  %59 = zext i32 %58 to i64
  %60 = sub i64 %56, %59
  %61 = bitcast i64 %60 to double
  %62 = fptosi double %61 to i32
  %63 = fmul double %39, 0x400921FB50000000
  %64 = fsub double %0, %63
  %65 = fmul double %52, 0x400921FB50000000
  %66 = fsub double %64, %65
  %67 = fmul double %39, 0x3E6110B460000000
  %68 = fsub double %66, %67
  %69 = fmul double %52, 0x3E6110B460000000
  %70 = fsub double %68, %69
  %71 = fmul double %39, 0x3CA1A62630000000
  %72 = fsub double %70, %71
  %73 = fmul double %52, 0x3CA1A62630000000
  %74 = fsub double %72, %73
  %75 = fadd double %39, %52
  %76 = fmul double %75, 0x3AF8A2E03707344A
  %77 = fsub double %74, %76
  br label %318

; <label>:78:                                     ; preds = %33
  %79 = lshr i64 %2, 52
  %80 = trunc i64 %79 to i32
  %81 = and i32 %80, 2047
  %82 = add nsw i32 %81, -1078
  %83 = icmp ugt i32 %81, 1723
  %84 = select i1 %83, i64 -288230376151711744, i64 0
  %85 = and i64 %2, -4294967296
  %86 = add i64 %84, %85
  %87 = and i64 %2, 4294967295
  %88 = or i64 %86, %87
  %89 = bitcast i64 %88 to double
  %90 = ashr i32 %82, 31
  %91 = xor i32 %90, 1073741823
  %92 = and i32 %91, %82
  %93 = shl i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !3, !noalias !7
  %97 = bitcast double %96 to i64
  %98 = and i64 %97, -134217728
  %99 = bitcast i64 %98 to double
  %100 = fsub double %96, %99
  %101 = fmul double %96, %89
  %102 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %94
  %103 = load double, double* %102, align 8, !tbaa !3, !noalias !7
  %104 = bitcast double %103 to i64
  %105 = insertelement <2 x i64> undef, i64 %104, i32 0
  %106 = insertelement <2 x i64> %105, i64 %88, i32 1
  %107 = and <2 x i64> %106, <i64 -134217728, i64 -134217728>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = extractelement <2 x double> %108, i32 1
  %110 = fmul double %109, %99
  %111 = fsub double %110, %101
  %112 = bitcast double %101 to i64
  %113 = and i64 %112, -9223372036854775808
  %114 = or i64 %113, 4841369599423283200
  %115 = bitcast i64 %114 to double
  %116 = fmul double %101, 4.000000e+00
  %117 = bitcast double %116 to i64
  %118 = and i64 %117, 9223372036854775807
  %119 = bitcast i64 %118 to double
  %120 = fcmp ule double %119, 0x4330000000000000
  %121 = fadd double %116, %115
  %122 = fsub double %121, %115
  %123 = bitcast double %122 to i64
  %124 = or i64 %113, %123
  %125 = bitcast i64 %124 to double
  %126 = select i1 %120, double %125, double %116
  %127 = and i64 %112, 9223372036854775807
  %128 = bitcast i64 %127 to double
  %129 = fcmp ule double %128, 0x4330000000000000
  %130 = fadd double %101, %115
  %131 = fsub double %130, %115
  %132 = bitcast double %131 to i64
  %133 = or i64 %113, %132
  %134 = bitcast i64 %133 to double
  %135 = select i1 %129, double %134, double %101
  %136 = fmul double %126, 2.500000e-01
  %137 = fsub double %101, %136
  %138 = fmul double %135, 4.000000e+00
  %139 = fsub double %126, %138
  %140 = fptosi double %139 to i32
  %141 = insertelement <2 x double> undef, double %103, i32 0
  %142 = insertelement <2 x double> %141, double %89, i32 1
  %143 = fsub <2 x double> %142, %108
  %144 = fmul double %103, %89
  %145 = shufflevector <2 x double> %108, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %146 = extractelement <2 x double> %143, i32 1
  %147 = shufflevector <2 x double> %145, <2 x double> %143, <2 x i32> <i32 0, i32 3>
  %148 = extractelement <2 x double> %108, i32 0
  %149 = insertelement <2 x double> undef, double %148, i32 0
  %150 = insertelement <2 x double> %149, double %99, i32 1
  %151 = fmul <2 x double> %147, %150
  %152 = insertelement <2 x double> undef, double %146, i32 0
  %153 = insertelement <2 x double> %152, double %100, i32 1
  %154 = fmul <2 x double> %153, %108
  %155 = insertelement <2 x double> %145, double %100, i32 1
  %156 = fmul <2 x double> %143, %155
  %157 = insertelement <2 x double> undef, double %144, i32 0
  %158 = insertelement <2 x double> %157, double %111, i32 1
  %159 = fsub <2 x double> %151, %158
  %160 = fadd <2 x double> %151, %158
  %161 = shufflevector <2 x double> %159, <2 x double> %160, <2 x i32> <i32 0, i32 3>
  %162 = fadd <2 x double> %154, %161
  %163 = fadd <2 x double> %156, %162
  %164 = extractelement <2 x double> %163, i32 1
  %165 = fadd double %164, %137
  %166 = fsub double %137, %165
  %167 = extractelement <2 x double> %143, i32 0
  %168 = fmul double %146, %167
  %169 = insertelement <2 x double> undef, double %168, i32 0
  %170 = insertelement <2 x double> %169, double %166, i32 1
  %171 = fadd <2 x double> %170, %163
  %172 = fadd double %144, %165
  %173 = fsub double %172, %165
  %174 = fsub double %172, %173
  %175 = fsub double %144, %173
  %176 = extractelement <2 x double> %171, i32 0
  %177 = extractelement <2 x double> %171, i32 1
  %178 = fadd double %176, %177
  %179 = bitcast double %172 to i64
  %180 = and i64 %179, -9223372036854775808
  %181 = or i64 %180, 4841369599423283200
  %182 = bitcast i64 %181 to double
  %183 = fmul double %172, 4.000000e+00
  %184 = bitcast double %183 to i64
  %185 = and i64 %184, 9223372036854775807
  %186 = bitcast i64 %185 to double
  %187 = fcmp ule double %186, 0x4330000000000000
  %188 = fadd double %183, %182
  %189 = fsub double %188, %182
  %190 = bitcast double %189 to i64
  %191 = or i64 %180, %190
  %192 = bitcast i64 %191 to double
  %193 = select i1 %187, double %192, double %183
  %194 = and i64 %179, 9223372036854775807
  %195 = bitcast i64 %194 to double
  %196 = fcmp ule double %195, 0x4330000000000000
  %197 = fadd double %172, %182
  %198 = fsub double %197, %182
  %199 = bitcast double %198 to i64
  %200 = or i64 %180, %199
  %201 = bitcast i64 %200 to double
  %202 = select i1 %196, double %201, double %172
  %203 = fmul double %193, 2.500000e-01
  %204 = fsub double %172, %203
  %205 = fmul double %202, 4.000000e+00
  %206 = fsub double %193, %205
  %207 = fptosi double %206 to i32
  %208 = add nsw i32 %207, %140
  %209 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %94
  %210 = load double, double* %209, align 8, !tbaa !3, !noalias !7
  %211 = bitcast double %210 to i64
  %212 = and i64 %211, -134217728
  %213 = bitcast i64 %212 to double
  %214 = fsub double %210, %213
  %215 = fmul double %210, %89
  %216 = fmul double %109, %213
  %217 = fmul double %214, %109
  %218 = fmul double %146, %213
  %219 = insertelement <2 x double> undef, double %216, i32 0
  %220 = insertelement <2 x double> %219, double %165, i32 1
  %221 = insertelement <2 x double> undef, double %215, i32 0
  %222 = insertelement <2 x double> %221, double %174, i32 1
  %223 = fsub <2 x double> %220, %222
  %224 = insertelement <2 x double> undef, double %217, i32 0
  %225 = insertelement <2 x double> %224, double %175, i32 1
  %226 = fadd <2 x double> %225, %223
  %227 = insertelement <2 x double> undef, double %218, i32 0
  %228 = insertelement <2 x double> %227, double %178, i32 1
  %229 = fadd <2 x double> %228, %226
  %230 = extractelement <2 x double> %229, i32 1
  %231 = fadd double %230, %204
  %232 = fsub double %204, %231
  %233 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %94
  %234 = load double, double* %233, align 8, !tbaa !3, !noalias !7
  %235 = fmul double %146, %214
  %236 = fmul double %234, %89
  %237 = insertelement <2 x double> undef, double %235, i32 0
  %238 = insertelement <2 x double> %237, double %232, i32 1
  %239 = fadd <2 x double> %238, %229
  %240 = extractelement <2 x double> %239, i32 0
  %241 = fadd double %236, %240
  %242 = fadd double %215, %231
  %243 = fsub double %242, %231
  %244 = fsub double %242, %243
  %245 = fsub double %231, %244
  %246 = fsub double %215, %243
  %247 = fadd double %246, %245
  %248 = extractelement <2 x double> %239, i32 1
  %249 = fadd double %241, %248
  %250 = fadd double %249, %247
  %251 = fadd double %242, %250
  %252 = fsub double %242, %251
  %253 = fadd double %250, %252
  %254 = bitcast double %251 to i64
  %255 = and i64 %254, -134217728
  %256 = bitcast i64 %255 to double
  %257 = fsub double %251, %256
  %258 = fmul double %251, 0x401921FB54442D18
  %259 = fmul double %256, 0x401921FB50000000
  %260 = fmul double %257, 0x401921FB50000000
  %261 = fmul double %256, 0x3E7110B460000000
  %262 = fmul double %257, 0x3E7110B460000000
  %263 = fmul double %251, 0x3CB1A62633145C07
  %264 = fmul double %253, 0x401921FB54442D18
  %265 = fsub double %259, %258
  %266 = fadd double %260, %265
  %267 = fadd double %261, %266
  %268 = fadd double %262, %267
  %269 = fadd double %263, %268
  %270 = fadd double %264, %269
  %271 = and i64 %88, 9223372036854775807
  %272 = bitcast i64 %271 to double
  %273 = fcmp olt double %272, 0x3FE6666666666666
  %274 = select i1 %273, double %89, double %258
  %275 = bitcast double %270 to i64
  %276 = select i1 %273, i64 4294967295, i64 0
  %277 = shl nuw i64 %276, 32
  %278 = or i64 %277, %276
  %279 = xor i64 %278, -1
  %280 = and i64 %275, %279
  %281 = shl i32 %208, 1
  %282 = and i32 %281, 6
  %283 = fcmp ule double %274, 0.000000e+00
  %284 = select i1 %283, i32 1, i32 2
  %285 = add nuw nsw i32 %284, %282
  %286 = lshr i32 %285, 2
  %287 = bitcast double %274 to i64
  %288 = and i64 %287, -9223372036854775808
  %289 = xor i64 %288, -4613618979930100456
  %290 = bitcast i64 %289 to double
  %291 = xor i64 %288, -4858919839960114169
  %292 = bitcast i64 %291 to double
  %293 = bitcast i64 %280 to double
  %294 = fadd double %274, %290
  %295 = fsub double %294, %274
  %296 = fsub double %294, %295
  %297 = fsub double %274, %296
  %298 = fsub double %290, %295
  %299 = fadd double %298, %297
  %300 = fadd double %292, %293
  %301 = fadd double %299, %300
  %302 = and i32 %208, 1
  %303 = icmp eq i32 %302, 0
  %304 = select i1 %303, double %274, double %294
  %305 = select i1 %303, double %293, double %301
  %306 = fadd double %304, %305
  %307 = fcmp oeq double %0, 0x7FF0000000000000
  %308 = fcmp oeq double %0, 0xFFF0000000000000
  %309 = or i1 %307, %308
  %310 = fcmp uno double %0, 0.000000e+00
  %311 = or i1 %310, %309
  %312 = bitcast double %306 to i64
  %313 = select i1 %311, i64 4294967295, i64 0
  %314 = shl nuw i64 %313, 32
  %315 = or i64 %314, %313
  %316 = or i64 %315, %312
  %317 = bitcast i64 %316 to double
  br label %318

; <label>:318:                                    ; preds = %35, %78, %6
  %319 = phi i32 [ %28, %6 ], [ %62, %35 ], [ %286, %78 ]
  %320 = phi double [ %32, %6 ], [ %77, %35 ], [ %317, %78 ]
  %321 = fmul double %320, %320
  %322 = shl i32 %319, 31
  %323 = zext i32 %322 to i64
  %324 = shl nuw i64 %323, 32
  %325 = bitcast double %320 to i64
  %326 = xor i64 %324, %325
  %327 = bitcast i64 %326 to double
  %328 = fmul double %321, %321
  %329 = fmul double %328, %328
  %330 = fmul double %321, 0x3C62622B22D526BE
  %331 = fsub double 0x3CE94FA618796592, %330
  %332 = fmul double %321, 0x3D6AE7EA531357BF
  %333 = fsub double 0x3DE6124601C23966, %332
  %334 = fmul double %328, %331
  %335 = fadd double %333, %334
  %336 = fmul double %321, 0x3E5AE64567CB5786
  %337 = fsub double 0x3EC71DE3A5568A50, %336
  %338 = fmul double %321, 0x3F2A01A01A019FC7
  %339 = fsub double 0x3F8111111111110F, %338
  %340 = fmul double %328, %337
  %341 = fadd double %339, %340
  %342 = fmul double %329, %335
  %343 = fadd double %341, %342
  %344 = fmul double %321, %343
  %345 = fadd double %344, 0xBFC5555555555555
  %346 = fmul double %345, %327
  %347 = fmul double %321, %346
  %348 = fadd double %347, %327
  %349 = icmp eq i64 %2, -9223372036854775808
  %350 = select i1 %349, double %0, double %348
  ret double %350
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_sind1_u10purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %35, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x400921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0xBCA1A62633145C07
  %32 = fadd double %31, %30
  %33 = fsub double %30, %32
  %34 = fadd double %31, %33
  br label %351

; <label>:35:                                     ; preds = %1
  %36 = fcmp uge double %4, 1.000000e+14
  br i1 %36, label %109, label %37, !prof !2

; <label>:37:                                     ; preds = %35
  %38 = fmul double %0, 0x3E545F306DC9C883
  %39 = fptosi double %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fmul double %40, 0x4170000000000000
  %42 = fmul double %0, 0x3FD45F306DC9C883
  %43 = fsub double %42, %41
  %44 = fcmp ogt double %43, 0.000000e+00
  %45 = select i1 %44, double 5.000000e-01, double -5.000000e-01
  %46 = fadd double %43, %45
  %47 = bitcast double %46 to i64
  %48 = fptosi double %46 to i32
  %49 = and i32 %48, 1
  %50 = zext i32 %49 to i64
  %51 = sub i64 %47, %50
  %52 = bitcast i64 %51 to double
  %53 = fptosi double %52 to i32
  %54 = sitofp i32 %53 to double
  %55 = icmp sgt i32 %53, 0
  %56 = select i1 %55, double 5.000000e-01, double -5.000000e-01
  %57 = fadd double %56, %54
  %58 = bitcast double %57 to i64
  %59 = fptosi double %57 to i32
  %60 = and i32 %59, 1
  %61 = zext i32 %60 to i64
  %62 = sub i64 %58, %61
  %63 = bitcast i64 %62 to double
  %64 = fptosi double %63 to i32
  %65 = fmul double %41, 0x400921FB50000000
  %66 = fsub double %0, %65
  %67 = fmul double %54, 0xC00921FB50000000
  %68 = fadd double %66, %67
  %69 = fsub double %66, %68
  %70 = fadd double %67, %69
  %71 = fmul double %41, 0xBE6110B460000000
  %72 = fadd double %71, %68
  %73 = fsub double %72, %68
  %74 = fsub double %72, %73
  %75 = fsub double %68, %74
  %76 = fsub double %71, %73
  %77 = fadd double %76, %75
  %78 = fadd double %70, %77
  %79 = fmul double %54, 0xBE6110B460000000
  %80 = fadd double %79, %72
  %81 = fsub double %80, %72
  %82 = fsub double %80, %81
  %83 = fsub double %72, %82
  %84 = fsub double %79, %81
  %85 = fadd double %84, %83
  %86 = fadd double %85, %78
  %87 = fmul double %41, 0xBCA1A62630000000
  %88 = fadd double %87, %80
  %89 = fsub double %88, %80
  %90 = fsub double %88, %89
  %91 = fsub double %80, %90
  %92 = fsub double %87, %89
  %93 = fadd double %92, %91
  %94 = fadd double %93, %86
  %95 = fmul double %54, 0xBCA1A62630000000
  %96 = fadd double %95, %88
  %97 = fsub double %96, %88
  %98 = fsub double %96, %97
  %99 = fsub double %88, %98
  %100 = fsub double %95, %97
  %101 = fadd double %100, %99
  %102 = fadd double %101, %94
  %103 = fadd double %41, %54
  %104 = fmul double %103, 0xBAF8A2E03707344A
  %105 = fadd double %104, %96
  %106 = fsub double %96, %105
  %107 = fadd double %104, %106
  %108 = fadd double %107, %102
  br label %351

; <label>:109:                                    ; preds = %35
  %110 = lshr i64 %2, 52
  %111 = trunc i64 %110 to i32
  %112 = and i32 %111, 2047
  %113 = add nsw i32 %112, -1078
  %114 = icmp ugt i32 %112, 1723
  %115 = select i1 %114, i64 -288230376151711744, i64 0
  %116 = and i64 %2, -4294967296
  %117 = add i64 %115, %116
  %118 = and i64 %2, 4294967295
  %119 = or i64 %117, %118
  %120 = bitcast i64 %119 to double
  %121 = ashr i32 %113, 31
  %122 = xor i32 %121, 1073741823
  %123 = and i32 %122, %113
  %124 = shl i32 %123, 2
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !3, !noalias !10
  %128 = bitcast double %127 to i64
  %129 = and i64 %128, -134217728
  %130 = bitcast i64 %129 to double
  %131 = fsub double %127, %130
  %132 = fmul double %127, %120
  %133 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %125
  %134 = load double, double* %133, align 8, !tbaa !3, !noalias !10
  %135 = bitcast double %134 to i64
  %136 = insertelement <2 x i64> undef, i64 %135, i32 0
  %137 = insertelement <2 x i64> %136, i64 %119, i32 1
  %138 = and <2 x i64> %137, <i64 -134217728, i64 -134217728>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = extractelement <2 x double> %139, i32 1
  %141 = fmul double %140, %130
  %142 = fsub double %141, %132
  %143 = bitcast double %132 to i64
  %144 = and i64 %143, -9223372036854775808
  %145 = or i64 %144, 4841369599423283200
  %146 = bitcast i64 %145 to double
  %147 = fmul double %132, 4.000000e+00
  %148 = bitcast double %147 to i64
  %149 = and i64 %148, 9223372036854775807
  %150 = bitcast i64 %149 to double
  %151 = fcmp ule double %150, 0x4330000000000000
  %152 = fadd double %147, %146
  %153 = fsub double %152, %146
  %154 = bitcast double %153 to i64
  %155 = or i64 %144, %154
  %156 = bitcast i64 %155 to double
  %157 = select i1 %151, double %156, double %147
  %158 = and i64 %143, 9223372036854775807
  %159 = bitcast i64 %158 to double
  %160 = fcmp ule double %159, 0x4330000000000000
  %161 = fadd double %132, %146
  %162 = fsub double %161, %146
  %163 = bitcast double %162 to i64
  %164 = or i64 %144, %163
  %165 = bitcast i64 %164 to double
  %166 = select i1 %160, double %165, double %132
  %167 = fmul double %157, 2.500000e-01
  %168 = fsub double %132, %167
  %169 = fmul double %166, 4.000000e+00
  %170 = fsub double %157, %169
  %171 = fptosi double %170 to i32
  %172 = insertelement <2 x double> undef, double %134, i32 0
  %173 = insertelement <2 x double> %172, double %120, i32 1
  %174 = fsub <2 x double> %173, %139
  %175 = fmul double %134, %120
  %176 = shufflevector <2 x double> %139, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %177 = extractelement <2 x double> %174, i32 1
  %178 = shufflevector <2 x double> %176, <2 x double> %174, <2 x i32> <i32 0, i32 3>
  %179 = extractelement <2 x double> %139, i32 0
  %180 = insertelement <2 x double> undef, double %179, i32 0
  %181 = insertelement <2 x double> %180, double %130, i32 1
  %182 = fmul <2 x double> %178, %181
  %183 = insertelement <2 x double> undef, double %177, i32 0
  %184 = insertelement <2 x double> %183, double %131, i32 1
  %185 = fmul <2 x double> %184, %139
  %186 = insertelement <2 x double> %176, double %131, i32 1
  %187 = fmul <2 x double> %174, %186
  %188 = insertelement <2 x double> undef, double %175, i32 0
  %189 = insertelement <2 x double> %188, double %142, i32 1
  %190 = fsub <2 x double> %182, %189
  %191 = fadd <2 x double> %182, %189
  %192 = shufflevector <2 x double> %190, <2 x double> %191, <2 x i32> <i32 0, i32 3>
  %193 = fadd <2 x double> %185, %192
  %194 = fadd <2 x double> %187, %193
  %195 = extractelement <2 x double> %194, i32 1
  %196 = fadd double %195, %168
  %197 = fsub double %168, %196
  %198 = extractelement <2 x double> %174, i32 0
  %199 = fmul double %177, %198
  %200 = insertelement <2 x double> undef, double %199, i32 0
  %201 = insertelement <2 x double> %200, double %197, i32 1
  %202 = fadd <2 x double> %201, %194
  %203 = fadd double %175, %196
  %204 = fsub double %203, %196
  %205 = fsub double %203, %204
  %206 = fsub double %175, %204
  %207 = extractelement <2 x double> %202, i32 0
  %208 = extractelement <2 x double> %202, i32 1
  %209 = fadd double %207, %208
  %210 = bitcast double %203 to i64
  %211 = and i64 %210, -9223372036854775808
  %212 = or i64 %211, 4841369599423283200
  %213 = bitcast i64 %212 to double
  %214 = fmul double %203, 4.000000e+00
  %215 = bitcast double %214 to i64
  %216 = and i64 %215, 9223372036854775807
  %217 = bitcast i64 %216 to double
  %218 = fcmp ule double %217, 0x4330000000000000
  %219 = fadd double %214, %213
  %220 = fsub double %219, %213
  %221 = bitcast double %220 to i64
  %222 = or i64 %211, %221
  %223 = bitcast i64 %222 to double
  %224 = select i1 %218, double %223, double %214
  %225 = and i64 %210, 9223372036854775807
  %226 = bitcast i64 %225 to double
  %227 = fcmp ule double %226, 0x4330000000000000
  %228 = fadd double %203, %213
  %229 = fsub double %228, %213
  %230 = bitcast double %229 to i64
  %231 = or i64 %211, %230
  %232 = bitcast i64 %231 to double
  %233 = select i1 %227, double %232, double %203
  %234 = fmul double %224, 2.500000e-01
  %235 = fsub double %203, %234
  %236 = fmul double %233, 4.000000e+00
  %237 = fsub double %224, %236
  %238 = fptosi double %237 to i32
  %239 = add nsw i32 %238, %171
  %240 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %125
  %241 = load double, double* %240, align 8, !tbaa !3, !noalias !10
  %242 = bitcast double %241 to i64
  %243 = and i64 %242, -134217728
  %244 = bitcast i64 %243 to double
  %245 = fsub double %241, %244
  %246 = fmul double %241, %120
  %247 = fmul double %140, %244
  %248 = fmul double %245, %140
  %249 = fmul double %177, %244
  %250 = insertelement <2 x double> undef, double %247, i32 0
  %251 = insertelement <2 x double> %250, double %196, i32 1
  %252 = insertelement <2 x double> undef, double %246, i32 0
  %253 = insertelement <2 x double> %252, double %205, i32 1
  %254 = fsub <2 x double> %251, %253
  %255 = insertelement <2 x double> undef, double %248, i32 0
  %256 = insertelement <2 x double> %255, double %206, i32 1
  %257 = fadd <2 x double> %256, %254
  %258 = insertelement <2 x double> undef, double %249, i32 0
  %259 = insertelement <2 x double> %258, double %209, i32 1
  %260 = fadd <2 x double> %259, %257
  %261 = extractelement <2 x double> %260, i32 1
  %262 = fadd double %261, %235
  %263 = fsub double %235, %262
  %264 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %125
  %265 = load double, double* %264, align 8, !tbaa !3, !noalias !10
  %266 = fmul double %177, %245
  %267 = fmul double %265, %120
  %268 = insertelement <2 x double> undef, double %266, i32 0
  %269 = insertelement <2 x double> %268, double %263, i32 1
  %270 = fadd <2 x double> %269, %260
  %271 = extractelement <2 x double> %270, i32 0
  %272 = fadd double %267, %271
  %273 = fadd double %246, %262
  %274 = fsub double %273, %262
  %275 = fsub double %273, %274
  %276 = fsub double %262, %275
  %277 = fsub double %246, %274
  %278 = fadd double %277, %276
  %279 = extractelement <2 x double> %270, i32 1
  %280 = fadd double %272, %279
  %281 = fadd double %280, %278
  %282 = fadd double %273, %281
  %283 = fsub double %273, %282
  %284 = fadd double %281, %283
  %285 = bitcast double %282 to i64
  %286 = and i64 %285, -134217728
  %287 = bitcast i64 %286 to double
  %288 = fsub double %282, %287
  %289 = fmul double %282, 0x401921FB54442D18
  %290 = fmul double %287, 0x401921FB50000000
  %291 = fmul double %288, 0x401921FB50000000
  %292 = fmul double %287, 0x3E7110B460000000
  %293 = fmul double %288, 0x3E7110B460000000
  %294 = fmul double %282, 0x3CB1A62633145C07
  %295 = fmul double %284, 0x401921FB54442D18
  %296 = fsub double %290, %289
  %297 = fadd double %291, %296
  %298 = fadd double %292, %297
  %299 = fadd double %293, %298
  %300 = fadd double %294, %299
  %301 = fadd double %295, %300
  %302 = and i64 %119, 9223372036854775807
  %303 = bitcast i64 %302 to double
  %304 = fcmp olt double %303, 0x3FE6666666666666
  %305 = select i1 %304, double %120, double %289
  %306 = bitcast double %301 to i64
  %307 = select i1 %304, i64 4294967295, i64 0
  %308 = shl nuw i64 %307, 32
  %309 = or i64 %308, %307
  %310 = xor i64 %309, -1
  %311 = and i64 %306, %310
  %312 = shl i32 %239, 1
  %313 = and i32 %312, 6
  %314 = fcmp ule double %305, 0.000000e+00
  %315 = select i1 %314, i32 1, i32 2
  %316 = add nuw nsw i32 %315, %313
  %317 = lshr i32 %316, 2
  %318 = bitcast double %305 to i64
  %319 = and i64 %318, -9223372036854775808
  %320 = xor i64 %319, -4613618979930100456
  %321 = bitcast i64 %320 to double
  %322 = xor i64 %319, -4858919839960114169
  %323 = bitcast i64 %322 to double
  %324 = bitcast i64 %311 to double
  %325 = fadd double %305, %321
  %326 = fsub double %325, %305
  %327 = fsub double %325, %326
  %328 = fsub double %305, %327
  %329 = fsub double %321, %326
  %330 = fadd double %329, %328
  %331 = fadd double %323, %324
  %332 = fadd double %330, %331
  %333 = and i32 %239, 1
  %334 = icmp eq i32 %333, 0
  %335 = select i1 %334, double %305, double %325
  %336 = select i1 %334, double %324, double %332
  %337 = fadd double %335, %336
  %338 = fsub double %335, %337
  %339 = fadd double %336, %338
  %340 = fcmp oeq double %0, 0x7FF0000000000000
  %341 = fcmp oeq double %0, 0xFFF0000000000000
  %342 = or i1 %340, %341
  %343 = fcmp uno double %0, 0.000000e+00
  %344 = or i1 %343, %342
  %345 = bitcast double %337 to i64
  %346 = select i1 %344, i64 4294967295, i64 0
  %347 = shl nuw i64 %346, 32
  %348 = or i64 %347, %346
  %349 = or i64 %348, %345
  %350 = bitcast i64 %349 to double
  br label %351

; <label>:351:                                    ; preds = %37, %109, %6
  %352 = phi i32 [ %28, %6 ], [ %64, %37 ], [ %317, %109 ]
  %353 = phi double [ %32, %6 ], [ %105, %37 ], [ %350, %109 ]
  %354 = phi double [ %34, %6 ], [ %108, %37 ], [ %339, %109 ]
  %355 = bitcast double %353 to i64
  %356 = and i64 %355, -134217728
  %357 = bitcast i64 %356 to double
  %358 = fsub double %353, %357
  %359 = fmul double %353, %353
  %360 = fmul double %357, %357
  %361 = fadd double %357, %357
  %362 = fmul double %361, %358
  %363 = fmul double %358, %358
  %364 = fadd double %354, %354
  %365 = fmul double %353, %364
  %366 = fsub double %360, %359
  %367 = fadd double %366, %362
  %368 = fadd double %363, %367
  %369 = fadd double %365, %368
  %370 = fmul double %359, %359
  %371 = fmul double %370, %370
  %372 = fmul double %359, 0x3CE8811A03B2B11D
  %373 = fadd double %372, 0xBD6AE422BC319350
  %374 = fmul double %359, 0x3DE6123C74705F67
  %375 = fadd double %374, 0xBE5AE6454BAA2959
  %376 = fmul double %359, 0x3EC71DE3A525FBED
  %377 = fadd double %376, 0xBF2A01A01A014225
  %378 = fmul double %370, %375
  %379 = fadd double %377, %378
  %380 = fmul double %371, %373
  %381 = fadd double %380, %379
  %382 = fmul double %359, %381
  %383 = fadd double %382, 0x3F811111111110B9
  %384 = fmul double %359, %383
  %385 = fadd double %384, 0xBFC5555555555555
  %386 = fsub double 0xBFC5555555555555, %385
  %387 = fadd double %384, %386
  %388 = bitcast double %385 to i64
  %389 = and i64 %388, -134217728
  %390 = bitcast i64 %389 to double
  %391 = fsub double %385, %390
  %392 = bitcast double %359 to i64
  %393 = and i64 %392, -134217728
  %394 = bitcast i64 %393 to double
  %395 = fsub double %359, %394
  %396 = fmul double %359, %385
  %397 = fmul double %394, %390
  %398 = fmul double %391, %394
  %399 = fmul double %395, %390
  %400 = fmul double %395, %391
  %401 = fmul double %369, %385
  %402 = fmul double %359, %387
  %403 = fsub double %397, %396
  %404 = fadd double %398, %403
  %405 = fadd double %399, %404
  %406 = fadd double %400, %405
  %407 = fadd double %401, %406
  %408 = fadd double %402, %407
  %409 = fadd double %396, 1.000000e+00
  %410 = fsub double 1.000000e+00, %409
  %411 = fadd double %396, %410
  %412 = fadd double %411, %408
  %413 = bitcast double %409 to i64
  %414 = and i64 %413, -134217728
  %415 = bitcast i64 %414 to double
  %416 = fsub double %409, %415
  %417 = fmul double %354, %415
  %418 = fmul double %412, %357
  %419 = fmul double %358, %416
  %420 = fmul double %416, %357
  %421 = fmul double %358, %415
  %422 = fmul double %357, %415
  %423 = fadd double %417, %418
  %424 = fadd double %419, %423
  %425 = fadd double %420, %424
  %426 = fadd double %421, %425
  %427 = fadd double %422, %426
  %428 = shl i32 %352, 31
  %429 = zext i32 %428 to i64
  %430 = shl nuw i64 %429, 32
  %431 = bitcast double %427 to i64
  %432 = xor i64 %430, %431
  %433 = bitcast i64 %432 to double
  %434 = fcmp une double %0, 0.000000e+00
  %435 = select i1 %434, double %433, double %0
  ret double %435
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cosd1_u35purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %36, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = fadd double %7, -5.000000e-01
  %9 = fcmp ogt double %8, 0.000000e+00
  %10 = select i1 %9, double 5.000000e-01, double -5.000000e-01
  %11 = fadd double %8, %10
  %12 = bitcast double %11 to i64
  %13 = fptosi double %11 to i32
  %14 = and i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = sub i64 %12, %15
  %17 = bitcast i64 %16 to double
  %18 = fptosi double %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fmul double %19, 2.000000e+00
  %21 = fadd double %20, 1.000000e+00
  %22 = fcmp ogt double %21, 0.000000e+00
  %23 = select i1 %22, double 5.000000e-01, double -5.000000e-01
  %24 = fadd double %21, %23
  %25 = bitcast double %24 to i64
  %26 = fptosi double %24 to i32
  %27 = and i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = sub i64 %25, %28
  %30 = bitcast i64 %29 to double
  %31 = fptosi double %30 to i32
  %32 = fmul double %21, 0x3FF921FB54442D18
  %33 = fsub double %0, %32
  %34 = fmul double %21, 0x3C91A62633145C07
  %35 = fsub double %33, %34
  br label %315

; <label>:36:                                     ; preds = %1
  %37 = fcmp uge double %4, 1.000000e+14
  br i1 %37, label %76, label %38, !prof !2

; <label>:38:                                     ; preds = %36
  %39 = fmul double %0, 0x3E645F306DC9C883
  %40 = fadd double %39, 0xBE545F306DC9C883
  %41 = fptosi double %40 to i32
  %42 = sitofp i32 %41 to double
  %43 = fmul double %0, 0x3FD45F306DC9C883
  %44 = fmul double %42, 0x4160000000000000
  %45 = fsub double -5.000000e-01, %44
  %46 = fadd double %43, %45
  %47 = fcmp ogt double %46, 0.000000e+00
  %48 = select i1 %47, double 5.000000e-01, double -5.000000e-01
  %49 = fadd double %46, %48
  %50 = bitcast double %49 to i64
  %51 = fptosi double %49 to i32
  %52 = and i32 %51, 1
  %53 = zext i32 %52 to i64
  %54 = sub i64 %50, %53
  %55 = bitcast i64 %54 to double
  %56 = fptosi double %55 to i32
  %57 = fmul double %42, 0x4170000000000000
  %58 = shl nsw i32 %56, 1
  %59 = or i32 %58, 1
  %60 = sitofp i32 %59 to double
  %61 = fmul double %57, 0x3FF921FB50000000
  %62 = fsub double %0, %61
  %63 = fmul double %60, 0x3FF921FB50000000
  %64 = fsub double %62, %63
  %65 = fmul double %57, 0x3E5110B460000000
  %66 = fsub double %64, %65
  %67 = fmul double %60, 0x3E5110B460000000
  %68 = fsub double %66, %67
  %69 = fmul double %57, 0x3C91A62630000000
  %70 = fsub double %68, %69
  %71 = fmul double %60, 0x3C91A62630000000
  %72 = fsub double %70, %71
  %73 = fadd double %57, %60
  %74 = fmul double %73, 0x3AE8A2E03707344A
  %75 = fsub double %72, %74
  br label %315

; <label>:76:                                     ; preds = %36
  %77 = lshr i64 %2, 52
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 2047
  %80 = add nsw i32 %79, -1078
  %81 = icmp ugt i32 %79, 1723
  %82 = select i1 %81, i64 -288230376151711744, i64 0
  %83 = and i64 %2, -4294967296
  %84 = add i64 %82, %83
  %85 = and i64 %2, 4294967295
  %86 = or i64 %84, %85
  %87 = bitcast i64 %86 to double
  %88 = ashr i32 %80, 31
  %89 = xor i32 %88, 1073741823
  %90 = and i32 %89, %80
  %91 = shl i32 %90, 2
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %92
  %94 = load double, double* %93, align 8, !tbaa !3, !noalias !13
  %95 = bitcast double %94 to i64
  %96 = and i64 %95, -134217728
  %97 = bitcast i64 %96 to double
  %98 = fsub double %94, %97
  %99 = fmul double %94, %87
  %100 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %92
  %101 = load double, double* %100, align 8, !tbaa !3, !noalias !13
  %102 = bitcast double %101 to i64
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = insertelement <2 x i64> %103, i64 %86, i32 1
  %105 = and <2 x i64> %104, <i64 -134217728, i64 -134217728>
  %106 = bitcast <2 x i64> %105 to <2 x double>
  %107 = extractelement <2 x double> %106, i32 1
  %108 = fmul double %107, %97
  %109 = fsub double %108, %99
  %110 = bitcast double %99 to i64
  %111 = and i64 %110, -9223372036854775808
  %112 = or i64 %111, 4841369599423283200
  %113 = bitcast i64 %112 to double
  %114 = fmul double %99, 4.000000e+00
  %115 = bitcast double %114 to i64
  %116 = and i64 %115, 9223372036854775807
  %117 = bitcast i64 %116 to double
  %118 = fcmp ule double %117, 0x4330000000000000
  %119 = fadd double %114, %113
  %120 = fsub double %119, %113
  %121 = bitcast double %120 to i64
  %122 = or i64 %111, %121
  %123 = bitcast i64 %122 to double
  %124 = select i1 %118, double %123, double %114
  %125 = and i64 %110, 9223372036854775807
  %126 = bitcast i64 %125 to double
  %127 = fcmp ule double %126, 0x4330000000000000
  %128 = fadd double %99, %113
  %129 = fsub double %128, %113
  %130 = bitcast double %129 to i64
  %131 = or i64 %111, %130
  %132 = bitcast i64 %131 to double
  %133 = select i1 %127, double %132, double %99
  %134 = fmul double %124, 2.500000e-01
  %135 = fsub double %99, %134
  %136 = fmul double %133, 4.000000e+00
  %137 = fsub double %124, %136
  %138 = fptosi double %137 to i32
  %139 = insertelement <2 x double> undef, double %101, i32 0
  %140 = insertelement <2 x double> %139, double %87, i32 1
  %141 = fsub <2 x double> %140, %106
  %142 = fmul double %101, %87
  %143 = shufflevector <2 x double> %106, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %144 = extractelement <2 x double> %141, i32 1
  %145 = shufflevector <2 x double> %143, <2 x double> %141, <2 x i32> <i32 0, i32 3>
  %146 = extractelement <2 x double> %106, i32 0
  %147 = insertelement <2 x double> undef, double %146, i32 0
  %148 = insertelement <2 x double> %147, double %97, i32 1
  %149 = fmul <2 x double> %145, %148
  %150 = insertelement <2 x double> undef, double %144, i32 0
  %151 = insertelement <2 x double> %150, double %98, i32 1
  %152 = fmul <2 x double> %151, %106
  %153 = insertelement <2 x double> %143, double %98, i32 1
  %154 = fmul <2 x double> %141, %153
  %155 = insertelement <2 x double> undef, double %142, i32 0
  %156 = insertelement <2 x double> %155, double %109, i32 1
  %157 = fsub <2 x double> %149, %156
  %158 = fadd <2 x double> %149, %156
  %159 = shufflevector <2 x double> %157, <2 x double> %158, <2 x i32> <i32 0, i32 3>
  %160 = fadd <2 x double> %152, %159
  %161 = fadd <2 x double> %154, %160
  %162 = extractelement <2 x double> %161, i32 1
  %163 = fadd double %162, %135
  %164 = fsub double %135, %163
  %165 = extractelement <2 x double> %141, i32 0
  %166 = fmul double %144, %165
  %167 = insertelement <2 x double> undef, double %166, i32 0
  %168 = insertelement <2 x double> %167, double %164, i32 1
  %169 = fadd <2 x double> %168, %161
  %170 = fadd double %142, %163
  %171 = fsub double %170, %163
  %172 = fsub double %170, %171
  %173 = fsub double %142, %171
  %174 = extractelement <2 x double> %169, i32 0
  %175 = extractelement <2 x double> %169, i32 1
  %176 = fadd double %174, %175
  %177 = bitcast double %170 to i64
  %178 = and i64 %177, -9223372036854775808
  %179 = or i64 %178, 4841369599423283200
  %180 = bitcast i64 %179 to double
  %181 = fmul double %170, 4.000000e+00
  %182 = bitcast double %181 to i64
  %183 = and i64 %182, 9223372036854775807
  %184 = bitcast i64 %183 to double
  %185 = fcmp ule double %184, 0x4330000000000000
  %186 = fadd double %181, %180
  %187 = fsub double %186, %180
  %188 = bitcast double %187 to i64
  %189 = or i64 %178, %188
  %190 = bitcast i64 %189 to double
  %191 = select i1 %185, double %190, double %181
  %192 = and i64 %177, 9223372036854775807
  %193 = bitcast i64 %192 to double
  %194 = fcmp ule double %193, 0x4330000000000000
  %195 = fadd double %170, %180
  %196 = fsub double %195, %180
  %197 = bitcast double %196 to i64
  %198 = or i64 %178, %197
  %199 = bitcast i64 %198 to double
  %200 = select i1 %194, double %199, double %170
  %201 = fmul double %191, 2.500000e-01
  %202 = fsub double %170, %201
  %203 = fmul double %200, 4.000000e+00
  %204 = fsub double %191, %203
  %205 = fptosi double %204 to i32
  %206 = add nsw i32 %205, %138
  %207 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %92
  %208 = load double, double* %207, align 8, !tbaa !3, !noalias !13
  %209 = bitcast double %208 to i64
  %210 = and i64 %209, -134217728
  %211 = bitcast i64 %210 to double
  %212 = fsub double %208, %211
  %213 = fmul double %208, %87
  %214 = fmul double %107, %211
  %215 = fmul double %212, %107
  %216 = fmul double %144, %211
  %217 = insertelement <2 x double> undef, double %214, i32 0
  %218 = insertelement <2 x double> %217, double %163, i32 1
  %219 = insertelement <2 x double> undef, double %213, i32 0
  %220 = insertelement <2 x double> %219, double %172, i32 1
  %221 = fsub <2 x double> %218, %220
  %222 = insertelement <2 x double> undef, double %215, i32 0
  %223 = insertelement <2 x double> %222, double %173, i32 1
  %224 = fadd <2 x double> %223, %221
  %225 = insertelement <2 x double> undef, double %216, i32 0
  %226 = insertelement <2 x double> %225, double %176, i32 1
  %227 = fadd <2 x double> %226, %224
  %228 = extractelement <2 x double> %227, i32 1
  %229 = fadd double %228, %202
  %230 = fsub double %202, %229
  %231 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %92
  %232 = load double, double* %231, align 8, !tbaa !3, !noalias !13
  %233 = fmul double %144, %212
  %234 = fmul double %232, %87
  %235 = insertelement <2 x double> undef, double %233, i32 0
  %236 = insertelement <2 x double> %235, double %230, i32 1
  %237 = fadd <2 x double> %236, %227
  %238 = extractelement <2 x double> %237, i32 0
  %239 = fadd double %234, %238
  %240 = fadd double %213, %229
  %241 = fsub double %240, %229
  %242 = fsub double %240, %241
  %243 = fsub double %229, %242
  %244 = fsub double %213, %241
  %245 = fadd double %244, %243
  %246 = extractelement <2 x double> %237, i32 1
  %247 = fadd double %239, %246
  %248 = fadd double %247, %245
  %249 = fadd double %240, %248
  %250 = fsub double %240, %249
  %251 = fadd double %248, %250
  %252 = bitcast double %249 to i64
  %253 = and i64 %252, -134217728
  %254 = bitcast i64 %253 to double
  %255 = fsub double %249, %254
  %256 = fmul double %249, 0x401921FB54442D18
  %257 = fmul double %254, 0x401921FB50000000
  %258 = fmul double %255, 0x401921FB50000000
  %259 = fmul double %254, 0x3E7110B460000000
  %260 = fmul double %255, 0x3E7110B460000000
  %261 = fmul double %249, 0x3CB1A62633145C07
  %262 = fmul double %251, 0x401921FB54442D18
  %263 = fsub double %257, %256
  %264 = fadd double %258, %263
  %265 = fadd double %259, %264
  %266 = fadd double %260, %265
  %267 = fadd double %261, %266
  %268 = fadd double %262, %267
  %269 = and i64 %86, 9223372036854775807
  %270 = bitcast i64 %269 to double
  %271 = fcmp olt double %270, 0x3FE6666666666666
  %272 = select i1 %271, double %87, double %256
  %273 = bitcast double %268 to i64
  %274 = select i1 %271, i64 4294967295, i64 0
  %275 = shl nuw i64 %274, 32
  %276 = or i64 %275, %274
  %277 = xor i64 %276, -1
  %278 = and i64 %273, %277
  %279 = shl i32 %206, 1
  %280 = and i32 %279, 6
  %281 = fcmp ule double %272, 0.000000e+00
  %282 = select i1 %281, i32 7, i32 8
  %283 = add nuw nsw i32 %282, %280
  %284 = lshr i32 %283, 1
  %285 = and i32 %206, 1
  %286 = select i1 %281, i64 -9223372036854775808, i64 0
  %287 = xor i64 %286, -4613618979930100456
  %288 = bitcast i64 %287 to double
  %289 = xor i64 %286, -4858919839960114169
  %290 = bitcast i64 %289 to double
  %291 = bitcast i64 %278 to double
  %292 = fadd double %272, %288
  %293 = fsub double %292, %272
  %294 = fsub double %292, %293
  %295 = fsub double %272, %294
  %296 = fsub double %288, %293
  %297 = fadd double %296, %295
  %298 = fadd double %290, %291
  %299 = fadd double %297, %298
  %300 = icmp ne i32 %285, 0
  %301 = select i1 %300, double %272, double %292
  %302 = select i1 %300, double %291, double %299
  %303 = fadd double %301, %302
  %304 = fcmp oeq double %0, 0x7FF0000000000000
  %305 = fcmp oeq double %0, 0xFFF0000000000000
  %306 = or i1 %304, %305
  %307 = fcmp uno double %0, 0.000000e+00
  %308 = or i1 %307, %306
  %309 = bitcast double %303 to i64
  %310 = select i1 %308, i64 4294967295, i64 0
  %311 = shl nuw i64 %310, 32
  %312 = or i64 %311, %310
  %313 = or i64 %312, %309
  %314 = bitcast i64 %313 to double
  br label %315

; <label>:315:                                    ; preds = %38, %76, %6
  %316 = phi i32 [ %31, %6 ], [ %59, %38 ], [ %284, %76 ]
  %317 = phi double [ %35, %6 ], [ %75, %38 ], [ %314, %76 ]
  %318 = fmul double %317, %317
  %319 = lshr i32 %316, 1
  %320 = and i32 %319, 1
  %321 = add nsw i32 %320, -1
  %322 = zext i32 %321 to i64
  %323 = shl nuw i64 %322, 32
  %324 = and i64 %323, -9223372036854775808
  %325 = bitcast double %317 to i64
  %326 = xor i64 %324, %325
  %327 = bitcast i64 %326 to double
  %328 = fmul double %318, %318
  %329 = fmul double %328, %328
  %330 = fmul double %318, 0x3C62622B22D526BE
  %331 = fsub double 0x3CE94FA618796592, %330
  %332 = fmul double %318, 0x3D6AE7EA531357BF
  %333 = fsub double 0x3DE6124601C23966, %332
  %334 = fmul double %328, %331
  %335 = fadd double %333, %334
  %336 = fmul double %318, 0x3E5AE64567CB5786
  %337 = fsub double 0x3EC71DE3A5568A50, %336
  %338 = fmul double %318, 0x3F2A01A01A019FC7
  %339 = fsub double 0x3F8111111111110F, %338
  %340 = fmul double %328, %337
  %341 = fadd double %339, %340
  %342 = fmul double %329, %335
  %343 = fadd double %341, %342
  %344 = fmul double %318, %343
  %345 = fadd double %344, 0xBFC5555555555555
  %346 = fmul double %345, %327
  %347 = fmul double %318, %346
  %348 = fadd double %347, %327
  ret double %348
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_cosd1_u10purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %44, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FD45F306DC9C883
  %8 = fadd double %7, -5.000000e-01
  %9 = fcmp ogt double %8, 0.000000e+00
  %10 = select i1 %9, double 5.000000e-01, double -5.000000e-01
  %11 = fadd double %8, %10
  %12 = bitcast double %11 to i64
  %13 = fptosi double %11 to i32
  %14 = and i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = sub i64 %12, %15
  %17 = bitcast i64 %16 to double
  %18 = fptosi double %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fmul double %19, 2.000000e+00
  %21 = fadd double %20, 1.000000e+00
  %22 = fcmp ogt double %21, 0.000000e+00
  %23 = select i1 %22, double 5.000000e-01, double -5.000000e-01
  %24 = fadd double %21, %23
  %25 = bitcast double %24 to i64
  %26 = fptosi double %24 to i32
  %27 = and i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = sub i64 %25, %28
  %30 = bitcast i64 %29 to double
  %31 = fptosi double %30 to i32
  %32 = fmul double %21, 0xBFF921FB54442D18
  %33 = fadd double %32, %0
  %34 = fsub double %33, %0
  %35 = fsub double %33, %34
  %36 = fsub double %0, %35
  %37 = fsub double %32, %34
  %38 = fadd double %37, %36
  %39 = fmul double %21, 0xBC91A62633145C07
  %40 = fadd double %39, %33
  %41 = fsub double %33, %40
  %42 = fadd double %39, %41
  %43 = fadd double %42, %38
  br label %357

; <label>:44:                                     ; preds = %1
  %45 = fcmp uge double %4, 1.000000e+14
  br i1 %45, label %116, label %46, !prof !2

; <label>:46:                                     ; preds = %44
  %47 = fmul double %0, 0x3E645F306DC9C883
  %48 = fadd double %47, 0xBE545F306DC9C883
  %49 = fptosi double %48 to i32
  %50 = sitofp i32 %49 to double
  %51 = fmul double %0, 0x3FD45F306DC9C883
  %52 = fmul double %50, 0x4160000000000000
  %53 = fsub double -5.000000e-01, %52
  %54 = fadd double %51, %53
  %55 = fcmp ogt double %54, 0.000000e+00
  %56 = select i1 %55, double 5.000000e-01, double -5.000000e-01
  %57 = fadd double %54, %56
  %58 = bitcast double %57 to i64
  %59 = fptosi double %57 to i32
  %60 = and i32 %59, 1
  %61 = zext i32 %60 to i64
  %62 = sub i64 %58, %61
  %63 = bitcast i64 %62 to double
  %64 = fptosi double %63 to i32
  %65 = fmul double %50, 0x4170000000000000
  %66 = shl nsw i32 %64, 1
  %67 = or i32 %66, 1
  %68 = sitofp i32 %67 to double
  %69 = fmul double %65, 0x3FF921FB50000000
  %70 = fsub double %0, %69
  %71 = fmul double %68, 0xBFF921FB50000000
  %72 = fadd double %70, %71
  %73 = fsub double %72, %70
  %74 = fsub double %72, %73
  %75 = fsub double %70, %74
  %76 = fsub double %71, %73
  %77 = fadd double %76, %75
  %78 = fmul double %65, 0xBE5110B460000000
  %79 = fadd double %78, %72
  %80 = fsub double %79, %72
  %81 = fsub double %79, %80
  %82 = fsub double %72, %81
  %83 = fsub double %78, %80
  %84 = fadd double %83, %82
  %85 = fadd double %77, %84
  %86 = fmul double %68, 0xBE5110B460000000
  %87 = fadd double %86, %79
  %88 = fsub double %87, %79
  %89 = fsub double %87, %88
  %90 = fsub double %79, %89
  %91 = fsub double %86, %88
  %92 = fadd double %91, %90
  %93 = fadd double %92, %85
  %94 = fmul double %65, 0xBC91A62630000000
  %95 = fadd double %94, %87
  %96 = fsub double %95, %87
  %97 = fsub double %95, %96
  %98 = fsub double %87, %97
  %99 = fsub double %94, %96
  %100 = fadd double %99, %98
  %101 = fadd double %100, %93
  %102 = fmul double %68, 0xBC91A62630000000
  %103 = fadd double %102, %95
  %104 = fsub double %103, %95
  %105 = fsub double %103, %104
  %106 = fsub double %95, %105
  %107 = fsub double %102, %104
  %108 = fadd double %107, %106
  %109 = fadd double %108, %101
  %110 = fadd double %65, %68
  %111 = fmul double %110, 0xBAE8A2E03707344A
  %112 = fadd double %111, %103
  %113 = fsub double %103, %112
  %114 = fadd double %111, %113
  %115 = fadd double %114, %109
  br label %357

; <label>:116:                                    ; preds = %44
  %117 = lshr i64 %2, 52
  %118 = trunc i64 %117 to i32
  %119 = and i32 %118, 2047
  %120 = add nsw i32 %119, -1078
  %121 = icmp ugt i32 %119, 1723
  %122 = select i1 %121, i64 -288230376151711744, i64 0
  %123 = and i64 %2, -4294967296
  %124 = add i64 %122, %123
  %125 = and i64 %2, 4294967295
  %126 = or i64 %124, %125
  %127 = bitcast i64 %126 to double
  %128 = ashr i32 %120, 31
  %129 = xor i32 %128, 1073741823
  %130 = and i32 %129, %120
  %131 = shl i32 %130, 2
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %132
  %134 = load double, double* %133, align 8, !tbaa !3, !noalias !16
  %135 = bitcast double %134 to i64
  %136 = and i64 %135, -134217728
  %137 = bitcast i64 %136 to double
  %138 = fsub double %134, %137
  %139 = fmul double %134, %127
  %140 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %132
  %141 = load double, double* %140, align 8, !tbaa !3, !noalias !16
  %142 = bitcast double %141 to i64
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = insertelement <2 x i64> %143, i64 %126, i32 1
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = extractelement <2 x double> %146, i32 1
  %148 = fmul double %147, %137
  %149 = fsub double %148, %139
  %150 = bitcast double %139 to i64
  %151 = and i64 %150, -9223372036854775808
  %152 = or i64 %151, 4841369599423283200
  %153 = bitcast i64 %152 to double
  %154 = fmul double %139, 4.000000e+00
  %155 = bitcast double %154 to i64
  %156 = and i64 %155, 9223372036854775807
  %157 = bitcast i64 %156 to double
  %158 = fcmp ule double %157, 0x4330000000000000
  %159 = fadd double %154, %153
  %160 = fsub double %159, %153
  %161 = bitcast double %160 to i64
  %162 = or i64 %151, %161
  %163 = bitcast i64 %162 to double
  %164 = select i1 %158, double %163, double %154
  %165 = and i64 %150, 9223372036854775807
  %166 = bitcast i64 %165 to double
  %167 = fcmp ule double %166, 0x4330000000000000
  %168 = fadd double %139, %153
  %169 = fsub double %168, %153
  %170 = bitcast double %169 to i64
  %171 = or i64 %151, %170
  %172 = bitcast i64 %171 to double
  %173 = select i1 %167, double %172, double %139
  %174 = fmul double %164, 2.500000e-01
  %175 = fsub double %139, %174
  %176 = fmul double %173, 4.000000e+00
  %177 = fsub double %164, %176
  %178 = fptosi double %177 to i32
  %179 = insertelement <2 x double> undef, double %141, i32 0
  %180 = insertelement <2 x double> %179, double %127, i32 1
  %181 = fsub <2 x double> %180, %146
  %182 = fmul double %141, %127
  %183 = shufflevector <2 x double> %146, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %184 = extractelement <2 x double> %181, i32 1
  %185 = shufflevector <2 x double> %183, <2 x double> %181, <2 x i32> <i32 0, i32 3>
  %186 = extractelement <2 x double> %146, i32 0
  %187 = insertelement <2 x double> undef, double %186, i32 0
  %188 = insertelement <2 x double> %187, double %137, i32 1
  %189 = fmul <2 x double> %185, %188
  %190 = insertelement <2 x double> undef, double %184, i32 0
  %191 = insertelement <2 x double> %190, double %138, i32 1
  %192 = fmul <2 x double> %191, %146
  %193 = insertelement <2 x double> %183, double %138, i32 1
  %194 = fmul <2 x double> %181, %193
  %195 = insertelement <2 x double> undef, double %182, i32 0
  %196 = insertelement <2 x double> %195, double %149, i32 1
  %197 = fsub <2 x double> %189, %196
  %198 = fadd <2 x double> %189, %196
  %199 = shufflevector <2 x double> %197, <2 x double> %198, <2 x i32> <i32 0, i32 3>
  %200 = fadd <2 x double> %192, %199
  %201 = fadd <2 x double> %194, %200
  %202 = extractelement <2 x double> %201, i32 1
  %203 = fadd double %202, %175
  %204 = fsub double %175, %203
  %205 = extractelement <2 x double> %181, i32 0
  %206 = fmul double %184, %205
  %207 = insertelement <2 x double> undef, double %206, i32 0
  %208 = insertelement <2 x double> %207, double %204, i32 1
  %209 = fadd <2 x double> %208, %201
  %210 = fadd double %182, %203
  %211 = fsub double %210, %203
  %212 = fsub double %210, %211
  %213 = fsub double %182, %211
  %214 = extractelement <2 x double> %209, i32 0
  %215 = extractelement <2 x double> %209, i32 1
  %216 = fadd double %214, %215
  %217 = bitcast double %210 to i64
  %218 = and i64 %217, -9223372036854775808
  %219 = or i64 %218, 4841369599423283200
  %220 = bitcast i64 %219 to double
  %221 = fmul double %210, 4.000000e+00
  %222 = bitcast double %221 to i64
  %223 = and i64 %222, 9223372036854775807
  %224 = bitcast i64 %223 to double
  %225 = fcmp ule double %224, 0x4330000000000000
  %226 = fadd double %221, %220
  %227 = fsub double %226, %220
  %228 = bitcast double %227 to i64
  %229 = or i64 %218, %228
  %230 = bitcast i64 %229 to double
  %231 = select i1 %225, double %230, double %221
  %232 = and i64 %217, 9223372036854775807
  %233 = bitcast i64 %232 to double
  %234 = fcmp ule double %233, 0x4330000000000000
  %235 = fadd double %210, %220
  %236 = fsub double %235, %220
  %237 = bitcast double %236 to i64
  %238 = or i64 %218, %237
  %239 = bitcast i64 %238 to double
  %240 = select i1 %234, double %239, double %210
  %241 = fmul double %231, 2.500000e-01
  %242 = fsub double %210, %241
  %243 = fmul double %240, 4.000000e+00
  %244 = fsub double %231, %243
  %245 = fptosi double %244 to i32
  %246 = add nsw i32 %245, %178
  %247 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %132
  %248 = load double, double* %247, align 8, !tbaa !3, !noalias !16
  %249 = bitcast double %248 to i64
  %250 = and i64 %249, -134217728
  %251 = bitcast i64 %250 to double
  %252 = fsub double %248, %251
  %253 = fmul double %248, %127
  %254 = fmul double %147, %251
  %255 = fmul double %252, %147
  %256 = fmul double %184, %251
  %257 = insertelement <2 x double> undef, double %254, i32 0
  %258 = insertelement <2 x double> %257, double %203, i32 1
  %259 = insertelement <2 x double> undef, double %253, i32 0
  %260 = insertelement <2 x double> %259, double %212, i32 1
  %261 = fsub <2 x double> %258, %260
  %262 = insertelement <2 x double> undef, double %255, i32 0
  %263 = insertelement <2 x double> %262, double %213, i32 1
  %264 = fadd <2 x double> %263, %261
  %265 = insertelement <2 x double> undef, double %256, i32 0
  %266 = insertelement <2 x double> %265, double %216, i32 1
  %267 = fadd <2 x double> %266, %264
  %268 = extractelement <2 x double> %267, i32 1
  %269 = fadd double %268, %242
  %270 = fsub double %242, %269
  %271 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %132
  %272 = load double, double* %271, align 8, !tbaa !3, !noalias !16
  %273 = fmul double %184, %252
  %274 = fmul double %272, %127
  %275 = insertelement <2 x double> undef, double %273, i32 0
  %276 = insertelement <2 x double> %275, double %270, i32 1
  %277 = fadd <2 x double> %276, %267
  %278 = extractelement <2 x double> %277, i32 0
  %279 = fadd double %274, %278
  %280 = fadd double %253, %269
  %281 = fsub double %280, %269
  %282 = fsub double %280, %281
  %283 = fsub double %269, %282
  %284 = fsub double %253, %281
  %285 = fadd double %284, %283
  %286 = extractelement <2 x double> %277, i32 1
  %287 = fadd double %279, %286
  %288 = fadd double %287, %285
  %289 = fadd double %280, %288
  %290 = fsub double %280, %289
  %291 = fadd double %288, %290
  %292 = bitcast double %289 to i64
  %293 = and i64 %292, -134217728
  %294 = bitcast i64 %293 to double
  %295 = fsub double %289, %294
  %296 = fmul double %289, 0x401921FB54442D18
  %297 = fmul double %294, 0x401921FB50000000
  %298 = fmul double %295, 0x401921FB50000000
  %299 = fmul double %294, 0x3E7110B460000000
  %300 = fmul double %295, 0x3E7110B460000000
  %301 = fmul double %289, 0x3CB1A62633145C07
  %302 = fmul double %291, 0x401921FB54442D18
  %303 = fsub double %297, %296
  %304 = fadd double %298, %303
  %305 = fadd double %299, %304
  %306 = fadd double %300, %305
  %307 = fadd double %301, %306
  %308 = fadd double %302, %307
  %309 = and i64 %126, 9223372036854775807
  %310 = bitcast i64 %309 to double
  %311 = fcmp olt double %310, 0x3FE6666666666666
  %312 = select i1 %311, double %127, double %296
  %313 = bitcast double %308 to i64
  %314 = select i1 %311, i64 4294967295, i64 0
  %315 = shl nuw i64 %314, 32
  %316 = or i64 %315, %314
  %317 = xor i64 %316, -1
  %318 = and i64 %313, %317
  %319 = shl i32 %246, 1
  %320 = and i32 %319, 6
  %321 = fcmp ule double %312, 0.000000e+00
  %322 = select i1 %321, i32 7, i32 8
  %323 = add nuw nsw i32 %322, %320
  %324 = lshr i32 %323, 1
  %325 = and i32 %246, 1
  %326 = select i1 %321, i64 -9223372036854775808, i64 0
  %327 = xor i64 %326, -4613618979930100456
  %328 = bitcast i64 %327 to double
  %329 = xor i64 %326, -4858919839960114169
  %330 = bitcast i64 %329 to double
  %331 = bitcast i64 %318 to double
  %332 = fadd double %312, %328
  %333 = fsub double %332, %312
  %334 = fsub double %332, %333
  %335 = fsub double %312, %334
  %336 = fsub double %328, %333
  %337 = fadd double %336, %335
  %338 = fadd double %330, %331
  %339 = fadd double %337, %338
  %340 = icmp ne i32 %325, 0
  %341 = select i1 %340, double %312, double %332
  %342 = select i1 %340, double %331, double %339
  %343 = fadd double %341, %342
  %344 = fsub double %341, %343
  %345 = fadd double %342, %344
  %346 = fcmp oeq double %0, 0x7FF0000000000000
  %347 = fcmp oeq double %0, 0xFFF0000000000000
  %348 = or i1 %346, %347
  %349 = fcmp uno double %0, 0.000000e+00
  %350 = or i1 %349, %348
  %351 = bitcast double %343 to i64
  %352 = select i1 %350, i64 4294967295, i64 0
  %353 = shl nuw i64 %352, 32
  %354 = or i64 %353, %352
  %355 = or i64 %354, %351
  %356 = bitcast i64 %355 to double
  br label %357

; <label>:357:                                    ; preds = %46, %116, %6
  %358 = phi i32 [ %31, %6 ], [ %67, %46 ], [ %324, %116 ]
  %359 = phi double [ %40, %6 ], [ %112, %46 ], [ %356, %116 ]
  %360 = phi double [ %43, %6 ], [ %115, %46 ], [ %345, %116 ]
  %361 = bitcast double %359 to i64
  %362 = and i64 %361, -134217728
  %363 = bitcast i64 %362 to double
  %364 = fsub double %359, %363
  %365 = fmul double %359, %359
  %366 = fmul double %363, %363
  %367 = fadd double %363, %363
  %368 = fmul double %367, %364
  %369 = fmul double %364, %364
  %370 = fadd double %360, %360
  %371 = fmul double %359, %370
  %372 = fsub double %366, %365
  %373 = fadd double %372, %368
  %374 = fadd double %369, %373
  %375 = fadd double %371, %374
  %376 = fmul double %365, %365
  %377 = fmul double %376, %376
  %378 = fmul double %365, 0x3CE8811A03B2B11D
  %379 = fadd double %378, 0xBD6AE422BC319350
  %380 = fmul double %365, 0x3DE6123C74705F67
  %381 = fadd double %380, 0xBE5AE6454BAA2959
  %382 = fmul double %365, 0x3EC71DE3A525FBED
  %383 = fadd double %382, 0xBF2A01A01A014225
  %384 = fmul double %376, %381
  %385 = fadd double %383, %384
  %386 = fmul double %377, %379
  %387 = fadd double %386, %385
  %388 = fmul double %365, %387
  %389 = fadd double %388, 0x3F811111111110B9
  %390 = fmul double %365, %389
  %391 = fadd double %390, 0xBFC5555555555555
  %392 = fsub double 0xBFC5555555555555, %391
  %393 = fadd double %390, %392
  %394 = bitcast double %391 to i64
  %395 = and i64 %394, -134217728
  %396 = bitcast i64 %395 to double
  %397 = fsub double %391, %396
  %398 = bitcast double %365 to i64
  %399 = and i64 %398, -134217728
  %400 = bitcast i64 %399 to double
  %401 = fsub double %365, %400
  %402 = fmul double %365, %391
  %403 = fmul double %400, %396
  %404 = fmul double %397, %400
  %405 = fmul double %401, %396
  %406 = fmul double %401, %397
  %407 = fmul double %375, %391
  %408 = fmul double %365, %393
  %409 = fsub double %403, %402
  %410 = fadd double %404, %409
  %411 = fadd double %405, %410
  %412 = fadd double %406, %411
  %413 = fadd double %407, %412
  %414 = fadd double %408, %413
  %415 = fadd double %402, 1.000000e+00
  %416 = fsub double 1.000000e+00, %415
  %417 = fadd double %402, %416
  %418 = fadd double %417, %414
  %419 = bitcast double %415 to i64
  %420 = and i64 %419, -134217728
  %421 = bitcast i64 %420 to double
  %422 = fsub double %415, %421
  %423 = fmul double %360, %421
  %424 = fmul double %418, %363
  %425 = fmul double %364, %422
  %426 = fmul double %422, %363
  %427 = fmul double %364, %421
  %428 = fmul double %363, %421
  %429 = fadd double %423, %424
  %430 = fadd double %425, %429
  %431 = fadd double %426, %430
  %432 = fadd double %427, %431
  %433 = fadd double %428, %432
  %434 = lshr i32 %358, 1
  %435 = and i32 %434, 1
  %436 = add nsw i32 %435, -1
  %437 = zext i32 %436 to i64
  %438 = shl nuw i64 %437, 32
  %439 = and i64 %438, -9223372036854775808
  %440 = bitcast double %433 to i64
  %441 = xor i64 %439, %440
  %442 = bitcast i64 %441 to double
  ret double %442
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincosd1_u35purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %33, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x3FF921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0x3C91A62633145C07
  %32 = fsub double %30, %31
  br label %271

; <label>:33:                                     ; preds = %1
  %34 = fcmp uge double %4, 1.000000e+14
  br i1 %34, label %78, label %35, !prof !2

; <label>:35:                                     ; preds = %33
  %36 = fmul double %0, 0x3E645F306DC9C883
  %37 = fptosi double %36 to i32
  %38 = sitofp i32 %37 to double
  %39 = fmul double %38, 0x4170000000000000
  %40 = fmul double %0, 0x3FE45F306DC9C883
  %41 = fsub double %40, %39
  %42 = fcmp ogt double %41, 0.000000e+00
  %43 = select i1 %42, double 5.000000e-01, double -5.000000e-01
  %44 = fadd double %41, %43
  %45 = bitcast double %44 to i64
  %46 = fptosi double %44 to i32
  %47 = and i32 %46, 1
  %48 = zext i32 %47 to i64
  %49 = sub i64 %45, %48
  %50 = bitcast i64 %49 to double
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = icmp sgt i32 %51, 0
  %54 = select i1 %53, double 5.000000e-01, double -5.000000e-01
  %55 = fadd double %54, %52
  %56 = bitcast double %55 to i64
  %57 = fptosi double %55 to i32
  %58 = and i32 %57, 1
  %59 = zext i32 %58 to i64
  %60 = sub i64 %56, %59
  %61 = bitcast i64 %60 to double
  %62 = fptosi double %61 to i32
  %63 = fmul double %39, 0x3FF921FB50000000
  %64 = fsub double %0, %63
  %65 = fmul double %52, 0x3FF921FB50000000
  %66 = fsub double %64, %65
  %67 = fmul double %39, 0x3E5110B460000000
  %68 = fsub double %66, %67
  %69 = fmul double %52, 0x3E5110B460000000
  %70 = fsub double %68, %69
  %71 = fmul double %39, 0x3C91A62630000000
  %72 = fsub double %70, %71
  %73 = fmul double %52, 0x3C91A62630000000
  %74 = fsub double %72, %73
  %75 = fadd double %39, %52
  %76 = fmul double %75, 0x3AE8A2E03707344A
  %77 = fsub double %74, %76
  br label %271

; <label>:78:                                     ; preds = %33
  %79 = lshr i64 %2, 52
  %80 = trunc i64 %79 to i32
  %81 = and i32 %80, 2047
  %82 = add nsw i32 %81, -1078
  %83 = icmp ugt i32 %81, 1723
  %84 = select i1 %83, i64 -288230376151711744, i64 0
  %85 = and i64 %2, -4294967296
  %86 = add i64 %84, %85
  %87 = and i64 %2, 4294967295
  %88 = or i64 %86, %87
  %89 = bitcast i64 %88 to double
  %90 = ashr i32 %82, 31
  %91 = xor i32 %90, 1073741823
  %92 = and i32 %91, %82
  %93 = shl i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !3, !noalias !19
  %97 = and i64 %88, -134217728
  %98 = bitcast i64 %97 to double
  %99 = fsub double %89, %98
  %100 = bitcast double %96 to i64
  %101 = and i64 %100, -134217728
  %102 = bitcast i64 %101 to double
  %103 = fsub double %96, %102
  %104 = fmul double %96, %89
  %105 = fmul double %98, %102
  %106 = fmul double %99, %102
  %107 = fmul double %103, %98
  %108 = fmul double %99, %103
  %109 = fsub double %105, %104
  %110 = fadd double %106, %109
  %111 = fadd double %107, %110
  %112 = fadd double %108, %111
  %113 = bitcast double %104 to i64
  %114 = and i64 %113, -9223372036854775808
  %115 = or i64 %114, 4841369599423283200
  %116 = bitcast i64 %115 to double
  %117 = fmul double %104, 4.000000e+00
  %118 = bitcast double %117 to i64
  %119 = and i64 %118, 9223372036854775807
  %120 = bitcast i64 %119 to double
  %121 = fcmp ule double %120, 0x4330000000000000
  %122 = fadd double %117, %116
  %123 = fsub double %122, %116
  %124 = bitcast double %123 to i64
  %125 = or i64 %114, %124
  %126 = bitcast i64 %125 to double
  %127 = select i1 %121, double %126, double %117
  %128 = and i64 %113, 9223372036854775807
  %129 = bitcast i64 %128 to double
  %130 = fcmp ule double %129, 0x4330000000000000
  %131 = fadd double %104, %116
  %132 = fsub double %131, %116
  %133 = bitcast double %132 to i64
  %134 = or i64 %114, %133
  %135 = bitcast i64 %134 to double
  %136 = select i1 %130, double %135, double %104
  %137 = fmul double %127, 2.500000e-01
  %138 = fsub double %104, %137
  %139 = fmul double %136, 4.000000e+00
  %140 = fsub double %127, %139
  %141 = fptosi double %140 to i32
  %142 = fadd double %112, %138
  %143 = fsub double %138, %142
  %144 = fadd double %112, %143
  %145 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %94
  %146 = load double, double* %145, align 8, !tbaa !3, !noalias !19
  %147 = bitcast double %146 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %146, %149
  %151 = fmul double %146, %89
  %152 = fmul double %98, %149
  %153 = fmul double %99, %149
  %154 = fmul double %150, %98
  %155 = fmul double %99, %150
  %156 = fsub double %152, %151
  %157 = fadd double %153, %156
  %158 = fadd double %154, %157
  %159 = fadd double %155, %158
  %160 = fadd double %151, %142
  %161 = fsub double %160, %142
  %162 = fsub double %160, %161
  %163 = fsub double %142, %162
  %164 = fsub double %151, %161
  %165 = fadd double %164, %163
  %166 = fadd double %159, %144
  %167 = fadd double %166, %165
  %168 = bitcast double %160 to i64
  %169 = and i64 %168, -9223372036854775808
  %170 = or i64 %169, 4841369599423283200
  %171 = bitcast i64 %170 to double
  %172 = fmul double %160, 4.000000e+00
  %173 = bitcast double %172 to i64
  %174 = and i64 %173, 9223372036854775807
  %175 = bitcast i64 %174 to double
  %176 = fcmp ule double %175, 0x4330000000000000
  %177 = fadd double %172, %171
  %178 = fsub double %177, %171
  %179 = bitcast double %178 to i64
  %180 = or i64 %169, %179
  %181 = bitcast i64 %180 to double
  %182 = select i1 %176, double %181, double %172
  %183 = and i64 %168, 9223372036854775807
  %184 = bitcast i64 %183 to double
  %185 = fcmp ule double %184, 0x4330000000000000
  %186 = fadd double %160, %171
  %187 = fsub double %186, %171
  %188 = bitcast double %187 to i64
  %189 = or i64 %169, %188
  %190 = bitcast i64 %189 to double
  %191 = select i1 %185, double %190, double %160
  %192 = fmul double %182, 2.500000e-01
  %193 = fsub double %160, %192
  %194 = fmul double %191, 4.000000e+00
  %195 = fsub double %182, %194
  %196 = fptosi double %195 to i32
  %197 = add nsw i32 %196, %141
  %198 = fadd double %167, %193
  %199 = fsub double %193, %198
  %200 = fadd double %167, %199
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %94
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !19
  %203 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %94
  %204 = load double, double* %203, align 8, !tbaa !3, !noalias !19
  %205 = bitcast double %202 to i64
  %206 = and i64 %205, -134217728
  %207 = bitcast i64 %206 to double
  %208 = fsub double %202, %207
  %209 = fmul double %202, %89
  %210 = fmul double %98, %207
  %211 = fmul double %208, %98
  %212 = fmul double %99, %207
  %213 = fmul double %99, %208
  %214 = fmul double %204, %89
  %215 = fsub double %210, %209
  %216 = fadd double %211, %215
  %217 = fadd double %212, %216
  %218 = fadd double %213, %217
  %219 = fadd double %214, %218
  %220 = fadd double %209, %198
  %221 = fsub double %220, %198
  %222 = fsub double %220, %221
  %223 = fsub double %198, %222
  %224 = fsub double %209, %221
  %225 = fadd double %224, %223
  %226 = fadd double %219, %200
  %227 = fadd double %226, %225
  %228 = fadd double %220, %227
  %229 = fsub double %220, %228
  %230 = fadd double %227, %229
  %231 = bitcast double %228 to i64
  %232 = and i64 %231, -134217728
  %233 = bitcast i64 %232 to double
  %234 = fsub double %228, %233
  %235 = fmul double %228, 0x401921FB54442D18
  %236 = fmul double %233, 0x401921FB50000000
  %237 = fmul double %234, 0x401921FB50000000
  %238 = fmul double %233, 0x3E7110B460000000
  %239 = fmul double %234, 0x3E7110B460000000
  %240 = fmul double %228, 0x3CB1A62633145C07
  %241 = fmul double %230, 0x401921FB54442D18
  %242 = fsub double %236, %235
  %243 = fadd double %237, %242
  %244 = fadd double %238, %243
  %245 = fadd double %239, %244
  %246 = fadd double %240, %245
  %247 = fadd double %241, %246
  %248 = and i64 %88, 9223372036854775807
  %249 = bitcast i64 %248 to double
  %250 = fcmp olt double %249, 0x3FE6666666666666
  %251 = select i1 %250, double %89, double %235
  %252 = bitcast double %247 to i64
  %253 = select i1 %250, i64 4294967295, i64 0
  %254 = shl nuw i64 %253, 32
  %255 = or i64 %254, %253
  %256 = xor i64 %255, -1
  %257 = and i64 %252, %256
  %258 = bitcast i64 %257 to double
  %259 = fadd double %251, %258
  %260 = fcmp oeq double %0, 0x7FF0000000000000
  %261 = fcmp oeq double %0, 0xFFF0000000000000
  %262 = or i1 %260, %261
  %263 = fcmp uno double %0, 0.000000e+00
  %264 = or i1 %263, %262
  %265 = bitcast double %259 to i64
  %266 = select i1 %264, i64 4294967295, i64 0
  %267 = shl nuw i64 %266, 32
  %268 = or i64 %267, %266
  %269 = or i64 %268, %265
  %270 = bitcast i64 %269 to double
  br label %271

; <label>:271:                                    ; preds = %35, %78, %6
  %272 = phi i32 [ %28, %6 ], [ %62, %35 ], [ %197, %78 ]
  %273 = phi double [ %32, %6 ], [ %77, %35 ], [ %270, %78 ]
  %274 = fmul double %273, %273
  %275 = fmul double %274, 0x3DE5D82500BECB6B
  %276 = fadd double %275, 0xBE5AE5E1E6F6F6D8
  %277 = fmul double %274, %276
  %278 = fadd double %277, 0x3EC71DE3503EAE9C
  %279 = fmul double %274, %278
  %280 = fadd double %279, 0xBF2A01A019B64F6A
  %281 = fmul double %274, %280
  %282 = fadd double %281, 0x3F8111111110F135
  %283 = fmul double %274, %282
  %284 = fadd double %283, 0xBFC5555555555542
  %285 = fmul double %274, %284
  %286 = fmul double %273, %285
  %287 = fadd double %273, %286
  %288 = icmp eq i64 %2, -9223372036854775808
  %289 = select i1 %288, double -0.000000e+00, double %287
  %290 = fmul double %274, 0x3DA8FBF9C1BDB8CE
  %291 = fsub double 0x3E21EEA016409F05, %290
  %292 = fmul double %274, %291
  %293 = fadd double %292, 0xBE927E4F8130BE9C
  %294 = fmul double %274, %293
  %295 = fadd double %294, 0x3EFA01A019C8F025
  %296 = fmul double %274, %295
  %297 = fadd double %296, 0xBF56C16C16C14C96
  %298 = fmul double %274, %297
  %299 = fadd double %298, 0x3FA5555555555545
  %300 = fmul double %274, %299
  %301 = fadd double %300, -5.000000e-01
  %302 = fmul double %274, %301
  %303 = fadd double %302, 1.000000e+00
  %304 = and i32 %272, 1
  %305 = icmp ne i32 %304, 0
  %306 = select i1 %305, double %303, double %289
  %307 = select i1 %305, double %289, double %303
  %308 = shl i32 %272, 30
  %309 = zext i32 %308 to i64
  %310 = shl nuw i64 %309, 32
  %311 = and i64 %310, -9223372036854775808
  %312 = bitcast double %306 to i64
  %313 = xor i64 %311, %312
  %314 = bitcast i64 %313 to double
  %315 = add i32 %308, 1073741824
  %316 = zext i32 %315 to i64
  %317 = shl nuw i64 %316, 32
  %318 = and i64 %317, -9223372036854775808
  %319 = bitcast double %307 to i64
  %320 = xor i64 %318, %319
  %321 = bitcast i64 %320 to double
  %322 = insertvalue { double, double } undef, double %314, 0
  %323 = insertvalue { double, double } %322, double %321, 1
  ret { double, double } %323
}

; Function Attrs: nounwind readnone uwtable
define { double, double } @Sleef_sincosd1_u10purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %35, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x3FF921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0xBC91A62633145C07
  %32 = fadd double %31, %30
  %33 = fsub double %30, %32
  %34 = fadd double %31, %33
  br label %302

; <label>:35:                                     ; preds = %1
  %36 = fcmp uge double %4, 1.000000e+14
  br i1 %36, label %109, label %37, !prof !2

; <label>:37:                                     ; preds = %35
  %38 = fmul double %0, 0x3E645F306DC9C883
  %39 = fptosi double %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fmul double %40, 0x4170000000000000
  %42 = fmul double %0, 0x3FE45F306DC9C883
  %43 = fsub double %42, %41
  %44 = fcmp ogt double %43, 0.000000e+00
  %45 = select i1 %44, double 5.000000e-01, double -5.000000e-01
  %46 = fadd double %43, %45
  %47 = bitcast double %46 to i64
  %48 = fptosi double %46 to i32
  %49 = and i32 %48, 1
  %50 = zext i32 %49 to i64
  %51 = sub i64 %47, %50
  %52 = bitcast i64 %51 to double
  %53 = fptosi double %52 to i32
  %54 = sitofp i32 %53 to double
  %55 = icmp sgt i32 %53, 0
  %56 = select i1 %55, double 5.000000e-01, double -5.000000e-01
  %57 = fadd double %56, %54
  %58 = bitcast double %57 to i64
  %59 = fptosi double %57 to i32
  %60 = and i32 %59, 1
  %61 = zext i32 %60 to i64
  %62 = sub i64 %58, %61
  %63 = bitcast i64 %62 to double
  %64 = fptosi double %63 to i32
  %65 = fmul double %41, 0x3FF921FB50000000
  %66 = fsub double %0, %65
  %67 = fmul double %54, 0xBFF921FB50000000
  %68 = fadd double %66, %67
  %69 = fsub double %66, %68
  %70 = fadd double %67, %69
  %71 = fmul double %41, 0xBE5110B460000000
  %72 = fadd double %71, %68
  %73 = fsub double %72, %68
  %74 = fsub double %72, %73
  %75 = fsub double %68, %74
  %76 = fsub double %71, %73
  %77 = fadd double %76, %75
  %78 = fadd double %70, %77
  %79 = fmul double %54, 0xBE5110B460000000
  %80 = fadd double %79, %72
  %81 = fsub double %80, %72
  %82 = fsub double %80, %81
  %83 = fsub double %72, %82
  %84 = fsub double %79, %81
  %85 = fadd double %84, %83
  %86 = fadd double %85, %78
  %87 = fmul double %41, 0xBC91A62630000000
  %88 = fadd double %87, %80
  %89 = fsub double %88, %80
  %90 = fsub double %88, %89
  %91 = fsub double %80, %90
  %92 = fsub double %87, %89
  %93 = fadd double %92, %91
  %94 = fadd double %93, %86
  %95 = fmul double %54, 0xBC91A62630000000
  %96 = fadd double %95, %88
  %97 = fsub double %96, %88
  %98 = fsub double %96, %97
  %99 = fsub double %88, %98
  %100 = fsub double %95, %97
  %101 = fadd double %100, %99
  %102 = fadd double %101, %94
  %103 = fadd double %41, %54
  %104 = fmul double %103, 0xBAE8A2E03707344A
  %105 = fadd double %104, %96
  %106 = fsub double %96, %105
  %107 = fadd double %104, %106
  %108 = fadd double %107, %102
  br label %302

; <label>:109:                                    ; preds = %35
  %110 = lshr i64 %2, 52
  %111 = trunc i64 %110 to i32
  %112 = and i32 %111, 2047
  %113 = add nsw i32 %112, -1078
  %114 = icmp ugt i32 %112, 1723
  %115 = select i1 %114, i64 -288230376151711744, i64 0
  %116 = and i64 %2, -4294967296
  %117 = add i64 %115, %116
  %118 = and i64 %2, 4294967295
  %119 = or i64 %117, %118
  %120 = bitcast i64 %119 to double
  %121 = ashr i32 %113, 31
  %122 = xor i32 %121, 1073741823
  %123 = and i32 %122, %113
  %124 = shl i32 %123, 2
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !3, !noalias !22
  %128 = and i64 %119, -134217728
  %129 = bitcast i64 %128 to double
  %130 = fsub double %120, %129
  %131 = bitcast double %127 to i64
  %132 = and i64 %131, -134217728
  %133 = bitcast i64 %132 to double
  %134 = fsub double %127, %133
  %135 = fmul double %127, %120
  %136 = fmul double %129, %133
  %137 = fmul double %130, %133
  %138 = fmul double %134, %129
  %139 = fmul double %130, %134
  %140 = fsub double %136, %135
  %141 = fadd double %137, %140
  %142 = fadd double %138, %141
  %143 = fadd double %139, %142
  %144 = bitcast double %135 to i64
  %145 = and i64 %144, -9223372036854775808
  %146 = or i64 %145, 4841369599423283200
  %147 = bitcast i64 %146 to double
  %148 = fmul double %135, 4.000000e+00
  %149 = bitcast double %148 to i64
  %150 = and i64 %149, 9223372036854775807
  %151 = bitcast i64 %150 to double
  %152 = fcmp ule double %151, 0x4330000000000000
  %153 = fadd double %148, %147
  %154 = fsub double %153, %147
  %155 = bitcast double %154 to i64
  %156 = or i64 %145, %155
  %157 = bitcast i64 %156 to double
  %158 = select i1 %152, double %157, double %148
  %159 = and i64 %144, 9223372036854775807
  %160 = bitcast i64 %159 to double
  %161 = fcmp ule double %160, 0x4330000000000000
  %162 = fadd double %135, %147
  %163 = fsub double %162, %147
  %164 = bitcast double %163 to i64
  %165 = or i64 %145, %164
  %166 = bitcast i64 %165 to double
  %167 = select i1 %161, double %166, double %135
  %168 = fmul double %158, 2.500000e-01
  %169 = fsub double %135, %168
  %170 = fmul double %167, 4.000000e+00
  %171 = fsub double %158, %170
  %172 = fptosi double %171 to i32
  %173 = fadd double %143, %169
  %174 = fsub double %169, %173
  %175 = fadd double %143, %174
  %176 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %125
  %177 = load double, double* %176, align 8, !tbaa !3, !noalias !22
  %178 = bitcast double %177 to i64
  %179 = and i64 %178, -134217728
  %180 = bitcast i64 %179 to double
  %181 = fsub double %177, %180
  %182 = fmul double %177, %120
  %183 = fmul double %129, %180
  %184 = fmul double %130, %180
  %185 = fmul double %181, %129
  %186 = fmul double %130, %181
  %187 = fsub double %183, %182
  %188 = fadd double %184, %187
  %189 = fadd double %185, %188
  %190 = fadd double %186, %189
  %191 = fadd double %182, %173
  %192 = fsub double %191, %173
  %193 = fsub double %191, %192
  %194 = fsub double %173, %193
  %195 = fsub double %182, %192
  %196 = fadd double %195, %194
  %197 = fadd double %190, %175
  %198 = fadd double %197, %196
  %199 = bitcast double %191 to i64
  %200 = and i64 %199, -9223372036854775808
  %201 = or i64 %200, 4841369599423283200
  %202 = bitcast i64 %201 to double
  %203 = fmul double %191, 4.000000e+00
  %204 = bitcast double %203 to i64
  %205 = and i64 %204, 9223372036854775807
  %206 = bitcast i64 %205 to double
  %207 = fcmp ule double %206, 0x4330000000000000
  %208 = fadd double %203, %202
  %209 = fsub double %208, %202
  %210 = bitcast double %209 to i64
  %211 = or i64 %200, %210
  %212 = bitcast i64 %211 to double
  %213 = select i1 %207, double %212, double %203
  %214 = and i64 %199, 9223372036854775807
  %215 = bitcast i64 %214 to double
  %216 = fcmp ule double %215, 0x4330000000000000
  %217 = fadd double %191, %202
  %218 = fsub double %217, %202
  %219 = bitcast double %218 to i64
  %220 = or i64 %200, %219
  %221 = bitcast i64 %220 to double
  %222 = select i1 %216, double %221, double %191
  %223 = fmul double %213, 2.500000e-01
  %224 = fsub double %191, %223
  %225 = fmul double %222, 4.000000e+00
  %226 = fsub double %213, %225
  %227 = fptosi double %226 to i32
  %228 = add nsw i32 %227, %172
  %229 = fadd double %198, %224
  %230 = fsub double %224, %229
  %231 = fadd double %198, %230
  %232 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %125
  %233 = load double, double* %232, align 8, !tbaa !3, !noalias !22
  %234 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %125
  %235 = load double, double* %234, align 8, !tbaa !3, !noalias !22
  %236 = bitcast double %233 to i64
  %237 = and i64 %236, -134217728
  %238 = bitcast i64 %237 to double
  %239 = fsub double %233, %238
  %240 = fmul double %233, %120
  %241 = fmul double %129, %238
  %242 = fmul double %239, %129
  %243 = fmul double %130, %238
  %244 = fmul double %130, %239
  %245 = fmul double %235, %120
  %246 = fsub double %241, %240
  %247 = fadd double %242, %246
  %248 = fadd double %243, %247
  %249 = fadd double %244, %248
  %250 = fadd double %245, %249
  %251 = fadd double %240, %229
  %252 = fsub double %251, %229
  %253 = fsub double %251, %252
  %254 = fsub double %229, %253
  %255 = fsub double %240, %252
  %256 = fadd double %255, %254
  %257 = fadd double %250, %231
  %258 = fadd double %257, %256
  %259 = fadd double %251, %258
  %260 = fsub double %251, %259
  %261 = fadd double %258, %260
  %262 = bitcast double %259 to i64
  %263 = and i64 %262, -134217728
  %264 = bitcast i64 %263 to double
  %265 = fsub double %259, %264
  %266 = fmul double %259, 0x401921FB54442D18
  %267 = fmul double %264, 0x401921FB50000000
  %268 = fmul double %265, 0x401921FB50000000
  %269 = fmul double %264, 0x3E7110B460000000
  %270 = fmul double %265, 0x3E7110B460000000
  %271 = fmul double %259, 0x3CB1A62633145C07
  %272 = fmul double %261, 0x401921FB54442D18
  %273 = fsub double %267, %266
  %274 = fadd double %268, %273
  %275 = fadd double %269, %274
  %276 = fadd double %270, %275
  %277 = fadd double %271, %276
  %278 = fadd double %272, %277
  %279 = and i64 %119, 9223372036854775807
  %280 = bitcast i64 %279 to double
  %281 = fcmp olt double %280, 0x3FE6666666666666
  %282 = select i1 %281, double %120, double %266
  %283 = bitcast double %278 to i64
  %284 = select i1 %281, i64 4294967295, i64 0
  %285 = shl nuw i64 %284, 32
  %286 = or i64 %285, %284
  %287 = xor i64 %286, -1
  %288 = and i64 %283, %287
  %289 = fcmp oeq double %0, 0x7FF0000000000000
  %290 = fcmp oeq double %0, 0xFFF0000000000000
  %291 = or i1 %289, %290
  %292 = fcmp uno double %0, 0.000000e+00
  %293 = or i1 %292, %291
  %294 = bitcast double %282 to i64
  %295 = select i1 %293, i64 4294967295, i64 0
  %296 = shl nuw i64 %295, 32
  %297 = or i64 %296, %295
  %298 = or i64 %297, %294
  %299 = bitcast i64 %298 to double
  %300 = or i64 %297, %288
  %301 = bitcast i64 %300 to double
  br label %302

; <label>:302:                                    ; preds = %37, %109, %6
  %303 = phi i32 [ %28, %6 ], [ %64, %37 ], [ %228, %109 ]
  %304 = phi double [ %32, %6 ], [ %105, %37 ], [ %299, %109 ]
  %305 = phi double [ %34, %6 ], [ %108, %37 ], [ %301, %109 ]
  %306 = bitcast double %304 to i64
  %307 = and i64 %306, -134217728
  %308 = bitcast i64 %307 to double
  %309 = fsub double %304, %308
  %310 = fmul double %305, %308
  %311 = fmul double %309, %309
  %312 = fmul double %309, %308
  %313 = fadd double %312, %312
  %314 = fmul double %308, %308
  %315 = fadd double %310, %310
  %316 = fadd double %315, %311
  %317 = fadd double %316, %313
  %318 = fadd double %314, %317
  %319 = fmul double %318, 0x3DE5D82500BECB6B
  %320 = fadd double %319, 0xBE5AE5E1E6F6F6D8
  %321 = fmul double %318, %320
  %322 = fadd double %321, 0x3EC71DE3503EAE9C
  %323 = fmul double %318, %322
  %324 = fadd double %323, 0xBF2A01A019B64F6A
  %325 = fmul double %318, %324
  %326 = fadd double %325, 0x3F8111111110F135
  %327 = fmul double %318, %326
  %328 = fadd double %327, 0xBFC5555555555542
  %329 = fmul double %304, %318
  %330 = fmul double %329, %328
  %331 = fadd double %304, %330
  %332 = fsub double %304, %331
  %333 = fadd double %330, %332
  %334 = fadd double %305, %333
  %335 = fadd double %331, %334
  %336 = icmp eq i64 %2, -9223372036854775808
  %337 = select i1 %336, double -0.000000e+00, double %335
  %338 = fmul double %318, 0x3DA8FBF9C1BDB8CE
  %339 = fsub double 0x3E21EEA016409F05, %338
  %340 = fmul double %318, %339
  %341 = fadd double %340, 0xBE927E4F8130BE9C
  %342 = fmul double %318, %341
  %343 = fadd double %342, 0x3EFA01A019C8F025
  %344 = fmul double %318, %343
  %345 = fadd double %344, 0xBF56C16C16C14C96
  %346 = fmul double %318, %345
  %347 = fadd double %346, 0x3FA5555555555545
  %348 = fmul double %318, %347
  %349 = fadd double %348, -5.000000e-01
  %350 = bitcast double %318 to i64
  %351 = and i64 %350, -134217728
  %352 = bitcast i64 %351 to double
  %353 = fsub double %318, %352
  %354 = bitcast double %349 to i64
  %355 = and i64 %354, -134217728
  %356 = bitcast i64 %355 to double
  %357 = fsub double %349, %356
  %358 = fmul double %318, %349
  %359 = fmul double %352, %356
  %360 = fmul double %353, %356
  %361 = fmul double %357, %352
  %362 = fmul double %353, %357
  %363 = fsub double %359, %358
  %364 = fadd double %360, %363
  %365 = fadd double %361, %364
  %366 = fadd double %362, %365
  %367 = fadd double %358, 1.000000e+00
  %368 = fsub double 1.000000e+00, %367
  %369 = fadd double %358, %368
  %370 = fadd double %369, %366
  %371 = fadd double %367, %370
  %372 = and i32 %303, 1
  %373 = icmp ne i32 %372, 0
  %374 = select i1 %373, double %371, double %337
  %375 = select i1 %373, double %337, double %371
  %376 = shl i32 %303, 30
  %377 = zext i32 %376 to i64
  %378 = shl nuw i64 %377, 32
  %379 = and i64 %378, -9223372036854775808
  %380 = bitcast double %374 to i64
  %381 = xor i64 %379, %380
  %382 = bitcast i64 %381 to double
  %383 = add i32 %376, 1073741824
  %384 = zext i32 %383 to i64
  %385 = shl nuw i64 %384, 32
  %386 = and i64 %385, -9223372036854775808
  %387 = bitcast double %375 to i64
  %388 = xor i64 %386, %387
  %389 = bitcast i64 %388 to double
  %390 = insertvalue { double, double } undef, double %382, 0
  %391 = insertvalue { double, double } %390, double %389, 1
  ret { double, double } %391
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_sincospid1_u05purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = lshr i32 %3, 31
  %5 = xor i32 %4, 1
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = bitcast double %9 to i64
  %11 = and i64 %10, -134217728
  %12 = bitcast i64 %11 to double
  %13 = fsub double %9, %12
  %14 = fmul double %12, %12
  %15 = fmul double %13, %12
  %16 = insertelement <2 x double> undef, double %9, i32 0
  %17 = insertelement <2 x double> %16, double %13, i32 1
  %18 = fmul <2 x double> %17, %17
  %19 = extractelement <2 x double> %18, i32 0
  %20 = fsub double %14, %19
  %21 = fadd double %15, %20
  %22 = fadd double %15, %21
  %23 = fmul double %19, 0x3D16CB8B645A2115
  %24 = fsub double 0x3D9E8EFF936BEB38, %23
  %25 = fmul double %19, %24
  %26 = fadd double %25, 0xBE1E3074CBC7E020
  %27 = fmul double %19, %26
  %28 = fadd double %27, 0x3E950783486A74C8
  %29 = fmul double %19, %28
  %30 = fadd double %29, 0xBF032D2CCE62B479
  %31 = fmul double %19, %30
  %32 = fadd double %31, 0x3F6466BC6775AADE
  %33 = fmul double %19, %32
  %34 = fadd double %33, 0xBFB4ABBCE625BE53
  %35 = fsub double %34, %33
  %36 = fsub double %34, %35
  %37 = fsub double %33, %36
  %38 = fsub double 0xBFB4ABBCE625BE53, %35
  %39 = fadd double %38, %37
  %40 = fadd double %39, 0x3C50B00000000000
  %41 = bitcast double %19 to i64
  %42 = and i64 %41, -134217728
  %43 = bitcast i64 %42 to double
  %44 = insertelement <2 x double> undef, double %43, i32 0
  %45 = insertelement <2 x double> %44, double %22, i32 1
  %46 = fsub <2 x double> %18, %45
  %47 = fadd <2 x double> %18, %45
  %48 = shufflevector <2 x double> %46, <2 x double> %47, <2 x i32> <i32 0, i32 3>
  %49 = bitcast double %34 to i64
  %50 = and i64 %49, -134217728
  %51 = bitcast i64 %50 to double
  %52 = fsub double %34, %51
  %53 = fmul double %19, %34
  %54 = fmul double %43, %51
  %55 = extractelement <2 x double> %46, i32 0
  %56 = fmul double %55, %51
  %57 = fmul double %52, %43
  %58 = fmul double %55, %52
  %59 = extractelement <2 x double> %47, i32 1
  %60 = fsub double %54, %53
  %61 = fadd double %56, %60
  %62 = fadd double %57, %61
  %63 = fadd double %58, %62
  %64 = fadd double %53, 0x3FE921FB54442D18
  %65 = fsub double %64, %53
  %66 = fsub double %64, %65
  %67 = fsub double %53, %66
  %68 = fsub double 0x3FE921FB54442D18, %65
  %69 = fadd double %68, %67
  %70 = bitcast double %64 to i64
  %71 = and i64 %70, -134217728
  %72 = bitcast i64 %71 to double
  %73 = fsub double %64, %72
  %74 = fmul double %9, %64
  %75 = insertelement <2 x double> undef, double %12, i32 0
  %76 = shufflevector <2 x double> %75, <2 x double> %18, <2 x i32> <i32 0, i32 2>
  %77 = insertelement <2 x double> undef, double %72, i32 0
  %78 = insertelement <2 x double> %77, double %40, i32 1
  %79 = fmul <2 x double> %76, %78
  %80 = insertelement <2 x double> undef, double %73, i32 0
  %81 = shufflevector <2 x double> %80, <2 x double> %47, <2 x i32> <i32 0, i32 3>
  %82 = insertelement <2 x double> %75, double %34, i32 1
  %83 = fmul <2 x double> %81, %82
  %84 = fmul double %13, %72
  %85 = fmul double %13, %73
  %86 = insertelement <2 x double> undef, double %74, i32 0
  %87 = insertelement <2 x double> %86, double %63, i32 1
  %88 = fsub <2 x double> %79, %87
  %89 = fadd <2 x double> %79, %87
  %90 = shufflevector <2 x double> %88, <2 x double> %89, <2 x i32> <i32 0, i32 3>
  %91 = fadd <2 x double> %83, %90
  %92 = insertelement <2 x double> <double undef, double 0x3C81A80000000000>, double %84, i32 0
  %93 = fadd <2 x double> %92, %91
  %94 = insertelement <2 x double> undef, double %85, i32 0
  %95 = insertelement <2 x double> %94, double %69, i32 1
  %96 = fadd <2 x double> %95, %93
  %97 = extractelement <2 x double> %96, i32 1
  %98 = fmul double %9, %97
  %99 = extractelement <2 x double> %96, i32 0
  %100 = fadd double %99, %98
  %101 = fadd double %74, %100
  %102 = bitcast double %0 to i64
  %103 = icmp eq i64 %102, -9223372036854775808
  %104 = select i1 %103, double -0.000000e+00, double %101
  %105 = fmul double %19, 0x3CD1EA3B366CF50B
  %106 = fadd double %105, 0xBD5B6DF1CE46F480
  %107 = fmul double %19, %106
  %108 = fadd double %107, 0x3DDF9D387B282B12
  %109 = fmul double %19, %108
  %110 = fadd double %109, 0xBE5A6D1F2A0E516D
  %111 = fmul double %19, %110
  %112 = fadd double %111, 0x3ECE1F506891B1AB
  %113 = fmul double %19, %112
  %114 = fadd double %113, 0xBF355D3C7E3CBFF8
  %115 = fmul double %19, %114
  %116 = fadd double %115, 0x3F903C1F081B5AC4
  %117 = fsub double %116, %115
  %118 = fsub double %116, %117
  %119 = fsub double %115, %118
  %120 = fsub double 0x3F903C1F081B5AC4, %117
  %121 = fadd double %120, %119
  %122 = fadd double %121, 0xBC33500000000000
  %123 = bitcast double %116 to i64
  %124 = and i64 %123, -134217728
  %125 = bitcast i64 %124 to double
  %126 = fsub double %116, %125
  %127 = fmul double %19, %116
  %128 = fmul double %43, %125
  %129 = fmul double %55, %125
  %130 = fmul double %126, %43
  %131 = fsub double %128, %127
  %132 = fadd double %129, %131
  %133 = fadd double %130, %132
  %134 = fadd double %127, 0xBFD3BD3CC9BE45DE
  %135 = fsub double %134, %127
  %136 = fsub double %134, %135
  %137 = fsub double %127, %136
  %138 = fsub double 0xBFD3BD3CC9BE45DE, %135
  %139 = fadd double %138, %137
  %140 = bitcast double %134 to i64
  %141 = and i64 %140, -134217728
  %142 = bitcast i64 %141 to double
  %143 = fsub double %134, %142
  %144 = fmul double %19, %134
  %145 = shufflevector <2 x double> %44, <2 x double> %46, <2 x i32> <i32 0, i32 2>
  %146 = insertelement <2 x double> undef, double %142, i32 0
  %147 = insertelement <2 x double> %146, double %126, i32 1
  %148 = fmul <2 x double> %145, %147
  %149 = insertelement <2 x double> undef, double %143, i32 0
  %150 = shufflevector <2 x double> %149, <2 x double> %18, <2 x i32> <i32 0, i32 2>
  %151 = insertelement <2 x double> %44, double %122, i32 1
  %152 = fmul <2 x double> %150, %151
  %153 = insertelement <2 x double> %146, double %116, i32 1
  %154 = fmul <2 x double> %48, %153
  %155 = fmul double %55, %143
  %156 = fmul double %59, %134
  %157 = insertelement <2 x double> undef, double %144, i32 0
  %158 = insertelement <2 x double> %157, double %133, i32 1
  %159 = fsub <2 x double> %148, %158
  %160 = fadd <2 x double> %148, %158
  %161 = shufflevector <2 x double> %159, <2 x double> %160, <2 x i32> <i32 0, i32 3>
  %162 = fadd <2 x double> %152, %161
  %163 = fadd <2 x double> %154, %162
  %164 = insertelement <2 x double> <double undef, double 0xBC76900000000000>, double %155, i32 0
  %165 = fadd <2 x double> %164, %163
  %166 = insertelement <2 x double> undef, double %156, i32 0
  %167 = insertelement <2 x double> %166, double %139, i32 1
  %168 = fadd <2 x double> %167, %165
  %169 = extractelement <2 x double> %168, i32 1
  %170 = fmul double %19, %169
  %171 = extractelement <2 x double> %168, i32 0
  %172 = fadd double %171, %170
  %173 = fadd double %144, 1.000000e+00
  %174 = fsub double %173, %144
  %175 = fsub double %173, %174
  %176 = fsub double %144, %175
  %177 = fsub double 1.000000e+00, %174
  %178 = fadd double %177, %176
  %179 = fadd double %178, %172
  %180 = fadd double %173, %179
  %181 = and i32 %6, 2
  %182 = icmp ne i32 %181, 0
  %183 = select i1 %182, double %180, double %104
  %184 = select i1 %182, double %104, double %180
  %185 = shl i32 %6, 29
  %186 = zext i32 %185 to i64
  %187 = shl nuw i64 %186, 32
  %188 = and i64 %187, -9223372036854775808
  %189 = bitcast double %183 to i64
  %190 = xor i64 %188, %189
  %191 = shl i32 %7, 29
  %192 = add i32 %191, 1073741824
  %193 = zext i32 %192 to i64
  %194 = shl nuw i64 %193, 32
  %195 = and i64 %194, -9223372036854775808
  %196 = bitcast double %184 to i64
  %197 = xor i64 %195, %196
  %198 = and i64 %102, 9223372036854775807
  %199 = bitcast i64 %198 to double
  %200 = fcmp ogt double %199, 2.500000e+08
  %201 = select i1 %200, i64 4294967295, i64 0
  %202 = shl nuw i64 %201, 32
  %203 = or i64 %202, %201
  %204 = xor i64 %203, -1
  %205 = and i64 %190, %204
  %206 = fcmp oeq double %0, 0x7FF0000000000000
  %207 = fcmp oeq double %0, 0xFFF0000000000000
  %208 = or i1 %206, %207
  %209 = select i1 %208, i64 4294967295, i64 0
  %210 = shl nuw i64 %209, 32
  %211 = or i64 %210, %209
  %212 = or i64 %211, %205
  %213 = bitcast i64 %212 to double
  %214 = select i1 %200, i64 4607182418800017408, i64 %197
  %215 = or i64 %211, %214
  %216 = bitcast i64 %215 to double
  %217 = insertvalue { double, double } undef, double %213, 0
  %218 = insertvalue { double, double } %217, double %216, 1
  ret { double, double } %218
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_sincospid1_u35purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = lshr i32 %3, 31
  %5 = xor i32 %4, 1
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = fmul double %9, %9
  %11 = fmul double %10, 0x3D9E42E923057D6C
  %12 = fadd double %11, 0xBE1E3011CA3F21B5
  %13 = fmul double %10, %12
  %14 = fadd double %13, 0x3E9507830918116C
  %15 = fmul double %10, %14
  %16 = fadd double %15, 0xBF032D2CCE398CAE
  %17 = fmul double %10, %16
  %18 = fadd double %17, 0x3F6466BC677591C5
  %19 = fmul double %10, %18
  %20 = fadd double %19, 0xBFB4ABBCE625BE43
  %21 = fmul double %10, %20
  %22 = fadd double %21, 0x3FE921FB54442D18
  %23 = fmul double %9, %22
  %24 = fmul double %10, 0x3D5B29CFED2A85B3
  %25 = fsub double 0x3DDF9CD01C42C7CD, %24
  %26 = fmul double %10, %25
  %27 = fadd double %26, 0xBE5A6D1ED7B66707
  %28 = fmul double %10, %27
  %29 = fadd double %28, 0x3ECE1F50684AD332
  %30 = fmul double %10, %29
  %31 = fadd double %30, 0xBF355D3C7E3C9FCF
  %32 = fmul double %10, %31
  %33 = fadd double %32, 0x3F903C1F081B5AAA
  %34 = fmul double %10, %33
  %35 = fadd double %34, 0xBFD3BD3CC9BE45DE
  %36 = fmul double %10, %35
  %37 = fadd double %36, 1.000000e+00
  %38 = and i32 %6, 2
  %39 = icmp ne i32 %38, 0
  %40 = select i1 %39, double %37, double %23
  %41 = select i1 %39, double %23, double %37
  %42 = shl i32 %6, 29
  %43 = zext i32 %42 to i64
  %44 = shl nuw i64 %43, 32
  %45 = and i64 %44, -9223372036854775808
  %46 = bitcast double %40 to i64
  %47 = xor i64 %45, %46
  %48 = shl i32 %7, 29
  %49 = add i32 %48, 1073741824
  %50 = zext i32 %49 to i64
  %51 = shl nuw i64 %50, 32
  %52 = and i64 %51, -9223372036854775808
  %53 = bitcast double %41 to i64
  %54 = xor i64 %52, %53
  %55 = bitcast double %0 to i64
  %56 = and i64 %55, 9223372036854775807
  %57 = bitcast i64 %56 to double
  %58 = fcmp ogt double %57, 2.500000e+08
  %59 = select i1 %58, i64 4294967295, i64 0
  %60 = shl nuw i64 %59, 32
  %61 = or i64 %60, %59
  %62 = xor i64 %61, -1
  %63 = and i64 %47, %62
  %64 = and i64 %54, %62
  %65 = fcmp oeq double %0, 0x7FF0000000000000
  %66 = fcmp oeq double %0, 0xFFF0000000000000
  %67 = or i1 %65, %66
  %68 = select i1 %67, i64 4294967295, i64 0
  %69 = shl nuw i64 %68, 32
  %70 = or i64 %69, %68
  %71 = or i64 %70, %63
  %72 = bitcast i64 %71 to double
  %73 = or i64 %70, %64
  %74 = bitcast i64 %73 to double
  %75 = insertvalue { double, double } undef, double %72, 0
  %76 = insertvalue { double, double } %75, double %74, 1
  ret { double, double } %76
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_modfd1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = bitcast double %0 to i64
  %11 = and i64 %10, 9223372036854775807
  %12 = bitcast i64 %11 to double
  %13 = fcmp ule double %12, 0x4330000000000000
  %14 = select i1 %13, double %9, double 0.000000e+00
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9223372036854775807
  %17 = and i64 %10, -9223372036854775808
  %18 = or i64 %16, %17
  %19 = bitcast i64 %18 to double
  %20 = fsub double %0, %14
  %21 = bitcast double %20 to i64
  %22 = and i64 %21, 9223372036854775807
  %23 = or i64 %22, %17
  %24 = bitcast i64 %23 to double
  %25 = insertvalue { double, double } undef, double %19, 0
  %26 = insertvalue { double, double } %25, double %24, 1
  ret { double, double } %26
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinpid1_u05purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = lshr i32 %3, 31
  %5 = xor i32 %4, 1
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = fmul double %9, %9
  %11 = bitcast double %9 to i64
  %12 = and i64 %11, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %9, %13
  %15 = fmul double %13, %13
  %16 = fmul double %14, %13
  %17 = fmul double %14, %14
  %18 = fsub double %15, %10
  %19 = fadd double %16, %18
  %20 = fadd double %16, %19
  %21 = fadd double %17, %20
  %22 = and i32 %6, 2
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %25 = select i1 %23, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %26 = fmul double %24, %10
  %27 = fadd double %25, %26
  %28 = select i1 %23, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %29 = fmul double %10, %27
  %30 = fadd double %28, %29
  %31 = select i1 %23, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %32 = fmul double %10, %30
  %33 = fadd double %31, %32
  %34 = select i1 %23, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %35 = fmul double %10, %33
  %36 = fadd double %34, %35
  %37 = select i1 %23, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %38 = fmul double %10, %36
  %39 = fadd double %37, %38
  %40 = fmul double %10, %39
  %41 = select i1 %23, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %42 = select i1 %23, double 0x3C50B00000000000, double 0xBC33500000000000
  %43 = fadd double %41, %40
  %44 = fsub double %43, %40
  %45 = fsub double %43, %44
  %46 = fsub double %40, %45
  %47 = fsub double %41, %44
  %48 = fadd double %47, %46
  %49 = fadd double %42, %48
  %50 = bitcast double %10 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %10, %52
  %54 = bitcast double %43 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %43, %56
  %58 = fmul double %10, %43
  %59 = fmul double %52, %56
  %60 = fmul double %53, %56
  %61 = fmul double %57, %52
  %62 = fmul double %53, %57
  %63 = fmul double %10, %49
  %64 = fmul double %21, %43
  %65 = fsub double %59, %58
  %66 = fadd double %60, %65
  %67 = fadd double %61, %66
  %68 = fadd double %62, %67
  %69 = fadd double %63, %68
  %70 = fadd double %64, %69
  %71 = select i1 %23, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %72 = select i1 %23, double 0x3C81A80000000000, double 0xBC76900000000000
  %73 = fadd double %71, %58
  %74 = fsub double %73, %58
  %75 = fsub double %73, %74
  %76 = fsub double %58, %75
  %77 = fsub double %71, %74
  %78 = fadd double %77, %76
  %79 = fadd double %72, %70
  %80 = fadd double %78, %79
  %81 = select i1 %23, double %9, double %10
  %82 = select i1 %23, double 0.000000e+00, double %21
  %83 = bitcast double %73 to i64
  %84 = and i64 %83, -134217728
  %85 = bitcast i64 %84 to double
  %86 = fsub double %73, %85
  %87 = bitcast double %81 to i64
  %88 = and i64 %87, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %81, %89
  %91 = fmul double %81, %73
  %92 = fmul double %89, %85
  %93 = fmul double %86, %89
  %94 = fmul double %90, %85
  %95 = fmul double %90, %86
  %96 = fmul double %82, %73
  %97 = fmul double %81, %80
  %98 = fsub double %92, %91
  %99 = fadd double %93, %98
  %100 = fadd double %94, %99
  %101 = fadd double %95, %100
  %102 = fadd double %96, %101
  %103 = fadd double %102, %97
  %104 = fadd double %91, 1.000000e+00
  %105 = fsub double %104, %91
  %106 = fsub double %104, %105
  %107 = fsub double %91, %106
  %108 = fsub double 1.000000e+00, %105
  %109 = fadd double %108, %107
  %110 = fadd double %109, %103
  %111 = select i1 %23, double %91, double %104
  %112 = select i1 %23, double %103, double %110
  %113 = shl i32 %6, 29
  %114 = zext i32 %113 to i64
  %115 = shl nuw i64 %114, 32
  %116 = and i64 %115, -9223372036854775808
  %117 = bitcast double %111 to i64
  %118 = xor i64 %116, %117
  %119 = bitcast i64 %118 to double
  %120 = bitcast double %112 to i64
  %121 = xor i64 %116, %120
  %122 = bitcast i64 %121 to double
  %123 = fadd double %119, %122
  %124 = bitcast double %0 to i64
  %125 = icmp eq i64 %124, -9223372036854775808
  %126 = and i64 %124, 9223372036854775807
  %127 = bitcast i64 %126 to double
  %128 = fcmp ogt double %127, 2.500000e+08
  %129 = bitcast double %123 to i64
  %130 = select i1 %125, i64 -9223372036854775808, i64 %129
  %131 = select i1 %128, i64 4294967295, i64 0
  %132 = shl nuw i64 %131, 32
  %133 = or i64 %132, %131
  %134 = xor i64 %133, -1
  %135 = and i64 %130, %134
  %136 = fcmp oeq double %0, 0x7FF0000000000000
  %137 = fcmp oeq double %0, 0xFFF0000000000000
  %138 = or i1 %136, %137
  %139 = select i1 %138, i64 4294967295, i64 0
  %140 = shl nuw i64 %139, 32
  %141 = or i64 %140, %139
  %142 = or i64 %141, %135
  %143 = bitcast i64 %142 to double
  ret double %143
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cospid1_u05purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = lshr i32 %3, 31
  %5 = xor i32 %4, 1
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = and i32 %6, 2
  %9 = sitofp i32 %7 to double
  %10 = fsub double %2, %9
  %11 = fmul double %10, %10
  %12 = bitcast double %10 to i64
  %13 = and i64 %12, -134217728
  %14 = bitcast i64 %13 to double
  %15 = fsub double %10, %14
  %16 = fmul double %14, %14
  %17 = fmul double %15, %14
  %18 = fmul double %15, %15
  %19 = fsub double %16, %11
  %20 = fadd double %17, %19
  %21 = fadd double %17, %20
  %22 = fadd double %18, %21
  %23 = icmp ne i32 %8, 0
  %24 = select i1 %23, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %25 = select i1 %23, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %26 = fmul double %24, %11
  %27 = fadd double %25, %26
  %28 = select i1 %23, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %29 = fmul double %11, %27
  %30 = fadd double %28, %29
  %31 = select i1 %23, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %32 = fmul double %11, %30
  %33 = fadd double %31, %32
  %34 = select i1 %23, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %35 = fmul double %11, %33
  %36 = fadd double %34, %35
  %37 = select i1 %23, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %38 = fmul double %11, %36
  %39 = fadd double %37, %38
  %40 = fmul double %11, %39
  %41 = select i1 %23, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %42 = select i1 %23, double 0x3C50B00000000000, double 0xBC33500000000000
  %43 = fadd double %41, %40
  %44 = fsub double %43, %40
  %45 = fsub double %43, %44
  %46 = fsub double %40, %45
  %47 = fsub double %41, %44
  %48 = fadd double %47, %46
  %49 = fadd double %42, %48
  %50 = bitcast double %11 to i64
  %51 = and i64 %50, -134217728
  %52 = bitcast i64 %51 to double
  %53 = fsub double %11, %52
  %54 = bitcast double %43 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %43, %56
  %58 = fmul double %11, %43
  %59 = fmul double %52, %56
  %60 = fmul double %53, %56
  %61 = fmul double %57, %52
  %62 = fmul double %53, %57
  %63 = fmul double %11, %49
  %64 = fmul double %22, %43
  %65 = fsub double %59, %58
  %66 = fadd double %60, %65
  %67 = fadd double %61, %66
  %68 = fadd double %62, %67
  %69 = fadd double %63, %68
  %70 = fadd double %64, %69
  %71 = select i1 %23, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %72 = select i1 %23, double 0x3C81A80000000000, double 0xBC76900000000000
  %73 = fadd double %71, %58
  %74 = fsub double %73, %58
  %75 = fsub double %73, %74
  %76 = fsub double %58, %75
  %77 = fsub double %71, %74
  %78 = fadd double %77, %76
  %79 = fadd double %72, %70
  %80 = fadd double %78, %79
  %81 = select i1 %23, double %10, double %11
  %82 = select i1 %23, double 0.000000e+00, double %22
  %83 = bitcast double %73 to i64
  %84 = and i64 %83, -134217728
  %85 = bitcast i64 %84 to double
  %86 = fsub double %73, %85
  %87 = bitcast double %81 to i64
  %88 = and i64 %87, -134217728
  %89 = bitcast i64 %88 to double
  %90 = fsub double %81, %89
  %91 = fmul double %81, %73
  %92 = fmul double %89, %85
  %93 = fmul double %86, %89
  %94 = fmul double %90, %85
  %95 = fmul double %90, %86
  %96 = fmul double %82, %73
  %97 = fmul double %81, %80
  %98 = fsub double %92, %91
  %99 = fadd double %93, %98
  %100 = fadd double %94, %99
  %101 = fadd double %95, %100
  %102 = fadd double %96, %101
  %103 = fadd double %102, %97
  %104 = fadd double %91, 1.000000e+00
  %105 = fsub double %104, %91
  %106 = fsub double %104, %105
  %107 = fsub double %91, %106
  %108 = fsub double 1.000000e+00, %105
  %109 = fadd double %108, %107
  %110 = fadd double %109, %103
  %111 = select i1 %23, double %91, double %104
  %112 = select i1 %23, double %103, double %110
  %113 = shl i32 %7, 29
  %114 = add i32 %113, 1073741824
  %115 = zext i32 %114 to i64
  %116 = shl nuw i64 %115, 32
  %117 = and i64 %116, -9223372036854775808
  %118 = bitcast double %111 to i64
  %119 = xor i64 %117, %118
  %120 = bitcast i64 %119 to double
  %121 = bitcast double %112 to i64
  %122 = xor i64 %117, %121
  %123 = bitcast i64 %122 to double
  %124 = fadd double %120, %123
  %125 = bitcast double %0 to i64
  %126 = and i64 %125, 9223372036854775807
  %127 = bitcast i64 %126 to double
  %128 = fcmp ule double %127, 2.500000e+08
  %129 = fcmp oeq double %0, 0x7FF0000000000000
  %130 = fcmp oeq double %0, 0xFFF0000000000000
  %131 = or i1 %129, %130
  %132 = bitcast double %124 to i64
  %133 = select i1 %128, i64 %132, i64 4607182418800017408
  %134 = select i1 %131, i64 4294967295, i64 0
  %135 = shl nuw i64 %134, 32
  %136 = or i64 %135, %134
  %137 = or i64 %136, %133
  %138 = bitcast i64 %137 to double
  ret double %138
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tand1_u35purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %33, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x3FF921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0x3C91A62633145C07
  %32 = fsub double %30, %31
  br label %275

; <label>:33:                                     ; preds = %1
  %34 = fcmp uge double %4, 1.000000e+06
  br i1 %34, label %78, label %35, !prof !2

; <label>:35:                                     ; preds = %33
  %36 = fmul double %0, 0x3E645F306DC9C883
  %37 = fptosi double %36 to i32
  %38 = sitofp i32 %37 to double
  %39 = fmul double %38, 0x4170000000000000
  %40 = fmul double %0, 0x3FE45F306DC9C883
  %41 = fsub double %40, %39
  %42 = fcmp ogt double %41, 0.000000e+00
  %43 = select i1 %42, double 5.000000e-01, double -5.000000e-01
  %44 = fadd double %41, %43
  %45 = bitcast double %44 to i64
  %46 = fptosi double %44 to i32
  %47 = and i32 %46, 1
  %48 = zext i32 %47 to i64
  %49 = sub i64 %45, %48
  %50 = bitcast i64 %49 to double
  %51 = fptosi double %50 to i32
  %52 = sitofp i32 %51 to double
  %53 = icmp sgt i32 %51, 0
  %54 = select i1 %53, double 5.000000e-01, double -5.000000e-01
  %55 = fadd double %54, %52
  %56 = bitcast double %55 to i64
  %57 = fptosi double %55 to i32
  %58 = and i32 %57, 1
  %59 = zext i32 %58 to i64
  %60 = sub i64 %56, %59
  %61 = bitcast i64 %60 to double
  %62 = fptosi double %61 to i32
  %63 = fmul double %39, 0x3FF921FB50000000
  %64 = fsub double %0, %63
  %65 = fmul double %52, 0x3FF921FB50000000
  %66 = fsub double %64, %65
  %67 = fmul double %39, 0x3E5110B460000000
  %68 = fsub double %66, %67
  %69 = fmul double %52, 0x3E5110B460000000
  %70 = fsub double %68, %69
  %71 = fmul double %39, 0x3C91A62630000000
  %72 = fsub double %70, %71
  %73 = fmul double %52, 0x3C91A62630000000
  %74 = fsub double %72, %73
  %75 = fadd double %39, %52
  %76 = fmul double %75, 0x3AE8A2E03707344A
  %77 = fsub double %74, %76
  br label %275

; <label>:78:                                     ; preds = %33
  %79 = lshr i64 %2, 52
  %80 = trunc i64 %79 to i32
  %81 = and i32 %80, 2047
  %82 = add nsw i32 %81, -1078
  %83 = icmp ugt i32 %81, 1723
  %84 = select i1 %83, i64 -288230376151711744, i64 0
  %85 = and i64 %2, -4294967296
  %86 = add i64 %84, %85
  %87 = and i64 %2, 4294967295
  %88 = or i64 %86, %87
  %89 = bitcast i64 %88 to double
  %90 = ashr i32 %82, 31
  %91 = xor i32 %90, 1073741823
  %92 = and i32 %91, %82
  %93 = shl i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !3, !noalias !25
  %97 = and i64 %88, -134217728
  %98 = bitcast i64 %97 to double
  %99 = fsub double %89, %98
  %100 = bitcast double %96 to i64
  %101 = and i64 %100, -134217728
  %102 = bitcast i64 %101 to double
  %103 = fsub double %96, %102
  %104 = fmul double %96, %89
  %105 = fmul double %98, %102
  %106 = fmul double %99, %102
  %107 = fmul double %103, %98
  %108 = fmul double %99, %103
  %109 = fsub double %105, %104
  %110 = fadd double %106, %109
  %111 = fadd double %107, %110
  %112 = fadd double %108, %111
  %113 = bitcast double %104 to i64
  %114 = and i64 %113, -9223372036854775808
  %115 = or i64 %114, 4841369599423283200
  %116 = bitcast i64 %115 to double
  %117 = fmul double %104, 4.000000e+00
  %118 = bitcast double %117 to i64
  %119 = and i64 %118, 9223372036854775807
  %120 = bitcast i64 %119 to double
  %121 = fcmp ule double %120, 0x4330000000000000
  %122 = fadd double %117, %116
  %123 = fsub double %122, %116
  %124 = bitcast double %123 to i64
  %125 = or i64 %114, %124
  %126 = bitcast i64 %125 to double
  %127 = select i1 %121, double %126, double %117
  %128 = and i64 %113, 9223372036854775807
  %129 = bitcast i64 %128 to double
  %130 = fcmp ule double %129, 0x4330000000000000
  %131 = fadd double %104, %116
  %132 = fsub double %131, %116
  %133 = bitcast double %132 to i64
  %134 = or i64 %114, %133
  %135 = bitcast i64 %134 to double
  %136 = select i1 %130, double %135, double %104
  %137 = fmul double %127, 2.500000e-01
  %138 = fsub double %104, %137
  %139 = fmul double %136, 4.000000e+00
  %140 = fsub double %127, %139
  %141 = fptosi double %140 to i32
  %142 = fadd double %112, %138
  %143 = fsub double %138, %142
  %144 = fadd double %112, %143
  %145 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %94
  %146 = load double, double* %145, align 8, !tbaa !3, !noalias !25
  %147 = bitcast double %146 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %146, %149
  %151 = fmul double %146, %89
  %152 = fmul double %98, %149
  %153 = fmul double %99, %149
  %154 = fmul double %150, %98
  %155 = fmul double %99, %150
  %156 = fsub double %152, %151
  %157 = fadd double %153, %156
  %158 = fadd double %154, %157
  %159 = fadd double %155, %158
  %160 = fadd double %151, %142
  %161 = fsub double %160, %142
  %162 = fsub double %160, %161
  %163 = fsub double %142, %162
  %164 = fsub double %151, %161
  %165 = fadd double %164, %163
  %166 = fadd double %159, %144
  %167 = fadd double %166, %165
  %168 = bitcast double %160 to i64
  %169 = and i64 %168, -9223372036854775808
  %170 = or i64 %169, 4841369599423283200
  %171 = bitcast i64 %170 to double
  %172 = fmul double %160, 4.000000e+00
  %173 = bitcast double %172 to i64
  %174 = and i64 %173, 9223372036854775807
  %175 = bitcast i64 %174 to double
  %176 = fcmp ule double %175, 0x4330000000000000
  %177 = fadd double %172, %171
  %178 = fsub double %177, %171
  %179 = bitcast double %178 to i64
  %180 = or i64 %169, %179
  %181 = bitcast i64 %180 to double
  %182 = select i1 %176, double %181, double %172
  %183 = and i64 %168, 9223372036854775807
  %184 = bitcast i64 %183 to double
  %185 = fcmp ule double %184, 0x4330000000000000
  %186 = fadd double %160, %171
  %187 = fsub double %186, %171
  %188 = bitcast double %187 to i64
  %189 = or i64 %169, %188
  %190 = bitcast i64 %189 to double
  %191 = select i1 %185, double %190, double %160
  %192 = fmul double %182, 2.500000e-01
  %193 = fsub double %160, %192
  %194 = fmul double %191, 4.000000e+00
  %195 = fsub double %182, %194
  %196 = fptosi double %195 to i32
  %197 = add nsw i32 %196, %141
  %198 = fadd double %167, %193
  %199 = fsub double %193, %198
  %200 = fadd double %167, %199
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %94
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !25
  %203 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %94
  %204 = load double, double* %203, align 8, !tbaa !3, !noalias !25
  %205 = bitcast double %202 to i64
  %206 = and i64 %205, -134217728
  %207 = bitcast i64 %206 to double
  %208 = fsub double %202, %207
  %209 = fmul double %202, %89
  %210 = fmul double %98, %207
  %211 = fmul double %208, %98
  %212 = fmul double %99, %207
  %213 = fmul double %99, %208
  %214 = fmul double %204, %89
  %215 = fsub double %210, %209
  %216 = fadd double %211, %215
  %217 = fadd double %212, %216
  %218 = fadd double %213, %217
  %219 = fadd double %214, %218
  %220 = fadd double %209, %198
  %221 = fsub double %220, %198
  %222 = fsub double %220, %221
  %223 = fsub double %198, %222
  %224 = fsub double %209, %221
  %225 = fadd double %224, %223
  %226 = fadd double %219, %200
  %227 = fadd double %226, %225
  %228 = fadd double %220, %227
  %229 = fsub double %220, %228
  %230 = fadd double %227, %229
  %231 = bitcast double %228 to i64
  %232 = and i64 %231, -134217728
  %233 = bitcast i64 %232 to double
  %234 = fsub double %228, %233
  %235 = fmul double %228, 0x401921FB54442D18
  %236 = fmul double %233, 0x401921FB50000000
  %237 = fmul double %234, 0x401921FB50000000
  %238 = fmul double %233, 0x3E7110B460000000
  %239 = fmul double %234, 0x3E7110B460000000
  %240 = fmul double %228, 0x3CB1A62633145C07
  %241 = fmul double %230, 0x401921FB54442D18
  %242 = fsub double %236, %235
  %243 = fadd double %237, %242
  %244 = fadd double %238, %243
  %245 = fadd double %239, %244
  %246 = fadd double %240, %245
  %247 = fadd double %241, %246
  %248 = and i64 %88, 9223372036854775807
  %249 = bitcast i64 %248 to double
  %250 = fcmp olt double %249, 0x3FE6666666666666
  %251 = select i1 %250, double %89, double %235
  %252 = bitcast double %247 to i64
  %253 = select i1 %250, i64 4294967295, i64 0
  %254 = shl nuw i64 %253, 32
  %255 = or i64 %254, %253
  %256 = xor i64 %255, -1
  %257 = and i64 %252, %256
  %258 = bitcast i64 %257 to double
  %259 = fadd double %251, %258
  %260 = fcmp oeq double %0, 0x7FF0000000000000
  %261 = fcmp oeq double %0, 0xFFF0000000000000
  %262 = or i1 %260, %261
  %263 = bitcast double %259 to i64
  %264 = select i1 %262, i64 4294967295, i64 0
  %265 = shl nuw i64 %264, 32
  %266 = fcmp uno double %0, 0.000000e+00
  %267 = or i1 %266, %262
  %268 = select i1 %267, i64 4294967295, i64 0
  %269 = shl nuw i64 %268, 32
  %270 = or i64 %265, %264
  %271 = or i64 %270, %268
  %272 = or i64 %271, %269
  %273 = or i64 %272, %263
  %274 = bitcast i64 %273 to double
  br label %275

; <label>:275:                                    ; preds = %35, %78, %6
  %276 = phi i32 [ %28, %6 ], [ %62, %35 ], [ %197, %78 ]
  %277 = phi double [ %32, %6 ], [ %77, %35 ], [ %274, %78 ]
  %278 = fmul double %277, 5.000000e-01
  %279 = fmul double %278, %278
  %280 = fmul double %279, %279
  %281 = fmul double %280, %280
  %282 = fmul double %279, 0x3F35445F555134ED
  %283 = fadd double %282, 0x3F4269BE400DE3AF
  %284 = fmul double %279, 0x3F57EEF631E20B93
  %285 = fadd double %284, 0x3F6D6C27C371C959
  %286 = fmul double %280, %283
  %287 = fadd double %285, %286
  %288 = fmul double %279, 0x3F8226E7BFA35090
  %289 = fadd double %288, 0x3F9664F4729F98E5
  %290 = fmul double %279, 0x3FABA1BA1BDCEC06
  %291 = fadd double %290, 0x3FC111111110E933
  %292 = fmul double %280, %289
  %293 = fadd double %291, %292
  %294 = fmul double %281, %287
  %295 = fadd double %293, %294
  %296 = fmul double %279, %295
  %297 = fadd double %296, 0x3FD5555555555568
  %298 = fmul double %278, %297
  %299 = fmul double %279, %298
  %300 = fadd double %278, %299
  %301 = fmul double %300, %300
  %302 = fadd double %301, -1.000000e+00
  %303 = fmul double %300, -2.000000e+00
  %304 = fsub double -0.000000e+00, %302
  %305 = and i32 %276, 1
  %306 = icmp eq i32 %305, 0
  %307 = select i1 %306, double %303, double %304
  %308 = select i1 %306, double %302, double %303
  %309 = fdiv double %307, %308
  %310 = fcmp une double %0, 0.000000e+00
  %311 = select i1 %310, double %309, double %0
  ret double %311
}

; Function Attrs: nounwind readnone uwtable
define double @Sleef_tand1_u10purec(double) local_unnamed_addr #2 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.500000e+01
  br i1 %5, label %35, label %6, !prof !2

; <label>:6:                                      ; preds = %1
  %7 = fmul double %0, 0x3FE45F306DC9C883
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = select i1 %8, double 5.000000e-01, double -5.000000e-01
  %10 = fadd double %7, %9
  %11 = bitcast double %10 to i64
  %12 = fptosi double %10 to i32
  %13 = and i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = sub i64 %11, %14
  %16 = bitcast i64 %15 to double
  %17 = fptosi double %16 to i32
  %18 = sitofp i32 %17 to double
  %19 = icmp sgt i32 %17, 0
  %20 = select i1 %19, double 5.000000e-01, double -5.000000e-01
  %21 = fadd double %20, %18
  %22 = bitcast double %21 to i64
  %23 = fptosi double %21 to i32
  %24 = and i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = sub i64 %22, %25
  %27 = bitcast i64 %26 to double
  %28 = fptosi double %27 to i32
  %29 = fmul double %18, 0x3FF921FB54442D18
  %30 = fsub double %0, %29
  %31 = fmul double %18, 0xBC91A62633145C07
  %32 = fadd double %31, %30
  %33 = fsub double %30, %32
  %34 = fadd double %31, %33
  br label %316

; <label>:35:                                     ; preds = %1
  %36 = fcmp uge double %4, 1.000000e+14
  br i1 %36, label %123, label %37, !prof !2

; <label>:37:                                     ; preds = %35
  %38 = fmul double %0, 0x3E645F306DC9C883
  %39 = fptosi double %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fmul double %40, 0x4170000000000000
  %42 = and i64 %2, -134217728
  %43 = bitcast i64 %42 to double
  %44 = fsub double %0, %43
  %45 = fmul double %0, 0x3FE45F306DC9C883
  %46 = fmul double %43, 0x3FE45F3068000000
  %47 = fmul double %43, 0x3E4727220C000000
  %48 = fmul double %44, 0x3FE45F3068000000
  %49 = fmul double %44, 0x3E4727220C000000
  %50 = fmul double %0, 0x3C86B01EC5417056
  %51 = fsub double %46, %45
  %52 = fadd double %47, %51
  %53 = fadd double %48, %52
  %54 = fadd double %49, %53
  %55 = fsub double %54, %50
  %56 = fcmp uge double %0, 0.000000e+00
  %57 = select i1 %56, double 5.000000e-01, double -5.000000e-01
  %58 = fsub double %57, %41
  %59 = fadd double %45, %58
  %60 = fsub double %59, %45
  %61 = fsub double %59, %60
  %62 = fsub double %45, %61
  %63 = fsub double %58, %60
  %64 = fadd double %63, %62
  %65 = fadd double %55, %64
  %66 = fadd double %59, %65
  %67 = fptosi double %66 to i32
  %68 = sitofp i32 %67 to double
  %69 = icmp sgt i32 %67, 0
  %70 = select i1 %69, double 5.000000e-01, double -5.000000e-01
  %71 = fadd double %70, %68
  %72 = bitcast double %71 to i64
  %73 = fptosi double %71 to i32
  %74 = and i32 %73, 1
  %75 = zext i32 %74 to i64
  %76 = sub i64 %72, %75
  %77 = bitcast i64 %76 to double
  %78 = fptosi double %77 to i32
  %79 = fmul double %41, 0x3FF921FB50000000
  %80 = fsub double %0, %79
  %81 = fmul double %68, 0xBFF921FB50000000
  %82 = fadd double %80, %81
  %83 = fsub double %80, %82
  %84 = fadd double %81, %83
  %85 = fmul double %41, 0xBE5110B460000000
  %86 = fadd double %85, %82
  %87 = fsub double %86, %82
  %88 = fsub double %86, %87
  %89 = fsub double %82, %88
  %90 = fsub double %85, %87
  %91 = fadd double %90, %89
  %92 = fadd double %84, %91
  %93 = fmul double %68, 0xBE5110B460000000
  %94 = fadd double %93, %86
  %95 = fsub double %94, %86
  %96 = fsub double %94, %95
  %97 = fsub double %86, %96
  %98 = fsub double %93, %95
  %99 = fadd double %98, %97
  %100 = fadd double %99, %92
  %101 = fmul double %41, 0xBC91A62630000000
  %102 = fadd double %101, %94
  %103 = fsub double %102, %94
  %104 = fsub double %102, %103
  %105 = fsub double %94, %104
  %106 = fsub double %101, %103
  %107 = fadd double %106, %105
  %108 = fadd double %107, %100
  %109 = fmul double %68, 0xBC91A62630000000
  %110 = fadd double %109, %102
  %111 = fsub double %110, %102
  %112 = fsub double %110, %111
  %113 = fsub double %102, %112
  %114 = fsub double %109, %111
  %115 = fadd double %114, %113
  %116 = fadd double %115, %108
  %117 = fadd double %41, %68
  %118 = fmul double %117, 0xBAE8A2E03707344A
  %119 = fadd double %118, %110
  %120 = fsub double %110, %119
  %121 = fadd double %118, %120
  %122 = fadd double %121, %116
  br label %316

; <label>:123:                                    ; preds = %35
  %124 = lshr i64 %2, 52
  %125 = trunc i64 %124 to i32
  %126 = and i32 %125, 2047
  %127 = add nsw i32 %126, -1078
  %128 = icmp ugt i32 %126, 1723
  %129 = select i1 %128, i64 -288230376151711744, i64 0
  %130 = and i64 %2, -4294967296
  %131 = add i64 %129, %130
  %132 = and i64 %2, 4294967295
  %133 = or i64 %131, %132
  %134 = bitcast i64 %133 to double
  %135 = ashr i32 %127, 31
  %136 = xor i32 %135, 1073741823
  %137 = and i32 %136, %127
  %138 = shl i32 %137, 2
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %139
  %141 = load double, double* %140, align 8, !tbaa !3, !noalias !28
  %142 = and i64 %133, -134217728
  %143 = bitcast i64 %142 to double
  %144 = fsub double %134, %143
  %145 = bitcast double %141 to i64
  %146 = and i64 %145, -134217728
  %147 = bitcast i64 %146 to double
  %148 = fsub double %141, %147
  %149 = fmul double %141, %134
  %150 = fmul double %143, %147
  %151 = fmul double %144, %147
  %152 = fmul double %148, %143
  %153 = fmul double %144, %148
  %154 = fsub double %150, %149
  %155 = fadd double %151, %154
  %156 = fadd double %152, %155
  %157 = fadd double %153, %156
  %158 = bitcast double %149 to i64
  %159 = and i64 %158, -9223372036854775808
  %160 = or i64 %159, 4841369599423283200
  %161 = bitcast i64 %160 to double
  %162 = fmul double %149, 4.000000e+00
  %163 = bitcast double %162 to i64
  %164 = and i64 %163, 9223372036854775807
  %165 = bitcast i64 %164 to double
  %166 = fcmp ule double %165, 0x4330000000000000
  %167 = fadd double %162, %161
  %168 = fsub double %167, %161
  %169 = bitcast double %168 to i64
  %170 = or i64 %159, %169
  %171 = bitcast i64 %170 to double
  %172 = select i1 %166, double %171, double %162
  %173 = and i64 %158, 9223372036854775807
  %174 = bitcast i64 %173 to double
  %175 = fcmp ule double %174, 0x4330000000000000
  %176 = fadd double %149, %161
  %177 = fsub double %176, %161
  %178 = bitcast double %177 to i64
  %179 = or i64 %159, %178
  %180 = bitcast i64 %179 to double
  %181 = select i1 %175, double %180, double %149
  %182 = fmul double %172, 2.500000e-01
  %183 = fsub double %149, %182
  %184 = fmul double %181, 4.000000e+00
  %185 = fsub double %172, %184
  %186 = fptosi double %185 to i32
  %187 = fadd double %157, %183
  %188 = fsub double %183, %187
  %189 = fadd double %157, %188
  %190 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %139
  %191 = load double, double* %190, align 8, !tbaa !3, !noalias !28
  %192 = bitcast double %191 to i64
  %193 = and i64 %192, -134217728
  %194 = bitcast i64 %193 to double
  %195 = fsub double %191, %194
  %196 = fmul double %191, %134
  %197 = fmul double %143, %194
  %198 = fmul double %144, %194
  %199 = fmul double %195, %143
  %200 = fmul double %144, %195
  %201 = fsub double %197, %196
  %202 = fadd double %198, %201
  %203 = fadd double %199, %202
  %204 = fadd double %200, %203
  %205 = fadd double %196, %187
  %206 = fsub double %205, %187
  %207 = fsub double %205, %206
  %208 = fsub double %187, %207
  %209 = fsub double %196, %206
  %210 = fadd double %209, %208
  %211 = fadd double %204, %189
  %212 = fadd double %211, %210
  %213 = bitcast double %205 to i64
  %214 = and i64 %213, -9223372036854775808
  %215 = or i64 %214, 4841369599423283200
  %216 = bitcast i64 %215 to double
  %217 = fmul double %205, 4.000000e+00
  %218 = bitcast double %217 to i64
  %219 = and i64 %218, 9223372036854775807
  %220 = bitcast i64 %219 to double
  %221 = fcmp ule double %220, 0x4330000000000000
  %222 = fadd double %217, %216
  %223 = fsub double %222, %216
  %224 = bitcast double %223 to i64
  %225 = or i64 %214, %224
  %226 = bitcast i64 %225 to double
  %227 = select i1 %221, double %226, double %217
  %228 = and i64 %213, 9223372036854775807
  %229 = bitcast i64 %228 to double
  %230 = fcmp ule double %229, 0x4330000000000000
  %231 = fadd double %205, %216
  %232 = fsub double %231, %216
  %233 = bitcast double %232 to i64
  %234 = or i64 %214, %233
  %235 = bitcast i64 %234 to double
  %236 = select i1 %230, double %235, double %205
  %237 = fmul double %227, 2.500000e-01
  %238 = fsub double %205, %237
  %239 = fmul double %236, 4.000000e+00
  %240 = fsub double %227, %239
  %241 = fptosi double %240 to i32
  %242 = add nsw i32 %241, %186
  %243 = fadd double %212, %238
  %244 = fsub double %238, %243
  %245 = fadd double %212, %244
  %246 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %139
  %247 = load double, double* %246, align 8, !tbaa !3, !noalias !28
  %248 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %139
  %249 = load double, double* %248, align 8, !tbaa !3, !noalias !28
  %250 = bitcast double %247 to i64
  %251 = and i64 %250, -134217728
  %252 = bitcast i64 %251 to double
  %253 = fsub double %247, %252
  %254 = fmul double %247, %134
  %255 = fmul double %143, %252
  %256 = fmul double %253, %143
  %257 = fmul double %144, %252
  %258 = fmul double %144, %253
  %259 = fmul double %249, %134
  %260 = fsub double %255, %254
  %261 = fadd double %256, %260
  %262 = fadd double %257, %261
  %263 = fadd double %258, %262
  %264 = fadd double %259, %263
  %265 = fadd double %254, %243
  %266 = fsub double %265, %243
  %267 = fsub double %265, %266
  %268 = fsub double %243, %267
  %269 = fsub double %254, %266
  %270 = fadd double %269, %268
  %271 = fadd double %264, %245
  %272 = fadd double %271, %270
  %273 = fadd double %265, %272
  %274 = fsub double %265, %273
  %275 = fadd double %272, %274
  %276 = bitcast double %273 to i64
  %277 = and i64 %276, -134217728
  %278 = bitcast i64 %277 to double
  %279 = fsub double %273, %278
  %280 = fmul double %273, 0x401921FB54442D18
  %281 = fmul double %278, 0x401921FB50000000
  %282 = fmul double %279, 0x401921FB50000000
  %283 = fmul double %278, 0x3E7110B460000000
  %284 = fmul double %279, 0x3E7110B460000000
  %285 = fmul double %273, 0x3CB1A62633145C07
  %286 = fmul double %275, 0x401921FB54442D18
  %287 = fsub double %281, %280
  %288 = fadd double %282, %287
  %289 = fadd double %283, %288
  %290 = fadd double %284, %289
  %291 = fadd double %285, %290
  %292 = fadd double %286, %291
  %293 = and i64 %133, 9223372036854775807
  %294 = bitcast i64 %293 to double
  %295 = fcmp olt double %294, 0x3FE6666666666666
  %296 = select i1 %295, double %134, double %280
  %297 = bitcast double %292 to i64
  %298 = select i1 %295, i64 4294967295, i64 0
  %299 = shl nuw i64 %298, 32
  %300 = or i64 %299, %298
  %301 = xor i64 %300, -1
  %302 = and i64 %297, %301
  %303 = fcmp oeq double %0, 0x7FF0000000000000
  %304 = fcmp oeq double %0, 0xFFF0000000000000
  %305 = or i1 %303, %304
  %306 = fcmp uno double %0, 0.000000e+00
  %307 = or i1 %306, %305
  %308 = bitcast double %296 to i64
  %309 = select i1 %307, i64 4294967295, i64 0
  %310 = shl nuw i64 %309, 32
  %311 = or i64 %310, %309
  %312 = or i64 %311, %308
  %313 = bitcast i64 %312 to double
  %314 = or i64 %311, %302
  %315 = bitcast i64 %314 to double
  br label %316

; <label>:316:                                    ; preds = %37, %123, %6
  %317 = phi i32 [ %28, %6 ], [ %78, %37 ], [ %242, %123 ]
  %318 = phi double [ %32, %6 ], [ %119, %37 ], [ %313, %123 ]
  %319 = phi double [ %34, %6 ], [ %122, %37 ], [ %315, %123 ]
  %320 = fmul double %318, 5.000000e-01
  %321 = fmul double %319, 5.000000e-01
  %322 = bitcast double %320 to i64
  %323 = and i64 %322, -134217728
  %324 = bitcast i64 %323 to double
  %325 = fsub double %320, %324
  %326 = fmul double %320, %320
  %327 = fmul double %324, %324
  %328 = fadd double %324, %324
  %329 = fmul double %328, %325
  %330 = fmul double %325, %325
  %331 = fadd double %321, %321
  %332 = fmul double %320, %331
  %333 = fsub double %327, %326
  %334 = fadd double %333, %329
  %335 = fadd double %330, %334
  %336 = fadd double %332, %335
  %337 = fmul double %326, %326
  %338 = fmul double %337, %337
  %339 = fmul double %326, 0x3F35445F555134ED
  %340 = fadd double %339, 0x3F4269BE400DE3AF
  %341 = fmul double %326, 0x3F57EEF631E20B93
  %342 = fadd double %341, 0x3F6D6C27C371C959
  %343 = fmul double %337, %340
  %344 = fadd double %342, %343
  %345 = fmul double %326, 0x3F8226E7BFA35090
  %346 = fadd double %345, 0x3F9664F4729F98E5
  %347 = fmul double %326, 0x3FABA1BA1BDCEC06
  %348 = fadd double %347, 0x3FC111111110E933
  %349 = fmul double %337, %346
  %350 = fadd double %348, %349
  %351 = fmul double %338, %344
  %352 = fadd double %350, %351
  %353 = fmul double %326, %352
  %354 = fadd double %353, 0x3FD5555555555568
  %355 = bitcast double %326 to i64
  %356 = and i64 %355, -134217728
  %357 = bitcast i64 %356 to double
  %358 = fsub double %326, %357
  %359 = fmul double %320, %326
  %360 = fmul double %324, %357
  %361 = fmul double %358, %324
  %362 = fmul double %325, %357
  %363 = fmul double %325, %358
  %364 = fmul double %326, %321
  %365 = fmul double %320, %336
  %366 = fsub double %360, %359
  %367 = fadd double %361, %366
  %368 = fadd double %362, %367
  %369 = fadd double %363, %368
  %370 = fadd double %364, %369
  %371 = fadd double %365, %370
  %372 = bitcast double %359 to i64
  %373 = and i64 %372, -134217728
  %374 = bitcast i64 %373 to double
  %375 = fsub double %359, %374
  %376 = bitcast double %354 to i64
  %377 = and i64 %376, -134217728
  %378 = bitcast i64 %377 to double
  %379 = fsub double %354, %378
  %380 = fmul double %359, %354
  %381 = fmul double %374, %378
  %382 = fmul double %375, %378
  %383 = fmul double %379, %374
  %384 = fmul double %375, %379
  %385 = fmul double %354, %371
  %386 = fsub double %381, %380
  %387 = fadd double %382, %386
  %388 = fadd double %383, %387
  %389 = fadd double %384, %388
  %390 = fadd double %385, %389
  %391 = fadd double %320, %380
  %392 = fsub double %320, %391
  %393 = fadd double %380, %392
  %394 = fadd double %321, %393
  %395 = fadd double %394, %390
  %396 = bitcast double %391 to i64
  %397 = and i64 %396, -134217728
  %398 = bitcast i64 %397 to double
  %399 = fsub double %391, %398
  %400 = fmul double %391, %391
  %401 = fmul double %398, %398
  %402 = fadd double %398, %398
  %403 = fmul double %402, %399
  %404 = fmul double %399, %399
  %405 = fadd double %395, %395
  %406 = fmul double %391, %405
  %407 = fsub double %401, %400
  %408 = fadd double %407, %403
  %409 = fadd double %404, %408
  %410 = fadd double %409, %406
  %411 = fadd double %400, -1.000000e+00
  %412 = fsub double -1.000000e+00, %411
  %413 = fadd double %400, %412
  %414 = fadd double %413, %410
  %415 = fmul double %391, -2.000000e+00
  %416 = fmul double %395, -2.000000e+00
  %417 = fsub double -0.000000e+00, %411
  %418 = fsub double -0.000000e+00, %414
  %419 = and i32 %317, 1
  %420 = icmp eq i32 %419, 0
  %421 = select i1 %420, double %415, double %417
  %422 = select i1 %420, double %416, double %418
  %423 = select i1 %420, double %411, double %415
  %424 = select i1 %420, double %414, double %416
  %425 = fdiv double 1.000000e+00, %423
  %426 = bitcast double %423 to i64
  %427 = and i64 %426, -134217728
  %428 = bitcast i64 %427 to double
  %429 = fsub double %423, %428
  %430 = bitcast double %425 to i64
  %431 = and i64 %430, -134217728
  %432 = bitcast i64 %431 to double
  %433 = fsub double %425, %432
  %434 = bitcast double %421 to i64
  %435 = and i64 %434, -134217728
  %436 = bitcast i64 %435 to double
  %437 = fsub double %421, %436
  %438 = fmul double %421, %425
  %439 = fmul double %436, %432
  %440 = fsub double %439, %438
  %441 = fmul double %433, %436
  %442 = fmul double %437, %432
  %443 = fmul double %437, %433
  %444 = fmul double %428, %432
  %445 = fmul double %433, %428
  %446 = fmul double %429, %432
  %447 = fmul double %429, %433
  %448 = fsub double 1.000000e+00, %444
  %449 = fsub double %448, %445
  %450 = fsub double %449, %446
  %451 = fsub double %450, %447
  %452 = fmul double %438, %451
  %453 = fadd double %440, %441
  %454 = fadd double %442, %453
  %455 = fadd double %443, %454
  %456 = fadd double %455, %452
  %457 = fmul double %438, %424
  %458 = fsub double %422, %457
  %459 = fmul double %425, %458
  %460 = fadd double %456, %459
  %461 = fadd double %438, %460
  %462 = fcmp une double %0, 0.000000e+00
  %463 = select i1 %462, double %461, double %0
  ret double %463
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan2d1_u35purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = ashr i64 %6, 63
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, -2
  %10 = and i64 %6, 9223372036854775807
  %11 = bitcast i64 %10 to double
  %12 = or i32 %8, 1
  %13 = fcmp uge double %11, %5
  %14 = select i1 %13, i32 %9, i32 %12
  %15 = fsub double -0.000000e+00, %11
  %16 = select i1 %13, double %5, double %15
  %17 = fcmp ogt double %11, %5
  %18 = select i1 %17, double %11, double %5
  %19 = fdiv double %16, %18
  %20 = fmul double %19, %19
  %21 = fmul double %20, %20
  %22 = fmul double %21, %21
  %23 = fmul double %22, %22
  %24 = fmul double %23, %23
  %25 = fmul double %20, 0x3F2B81666EB938AF
  %26 = fadd double %25, 0xBF521F657F3915DA
  %27 = fmul double %21, 0x3EF3CBF44A88555F
  %28 = fsub double %26, %27
  %29 = fmul double %20, 0x3F6E5005F4C78C20
  %30 = fadd double %29, 0xBF82399E74A75E56
  %31 = fmul double %20, 0x3F90FF6A2A0D2286
  %32 = fadd double %31, 0xBF9A1006DE22CDAC
  %33 = fmul double %21, %30
  %34 = fadd double %32, %33
  %35 = fmul double %20, 0x3FA14C4D24651F2E
  %36 = fadd double %35, 0xBFA4DEE09915F638
  %37 = fmul double %20, 0x3FA7E4B31D8A55AE
  %38 = fadd double %37, 0xBFAACFE938E04FCA
  %39 = fmul double %21, %36
  %40 = fadd double %38, %39
  %41 = fmul double %22, %34
  %42 = fadd double %40, %41
  %43 = fmul double %20, 0x3FAE16A933B73622
  %44 = fadd double %43, 0xBFB11074E45F93E0
  %45 = fmul double %20, 0x3FB3B1283C0CA0B1
  %46 = fadd double %45, 0xBFB745CFD878FEE8
  %47 = fmul double %21, %44
  %48 = fadd double %46, %47
  %49 = fmul double %20, 0x3FBC71C704FB4F9F
  %50 = fadd double %49, 0xBFC2492491E100BB
  %51 = fmul double %20, 0x3FC999999997B9DD
  %52 = fadd double %51, 0xBFD55555555553C5
  %53 = fmul double %21, %50
  %54 = fadd double %52, %53
  %55 = fmul double %22, %48
  %56 = fadd double %54, %55
  %57 = fmul double %23, %42
  %58 = fadd double %56, %57
  %59 = fmul double %28, %24
  %60 = fadd double %59, %58
  %61 = fmul double %20, %60
  %62 = fmul double %19, %61
  %63 = fadd double %19, %62
  %64 = sitofp i32 %14 to double
  %65 = fmul double %64, 0x3FF921FB54442D18
  %66 = fadd double %65, %63
  %67 = bitcast double %66 to i64
  %68 = and i64 %6, -9223372036854775808
  %69 = xor i64 %68, %67
  %70 = bitcast i64 %69 to double
  %71 = fcmp oeq double %1, 0x7FF0000000000000
  %72 = fcmp oeq double %1, 0xFFF0000000000000
  %73 = or i1 %71, %72
  %74 = fcmp oeq double %1, 0.000000e+00
  %75 = or i1 %74, %73
  %76 = or i64 %68, 4609753056924675352
  %77 = select i1 %73, i64 4294967295, i64 0
  %78 = shl nuw i64 %77, 32
  %79 = or i64 %78, %77
  %80 = and i64 %79, %76
  %81 = bitcast i64 %80 to double
  %82 = fsub double 0x3FF921FB54442D18, %81
  %83 = select i1 %75, double %82, double %70
  %84 = fcmp une double %0, 0x7FF0000000000000
  %85 = fcmp une double %0, 0xFFF0000000000000
  %86 = or i64 %68, 4605249457297304856
  %87 = and i64 %79, %86
  %88 = bitcast i64 %87 to double
  %89 = fsub double 0x3FF921FB54442D18, %88
  %90 = and i1 %85, %84
  %91 = select i1 %90, double %83, double %89
  %92 = fcmp une double %0, 0.000000e+00
  %93 = and i64 %7, 4294967295
  %94 = shl nuw i64 %93, 32
  %95 = or i64 %94, %93
  %96 = and i64 %95, 4614256656552045848
  %97 = fcmp uno double %0, %1
  %98 = bitcast double %91 to i64
  %99 = select i1 %92, i64 %98, i64 %96
  %100 = and i64 %3, -9223372036854775808
  %101 = xor i64 %99, %100
  %102 = select i1 %97, i64 4294967295, i64 0
  %103 = shl nuw i64 %102, 32
  %104 = or i64 %103, %102
  %105 = or i64 %104, %101
  %106 = bitcast i64 %105 to double
  ret double %106
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atan2d1_u10purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp uge double %5, 0x4000000000001
  %7 = fmul double %1, 0x4340000000000000
  %8 = select i1 %6, double %1, double %7
  %9 = fmul double %0, 0x4340000000000000
  %10 = select i1 %6, double %0, double %9
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, 9223372036854775807
  %13 = bitcast i64 %12 to double
  %14 = bitcast double %8 to i64
  %15 = ashr i64 %14, 63
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, -2
  %18 = fcmp olt double %8, 0.000000e+00
  %19 = select i1 %18, i64 -9223372036854775808, i64 0
  %20 = xor i64 %19, %14
  %21 = bitcast i64 %20 to double
  %22 = bitcast i64 %19 to double
  %23 = or i32 %16, 1
  %24 = fcmp uge double %21, %13
  %25 = select i1 %24, i32 %17, i32 %23
  %26 = fsub double -0.000000e+00, %21
  %27 = fsub double -0.000000e+00, %22
  %28 = select i1 %24, double %13, double %26
  %29 = select i1 %24, double 0.000000e+00, double %27
  %30 = select i1 %24, double %21, double %13
  %31 = select i1 %24, double %22, double 0.000000e+00
  %32 = fdiv double 1.000000e+00, %30
  %33 = bitcast double %30 to i64
  %34 = and i64 %33, -134217728
  %35 = bitcast i64 %34 to double
  %36 = fsub double %30, %35
  %37 = bitcast double %32 to i64
  %38 = and i64 %37, -134217728
  %39 = bitcast i64 %38 to double
  %40 = fsub double %32, %39
  %41 = bitcast double %28 to i64
  %42 = and i64 %41, -134217728
  %43 = bitcast i64 %42 to double
  %44 = fsub double %28, %43
  %45 = fmul double %28, %32
  %46 = fmul double %43, %39
  %47 = fsub double %46, %45
  %48 = fmul double %35, %39
  %49 = fmul double %40, %35
  %50 = fmul double %36, %39
  %51 = fmul double %36, %40
  %52 = fsub double 1.000000e+00, %48
  %53 = fsub double %52, %49
  %54 = fsub double %53, %50
  %55 = fmul double %31, %45
  %56 = fsub double %29, %55
  %57 = bitcast double %45 to i64
  %58 = and i64 %57, -134217728
  %59 = bitcast i64 %58 to double
  %60 = fsub double %45, %59
  %61 = fmul double %45, %45
  %62 = fmul double %59, %59
  %63 = fadd double %59, %59
  %64 = fmul double %63, %60
  %65 = fmul double %60, %60
  %66 = sitofp i32 %25 to double
  %67 = bitcast double %66 to i64
  %68 = and i64 %67, -134217728
  %69 = bitcast i64 %68 to double
  %70 = insertelement <2 x double> undef, double %66, i32 0
  %71 = insertelement <2 x double> %70, double %54, i32 1
  %72 = insertelement <2 x double> undef, double %69, i32 0
  %73 = insertelement <2 x double> %72, double %51, i32 1
  %74 = fsub <2 x double> %71, %73
  %75 = insertelement <2 x double> <double 0x3FF921FB54442D18, double undef>, double %40, i32 1
  %76 = insertelement <2 x double> %70, double %43, i32 1
  %77 = fmul <2 x double> %75, %76
  %78 = fmul double %69, 0x3FF921FB50000000
  %79 = insertelement <2 x double> <double 0x3E5110B460000000, double undef>, double %44, i32 1
  %80 = insertelement <2 x double> %72, double %39, i32 1
  %81 = fmul <2 x double> %79, %80
  %82 = insertelement <2 x double> <double 0x3FF921FB50000000, double undef>, double %44, i32 1
  %83 = extractelement <2 x double> %74, i32 0
  %84 = insertelement <2 x double> undef, double %83, i32 0
  %85 = insertelement <2 x double> %84, double %40, i32 1
  %86 = fmul <2 x double> %82, %85
  %87 = insertelement <2 x double> <double 0x3E5110B460000000, double undef>, double %45, i32 1
  %88 = fmul <2 x double> %87, %74
  %89 = insertelement <2 x double> <double 0x3C91A62633145C07, double undef>, double %32, i32 1
  %90 = insertelement <2 x double> %70, double %56, i32 1
  %91 = fmul <2 x double> %89, %90
  %92 = insertelement <2 x double> undef, double %78, i32 0
  %93 = insertelement <2 x double> %92, double %47, i32 1
  %94 = fsub <2 x double> %93, %77
  %95 = fadd <2 x double> %93, %77
  %96 = shufflevector <2 x double> %94, <2 x double> %95, <2 x i32> <i32 0, i32 3>
  %97 = fadd <2 x double> %81, %96
  %98 = fadd <2 x double> %86, %97
  %99 = fadd <2 x double> %88, %98
  %100 = fadd <2 x double> %91, %99
  %101 = extractelement <2 x double> %100, i32 1
  %102 = fadd double %101, %101
  %103 = fmul double %45, %102
  %104 = fsub double %62, %61
  %105 = fadd double %104, %64
  %106 = fadd double %65, %105
  %107 = fadd double %106, %103
  %108 = fadd double %61, %107
  %109 = fsub double %61, %108
  %110 = fadd double %107, %109
  %111 = fmul double %108, %108
  %112 = fmul double %111, %111
  %113 = fmul double %112, %112
  %114 = fmul double %108, 0x3EE64ADB3E06EE72
  %115 = fadd double %114, 0xBF2077212AA7D6CE
  %116 = fmul double %108, 0x3F471ECE4D9CED98
  %117 = fadd double %116, 0xBF64A20138B90CEE
  %118 = fmul double %111, %115
  %119 = fadd double %117, %118
  %120 = fmul double %108, 0x3F7A788EC28E9FB3
  %121 = fadd double %120, 0xBF8A45A2EA379DB5
  %122 = fmul double %108, 0x3F954D3ECCF8F320
  %123 = fadd double %122, 0xBF9D9805E7BA23E7
  %124 = fmul double %111, %121
  %125 = fadd double %123, %124
  %126 = fmul double %112, %119
  %127 = fadd double %125, %126
  %128 = fmul double %108, 0x3FA26BC6260B1BDD
  %129 = fadd double %128, 0xBFA56D2D526C0577
  %130 = fmul double %108, 0x3FA81B6EFB51F8A6
  %131 = fadd double %130, 0xBFAAE027D1895F2E
  %132 = fmul double %111, %129
  %133 = fadd double %131, %132
  %134 = fmul double %108, 0x3FAE1A556400767B
  %135 = fadd double %134, 0xBFB110C441E542D6
  %136 = fmul double %108, 0x3FB3B131F3B00D10
  %137 = fadd double %136, 0xBFB745D0AC14EFEC
  %138 = fmul double %111, %135
  %139 = fadd double %137, %138
  %140 = fmul double %112, %133
  %141 = fadd double %139, %140
  %142 = fmul double %113, %127
  %143 = fadd double %141, %142
  %144 = fmul double %108, %143
  %145 = fadd double %144, 0x3FBC71C710B37A0B
  %146 = fmul double %108, %145
  %147 = fadd double %146, 0xBFC249249211AFC7
  %148 = fmul double %108, %147
  %149 = fadd double %148, 0x3FC9999999987CF0
  %150 = fmul double %108, %149
  %151 = fadd double %150, 0xBFD555555555543A
  %152 = bitcast double %108 to i64
  %153 = and i64 %152, -134217728
  %154 = bitcast i64 %153 to double
  %155 = fsub double %108, %154
  %156 = fmul double %45, %108
  %157 = fmul double %59, %154
  %158 = fmul double %60, %154
  %159 = fmul double %155, %59
  %160 = fmul double %60, %155
  %161 = fmul double %45, %110
  %162 = fmul double %101, %108
  %163 = fsub double %157, %156
  %164 = fadd double %158, %163
  %165 = fadd double %159, %164
  %166 = fadd double %160, %165
  %167 = fadd double %161, %166
  %168 = fadd double %162, %167
  %169 = bitcast double %156 to i64
  %170 = and i64 %169, -134217728
  %171 = bitcast i64 %170 to double
  %172 = fsub double %156, %171
  %173 = bitcast double %151 to i64
  %174 = and i64 %173, -134217728
  %175 = bitcast i64 %174 to double
  %176 = fsub double %151, %175
  %177 = fmul double %156, %151
  %178 = fmul double %171, %175
  %179 = fmul double %172, %175
  %180 = fmul double %176, %171
  %181 = fmul double %172, %176
  %182 = fmul double %168, %151
  %183 = fsub double %178, %177
  %184 = fadd double %179, %183
  %185 = fadd double %180, %184
  %186 = fadd double %181, %185
  %187 = fadd double %182, %186
  %188 = fadd double %45, %177
  %189 = extractelement <2 x double> %77, i32 0
  %190 = fadd double %189, %188
  %191 = insertelement <2 x double> undef, double %189, i32 0
  %192 = insertelement <2 x double> %191, double %45, i32 1
  %193 = insertelement <2 x double> undef, double %190, i32 0
  %194 = insertelement <2 x double> %193, double %188, i32 1
  %195 = fsub <2 x double> %192, %194
  %196 = insertelement <2 x double> undef, double %188, i32 0
  %197 = insertelement <2 x double> %196, double %177, i32 1
  %198 = fadd <2 x double> %197, %195
  %199 = fadd <2 x double> %100, %198
  %200 = extractelement <2 x double> %199, i32 1
  %201 = fadd double %200, %187
  %202 = extractelement <2 x double> %199, i32 0
  %203 = fadd double %202, %201
  %204 = fadd double %190, %203
  %205 = bitcast double %204 to i64
  %206 = and i64 %14, -9223372036854775808
  %207 = xor i64 %206, %205
  %208 = bitcast i64 %207 to double
  %209 = fcmp oeq double %8, 0x7FF0000000000000
  %210 = fcmp oeq double %8, 0xFFF0000000000000
  %211 = or i1 %209, %210
  %212 = fcmp oeq double %8, 0.000000e+00
  %213 = or i1 %212, %211
  %214 = or i64 %206, 4609753056924675352
  %215 = select i1 %211, i64 4294967295, i64 0
  %216 = shl nuw i64 %215, 32
  %217 = or i64 %216, %215
  %218 = and i64 %217, %214
  %219 = bitcast i64 %218 to double
  %220 = fsub double 0x3FF921FB54442D18, %219
  %221 = select i1 %213, double %220, double %208
  %222 = fcmp une double %10, 0x7FF0000000000000
  %223 = fcmp une double %10, 0xFFF0000000000000
  %224 = or i64 %206, 4605249457297304856
  %225 = and i64 %217, %224
  %226 = bitcast i64 %225 to double
  %227 = fsub double 0x3FF921FB54442D18, %226
  %228 = and i1 %223, %222
  %229 = select i1 %228, double %221, double %227
  %230 = fcmp une double %10, 0.000000e+00
  %231 = and i64 %15, 4294967295
  %232 = shl nuw i64 %231, 32
  %233 = or i64 %232, %231
  %234 = and i64 %233, 4614256656552045848
  %235 = fcmp uno double %10, %8
  %236 = bitcast double %229 to i64
  %237 = select i1 %230, i64 %236, i64 %234
  %238 = and i64 %11, -9223372036854775808
  %239 = xor i64 %237, %238
  %240 = select i1 %235, i64 4294967295, i64 0
  %241 = shl nuw i64 %240, 32
  %242 = or i64 %241, %240
  %243 = or i64 %242, %239
  %244 = bitcast i64 %243 to double
  ret double %244
}

; Function Attrs: nounwind uwtable
define double @Sleef_asind1_u35purec(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %8, double %6
  %10 = tail call double @sqrt(double %9) #6
  %11 = select i1 %5, double %10, double %4
  %12 = fmul double %9, %9
  %13 = fmul double %12, %12
  %14 = fmul double %13, %13
  %15 = insertelement <2 x double> undef, double %9, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %16, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %18 = fadd <2 x double> %17, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %19 = fmul <2 x double> %16, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %20 = fadd <2 x double> %19, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %21 = insertelement <2 x double> undef, double %12, i32 0
  %22 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> zeroinitializer
  %23 = fmul <2 x double> %22, %18
  %24 = fadd <2 x double> %20, %23
  %25 = fmul double %9, 0x3F9F1C72C5FD95BA
  %26 = fadd double %25, 0x3FA6DB6DB407C2B3
  %27 = fmul double %9, 0x3FB3333333375CD0
  %28 = fadd double %27, 0x3FC55555555552F4
  %29 = fmul double %12, %26
  %30 = fadd double %28, %29
  %31 = insertelement <2 x double> undef, double %14, i32 0
  %32 = insertelement <2 x double> %31, double %13, i32 1
  %33 = fmul <2 x double> %32, %24
  %34 = extractelement <2 x double> %33, i32 1
  %35 = fadd double %30, %34
  %36 = extractelement <2 x double> %33, i32 0
  %37 = fadd double %36, %35
  %38 = fmul double %9, %11
  %39 = fmul double %37, %38
  %40 = fadd double %11, %39
  %41 = fmul double %40, 2.000000e+00
  %42 = fsub double 0x3FF921FB54442D18, %41
  %43 = select i1 %5, double %42, double %40
  %44 = bitcast double %43 to i64
  %45 = and i64 %2, -9223372036854775808
  %46 = xor i64 %45, %44
  %47 = bitcast i64 %46 to double
  ret double %47
}

; Function Attrs: nounwind uwtable
define double @Sleef_asind1_u10purec(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %8, double %6
  %10 = tail call double @sqrt(double %9) #6
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %10, %13
  %15 = fmul double %10, %10
  %16 = fmul double %13, %13
  %17 = fmul double %14, %13
  %18 = fmul double %14, %14
  %19 = fsub double %16, %15
  %20 = fadd double %17, %19
  %21 = fadd double %17, %20
  %22 = fadd double %18, %21
  %23 = fadd double %9, %15
  %24 = fsub double %23, %9
  %25 = fsub double %23, %24
  %26 = fsub double %9, %25
  %27 = fsub double %15, %24
  %28 = fadd double %27, %26
  %29 = fadd double %28, %22
  %30 = fdiv double 1.000000e+00, %10
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %30, %33
  %35 = fmul double %13, %33
  %36 = fmul double %34, %13
  %37 = fmul double %14, %33
  %38 = fmul double %14, %34
  %39 = fsub double 1.000000e+00, %35
  %40 = fsub double %39, %36
  %41 = fsub double %40, %37
  %42 = fsub double %41, %38
  %43 = fmul double %30, %42
  %44 = bitcast double %23 to i64
  %45 = and i64 %44, -134217728
  %46 = bitcast i64 %45 to double
  %47 = fsub double %23, %46
  %48 = fmul double %30, %23
  %49 = fmul double %33, %46
  %50 = fmul double %47, %33
  %51 = fmul double %34, %46
  %52 = fmul double %34, %47
  %53 = fmul double %23, %43
  %54 = fmul double %30, %29
  %55 = fsub double %49, %48
  %56 = fadd double %50, %55
  %57 = fadd double %51, %56
  %58 = fadd double %52, %57
  %59 = fadd double %58, %53
  %60 = fadd double %54, %59
  %61 = fmul double %48, 5.000000e-01
  %62 = fmul double %60, 5.000000e-01
  %63 = select i1 %5, double %61, double %4
  %64 = fcmp une double %4, 1.000000e+00
  %65 = select i1 %64, double %63, double 0.000000e+00
  %66 = and i1 %64, %5
  %67 = select i1 %66, double %62, double 0.000000e+00
  %68 = fmul double %9, %9
  %69 = fmul double %68, %68
  %70 = fmul double %69, %69
  %71 = insertelement <2 x double> undef, double %9, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fmul <2 x double> %72, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %74 = fadd <2 x double> %73, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %75 = fmul <2 x double> %72, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %76 = fadd <2 x double> %75, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %77 = insertelement <2 x double> undef, double %68, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %78, %74
  %80 = fadd <2 x double> %76, %79
  %81 = fmul double %9, 0x3F9F1C72C5FD95BA
  %82 = fadd double %81, 0x3FA6DB6DB407C2B3
  %83 = fmul double %9, 0x3FB3333333375CD0
  %84 = fadd double %83, 0x3FC55555555552F4
  %85 = fmul double %68, %82
  %86 = fadd double %84, %85
  %87 = insertelement <2 x double> undef, double %70, i32 0
  %88 = insertelement <2 x double> %87, double %69, i32 1
  %89 = fmul <2 x double> %88, %80
  %90 = extractelement <2 x double> %89, i32 1
  %91 = fadd double %86, %90
  %92 = extractelement <2 x double> %89, i32 0
  %93 = fadd double %92, %91
  %94 = fmul double %9, %65
  %95 = fmul double %93, %94
  %96 = fsub double 0x3FE921FB54442D18, %65
  %97 = fsub double 0x3FE921FB54442D18, %96
  %98 = fsub double %97, %65
  %99 = fadd double %98, 0x3C81A62633145C07
  %100 = fsub double %99, %67
  %101 = fsub double %96, %95
  %102 = fsub double %96, %101
  %103 = fsub double %102, %95
  %104 = fadd double %103, %100
  %105 = fadd double %65, %95
  %106 = fadd double %101, %104
  %107 = fmul double %106, 2.000000e+00
  %108 = select i1 %5, double %107, double %105
  %109 = bitcast double %108 to i64
  %110 = and i64 %2, -9223372036854775808
  %111 = xor i64 %110, %109
  %112 = bitcast i64 %111 to double
  ret double %112
}

; Function Attrs: nounwind uwtable
define double @Sleef_acosd1_u35purec(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %6, double %8
  %10 = tail call double @sqrt(double %9) #6
  %11 = select i1 %5, double %4, double %10
  %12 = fcmp une double %4, 1.000000e+00
  %13 = select i1 %12, double %11, double 0.000000e+00
  %14 = fmul double %9, %9
  %15 = fmul double %14, %14
  %16 = fmul double %15, %15
  %17 = insertelement <2 x double> undef, double %9, i32 0
  %18 = shufflevector <2 x double> %17, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %18, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %20 = fadd <2 x double> %19, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %21 = fmul <2 x double> %18, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %22 = fadd <2 x double> %21, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %23 = insertelement <2 x double> undef, double %14, i32 0
  %24 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x double> %24, %20
  %26 = fadd <2 x double> %22, %25
  %27 = fmul double %9, 0x3F9F1C72C5FD95BA
  %28 = fadd double %27, 0x3FA6DB6DB407C2B3
  %29 = fmul double %9, 0x3FB3333333375CD0
  %30 = fadd double %29, 0x3FC55555555552F4
  %31 = fmul double %14, %28
  %32 = fadd double %30, %31
  %33 = insertelement <2 x double> undef, double %16, i32 0
  %34 = insertelement <2 x double> %33, double %15, i32 1
  %35 = fmul <2 x double> %34, %26
  %36 = extractelement <2 x double> %35, i32 1
  %37 = fadd double %32, %36
  %38 = extractelement <2 x double> %35, i32 0
  %39 = fadd double %38, %37
  %40 = fmul double %9, %13
  %41 = fmul double %39, %40
  %42 = bitcast double %13 to i64
  %43 = and i64 %2, -9223372036854775808
  %44 = xor i64 %43, %42
  %45 = bitcast i64 %44 to double
  %46 = bitcast double %41 to i64
  %47 = xor i64 %43, %46
  %48 = bitcast i64 %47 to double
  %49 = fadd double %45, %48
  %50 = fsub double 0x3FF921FB54442D18, %49
  %51 = fadd double %13, %41
  %52 = fmul double %51, 2.000000e+00
  %53 = select i1 %5, double %50, double %52
  %54 = fcmp uge double %0, 0.000000e+00
  %55 = fsub double 0x400921FB54442D18, %53
  %56 = or i1 %54, %5
  %57 = select i1 %56, double %53, double %55
  ret double %57
}

; Function Attrs: nounwind uwtable
define double @Sleef_acosd1_u10purec(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp olt double %4, 5.000000e-01
  %6 = fmul double %0, %0
  %7 = fsub double 1.000000e+00, %4
  %8 = fmul double %7, 5.000000e-01
  %9 = select i1 %5, double %6, double %8
  %10 = tail call double @sqrt(double %9) #6
  %11 = bitcast double %10 to i64
  %12 = and i64 %11, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %10, %13
  %15 = fmul double %10, %10
  %16 = fmul double %13, %13
  %17 = fmul double %14, %13
  %18 = fmul double %14, %14
  %19 = fsub double %16, %15
  %20 = fadd double %17, %19
  %21 = fadd double %17, %20
  %22 = fadd double %18, %21
  %23 = fadd double %9, %15
  %24 = fsub double %23, %9
  %25 = fsub double %23, %24
  %26 = fsub double %9, %25
  %27 = fsub double %15, %24
  %28 = fadd double %27, %26
  %29 = fadd double %28, %22
  %30 = fdiv double 1.000000e+00, %10
  %31 = bitcast double %30 to i64
  %32 = and i64 %31, -134217728
  %33 = bitcast i64 %32 to double
  %34 = fsub double %30, %33
  %35 = fmul double %13, %33
  %36 = fmul double %34, %13
  %37 = fmul double %14, %33
  %38 = fmul double %14, %34
  %39 = fsub double 1.000000e+00, %35
  %40 = fsub double %39, %36
  %41 = fsub double %40, %37
  %42 = fsub double %41, %38
  %43 = fmul double %30, %42
  %44 = bitcast double %23 to i64
  %45 = and i64 %44, -134217728
  %46 = bitcast i64 %45 to double
  %47 = fsub double %23, %46
  %48 = fmul double %30, %23
  %49 = fmul double %33, %46
  %50 = fmul double %47, %33
  %51 = fmul double %34, %46
  %52 = fmul double %34, %47
  %53 = fmul double %23, %43
  %54 = fmul double %30, %29
  %55 = fsub double %49, %48
  %56 = fadd double %50, %55
  %57 = fadd double %51, %56
  %58 = fadd double %52, %57
  %59 = fadd double %58, %53
  %60 = fadd double %54, %59
  %61 = fmul double %48, 5.000000e-01
  %62 = fmul double %60, 5.000000e-01
  %63 = select i1 %5, double %4, double %61
  %64 = select i1 %5, double 0.000000e+00, double %62
  %65 = fcmp une double %4, 1.000000e+00
  %66 = select i1 %65, double %63, double 0.000000e+00
  %67 = select i1 %65, double %64, double 0.000000e+00
  %68 = fmul double %9, %9
  %69 = fmul double %68, %68
  %70 = fmul double %69, %69
  %71 = insertelement <2 x double> undef, double %9, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fmul <2 x double> %72, <double 0x3FA02FF4C7428A47, double 0x3F88E3FD48D0FB6F>
  %74 = fadd <2 x double> %73, <double 0xBF9032E75CCD4AE8, double 0x3F8C70DDF81249FC>
  %75 = fmul <2 x double> %72, <double 0x3F93C0E0817E9742, double 0x3F91C6B5042EC6B2>
  %76 = fadd <2 x double> %75, <double 0x3F7B0EF96B727E7E, double 0x3F96E89F8578B64E>
  %77 = insertelement <2 x double> undef, double %68, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %78, %74
  %80 = fadd <2 x double> %76, %79
  %81 = fmul double %9, 0x3F9F1C72C5FD95BA
  %82 = fadd double %81, 0x3FA6DB6DB407C2B3
  %83 = fmul double %9, 0x3FB3333333375CD0
  %84 = fadd double %83, 0x3FC55555555552F4
  %85 = fmul double %68, %82
  %86 = fadd double %84, %85
  %87 = insertelement <2 x double> undef, double %70, i32 0
  %88 = insertelement <2 x double> %87, double %69, i32 1
  %89 = fmul <2 x double> %88, %80
  %90 = extractelement <2 x double> %89, i32 1
  %91 = fadd double %86, %90
  %92 = extractelement <2 x double> %89, i32 0
  %93 = fadd double %92, %91
  %94 = fmul double %9, %66
  %95 = fmul double %93, %94
  %96 = bitcast double %66 to i64
  %97 = and i64 %2, -9223372036854775808
  %98 = xor i64 %97, %96
  %99 = bitcast i64 %98 to double
  %100 = bitcast double %95 to i64
  %101 = xor i64 %97, %100
  %102 = bitcast i64 %101 to double
  %103 = fadd double %99, %102
  %104 = fsub double %99, %103
  %105 = fadd double %104, %102
  %106 = fsub double 0x3FF921FB54442D18, %103
  %107 = fsub double 0x3FF921FB54442D18, %106
  %108 = fsub double %107, %103
  %109 = fadd double %108, 0x3C91A62633145C07
  %110 = fsub double %109, %105
  %111 = fadd double %66, %95
  %112 = fsub double %66, %111
  %113 = fadd double %95, %112
  %114 = fadd double %113, %67
  %115 = fmul double %111, 2.000000e+00
  %116 = fmul double %114, 2.000000e+00
  %117 = select i1 %5, double %106, double %115
  %118 = select i1 %5, double %110, double %116
  %119 = fcmp uge double %0, 0.000000e+00
  %120 = fsub double 0x400921FB54442D18, %117
  %121 = fsub double 0x400921FB54442D18, %120
  %122 = fsub double %121, %117
  %123 = fadd double %122, 0x3CA1A62633145C07
  %124 = fsub double %123, %118
  %125 = or i1 %119, %5
  %126 = select i1 %125, double %117, double %120
  %127 = select i1 %125, double %118, double %124
  %128 = fadd double %126, %127
  ret double %128
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atand1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ule double %4, 1.000000e+00
  %6 = xor i1 %5, true
  %7 = select i1 %5, double %4, double -1.000000e+00
  %8 = select i1 %5, double 0.000000e+00, double -0.000000e+00
  %9 = select i1 %5, double 1.000000e+00, double %4
  %10 = fdiv double 1.000000e+00, %9
  %11 = bitcast double %9 to i64
  %12 = and i64 %11, -134217728
  %13 = bitcast i64 %12 to double
  %14 = fsub double %9, %13
  %15 = bitcast double %10 to i64
  %16 = and i64 %15, -134217728
  %17 = bitcast i64 %16 to double
  %18 = fsub double %10, %17
  %19 = bitcast double %7 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %7, %21
  %23 = fmul double %7, %10
  %24 = fmul double %21, %17
  %25 = fsub double %24, %23
  %26 = fmul double %13, %17
  %27 = fmul double %18, %13
  %28 = fmul double %14, %17
  %29 = fmul double %14, %18
  %30 = fsub double 1.000000e+00, %26
  %31 = fsub double %30, %27
  %32 = fsub double %31, %28
  %33 = fmul double %23, 0.000000e+00
  %34 = fsub double %8, %33
  %35 = bitcast double %23 to i64
  %36 = and i64 %35, -134217728
  %37 = bitcast i64 %36 to double
  %38 = fsub double %23, %37
  %39 = fmul double %23, %23
  %40 = fmul double %37, %37
  %41 = fadd double %37, %37
  %42 = fmul double %41, %38
  %43 = fmul double %38, %38
  %44 = uitofp i1 %6 to double
  %45 = bitcast double %44 to i64
  %46 = and i64 %45, -134217728
  %47 = bitcast i64 %46 to double
  %48 = insertelement <2 x double> undef, double %44, i32 0
  %49 = insertelement <2 x double> %48, double %32, i32 1
  %50 = insertelement <2 x double> undef, double %47, i32 0
  %51 = insertelement <2 x double> %50, double %29, i32 1
  %52 = fsub <2 x double> %49, %51
  %53 = insertelement <2 x double> <double 0x3FF921FB54442D18, double undef>, double %18, i32 1
  %54 = insertelement <2 x double> %48, double %21, i32 1
  %55 = fmul <2 x double> %53, %54
  %56 = fmul double %47, 0x3FF921FB50000000
  %57 = insertelement <2 x double> <double 0x3E5110B460000000, double undef>, double %22, i32 1
  %58 = insertelement <2 x double> %50, double %17, i32 1
  %59 = fmul <2 x double> %57, %58
  %60 = insertelement <2 x double> <double 0x3FF921FB50000000, double undef>, double %22, i32 1
  %61 = extractelement <2 x double> %52, i32 0
  %62 = insertelement <2 x double> undef, double %61, i32 0
  %63 = insertelement <2 x double> %62, double %18, i32 1
  %64 = fmul <2 x double> %60, %63
  %65 = insertelement <2 x double> <double 0x3E5110B460000000, double undef>, double %23, i32 1
  %66 = fmul <2 x double> %65, %52
  %67 = insertelement <2 x double> <double 0x3C91A62633145C07, double undef>, double %10, i32 1
  %68 = insertelement <2 x double> %48, double %34, i32 1
  %69 = fmul <2 x double> %67, %68
  %70 = insertelement <2 x double> undef, double %56, i32 0
  %71 = insertelement <2 x double> %70, double %25, i32 1
  %72 = fsub <2 x double> %71, %55
  %73 = fadd <2 x double> %71, %55
  %74 = shufflevector <2 x double> %72, <2 x double> %73, <2 x i32> <i32 0, i32 3>
  %75 = fadd <2 x double> %59, %74
  %76 = fadd <2 x double> %64, %75
  %77 = fadd <2 x double> %66, %76
  %78 = fadd <2 x double> %69, %77
  %79 = extractelement <2 x double> %78, i32 1
  %80 = fadd double %79, %79
  %81 = fmul double %23, %80
  %82 = fsub double %40, %39
  %83 = fadd double %82, %42
  %84 = fadd double %43, %83
  %85 = fadd double %84, %81
  %86 = fadd double %39, %85
  %87 = fsub double %39, %86
  %88 = fadd double %85, %87
  %89 = fmul double %86, %86
  %90 = fmul double %89, %89
  %91 = fmul double %90, %90
  %92 = fmul double %86, 0x3EE64ADB3E06EE72
  %93 = fadd double %92, 0xBF2077212AA7D6CE
  %94 = fmul double %86, 0x3F471ECE4D9CED98
  %95 = fadd double %94, 0xBF64A20138B90CEE
  %96 = fmul double %89, %93
  %97 = fadd double %95, %96
  %98 = fmul double %86, 0x3F7A788EC28E9FB3
  %99 = fadd double %98, 0xBF8A45A2EA379DB5
  %100 = fmul double %86, 0x3F954D3ECCF8F320
  %101 = fadd double %100, 0xBF9D9805E7BA23E7
  %102 = fmul double %89, %99
  %103 = fadd double %101, %102
  %104 = fmul double %90, %97
  %105 = fadd double %103, %104
  %106 = fmul double %86, 0x3FA26BC6260B1BDD
  %107 = fadd double %106, 0xBFA56D2D526C0577
  %108 = fmul double %86, 0x3FA81B6EFB51F8A6
  %109 = fadd double %108, 0xBFAAE027D1895F2E
  %110 = fmul double %89, %107
  %111 = fadd double %109, %110
  %112 = fmul double %86, 0x3FAE1A556400767B
  %113 = fadd double %112, 0xBFB110C441E542D6
  %114 = fmul double %86, 0x3FB3B131F3B00D10
  %115 = fadd double %114, 0xBFB745D0AC14EFEC
  %116 = fmul double %89, %113
  %117 = fadd double %115, %116
  %118 = fmul double %90, %111
  %119 = fadd double %117, %118
  %120 = fmul double %91, %105
  %121 = fadd double %119, %120
  %122 = fmul double %86, %121
  %123 = fadd double %122, 0x3FBC71C710B37A0B
  %124 = fmul double %86, %123
  %125 = fadd double %124, 0xBFC249249211AFC7
  %126 = fmul double %86, %125
  %127 = fadd double %126, 0x3FC9999999987CF0
  %128 = fmul double %86, %127
  %129 = fadd double %128, 0xBFD555555555543A
  %130 = bitcast double %86 to i64
  %131 = and i64 %130, -134217728
  %132 = bitcast i64 %131 to double
  %133 = fsub double %86, %132
  %134 = fmul double %23, %86
  %135 = fmul double %37, %132
  %136 = fmul double %38, %132
  %137 = fmul double %133, %37
  %138 = fmul double %38, %133
  %139 = fmul double %23, %88
  %140 = fmul double %79, %86
  %141 = fsub double %135, %134
  %142 = fadd double %136, %141
  %143 = fadd double %137, %142
  %144 = fadd double %138, %143
  %145 = fadd double %139, %144
  %146 = fadd double %140, %145
  %147 = bitcast double %134 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %134, %149
  %151 = bitcast double %129 to i64
  %152 = and i64 %151, -134217728
  %153 = bitcast i64 %152 to double
  %154 = fsub double %129, %153
  %155 = fmul double %134, %129
  %156 = fmul double %149, %153
  %157 = fmul double %150, %153
  %158 = fmul double %154, %149
  %159 = fmul double %150, %154
  %160 = fmul double %146, %129
  %161 = fsub double %156, %155
  %162 = fadd double %157, %161
  %163 = fadd double %158, %162
  %164 = fadd double %159, %163
  %165 = fadd double %160, %164
  %166 = fadd double %23, %155
  %167 = extractelement <2 x double> %55, i32 0
  %168 = fadd double %167, %166
  %169 = insertelement <2 x double> undef, double %167, i32 0
  %170 = insertelement <2 x double> %169, double %23, i32 1
  %171 = insertelement <2 x double> undef, double %168, i32 0
  %172 = insertelement <2 x double> %171, double %166, i32 1
  %173 = fsub <2 x double> %170, %172
  %174 = insertelement <2 x double> undef, double %166, i32 0
  %175 = insertelement <2 x double> %174, double %155, i32 1
  %176 = fadd <2 x double> %175, %173
  %177 = fadd <2 x double> %78, %176
  %178 = extractelement <2 x double> %177, i32 1
  %179 = fadd double %178, %165
  %180 = extractelement <2 x double> %177, i32 0
  %181 = fadd double %180, %179
  %182 = fadd double %168, %181
  %183 = fcmp une double %0, 0x7FF0000000000000
  %184 = fcmp une double %0, 0xFFF0000000000000
  %185 = and i1 %184, %183
  %186 = bitcast double %182 to i64
  %187 = select i1 %185, i64 %186, i64 4609753056924675352
  %188 = and i64 %2, -9223372036854775808
  %189 = xor i64 %187, %188
  %190 = bitcast i64 %189 to double
  ret double %190
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atand1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ogt double %4, 1.000000e+00
  %6 = fcmp ule double %4, 1.000000e+00
  %7 = fdiv double 1.000000e+00, %4
  %8 = select i1 %6, double %4, double %7
  %9 = fmul double %8, %8
  %10 = fmul double %9, %9
  %11 = fmul double %10, %10
  %12 = fmul double %11, %11
  %13 = fmul double %12, %12
  %14 = fmul double %9, 0x3F2B81666EB938AF
  %15 = fadd double %14, 0xBF521F657F3915DA
  %16 = fmul double %10, 0x3EF3CBF44A88555F
  %17 = fsub double %15, %16
  %18 = insertelement <2 x double> undef, double %9, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %19, <double 0x3FAE16A933B73622, double 0x3F6E5005F4C78C20>
  %21 = fadd <2 x double> %20, <double 0xBFB11074E45F93E0, double 0xBF82399E74A75E56>
  %22 = fmul <2 x double> %19, <double 0x3FB3B1283C0CA0B1, double 0x3F90FF6A2A0D2286>
  %23 = fadd <2 x double> %22, <double 0xBFB745CFD878FEE8, double 0xBF9A1006DE22CDAC>
  %24 = insertelement <2 x double> undef, double %10, i32 0
  %25 = shufflevector <2 x double> %24, <2 x double> undef, <2 x i32> zeroinitializer
  %26 = fmul <2 x double> %25, %21
  %27 = fadd <2 x double> %23, %26
  %28 = fmul <2 x double> %19, <double 0x3FBC71C704FB4F9F, double 0x3FA14C4D24651F2E>
  %29 = fadd <2 x double> %28, <double 0xBFC2492491E100BB, double 0xBFA4DEE09915F638>
  %30 = fmul <2 x double> %19, <double 0x3FC999999997B9DD, double 0x3FA7E4B31D8A55AE>
  %31 = fadd <2 x double> %30, <double 0xBFD55555555553C5, double 0xBFAACFE938E04FCA>
  %32 = fmul <2 x double> %25, %29
  %33 = fadd <2 x double> %31, %32
  %34 = insertelement <2 x double> undef, double %11, i32 0
  %35 = shufflevector <2 x double> %34, <2 x double> undef, <2 x i32> zeroinitializer
  %36 = fmul <2 x double> %35, %27
  %37 = fadd <2 x double> %33, %36
  %38 = extractelement <2 x double> %37, i32 1
  %39 = fmul double %12, %38
  %40 = extractelement <2 x double> %37, i32 0
  %41 = fadd double %40, %39
  %42 = fmul double %17, %13
  %43 = fadd double %42, %41
  %44 = fmul double %9, %43
  %45 = fmul double %8, %44
  %46 = fadd double %8, %45
  %47 = fsub double 0x3FF921FB54442D18, %46
  %48 = select i1 %5, double %47, double %46
  %49 = and i64 %2, -9223372036854775808
  %50 = bitcast double %48 to i64
  %51 = xor i64 %49, %50
  %52 = bitcast i64 %51 to double
  ret double %52
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_logd1_u35purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, %24
  %28 = fmul double %24, 0x3FC385C5CBC3F50D
  %29 = fadd double %28, 0x3FC7474BA672B05F
  %30 = insertelement <2 x double> undef, double %25, i32 0
  %31 = insertelement <2 x double> %30, double %24, i32 1
  %32 = fmul <2 x double> %31, <double 0x3FC3A5791D95DB39, double 0x3FCC71BFEED5D419>
  %33 = insertelement <2 x double> <double undef, double 0x3FD249249BFBE987>, double %29, i32 0
  %34 = fadd <2 x double> %32, %33
  %35 = fmul double %24, 0x3FD99999998C136E
  %36 = fadd double %35, 0x3FE555555555593F
  %37 = insertelement <2 x double> undef, double %26, i32 0
  %38 = insertelement <2 x double> %37, double %25, i32 1
  %39 = fmul <2 x double> %38, %34
  %40 = extractelement <2 x double> %39, i32 1
  %41 = fadd double %36, %40
  %42 = extractelement <2 x double> %39, i32 0
  %43 = fadd double %42, %41
  %44 = sitofp i32 %20 to double
  %45 = fmul double %44, 0x3FE62E42FEFA39EF
  %46 = fmul double %23, 2.000000e+00
  %47 = fadd double %45, %46
  %48 = fmul double %27, %43
  %49 = fadd double %47, %48
  %50 = fcmp une double %4, 0x7FF0000000000000
  %51 = select i1 %50, double %49, double 0x7FF0000000000000
  %52 = fcmp oge double %4, 0.000000e+00
  %53 = select i1 %52, double %51, double 0x7FF8000000000000
  %54 = fcmp une double %4, 0.000000e+00
  %55 = select i1 %54, double %53, double 0xFFF0000000000000
  ret double %55
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_expd1_u10purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3FF71547652B82FE
  %3 = fcmp ogt double %2, 0.000000e+00
  %4 = select i1 %3, double 5.000000e-01, double -5.000000e-01
  %5 = fadd double %2, %4
  %6 = bitcast double %5 to i64
  %7 = fptosi double %5 to i32
  %8 = and i32 %7, 1
  %9 = zext i32 %8 to i64
  %10 = sub i64 %6, %9
  %11 = bitcast i64 %10 to double
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = icmp sgt i32 %12, 0
  %15 = select i1 %14, double 5.000000e-01, double -5.000000e-01
  %16 = fadd double %15, %13
  %17 = bitcast double %16 to i64
  %18 = fptosi double %16 to i32
  %19 = and i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = sub i64 %17, %20
  %22 = bitcast i64 %21 to double
  %23 = fptosi double %22 to i32
  %24 = fmul double %13, 0x3FE62E42FEFA3000
  %25 = fsub double %0, %24
  %26 = fmul double %13, 0x3D53DE6AF278ECE6
  %27 = fsub double %25, %26
  %28 = fmul double %27, %27
  %29 = fmul double %28, %28
  %30 = fmul double %29, %29
  %31 = fmul double %27, 0x3E927E52E0FCD573
  %32 = fadd double %31, 0x3EC71DDF1629E6CE
  %33 = fmul double %27, 0x3EFA01A01780879E
  %34 = fadd double %33, 0x3F2A01A01B3603F5
  %35 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %28, i32 1
  %36 = insertelement <2 x double> undef, double %27, i32 0
  %37 = insertelement <2 x double> %36, double %32, i32 1
  %38 = fmul <2 x double> %35, %37
  %39 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %34, i32 1
  %40 = fadd <2 x double> %39, %38
  %41 = fmul double %27, 0x3F56C16C16C20BA0
  %42 = fadd double %41, 0x3F8111111110EB39
  %43 = fmul double %27, 0x3FA555555555553E
  %44 = fadd double %43, 0x3FC555555555555C
  %45 = fmul double %28, %42
  %46 = fadd double %44, %45
  %47 = insertelement <2 x double> undef, double %30, i32 0
  %48 = insertelement <2 x double> %47, double %29, i32 1
  %49 = fmul <2 x double> %40, %48
  %50 = extractelement <2 x double> %49, i32 1
  %51 = fadd double %46, %50
  %52 = extractelement <2 x double> %49, i32 0
  %53 = fadd double %52, %51
  %54 = fmul double %27, %53
  %55 = fadd double %54, 5.000000e-01
  %56 = fmul double %28, %55
  %57 = fadd double %27, %56
  %58 = fadd double %57, 1.000000e+00
  %59 = ashr i32 %23, 1
  %60 = add nsw i32 %59, 1023
  %61 = zext i32 %60 to i64
  %62 = shl i64 %61, 52
  %63 = bitcast i64 %62 to double
  %64 = fmul double %58, %63
  %65 = add i32 %23, 1023
  %66 = sub i32 %65, %59
  %67 = zext i32 %66 to i64
  %68 = shl i64 %67, 52
  %69 = bitcast i64 %68 to double
  %70 = fmul double %64, %69
  %71 = fcmp ule double %0, 0x40862E42FE102C83
  %72 = fcmp olt double %0, -1.000000e+03
  %73 = bitcast double %70 to i64
  %74 = select i1 %71, i64 %73, i64 9218868437227405312
  %75 = select i1 %72, i64 4294967295, i64 0
  %76 = shl nuw i64 %75, 32
  %77 = or i64 %76, %75
  %78 = xor i64 %77, -1
  %79 = and i64 %74, %78
  %80 = bitcast i64 %79 to double
  ret double %80
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_logd1_u10purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = bitcast double %27 to i64
  %35 = and i64 %34, -134217728
  %36 = bitcast i64 %35 to double
  %37 = fsub double %27, %36
  %38 = bitcast double %33 to i64
  %39 = and i64 %38, -134217728
  %40 = bitcast i64 %39 to double
  %41 = fsub double %33, %40
  %42 = bitcast double %21 to i64
  %43 = and i64 %42, -134217728
  %44 = bitcast i64 %43 to double
  %45 = fsub double %21, %44
  %46 = fmul double %21, %33
  %47 = fmul double %44, %40
  %48 = fsub double %47, %46
  %49 = fmul double %41, %44
  %50 = fmul double %45, %40
  %51 = fmul double %36, %40
  %52 = fmul double %41, %36
  %53 = fmul double %37, %40
  %54 = fmul double %37, %41
  %55 = fsub double 1.000000e+00, %51
  %56 = fsub double %55, %52
  %57 = fsub double %56, %53
  %58 = fadd double %48, %49
  %59 = fadd double %50, %58
  %60 = fmul double %46, %32
  %61 = fmul double %46, %46
  %62 = fmul double %61, %61
  %63 = fmul double %62, %62
  %64 = fmul double %61, 0x3FC3872E67FE8E84
  %65 = fadd double %64, 0x3FC747353A506035
  %66 = fmul double %62, 0x3FC39C4F5407567E
  %67 = insertelement <2 x double> undef, double %66, i32 0
  %68 = insertelement <2 x double> %67, double %26, i32 1
  %69 = insertelement <2 x double> undef, double %65, i32 0
  %70 = insertelement <2 x double> %69, double %60, i32 1
  %71 = fadd <2 x double> %68, %70
  %72 = fsub <2 x double> %68, %70
  %73 = shufflevector <2 x double> %71, <2 x double> %72, <2 x i32> <i32 0, i32 3>
  %74 = fmul double %61, 0x3FCC71C0A65ECD8E
  %75 = insertelement <2 x double> undef, double %74, i32 0
  %76 = insertelement <2 x double> %75, double %57, i32 1
  %77 = insertelement <2 x double> <double 0x3FD249249A68A245, double undef>, double %54, i32 1
  %78 = fadd <2 x double> %76, %77
  %79 = fsub <2 x double> %76, %77
  %80 = shufflevector <2 x double> %78, <2 x double> %79, <2 x i32> <i32 0, i32 3>
  %81 = insertelement <2 x double> <double 0x3FD99999998F92EA, double undef>, double %45, i32 1
  %82 = insertelement <2 x double> undef, double %61, i32 0
  %83 = insertelement <2 x double> %82, double %41, i32 1
  %84 = fmul <2 x double> %81, %83
  %85 = insertelement <2 x double> <double 0x3FE55555555557AE, double undef>, double %59, i32 1
  %86 = fadd <2 x double> %85, %84
  %87 = insertelement <2 x double> undef, double %62, i32 0
  %88 = insertelement <2 x double> %87, double %46, i32 1
  %89 = fmul <2 x double> %88, %80
  %90 = fadd <2 x double> %86, %89
  %91 = insertelement <2 x double> undef, double %63, i32 0
  %92 = insertelement <2 x double> %91, double %33, i32 1
  %93 = fmul <2 x double> %92, %73
  %94 = fadd <2 x double> %93, %90
  %95 = sitofp i32 %20 to double
  %96 = bitcast double %95 to i64
  %97 = and i64 %96, -134217728
  %98 = bitcast i64 %97 to double
  %99 = fsub double %95, %98
  %100 = fmul double %95, 0x3FE62E42FEFA39EF
  %101 = fmul double %98, 0x3FE62E42F8000000
  %102 = fmul double %98, 0x3E4BE8E7BC000000
  %103 = fmul double %99, 0x3FE62E42F8000000
  %104 = fmul double %99, 0x3E4BE8E7BC000000
  %105 = fmul double %95, 0x3C7ABC9E3B39803F
  %106 = fsub double %101, %100
  %107 = fadd double %102, %106
  %108 = fadd double %103, %107
  %109 = fadd double %104, %108
  %110 = fadd double %105, %109
  %111 = fmul double %46, 2.000000e+00
  %112 = fadd double %100, %111
  %113 = fsub double %100, %112
  %114 = fadd double %111, %113
  %115 = fadd double %110, %114
  %116 = fmul double %46, %61
  %117 = insertelement <2 x double> <double undef, double 2.000000e+00>, double %116, i32 0
  %118 = fmul <2 x double> %117, %94
  %119 = insertelement <2 x double> undef, double %112, i32 0
  %120 = insertelement <2 x double> %119, double %115, i32 1
  %121 = fadd <2 x double> %120, %118
  %122 = extractelement <2 x double> %121, i32 0
  %123 = fsub double %112, %122
  %124 = extractelement <2 x double> %118, i32 0
  %125 = fadd double %124, %123
  %126 = extractelement <2 x double> %121, i32 1
  %127 = fadd double %125, %126
  %128 = fadd double %122, %127
  %129 = fcmp une double %4, 0x7FF0000000000000
  %130 = select i1 %129, double %128, double 0x7FF0000000000000
  %131 = fcmp oge double %4, 0.000000e+00
  %132 = select i1 %131, double %130, double 0x7FF8000000000000
  %133 = fcmp une double %4, 0.000000e+00
  %134 = select i1 %133, double %132, double 0xFFF0000000000000
  ret double %134
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_powd1_u10purec(double, double) local_unnamed_addr #0 {
  %3 = fmul double %1, 0x3E00000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %1, %6
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fcmp oeq double %7, %9
  %11 = bitcast double %1 to i64
  %12 = and i64 %11, 9223372036854775807
  %13 = bitcast i64 %12 to double
  %14 = fcmp ogt double %13, 0x4340000000000000
  %15 = or i1 %14, %10
  %16 = fcmp olt double %13, 0x4340000000000000
  %17 = and i1 %16, %15
  %18 = bitcast double %0 to i64
  %19 = and i64 %18, 9223372036854775807
  %20 = bitcast i64 %19 to double
  %21 = fcmp uge double %20, 0x10000000000000
  %22 = fmul double %20, 0x43F0000000000000
  %23 = select i1 %21, double %20, double %22
  %24 = fmul double %23, 0x3FF5555555555555
  %25 = bitcast double %24 to i64
  %26 = lshr i64 %25, 52
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 2047
  %29 = sub nsw i32 1023, %28
  %30 = bitcast double %23 to i64
  %31 = zext i32 %29 to i64
  %32 = shl i64 %31, 52
  %33 = and i64 %30, -4294967296
  %34 = add i64 %32, %33
  %35 = and i64 %30, 4294967295
  %36 = or i64 %34, %35
  %37 = bitcast i64 %36 to double
  %38 = select i1 %21, i32 -1023, i32 -1087
  %39 = add nsw i32 %28, %38
  %40 = fadd double %37, -1.000000e+00
  %41 = fadd double %40, 1.000000e+00
  %42 = fsub double %40, %41
  %43 = fsub double -1.000000e+00, %42
  %44 = fsub double %37, %41
  %45 = fadd double %44, %43
  %46 = fadd double %37, 1.000000e+00
  %47 = fadd double %46, -1.000000e+00
  %48 = fsub double %46, %47
  %49 = fsub double 1.000000e+00, %48
  %50 = fsub double %37, %47
  %51 = fadd double %50, %49
  %52 = fdiv double 1.000000e+00, %46
  %53 = bitcast double %46 to i64
  %54 = and i64 %53, -134217728
  %55 = bitcast i64 %54 to double
  %56 = fsub double %46, %55
  %57 = bitcast double %52 to i64
  %58 = and i64 %57, -134217728
  %59 = bitcast i64 %58 to double
  %60 = fsub double %52, %59
  %61 = bitcast double %40 to i64
  %62 = and i64 %61, -134217728
  %63 = bitcast i64 %62 to double
  %64 = fsub double %40, %63
  %65 = fmul double %40, %52
  %66 = fmul double %63, %59
  %67 = fsub double %66, %65
  %68 = fmul double %60, %63
  %69 = fmul double %64, %59
  %70 = fmul double %64, %60
  %71 = fmul double %55, %59
  %72 = fmul double %60, %55
  %73 = fmul double %56, %59
  %74 = fmul double %56, %60
  %75 = fsub double 1.000000e+00, %71
  %76 = fsub double %75, %72
  %77 = fsub double %76, %73
  %78 = fsub double %77, %74
  %79 = fmul double %65, %78
  %80 = fadd double %67, %68
  %81 = fadd double %69, %80
  %82 = fadd double %70, %81
  %83 = fadd double %82, %79
  %84 = fmul double %65, %51
  %85 = fsub double %45, %84
  %86 = fmul double %52, %85
  %87 = fadd double %86, %83
  %88 = bitcast double %65 to i64
  %89 = and i64 %88, -134217728
  %90 = bitcast i64 %89 to double
  %91 = fsub double %65, %90
  %92 = fmul double %65, %65
  %93 = fmul double %90, %90
  %94 = fadd double %90, %90
  %95 = fmul double %94, %91
  %96 = fmul double %91, %91
  %97 = fadd double %87, %87
  %98 = fmul double %65, %97
  %99 = fsub double %93, %92
  %100 = fadd double %99, %95
  %101 = fadd double %96, %100
  %102 = fadd double %101, %98
  %103 = fmul double %92, %92
  %104 = fmul double %103, %103
  %105 = insertelement <2 x double> undef, double %92, i32 0
  %106 = shufflevector <2 x double> %105, <2 x double> undef, <2 x i32> zeroinitializer
  %107 = fmul <2 x double> %106, <double 0x3FC745D17248DAF1, double 0x3FBA6DEA6D1E9D11>
  %108 = fadd <2 x double> %107, <double 0x3FCC71C71C76197F, double 0x3FBE252DDF5F8D0A>
  %109 = fmul <2 x double> %106, <double 0x3FD2492492492200, double 0x3FC110F384A1865C>
  %110 = fadd <2 x double> %109, <double 0x3FD999999999999B, double 0x3FC3B13BB108EFD1>
  %111 = insertelement <2 x double> undef, double %103, i32 0
  %112 = shufflevector <2 x double> %111, <2 x double> undef, <2 x i32> zeroinitializer
  %113 = fmul <2 x double> %112, %108
  %114 = fadd <2 x double> %110, %113
  %115 = extractelement <2 x double> %114, i32 1
  %116 = extractelement <2 x double> %114, i32 0
  %117 = sitofp i32 %39 to double
  %118 = bitcast double %117 to i64
  %119 = and i64 %118, -134217728
  %120 = bitcast i64 %119 to double
  %121 = fsub double %117, %120
  %122 = fmul double %120, 0x3FE62E42F8000000
  %123 = fmul double %120, 0x3E4BE8E7BC000000
  %124 = fmul double %121, 0x3FE62E42F8000000
  %125 = fmul double %121, 0x3E4BE8E7BC000000
  %126 = insertelement <2 x double> undef, double %117, i32 0
  %127 = shufflevector <2 x double> %126, <2 x double> undef, <2 x i32> zeroinitializer
  %128 = fmul <2 x double> %127, <double 0x3FE62E42FEFA39EF, double 0x3C7ABC9E3B39803F>
  %129 = extractelement <2 x double> %128, i32 0
  %130 = fsub double %122, %129
  %131 = fadd double %123, %130
  %132 = fadd double %124, %131
  %133 = fadd double %125, %132
  %134 = fmul double %65, 2.000000e+00
  %135 = insertelement <2 x double> undef, double %134, i32 0
  %136 = insertelement <2 x double> %135, double %133, i32 1
  %137 = fadd <2 x double> %128, %136
  %138 = extractelement <2 x double> %137, i32 0
  %139 = fsub double %129, %138
  %140 = bitcast double %92 to i64
  %141 = and i64 %140, -134217728
  %142 = bitcast i64 %141 to double
  %143 = fsub double %92, %142
  %144 = insertelement <2 x double> undef, double %104, i32 0
  %145 = insertelement <2 x double> %144, double %65, i32 1
  %146 = insertelement <2 x double> %144, double %92, i32 1
  %147 = fmul <2 x double> %145, %146
  %148 = fmul double %90, %142
  %149 = fmul double %143, %90
  %150 = fmul double %91, %142
  %151 = fmul double %91, %143
  %152 = fmul double %92, %87
  %153 = fmul double %65, %102
  %154 = extractelement <2 x double> %147, i32 1
  %155 = fsub double %148, %154
  %156 = fadd double %149, %155
  %157 = fadd double %150, %156
  %158 = fadd double %151, %157
  %159 = fadd double %158, %152
  %160 = fadd double %159, %153
  %161 = bitcast double %154 to i64
  %162 = and i64 %161, -134217728
  %163 = bitcast i64 %162 to double
  %164 = fsub double %154, %163
  %165 = insertelement <2 x double> <double 0x3FE5555555555555, double undef>, double %87, i32 1
  %166 = shufflevector <2 x double> %147, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %167 = insertelement <2 x double> %166, double 2.000000e+00, i32 1
  %168 = fmul <2 x double> %165, %167
  %169 = fmul double %163, 0x3FE5555550000000
  %170 = fmul double %164, 0x3FE5555550000000
  %171 = fmul double %163, 0x3E45555554000000
  %172 = fmul double %164, 0x3E45555554000000
  %173 = extractelement <2 x double> %168, i32 0
  %174 = fsub double %169, %173
  %175 = fadd double %170, %174
  %176 = fadd double %171, %175
  %177 = fadd double %172, %176
  %178 = insertelement <2 x double> undef, double %138, i32 0
  %179 = insertelement <2 x double> %178, double %139, i32 1
  %180 = insertelement <2 x double> undef, double %173, i32 0
  %181 = insertelement <2 x double> %180, double %134, i32 1
  %182 = fadd <2 x double> %179, %181
  %183 = fsub <2 x double> %137, %182
  %184 = fadd <2 x double> %137, %182
  %185 = shufflevector <2 x double> %183, <2 x double> %184, <2 x i32> <i32 0, i32 3>
  %186 = fadd <2 x double> %168, %185
  %187 = extractelement <2 x double> %186, i32 0
  %188 = extractelement <2 x double> %186, i32 1
  %189 = fadd double %187, %188
  %190 = fmul double %92, %154
  %191 = fmul double %142, %163
  %192 = fmul double %143, %163
  %193 = fmul double %164, %142
  %194 = fmul double %143, %164
  %195 = insertelement <2 x double> undef, double %115, i32 0
  %196 = insertelement <2 x double> %195, double %160, i32 1
  %197 = fmul <2 x double> %146, %196
  %198 = insertelement <2 x double> <double 0x3FBDC2EC09E714D3, double undef>, double %102, i32 1
  %199 = fmul <2 x double> %198, %147
  %200 = fsub double %191, %190
  %201 = fadd double %192, %200
  %202 = fadd double %193, %201
  %203 = fadd double %194, %202
  %204 = insertelement <2 x double> undef, double %116, i32 0
  %205 = insertelement <2 x double> %204, double %203, i32 1
  %206 = fadd <2 x double> %205, %197
  %207 = fadd <2 x double> %199, %206
  %208 = bitcast double %190 to i64
  %209 = and i64 %208, -134217728
  %210 = bitcast i64 %209 to double
  %211 = fsub double %190, %210
  %212 = extractelement <2 x double> %207, i32 0
  %213 = bitcast double %212 to i64
  %214 = and i64 %213, -134217728
  %215 = bitcast i64 %214 to double
  %216 = fsub double %212, %215
  %217 = fmul double %190, %212
  %218 = insertelement <2 x double> <double 0x3C85F00000000000, double undef>, double %210, i32 1
  %219 = insertelement <2 x double> %166, double %215, i32 1
  %220 = fmul <2 x double> %218, %219
  %221 = insertelement <2 x double> <double 0x3FE5555555555555, double undef>, double %211, i32 1
  %222 = insertelement <2 x double> undef, double %160, i32 0
  %223 = insertelement <2 x double> %222, double %215, i32 1
  %224 = fmul <2 x double> %221, %223
  %225 = fmul double %216, %210
  %226 = fmul double %211, %216
  %227 = extractelement <2 x double> %207, i32 1
  %228 = fmul double %212, %227
  %229 = insertelement <2 x double> undef, double %177, i32 0
  %230 = insertelement <2 x double> %229, double %217, i32 1
  %231 = fadd <2 x double> %220, %230
  %232 = fsub <2 x double> %220, %230
  %233 = shufflevector <2 x double> %231, <2 x double> %232, <2 x i32> <i32 0, i32 3>
  %234 = fadd <2 x double> %233, %224
  %235 = insertelement <2 x double> undef, double %189, i32 0
  %236 = insertelement <2 x double> %235, double %225, i32 1
  %237 = fadd <2 x double> %236, %234
  %238 = extractelement <2 x double> %182, i32 0
  %239 = fadd double %238, %217
  %240 = fsub double %238, %239
  %241 = fadd double %217, %240
  %242 = insertelement <2 x double> undef, double %241, i32 0
  %243 = insertelement <2 x double> %242, double %226, i32 1
  %244 = fadd <2 x double> %243, %237
  %245 = extractelement <2 x double> %244, i32 1
  %246 = fadd double %245, %228
  %247 = extractelement <2 x double> %244, i32 0
  %248 = fadd double %247, %246
  %249 = bitcast double %239 to i64
  %250 = and i64 %249, -134217728
  %251 = bitcast i64 %250 to double
  %252 = fsub double %239, %251
  %253 = and i64 %11, -134217728
  %254 = bitcast i64 %253 to double
  %255 = fsub double %1, %254
  %256 = fmul double %239, %1
  %257 = fmul double %254, %251
  %258 = fmul double %252, %254
  %259 = fmul double %255, %251
  %260 = fmul double %255, %252
  %261 = fmul double %248, %1
  %262 = fsub double %257, %256
  %263 = fadd double %258, %262
  %264 = fadd double %259, %263
  %265 = fadd double %260, %264
  %266 = fadd double %265, %261
  %267 = fadd double %256, %266
  %268 = fmul double %267, 0x3FF71547652B82FE
  %269 = fcmp ogt double %268, 0.000000e+00
  %270 = select i1 %269, double 5.000000e-01, double -5.000000e-01
  %271 = fadd double %268, %270
  %272 = bitcast double %271 to i64
  %273 = fptosi double %271 to i32
  %274 = and i32 %273, 1
  %275 = zext i32 %274 to i64
  %276 = sub i64 %272, %275
  %277 = bitcast i64 %276 to double
  %278 = fptosi double %277 to i32
  %279 = sitofp i32 %278 to double
  %280 = icmp sgt i32 %278, 0
  %281 = select i1 %280, double 5.000000e-01, double -5.000000e-01
  %282 = fadd double %281, %279
  %283 = bitcast double %282 to i64
  %284 = fptosi double %282 to i32
  %285 = and i32 %284, 1
  %286 = zext i32 %285 to i64
  %287 = sub i64 %283, %286
  %288 = bitcast i64 %287 to double
  %289 = fptosi double %288 to i32
  %290 = fmul double %279, 0xBFE62E42FEFA3000
  %291 = fadd double %256, %290
  %292 = fsub double %291, %256
  %293 = fsub double %291, %292
  %294 = fsub double %256, %293
  %295 = fsub double %290, %292
  %296 = fadd double %295, %294
  %297 = fadd double %266, %296
  %298 = fmul double %279, 0xBD53DE6AF278ECE6
  %299 = fadd double %298, %291
  %300 = fsub double %299, %291
  %301 = fsub double %299, %300
  %302 = fsub double %291, %301
  %303 = fsub double %298, %300
  %304 = fadd double %303, %302
  %305 = fadd double %304, %297
  %306 = fadd double %299, %305
  %307 = fsub double %299, %306
  %308 = fadd double %305, %307
  %309 = fmul double %306, %306
  %310 = fmul double %309, %309
  %311 = fmul double %310, %310
  %312 = fmul double %306, 0x3E5AF559D51456B9
  %313 = fadd double %312, 0x3E928A8F696DB5AD
  %314 = fmul double %306, 0x3EC71DDFD27D265E
  %315 = fadd double %314, 0x3EFA0199EC6C491B
  %316 = fmul double %306, 0x3F2A01A01AE0C33D
  %317 = fadd double %316, 0x3F56C16C1828EC7B
  %318 = fmul double %309, %315
  %319 = fadd double %317, %318
  %320 = fmul double %306, 0x3F8111111110FB68
  %321 = fadd double %320, 0x3FA5555555550E90
  %322 = fmul double %306, 0x3FC5555555555558
  %323 = fadd double %322, 0x3FE0000000000009
  %324 = fmul double %309, %321
  %325 = fadd double %323, %324
  %326 = fmul double %310, %319
  %327 = fadd double %325, %326
  %328 = fmul double %313, %311
  %329 = fadd double %328, %327
  %330 = fadd double %306, 1.000000e+00
  %331 = fsub double 1.000000e+00, %330
  %332 = fadd double %306, %331
  %333 = fadd double %308, %332
  %334 = bitcast double %306 to i64
  %335 = and i64 %334, -134217728
  %336 = bitcast i64 %335 to double
  %337 = fsub double %306, %336
  %338 = fmul double %336, %336
  %339 = fadd double %336, %336
  %340 = fmul double %339, %337
  %341 = fmul double %337, %337
  %342 = fadd double %308, %308
  %343 = fmul double %306, %342
  %344 = fsub double %338, %309
  %345 = fadd double %344, %340
  %346 = fadd double %341, %345
  %347 = fadd double %343, %346
  %348 = bitcast double %309 to i64
  %349 = and i64 %348, -134217728
  %350 = bitcast i64 %349 to double
  %351 = fsub double %309, %350
  %352 = bitcast double %329 to i64
  %353 = and i64 %352, -134217728
  %354 = bitcast i64 %353 to double
  %355 = fsub double %329, %354
  %356 = fmul double %309, %329
  %357 = fmul double %350, %354
  %358 = fmul double %351, %354
  %359 = fmul double %355, %350
  %360 = fmul double %351, %355
  %361 = fmul double %329, %347
  %362 = fsub double %357, %356
  %363 = fadd double %358, %362
  %364 = fadd double %359, %363
  %365 = fadd double %360, %364
  %366 = fadd double %361, %365
  %367 = fadd double %330, %356
  %368 = fsub double %330, %367
  %369 = fadd double %356, %368
  %370 = fadd double %333, %369
  %371 = fadd double %370, %366
  %372 = fadd double %367, %371
  %373 = ashr i32 %289, 1
  %374 = add nsw i32 %373, 1023
  %375 = zext i32 %374 to i64
  %376 = shl i64 %375, 52
  %377 = bitcast i64 %376 to double
  %378 = fmul double %372, %377
  %379 = add i32 %289, 1023
  %380 = sub i32 %379, %373
  %381 = zext i32 %380 to i64
  %382 = shl i64 %381, 52
  %383 = bitcast i64 %382 to double
  %384 = fmul double %378, %383
  %385 = fcmp olt double %256, -1.000000e+03
  %386 = bitcast double %384 to i64
  %387 = select i1 %385, i64 4294967295, i64 0
  %388 = shl nuw i64 %387, 32
  %389 = or i64 %388, %387
  %390 = xor i64 %389, -1
  %391 = and i64 %386, %390
  %392 = bitcast i64 %391 to double
  %393 = fcmp ule double %256, 0x40862E42FE102C83
  %394 = select i1 %393, double %392, double 0x7FF0000000000000
  %395 = fcmp ule double %0, 0.000000e+00
  %396 = and i32 %8, 1
  %397 = icmp eq i32 %396, 0
  %398 = xor i1 %17, true
  %399 = or i1 %397, %398
  %400 = select i1 %399, double 1.000000e+00, double -1.000000e+00
  %401 = select i1 %15, double %400, double 0x7FF8000000000000
  %402 = select i1 %395, double %401, double 1.000000e+00
  %403 = fmul double %402, %394
  %404 = fadd double %20, -1.000000e+00
  %405 = bitcast double %404 to i64
  %406 = and i64 %11, -9223372036854775808
  %407 = xor i64 %406, %405
  %408 = bitcast i64 %407 to double
  %409 = fcmp une double %1, 0x7FF0000000000000
  %410 = fcmp une double %1, 0xFFF0000000000000
  %411 = fcmp olt double %408, 0.000000e+00
  %412 = fcmp une double %408, 0.000000e+00
  %413 = select i1 %412, i64 9218868437227405312, i64 4607182418800017408
  %414 = select i1 %411, i64 4294967295, i64 0
  %415 = shl nuw i64 %414, 32
  %416 = or i64 %415, %414
  %417 = xor i64 %416, -1
  %418 = and i64 %413, %417
  %419 = bitcast i64 %418 to double
  %420 = and i1 %410, %409
  %421 = select i1 %420, double %403, double %419
  %422 = fcmp oeq double %0, 0x7FF0000000000000
  %423 = fcmp oeq double %0, 0xFFF0000000000000
  %424 = or i1 %422, %423
  %425 = fcmp oeq double %0, 0.000000e+00
  %426 = or i1 %425, %424
  %427 = and i64 %18, -9223372036854775808
  %428 = or i64 %427, 4607182418800017408
  %429 = bitcast i64 %428 to double
  %430 = select i1 %399, double 1.000000e+00, double %429
  %431 = fsub double -0.000000e+00, %1
  %432 = select i1 %425, double %431, double %1
  %433 = fcmp olt double %432, 0.000000e+00
  %434 = select i1 %433, double 0.000000e+00, double 0x7FF0000000000000
  %435 = fmul double %434, %430
  %436 = select i1 %426, double %435, double %421
  %437 = fcmp uno double %1, %0
  %438 = bitcast double %436 to i64
  %439 = select i1 %437, i64 4294967295, i64 0
  %440 = shl nuw i64 %439, 32
  %441 = or i64 %440, %439
  %442 = or i64 %441, %438
  %443 = bitcast i64 %442 to double
  %444 = fcmp une double %1, 0.000000e+00
  %445 = fcmp une double %0, 1.000000e+00
  %446 = and i1 %445, %444
  %447 = select i1 %446, double %443, double 1.000000e+00
  ret double %447
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp ogt double %6, 0.000000e+00
  %8 = select i1 %7, double 5.000000e-01, double -5.000000e-01
  %9 = fadd double %6, %8
  %10 = bitcast double %9 to i64
  %11 = fptosi double %9 to i32
  %12 = and i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = sub i64 %10, %13
  %15 = bitcast i64 %14 to double
  %16 = fptosi double %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = icmp sgt i32 %16, 0
  %19 = select i1 %18, double 5.000000e-01, double -5.000000e-01
  %20 = fadd double %19, %17
  %21 = bitcast double %20 to i64
  %22 = fptosi double %20 to i32
  %23 = and i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = sub i64 %21, %24
  %26 = bitcast i64 %25 to double
  %27 = fptosi double %26 to i32
  %28 = fmul double %17, 0xBFE62E42FEFA3000
  %29 = fadd double %28, %4
  %30 = fsub double %29, %4
  %31 = fsub double %29, %30
  %32 = fsub double %4, %31
  %33 = fsub double %28, %30
  %34 = fadd double %33, %32
  %35 = fadd double %34, 0.000000e+00
  %36 = fmul double %17, 0xBD53DE6AF278ECE6
  %37 = fadd double %36, %29
  %38 = fsub double %37, %29
  %39 = fsub double %37, %38
  %40 = fsub double %29, %39
  %41 = fsub double %36, %38
  %42 = fadd double %41, %40
  %43 = fadd double %42, %35
  %44 = bitcast double %37 to i64
  %45 = and i64 %44, -134217728
  %46 = bitcast i64 %45 to double
  %47 = fsub double %37, %46
  %48 = fmul double %37, %37
  %49 = fmul double %46, %46
  %50 = fadd double %46, %46
  %51 = fmul double %50, %47
  %52 = fmul double %47, %47
  %53 = fadd double %43, %43
  %54 = fmul double %37, %53
  %55 = fsub double %49, %48
  %56 = fadd double %55, %51
  %57 = fadd double %52, %56
  %58 = fadd double %54, %57
  %59 = bitcast double %48 to i64
  %60 = and i64 %59, -134217728
  %61 = bitcast i64 %60 to double
  %62 = fsub double %48, %61
  %63 = fmul double %48, %48
  %64 = fmul double %61, %61
  %65 = fadd double %61, %61
  %66 = fmul double %65, %62
  %67 = fmul double %62, %62
  %68 = fadd double %58, %58
  %69 = fmul double %48, %68
  %70 = fsub double %64, %63
  %71 = fadd double %70, %66
  %72 = fadd double %67, %71
  %73 = fadd double %72, %69
  %74 = fmul double %63, %63
  %75 = fmul double %37, 0x3DE60632A887194C
  %76 = fadd double %75, 0x3E21F8EAF54829DC
  %77 = fmul double %37, 0x3E5AE652E8103AB6
  %78 = fadd double %77, 0x3E927E4C95A9765C
  %79 = fmul double %37, 0x3EC71DE3A11D7656
  %80 = fadd double %79, 0x3EFA01A01AF6F0B7
  %81 = fmul double %48, %78
  %82 = fadd double %80, %81
  %83 = fmul double %37, 0x3F2A01A01A02D002
  %84 = fadd double %83, 0x3F56C16C16C145CC
  %85 = fmul double %37, 0x3F81111111111119
  %86 = fadd double %85, 0x3FA555555555555A
  %87 = fmul double %48, %84
  %88 = fadd double %86, %87
  %89 = fmul double %63, %82
  %90 = fmul double %37, 0x3FC5555555555555
  %91 = fmul double %46, 0x3FC5555550000000
  %92 = fmul double %47, 0x3FC5555550000000
  %93 = fmul double %46, 0x3E25555554000000
  %94 = fmul double %47, 0x3E25555554000000
  %95 = fmul double %43, 0x3FC5555555555555
  %96 = fsub double %91, %90
  %97 = fadd double %92, %96
  %98 = fadd double %93, %97
  %99 = fadd double %94, %98
  %100 = fadd double %95, %99
  %101 = fadd double %90, 5.000000e-01
  %102 = fsub double 5.000000e-01, %101
  %103 = fadd double %90, %102
  %104 = fadd double %103, %100
  %105 = bitcast double %101 to i64
  %106 = and i64 %105, -134217728
  %107 = bitcast i64 %106 to double
  %108 = fsub double %101, %107
  %109 = insertelement <2 x double> undef, double %76, i32 0
  %110 = insertelement <2 x double> %109, double %37, i32 1
  %111 = insertelement <2 x double> undef, double %74, i32 0
  %112 = insertelement <2 x double> %111, double %101, i32 1
  %113 = fmul <2 x double> %110, %112
  %114 = fmul double %46, %107
  %115 = fmul double %108, %46
  %116 = fmul double %47, %107
  %117 = fmul double %47, %108
  %118 = fmul double %101, %43
  %119 = fmul double %37, %104
  %120 = extractelement <2 x double> %113, i32 1
  %121 = fsub double %114, %120
  %122 = fadd double %115, %121
  %123 = fadd double %116, %122
  %124 = fadd double %117, %123
  %125 = fadd double %118, %124
  %126 = fadd double %119, %125
  %127 = fadd double %120, 1.000000e+00
  %128 = insertelement <2 x double> <double undef, double 1.000000e+00>, double %88, i32 0
  %129 = insertelement <2 x double> undef, double %89, i32 0
  %130 = insertelement <2 x double> %129, double %127, i32 1
  %131 = fadd <2 x double> %128, %130
  %132 = fsub <2 x double> %128, %130
  %133 = shufflevector <2 x double> %131, <2 x double> %132, <2 x i32> <i32 0, i32 3>
  %134 = fadd <2 x double> %113, %133
  %135 = bitcast double %127 to i64
  %136 = and i64 %135, -134217728
  %137 = bitcast i64 %136 to double
  %138 = fsub double %127, %137
  %139 = fmul double %37, %127
  %140 = fmul double %46, %137
  %141 = fmul double %138, %46
  %142 = fsub double %140, %139
  %143 = fadd double %141, %142
  %144 = fadd double %139, 1.000000e+00
  %145 = fsub double 1.000000e+00, %144
  %146 = fadd double %139, %145
  %147 = bitcast double %63 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %63, %149
  %151 = extractelement <2 x double> %134, i32 0
  %152 = bitcast double %151 to i64
  %153 = and i64 %152, -134217728
  %154 = bitcast i64 %153 to double
  %155 = insertelement <2 x double> undef, double %154, i32 0
  %156 = insertelement <2 x double> %155, double %126, i32 1
  %157 = fsub <2 x double> %134, %156
  %158 = fadd <2 x double> %134, %156
  %159 = shufflevector <2 x double> %157, <2 x double> %158, <2 x i32> <i32 0, i32 3>
  %160 = fmul double %63, %151
  %161 = insertelement <2 x double> undef, double %149, i32 0
  %162 = insertelement <2 x double> %161, double %47, i32 1
  %163 = insertelement <2 x double> %155, double %137, i32 1
  %164 = fmul <2 x double> %162, %163
  %165 = insertelement <2 x double> undef, double %150, i32 0
  %166 = insertelement <2 x double> %165, double %47, i32 1
  %167 = insertelement <2 x double> %155, double %138, i32 1
  %168 = fmul <2 x double> %166, %167
  %169 = extractelement <2 x double> %157, i32 0
  %170 = insertelement <2 x double> undef, double %169, i32 0
  %171 = insertelement <2 x double> %170, double %127, i32 1
  %172 = insertelement <2 x double> %161, double %43, i32 1
  %173 = fmul <2 x double> %171, %172
  %174 = insertelement <2 x double> %165, double %37, i32 1
  %175 = fmul <2 x double> %174, %159
  %176 = fmul double %151, %73
  %177 = insertelement <2 x double> undef, double %160, i32 0
  %178 = insertelement <2 x double> %177, double %143, i32 1
  %179 = fsub <2 x double> %164, %178
  %180 = fadd <2 x double> %164, %178
  %181 = shufflevector <2 x double> %179, <2 x double> %180, <2 x i32> <i32 0, i32 3>
  %182 = fadd <2 x double> %168, %181
  %183 = fadd <2 x double> %173, %182
  %184 = fadd <2 x double> %175, %183
  %185 = insertelement <2 x double> undef, double %176, i32 0
  %186 = insertelement <2 x double> %185, double %146, i32 1
  %187 = fadd <2 x double> %186, %184
  %188 = fadd double %144, %160
  %189 = fsub double %144, %188
  %190 = fadd double %160, %189
  %191 = extractelement <2 x double> %187, i32 1
  %192 = fadd double %190, %191
  %193 = extractelement <2 x double> %187, i32 0
  %194 = fadd double %193, %192
  %195 = ashr i32 %27, 1
  %196 = add nsw i32 %195, 1023
  %197 = zext i32 %196 to i64
  %198 = shl i64 %197, 52
  %199 = bitcast i64 %198 to double
  %200 = fmul double %188, %199
  %201 = add i32 %27, 1023
  %202 = sub i32 %201, %195
  %203 = zext i32 %202 to i64
  %204 = shl i64 %203, 52
  %205 = bitcast i64 %204 to double
  %206 = fmul double %200, %205
  %207 = fmul double %194, %199
  %208 = fmul double %207, %205
  %209 = fcmp olt double %4, -1.000000e+03
  %210 = bitcast double %206 to i64
  %211 = select i1 %209, i64 4294967295, i64 0
  %212 = shl nuw i64 %211, 32
  %213 = or i64 %212, %211
  %214 = xor i64 %213, -1
  %215 = and i64 %210, %214
  %216 = bitcast i64 %215 to double
  %217 = bitcast double %208 to i64
  %218 = and i64 %217, %214
  %219 = bitcast i64 %218 to double
  %220 = fdiv double 1.000000e+00, %216
  %221 = and i64 %215, -134217728
  %222 = bitcast i64 %221 to double
  %223 = fsub double %216, %222
  %224 = bitcast double %220 to i64
  %225 = and i64 %224, -134217728
  %226 = bitcast i64 %225 to double
  %227 = fsub double %220, %226
  %228 = fmul double %222, %226
  %229 = fmul double %227, %222
  %230 = fmul double %223, %226
  %231 = fmul double %223, %227
  %232 = fmul double %220, %219
  %233 = fsub double 1.000000e+00, %228
  %234 = fsub double %233, %229
  %235 = fsub double %234, %230
  %236 = fsub double %235, %231
  %237 = fsub double %236, %232
  %238 = fmul double %220, %237
  %239 = fsub double %216, %220
  %240 = fsub double %216, %239
  %241 = fsub double %240, %220
  %242 = fadd double %241, %219
  %243 = fsub double %242, %238
  %244 = fadd double %239, %243
  %245 = fmul double %244, 5.000000e-01
  %246 = fcmp ule double %4, 7.100000e+02
  %247 = fcmp ord double %245, 0.000000e+00
  %248 = and i1 %246, %247
  %249 = bitcast double %245 to i64
  %250 = select i1 %248, i64 %249, i64 9218868437227405312
  %251 = and i64 %2, -9223372036854775808
  %252 = xor i64 %250, %251
  %253 = fcmp uno double %0, 0.000000e+00
  %254 = select i1 %253, i64 4294967295, i64 0
  %255 = shl nuw i64 %254, 32
  %256 = or i64 %255, %254
  %257 = or i64 %256, %252
  %258 = bitcast i64 %257 to double
  ret double %258
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_coshd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp ogt double %6, 0.000000e+00
  %8 = select i1 %7, double 5.000000e-01, double -5.000000e-01
  %9 = fadd double %6, %8
  %10 = bitcast double %9 to i64
  %11 = fptosi double %9 to i32
  %12 = and i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = sub i64 %10, %13
  %15 = bitcast i64 %14 to double
  %16 = fptosi double %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = icmp sgt i32 %16, 0
  %19 = select i1 %18, double 5.000000e-01, double -5.000000e-01
  %20 = fadd double %19, %17
  %21 = bitcast double %20 to i64
  %22 = fptosi double %20 to i32
  %23 = and i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = sub i64 %21, %24
  %26 = bitcast i64 %25 to double
  %27 = fptosi double %26 to i32
  %28 = fmul double %17, 0xBFE62E42FEFA3000
  %29 = fadd double %28, %4
  %30 = fsub double %29, %4
  %31 = fsub double %29, %30
  %32 = fsub double %4, %31
  %33 = fsub double %28, %30
  %34 = fadd double %33, %32
  %35 = fadd double %34, 0.000000e+00
  %36 = fmul double %17, 0xBD53DE6AF278ECE6
  %37 = fadd double %36, %29
  %38 = fsub double %37, %29
  %39 = fsub double %37, %38
  %40 = fsub double %29, %39
  %41 = fsub double %36, %38
  %42 = fadd double %41, %40
  %43 = fadd double %42, %35
  %44 = bitcast double %37 to i64
  %45 = and i64 %44, -134217728
  %46 = bitcast i64 %45 to double
  %47 = fsub double %37, %46
  %48 = fmul double %37, %37
  %49 = fmul double %46, %46
  %50 = fadd double %46, %46
  %51 = fmul double %50, %47
  %52 = fmul double %47, %47
  %53 = fadd double %43, %43
  %54 = fmul double %37, %53
  %55 = fsub double %49, %48
  %56 = fadd double %55, %51
  %57 = fadd double %52, %56
  %58 = fadd double %54, %57
  %59 = bitcast double %48 to i64
  %60 = and i64 %59, -134217728
  %61 = bitcast i64 %60 to double
  %62 = fsub double %48, %61
  %63 = fmul double %48, %48
  %64 = fmul double %61, %61
  %65 = fadd double %61, %61
  %66 = fmul double %65, %62
  %67 = fmul double %62, %62
  %68 = fadd double %58, %58
  %69 = fmul double %48, %68
  %70 = fsub double %64, %63
  %71 = fadd double %70, %66
  %72 = fadd double %67, %71
  %73 = fadd double %72, %69
  %74 = fmul double %63, %63
  %75 = fmul double %37, 0x3DE60632A887194C
  %76 = fadd double %75, 0x3E21F8EAF54829DC
  %77 = fmul double %37, 0x3E5AE652E8103AB6
  %78 = fadd double %77, 0x3E927E4C95A9765C
  %79 = fmul double %37, 0x3EC71DE3A11D7656
  %80 = fadd double %79, 0x3EFA01A01AF6F0B7
  %81 = fmul double %48, %78
  %82 = fadd double %80, %81
  %83 = fmul double %37, 0x3F2A01A01A02D002
  %84 = fadd double %83, 0x3F56C16C16C145CC
  %85 = fmul double %37, 0x3F81111111111119
  %86 = fadd double %85, 0x3FA555555555555A
  %87 = fmul double %48, %84
  %88 = fadd double %86, %87
  %89 = fmul double %63, %82
  %90 = fmul double %37, 0x3FC5555555555555
  %91 = fmul double %46, 0x3FC5555550000000
  %92 = fmul double %47, 0x3FC5555550000000
  %93 = fmul double %46, 0x3E25555554000000
  %94 = fmul double %47, 0x3E25555554000000
  %95 = fmul double %43, 0x3FC5555555555555
  %96 = fsub double %91, %90
  %97 = fadd double %92, %96
  %98 = fadd double %93, %97
  %99 = fadd double %94, %98
  %100 = fadd double %95, %99
  %101 = fadd double %90, 5.000000e-01
  %102 = fsub double 5.000000e-01, %101
  %103 = fadd double %90, %102
  %104 = fadd double %103, %100
  %105 = bitcast double %101 to i64
  %106 = and i64 %105, -134217728
  %107 = bitcast i64 %106 to double
  %108 = fsub double %101, %107
  %109 = insertelement <2 x double> undef, double %76, i32 0
  %110 = insertelement <2 x double> %109, double %37, i32 1
  %111 = insertelement <2 x double> undef, double %74, i32 0
  %112 = insertelement <2 x double> %111, double %101, i32 1
  %113 = fmul <2 x double> %110, %112
  %114 = fmul double %46, %107
  %115 = fmul double %108, %46
  %116 = fmul double %47, %107
  %117 = fmul double %47, %108
  %118 = fmul double %101, %43
  %119 = fmul double %37, %104
  %120 = extractelement <2 x double> %113, i32 1
  %121 = fsub double %114, %120
  %122 = fadd double %115, %121
  %123 = fadd double %116, %122
  %124 = fadd double %117, %123
  %125 = fadd double %118, %124
  %126 = fadd double %119, %125
  %127 = fadd double %120, 1.000000e+00
  %128 = insertelement <2 x double> <double undef, double 1.000000e+00>, double %88, i32 0
  %129 = insertelement <2 x double> undef, double %89, i32 0
  %130 = insertelement <2 x double> %129, double %127, i32 1
  %131 = fadd <2 x double> %128, %130
  %132 = fsub <2 x double> %128, %130
  %133 = shufflevector <2 x double> %131, <2 x double> %132, <2 x i32> <i32 0, i32 3>
  %134 = fadd <2 x double> %113, %133
  %135 = bitcast double %127 to i64
  %136 = and i64 %135, -134217728
  %137 = bitcast i64 %136 to double
  %138 = fsub double %127, %137
  %139 = fmul double %37, %127
  %140 = fmul double %46, %137
  %141 = fmul double %138, %46
  %142 = fsub double %140, %139
  %143 = fadd double %141, %142
  %144 = fadd double %139, 1.000000e+00
  %145 = fsub double 1.000000e+00, %144
  %146 = fadd double %139, %145
  %147 = bitcast double %63 to i64
  %148 = and i64 %147, -134217728
  %149 = bitcast i64 %148 to double
  %150 = fsub double %63, %149
  %151 = extractelement <2 x double> %134, i32 0
  %152 = bitcast double %151 to i64
  %153 = and i64 %152, -134217728
  %154 = bitcast i64 %153 to double
  %155 = insertelement <2 x double> undef, double %154, i32 0
  %156 = insertelement <2 x double> %155, double %126, i32 1
  %157 = fsub <2 x double> %134, %156
  %158 = fadd <2 x double> %134, %156
  %159 = shufflevector <2 x double> %157, <2 x double> %158, <2 x i32> <i32 0, i32 3>
  %160 = fmul double %63, %151
  %161 = insertelement <2 x double> undef, double %149, i32 0
  %162 = insertelement <2 x double> %161, double %47, i32 1
  %163 = insertelement <2 x double> %155, double %137, i32 1
  %164 = fmul <2 x double> %162, %163
  %165 = insertelement <2 x double> undef, double %150, i32 0
  %166 = insertelement <2 x double> %165, double %47, i32 1
  %167 = insertelement <2 x double> %155, double %138, i32 1
  %168 = fmul <2 x double> %166, %167
  %169 = extractelement <2 x double> %157, i32 0
  %170 = insertelement <2 x double> undef, double %169, i32 0
  %171 = insertelement <2 x double> %170, double %127, i32 1
  %172 = insertelement <2 x double> %161, double %43, i32 1
  %173 = fmul <2 x double> %171, %172
  %174 = insertelement <2 x double> %165, double %37, i32 1
  %175 = fmul <2 x double> %174, %159
  %176 = fmul double %151, %73
  %177 = insertelement <2 x double> undef, double %160, i32 0
  %178 = insertelement <2 x double> %177, double %143, i32 1
  %179 = fsub <2 x double> %164, %178
  %180 = fadd <2 x double> %164, %178
  %181 = shufflevector <2 x double> %179, <2 x double> %180, <2 x i32> <i32 0, i32 3>
  %182 = fadd <2 x double> %168, %181
  %183 = fadd <2 x double> %173, %182
  %184 = fadd <2 x double> %175, %183
  %185 = insertelement <2 x double> undef, double %176, i32 0
  %186 = insertelement <2 x double> %185, double %146, i32 1
  %187 = fadd <2 x double> %186, %184
  %188 = fadd double %144, %160
  %189 = fsub double %144, %188
  %190 = fadd double %160, %189
  %191 = extractelement <2 x double> %187, i32 1
  %192 = fadd double %190, %191
  %193 = extractelement <2 x double> %187, i32 0
  %194 = fadd double %193, %192
  %195 = ashr i32 %27, 1
  %196 = add nsw i32 %195, 1023
  %197 = zext i32 %196 to i64
  %198 = shl i64 %197, 52
  %199 = bitcast i64 %198 to double
  %200 = fmul double %188, %199
  %201 = add i32 %27, 1023
  %202 = sub i32 %201, %195
  %203 = zext i32 %202 to i64
  %204 = shl i64 %203, 52
  %205 = bitcast i64 %204 to double
  %206 = fmul double %200, %205
  %207 = fmul double %194, %199
  %208 = fmul double %207, %205
  %209 = fcmp olt double %4, -1.000000e+03
  %210 = bitcast double %206 to i64
  %211 = select i1 %209, i64 4294967295, i64 0
  %212 = shl nuw i64 %211, 32
  %213 = or i64 %212, %211
  %214 = xor i64 %213, -1
  %215 = and i64 %210, %214
  %216 = bitcast i64 %215 to double
  %217 = bitcast double %208 to i64
  %218 = and i64 %217, %214
  %219 = bitcast i64 %218 to double
  %220 = fdiv double 1.000000e+00, %216
  %221 = and i64 %215, -134217728
  %222 = bitcast i64 %221 to double
  %223 = fsub double %216, %222
  %224 = bitcast double %220 to i64
  %225 = and i64 %224, -134217728
  %226 = bitcast i64 %225 to double
  %227 = fsub double %220, %226
  %228 = fmul double %222, %226
  %229 = fmul double %227, %222
  %230 = fmul double %223, %226
  %231 = fmul double %223, %227
  %232 = fmul double %220, %219
  %233 = fsub double 1.000000e+00, %228
  %234 = fsub double %233, %229
  %235 = fsub double %234, %230
  %236 = fsub double %235, %231
  %237 = fsub double %236, %232
  %238 = fmul double %220, %237
  %239 = fadd double %220, %216
  %240 = fsub double %216, %239
  %241 = fadd double %220, %240
  %242 = fadd double %241, %219
  %243 = fadd double %242, %238
  %244 = fadd double %239, %243
  %245 = fmul double %244, 5.000000e-01
  %246 = fcmp ule double %4, 7.100000e+02
  %247 = fcmp ord double %245, 0.000000e+00
  %248 = and i1 %246, %247
  %249 = fcmp uno double %0, 0.000000e+00
  %250 = bitcast double %245 to i64
  %251 = select i1 %248, i64 %250, i64 9218868437227405312
  %252 = select i1 %249, i64 4294967295, i64 0
  %253 = shl nuw i64 %252, 32
  %254 = or i64 %253, %252
  %255 = or i64 %254, %251
  %256 = bitcast i64 %255 to double
  ret double %256
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_tanhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 0.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp ogt double %6, 0.000000e+00
  %8 = select i1 %7, double 5.000000e-01, double -5.000000e-01
  %9 = fadd double %6, %8
  %10 = bitcast double %9 to i64
  %11 = fptosi double %9 to i32
  %12 = and i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = sub i64 %10, %13
  %15 = bitcast i64 %14 to double
  %16 = fptosi double %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = icmp sgt i32 %16, 0
  %19 = select i1 %18, double 5.000000e-01, double -5.000000e-01
  %20 = fadd double %19, %17
  %21 = bitcast double %20 to i64
  %22 = fptosi double %20 to i32
  %23 = and i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = sub i64 %21, %24
  %26 = bitcast i64 %25 to double
  %27 = fptosi double %26 to i32
  %28 = fmul double %17, 0xBFE62E42FEFA3000
  %29 = fadd double %28, %4
  %30 = fsub double %29, %4
  %31 = fsub double %29, %30
  %32 = fsub double %4, %31
  %33 = fsub double %28, %30
  %34 = fadd double %33, %32
  %35 = fadd double %34, 0.000000e+00
  %36 = fmul double %17, 0xBD53DE6AF278ECE6
  %37 = fadd double %36, %29
  %38 = fsub double %37, %29
  %39 = fsub double %37, %38
  %40 = fsub double %29, %39
  %41 = fsub double %36, %38
  %42 = fadd double %41, %40
  %43 = fadd double %42, %35
  %44 = bitcast double %37 to i64
  %45 = and i64 %44, -134217728
  %46 = bitcast i64 %45 to double
  %47 = fsub double %37, %46
  %48 = fmul double %37, %37
  %49 = fmul double %46, %46
  %50 = fadd double %46, %46
  %51 = fmul double %50, %47
  %52 = fmul double %47, %47
  %53 = fadd double %43, %43
  %54 = fmul double %37, %53
  %55 = fsub double %49, %48
  %56 = fadd double %55, %51
  %57 = fadd double %52, %56
  %58 = fadd double %54, %57
  %59 = bitcast double %48 to i64
  %60 = and i64 %59, -134217728
  %61 = bitcast i64 %60 to double
  %62 = fsub double %48, %61
  %63 = fmul double %48, %48
  %64 = fmul double %61, %61
  %65 = fadd double %61, %61
  %66 = fmul double %65, %62
  %67 = fmul double %62, %62
  %68 = fadd double %58, %58
  %69 = fmul double %48, %68
  %70 = fsub double %64, %63
  %71 = fadd double %70, %66
  %72 = fadd double %67, %71
  %73 = fadd double %72, %69
  %74 = fmul double %63, %63
  %75 = fmul double %37, 0x3DE60632A887194C
  %76 = fadd double %75, 0x3E21F8EAF54829DC
  %77 = fmul double %37, 0x3E5AE652E8103AB6
  %78 = fadd double %77, 0x3E927E4C95A9765C
  %79 = fmul double %37, 0x3EC71DE3A11D7656
  %80 = fadd double %79, 0x3EFA01A01AF6F0B7
  %81 = fmul double %48, %78
  %82 = fadd double %80, %81
  %83 = fmul double %37, 0x3F2A01A01A02D002
  %84 = fadd double %83, 0x3F56C16C16C145CC
  %85 = fmul double %37, 0x3F81111111111119
  %86 = fadd double %85, 0x3FA555555555555A
  %87 = fmul double %48, %84
  %88 = fadd double %86, %87
  %89 = fmul double %63, %82
  %90 = fadd double %88, %89
  %91 = fmul double %76, %74
  %92 = fadd double %91, %90
  %93 = fmul double %37, 0x3FC5555555555555
  %94 = fmul double %46, 0x3FC5555550000000
  %95 = fmul double %47, 0x3FC5555550000000
  %96 = fmul double %46, 0x3E25555554000000
  %97 = fmul double %47, 0x3E25555554000000
  %98 = fmul double %43, 0x3FC5555555555555
  %99 = fsub double %94, %93
  %100 = fadd double %95, %99
  %101 = fadd double %96, %100
  %102 = fadd double %97, %101
  %103 = fadd double %98, %102
  %104 = fadd double %93, 5.000000e-01
  %105 = fsub double 5.000000e-01, %104
  %106 = fadd double %93, %105
  %107 = fadd double %106, %103
  %108 = bitcast double %104 to i64
  %109 = and i64 %108, -134217728
  %110 = bitcast i64 %109 to double
  %111 = fsub double %104, %110
  %112 = fmul double %37, %104
  %113 = fmul double %46, %110
  %114 = fmul double %111, %46
  %115 = fmul double %47, %110
  %116 = fmul double %47, %111
  %117 = fmul double %104, %43
  %118 = fmul double %37, %107
  %119 = fsub double %113, %112
  %120 = fadd double %114, %119
  %121 = fadd double %115, %120
  %122 = fadd double %116, %121
  %123 = fadd double %117, %122
  %124 = fadd double %118, %123
  %125 = fadd double %112, 1.000000e+00
  %126 = fsub double 1.000000e+00, %125
  %127 = fadd double %112, %126
  %128 = fadd double %127, %124
  %129 = bitcast double %125 to i64
  %130 = and i64 %129, -134217728
  %131 = bitcast i64 %130 to double
  %132 = fsub double %125, %131
  %133 = fmul double %37, %125
  %134 = fmul double %46, %131
  %135 = fmul double %132, %46
  %136 = fmul double %47, %131
  %137 = fmul double %47, %132
  %138 = fmul double %125, %43
  %139 = fmul double %37, %128
  %140 = fsub double %134, %133
  %141 = fadd double %135, %140
  %142 = fadd double %136, %141
  %143 = fadd double %137, %142
  %144 = fadd double %138, %143
  %145 = fadd double %144, %139
  %146 = fadd double %133, 1.000000e+00
  %147 = fsub double 1.000000e+00, %146
  %148 = fadd double %133, %147
  %149 = fadd double %148, %145
  %150 = bitcast double %63 to i64
  %151 = and i64 %150, -134217728
  %152 = bitcast i64 %151 to double
  %153 = fsub double %63, %152
  %154 = bitcast double %92 to i64
  %155 = and i64 %154, -134217728
  %156 = bitcast i64 %155 to double
  %157 = fsub double %92, %156
  %158 = fmul double %63, %92
  %159 = fmul double %152, %156
  %160 = fmul double %153, %156
  %161 = fmul double %157, %152
  %162 = fmul double %153, %157
  %163 = fmul double %92, %73
  %164 = fsub double %159, %158
  %165 = fadd double %160, %164
  %166 = fadd double %161, %165
  %167 = fadd double %162, %166
  %168 = fadd double %163, %167
  %169 = fadd double %146, %158
  %170 = fsub double %146, %169
  %171 = fadd double %158, %170
  %172 = fadd double %171, %149
  %173 = fadd double %168, %172
  %174 = ashr i32 %27, 1
  %175 = add nsw i32 %174, 1023
  %176 = zext i32 %175 to i64
  %177 = shl i64 %176, 52
  %178 = bitcast i64 %177 to double
  %179 = fmul double %169, %178
  %180 = add i32 %27, 1023
  %181 = sub i32 %180, %174
  %182 = zext i32 %181 to i64
  %183 = shl i64 %182, 52
  %184 = bitcast i64 %183 to double
  %185 = fmul double %179, %184
  %186 = fmul double %173, %178
  %187 = fmul double %186, %184
  %188 = fcmp olt double %4, -1.000000e+03
  %189 = bitcast double %185 to i64
  %190 = select i1 %188, i64 4294967295, i64 0
  %191 = shl nuw i64 %190, 32
  %192 = or i64 %191, %190
  %193 = xor i64 %192, -1
  %194 = and i64 %189, %193
  %195 = bitcast i64 %194 to double
  %196 = bitcast double %187 to i64
  %197 = and i64 %196, %193
  %198 = bitcast i64 %197 to double
  %199 = fdiv double 1.000000e+00, %195
  %200 = and i64 %194, -134217728
  %201 = bitcast i64 %200 to double
  %202 = fsub double %195, %201
  %203 = bitcast double %199 to i64
  %204 = and i64 %203, -134217728
  %205 = bitcast i64 %204 to double
  %206 = fsub double %199, %205
  %207 = fmul double %201, %205
  %208 = fmul double %206, %201
  %209 = fmul double %202, %205
  %210 = fmul double %202, %206
  %211 = fmul double %199, %198
  %212 = fsub double 1.000000e+00, %207
  %213 = fsub double %212, %208
  %214 = fsub double %213, %209
  %215 = fsub double %214, %210
  %216 = fsub double %215, %211
  %217 = fmul double %199, %216
  %218 = fsub double -0.000000e+00, %199
  %219 = insertelement <2 x double> undef, double %195, i32 0
  %220 = insertelement <2 x double> %219, double %199, i32 1
  %221 = insertelement <2 x double> undef, double %199, i32 0
  %222 = insertelement <2 x double> %221, double %195, i32 1
  %223 = fsub <2 x double> %220, %222
  %224 = fadd <2 x double> %220, %222
  %225 = shufflevector <2 x double> %223, <2 x double> %224, <2 x i32> <i32 0, i32 3>
  %226 = shufflevector <2 x double> %219, <2 x double> undef, <2 x i32> zeroinitializer
  %227 = fsub <2 x double> %225, %226
  %228 = fsub <2 x double> %225, %227
  %229 = fsub <2 x double> %226, %228
  %230 = insertelement <2 x double> undef, double %218, i32 0
  %231 = insertelement <2 x double> %230, double %199, i32 1
  %232 = fsub <2 x double> %231, %227
  %233 = fadd <2 x double> %232, %229
  %234 = insertelement <2 x double> undef, double %198, i32 0
  %235 = insertelement <2 x double> %234, double %217, i32 1
  %236 = insertelement <2 x double> undef, double %217, i32 0
  %237 = insertelement <2 x double> %236, double %198, i32 1
  %238 = fsub <2 x double> %235, %237
  %239 = fadd <2 x double> %235, %237
  %240 = shufflevector <2 x double> %238, <2 x double> %239, <2 x i32> <i32 0, i32 3>
  %241 = fadd <2 x double> %233, %240
  %242 = extractelement <2 x double> %224, i32 1
  %243 = fdiv double 1.000000e+00, %242
  %244 = bitcast double %242 to i64
  %245 = and i64 %244, -134217728
  %246 = bitcast i64 %245 to double
  %247 = fsub double %242, %246
  %248 = bitcast double %243 to i64
  %249 = and i64 %248, -134217728
  %250 = bitcast i64 %249 to double
  %251 = fsub double %243, %250
  %252 = extractelement <2 x double> %223, i32 0
  %253 = bitcast double %252 to i64
  %254 = and i64 %253, -134217728
  %255 = bitcast i64 %254 to double
  %256 = fsub double %252, %255
  %257 = fmul double %252, %243
  %258 = fmul double %255, %250
  %259 = fsub double %258, %257
  %260 = fmul double %251, %255
  %261 = fmul double %256, %250
  %262 = fmul double %256, %251
  %263 = fmul double %246, %250
  %264 = fmul double %251, %246
  %265 = fmul double %247, %250
  %266 = fsub double 1.000000e+00, %263
  %267 = fsub double %266, %264
  %268 = fsub double %267, %265
  %269 = fadd double %259, %260
  %270 = fadd double %261, %269
  %271 = fadd double %262, %270
  %272 = insertelement <2 x double> undef, double %247, i32 0
  %273 = insertelement <2 x double> %272, double %257, i32 1
  %274 = insertelement <2 x double> undef, double %251, i32 0
  %275 = shufflevector <2 x double> %274, <2 x double> %241, <2 x i32> <i32 0, i32 3>
  %276 = fmul <2 x double> %273, %275
  %277 = insertelement <2 x double> undef, double %268, i32 0
  %278 = shufflevector <2 x double> %277, <2 x double> %241, <2 x i32> <i32 0, i32 2>
  %279 = fsub <2 x double> %278, %276
  %280 = insertelement <2 x double> undef, double %257, i32 0
  %281 = insertelement <2 x double> %280, double %243, i32 1
  %282 = fmul <2 x double> %281, %279
  %283 = extractelement <2 x double> %282, i32 0
  %284 = fadd double %271, %283
  %285 = extractelement <2 x double> %282, i32 1
  %286 = fadd double %284, %285
  %287 = fadd double %257, %286
  %288 = fcmp ule double %4, 0x4032B70887229E90
  %289 = fcmp ord double %287, 0.000000e+00
  %290 = and i1 %288, %289
  %291 = bitcast double %287 to i64
  %292 = select i1 %290, i64 %291, i64 4607182418800017408
  %293 = and i64 %2, -9223372036854775808
  %294 = xor i64 %292, %293
  %295 = fcmp uno double %0, 0.000000e+00
  %296 = select i1 %295, i64 4294967295, i64 0
  %297 = shl nuw i64 %296, 32
  %298 = or i64 %297, %296
  %299 = or i64 %298, %294
  %300 = bitcast i64 %299 to double
  ret double %300
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sinhd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp ogt double %5, 0.000000e+00
  %7 = select i1 %6, double 5.000000e-01, double -5.000000e-01
  %8 = fadd double %5, %7
  %9 = bitcast double %8 to i64
  %10 = fptosi double %8 to i32
  %11 = and i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = sub i64 %9, %12
  %14 = bitcast i64 %13 to double
  %15 = fptosi double %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = icmp sgt i32 %15, 0
  %18 = select i1 %17, double 5.000000e-01, double -5.000000e-01
  %19 = fadd double %18, %16
  %20 = bitcast double %19 to i64
  %21 = fptosi double %19 to i32
  %22 = and i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = sub i64 %20, %23
  %25 = bitcast i64 %24 to double
  %26 = fptosi double %25 to i32
  %27 = fmul double %16, 0x3FE62E42FEFA3000
  %28 = fsub double %4, %27
  %29 = fmul double %16, 0x3D53DE6AF278ECE6
  %30 = fsub double %28, %29
  %31 = fmul double %30, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %30, 0x3E927E52E0FCD573
  %35 = fadd double %34, 0x3EC71DDF1629E6CE
  %36 = fmul double %30, 0x3EFA01A01780879E
  %37 = fadd double %36, 0x3F2A01A01B3603F5
  %38 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %31, i32 1
  %39 = insertelement <2 x double> undef, double %30, i32 0
  %40 = insertelement <2 x double> %39, double %35, i32 1
  %41 = fmul <2 x double> %38, %40
  %42 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %37, i32 1
  %43 = fadd <2 x double> %42, %41
  %44 = fmul double %30, 0x3F56C16C16C20BA0
  %45 = fadd double %44, 0x3F8111111110EB39
  %46 = fmul double %30, 0x3FA555555555553E
  %47 = fadd double %46, 0x3FC555555555555C
  %48 = fmul double %31, %45
  %49 = fadd double %47, %48
  %50 = insertelement <2 x double> undef, double %33, i32 0
  %51 = insertelement <2 x double> %50, double %32, i32 1
  %52 = fmul <2 x double> %43, %51
  %53 = extractelement <2 x double> %52, i32 1
  %54 = fadd double %49, %53
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fadd double %55, %54
  %57 = fmul double %30, %31
  %58 = fmul double %57, %56
  %59 = fmul double %31, 5.000000e-01
  %60 = fadd double %59, %58
  %61 = fadd double %30, %60
  %62 = icmp eq i32 %26, 0
  %63 = fadd double %61, 1.000000e+00
  %64 = ashr i32 %26, 1
  %65 = add nsw i32 %64, 1023
  %66 = zext i32 %65 to i64
  %67 = shl i64 %66, 52
  %68 = bitcast i64 %67 to double
  %69 = fmul double %63, %68
  %70 = add i32 %26, 1023
  %71 = sub i32 %70, %64
  %72 = zext i32 %71 to i64
  %73 = shl i64 %72, 52
  %74 = bitcast i64 %73 to double
  %75 = fmul double %69, %74
  %76 = fadd double %75, -1.000000e+00
  %77 = select i1 %62, double %61, double %76
  %78 = fadd double %77, 2.000000e+00
  %79 = fadd double %77, 1.000000e+00
  %80 = fdiv double %78, %79
  %81 = fmul double %77, 5.000000e-01
  %82 = fmul double %81, %80
  %83 = fcmp ule double %4, 7.090000e+02
  %84 = fcmp ord double %82, 0.000000e+00
  %85 = and i1 %83, %84
  %86 = bitcast double %82 to i64
  %87 = select i1 %85, i64 %86, i64 9218868437227405312
  %88 = and i64 %2, -9223372036854775808
  %89 = xor i64 %87, %88
  %90 = fcmp uno double %0, 0.000000e+00
  %91 = select i1 %90, i64 4294967295, i64 0
  %92 = shl nuw i64 %91, 32
  %93 = or i64 %92, %91
  %94 = or i64 %93, %89
  %95 = bitcast i64 %94 to double
  ret double %95
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_coshd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp ogt double %5, 0.000000e+00
  %7 = select i1 %6, double 5.000000e-01, double -5.000000e-01
  %8 = fadd double %5, %7
  %9 = bitcast double %8 to i64
  %10 = fptosi double %8 to i32
  %11 = and i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = sub i64 %9, %12
  %14 = bitcast i64 %13 to double
  %15 = fptosi double %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = icmp sgt i32 %15, 0
  %18 = select i1 %17, double 5.000000e-01, double -5.000000e-01
  %19 = fadd double %18, %16
  %20 = bitcast double %19 to i64
  %21 = fptosi double %19 to i32
  %22 = and i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = sub i64 %20, %23
  %25 = bitcast i64 %24 to double
  %26 = fptosi double %25 to i32
  %27 = fmul double %16, 0x3FE62E42FEFA3000
  %28 = fsub double %4, %27
  %29 = fmul double %16, 0x3D53DE6AF278ECE6
  %30 = fsub double %28, %29
  %31 = fmul double %30, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %30, 0x3E21F0E4C4ECD775
  %35 = fadd double %34, 0x3E5AF68A28CC800A
  %36 = fmul double %30, 0x3E927E52E0FCD573
  %37 = fadd double %36, 0x3EC71DDF1629E6CE
  %38 = fmul double %30, 0x3EFA01A01780879E
  %39 = fadd double %38, 0x3F2A01A01B3603F5
  %40 = fmul double %31, %37
  %41 = fadd double %39, %40
  %42 = fmul double %30, 0x3F56C16C16C20BA0
  %43 = fadd double %42, 0x3F8111111110EB39
  %44 = fmul double %30, 0x3FA555555555553E
  %45 = fadd double %44, 0x3FC555555555555C
  %46 = fmul double %31, %43
  %47 = fadd double %45, %46
  %48 = fmul double %32, %41
  %49 = fadd double %47, %48
  %50 = fmul double %35, %33
  %51 = fadd double %50, %49
  %52 = fmul double %30, %51
  %53 = fadd double %52, 5.000000e-01
  %54 = fmul double %31, %53
  %55 = fadd double %30, %54
  %56 = fadd double %55, 1.000000e+00
  %57 = ashr i32 %26, 1
  %58 = add nsw i32 %57, 1023
  %59 = zext i32 %58 to i64
  %60 = shl i64 %59, 52
  %61 = bitcast i64 %60 to double
  %62 = fmul double %56, %61
  %63 = add i32 %26, 1023
  %64 = sub i32 %63, %57
  %65 = zext i32 %64 to i64
  %66 = shl i64 %65, 52
  %67 = bitcast i64 %66 to double
  %68 = fmul double %62, %67
  %69 = fcmp ule double %4, 0x40862E42FE102C83
  %70 = fcmp olt double %4, -1.000000e+03
  %71 = bitcast double %68 to i64
  %72 = select i1 %69, i64 %71, i64 9218868437227405312
  %73 = select i1 %70, i64 4294967295, i64 0
  %74 = shl nuw i64 %73, 32
  %75 = or i64 %74, %73
  %76 = xor i64 %75, -1
  %77 = and i64 %72, %76
  %78 = bitcast i64 %77 to double
  %79 = fdiv double 5.000000e-01, %78
  %80 = fmul double %78, 5.000000e-01
  %81 = fadd double %80, %79
  %82 = fcmp ule double %4, 7.090000e+02
  %83 = fcmp ord double %81, 0.000000e+00
  %84 = and i1 %82, %83
  %85 = fcmp uno double %0, 0.000000e+00
  %86 = bitcast double %81 to i64
  %87 = select i1 %84, i64 %86, i64 9218868437227405312
  %88 = select i1 %85, i64 4294967295, i64 0
  %89 = shl nuw i64 %88, 32
  %90 = or i64 %89, %88
  %91 = or i64 %90, %87
  %92 = bitcast i64 %91 to double
  ret double %92
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_tanhd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 2.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp ogt double %6, 0.000000e+00
  %8 = select i1 %7, double 5.000000e-01, double -5.000000e-01
  %9 = fadd double %6, %8
  %10 = bitcast double %9 to i64
  %11 = fptosi double %9 to i32
  %12 = and i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = sub i64 %10, %13
  %15 = bitcast i64 %14 to double
  %16 = fptosi double %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = icmp sgt i32 %16, 0
  %19 = select i1 %18, double 5.000000e-01, double -5.000000e-01
  %20 = fadd double %19, %17
  %21 = bitcast double %20 to i64
  %22 = fptosi double %20 to i32
  %23 = and i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = sub i64 %21, %24
  %26 = bitcast i64 %25 to double
  %27 = fptosi double %26 to i32
  %28 = fmul double %17, 0x3FE62E42FEFA3000
  %29 = fsub double %5, %28
  %30 = fmul double %17, 0x3D53DE6AF278ECE6
  %31 = fsub double %29, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %33, %33
  %35 = fmul double %31, 0x3E927E52E0FCD573
  %36 = fadd double %35, 0x3EC71DDF1629E6CE
  %37 = fmul double %31, 0x3EFA01A01780879E
  %38 = fadd double %37, 0x3F2A01A01B3603F5
  %39 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %32, i32 1
  %40 = insertelement <2 x double> undef, double %31, i32 0
  %41 = insertelement <2 x double> %40, double %36, i32 1
  %42 = fmul <2 x double> %39, %41
  %43 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %38, i32 1
  %44 = fadd <2 x double> %43, %42
  %45 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %46 = fmul <2 x double> %45, <double 0x3FA555555555553E, double 0x3F56C16C16C20BA0>
  %47 = fadd <2 x double> %46, <double 0x3FC555555555555C, double 0x3F8111111110EB39>
  %48 = extractelement <2 x double> %47, i32 1
  %49 = fmul double %32, %48
  %50 = extractelement <2 x double> %47, i32 0
  %51 = fadd double %50, %49
  %52 = insertelement <2 x double> undef, double %34, i32 0
  %53 = insertelement <2 x double> %52, double %33, i32 1
  %54 = fmul <2 x double> %44, %53
  %55 = extractelement <2 x double> %54, i32 1
  %56 = fadd double %51, %55
  %57 = extractelement <2 x double> %54, i32 0
  %58 = fadd double %57, %56
  %59 = fmul double %31, %32
  %60 = fmul double %59, %58
  %61 = fmul double %32, 5.000000e-01
  %62 = fadd double %61, %60
  %63 = fadd double %31, %62
  %64 = icmp eq i32 %27, 0
  %65 = fadd double %63, 1.000000e+00
  %66 = ashr i32 %27, 1
  %67 = add nsw i32 %66, 1023
  %68 = zext i32 %67 to i64
  %69 = shl i64 %68, 52
  %70 = bitcast i64 %69 to double
  %71 = fmul double %65, %70
  %72 = add i32 %27, 1023
  %73 = sub i32 %72, %66
  %74 = zext i32 %73 to i64
  %75 = shl i64 %74, 52
  %76 = bitcast i64 %75 to double
  %77 = fmul double %71, %76
  %78 = fadd double %77, -1.000000e+00
  %79 = select i1 %64, double %63, double %78
  %80 = fadd double %79, 2.000000e+00
  %81 = fdiv double %79, %80
  %82 = fcmp ule double %4, 0x4032B70887229E90
  %83 = fcmp ord double %81, 0.000000e+00
  %84 = and i1 %82, %83
  %85 = bitcast double %81 to i64
  %86 = select i1 %84, i64 %85, i64 4607182418800017408
  %87 = and i64 %2, -9223372036854775808
  %88 = xor i64 %86, %87
  %89 = fcmp uno double %0, 0.000000e+00
  %90 = select i1 %89, i64 4294967295, i64 0
  %91 = shl nuw i64 %90, 32
  %92 = or i64 %91, %90
  %93 = or i64 %92, %88
  %94 = bitcast i64 %93 to double
  ret double %94
}

; Function Attrs: nounwind uwtable
define double @Sleef_asinhd1_u10purec(double) local_unnamed_addr #3 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp ule double %4, 1.000000e+00
  %6 = fdiv double 1.000000e+00, %0
  %7 = and i64 %2, -134217728
  %8 = bitcast i64 %7 to double
  %9 = fsub double %0, %8
  %10 = bitcast double %6 to i64
  %11 = and i64 %10, -134217728
  %12 = bitcast i64 %11 to double
  %13 = fsub double %6, %12
  %14 = fmul double %8, %12
  %15 = fmul double %13, %8
  %16 = fmul double %9, %12
  %17 = fmul double %9, %13
  %18 = fsub double 1.000000e+00, %14
  %19 = fsub double %18, %15
  %20 = fsub double %19, %16
  %21 = fsub double %20, %17
  %22 = fmul double %6, %21
  %23 = select i1 %5, double %4, double %6
  %24 = select i1 %5, double 0.000000e+00, double %22
  %25 = bitcast double %23 to i64
  %26 = and i64 %25, -134217728
  %27 = bitcast i64 %26 to double
  %28 = fsub double %23, %27
  %29 = fmul double %23, %23
  %30 = fmul double %27, %27
  %31 = fadd double %27, %27
  %32 = fmul double %31, %28
  %33 = fmul double %28, %28
  %34 = fadd double %24, %24
  %35 = fmul double %23, %34
  %36 = fsub double %30, %29
  %37 = fadd double %36, %32
  %38 = fadd double %33, %37
  %39 = fadd double %38, %35
  %40 = fadd double %29, 1.000000e+00
  %41 = fsub double %40, %29
  %42 = fsub double %40, %41
  %43 = fsub double %29, %42
  %44 = fsub double 1.000000e+00, %41
  %45 = fadd double %44, %43
  %46 = fadd double %45, %39
  %47 = fadd double %40, %46
  %48 = tail call double @sqrt(double %47) #6
  %49 = bitcast double %48 to i64
  %50 = and i64 %49, -134217728
  %51 = bitcast i64 %50 to double
  %52 = fsub double %48, %51
  %53 = fmul double %48, %48
  %54 = fmul double %51, %51
  %55 = fmul double %52, %51
  %56 = fmul double %52, %52
  %57 = fsub double %54, %53
  %58 = fadd double %55, %57
  %59 = fadd double %55, %58
  %60 = fadd double %56, %59
  %61 = fadd double %40, %53
  %62 = fsub double %61, %40
  %63 = fsub double %61, %62
  %64 = fsub double %40, %63
  %65 = fsub double %53, %62
  %66 = fadd double %65, %64
  %67 = fadd double %46, %60
  %68 = fadd double %66, %67
  %69 = fdiv double 1.000000e+00, %48
  %70 = bitcast double %69 to i64
  %71 = and i64 %70, -134217728
  %72 = bitcast i64 %71 to double
  %73 = fsub double %69, %72
  %74 = fmul double %51, %72
  %75 = fmul double %73, %51
  %76 = fmul double %52, %72
  %77 = fmul double %52, %73
  %78 = fsub double 1.000000e+00, %74
  %79 = fsub double %78, %75
  %80 = fsub double %79, %76
  %81 = fsub double %80, %77
  %82 = fmul double %69, %81
  %83 = bitcast double %61 to i64
  %84 = and i64 %83, -134217728
  %85 = bitcast i64 %84 to double
  %86 = fsub double %61, %85
  %87 = fmul double %69, %61
  %88 = fmul double %72, %85
  %89 = fmul double %86, %72
  %90 = fmul double %73, %85
  %91 = fmul double %73, %86
  %92 = fmul double %61, %82
  %93 = fmul double %69, %68
  %94 = fsub double %88, %87
  %95 = fadd double %89, %94
  %96 = fadd double %90, %95
  %97 = fadd double %91, %96
  %98 = fadd double %97, %92
  %99 = fadd double %93, %98
  %100 = fmul double %87, 5.000000e-01
  %101 = fmul double %99, 5.000000e-01
  %102 = bitcast double %100 to i64
  %103 = and i64 %102, -134217728
  %104 = bitcast i64 %103 to double
  %105 = fsub double %100, %104
  %106 = and i64 %2, 9223372036720558080
  %107 = bitcast i64 %106 to double
  %108 = fsub double %4, %107
  %109 = fmul double %100, %4
  %110 = fmul double %107, %104
  %111 = fmul double %105, %107
  %112 = fmul double %108, %104
  %113 = fmul double %108, %105
  %114 = fmul double %101, %4
  %115 = fsub double %110, %109
  %116 = fadd double %111, %115
  %117 = fadd double %112, %116
  %118 = fadd double %113, %117
  %119 = fadd double %118, %114
  %120 = select i1 %5, double %100, double %109
  %121 = select i1 %5, double %101, double %119
  %122 = fadd double %120, %0
  %123 = fsub double %122, %120
  %124 = fsub double %122, %123
  %125 = fsub double %120, %124
  %126 = fsub double %0, %123
  %127 = fadd double %126, %125
  %128 = fadd double %127, %121
  %129 = fadd double %122, %128
  %130 = fsub double %122, %129
  %131 = fadd double %128, %130
  %132 = fmul double %129, 0x3FF5555555555555
  %133 = fcmp uge double %132, 0x2D30000000000000
  %134 = fmul double %132, 0x52B0000000000000
  %135 = select i1 %133, double %132, double %134
  %136 = bitcast double %135 to i64
  %137 = lshr i64 %136, 52
  %138 = trunc i64 %137 to i32
  %139 = select i1 %133, i32 1023, i32 1323
  %140 = sub nsw i32 %138, %139
  %141 = sub nsw i32 0, %140
  %142 = ashr i32 %141, 1
  %143 = add nsw i32 %142, 1023
  %144 = zext i32 %143 to i64
  %145 = shl i64 %144, 52
  %146 = bitcast i64 %145 to double
  %147 = fmul double %129, %146
  %148 = sub nsw i32 1023, %140
  %149 = sub nsw i32 %148, %142
  %150 = zext i32 %149 to i64
  %151 = shl i64 %150, 52
  %152 = bitcast i64 %151 to double
  %153 = fmul double %147, %152
  %154 = fmul double %131, %146
  %155 = fmul double %154, %152
  %156 = insertelement <2 x double> undef, double %153, i32 0
  %157 = shufflevector <2 x double> %156, <2 x double> undef, <2 x i32> zeroinitializer
  %158 = fadd <2 x double> %157, <double -1.000000e+00, double 1.000000e+00>
  %159 = fsub <2 x double> %158, %157
  %160 = fsub <2 x double> %158, %159
  %161 = fsub <2 x double> %157, %160
  %162 = fsub <2 x double> <double -1.000000e+00, double 1.000000e+00>, %159
  %163 = fadd <2 x double> %162, %161
  %164 = insertelement <2 x double> undef, double %155, i32 0
  %165 = shufflevector <2 x double> %164, <2 x double> undef, <2 x i32> zeroinitializer
  %166 = fadd <2 x double> %165, %163
  %167 = extractelement <2 x double> %158, i32 1
  %168 = fdiv double 1.000000e+00, %167
  %169 = bitcast double %167 to i64
  %170 = and i64 %169, -134217728
  %171 = bitcast i64 %170 to double
  %172 = fsub double %167, %171
  %173 = bitcast double %168 to i64
  %174 = and i64 %173, -134217728
  %175 = bitcast i64 %174 to double
  %176 = fsub double %168, %175
  %177 = extractelement <2 x double> %158, i32 0
  %178 = bitcast double %177 to i64
  %179 = and i64 %178, -134217728
  %180 = bitcast i64 %179 to double
  %181 = fsub double %177, %180
  %182 = fmul double %177, %168
  %183 = fmul double %180, %175
  %184 = fsub double %183, %182
  %185 = fmul double %176, %180
  %186 = fmul double %181, %175
  %187 = fmul double %181, %176
  %188 = fmul double %171, %175
  %189 = fmul double %176, %171
  %190 = fmul double %172, %175
  %191 = fmul double %172, %176
  %192 = fsub double 1.000000e+00, %188
  %193 = fsub double %192, %189
  %194 = fsub double %193, %190
  %195 = fsub double %194, %191
  %196 = fmul double %182, %195
  %197 = fadd double %184, %185
  %198 = fadd double %186, %197
  %199 = fadd double %187, %198
  %200 = fadd double %199, %196
  %201 = extractelement <2 x double> %166, i32 1
  %202 = fmul double %182, %201
  %203 = extractelement <2 x double> %166, i32 0
  %204 = fsub double %203, %202
  %205 = fmul double %168, %204
  %206 = fadd double %205, %200
  %207 = bitcast double %182 to i64
  %208 = and i64 %207, -134217728
  %209 = bitcast i64 %208 to double
  %210 = fsub double %182, %209
  %211 = fmul double %182, %182
  %212 = fadd double %209, %209
  %213 = fadd double %206, %206
  %214 = fmul double %211, %211
  %215 = fmul double %214, %214
  %216 = fmul double %211, 0x3FC0DB8A525B4A6B
  %217 = fadd double %216, 0x3FC3B3759FB81971
  %218 = insertelement <2 x double> undef, double %214, i32 0
  %219 = insertelement <2 x double> %218, double %211, i32 1
  %220 = fmul <2 x double> %219, <double 0x3FC1BDC9AD06D760, double 0x3FC745C38C19C82A>
  %221 = insertelement <2 x double> <double undef, double 0x3FCC71C750354F90>, double %217, i32 0
  %222 = fadd <2 x double> %220, %221
  %223 = fmul double %211, 0x3FD2492492114D0C
  %224 = fadd double %223, 0x3FD999999999D9EB
  %225 = insertelement <2 x double> undef, double %215, i32 0
  %226 = insertelement <2 x double> %225, double %214, i32 1
  %227 = fmul <2 x double> %226, %222
  %228 = extractelement <2 x double> %227, i32 1
  %229 = fadd double %224, %228
  %230 = extractelement <2 x double> %227, i32 0
  %231 = fadd double %230, %229
  %232 = fmul double %211, %231
  %233 = fadd double %232, 0x3FE5555555555545
  %234 = sitofp i32 %140 to double
  %235 = bitcast double %234 to i64
  %236 = and i64 %235, -134217728
  %237 = bitcast i64 %236 to double
  %238 = fsub double %234, %237
  %239 = fmul double %237, 0x3FE62E42F8000000
  %240 = fmul double %237, 0x3E4BE8E7BC000000
  %241 = fmul double %238, 0x3FE62E42F8000000
  %242 = fmul double %238, 0x3E4BE8E7BC000000
  %243 = fmul double %234, 0x3C7ABC9E3B39803F
  %244 = fmul double %182, %211
  %245 = bitcast double %244 to i64
  %246 = and i64 %245, -134217728
  %247 = bitcast i64 %246 to double
  %248 = fsub double %244, %247
  %249 = bitcast double %233 to i64
  %250 = and i64 %249, -134217728
  %251 = bitcast i64 %250 to double
  %252 = fsub double %233, %251
  %253 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %248, i32 1
  %254 = insertelement <2 x double> undef, double %234, i32 0
  %255 = insertelement <2 x double> %254, double %252, i32 1
  %256 = fmul <2 x double> %253, %255
  %257 = extractelement <2 x double> %256, i32 0
  %258 = fsub double %239, %257
  %259 = fadd double %240, %258
  %260 = fadd double %241, %259
  %261 = fadd double %242, %260
  %262 = fadd double %243, %261
  %263 = fmul double %182, 2.000000e+00
  %264 = fmul double %206, 2.000000e+00
  %265 = bitcast double %211 to i64
  %266 = and i64 %265, -134217728
  %267 = bitcast i64 %266 to double
  %268 = fsub double %211, %267
  %269 = fmul double %209, %267
  %270 = insertelement <2 x double> undef, double %268, i32 0
  %271 = insertelement <2 x double> %270, double %209, i32 1
  %272 = insertelement <2 x double> undef, double %209, i32 0
  %273 = shufflevector <2 x double> %272, <2 x double> undef, <2 x i32> zeroinitializer
  %274 = fmul <2 x double> %271, %273
  %275 = insertelement <2 x double> undef, double %210, i32 0
  %276 = shufflevector <2 x double> %275, <2 x double> undef, <2 x i32> zeroinitializer
  %277 = insertelement <2 x double> undef, double %267, i32 0
  %278 = insertelement <2 x double> %277, double %212, i32 1
  %279 = fmul <2 x double> %276, %278
  %280 = insertelement <2 x double> %270, double %210, i32 1
  %281 = fmul <2 x double> %276, %280
  %282 = insertelement <2 x double> undef, double %211, i32 0
  %283 = insertelement <2 x double> %282, double %182, i32 1
  %284 = insertelement <2 x double> undef, double %206, i32 0
  %285 = insertelement <2 x double> %284, double %213, i32 1
  %286 = fmul <2 x double> %283, %285
  %287 = fsub double %269, %244
  %288 = insertelement <2 x double> undef, double %287, i32 0
  %289 = insertelement <2 x double> %288, double %211, i32 1
  %290 = fadd <2 x double> %274, %289
  %291 = fsub <2 x double> %274, %289
  %292 = shufflevector <2 x double> %290, <2 x double> %291, <2 x i32> <i32 0, i32 3>
  %293 = fadd <2 x double> %279, %292
  %294 = fadd <2 x double> %281, %293
  %295 = fadd <2 x double> %294, %286
  %296 = extractelement <2 x double> %295, i32 1
  %297 = fmul double %182, %296
  %298 = extractelement <2 x double> %295, i32 0
  %299 = fadd double %298, %297
  %300 = fmul double %247, %251
  %301 = fmul double %248, %251
  %302 = fmul double %252, %247
  %303 = insertelement <2 x double> undef, double %244, i32 0
  %304 = insertelement <2 x double> %303, double %299, i32 1
  %305 = insertelement <2 x double> undef, double %233, i32 0
  %306 = shufflevector <2 x double> %305, <2 x double> undef, <2 x i32> zeroinitializer
  %307 = fmul <2 x double> %304, %306
  %308 = extractelement <2 x double> %307, i32 0
  %309 = fsub double %300, %308
  %310 = fadd double %301, %309
  %311 = fadd double %302, %310
  %312 = insertelement <2 x double> undef, double %263, i32 0
  %313 = insertelement <2 x double> %312, double %311, i32 1
  %314 = fadd <2 x double> %256, %313
  %315 = extractelement <2 x double> %314, i32 0
  %316 = fsub double %257, %315
  %317 = fadd double %263, %316
  %318 = fadd double %262, %317
  %319 = fadd double %318, %264
  %320 = fadd <2 x double> %314, %307
  %321 = extractelement <2 x double> %320, i32 0
  %322 = fsub double %315, %321
  %323 = fadd double %308, %322
  %324 = fadd double %323, %319
  %325 = extractelement <2 x double> %320, i32 1
  %326 = fadd double %324, %325
  %327 = fadd double %321, %326
  %328 = fcmp ule double %4, 0x5FEFFFFFFFFFFFFF
  %329 = fcmp ord double %327, 0.000000e+00
  %330 = and i64 %2, -9223372036854775808
  %331 = or i64 %330, 9218868437227405312
  %332 = and i1 %328, %329
  %333 = fcmp uno double %0, 0.000000e+00
  %334 = bitcast double %327 to i64
  %335 = select i1 %332, i64 %334, i64 %331
  %336 = select i1 %333, i64 4294967295, i64 0
  %337 = shl nuw i64 %336, 32
  %338 = or i64 %337, %336
  %339 = or i64 %338, %335
  %340 = bitcast i64 %339 to double
  %341 = icmp eq i64 %2, -9223372036854775808
  %342 = select i1 %341, double -0.000000e+00, double %340
  ret double %342
}

; Function Attrs: nounwind uwtable
define double @Sleef_acoshd1_u10purec(double) local_unnamed_addr #3 {
  %2 = insertelement <2 x double> undef, double %0, i32 0
  %3 = shufflevector <2 x double> %2, <2 x double> undef, <2 x i32> zeroinitializer
  %4 = fadd <2 x double> %3, <double 1.000000e+00, double -1.000000e+00>
  %5 = extractelement <2 x double> %4, i32 0
  %6 = fsub double %5, %0
  %7 = fsub double %5, %6
  %8 = fsub double %0, %7
  %9 = fsub double 1.000000e+00, %6
  %10 = fadd double %9, %8
  %11 = fadd double %5, %10
  %12 = tail call double @sqrt(double %11) #6
  %13 = bitcast double %12 to i64
  %14 = and i64 %13, -134217728
  %15 = bitcast i64 %14 to double
  %16 = fsub double %12, %15
  %17 = fmul double %15, %15
  %18 = fmul double %16, %15
  %19 = fmul double %16, %16
  %20 = extractelement <2 x double> %4, i32 1
  %21 = fsub double %20, %0
  %22 = fsub double %20, %21
  %23 = fsub double %0, %22
  %24 = fsub double -1.000000e+00, %21
  %25 = fadd double %24, %23
  %26 = fadd double %20, %25
  %27 = tail call double @sqrt(double %26) #6
  %28 = insertelement <2 x double> undef, double %12, i32 0
  %29 = insertelement <2 x double> %28, double %27, i32 1
  %30 = fmul <2 x double> %29, %29
  %31 = extractelement <2 x double> %30, i32 0
  %32 = fsub double %17, %31
  %33 = fadd double %18, %32
  %34 = fadd double %18, %33
  %35 = fadd double %19, %34
  %36 = fadd <2 x double> %4, %30
  %37 = extractelement <2 x double> %36, i32 0
  %38 = fsub double %37, %5
  %39 = fsub double %37, %38
  %40 = fsub double %5, %39
  %41 = fsub double %31, %38
  %42 = fadd double %41, %40
  %43 = fadd double %10, %35
  %44 = fadd double %42, %43
  %45 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %46 = extractelement <2 x double> %45, i32 0
  %47 = bitcast double %46 to i64
  %48 = and i64 %47, -134217728
  %49 = bitcast i64 %48 to double
  %50 = fsub double %46, %49
  %51 = fmul double %15, %49
  %52 = fmul double %50, %15
  %53 = fmul double %16, %49
  %54 = fmul double %16, %50
  %55 = fsub double 1.000000e+00, %51
  %56 = fsub double %55, %52
  %57 = fsub double %56, %53
  %58 = fsub double %57, %54
  %59 = fmul double %46, %58
  %60 = bitcast double %37 to i64
  %61 = and i64 %60, -134217728
  %62 = bitcast i64 %61 to double
  %63 = fsub double %37, %62
  %64 = fmul double %49, %62
  %65 = fmul double %63, %49
  %66 = fmul double %50, %62
  %67 = fmul double %50, %63
  %68 = fmul double %37, %59
  %69 = fmul double %46, %44
  %70 = fmul <2 x double> %45, %36
  %71 = extractelement <2 x double> %70, i32 0
  %72 = fsub double %64, %71
  %73 = fadd double %65, %72
  %74 = fadd double %66, %73
  %75 = fadd double %67, %74
  %76 = fadd double %75, %68
  %77 = fadd double %69, %76
  %78 = fmul double %77, 5.000000e-01
  %79 = bitcast double %27 to i64
  %80 = and i64 %79, -134217728
  %81 = bitcast i64 %80 to double
  %82 = fsub double %27, %81
  %83 = fmul double %81, %81
  %84 = fmul double %82, %81
  %85 = fmul double %82, %82
  %86 = extractelement <2 x double> %30, i32 1
  %87 = fsub double %83, %86
  %88 = fadd double %84, %87
  %89 = fadd double %84, %88
  %90 = fadd double %85, %89
  %91 = extractelement <2 x double> %36, i32 1
  %92 = fsub double %91, %20
  %93 = fsub double %91, %92
  %94 = fsub double %20, %93
  %95 = fsub double %86, %92
  %96 = fadd double %95, %94
  %97 = fadd double %25, %90
  %98 = fadd double %96, %97
  %99 = extractelement <2 x double> %45, i32 1
  %100 = bitcast double %99 to i64
  %101 = and i64 %100, -134217728
  %102 = bitcast i64 %101 to double
  %103 = fsub double %99, %102
  %104 = fmul double %81, %102
  %105 = fmul double %103, %81
  %106 = fmul double %82, %102
  %107 = fmul double %82, %103
  %108 = fsub double 1.000000e+00, %104
  %109 = fsub double %108, %105
  %110 = fsub double %109, %106
  %111 = fsub double %110, %107
  %112 = fmul double %99, %111
  %113 = bitcast double %91 to i64
  %114 = and i64 %113, -134217728
  %115 = bitcast i64 %114 to double
  %116 = fsub double %91, %115
  %117 = fmul double %102, %115
  %118 = fmul double %116, %102
  %119 = fmul double %103, %115
  %120 = fmul double %103, %116
  %121 = fmul double %91, %112
  %122 = fmul double %99, %98
  %123 = extractelement <2 x double> %70, i32 1
  %124 = fsub double %117, %123
  %125 = fadd double %118, %124
  %126 = fadd double %119, %125
  %127 = fadd double %120, %126
  %128 = fadd double %127, %121
  %129 = fadd double %122, %128
  %130 = fmul <2 x double> %70, <double 5.000000e-01, double 5.000000e-01>
  %131 = fmul double %129, 5.000000e-01
  %132 = extractelement <2 x double> %130, i32 0
  %133 = bitcast double %132 to i64
  %134 = and i64 %133, -134217728
  %135 = bitcast i64 %134 to double
  %136 = fsub double %132, %135
  %137 = extractelement <2 x double> %130, i32 1
  %138 = bitcast double %137 to i64
  %139 = and i64 %138, -134217728
  %140 = bitcast i64 %139 to double
  %141 = fsub double %137, %140
  %142 = fmul double %132, %137
  %143 = fmul double %135, %140
  %144 = fmul double %136, %140
  %145 = fmul double %141, %135
  %146 = fmul double %136, %141
  %147 = fmul double %132, %131
  %148 = fmul double %137, %78
  %149 = fsub double %143, %142
  %150 = fadd double %144, %149
  %151 = fadd double %145, %150
  %152 = fadd double %146, %151
  %153 = fadd double %152, %147
  %154 = fadd double %148, %153
  %155 = fadd double %142, %0
  %156 = fsub double %155, %142
  %157 = fsub double %155, %156
  %158 = fsub double %142, %157
  %159 = fsub double %0, %156
  %160 = fadd double %159, %158
  %161 = fadd double %160, %154
  %162 = fmul double %155, 0x3FF5555555555555
  %163 = fcmp uge double %162, 0x2D30000000000000
  %164 = fmul double %162, 0x52B0000000000000
  %165 = select i1 %163, double %162, double %164
  %166 = bitcast double %165 to i64
  %167 = lshr i64 %166, 52
  %168 = trunc i64 %167 to i32
  %169 = select i1 %163, i32 1023, i32 1323
  %170 = sub nsw i32 %168, %169
  %171 = sub nsw i32 0, %170
  %172 = ashr i32 %171, 1
  %173 = add nsw i32 %172, 1023
  %174 = zext i32 %173 to i64
  %175 = shl i64 %174, 52
  %176 = bitcast i64 %175 to double
  %177 = fmul double %155, %176
  %178 = sub nsw i32 1023, %170
  %179 = sub nsw i32 %178, %172
  %180 = zext i32 %179 to i64
  %181 = shl i64 %180, 52
  %182 = bitcast i64 %181 to double
  %183 = fmul double %177, %182
  %184 = fmul double %161, %176
  %185 = fmul double %184, %182
  %186 = insertelement <2 x double> undef, double %183, i32 0
  %187 = shufflevector <2 x double> %186, <2 x double> undef, <2 x i32> zeroinitializer
  %188 = fadd <2 x double> %187, <double -1.000000e+00, double 1.000000e+00>
  %189 = fsub <2 x double> %188, %187
  %190 = fsub <2 x double> %188, %189
  %191 = fsub <2 x double> %187, %190
  %192 = fsub <2 x double> <double -1.000000e+00, double 1.000000e+00>, %189
  %193 = fadd <2 x double> %192, %191
  %194 = insertelement <2 x double> undef, double %185, i32 0
  %195 = shufflevector <2 x double> %194, <2 x double> undef, <2 x i32> zeroinitializer
  %196 = fadd <2 x double> %195, %193
  %197 = extractelement <2 x double> %188, i32 1
  %198 = fdiv double 1.000000e+00, %197
  %199 = bitcast double %197 to i64
  %200 = and i64 %199, -134217728
  %201 = bitcast i64 %200 to double
  %202 = fsub double %197, %201
  %203 = bitcast double %198 to i64
  %204 = and i64 %203, -134217728
  %205 = bitcast i64 %204 to double
  %206 = fsub double %198, %205
  %207 = extractelement <2 x double> %188, i32 0
  %208 = bitcast double %207 to i64
  %209 = and i64 %208, -134217728
  %210 = bitcast i64 %209 to double
  %211 = fsub double %207, %210
  %212 = fmul double %207, %198
  %213 = fmul double %210, %205
  %214 = fsub double %213, %212
  %215 = fmul double %206, %210
  %216 = fmul double %211, %205
  %217 = fmul double %211, %206
  %218 = fmul double %201, %205
  %219 = fmul double %206, %201
  %220 = fmul double %202, %205
  %221 = fmul double %202, %206
  %222 = fsub double 1.000000e+00, %218
  %223 = fsub double %222, %219
  %224 = fsub double %223, %220
  %225 = fsub double %224, %221
  %226 = fmul double %212, %225
  %227 = fadd double %214, %215
  %228 = fadd double %216, %227
  %229 = fadd double %217, %228
  %230 = fadd double %229, %226
  %231 = extractelement <2 x double> %196, i32 1
  %232 = fmul double %212, %231
  %233 = extractelement <2 x double> %196, i32 0
  %234 = fsub double %233, %232
  %235 = fmul double %198, %234
  %236 = fadd double %235, %230
  %237 = bitcast double %212 to i64
  %238 = and i64 %237, -134217728
  %239 = bitcast i64 %238 to double
  %240 = fsub double %212, %239
  %241 = fmul double %212, %212
  %242 = fadd double %239, %239
  %243 = fadd double %236, %236
  %244 = fmul double %241, %241
  %245 = fmul double %244, %244
  %246 = fmul double %241, 0x3FC0DB8A525B4A6B
  %247 = fadd double %246, 0x3FC3B3759FB81971
  %248 = insertelement <2 x double> undef, double %244, i32 0
  %249 = insertelement <2 x double> %248, double %241, i32 1
  %250 = fmul <2 x double> %249, <double 0x3FC1BDC9AD06D760, double 0x3FC745C38C19C82A>
  %251 = insertelement <2 x double> <double undef, double 0x3FCC71C750354F90>, double %247, i32 0
  %252 = fadd <2 x double> %250, %251
  %253 = fmul double %241, 0x3FD2492492114D0C
  %254 = fadd double %253, 0x3FD999999999D9EB
  %255 = insertelement <2 x double> undef, double %245, i32 0
  %256 = insertelement <2 x double> %255, double %244, i32 1
  %257 = fmul <2 x double> %256, %252
  %258 = extractelement <2 x double> %257, i32 1
  %259 = fadd double %254, %258
  %260 = extractelement <2 x double> %257, i32 0
  %261 = fadd double %260, %259
  %262 = fmul double %241, %261
  %263 = fadd double %262, 0x3FE5555555555545
  %264 = sitofp i32 %170 to double
  %265 = bitcast double %264 to i64
  %266 = and i64 %265, -134217728
  %267 = bitcast i64 %266 to double
  %268 = fsub double %264, %267
  %269 = fmul double %267, 0x3FE62E42F8000000
  %270 = fmul double %267, 0x3E4BE8E7BC000000
  %271 = fmul double %268, 0x3FE62E42F8000000
  %272 = fmul double %268, 0x3E4BE8E7BC000000
  %273 = fmul double %264, 0x3C7ABC9E3B39803F
  %274 = fmul double %212, %241
  %275 = bitcast double %274 to i64
  %276 = and i64 %275, -134217728
  %277 = bitcast i64 %276 to double
  %278 = fsub double %274, %277
  %279 = bitcast double %263 to i64
  %280 = and i64 %279, -134217728
  %281 = bitcast i64 %280 to double
  %282 = fsub double %263, %281
  %283 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %278, i32 1
  %284 = insertelement <2 x double> undef, double %264, i32 0
  %285 = insertelement <2 x double> %284, double %282, i32 1
  %286 = fmul <2 x double> %283, %285
  %287 = extractelement <2 x double> %286, i32 0
  %288 = fsub double %269, %287
  %289 = fadd double %270, %288
  %290 = fadd double %271, %289
  %291 = fadd double %272, %290
  %292 = fadd double %273, %291
  %293 = fmul double %212, 2.000000e+00
  %294 = fmul double %236, 2.000000e+00
  %295 = bitcast double %241 to i64
  %296 = and i64 %295, -134217728
  %297 = bitcast i64 %296 to double
  %298 = fsub double %241, %297
  %299 = fmul double %239, %297
  %300 = insertelement <2 x double> undef, double %298, i32 0
  %301 = insertelement <2 x double> %300, double %239, i32 1
  %302 = insertelement <2 x double> undef, double %239, i32 0
  %303 = shufflevector <2 x double> %302, <2 x double> undef, <2 x i32> zeroinitializer
  %304 = fmul <2 x double> %301, %303
  %305 = insertelement <2 x double> undef, double %240, i32 0
  %306 = shufflevector <2 x double> %305, <2 x double> undef, <2 x i32> zeroinitializer
  %307 = insertelement <2 x double> undef, double %297, i32 0
  %308 = insertelement <2 x double> %307, double %242, i32 1
  %309 = fmul <2 x double> %306, %308
  %310 = insertelement <2 x double> %300, double %240, i32 1
  %311 = fmul <2 x double> %306, %310
  %312 = insertelement <2 x double> undef, double %241, i32 0
  %313 = insertelement <2 x double> %312, double %212, i32 1
  %314 = insertelement <2 x double> undef, double %236, i32 0
  %315 = insertelement <2 x double> %314, double %243, i32 1
  %316 = fmul <2 x double> %313, %315
  %317 = fsub double %299, %274
  %318 = insertelement <2 x double> undef, double %317, i32 0
  %319 = insertelement <2 x double> %318, double %241, i32 1
  %320 = fadd <2 x double> %304, %319
  %321 = fsub <2 x double> %304, %319
  %322 = shufflevector <2 x double> %320, <2 x double> %321, <2 x i32> <i32 0, i32 3>
  %323 = fadd <2 x double> %309, %322
  %324 = fadd <2 x double> %311, %323
  %325 = fadd <2 x double> %324, %316
  %326 = extractelement <2 x double> %325, i32 1
  %327 = fmul double %212, %326
  %328 = extractelement <2 x double> %325, i32 0
  %329 = fadd double %328, %327
  %330 = fmul double %277, %281
  %331 = fmul double %278, %281
  %332 = fmul double %282, %277
  %333 = insertelement <2 x double> undef, double %274, i32 0
  %334 = insertelement <2 x double> %333, double %329, i32 1
  %335 = insertelement <2 x double> undef, double %263, i32 0
  %336 = shufflevector <2 x double> %335, <2 x double> undef, <2 x i32> zeroinitializer
  %337 = fmul <2 x double> %334, %336
  %338 = extractelement <2 x double> %337, i32 0
  %339 = fsub double %330, %338
  %340 = fadd double %331, %339
  %341 = fadd double %332, %340
  %342 = insertelement <2 x double> undef, double %293, i32 0
  %343 = insertelement <2 x double> %342, double %341, i32 1
  %344 = fadd <2 x double> %286, %343
  %345 = extractelement <2 x double> %344, i32 0
  %346 = fsub double %287, %345
  %347 = fadd double %293, %346
  %348 = fadd double %292, %347
  %349 = fadd double %348, %294
  %350 = fadd <2 x double> %344, %337
  %351 = extractelement <2 x double> %350, i32 0
  %352 = fsub double %345, %351
  %353 = fadd double %338, %352
  %354 = fadd double %353, %349
  %355 = extractelement <2 x double> %350, i32 1
  %356 = fadd double %354, %355
  %357 = fadd double %351, %356
  %358 = bitcast double %0 to i64
  %359 = and i64 %358, 9223372036854775807
  %360 = bitcast i64 %359 to double
  %361 = fcmp ule double %360, 0x5FEFFFFFFFFFFFFF
  %362 = fcmp ord double %357, 0.000000e+00
  %363 = and i1 %361, %362
  %364 = fcmp oeq double %0, 1.000000e+00
  %365 = bitcast double %357 to i64
  %366 = select i1 %363, i64 %365, i64 9218868437227405312
  %367 = select i1 %364, i64 4294967295, i64 0
  %368 = shl nuw i64 %367, 32
  %369 = or i64 %368, %367
  %370 = xor i64 %369, -1
  %371 = and i64 %366, %370
  %372 = fcmp olt double %0, 1.000000e+00
  %373 = select i1 %372, i64 4294967295, i64 0
  %374 = shl nuw i64 %373, 32
  %375 = fcmp uno double %0, 0.000000e+00
  %376 = select i1 %375, i64 4294967295, i64 0
  %377 = shl nuw i64 %376, 32
  %378 = or i64 %376, %373
  %379 = or i64 %378, %374
  %380 = or i64 %379, %377
  %381 = or i64 %380, %371
  %382 = bitcast i64 %381 to double
  ret double %382
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_atanhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fadd double %4, 1.000000e+00
  %6 = fadd double %5, -1.000000e+00
  %7 = fsub double %5, %6
  %8 = fsub double 1.000000e+00, %7
  %9 = fsub double %4, %6
  %10 = fadd double %9, %8
  %11 = fsub double -0.000000e+00, %4
  %12 = fsub double 1.000000e+00, %4
  %13 = fadd double %12, -1.000000e+00
  %14 = fsub double %12, %13
  %15 = fsub double 1.000000e+00, %14
  %16 = fsub double %11, %13
  %17 = fadd double %16, %15
  %18 = fdiv double 1.000000e+00, %12
  %19 = bitcast double %12 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %12, %21
  %23 = bitcast double %18 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %18, %25
  %27 = bitcast double %5 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %5, %29
  %31 = fmul double %5, %18
  %32 = fmul double %29, %25
  %33 = fsub double %32, %31
  %34 = fmul double %26, %29
  %35 = fmul double %30, %25
  %36 = fmul double %30, %26
  %37 = fmul double %21, %25
  %38 = fmul double %26, %21
  %39 = fmul double %22, %25
  %40 = fmul double %22, %26
  %41 = fsub double 1.000000e+00, %37
  %42 = fsub double %41, %38
  %43 = fsub double %42, %39
  %44 = fsub double %43, %40
  %45 = fmul double %31, %44
  %46 = fadd double %33, %34
  %47 = fadd double %35, %46
  %48 = fadd double %36, %47
  %49 = fadd double %48, %45
  %50 = fmul double %31, %17
  %51 = fsub double %10, %50
  %52 = fmul double %18, %51
  %53 = fadd double %52, %49
  %54 = fmul double %31, 0x3FF5555555555555
  %55 = fcmp uge double %54, 0x2D30000000000000
  %56 = fmul double %54, 0x52B0000000000000
  %57 = select i1 %55, double %54, double %56
  %58 = bitcast double %57 to i64
  %59 = lshr i64 %58, 52
  %60 = trunc i64 %59 to i32
  %61 = select i1 %55, i32 1023, i32 1323
  %62 = sub nsw i32 %60, %61
  %63 = sub nsw i32 0, %62
  %64 = ashr i32 %63, 1
  %65 = add nsw i32 %64, 1023
  %66 = zext i32 %65 to i64
  %67 = shl i64 %66, 52
  %68 = bitcast i64 %67 to double
  %69 = fmul double %31, %68
  %70 = sub nsw i32 1023, %62
  %71 = sub nsw i32 %70, %64
  %72 = zext i32 %71 to i64
  %73 = shl i64 %72, 52
  %74 = bitcast i64 %73 to double
  %75 = fmul double %69, %74
  %76 = fmul double %53, %68
  %77 = fmul double %76, %74
  %78 = fadd double %75, -1.000000e+00
  %79 = fsub double %78, %75
  %80 = fsub double %78, %79
  %81 = fsub double %75, %80
  %82 = fsub double -1.000000e+00, %79
  %83 = fadd double %82, %81
  %84 = fadd double %77, %83
  %85 = fadd double %75, 1.000000e+00
  %86 = fsub double %85, %75
  %87 = fsub double %85, %86
  %88 = fsub double %75, %87
  %89 = fsub double 1.000000e+00, %86
  %90 = fadd double %89, %88
  %91 = fadd double %77, %90
  %92 = fdiv double 1.000000e+00, %85
  %93 = bitcast double %85 to i64
  %94 = and i64 %93, -134217728
  %95 = bitcast i64 %94 to double
  %96 = fsub double %85, %95
  %97 = bitcast double %92 to i64
  %98 = and i64 %97, -134217728
  %99 = bitcast i64 %98 to double
  %100 = fsub double %92, %99
  %101 = bitcast double %78 to i64
  %102 = and i64 %101, -134217728
  %103 = bitcast i64 %102 to double
  %104 = fsub double %78, %103
  %105 = fmul double %78, %92
  %106 = fmul double %103, %99
  %107 = fsub double %106, %105
  %108 = fmul double %100, %103
  %109 = fmul double %104, %99
  %110 = fmul double %104, %100
  %111 = fmul double %95, %99
  %112 = fmul double %100, %95
  %113 = fmul double %96, %99
  %114 = fmul double %96, %100
  %115 = fsub double 1.000000e+00, %111
  %116 = fsub double %115, %112
  %117 = fsub double %116, %113
  %118 = fsub double %117, %114
  %119 = fmul double %105, %118
  %120 = fadd double %107, %108
  %121 = fadd double %109, %120
  %122 = fadd double %110, %121
  %123 = fadd double %122, %119
  %124 = fmul double %105, %91
  %125 = fsub double %84, %124
  %126 = fmul double %92, %125
  %127 = fadd double %126, %123
  %128 = bitcast double %105 to i64
  %129 = and i64 %128, -134217728
  %130 = bitcast i64 %129 to double
  %131 = fsub double %105, %130
  %132 = fmul double %105, %105
  %133 = fmul double %130, %130
  %134 = fadd double %130, %130
  %135 = fmul double %134, %131
  %136 = fmul double %131, %131
  %137 = fadd double %127, %127
  %138 = fmul double %105, %137
  %139 = fsub double %133, %132
  %140 = fadd double %139, %135
  %141 = fadd double %136, %140
  %142 = fadd double %141, %138
  %143 = fmul double %132, %132
  %144 = fmul double %143, %143
  %145 = fmul double %132, 0x3FC0DB8A525B4A6B
  %146 = fadd double %145, 0x3FC3B3759FB81971
  %147 = fmul double %143, 0x3FC1BDC9AD06D760
  %148 = fadd double %147, %146
  %149 = fmul double %132, 0x3FC745C38C19C82A
  %150 = fadd double %149, 0x3FCC71C750354F90
  %151 = fmul double %132, 0x3FD2492492114D0C
  %152 = fadd double %151, 0x3FD999999999D9EB
  %153 = fmul double %143, %150
  %154 = fadd double %152, %153
  %155 = fmul double %144, %148
  %156 = fadd double %155, %154
  %157 = fmul double %132, %156
  %158 = fadd double %157, 0x3FE5555555555545
  %159 = sitofp i32 %62 to double
  %160 = bitcast double %159 to i64
  %161 = and i64 %160, -134217728
  %162 = bitcast i64 %161 to double
  %163 = fsub double %159, %162
  %164 = fmul double %162, 0x3FE62E42F8000000
  %165 = fmul double %162, 0x3E4BE8E7BC000000
  %166 = fmul double %163, 0x3FE62E42F8000000
  %167 = fmul double %163, 0x3E4BE8E7BC000000
  %168 = fmul double %159, 0x3C7ABC9E3B39803F
  %169 = fmul double %105, %132
  %170 = bitcast double %169 to i64
  %171 = and i64 %170, -134217728
  %172 = bitcast i64 %171 to double
  %173 = fsub double %169, %172
  %174 = bitcast double %158 to i64
  %175 = and i64 %174, -134217728
  %176 = bitcast i64 %175 to double
  %177 = fsub double %158, %176
  %178 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %173, i32 1
  %179 = insertelement <2 x double> undef, double %159, i32 0
  %180 = insertelement <2 x double> %179, double %177, i32 1
  %181 = fmul <2 x double> %178, %180
  %182 = extractelement <2 x double> %181, i32 0
  %183 = fsub double %164, %182
  %184 = fadd double %165, %183
  %185 = fadd double %166, %184
  %186 = fadd double %167, %185
  %187 = fadd double %168, %186
  %188 = fmul double %105, 2.000000e+00
  %189 = fmul double %127, 2.000000e+00
  %190 = bitcast double %132 to i64
  %191 = and i64 %190, -134217728
  %192 = bitcast i64 %191 to double
  %193 = fsub double %132, %192
  %194 = fmul double %130, %192
  %195 = fmul double %193, %130
  %196 = fmul double %131, %192
  %197 = fmul double %131, %193
  %198 = fmul double %132, %127
  %199 = fmul double %105, %142
  %200 = fsub double %194, %169
  %201 = fadd double %195, %200
  %202 = fadd double %196, %201
  %203 = fadd double %197, %202
  %204 = fadd double %203, %198
  %205 = fadd double %204, %199
  %206 = fmul double %172, %176
  %207 = fmul double %173, %176
  %208 = fmul double %177, %172
  %209 = insertelement <2 x double> undef, double %169, i32 0
  %210 = insertelement <2 x double> %209, double %205, i32 1
  %211 = insertelement <2 x double> undef, double %158, i32 0
  %212 = shufflevector <2 x double> %211, <2 x double> undef, <2 x i32> zeroinitializer
  %213 = fmul <2 x double> %210, %212
  %214 = extractelement <2 x double> %213, i32 0
  %215 = fsub double %206, %214
  %216 = fadd double %207, %215
  %217 = fadd double %208, %216
  %218 = insertelement <2 x double> undef, double %188, i32 0
  %219 = insertelement <2 x double> %218, double %217, i32 1
  %220 = fadd <2 x double> %181, %219
  %221 = extractelement <2 x double> %220, i32 0
  %222 = fsub double %182, %221
  %223 = fadd double %188, %222
  %224 = fadd double %187, %223
  %225 = fadd double %224, %189
  %226 = fadd <2 x double> %220, %213
  %227 = extractelement <2 x double> %226, i32 0
  %228 = fsub double %221, %227
  %229 = fadd double %214, %228
  %230 = fadd double %229, %225
  %231 = extractelement <2 x double> %226, i32 1
  %232 = fadd double %230, %231
  %233 = fcmp ogt double %4, 1.000000e+00
  %234 = fcmp une double %4, 1.000000e+00
  %235 = fadd double %227, %232
  %236 = fmul double %235, 5.000000e-01
  %237 = bitcast double %236 to i64
  %238 = select i1 %234, i64 %237, i64 9218868437227405312
  %239 = select i1 %233, i64 4294967295, i64 0
  %240 = shl nuw i64 %239, 32
  %241 = or i64 %240, %239
  %242 = or i64 %241, %238
  %243 = and i64 %2, -9223372036854775808
  %244 = xor i64 %242, %243
  %245 = bitcast i64 %244 to double
  %246 = fcmp oeq double %0, 0x7FF0000000000000
  %247 = fcmp oeq double %0, 0xFFF0000000000000
  %248 = or i1 %246, %247
  %249 = fcmp uno double %245, 0.000000e+00
  %250 = or i1 %248, %249
  %251 = select i1 %250, i64 4294967295, i64 0
  %252 = shl nuw i64 %251, 32
  %253 = fcmp uno double %0, 0.000000e+00
  %254 = select i1 %253, i64 4294967295, i64 0
  %255 = shl nuw i64 %254, 32
  %256 = or i64 %255, %254
  %257 = or i64 %256, %244
  %258 = or i64 %257, %251
  %259 = or i64 %258, %252
  %260 = bitcast i64 %259 to double
  ret double %260
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cbrtd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = fptosi double %28 to i32
  %30 = sitofp i32 %29 to double
  %31 = fmul double %30, 3.000000e+00
  %32 = fsub double %27, %31
  %33 = fptosi double %32 to i32
  %34 = icmp eq i32 %33, 1
  %35 = select i1 %34, double 0x3FF428A2F98D728B, double 1.000000e+00
  %36 = icmp eq i32 %33, 2
  %37 = select i1 %36, double 0x3FF965FEA53D6E3D, double %35
  %38 = add nsw i32 %29, -2048
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %39, 1023
  %41 = zext i32 %40 to i64
  %42 = shl i64 %41, 52
  %43 = bitcast i64 %42 to double
  %44 = fmul double %37, %43
  %45 = add i32 %29, 3071
  %46 = sub i32 %45, %39
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 52
  %49 = bitcast i64 %48 to double
  %50 = fmul double %44, %49
  %51 = bitcast double %50 to i64
  %52 = bitcast double %25 to i64
  %53 = and i64 %52, -9223372036854775808
  %54 = xor i64 %53, %51
  %55 = bitcast i64 %54 to double
  %56 = and i64 %52, 9223372036854775807
  %57 = bitcast i64 %56 to double
  %58 = fmul double %57, 0x3FE47CE4F76BED42
  %59 = fsub double 0x4007B141AAA12A9C, %58
  %60 = fmul double %59, %57
  %61 = fadd double %60, 0xC016EF22A5E505B3
  %62 = fmul double %61, %57
  %63 = fadd double %62, 0x401828DC834C5911
  %64 = fmul double %63, %57
  %65 = fadd double %64, 0xC00EDE0AF7836A8B
  %66 = fmul double %65, %57
  %67 = fadd double %66, 0x4001D887ACE5AC54
  %68 = fmul double %67, %67
  %69 = fmul double %68, %68
  %70 = fmul double %69, %57
  %71 = fsub double %70, %67
  %72 = fmul double %71, 0x3FD5555555555555
  %73 = fsub double %67, %72
  %74 = fmul double %73, %57
  %75 = fmul double %73, %74
  %76 = fmul double %75, 0x3FE5555555555555
  %77 = fmul double %73, %75
  %78 = fadd double %77, -1.000000e+00
  %79 = fmul double %76, %78
  %80 = fsub double %75, %79
  %81 = fmul double %80, %55
  ret double %81
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cbrtd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = fptosi double %28 to i32
  %30 = sitofp i32 %29 to double
  %31 = fmul double %30, 3.000000e+00
  %32 = fsub double %27, %31
  %33 = fptosi double %32 to i32
  %34 = icmp ne i32 %33, 1
  %35 = icmp ne i32 %33, 2
  %36 = select i1 %34, i64 4607182418800017408, i64 4608352999143469707
  %37 = select i1 %35, i64 %36, i64 4609827837958778429
  %38 = bitcast double %25 to i64
  %39 = and i64 %38, -9223372036854775808
  %40 = or i64 %37, %39
  %41 = bitcast i64 %40 to double
  %42 = select i1 %34, i64 0, i64 -4864489982484634594
  %43 = select i1 %35, i64 %42, i64 -4855069610512929015
  %44 = xor i64 %43, %39
  %45 = and i64 %38, 9223372036854775807
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = insertelement <2 x i64> %46, i64 %44, i32 1
  %48 = bitcast <2 x i64> %47 to <2 x double>
  %49 = bitcast i64 %45 to double
  %50 = fmul double %49, 0x3FE47CE4F76BED42
  %51 = fsub double 0x4007B141AAA12A9C, %50
  %52 = fmul double %51, %49
  %53 = fadd double %52, 0xC016EF22A5E505B3
  %54 = fmul double %53, %49
  %55 = fadd double %54, 0x401828DC834C5911
  %56 = fmul double %55, %49
  %57 = fadd double %56, 0xC00EDE0AF7836A8B
  %58 = fmul double %57, %49
  %59 = fadd double %58, 0x4001D887ACE5AC54
  %60 = fmul double %59, %59
  %61 = fmul double %60, %60
  %62 = fmul double %61, %49
  %63 = fsub double %62, %59
  %64 = fmul double %63, 0x3FD5555555555555
  %65 = fsub double %59, %64
  %66 = bitcast double %65 to i64
  %67 = and i64 %66, -134217728
  %68 = bitcast i64 %67 to double
  %69 = fsub double %65, %68
  %70 = fmul double %65, %65
  %71 = fmul double %68, %68
  %72 = fmul double %69, %68
  %73 = fmul double %69, %69
  %74 = fsub double %71, %70
  %75 = fadd double %72, %74
  %76 = fadd double %72, %75
  %77 = fadd double %73, %76
  %78 = bitcast double %70 to i64
  %79 = and i64 %78, -134217728
  %80 = bitcast i64 %79 to double
  %81 = fsub double %70, %80
  %82 = fmul double %70, %70
  %83 = fmul double %80, %80
  %84 = fmul double %81, %80
  %85 = fmul double %81, %81
  %86 = fmul double %70, %77
  %87 = fsub double %83, %82
  %88 = fadd double %84, %87
  %89 = fadd double %84, %88
  %90 = fadd double %85, %89
  %91 = fadd double %86, %90
  %92 = fadd double %86, %91
  %93 = bitcast double %82 to i64
  %94 = and i64 %93, -134217728
  %95 = bitcast i64 %94 to double
  %96 = fsub double %82, %95
  %97 = fmul double %82, %49
  %98 = insertelement <2 x i64> <i64 9223372036720558080, i64 undef>, i64 %40, i32 1
  %99 = insertelement <2 x i64> <i64 undef, i64 -4612409501507649536>, i64 %38, i32 0
  %100 = and <2 x i64> %98, %99
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = extractelement <2 x double> %101, i32 0
  %103 = fmul double %102, %95
  %104 = fmul double %96, %102
  %105 = insertelement <2 x double> undef, double %49, i32 0
  %106 = insertelement <2 x double> %105, double %41, i32 1
  %107 = fsub <2 x double> %106, %101
  %108 = extractelement <2 x double> %107, i32 0
  %109 = fmul double %108, %95
  %110 = fmul double %108, %96
  %111 = fmul double %92, %49
  %112 = fsub double %103, %97
  %113 = fadd double %104, %112
  %114 = fadd double %109, %113
  %115 = fadd double %110, %114
  %116 = fadd double %115, %111
  %117 = fsub double -0.000000e+00, %65
  %118 = fsub double %97, %65
  %119 = fsub double %118, %97
  %120 = fsub double %118, %119
  %121 = fsub double %97, %120
  %122 = fsub double %117, %119
  %123 = fadd double %122, %121
  %124 = fadd double %123, %116
  %125 = fadd double %118, %124
  %126 = fmul double %125, 0xBFE5555555555555
  %127 = fmul double %65, %126
  %128 = fadd double %70, %127
  %129 = fsub double %128, %70
  %130 = fsub double %128, %129
  %131 = fsub double %70, %130
  %132 = fsub double %127, %129
  %133 = fadd double %132, %131
  %134 = fadd double %77, %133
  %135 = fmul double %128, %49
  %136 = insertelement <2 x double> undef, double %128, i32 0
  %137 = insertelement <2 x double> %136, double %135, i32 1
  %138 = bitcast <2 x double> %137 to <2 x i64>
  %139 = and <2 x i64> %138, <i64 -134217728, i64 -134217728>
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = fsub <2 x double> %137, %140
  %142 = fmul double %135, %41
  %143 = fmul <2 x double> %101, %140
  %144 = fmul <2 x double> %141, %101
  %145 = fmul <2 x double> %107, %140
  %146 = fmul <2 x double> %107, %141
  %147 = insertelement <2 x double> undef, double %134, i32 0
  %148 = insertelement <2 x double> %147, double %135, i32 1
  %149 = fmul <2 x double> %148, %48
  %150 = insertelement <2 x double> undef, double %135, i32 0
  %151 = insertelement <2 x double> %150, double %142, i32 1
  %152 = fsub <2 x double> %143, %151
  %153 = fadd <2 x double> %144, %152
  %154 = fadd <2 x double> %145, %153
  %155 = fadd <2 x double> %146, %154
  %156 = fadd <2 x double> %149, %155
  %157 = extractelement <2 x double> %156, i32 0
  %158 = fmul double %157, %41
  %159 = extractelement <2 x double> %156, i32 1
  %160 = fadd double %158, %159
  %161 = fadd double %142, %160
  %162 = add nsw i32 %29, -2048
  %163 = ashr i32 %162, 1
  %164 = add nsw i32 %163, 1023
  %165 = zext i32 %164 to i64
  %166 = shl i64 %165, 52
  %167 = bitcast i64 %166 to double
  %168 = fmul double %161, %167
  %169 = add i32 %29, 3071
  %170 = sub i32 %169, %163
  %171 = zext i32 %170 to i64
  %172 = shl i64 %171, 52
  %173 = bitcast i64 %172 to double
  %174 = fmul double %168, %173
  %175 = fcmp une double %49, 0x7FF0000000000000
  %176 = fcmp une double %49, 0xFFF0000000000000
  %177 = or i64 %39, 9218868437227405312
  %178 = bitcast i64 %177 to double
  %179 = and i1 %176, %175
  %180 = select i1 %179, double %174, double %178
  %181 = fcmp une double %49, 0.000000e+00
  %182 = bitcast i64 %39 to double
  %183 = select i1 %181, double %180, double %182
  ret double %183
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp2d1_u10purec(double) local_unnamed_addr #0 {
  %2 = fcmp ogt double %0, 0.000000e+00
  %3 = select i1 %2, double 5.000000e-01, double -5.000000e-01
  %4 = fadd double %3, %0
  %5 = bitcast double %4 to i64
  %6 = fptosi double %4 to i32
  %7 = and i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = sub i64 %5, %8
  %10 = bitcast i64 %9 to double
  %11 = fptosi double %10 to i32
  %12 = sitofp i32 %11 to double
  %13 = icmp sgt i32 %11, 0
  %14 = select i1 %13, double 5.000000e-01, double -5.000000e-01
  %15 = fadd double %14, %12
  %16 = bitcast double %15 to i64
  %17 = fptosi double %15 to i32
  %18 = and i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = sub i64 %16, %19
  %21 = bitcast i64 %20 to double
  %22 = fptosi double %21 to i32
  %23 = fsub double %0, %12
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, 0x3DFE7901CA95E150
  %28 = fadd double %27, 0x3E3E6106D72C1C17
  %29 = fmul double %23, 0x3E7B5266946BF979
  %30 = fadd double %29, 0x3EB62BFCDABCBB81
  %31 = fmul double %23, 0x3EEFFCBFBC12CC80
  %32 = fadd double %31, 0x3F24309130CB34EC
  %33 = fmul double %24, %30
  %34 = fadd double %32, %33
  %35 = fmul double %23, 0x3F55D87FE78C5960
  %36 = fadd double %35, 0x3F83B2AB6FBA08F0
  %37 = fmul double %23, 0x3FAC6B08D704A01F
  %38 = fadd double %37, 0x3FCEBFBDFF82C5A1
  %39 = fmul double %24, %36
  %40 = fadd double %38, %39
  %41 = fmul double %25, %34
  %42 = fadd double %40, %41
  %43 = fmul double %28, %26
  %44 = fadd double %43, %42
  %45 = fmul double %23, %44
  %46 = fadd double %45, 0x3FE62E42FEFA39EF
  %47 = bitcast double %46 to i64
  %48 = and i64 %47, -134217728
  %49 = bitcast i64 %48 to double
  %50 = fsub double %46, %49
  %51 = bitcast double %23 to i64
  %52 = and i64 %51, -134217728
  %53 = bitcast i64 %52 to double
  %54 = fsub double %23, %53
  %55 = fmul double %23, %46
  %56 = fmul double %53, %49
  %57 = fmul double %50, %53
  %58 = fmul double %54, %49
  %59 = fmul double %54, %50
  %60 = fsub double %56, %55
  %61 = fadd double %57, %60
  %62 = fadd double %58, %61
  %63 = fadd double %59, %62
  %64 = fadd double %55, 1.000000e+00
  %65 = fsub double 1.000000e+00, %64
  %66 = fadd double %55, %65
  %67 = fadd double %66, %63
  %68 = fadd double %64, %67
  %69 = ashr i32 %22, 1
  %70 = add nsw i32 %69, 1023
  %71 = zext i32 %70 to i64
  %72 = shl i64 %71, 52
  %73 = bitcast i64 %72 to double
  %74 = fmul double %68, %73
  %75 = add i32 %22, 1023
  %76 = sub i32 %75, %69
  %77 = zext i32 %76 to i64
  %78 = shl i64 %77, 52
  %79 = bitcast i64 %78 to double
  %80 = fmul double %74, %79
  %81 = fcmp ult double %0, 1.024000e+03
  %82 = fcmp olt double %0, -2.000000e+03
  %83 = bitcast double %80 to i64
  %84 = select i1 %81, i64 %83, i64 9218868437227405312
  %85 = select i1 %82, i64 4294967295, i64 0
  %86 = shl nuw i64 %85, 32
  %87 = or i64 %86, %85
  %88 = xor i64 %87, -1
  %89 = and i64 %84, %88
  %90 = bitcast i64 %89 to double
  ret double %90
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp2d1_u35purec(double) local_unnamed_addr #0 {
  %2 = fcmp ogt double %0, 0.000000e+00
  %3 = select i1 %2, double 5.000000e-01, double -5.000000e-01
  %4 = fadd double %3, %0
  %5 = bitcast double %4 to i64
  %6 = fptosi double %4 to i32
  %7 = and i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = sub i64 %5, %8
  %10 = bitcast i64 %9 to double
  %11 = fptosi double %10 to i32
  %12 = sitofp i32 %11 to double
  %13 = icmp sgt i32 %11, 0
  %14 = select i1 %13, double 5.000000e-01, double -5.000000e-01
  %15 = fadd double %14, %12
  %16 = bitcast double %15 to i64
  %17 = fptosi double %15 to i32
  %18 = and i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = sub i64 %16, %19
  %21 = bitcast i64 %20 to double
  %22 = fptosi double %21 to i32
  %23 = fsub double %0, %12
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, 0x3E7B5266946BF979
  %28 = fadd double %27, 0x3EB62BFCDABCBB81
  %29 = fmul double %23, 0x3EEFFCBFBC12CC80
  %30 = fadd double %29, 0x3F24309130CB34EC
  %31 = insertelement <2 x double> <double 0x3DFE7901CA95E150, double undef>, double %24, i32 1
  %32 = insertelement <2 x double> undef, double %23, i32 0
  %33 = insertelement <2 x double> %32, double %28, i32 1
  %34 = fmul <2 x double> %31, %33
  %35 = insertelement <2 x double> <double 0x3E3E6106D72C1C17, double undef>, double %30, i32 1
  %36 = fadd <2 x double> %35, %34
  %37 = fmul double %23, 0x3F55D87FE78C5960
  %38 = fadd double %37, 0x3F83B2AB6FBA08F0
  %39 = fmul double %23, 0x3FAC6B08D704A01F
  %40 = fadd double %39, 0x3FCEBFBDFF82C5A1
  %41 = fmul double %24, %38
  %42 = fadd double %40, %41
  %43 = insertelement <2 x double> undef, double %26, i32 0
  %44 = insertelement <2 x double> %43, double %25, i32 1
  %45 = fmul <2 x double> %36, %44
  %46 = extractelement <2 x double> %45, i32 1
  %47 = fadd double %42, %46
  %48 = extractelement <2 x double> %45, i32 0
  %49 = fadd double %48, %47
  %50 = fmul double %23, %49
  %51 = fadd double %50, 0x3FE62E42FEFA39EF
  %52 = fmul double %23, %51
  %53 = fadd double %52, 1.000000e+00
  %54 = ashr i32 %22, 1
  %55 = add nsw i32 %54, 1023
  %56 = zext i32 %55 to i64
  %57 = shl i64 %56, 52
  %58 = bitcast i64 %57 to double
  %59 = fmul double %53, %58
  %60 = add i32 %22, 1023
  %61 = sub i32 %60, %54
  %62 = zext i32 %61 to i64
  %63 = shl i64 %62, 52
  %64 = bitcast i64 %63 to double
  %65 = fmul double %59, %64
  %66 = fcmp ult double %0, 1.024000e+03
  %67 = fcmp olt double %0, -2.000000e+03
  %68 = bitcast double %65 to i64
  %69 = select i1 %66, i64 %68, i64 9218868437227405312
  %70 = select i1 %67, i64 4294967295, i64 0
  %71 = shl nuw i64 %70, 32
  %72 = or i64 %71, %70
  %73 = xor i64 %72, -1
  %74 = and i64 %69, %73
  %75 = bitcast i64 %74 to double
  ret double %75
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp10d1_u10purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = fcmp ogt double %2, 0.000000e+00
  %4 = select i1 %3, double 5.000000e-01, double -5.000000e-01
  %5 = fadd double %2, %4
  %6 = bitcast double %5 to i64
  %7 = fptosi double %5 to i32
  %8 = and i32 %7, 1
  %9 = zext i32 %8 to i64
  %10 = sub i64 %6, %9
  %11 = bitcast i64 %10 to double
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = icmp sgt i32 %12, 0
  %15 = select i1 %14, double 5.000000e-01, double -5.000000e-01
  %16 = fadd double %15, %13
  %17 = bitcast double %16 to i64
  %18 = fptosi double %16 to i32
  %19 = and i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = sub i64 %17, %20
  %22 = bitcast i64 %21 to double
  %23 = fptosi double %22 to i32
  %24 = fmul double %13, 0x3FD34413509F7000
  %25 = fsub double %0, %24
  %26 = fmul double %13, 0x3D43FDE623E2566B
  %27 = fsub double %25, %26
  %28 = fmul double %27, 0x3F2F9B875F46726F
  %29 = fadd double %28, 0x3F52F6DBB8E3072A
  %30 = fmul double %27, %29
  %31 = fadd double %30, 0x3F748988CFF14706
  %32 = fmul double %27, %31
  %33 = fadd double %32, 0x3F9411663B046154
  %34 = fmul double %27, %33
  %35 = fadd double %34, 0x3FB16E4DF78FCA37
  %36 = fmul double %27, %35
  %37 = fadd double %36, 0x3FCA7ED709F2107E
  %38 = fmul double %27, %37
  %39 = fadd double %38, 0x3FE1429FFD1EB6E2
  %40 = fmul double %27, %39
  %41 = fadd double %40, 0x3FF2BD7609FD573B
  %42 = fmul double %27, %41
  %43 = fadd double %42, 0x4000470591DE2C43
  %44 = fmul double %27, %43
  %45 = fadd double %44, 0x40053524C73CEA78
  %46 = fmul double %27, %45
  %47 = fadd double %46, 0x40026BB1BBB55516
  %48 = bitcast double %47 to i64
  %49 = and i64 %48, -134217728
  %50 = bitcast i64 %49 to double
  %51 = fsub double %47, %50
  %52 = bitcast double %27 to i64
  %53 = and i64 %52, -134217728
  %54 = bitcast i64 %53 to double
  %55 = fsub double %27, %54
  %56 = fmul double %27, %47
  %57 = fmul double %54, %50
  %58 = fmul double %51, %54
  %59 = fmul double %55, %50
  %60 = fmul double %55, %51
  %61 = fsub double %57, %56
  %62 = fadd double %58, %61
  %63 = fadd double %59, %62
  %64 = fadd double %60, %63
  %65 = fadd double %56, 1.000000e+00
  %66 = fsub double 1.000000e+00, %65
  %67 = fadd double %56, %66
  %68 = fadd double %67, %64
  %69 = fadd double %65, %68
  %70 = ashr i32 %23, 1
  %71 = add nsw i32 %70, 1023
  %72 = zext i32 %71 to i64
  %73 = shl i64 %72, 52
  %74 = bitcast i64 %73 to double
  %75 = fmul double %69, %74
  %76 = add i32 %23, 1023
  %77 = sub i32 %76, %70
  %78 = zext i32 %77 to i64
  %79 = shl i64 %78, 52
  %80 = bitcast i64 %79 to double
  %81 = fmul double %75, %80
  %82 = fcmp ule double %0, 0x40734413509F79FE
  %83 = fcmp olt double %0, -3.500000e+02
  %84 = bitcast double %81 to i64
  %85 = select i1 %82, i64 %84, i64 9218868437227405312
  %86 = select i1 %83, i64 4294967295, i64 0
  %87 = shl nuw i64 %86, 32
  %88 = or i64 %87, %86
  %89 = xor i64 %88, -1
  %90 = and i64 %85, %89
  %91 = bitcast i64 %90 to double
  ret double %91
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_exp10d1_u35purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x400A934F0979A371
  %3 = fcmp ogt double %2, 0.000000e+00
  %4 = select i1 %3, double 5.000000e-01, double -5.000000e-01
  %5 = fadd double %2, %4
  %6 = bitcast double %5 to i64
  %7 = fptosi double %5 to i32
  %8 = and i32 %7, 1
  %9 = zext i32 %8 to i64
  %10 = sub i64 %6, %9
  %11 = bitcast i64 %10 to double
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = icmp sgt i32 %12, 0
  %15 = select i1 %14, double 5.000000e-01, double -5.000000e-01
  %16 = fadd double %15, %13
  %17 = bitcast double %16 to i64
  %18 = fptosi double %16 to i32
  %19 = and i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = sub i64 %17, %20
  %22 = bitcast i64 %21 to double
  %23 = fptosi double %22 to i32
  %24 = fmul double %13, 0x3FD34413509F7000
  %25 = fsub double %0, %24
  %26 = fmul double %13, 0x3D43FDE623E2566B
  %27 = fsub double %25, %26
  %28 = fmul double %27, %27
  %29 = fmul double %28, %28
  %30 = fmul double %29, %29
  %31 = fmul double %27, 0x3F9411663B046154
  %32 = fadd double %31, 0x3FB16E4DF78FCA37
  %33 = insertelement <2 x double> undef, double %27, i32 0
  %34 = shufflevector <2 x double> %33, <2 x double> undef, <2 x i32> zeroinitializer
  %35 = fmul <2 x double> %34, <double 0x3F52F6DBB8E3072A, double 0x3FCA7ED709F2107E>
  %36 = fadd <2 x double> %35, <double 0x3F748988CFF14706, double 0x3FE1429FFD1EB6E2>
  %37 = insertelement <2 x double> <double 0x3F2F9B875F46726F, double undef>, double %32, i32 1
  %38 = insertelement <2 x double> undef, double %28, i32 0
  %39 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %40 = fmul <2 x double> %37, %39
  %41 = fadd <2 x double> %40, %36
  %42 = fmul double %27, 0x3FF2BD7609FD573B
  %43 = fadd double %42, 0x4000470591DE2C43
  %44 = fmul double %27, 0x40053524C73CEA78
  %45 = fadd double %44, 0x40026BB1BBB55516
  %46 = fmul double %28, %43
  %47 = fadd double %45, %46
  %48 = insertelement <2 x double> undef, double %30, i32 0
  %49 = insertelement <2 x double> %48, double %29, i32 1
  %50 = fmul <2 x double> %49, %41
  %51 = extractelement <2 x double> %50, i32 1
  %52 = fadd double %47, %51
  %53 = extractelement <2 x double> %50, i32 0
  %54 = fadd double %53, %52
  %55 = fmul double %27, %54
  %56 = fadd double %55, 1.000000e+00
  %57 = ashr i32 %23, 1
  %58 = add nsw i32 %57, 1023
  %59 = zext i32 %58 to i64
  %60 = shl i64 %59, 52
  %61 = bitcast i64 %60 to double
  %62 = fmul double %56, %61
  %63 = add i32 %23, 1023
  %64 = sub i32 %63, %57
  %65 = zext i32 %64 to i64
  %66 = shl i64 %65, 52
  %67 = bitcast i64 %66 to double
  %68 = fmul double %62, %67
  %69 = fcmp ule double %0, 0x40734413509F79FE
  %70 = fcmp olt double %0, -3.500000e+02
  %71 = bitcast double %68 to i64
  %72 = select i1 %69, i64 %71, i64 9218868437227405312
  %73 = select i1 %70, i64 4294967295, i64 0
  %74 = shl nuw i64 %73, 32
  %75 = or i64 %74, %73
  %76 = xor i64 %75, -1
  %77 = and i64 %72, %76
  %78 = bitcast i64 %77 to double
  ret double %78
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_expm1d1_u10purec(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 0.000000e+00
  %3 = fmul double %2, 0x3FF71547652B82FE
  %4 = fcmp ogt double %3, 0.000000e+00
  %5 = select i1 %4, double 5.000000e-01, double -5.000000e-01
  %6 = fadd double %3, %5
  %7 = bitcast double %6 to i64
  %8 = fptosi double %6 to i32
  %9 = and i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = sub i64 %7, %10
  %12 = bitcast i64 %11 to double
  %13 = fptosi double %12 to i32
  %14 = sitofp i32 %13 to double
  %15 = icmp sgt i32 %13, 0
  %16 = select i1 %15, double 5.000000e-01, double -5.000000e-01
  %17 = fadd double %16, %14
  %18 = bitcast double %17 to i64
  %19 = fptosi double %17 to i32
  %20 = and i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = sub i64 %18, %21
  %23 = bitcast i64 %22 to double
  %24 = fptosi double %23 to i32
  %25 = fmul double %14, 0xBFE62E42FEFA3000
  %26 = fadd double %25, %0
  %27 = fsub double %26, %0
  %28 = fsub double %26, %27
  %29 = fsub double %0, %28
  %30 = fsub double %25, %27
  %31 = fadd double %30, %29
  %32 = fadd double %31, 0.000000e+00
  %33 = fmul double %14, 0xBD53DE6AF278ECE6
  %34 = fadd double %33, %26
  %35 = fsub double %34, %26
  %36 = fsub double %34, %35
  %37 = fsub double %26, %36
  %38 = fsub double %33, %35
  %39 = fadd double %38, %37
  %40 = fadd double %39, %32
  %41 = bitcast double %34 to i64
  %42 = and i64 %41, -134217728
  %43 = bitcast i64 %42 to double
  %44 = fsub double %34, %43
  %45 = fmul double %34, %34
  %46 = fmul double %43, %43
  %47 = fadd double %43, %43
  %48 = fmul double %47, %44
  %49 = fmul double %44, %44
  %50 = fadd double %40, %40
  %51 = fmul double %34, %50
  %52 = fsub double %46, %45
  %53 = fadd double %52, %48
  %54 = fadd double %49, %53
  %55 = fadd double %51, %54
  %56 = bitcast double %45 to i64
  %57 = and i64 %56, -134217728
  %58 = bitcast i64 %57 to double
  %59 = fsub double %45, %58
  %60 = fmul double %45, %45
  %61 = fmul double %58, %58
  %62 = fadd double %58, %58
  %63 = fmul double %62, %59
  %64 = fmul double %59, %59
  %65 = fadd double %55, %55
  %66 = fmul double %45, %65
  %67 = fsub double %61, %60
  %68 = fadd double %67, %63
  %69 = fadd double %64, %68
  %70 = fadd double %69, %66
  %71 = fmul double %60, %60
  %72 = fmul double %34, 0x3DE60632A887194C
  %73 = fadd double %72, 0x3E21F8EAF54829DC
  %74 = fmul double %34, 0x3E5AE652E8103AB6
  %75 = fadd double %74, 0x3E927E4C95A9765C
  %76 = fmul double %34, 0x3EC71DE3A11D7656
  %77 = fadd double %76, 0x3EFA01A01AF6F0B7
  %78 = fmul double %45, %75
  %79 = fadd double %77, %78
  %80 = fmul double %34, 0x3F2A01A01A02D002
  %81 = fadd double %80, 0x3F56C16C16C145CC
  %82 = fmul double %34, 0x3F81111111111119
  %83 = fadd double %82, 0x3FA555555555555A
  %84 = fmul double %45, %81
  %85 = fadd double %83, %84
  %86 = fmul double %60, %79
  %87 = fmul double %34, 0x3FC5555555555555
  %88 = fmul double %43, 0x3FC5555550000000
  %89 = fmul double %44, 0x3FC5555550000000
  %90 = fmul double %43, 0x3E25555554000000
  %91 = fmul double %44, 0x3E25555554000000
  %92 = fmul double %40, 0x3FC5555555555555
  %93 = fsub double %88, %87
  %94 = fadd double %89, %93
  %95 = fadd double %90, %94
  %96 = fadd double %91, %95
  %97 = fadd double %92, %96
  %98 = fadd double %87, 5.000000e-01
  %99 = fsub double 5.000000e-01, %98
  %100 = fadd double %87, %99
  %101 = fadd double %100, %97
  %102 = bitcast double %98 to i64
  %103 = and i64 %102, -134217728
  %104 = bitcast i64 %103 to double
  %105 = fsub double %98, %104
  %106 = insertelement <2 x double> undef, double %73, i32 0
  %107 = insertelement <2 x double> %106, double %34, i32 1
  %108 = insertelement <2 x double> undef, double %71, i32 0
  %109 = insertelement <2 x double> %108, double %98, i32 1
  %110 = fmul <2 x double> %107, %109
  %111 = fmul double %43, %104
  %112 = fmul double %105, %43
  %113 = fmul double %44, %104
  %114 = fmul double %44, %105
  %115 = fmul double %98, %40
  %116 = fmul double %34, %101
  %117 = extractelement <2 x double> %110, i32 1
  %118 = fsub double %111, %117
  %119 = fadd double %112, %118
  %120 = fadd double %113, %119
  %121 = fadd double %114, %120
  %122 = fadd double %115, %121
  %123 = fadd double %116, %122
  %124 = fadd double %117, 1.000000e+00
  %125 = insertelement <2 x double> <double undef, double 1.000000e+00>, double %85, i32 0
  %126 = insertelement <2 x double> undef, double %86, i32 0
  %127 = insertelement <2 x double> %126, double %124, i32 1
  %128 = fadd <2 x double> %125, %127
  %129 = fsub <2 x double> %125, %127
  %130 = shufflevector <2 x double> %128, <2 x double> %129, <2 x i32> <i32 0, i32 3>
  %131 = fadd <2 x double> %110, %130
  %132 = bitcast double %124 to i64
  %133 = and i64 %132, -134217728
  %134 = bitcast i64 %133 to double
  %135 = fsub double %124, %134
  %136 = fmul double %34, %124
  %137 = fmul double %43, %134
  %138 = fmul double %135, %43
  %139 = fsub double %137, %136
  %140 = fadd double %138, %139
  %141 = fadd double %136, 1.000000e+00
  %142 = fsub double 1.000000e+00, %141
  %143 = fadd double %136, %142
  %144 = bitcast double %60 to i64
  %145 = and i64 %144, -134217728
  %146 = bitcast i64 %145 to double
  %147 = fsub double %60, %146
  %148 = extractelement <2 x double> %131, i32 0
  %149 = bitcast double %148 to i64
  %150 = and i64 %149, -134217728
  %151 = bitcast i64 %150 to double
  %152 = insertelement <2 x double> undef, double %151, i32 0
  %153 = insertelement <2 x double> %152, double %123, i32 1
  %154 = fsub <2 x double> %131, %153
  %155 = fadd <2 x double> %131, %153
  %156 = shufflevector <2 x double> %154, <2 x double> %155, <2 x i32> <i32 0, i32 3>
  %157 = fmul double %60, %148
  %158 = insertelement <2 x double> undef, double %146, i32 0
  %159 = insertelement <2 x double> %158, double %44, i32 1
  %160 = insertelement <2 x double> %152, double %134, i32 1
  %161 = fmul <2 x double> %159, %160
  %162 = insertelement <2 x double> undef, double %147, i32 0
  %163 = insertelement <2 x double> %162, double %44, i32 1
  %164 = insertelement <2 x double> %152, double %135, i32 1
  %165 = fmul <2 x double> %163, %164
  %166 = extractelement <2 x double> %154, i32 0
  %167 = insertelement <2 x double> undef, double %166, i32 0
  %168 = insertelement <2 x double> %167, double %124, i32 1
  %169 = insertelement <2 x double> %158, double %40, i32 1
  %170 = fmul <2 x double> %168, %169
  %171 = insertelement <2 x double> %162, double %34, i32 1
  %172 = fmul <2 x double> %171, %156
  %173 = fmul double %148, %70
  %174 = insertelement <2 x double> undef, double %157, i32 0
  %175 = insertelement <2 x double> %174, double %140, i32 1
  %176 = fsub <2 x double> %161, %175
  %177 = fadd <2 x double> %161, %175
  %178 = shufflevector <2 x double> %176, <2 x double> %177, <2 x i32> <i32 0, i32 3>
  %179 = fadd <2 x double> %165, %178
  %180 = fadd <2 x double> %170, %179
  %181 = fadd <2 x double> %172, %180
  %182 = insertelement <2 x double> undef, double %173, i32 0
  %183 = insertelement <2 x double> %182, double %143, i32 1
  %184 = fadd <2 x double> %183, %181
  %185 = fadd double %141, %157
  %186 = fsub double %141, %185
  %187 = fadd double %157, %186
  %188 = extractelement <2 x double> %184, i32 1
  %189 = fadd double %187, %188
  %190 = extractelement <2 x double> %184, i32 0
  %191 = fadd double %190, %189
  %192 = ashr i32 %24, 1
  %193 = add nsw i32 %192, 1023
  %194 = zext i32 %193 to i64
  %195 = shl i64 %194, 52
  %196 = bitcast i64 %195 to double
  %197 = fmul double %185, %196
  %198 = add i32 %24, 1023
  %199 = sub i32 %198, %192
  %200 = zext i32 %199 to i64
  %201 = shl i64 %200, 52
  %202 = bitcast i64 %201 to double
  %203 = fmul double %197, %202
  %204 = fmul double %191, %196
  %205 = fmul double %204, %202
  %206 = fcmp olt double %0, -1.000000e+03
  %207 = bitcast double %203 to i64
  %208 = select i1 %206, i64 4294967295, i64 0
  %209 = shl nuw i64 %208, 32
  %210 = or i64 %209, %208
  %211 = xor i64 %210, -1
  %212 = and i64 %207, %211
  %213 = bitcast i64 %212 to double
  %214 = bitcast double %205 to i64
  %215 = and i64 %214, %211
  %216 = bitcast i64 %215 to double
  %217 = fadd double %213, -1.000000e+00
  %218 = fsub double %217, %213
  %219 = fsub double %217, %218
  %220 = fsub double %213, %219
  %221 = fsub double -1.000000e+00, %218
  %222 = fadd double %221, %220
  %223 = fadd double %222, %216
  %224 = fadd double %217, %223
  %225 = fcmp ule double %0, 0x40862E42FEFA39EF
  %226 = select i1 %225, double %224, double 0x7FF0000000000000
  %227 = fcmp uge double %0, 0xC0425E4F7B2737FA
  %228 = select i1 %227, double %226, double -1.000000e+00
  %229 = bitcast double %0 to i64
  %230 = icmp eq i64 %229, -9223372036854775808
  %231 = select i1 %230, double -0.000000e+00, double %228
  ret double %231
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log10d1_u10purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = bitcast double %27 to i64
  %35 = and i64 %34, -134217728
  %36 = bitcast i64 %35 to double
  %37 = fsub double %27, %36
  %38 = bitcast double %33 to i64
  %39 = and i64 %38, -134217728
  %40 = bitcast i64 %39 to double
  %41 = fsub double %33, %40
  %42 = bitcast double %21 to i64
  %43 = and i64 %42, -134217728
  %44 = bitcast i64 %43 to double
  %45 = fsub double %21, %44
  %46 = fmul double %21, %33
  %47 = fmul double %44, %40
  %48 = fsub double %47, %46
  %49 = fmul double %41, %44
  %50 = fmul double %45, %40
  %51 = fmul double %45, %41
  %52 = fmul double %36, %40
  %53 = fmul double %41, %36
  %54 = fmul double %37, %40
  %55 = fmul double %37, %41
  %56 = fsub double 1.000000e+00, %52
  %57 = fsub double %56, %53
  %58 = fsub double %57, %54
  %59 = fsub double %58, %55
  %60 = fmul double %46, %59
  %61 = fadd double %48, %49
  %62 = fadd double %50, %61
  %63 = fadd double %51, %62
  %64 = fadd double %63, %60
  %65 = fmul double %46, %32
  %66 = fsub double %26, %65
  %67 = fmul double %33, %66
  %68 = fadd double %67, %64
  %69 = fmul double %46, %46
  %70 = fmul double %69, %69
  %71 = fmul double %70, %70
  %72 = fmul double %69, 0x3FB0F63BD2A55192
  %73 = fadd double %72, 0x3FB4381A2BF55D48
  %74 = insertelement <2 x double> undef, double %70, i32 0
  %75 = insertelement <2 x double> %74, double %69, i32 1
  %76 = fmul <2 x double> %75, <double 0x3FB10895F3EA9496, double 0x3FB8B4D992891F74>
  %77 = insertelement <2 x double> <double undef, double 0x3FBFC3FA6F6D7821>, double %73, i32 0
  %78 = fadd <2 x double> %76, %77
  %79 = fmul double %69, 0x3FC63C6277499B88
  %80 = fadd double %79, 0x3FD287A7636F4570
  %81 = insertelement <2 x double> undef, double %71, i32 0
  %82 = insertelement <2 x double> %81, double %70, i32 1
  %83 = fmul <2 x double> %82, %78
  %84 = extractelement <2 x double> %83, i32 1
  %85 = fadd double %80, %84
  %86 = extractelement <2 x double> %83, i32 0
  %87 = fadd double %86, %85
  %88 = sitofp i32 %20 to double
  %89 = bitcast double %88 to i64
  %90 = and i64 %89, -134217728
  %91 = bitcast i64 %90 to double
  %92 = fsub double %88, %91
  %93 = fmul double %91, 0x3FD3441350000000
  %94 = fmul double %91, 0x3E03EF3FE0000000
  %95 = fmul double %92, 0x3FD3441350000000
  %96 = insertelement <2 x double> <double 0x3FD34413509F79FF, double undef>, double %92, i32 1
  %97 = insertelement <2 x double> <double undef, double 0x3E03EF3FE0000000>, double %88, i32 0
  %98 = fmul <2 x double> %96, %97
  %99 = fmul double %88, 0x3C49DC1DA994FD21
  %100 = extractelement <2 x double> %98, i32 0
  %101 = fsub double %93, %100
  %102 = fadd double %94, %101
  %103 = fadd double %95, %102
  %104 = bitcast double %46 to i64
  %105 = and i64 %104, -134217728
  %106 = bitcast i64 %105 to double
  %107 = fsub double %46, %106
  %108 = fmul double %46, 0x3FEBCB7B1526E50E
  %109 = fmul double %106, 0x3FEBCB7B10000000
  %110 = fmul double %107, 0x3FEBCB7B10000000
  %111 = fmul double %106, 0x3E449B9438000000
  %112 = fmul double %107, 0x3E449B9438000000
  %113 = fmul double %46, 0x3C6A5B1DC915F38F
  %114 = fmul double %68, 0x3FEBCB7B1526E50E
  %115 = fsub double %109, %108
  %116 = fadd double %110, %115
  %117 = fadd double %111, %116
  %118 = fadd double %112, %117
  %119 = fadd double %113, %118
  %120 = fadd double %119, %114
  %121 = insertelement <2 x double> undef, double %108, i32 0
  %122 = insertelement <2 x double> %121, double %103, i32 1
  %123 = fadd <2 x double> %98, %122
  %124 = extractelement <2 x double> %123, i32 0
  %125 = fsub double %100, %124
  %126 = fadd double %108, %125
  %127 = fmul double %46, %69
  %128 = fmul double %127, %87
  %129 = fadd double %124, %128
  %130 = insertelement <2 x double> undef, double %129, i32 0
  %131 = insertelement <2 x double> %130, double %99, i32 1
  %132 = fsub <2 x double> %123, %131
  %133 = insertelement <2 x double> undef, double %128, i32 0
  %134 = insertelement <2 x double> %133, double %126, i32 1
  %135 = fadd <2 x double> %134, %132
  %136 = extractelement <2 x double> %135, i32 1
  %137 = fadd double %136, %120
  %138 = extractelement <2 x double> %135, i32 0
  %139 = fadd double %138, %137
  %140 = fadd double %129, %139
  %141 = fcmp une double %4, 0x7FF0000000000000
  %142 = select i1 %141, double %140, double 0x7FF0000000000000
  %143 = fcmp oge double %4, 0.000000e+00
  %144 = select i1 %143, double %142, double 0x7FF8000000000000
  %145 = fcmp une double %4, 0.000000e+00
  %146 = select i1 %145, double %144, double 0xFFF0000000000000
  ret double %146
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log2d1_u10purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %21, 1.000000e+00
  %23 = fsub double %21, %22
  %24 = fsub double -1.000000e+00, %23
  %25 = fsub double %18, %22
  %26 = fadd double %25, %24
  %27 = fadd double %18, 1.000000e+00
  %28 = fadd double %27, -1.000000e+00
  %29 = fsub double %27, %28
  %30 = fsub double 1.000000e+00, %29
  %31 = fsub double %18, %28
  %32 = fadd double %31, %30
  %33 = fdiv double 1.000000e+00, %27
  %34 = bitcast double %27 to i64
  %35 = and i64 %34, -134217728
  %36 = bitcast i64 %35 to double
  %37 = fsub double %27, %36
  %38 = bitcast double %33 to i64
  %39 = and i64 %38, -134217728
  %40 = bitcast i64 %39 to double
  %41 = fsub double %33, %40
  %42 = bitcast double %21 to i64
  %43 = and i64 %42, -134217728
  %44 = bitcast i64 %43 to double
  %45 = fsub double %21, %44
  %46 = fmul double %21, %33
  %47 = fmul double %44, %40
  %48 = fsub double %47, %46
  %49 = fmul double %41, %44
  %50 = fmul double %45, %40
  %51 = fmul double %45, %41
  %52 = fmul double %36, %40
  %53 = fmul double %41, %36
  %54 = fmul double %37, %40
  %55 = fmul double %37, %41
  %56 = fsub double 1.000000e+00, %52
  %57 = fsub double %56, %53
  %58 = fsub double %57, %54
  %59 = fsub double %58, %55
  %60 = fmul double %46, %59
  %61 = fadd double %48, %49
  %62 = fadd double %50, %61
  %63 = fadd double %51, %62
  %64 = fadd double %63, %60
  %65 = fmul double %46, %32
  %66 = fsub double %26, %65
  %67 = fmul double %33, %66
  %68 = fadd double %67, %64
  %69 = fmul double %46, %46
  %70 = fmul double %69, %69
  %71 = fmul double %70, %70
  %72 = fmul double %69, 0x3FCC2B7A962850E9
  %73 = fadd double %72, 0x3FD0CAAEEB877481
  %74 = insertelement <2 x double> undef, double %70, i32 0
  %75 = insertelement <2 x double> %74, double %69, i32 1
  %76 = fmul <2 x double> %75, <double 0x3FCC501739F17BA9, double 0x3FD484AC6A7CB2DD>
  %77 = insertelement <2 x double> <double undef, double 0x3FDA617636C2C254>, double %73, i32 0
  %78 = fadd <2 x double> %76, %77
  %79 = fmul double %69, 0x3FE2776C50E7EDE9
  %80 = fadd double %79, 0x3FEEC709DC3A07B2
  %81 = insertelement <2 x double> undef, double %71, i32 0
  %82 = insertelement <2 x double> %81, double %70, i32 1
  %83 = fmul <2 x double> %82, %78
  %84 = extractelement <2 x double> %83, i32 1
  %85 = fadd double %80, %84
  %86 = extractelement <2 x double> %83, i32 0
  %87 = fadd double %86, %85
  %88 = sitofp i32 %20 to double
  %89 = bitcast double %46 to i64
  %90 = and i64 %89, -134217728
  %91 = bitcast i64 %90 to double
  %92 = fsub double %46, %91
  %93 = fmul double %91, 0x4007154760000000
  %94 = fmul double %92, 0x4007154760000000
  %95 = fmul double %91, 0x3E64AE0BF8000000
  %96 = fmul double %92, 0x3E64AE0BF8000000
  %97 = fmul double %46, 0x3C5BEDDA32EBBCB1
  %98 = fmul double %68, 0x40071547652B82FE
  %99 = fmul double %46, %69
  %100 = insertelement <2 x double> undef, double %99, i32 0
  %101 = insertelement <2 x double> %100, double %46, i32 1
  %102 = insertelement <2 x double> <double undef, double 0x40071547652B82FE>, double %87, i32 0
  %103 = fmul <2 x double> %101, %102
  %104 = extractelement <2 x double> %103, i32 1
  %105 = fsub double %93, %104
  %106 = fadd double %94, %105
  %107 = fadd double %95, %106
  %108 = fadd double %96, %107
  %109 = fadd double %97, %108
  %110 = fadd double %109, %98
  %111 = fadd double %104, %88
  %112 = extractelement <2 x double> %103, i32 0
  %113 = fadd double %111, %112
  %114 = insertelement <2 x double> undef, double %113, i32 0
  %115 = insertelement <2 x double> %114, double %111, i32 1
  %116 = insertelement <2 x double> undef, double %111, i32 0
  %117 = insertelement <2 x double> %116, double %88, i32 1
  %118 = fsub <2 x double> %115, %117
  %119 = fsub <2 x double> %115, %118
  %120 = fsub <2 x double> %117, %119
  %121 = fsub <2 x double> %103, %118
  %122 = fadd <2 x double> %121, %120
  %123 = extractelement <2 x double> %122, i32 1
  %124 = fadd double %123, %110
  %125 = extractelement <2 x double> %122, i32 0
  %126 = fadd double %125, %124
  %127 = fadd double %113, %126
  %128 = fcmp une double %4, 0x7FF0000000000000
  %129 = select i1 %128, double %127, double 0x7FF0000000000000
  %130 = fcmp oge double %4, 0.000000e+00
  %131 = select i1 %130, double %129, double 0x7FF8000000000000
  %132 = fcmp une double %4, 0.000000e+00
  %133 = select i1 %132, double %131, double 0xFFF0000000000000
  ret double %133
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log2d1_u35purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, 0x3FCC501739F17BA9
  %26 = fadd double %25, 0x3FCC2B7A962850E9
  %27 = fmul double %24, %26
  %28 = fadd double %27, 0x3FD0CAAEEB877481
  %29 = fmul double %24, %28
  %30 = fadd double %29, 0x3FD484AC6A7CB2DD
  %31 = fmul double %24, %30
  %32 = fadd double %31, 0x3FDA617636C2C254
  %33 = fmul double %24, %32
  %34 = fadd double %33, 0x3FE2776C50E7EDE9
  %35 = fmul double %24, %34
  %36 = fadd double %35, 0x3FEEC709DC3A07B2
  %37 = sitofp i32 %20 to double
  %38 = bitcast double %23 to i64
  %39 = and i64 %38, -134217728
  %40 = bitcast i64 %39 to double
  %41 = fsub double %23, %40
  %42 = fmul double %23, 0x40071547652B82FE
  %43 = fmul double %40, 0x4007154760000000
  %44 = fmul double %41, 0x4007154760000000
  %45 = fmul double %40, 0x3E64AE0BF8000000
  %46 = fmul double %41, 0x3E64AE0BF8000000
  %47 = fsub double %43, %42
  %48 = fadd double %44, %47
  %49 = fadd double %45, %48
  %50 = fadd double %46, %49
  %51 = fadd double %42, %37
  %52 = fsub double %37, %51
  %53 = fadd double %42, %52
  %54 = fadd double %53, %50
  %55 = fmul double %23, %24
  %56 = fadd double %51, %54
  %57 = fmul double %55, %36
  %58 = fadd double %56, %57
  %59 = fcmp une double %4, 0x7FF0000000000000
  %60 = select i1 %59, double %58, double 0x7FF0000000000000
  %61 = fcmp oge double %4, 0.000000e+00
  %62 = select i1 %61, double %60, double 0x7FF8000000000000
  %63 = fcmp une double %4, 0.000000e+00
  %64 = select i1 %63, double %62, double 0xFFF0000000000000
  ret double %64
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_log1pd1_u10purec(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 1.000000e+00
  %3 = fcmp uge double %2, 0x10000000000000
  %4 = fmul double %2, 0x43F0000000000000
  %5 = select i1 %3, double %2, double %4
  %6 = fmul double %5, 0x3FF5555555555555
  %7 = bitcast double %6 to i64
  %8 = lshr i64 %7, 52
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 2047
  %11 = sub nsw i32 1023, %10
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 52
  %14 = add i64 %13, 4607182418800017408
  %15 = bitcast i64 %14 to double
  %16 = fadd double %15, -1.000000e+00
  %17 = fmul double %15, %0
  %18 = fadd double %17, %16
  %19 = select i1 %3, i32 -1023, i32 -1087
  %20 = add nsw i32 %10, %19
  %21 = sitofp i32 %20 to double
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, -134217728
  %24 = bitcast i64 %23 to double
  %25 = fsub double %21, %24
  %26 = fmul double %21, 0x3FE62E42FEFA39EF
  %27 = fmul double %24, 0x3FE62E42F8000000
  %28 = fmul double %24, 0x3E4BE8E7BC000000
  %29 = fmul double %25, 0x3FE62E42F8000000
  %30 = fmul double %25, 0x3E4BE8E7BC000000
  %31 = fmul double %21, 0x3C7ABC9E3B39803F
  %32 = fsub double %27, %26
  %33 = fadd double %28, %32
  %34 = fadd double %29, %33
  %35 = fadd double %30, %34
  %36 = fadd double %31, %35
  %37 = fadd double %18, 2.000000e+00
  %38 = fsub double 2.000000e+00, %37
  %39 = fadd double %18, %38
  %40 = fdiv double 1.000000e+00, %37
  %41 = bitcast double %37 to i64
  %42 = and i64 %41, -134217728
  %43 = bitcast i64 %42 to double
  %44 = fsub double %37, %43
  %45 = bitcast double %40 to i64
  %46 = and i64 %45, -134217728
  %47 = bitcast i64 %46 to double
  %48 = fsub double %40, %47
  %49 = bitcast double %18 to i64
  %50 = and i64 %49, -134217728
  %51 = bitcast i64 %50 to double
  %52 = fsub double %18, %51
  %53 = fmul double %18, %40
  %54 = fmul double %51, %47
  %55 = fsub double %54, %53
  %56 = fmul double %48, %51
  %57 = fmul double %52, %47
  %58 = fmul double %43, %47
  %59 = fmul double %48, %43
  %60 = fmul double %44, %47
  %61 = fmul double %44, %48
  %62 = fsub double 1.000000e+00, %58
  %63 = fsub double %62, %59
  %64 = fsub double %63, %60
  %65 = fadd double %55, %56
  %66 = fadd double %57, %65
  %67 = fmul double %53, %39
  %68 = fmul double %53, %53
  %69 = fmul double %68, %68
  %70 = fmul double %69, %69
  %71 = fmul double %68, 0x3FC3872E67FE8E84
  %72 = fadd double %71, 0x3FC747353A506035
  %73 = fmul double %69, 0x3FC39C4F5407567E
  %74 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %73, i32 0
  %75 = insertelement <2 x double> undef, double %72, i32 0
  %76 = insertelement <2 x double> %75, double %67, i32 1
  %77 = fadd <2 x double> %74, %76
  %78 = fsub <2 x double> %74, %76
  %79 = shufflevector <2 x double> %77, <2 x double> %78, <2 x i32> <i32 0, i32 3>
  %80 = fmul double %68, 0x3FCC71C0A65ECD8E
  %81 = insertelement <2 x double> undef, double %80, i32 0
  %82 = insertelement <2 x double> %81, double %64, i32 1
  %83 = insertelement <2 x double> <double 0x3FD249249A68A245, double undef>, double %61, i32 1
  %84 = fadd <2 x double> %82, %83
  %85 = fsub <2 x double> %82, %83
  %86 = shufflevector <2 x double> %84, <2 x double> %85, <2 x i32> <i32 0, i32 3>
  %87 = insertelement <2 x double> <double 0x3FD99999998F92EA, double undef>, double %52, i32 1
  %88 = insertelement <2 x double> undef, double %68, i32 0
  %89 = insertelement <2 x double> %88, double %48, i32 1
  %90 = fmul <2 x double> %87, %89
  %91 = insertelement <2 x double> <double 0x3FE55555555557AE, double undef>, double %66, i32 1
  %92 = fadd <2 x double> %91, %90
  %93 = insertelement <2 x double> undef, double %69, i32 0
  %94 = insertelement <2 x double> %93, double %53, i32 1
  %95 = fmul <2 x double> %94, %86
  %96 = fadd <2 x double> %92, %95
  %97 = insertelement <2 x double> undef, double %70, i32 0
  %98 = insertelement <2 x double> %97, double %40, i32 1
  %99 = fmul <2 x double> %98, %79
  %100 = fadd <2 x double> %99, %96
  %101 = fmul double %53, 2.000000e+00
  %102 = fadd double %26, %101
  %103 = fsub double %26, %102
  %104 = fadd double %101, %103
  %105 = fadd double %36, %104
  %106 = fmul double %53, %68
  %107 = insertelement <2 x double> <double undef, double 2.000000e+00>, double %106, i32 0
  %108 = fmul <2 x double> %107, %100
  %109 = insertelement <2 x double> undef, double %102, i32 0
  %110 = insertelement <2 x double> %109, double %105, i32 1
  %111 = fadd <2 x double> %110, %108
  %112 = extractelement <2 x double> %111, i32 0
  %113 = fsub double %102, %112
  %114 = extractelement <2 x double> %108, i32 0
  %115 = fadd double %114, %113
  %116 = extractelement <2 x double> %111, i32 1
  %117 = fadd double %115, %116
  %118 = fadd double %112, %117
  %119 = fcmp ule double %0, 0x7FAC7B1F3CAC7433
  %120 = select i1 %119, double %118, double 0x7FF0000000000000
  %121 = fcmp uge double %0, -1.000000e+00
  %122 = fcmp ord double %0, 0.000000e+00
  %123 = and i1 %121, %122
  %124 = select i1 %123, double %120, double 0x7FF8000000000000
  %125 = fcmp une double %0, -1.000000e+00
  %126 = select i1 %125, double %124, double 0xFFF0000000000000
  %127 = bitcast double %0 to i64
  %128 = icmp eq i64 %127, -9223372036854775808
  %129 = select i1 %128, double -0.000000e+00, double %126
  ret double %129
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fabsd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_copysignd1_purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %6, %4
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmaxd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp ogt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmind1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp olt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fdimd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fsub double %0, %1
  %4 = fcmp uge double %3, 0.000000e+00
  %5 = fcmp une double %0, %1
  %6 = and i1 %5, %4
  %7 = select i1 %6, double %3, double 0.000000e+00
  ret double %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_truncd1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp oeq double %0, 0x7FF0000000000000
  %11 = fcmp oeq double %0, 0xFFF0000000000000
  %12 = or i1 %10, %11
  %13 = bitcast double %0 to i64
  %14 = and i64 %13, 9223372036854775807
  %15 = bitcast i64 %14 to double
  %16 = fcmp oge double %15, 0x4330000000000000
  %17 = or i1 %12, %16
  %18 = fsub double %0, %9
  %19 = bitcast double %18 to i64
  %20 = and i64 %19, 9223372036854775807
  %21 = and i64 %13, -9223372036854775808
  %22 = or i64 %20, %21
  %23 = bitcast i64 %22 to double
  %24 = select i1 %17, double %0, double %23
  ret double %24
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_floord1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp uge double %9, 0.000000e+00
  %11 = fadd double %9, 1.000000e+00
  %12 = select i1 %10, double %9, double %11
  %13 = fcmp oeq double %0, 0x7FF0000000000000
  %14 = fcmp oeq double %0, 0xFFF0000000000000
  %15 = or i1 %13, %14
  %16 = bitcast double %0 to i64
  %17 = and i64 %16, 9223372036854775807
  %18 = bitcast i64 %17 to double
  %19 = fcmp oge double %18, 0x4330000000000000
  %20 = or i1 %15, %19
  %21 = fsub double %0, %12
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, 9223372036854775807
  %24 = and i64 %16, -9223372036854775808
  %25 = or i64 %23, %24
  %26 = bitcast i64 %25 to double
  %27 = select i1 %20, double %0, double %26
  ret double %27
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_ceild1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp ugt double %9, 0.000000e+00
  %11 = fadd double %9, -1.000000e+00
  %12 = select i1 %10, double %11, double %9
  %13 = fcmp oeq double %0, 0x7FF0000000000000
  %14 = fcmp oeq double %0, 0xFFF0000000000000
  %15 = or i1 %13, %14
  %16 = bitcast double %0 to i64
  %17 = and i64 %16, 9223372036854775807
  %18 = bitcast i64 %17 to double
  %19 = fcmp oge double %18, 0x4330000000000000
  %20 = or i1 %15, %19
  %21 = fsub double %0, %12
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, 9223372036854775807
  %24 = and i64 %16, -9223372036854775808
  %25 = or i64 %23, %24
  %26 = bitcast i64 %25 to double
  %27 = select i1 %20, double %0, double %26
  ret double %27
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_roundd1_purec(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fmul double %2, 0x3E00000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %2, %6
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fsub double %7, %9
  %11 = fcmp ugt double %2, 0.000000e+00
  %12 = fcmp une double %10, 0.000000e+00
  %13 = fadd double %2, -1.000000e+00
  %14 = or i1 %11, %12
  %15 = select i1 %14, double %2, double %13
  %16 = fcmp uge double %10, 0.000000e+00
  %17 = fadd double %10, 1.000000e+00
  %18 = select i1 %16, double %10, double %17
  %19 = fcmp une double %0, 0x3FDFFFFFFFFFFFFF
  %20 = select i1 %19, double %15, double 0.000000e+00
  %21 = fcmp oeq double %0, 0x7FF0000000000000
  %22 = fcmp oeq double %0, 0xFFF0000000000000
  %23 = or i1 %21, %22
  %24 = bitcast double %0 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = bitcast i64 %25 to double
  %27 = fcmp oge double %26, 0x4330000000000000
  %28 = or i1 %23, %27
  %29 = fsub double %20, %18
  %30 = bitcast double %29 to i64
  %31 = and i64 %30, 9223372036854775807
  %32 = and i64 %24, -9223372036854775808
  %33 = or i64 %31, %32
  %34 = bitcast i64 %33 to double
  %35 = select i1 %28, double %0, double %34
  ret double %35
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_rintd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, -9223372036854775808
  %4 = or i64 %3, 4841369599423283200
  %5 = bitcast i64 %4 to double
  %6 = and i64 %2, 9223372036854775807
  %7 = bitcast i64 %6 to double
  %8 = fcmp ule double %7, 0x4330000000000000
  %9 = fadd double %5, %0
  %10 = fsub double %9, %5
  %11 = bitcast double %10 to i64
  %12 = or i64 %3, %11
  %13 = bitcast i64 %12 to double
  %14 = select i1 %8, double %13, double %0
  ret double %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_nextafterd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp une double %0, 0.000000e+00
  %4 = bitcast double %1 to i64
  %5 = and i64 %4, -9223372036854775808
  %6 = bitcast i64 %5 to double
  %7 = select i1 %3, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = ashr i64 %8, 63
  %10 = trunc i64 %9 to i32
  %11 = fcmp ole double %7, %1
  %12 = sext i1 %11 to i32
  %13 = xor i64 %8, 9223372036854775807
  %14 = and i64 %13, -4294967296
  %15 = add i64 %13, 1
  %16 = trunc i64 %15 to i32
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i64
  %19 = shl nuw nsw i64 %18, 32
  %20 = add i64 %19, %14
  %21 = and i64 %15, 4294967295
  %22 = or i64 %20, %21
  %23 = icmp eq i32 %12, %10
  %24 = select i1 %23, i64 %8, i64 %22
  %25 = fcmp une double %7, %1
  %26 = zext i1 %25 to i64
  %27 = sub i64 %24, %26
  %28 = and i64 %24, -4294967296
  %29 = and i64 %27, 4294967295
  %30 = trunc i64 %27 to i32
  %31 = icmp eq i32 %30, -1
  %32 = and i1 %25, %31
  %33 = select i1 %32, i64 -4294967296, i64 0
  %34 = add i64 %28, %33
  %35 = or i64 %29, %34
  %36 = xor i64 %35, 9223372036854775807
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 1
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %42, %37
  %44 = and i64 %38, 4294967295
  %45 = or i64 %43, %44
  %46 = select i1 %23, i64 %35, i64 %45
  %47 = bitcast i64 %46 to double
  %48 = fcmp une double %47, 0.000000e+00
  %49 = fcmp oeq double %7, 0.000000e+00
  %50 = and i64 %8, -9223372036854775808
  %51 = bitcast i64 %50 to double
  %52 = or i1 %49, %48
  %53 = select i1 %52, double %47, double %51
  %54 = fcmp une double %7, 0.000000e+00
  %55 = fcmp une double %1, 0.000000e+00
  %56 = or i1 %55, %54
  %57 = select i1 %56, double %53, double %1
  %58 = fcmp ord double %7, %1
  %59 = select i1 %58, double %57, double 0x7FF8000000000000
  ret double %59
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_frfrexpd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = and i64 %8, -9218868437227405313
  %10 = or i64 %9, 4602678819172646912
  %11 = fcmp une double %7, 0x7FF0000000000000
  %12 = fcmp une double %7, 0xFFF0000000000000
  %13 = and i64 %8, -9223372036854775808
  %14 = or i64 %13, 9218868437227405312
  %15 = and i1 %12, %11
  %16 = select i1 %15, i64 %10, i64 %14
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %7, 0.000000e+00
  %19 = select i1 %18, double %17, double %7
  ret double %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_expfrexpd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = add nsw i32 %11, -1022
  %13 = fcmp ueq double %7, 0.000000e+00
  %14 = fcmp oeq double %7, 0x7FF0000000000000
  %15 = fcmp oeq double %7, 0xFFF0000000000000
  %16 = or i1 %14, %15
  %17 = or i1 %13, %16
  %18 = select i1 %17, i32 0, i32 %12
  ret i32 %18
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmad1_purec(double, double, double) local_unnamed_addr #0 {
  %4 = fmul double %0, %1
  %5 = fadd double %4, %2
  %6 = bitcast double %5 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 1.000000e-300
  %10 = insertelement <2 x double> undef, double %1, i32 0
  %11 = insertelement <2 x double> %10, double %0, i32 1
  %12 = fmul <2 x double> %11, <double 0x46B0000000000000, double 0x46B0000000000000>
  %13 = insertelement <2 x i1> undef, i1 %9, i32 0
  %14 = shufflevector <2 x i1> %13, <2 x i1> undef, <2 x i32> zeroinitializer
  %15 = select <2 x i1> %14, <2 x double> %11, <2 x double> %12
  %16 = fmul double %2, 0x4D70000000000000
  %17 = select i1 %9, double %2, double %16
  %18 = select i1 %9, double 1.000000e+00, double 0x3270000000000000
  %19 = fcmp ule double %8, 1.000000e+300
  %20 = fmul <2 x double> %15, <double 0x3930000000000000, double 0x3930000000000000>
  %21 = insertelement <2 x i1> undef, i1 %19, i32 0
  %22 = shufflevector <2 x i1> %21, <2 x i1> undef, <2 x i32> zeroinitializer
  %23 = select <2 x i1> %22, <2 x double> %15, <2 x double> %20
  %24 = fmul double %17, 0x3270000000000000
  %25 = select i1 %19, double %17, double %24
  %26 = select i1 %19, double %18, double 0x4D70000000000000
  %27 = bitcast <2 x double> %23 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %23, %29
  %31 = extractelement <2 x double> %23, i32 0
  %32 = extractelement <2 x double> %23, i32 1
  %33 = fmul double %32, %31
  %34 = extractelement <2 x double> %29, i32 0
  %35 = extractelement <2 x double> %29, i32 1
  %36 = fmul double %35, %34
  %37 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %38 = fmul <2 x double> %30, %37
  %39 = extractelement <2 x double> %30, i32 0
  %40 = extractelement <2 x double> %30, i32 1
  %41 = fmul double %40, %39
  %42 = fsub double %36, %33
  %43 = extractelement <2 x double> %38, i32 1
  %44 = fadd double %43, %42
  %45 = extractelement <2 x double> %38, i32 0
  %46 = fadd double %45, %44
  %47 = fadd double %41, %46
  %48 = fadd double %25, %33
  %49 = fsub double %48, %33
  %50 = fsub double %48, %49
  %51 = fsub double %33, %50
  %52 = fsub double %25, %49
  %53 = fadd double %52, %51
  %54 = fadd double %53, %47
  %55 = fcmp une double %32, 0.000000e+00
  %56 = fcmp une double %31, 0.000000e+00
  %57 = fadd double %48, %54
  %58 = and i1 %55, %56
  %59 = select i1 %58, double %57, double %25
  %60 = fcmp oeq double %25, 0x7FF0000000000000
  %61 = fcmp oeq double %25, 0xFFF0000000000000
  %62 = or i1 %60, %61
  %63 = fcmp une double %32, 0x7FF0000000000000
  %64 = fcmp une double %32, 0xFFF0000000000000
  %65 = and i1 %64, %63
  %66 = and i1 %65, %62
  %67 = fcmp ord double %32, 0.000000e+00
  %68 = and i1 %67, %66
  %69 = fcmp une double %31, 0x7FF0000000000000
  %70 = fcmp une double %31, 0xFFF0000000000000
  %71 = and i1 %70, %69
  %72 = and i1 %71, %68
  %73 = fcmp ord double %31, 0.000000e+00
  %74 = and i1 %73, %72
  %75 = select i1 %74, double %25, double %5
  %76 = fcmp oeq double %75, 0x7FF0000000000000
  %77 = fcmp oeq double %75, 0xFFF0000000000000
  %78 = or i1 %76, %77
  %79 = fcmp uno double %75, 0.000000e+00
  %80 = or i1 %79, %78
  %81 = fmul double %26, %59
  %82 = select i1 %80, double %75, double %81
  ret double %82
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sqrtd1_u05purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0.000000e+00
  %3 = select i1 %2, double %0, double 0x7FF8000000000000
  %4 = fcmp uge double %3, 0x2FF0000000000000
  %5 = fmul double %3, 0x4FF0000000000000
  %6 = select i1 %4, double %3, double %5
  %7 = select i1 %4, double 5.000000e-01, double 0x37E0000000000000
  %8 = fcmp ule double %6, 0x5FF0000000000000
  %9 = fmul double %6, 0x1FF0000000000000
  %10 = select i1 %8, double %6, double %9
  %11 = select i1 %8, double %7, double 0x4FE0000000000000
  %12 = fadd double %10, 9.999880e-321
  %13 = bitcast double %12 to i64
  %14 = lshr i64 %13, 33
  %15 = lshr i64 %13, 1
  %16 = shl nuw nsw i64 %14, 32
  %17 = and i64 %15, 2147483647
  %18 = sub nsw i64 0, %17
  %19 = sub nsw i64 6910470738516377600, %16
  %20 = and i64 %18, 4294967295
  %21 = or i64 %19, %20
  %22 = bitcast i64 %21 to double
  %23 = fmul double %10, 5.000000e-01
  %24 = fmul double %23, %22
  %25 = fmul double %24, %22
  %26 = fsub double 1.500000e+00, %25
  %27 = fmul double %26, %22
  %28 = fmul double %23, %27
  %29 = fmul double %27, %28
  %30 = fsub double 1.500000e+00, %29
  %31 = fmul double %27, %30
  %32 = fmul double %23, %31
  %33 = fmul double %31, %32
  %34 = fsub double 1.500000e+00, %33
  %35 = fmul double %31, %34
  %36 = fmul double %10, %35
  %37 = bitcast double %36 to i64
  %38 = and i64 %37, -134217728
  %39 = bitcast i64 %38 to double
  %40 = fsub double %36, %39
  %41 = fmul double %36, %36
  %42 = fmul double %39, %39
  %43 = fmul double %40, %39
  %44 = fmul double %40, %40
  %45 = fsub double %42, %41
  %46 = fadd double %43, %45
  %47 = fadd double %43, %46
  %48 = fadd double %44, %47
  %49 = fadd double %10, %41
  %50 = fsub double %49, %10
  %51 = fsub double %49, %50
  %52 = fsub double %10, %51
  %53 = fsub double %41, %50
  %54 = fadd double %53, %52
  %55 = fadd double %54, %48
  %56 = fdiv double 1.000000e+00, %36
  %57 = bitcast double %56 to i64
  %58 = and i64 %57, -134217728
  %59 = bitcast i64 %58 to double
  %60 = fsub double %56, %59
  %61 = fmul double %39, %59
  %62 = fmul double %60, %39
  %63 = fmul double %40, %59
  %64 = fmul double %40, %60
  %65 = fsub double 1.000000e+00, %61
  %66 = fsub double %65, %62
  %67 = fsub double %66, %63
  %68 = fsub double %67, %64
  %69 = fmul double %56, %68
  %70 = bitcast double %49 to i64
  %71 = and i64 %70, -134217728
  %72 = bitcast i64 %71 to double
  %73 = fsub double %49, %72
  %74 = fmul double %56, %49
  %75 = fmul double %59, %72
  %76 = fmul double %73, %59
  %77 = fmul double %60, %72
  %78 = fmul double %60, %73
  %79 = fmul double %49, %69
  %80 = fmul double %56, %55
  %81 = fsub double %75, %74
  %82 = fadd double %76, %81
  %83 = fadd double %77, %82
  %84 = fadd double %78, %83
  %85 = fadd double %84, %79
  %86 = fadd double %80, %85
  %87 = fadd double %74, %86
  %88 = fmul double %11, %87
  %89 = fcmp une double %10, 0x7FF0000000000000
  %90 = select i1 %89, double %88, double 0x7FF0000000000000
  %91 = fcmp une double %10, 0.000000e+00
  %92 = select i1 %91, double %90, double %10
  ret double %92
}

; Function Attrs: nounwind uwtable
define double @Sleef_sqrtd1_purec(double) local_unnamed_addr #3 {
  %2 = tail call double @sqrt(double %0) #6
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_sqrtd1_u35purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_sqrtd1_u05purec(double %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypotd1_u05purec(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fcmp uge double %12, 0x10000000000000
  %14 = fmul double %10, 0x4350000000000000
  %15 = select i1 %13, double %10, double %14
  %16 = fmul double %12, 0x4350000000000000
  %17 = select i1 %13, double %12, double %16
  %18 = fdiv double 1.000000e+00, %17
  %19 = bitcast double %17 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %17, %21
  %23 = bitcast double %18 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %18, %25
  %27 = bitcast double %15 to i64
  %28 = and i64 %27, -134217728
  %29 = bitcast i64 %28 to double
  %30 = fsub double %15, %29
  %31 = fmul double %15, %18
  %32 = fmul double %29, %25
  %33 = fsub double %32, %31
  %34 = fmul double %26, %29
  %35 = fmul double %30, %25
  %36 = fmul double %30, %26
  %37 = fmul double %21, %25
  %38 = fmul double %26, %21
  %39 = fmul double %22, %25
  %40 = fmul double %22, %26
  %41 = fsub double 1.000000e+00, %37
  %42 = fsub double %41, %38
  %43 = fsub double %42, %39
  %44 = fsub double %43, %40
  %45 = fmul double %31, %44
  %46 = fadd double %33, %34
  %47 = fadd double %35, %46
  %48 = fadd double %36, %47
  %49 = fadd double %48, %45
  %50 = fmul double %31, 0.000000e+00
  %51 = fsub double 0.000000e+00, %50
  %52 = fmul double %18, %51
  %53 = fadd double %52, %49
  %54 = bitcast double %31 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %31, %56
  %58 = fmul double %31, %31
  %59 = fmul double %56, %56
  %60 = fadd double %56, %56
  %61 = fmul double %60, %57
  %62 = fmul double %57, %57
  %63 = fadd double %53, %53
  %64 = fmul double %31, %63
  %65 = fsub double %59, %58
  %66 = fadd double %65, %61
  %67 = fadd double %62, %66
  %68 = fadd double %67, %64
  %69 = fadd double %58, 1.000000e+00
  %70 = fsub double %69, %58
  %71 = fsub double %69, %70
  %72 = fsub double %58, %71
  %73 = fsub double 1.000000e+00, %70
  %74 = fadd double %73, %72
  %75 = fadd double %74, %68
  %76 = fadd double %69, %75
  %77 = tail call double @sqrt(double %76) #6
  %78 = bitcast double %77 to i64
  %79 = and i64 %78, -134217728
  %80 = bitcast i64 %79 to double
  %81 = fsub double %77, %80
  %82 = fmul double %77, %77
  %83 = fmul double %80, %80
  %84 = fmul double %81, %80
  %85 = fmul double %81, %81
  %86 = fsub double %83, %82
  %87 = fadd double %84, %86
  %88 = fadd double %84, %87
  %89 = fadd double %85, %88
  %90 = fadd double %69, %82
  %91 = fsub double %90, %69
  %92 = fsub double %90, %91
  %93 = fsub double %69, %92
  %94 = fsub double %82, %91
  %95 = fadd double %94, %93
  %96 = fadd double %75, %89
  %97 = fadd double %95, %96
  %98 = fdiv double 1.000000e+00, %77
  %99 = bitcast double %98 to i64
  %100 = and i64 %99, -134217728
  %101 = bitcast i64 %100 to double
  %102 = fsub double %98, %101
  %103 = fmul double %80, %101
  %104 = fmul double %102, %80
  %105 = fmul double %81, %101
  %106 = fmul double %81, %102
  %107 = fsub double 1.000000e+00, %103
  %108 = fsub double %107, %104
  %109 = fsub double %108, %105
  %110 = fsub double %109, %106
  %111 = fmul double %98, %110
  %112 = bitcast double %90 to i64
  %113 = and i64 %112, -134217728
  %114 = bitcast i64 %113 to double
  %115 = fsub double %90, %114
  %116 = fmul double %98, %90
  %117 = fmul double %101, %114
  %118 = fmul double %115, %101
  %119 = fmul double %102, %114
  %120 = fmul double %102, %115
  %121 = fmul double %90, %111
  %122 = fmul double %98, %97
  %123 = fsub double %117, %116
  %124 = fadd double %118, %123
  %125 = fadd double %119, %124
  %126 = fadd double %120, %125
  %127 = fadd double %126, %121
  %128 = fadd double %122, %127
  %129 = insertelement <2 x double> undef, double %116, i32 0
  %130 = insertelement <2 x double> %129, double %128, i32 1
  %131 = fmul <2 x double> %130, <double 5.000000e-01, double 5.000000e-01>
  %132 = extractelement <2 x double> %131, i32 0
  %133 = bitcast double %132 to i64
  %134 = and i64 %133, -134217728
  %135 = bitcast i64 %134 to double
  %136 = fsub double %132, %135
  %137 = bitcast double %12 to i64
  %138 = and i64 %137, -134217728
  %139 = bitcast i64 %138 to double
  %140 = fsub double %12, %139
  %141 = fmul double %139, %135
  %142 = fmul double %136, %139
  %143 = fmul double %140, %135
  %144 = fmul double %140, %136
  %145 = insertelement <2 x double> undef, double %12, i32 0
  %146 = shufflevector <2 x double> %145, <2 x double> undef, <2 x i32> zeroinitializer
  %147 = fmul <2 x double> %146, %131
  %148 = extractelement <2 x double> %147, i32 0
  %149 = fsub double %141, %148
  %150 = fadd double %142, %149
  %151 = fadd double %143, %150
  %152 = fadd double %144, %151
  %153 = extractelement <2 x double> %147, i32 1
  %154 = fadd double %152, %153
  %155 = fadd double %148, %154
  %156 = fcmp ord double %155, 0.000000e+00
  %157 = select i1 %156, double %155, double 0x7FF0000000000000
  %158 = fcmp une double %10, 0.000000e+00
  %159 = select i1 %158, double %157, double %12
  %160 = fcmp ord double %8, %5
  %161 = select i1 %160, double %159, double 0x7FF8000000000000
  %162 = fcmp une double %5, 0x7FF0000000000000
  %163 = fcmp une double %8, 0x7FF0000000000000
  %164 = and i1 %162, %163
  %165 = select i1 %164, double %161, double 0x7FF0000000000000
  ret double %165
}

; Function Attrs: nounwind uwtable
define double @Sleef_hypotd1_u35purec(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fdiv double %10, %12
  %14 = fmul double %13, %13
  %15 = fadd double %14, 1.000000e+00
  %16 = tail call double @sqrt(double %15) #6
  %17 = fmul double %12, %16
  %18 = fcmp une double %10, 0.000000e+00
  %19 = select i1 %18, double %17, double %12
  %20 = fcmp ord double %8, %5
  %21 = select i1 %20, double %19, double 0x7FF8000000000000
  %22 = fcmp une double %5, 0x7FF0000000000000
  %23 = fcmp une double %8, 0x7FF0000000000000
  %24 = and i1 %22, %23
  %25 = select i1 %24, double %21, double 0x7FF0000000000000
  ret double %25
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_fmodd1_purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 0x10000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = select i1 %9, double %5, double %10
  %12 = fmul double %8, 0x4350000000000000
  %13 = select i1 %9, double %8, double %12
  %14 = fdiv double 1.000000e+00, %13
  %15 = bitcast double %14 to i64
  %16 = add i64 %15, -1
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %14, 0.000000e+00
  %19 = select i1 %18, double %17, double 0.000000e+00
  %20 = fmul double %13, 3.000000e+00
  %21 = fadd double %13, %13
  %22 = fsub double -0.000000e+00, %13
  %23 = bitcast double %22 to i64
  %24 = and i64 %23, -134217728
  %25 = bitcast i64 %24 to double
  %26 = fsub double %22, %25
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi double [ 0.000000e+00, %2 ], [ %84, %27 ]
  %29 = phi double [ %11, %2 ], [ %82, %27 ]
  %30 = phi i32 [ 0, %2 ], [ %86, %27 ]
  %31 = bitcast double %29 to i64
  %32 = add i64 %31, -1
  %33 = bitcast i64 %32 to double
  %34 = fcmp une double %29, 0.000000e+00
  %35 = select i1 %34, double %33, double 0.000000e+00
  %36 = fmul double %19, %35
  %37 = fmul double %36, 0x3E00000000000000
  %38 = fptosi double %37 to i32
  %39 = sitofp i32 %38 to double
  %40 = fmul double %39, 0x41E0000000000000
  %41 = fsub double %36, %40
  %42 = fptosi double %41 to i32
  %43 = sitofp i32 %42 to double
  %44 = fsub double %41, %43
  %45 = bitcast double %36 to i64
  %46 = and i64 %45, 9223372036854775807
  %47 = bitcast i64 %46 to double
  %48 = fcmp ult double %47, 0x4330000000000000
  %49 = fsub double %36, %44
  %50 = select i1 %48, double %49, double %36
  %51 = bitcast double %50 to i64
  %52 = and i64 %51, -2
  %53 = bitcast i64 %52 to double
  %54 = fcmp ogt double %20, %29
  %55 = fcmp oge double %29, %13
  %56 = and i1 %55, %54
  %57 = select i1 %56, double 2.000000e+00, double %53
  %58 = fcmp ogt double %21, %29
  %59 = and i1 %55, %58
  %60 = select i1 %59, double 1.000000e+00, double %57
  %61 = bitcast double %60 to i64
  %62 = and i64 %61, -134217728
  %63 = bitcast i64 %62 to double
  %64 = fsub double %60, %63
  %65 = fmul double %60, %22
  %66 = fmul double %25, %63
  %67 = fmul double %64, %25
  %68 = fmul double %26, %63
  %69 = fmul double %26, %64
  %70 = fsub double %66, %65
  %71 = fadd double %67, %70
  %72 = fadd double %68, %71
  %73 = fadd double %69, %72
  %74 = fadd double %29, %65
  %75 = fsub double %74, %29
  %76 = fsub double %74, %75
  %77 = fsub double %29, %76
  %78 = fsub double %65, %75
  %79 = fadd double %78, %77
  %80 = fadd double %28, %73
  %81 = fadd double %79, %80
  %82 = fadd double %74, %81
  %83 = fsub double %74, %82
  %84 = fadd double %81, %83
  %85 = fcmp uge double %82, %13
  %86 = add nuw nsw i32 %30, 1
  %87 = icmp ult i32 %86, 21
  %88 = and i1 %85, %87
  br i1 %88, label %27, label %89

; <label>:89:                                     ; preds = %27
  %90 = select i1 %9, double 1.000000e+00, double 0x3C90000000000000
  %91 = fmul double %90, %82
  %92 = fadd double %82, %84
  %93 = fcmp une double %92, %13
  %94 = bitcast double %91 to i64
  %95 = select i1 %93, i64 %94, i64 0
  %96 = and i64 %3, -9223372036854775808
  %97 = xor i64 %95, %96
  %98 = bitcast i64 %97 to double
  %99 = fcmp uge double %11, %13
  %100 = select i1 %99, double %98, double %0
  %101 = fcmp une double %13, 0.000000e+00
  %102 = select i1 %101, double %100, double 0x7FF8000000000000
  ret double %102
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_remainderd1_purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 0x20000000000000
  %10 = fmul double %5, 0x4350000000000000
  %11 = select i1 %9, double %5, double %10
  %12 = fmul double %8, 0x4350000000000000
  %13 = select i1 %9, double %8, double %12
  %14 = select i1 %9, double 1.000000e+00, double 0x3C90000000000000
  %15 = fdiv double 1.000000e+00, %13
  %16 = fmul double %13, 1.500000e+00
  %17 = fmul double %13, 5.000000e-01
  %18 = fsub double -0.000000e+00, %13
  %19 = bitcast double %18 to i64
  %20 = and i64 %19, -134217728
  %21 = bitcast i64 %20 to double
  %22 = fsub double %18, %21
  br label %23

; <label>:23:                                     ; preds = %2, %55
  %24 = phi double [ 0.000000e+00, %2 ], [ %101, %55 ]
  %25 = phi double [ %11, %2 ], [ %99, %55 ]
  %26 = phi i32 [ 0, %2 ], [ %78, %55 ]
  %27 = phi i32 [ 0, %2 ], [ %102, %55 ]
  %28 = fmul double %15, %25
  %29 = bitcast double %28 to i64
  %30 = and i64 %29, -9223372036854775808
  %31 = or i64 %30, 4841369599423283200
  %32 = bitcast i64 %31 to double
  %33 = and i64 %29, 9223372036854775807
  %34 = bitcast i64 %33 to double
  %35 = fcmp ule double %34, 0x4330000000000000
  %36 = fadd double %28, %32
  %37 = fsub double %36, %32
  %38 = bitcast double %37 to i64
  %39 = or i64 %30, %38
  %40 = select i1 %35, i64 %39, i64 %29
  %41 = and i64 %40, -2
  %42 = bitcast i64 %41 to double
  %43 = bitcast double %25 to i64
  %44 = and i64 %43, 9223372036854775807
  %45 = bitcast i64 %44 to double
  %46 = fcmp ule double %16, %45
  %47 = select i1 %46, double %42, double 1.000000e+00
  %48 = fcmp ule double %17, %45
  %49 = fcmp une double %17, %45
  %50 = icmp eq i32 %26, -1
  %51 = or i1 %50, %49
  %52 = and i1 %48, %51
  %53 = select i1 %52, double %47, double 0.000000e+00
  %54 = fcmp une double %53, 0.000000e+00
  br i1 %54, label %55, label %104

; <label>:55:                                     ; preds = %23
  %56 = fmul double %53, %18
  %57 = fcmp une double %56, 0x7FF0000000000000
  %58 = fcmp une double %56, 0xFFF0000000000000
  %59 = and i64 %43, -9223372036854775808
  %60 = xor i64 %59, -4616189618054758400
  %61 = bitcast i64 %60 to double
  %62 = fadd double %53, %61
  %63 = and i1 %58, %57
  %64 = select i1 %63, double %53, double %62
  %65 = fmul double %64, 0x3E00000000000000
  %66 = fptosi double %65 to i32
  %67 = sitofp i32 %66 to double
  %68 = fmul double %67, 0x41E0000000000000
  %69 = fsub double %64, %68
  %70 = fptosi double %69 to i32
  %71 = shl i32 %70, 31
  %72 = ashr exact i32 %71, 31
  %73 = bitcast double %64 to i64
  %74 = and i64 %73, 9223372036854775807
  %75 = bitcast i64 %74 to double
  %76 = fcmp olt double %75, 0x4340000000000000
  %77 = select i1 %76, i32 %72, i32 0
  %78 = xor i32 %77, %26
  %79 = and i64 %73, -134217728
  %80 = bitcast i64 %79 to double
  %81 = fsub double %64, %80
  %82 = fmul double %64, %18
  %83 = fmul double %21, %80
  %84 = fmul double %81, %21
  %85 = fmul double %22, %80
  %86 = fmul double %22, %81
  %87 = fsub double %83, %82
  %88 = fadd double %84, %87
  %89 = fadd double %85, %88
  %90 = fadd double %86, %89
  %91 = fadd double %25, %82
  %92 = fsub double %91, %25
  %93 = fsub double %91, %92
  %94 = fsub double %25, %93
  %95 = fsub double %82, %92
  %96 = fadd double %95, %94
  %97 = fadd double %24, %90
  %98 = fadd double %96, %97
  %99 = fadd double %91, %98
  %100 = fsub double %91, %99
  %101 = fadd double %98, %100
  %102 = add nuw nsw i32 %27, 1
  %103 = icmp ult i32 %102, 21
  br i1 %103, label %23, label %104

; <label>:104:                                    ; preds = %23, %55
  %105 = phi double [ %25, %23 ], [ %99, %55 ]
  %106 = fmul double %14, %105
  %107 = bitcast double %106 to i64
  %108 = and i64 %3, -9223372036854775808
  %109 = xor i64 %108, %107
  %110 = bitcast i64 %109 to double
  %111 = fcmp une double %1, 0x7FF0000000000000
  %112 = fcmp une double %1, 0xFFF0000000000000
  %113 = fcmp une double %0, 0x7FF0000000000000
  %114 = fcmp une double %0, 0xFFF0000000000000
  %115 = and i1 %114, %113
  %116 = select i1 %115, double %0, double 0x7FF8000000000000
  %117 = and i1 %112, %111
  %118 = select i1 %117, double %110, double %116
  %119 = fcmp une double %13, 0.000000e+00
  %120 = select i1 %119, double %118, double 0x7FF8000000000000
  ret double %120
}

; Function Attrs: nounwind uwtable
define double @Sleef_tgammad1_u10purec(double) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 8
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = fadd double %5, %7
  %9 = fmul double %8, 0x3FF71547652B82FE
  %10 = fcmp ogt double %9, 0.000000e+00
  %11 = select i1 %10, double 5.000000e-01, double -5.000000e-01
  %12 = fadd double %9, %11
  %13 = bitcast double %12 to i64
  %14 = fptosi double %12 to i32
  %15 = and i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = sub i64 %13, %16
  %18 = bitcast i64 %17 to double
  %19 = fptosi double %18 to i32
  %20 = sitofp i32 %19 to double
  %21 = icmp sgt i32 %19, 0
  %22 = select i1 %21, double 5.000000e-01, double -5.000000e-01
  %23 = fadd double %22, %20
  %24 = bitcast double %23 to i64
  %25 = fptosi double %23 to i32
  %26 = and i32 %25, 1
  %27 = zext i32 %26 to i64
  %28 = sub i64 %24, %27
  %29 = bitcast i64 %28 to double
  %30 = fptosi double %29 to i32
  %31 = fmul double %20, 0xBFE62E42FEFA3000
  %32 = fadd double %5, %31
  %33 = fsub double %32, %5
  %34 = fsub double %32, %33
  %35 = fsub double %5, %34
  %36 = fsub double %31, %33
  %37 = fadd double %36, %35
  %38 = fadd double %7, %37
  %39 = fmul double %20, 0xBD53DE6AF278ECE6
  %40 = fadd double %39, %32
  %41 = fsub double %40, %32
  %42 = fsub double %40, %41
  %43 = fsub double %32, %42
  %44 = fsub double %39, %41
  %45 = fadd double %44, %43
  %46 = fadd double %45, %38
  %47 = bitcast double %40 to i64
  %48 = and i64 %47, -134217728
  %49 = bitcast i64 %48 to double
  %50 = fsub double %40, %49
  %51 = fmul double %40, %40
  %52 = fmul double %49, %49
  %53 = fadd double %49, %49
  %54 = fmul double %53, %50
  %55 = fmul double %50, %50
  %56 = fadd double %46, %46
  %57 = fmul double %40, %56
  %58 = fsub double %52, %51
  %59 = fadd double %58, %54
  %60 = fadd double %55, %59
  %61 = fadd double %57, %60
  %62 = bitcast double %51 to i64
  %63 = and i64 %62, -134217728
  %64 = bitcast i64 %63 to double
  %65 = fsub double %51, %64
  %66 = fmul double %51, %51
  %67 = fmul double %64, %64
  %68 = fadd double %64, %64
  %69 = fmul double %68, %65
  %70 = fmul double %65, %65
  %71 = fadd double %61, %61
  %72 = fmul double %51, %71
  %73 = fsub double %67, %66
  %74 = fadd double %73, %69
  %75 = fadd double %70, %74
  %76 = fadd double %75, %72
  %77 = fmul double %66, %66
  %78 = fmul double %40, 0x3DE60632A887194C
  %79 = fadd double %78, 0x3E21F8EAF54829DC
  %80 = fmul double %40, 0x3E5AE652E8103AB6
  %81 = fadd double %80, 0x3E927E4C95A9765C
  %82 = fmul double %40, 0x3EC71DE3A11D7656
  %83 = fadd double %82, 0x3EFA01A01AF6F0B7
  %84 = fmul double %51, %81
  %85 = fadd double %83, %84
  %86 = fmul double %40, 0x3F2A01A01A02D002
  %87 = fadd double %86, 0x3F56C16C16C145CC
  %88 = fmul double %40, 0x3F81111111111119
  %89 = fadd double %88, 0x3FA555555555555A
  %90 = fmul double %51, %87
  %91 = fadd double %89, %90
  %92 = fmul double %66, %85
  %93 = fmul double %40, 0x3FC5555555555555
  %94 = fmul double %49, 0x3FC5555550000000
  %95 = fmul double %50, 0x3FC5555550000000
  %96 = fmul double %49, 0x3E25555554000000
  %97 = fmul double %50, 0x3E25555554000000
  %98 = fmul double %46, 0x3FC5555555555555
  %99 = fsub double %94, %93
  %100 = fadd double %95, %99
  %101 = fadd double %96, %100
  %102 = fadd double %97, %101
  %103 = fadd double %98, %102
  %104 = fadd double %93, 5.000000e-01
  %105 = fsub double 5.000000e-01, %104
  %106 = fadd double %93, %105
  %107 = fadd double %106, %103
  %108 = bitcast double %104 to i64
  %109 = and i64 %108, -134217728
  %110 = bitcast i64 %109 to double
  %111 = fsub double %104, %110
  %112 = insertelement <2 x double> undef, double %79, i32 0
  %113 = insertelement <2 x double> %112, double %40, i32 1
  %114 = insertelement <2 x double> undef, double %77, i32 0
  %115 = insertelement <2 x double> %114, double %104, i32 1
  %116 = fmul <2 x double> %113, %115
  %117 = fmul double %49, %110
  %118 = fmul double %111, %49
  %119 = fmul double %50, %110
  %120 = fmul double %50, %111
  %121 = fmul double %104, %46
  %122 = fmul double %40, %107
  %123 = extractelement <2 x double> %116, i32 1
  %124 = fsub double %117, %123
  %125 = fadd double %118, %124
  %126 = fadd double %119, %125
  %127 = fadd double %120, %126
  %128 = fadd double %121, %127
  %129 = fadd double %122, %128
  %130 = fadd double %123, 1.000000e+00
  %131 = insertelement <2 x double> <double undef, double 1.000000e+00>, double %91, i32 0
  %132 = insertelement <2 x double> undef, double %92, i32 0
  %133 = insertelement <2 x double> %132, double %130, i32 1
  %134 = fadd <2 x double> %131, %133
  %135 = fsub <2 x double> %131, %133
  %136 = shufflevector <2 x double> %134, <2 x double> %135, <2 x i32> <i32 0, i32 3>
  %137 = fadd <2 x double> %116, %136
  %138 = bitcast double %130 to i64
  %139 = and i64 %138, -134217728
  %140 = bitcast i64 %139 to double
  %141 = fsub double %130, %140
  %142 = fmul double %40, %130
  %143 = fmul double %49, %140
  %144 = fmul double %141, %49
  %145 = fsub double %143, %142
  %146 = fadd double %144, %145
  %147 = fadd double %142, 1.000000e+00
  %148 = fsub double 1.000000e+00, %147
  %149 = fadd double %142, %148
  %150 = bitcast double %66 to i64
  %151 = and i64 %150, -134217728
  %152 = bitcast i64 %151 to double
  %153 = fsub double %66, %152
  %154 = extractelement <2 x double> %137, i32 0
  %155 = bitcast double %154 to i64
  %156 = and i64 %155, -134217728
  %157 = bitcast i64 %156 to double
  %158 = insertelement <2 x double> undef, double %157, i32 0
  %159 = insertelement <2 x double> %158, double %129, i32 1
  %160 = fsub <2 x double> %137, %159
  %161 = fadd <2 x double> %137, %159
  %162 = shufflevector <2 x double> %160, <2 x double> %161, <2 x i32> <i32 0, i32 3>
  %163 = fmul double %66, %154
  %164 = insertelement <2 x double> undef, double %152, i32 0
  %165 = insertelement <2 x double> %164, double %50, i32 1
  %166 = insertelement <2 x double> %158, double %140, i32 1
  %167 = fmul <2 x double> %165, %166
  %168 = insertelement <2 x double> undef, double %153, i32 0
  %169 = insertelement <2 x double> %168, double %50, i32 1
  %170 = insertelement <2 x double> %158, double %141, i32 1
  %171 = fmul <2 x double> %169, %170
  %172 = extractelement <2 x double> %160, i32 0
  %173 = insertelement <2 x double> undef, double %172, i32 0
  %174 = insertelement <2 x double> %173, double %130, i32 1
  %175 = insertelement <2 x double> %164, double %46, i32 1
  %176 = fmul <2 x double> %174, %175
  %177 = insertelement <2 x double> %168, double %40, i32 1
  %178 = fmul <2 x double> %177, %162
  %179 = fmul double %154, %76
  %180 = insertelement <2 x double> undef, double %163, i32 0
  %181 = insertelement <2 x double> %180, double %146, i32 1
  %182 = fsub <2 x double> %167, %181
  %183 = fadd <2 x double> %167, %181
  %184 = shufflevector <2 x double> %182, <2 x double> %183, <2 x i32> <i32 0, i32 3>
  %185 = fadd <2 x double> %171, %184
  %186 = fadd <2 x double> %176, %185
  %187 = fadd <2 x double> %178, %186
  %188 = insertelement <2 x double> undef, double %179, i32 0
  %189 = insertelement <2 x double> %188, double %149, i32 1
  %190 = fadd <2 x double> %189, %187
  %191 = fadd double %147, %163
  %192 = fsub double %147, %191
  %193 = fadd double %163, %192
  %194 = extractelement <2 x double> %190, i32 1
  %195 = fadd double %193, %194
  %196 = extractelement <2 x double> %190, i32 0
  %197 = fadd double %196, %195
  %198 = ashr i32 %30, 1
  %199 = add nsw i32 %198, 1023
  %200 = zext i32 %199 to i64
  %201 = shl i64 %200, 52
  %202 = bitcast i64 %201 to double
  %203 = add i32 %30, 1023
  %204 = sub i32 %203, %198
  %205 = zext i32 %204 to i64
  %206 = shl i64 %205, 52
  %207 = bitcast i64 %206 to double
  %208 = insertelement <2 x double> undef, double %197, i32 0
  %209 = insertelement <2 x double> %208, double %191, i32 1
  %210 = insertelement <2 x double> undef, double %202, i32 0
  %211 = shufflevector <2 x double> %210, <2 x double> undef, <2 x i32> zeroinitializer
  %212 = fmul <2 x double> %209, %211
  %213 = insertelement <2 x double> undef, double %207, i32 0
  %214 = shufflevector <2 x double> %213, <2 x double> undef, <2 x i32> zeroinitializer
  %215 = fmul <2 x double> %212, %214
  %216 = fcmp olt double %5, -1.000000e+03
  %217 = select i1 %216, i64 4294967295, i64 0
  %218 = shl nuw i64 %217, 32
  %219 = or i64 %218, %217
  %220 = xor i64 %219, -1
  %221 = bitcast <2 x double> %215 to <2 x i64>
  %222 = insertelement <2 x i64> undef, i64 %220, i32 0
  %223 = shufflevector <2 x i64> %222, <2 x i64> undef, <2 x i32> zeroinitializer
  %224 = and <2 x i64> %223, %221
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %227 = bitcast double* %226 to <2 x double>*
  %228 = load <2 x double>, <2 x double>* %227, align 8
  %229 = extractelement <2 x i64> %224, i32 1
  %230 = and i64 %229, -134217728
  %231 = bitcast i64 %230 to double
  %232 = extractelement <2 x double> %225, i32 1
  %233 = fsub double %232, %231
  %234 = extractelement <2 x double> %228, i32 0
  %235 = bitcast double %234 to i64
  %236 = and i64 %235, -134217728
  %237 = bitcast i64 %236 to double
  %238 = fsub double %234, %237
  %239 = fmul double %234, %232
  %240 = fmul double %237, %231
  %241 = fmul double %233, %237
  %242 = fmul double %238, %231
  %243 = fmul double %238, %233
  %244 = fmul <2 x double> %228, %225
  %245 = fsub double %240, %239
  %246 = fadd double %241, %245
  %247 = fadd double %242, %246
  %248 = fadd double %243, %247
  %249 = extractelement <2 x double> %244, i32 1
  %250 = fadd double %249, %248
  %251 = extractelement <2 x double> %244, i32 0
  %252 = fadd double %250, %251
  %253 = fadd double %239, %252
  %254 = fcmp oeq double %0, 0xFFF0000000000000
  %255 = fcmp olt double %0, 0.000000e+00
  %256 = fmul double %0, 0x3E00000000000000
  %257 = fptosi double %256 to i32
  %258 = sitofp i32 %257 to double
  %259 = fmul double %258, 0x41E0000000000000
  %260 = fsub double %0, %259
  %261 = fptosi double %260 to i32
  %262 = sitofp i32 %261 to double
  %263 = fcmp oeq double %260, %262
  %264 = bitcast double %0 to i64
  %265 = and i64 %264, 9223372036854775807
  %266 = bitcast i64 %265 to double
  %267 = fcmp ogt double %266, 0x4340000000000000
  %268 = or i1 %267, %263
  %269 = and i1 %255, %268
  %270 = or i1 %254, %269
  %271 = fcmp une double %0, 0x7FF0000000000000
  %272 = fcmp une double %0, 0xFFF0000000000000
  %273 = fcmp ord double %0, 0.000000e+00
  %274 = and i1 %272, %271
  %275 = and i1 %273, %274
  %276 = and i1 %255, %275
  %277 = fcmp uno double %253, 0.000000e+00
  %278 = and i1 %276, %277
  %279 = or i1 %270, %278
  %280 = select i1 %279, double 0x7FF8000000000000, double %253
  %281 = fcmp oeq double %0, 0x7FF0000000000000
  %282 = or i1 %281, %275
  %283 = fcmp oge double %0, 0x8010000000000000
  %284 = and i1 %283, %282
  %285 = fcmp oeq double %0, 0.000000e+00
  %286 = fcmp ogt double %0, 2.000000e+02
  %287 = or i1 %286, %285
  %288 = fcmp uno double %280, 0.000000e+00
  %289 = or i1 %287, %288
  %290 = and i1 %284, %289
  %291 = and i64 %264, -9223372036854775808
  %292 = or i64 %291, 9218868437227405312
  %293 = bitcast i64 %292 to double
  %294 = select i1 %290, double %293, double %280
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #6
  ret double %294
}

; Function Attrs: norecurse nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, double) unnamed_addr #4 {
  %3 = bitcast double %1 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = fcmp uge double %5, 1.000000e-306
  %7 = fcmp olt double %1, 5.000000e-01
  %8 = fsub double -0.000000e+00, %1
  %9 = fsub double 1.000000e+00, %1
  %10 = fadd double %9, -1.000000e+00
  %11 = fsub double %9, %10
  %12 = fsub double 1.000000e+00, %11
  %13 = fsub double %8, %10
  %14 = fadd double %13, %12
  %15 = select i1 %7, double %9, double %1
  %16 = select i1 %6, double %15, double 0.000000e+00
  %17 = and i1 %7, %6
  %18 = select i1 %17, double %14, double 0.000000e+00
  %19 = fcmp ult double %16, 5.000000e-01
  %20 = fcmp ugt double %16, 1.100000e+00
  %21 = fcmp oge double %16, 2.300000e+00
  %22 = fadd double %16, 1.000000e+00
  %23 = fsub double %22, %16
  %24 = fsub double %22, %23
  %25 = fsub double %16, %24
  %26 = fsub double 1.000000e+00, %23
  %27 = fadd double %26, %25
  %28 = fadd double %18, %27
  %29 = bitcast double %22 to i64
  %30 = and i64 %29, -134217728
  %31 = bitcast i64 %30 to double
  %32 = fsub double %22, %31
  %33 = bitcast double %16 to i64
  %34 = and i64 %33, -134217728
  %35 = bitcast i64 %34 to double
  %36 = fsub double %16, %35
  %37 = fmul double %16, %22
  %38 = fmul double %35, %31
  %39 = fmul double %32, %35
  %40 = fmul double %36, %31
  %41 = fmul double %36, %32
  %42 = fmul double %22, %18
  %43 = fmul double %16, %28
  %44 = fsub double %38, %37
  %45 = fadd double %39, %44
  %46 = fadd double %40, %45
  %47 = fadd double %41, %46
  %48 = fadd double %42, %47
  %49 = fadd double %43, %48
  %50 = fadd double %37, %49
  %51 = fsub double %37, %50
  %52 = fadd double %49, %51
  %53 = fadd double %16, 2.000000e+00
  %54 = fsub double %53, %16
  %55 = fsub double %53, %54
  %56 = fsub double %16, %55
  %57 = fsub double 2.000000e+00, %54
  %58 = fadd double %57, %56
  %59 = fadd double %18, %58
  %60 = bitcast double %53 to i64
  %61 = and i64 %60, -134217728
  %62 = bitcast i64 %61 to double
  %63 = fsub double %53, %62
  %64 = bitcast double %50 to i64
  %65 = and i64 %64, -134217728
  %66 = bitcast i64 %65 to double
  %67 = fsub double %50, %66
  %68 = fmul double %53, %50
  %69 = fmul double %62, %66
  %70 = fmul double %63, %66
  %71 = fmul double %67, %62
  %72 = fmul double %63, %67
  %73 = fmul double %53, %52
  %74 = fmul double %59, %50
  %75 = fsub double %69, %68
  %76 = fadd double %70, %75
  %77 = fadd double %71, %76
  %78 = fadd double %72, %77
  %79 = fadd double %73, %78
  %80 = fadd double %74, %79
  %81 = fadd double %68, %80
  %82 = fsub double %68, %81
  %83 = fadd double %80, %82
  %84 = fadd double %16, 3.000000e+00
  %85 = fsub double %84, %16
  %86 = fsub double %84, %85
  %87 = fsub double %16, %86
  %88 = fsub double 3.000000e+00, %85
  %89 = fadd double %88, %87
  %90 = fadd double %18, %89
  %91 = bitcast double %84 to i64
  %92 = and i64 %91, -134217728
  %93 = bitcast i64 %92 to double
  %94 = fsub double %84, %93
  %95 = bitcast double %81 to i64
  %96 = and i64 %95, -134217728
  %97 = bitcast i64 %96 to double
  %98 = fsub double %81, %97
  %99 = fmul double %84, %81
  %100 = fmul double %93, %97
  %101 = fmul double %94, %97
  %102 = fmul double %98, %93
  %103 = fmul double %94, %98
  %104 = fmul double %84, %83
  %105 = fmul double %90, %81
  %106 = fsub double %100, %99
  %107 = fadd double %101, %106
  %108 = fadd double %102, %107
  %109 = fadd double %103, %108
  %110 = fadd double %104, %109
  %111 = fadd double %105, %110
  %112 = fadd double %99, %111
  %113 = fsub double %99, %112
  %114 = fadd double %111, %113
  %115 = fadd double %16, 4.000000e+00
  %116 = fsub double %115, %16
  %117 = fsub double %115, %116
  %118 = fsub double %16, %117
  %119 = fsub double 4.000000e+00, %116
  %120 = fadd double %119, %118
  %121 = fadd double %18, %120
  %122 = bitcast double %115 to i64
  %123 = and i64 %122, -134217728
  %124 = bitcast i64 %123 to double
  %125 = fsub double %115, %124
  %126 = bitcast double %112 to i64
  %127 = and i64 %126, -134217728
  %128 = bitcast i64 %127 to double
  %129 = fsub double %112, %128
  %130 = fmul double %115, %112
  %131 = fmul double %124, %128
  %132 = fmul double %125, %128
  %133 = fmul double %129, %124
  %134 = fmul double %125, %129
  %135 = fmul double %115, %114
  %136 = fmul double %121, %112
  %137 = fsub double %131, %130
  %138 = fadd double %132, %137
  %139 = fadd double %133, %138
  %140 = fadd double %134, %139
  %141 = fadd double %135, %140
  %142 = fadd double %136, %141
  %143 = fadd double %130, %142
  %144 = fsub double %130, %143
  %145 = fadd double %142, %144
  %146 = fcmp ole double %16, 7.000000e+00
  %147 = and i1 %146, %21
  %148 = select i1 %147, double %143, double 1.000000e+00
  %149 = select i1 %147, double %145, double 0.000000e+00
  %150 = fadd double %16, 5.000000e+00
  %151 = fsub double %150, %16
  %152 = fsub double %150, %151
  %153 = fsub double %16, %152
  %154 = fsub double 5.000000e+00, %151
  %155 = fadd double %154, %153
  %156 = fadd double %18, %155
  %157 = select i1 %147, double %150, double %16
  %158 = select i1 %147, double %156, double %18
  %159 = fdiv double 1.000000e+00, %157
  %160 = or i1 %19, %20
  %161 = select i1 %160, double -2.000000e+00, double -1.000000e+00
  %162 = fadd double %157, %161
  %163 = fsub double %162, %157
  %164 = fsub double %162, %163
  %165 = fsub double %157, %164
  %166 = fsub double %161, %163
  %167 = fadd double %166, %165
  %168 = fadd double %158, %167
  %169 = fadd double %162, %168
  %170 = select i1 %21, double %159, double %169
  %171 = select i1 %160, double 0x3E72FDC6CB0D558F, double 0x403D7AAABC7A3EA1
  %172 = select i1 %21, double 0xC06399A52C414C0D, double %171
  %173 = select i1 %160, double 0x3E9AE7D44E1AB8F6, double 0x406004ABC79048B9
  %174 = select i1 %21, double 0x3FF1EED0A9756022, double %173
  %175 = fmul double %172, %170
  %176 = fadd double %174, %175
  %177 = select i1 %160, double 0x3EB1734224875A66, double 0x40705C120870277A
  %178 = select i1 %21, double 0x402ACBC4BFE43E00, double %177
  %179 = fmul double %170, %176
  %180 = fadd double %178, %179
  %181 = select i1 %160, double 0x3EB94E4F6E12FEE0, double 0x40748B3C8FCAD7FF
  %182 = select i1 %21, double 0xBFBDD5FA0E771B94, double %181
  %183 = fmul double %170, %180
  %184 = fadd double %182, %183
  %185 = select i1 %160, double 0x3EB59C884A045AF0, double 0x40719D088C23DF05
  %186 = select i1 %21, double 0xBFF644D13921C967, double %185
  %187 = fmul double %170, %184
  %188 = fadd double %186, %187
  %189 = select i1 %160, double 0x3E9FD66B0AC39DFF, double 0x40659BBECDBF523B
  %190 = select i1 %21, double 0x3F8ED5BD48E4F389, double %189
  %191 = fmul double %170, %188
  %192 = fadd double %190, %191
  %193 = select i1 %160, double 0xBE71986F7AC19AC9, double 0x40535F30DE19A3FA
  %194 = select i1 %21, double 0x3FC6FB2BA98C8BC4, double %193
  %195 = fmul double %170, %192
  %196 = fadd double %194, %195
  %197 = select i1 %160, double 0xBE956718120CF4B7, double 0x403920E9BAC7B07E
  %198 = select i1 %21, double 0xBF645497F334CD1D, double %197
  %199 = fmul double %170, %196
  %200 = fadd double %198, %199
  %201 = select i1 %160, double 0x3E823D16D999C674, double 0x40171131F32ACF74
  %202 = select i1 %21, double 0xBF9E3C8E8BED86BB, double %201
  %203 = fmul double %170, %200
  %204 = fadd double %202, %203
  %205 = select i1 %160, double 0xBE9D26D12E073976, double 0x3FE743CF466BEB1B
  %206 = select i1 %21, double 0x3F41B33B019B3E6F, double %205
  %207 = fmul double %170, %204
  %208 = fadd double %206, %207
  %209 = select i1 %160, double 0x3EB050C384661C46, double 0x3FB57EDE06D746AF
  %210 = select i1 %21, double 0x3F7A3A699F4A401B, double %209
  %211 = fmul double %170, %208
  %212 = fadd double %210, %211
  %213 = select i1 %160, double 0xBEC1162DF3C28D5A, double 0xBFB50586EF5B83AC
  %214 = select i1 %21, double 0xBF254D241144693F, double %213
  %215 = fmul double %170, %212
  %216 = fadd double %214, %215
  %217 = select i1 %160, double 0x3ED257DCE81F6BB4, double 0x3FB17B57DDB9E32F
  %218 = select i1 %21, double 0xBF5F5DBCAF756CDE, double %217
  %219 = fmul double %170, %216
  %220 = fadd double %218, %219
  %221 = select i1 %160, double 0xBEE3CC0905ECA8BE, double 0xBFB3BE73A742EECE
  %222 = select i1 %21, double 0x3F12E31F9B7913EA, double %221
  %223 = fmul double %170, %220
  %224 = fadd double %222, %223
  %225 = select i1 %160, double 0x3EF580E0E2726AC9, double 0x3FB5580F0BB1F8CA
  %226 = select i1 %21, double 0x3F4B8239C670E690, double %225
  %227 = fmul double %170, %224
  %228 = fadd double %226, %227
  %229 = select i1 %160, double 0xBF078DE48A7816D9, double 0xBFB74879E96382CA
  %230 = select i1 %21, double 0xBF0B1D75D3346711, double %229
  %231 = fmul double %170, %228
  %232 = fadd double %230, %231
  %233 = select i1 %160, double 0x3F1A127B0D3DBB7D, double 0x3FB9A0212305C3B9
  %234 = select i1 %21, double 0xBF436773BDB97B48, double %233
  %235 = fmul double %170, %232
  %236 = fadd double %234, %235
  %237 = select i1 %160, double 0xBF2D3FD4CA9D6B1F, double 0xBFBC80675DF4ED19
  %238 = select i1 %21, double 0x3F1247604839C038, double %237
  %239 = fmul double %170, %236
  %240 = fadd double %238, %239
  %241 = select i1 %160, double 0x3F40B36AF85EF785, double 0x3FC010B3663D08D8
  %242 = select i1 %21, double 0x3F49B0FF6874F2C4, double %241
  %243 = fmul double %170, %240
  %244 = fadd double %242, %243
  %245 = select i1 %160, double 0xBF538AC5C2BD10CA, double 0xBFC2703A1DD72363
  %246 = select i1 %21, double 0xBF2E13CE465FA859, double %245
  %247 = fmul double %170, %244
  %248 = fadd double %246, %247
  %249 = select i1 %160, double 0x3F67ADD6EADB7260, double 0x3FC5B40CB1047E2E
  %250 = select i1 %21, double 0xBF65F7268EDAB4C8, double %249
  %251 = fmul double %170, %248
  %252 = fadd double %250, %251
  %253 = select i1 %160, double 0xBF7E404FC218F817, double 0xBFCA8B9C17AA3C08
  %254 = select i1 %21, double 0x3F6C71C71C71C71C, double %253
  %255 = fmul double %170, %252
  %256 = fadd double %254, %255
  %257 = select i1 %160, double 0x3F951322AC7D8485, double 0x3FD151322AC7D813
  %258 = select i1 %21, double 0x3FB5555555555555, double %257
  %259 = fmul double %170, %256
  %260 = fadd double %258, %259
  %261 = fadd double %157, -5.000000e-01
  %262 = fsub double %261, %157
  %263 = fsub double %261, %262
  %264 = fsub double %157, %263
  %265 = fsub double -5.000000e-01, %262
  %266 = fadd double %265, %264
  %267 = fadd double %158, %266
  %268 = fmul double %157, 0x3FF5555555555555
  %269 = fcmp uge double %268, 0x2D30000000000000
  %270 = fmul double %268, 0x52B0000000000000
  %271 = select i1 %269, double %268, double %270
  %272 = bitcast double %271 to i64
  %273 = lshr i64 %272, 52
  %274 = trunc i64 %273 to i32
  %275 = select i1 %269, i32 1023, i32 1323
  %276 = sub nsw i32 %274, %275
  %277 = sub nsw i32 0, %276
  %278 = ashr i32 %277, 1
  %279 = add nsw i32 %278, 1023
  %280 = zext i32 %279 to i64
  %281 = shl i64 %280, 52
  %282 = bitcast i64 %281 to double
  %283 = fmul double %157, %282
  %284 = sub nsw i32 1023, %276
  %285 = sub nsw i32 %284, %278
  %286 = zext i32 %285 to i64
  %287 = shl i64 %286, 52
  %288 = bitcast i64 %287 to double
  %289 = fmul double %283, %288
  %290 = fmul double %158, %282
  %291 = fmul double %290, %288
  %292 = fadd double %289, -1.000000e+00
  %293 = fsub double %292, %289
  %294 = fsub double %292, %293
  %295 = fsub double %289, %294
  %296 = fsub double -1.000000e+00, %293
  %297 = fadd double %296, %295
  %298 = fadd double %291, %297
  %299 = fadd double %289, 1.000000e+00
  %300 = fsub double %299, %289
  %301 = fsub double %299, %300
  %302 = fsub double %289, %301
  %303 = fsub double 1.000000e+00, %300
  %304 = fadd double %303, %302
  %305 = fadd double %291, %304
  %306 = fdiv double 1.000000e+00, %299
  %307 = bitcast double %299 to i64
  %308 = and i64 %307, -134217728
  %309 = bitcast i64 %308 to double
  %310 = fsub double %299, %309
  %311 = bitcast double %306 to i64
  %312 = and i64 %311, -134217728
  %313 = bitcast i64 %312 to double
  %314 = fsub double %306, %313
  %315 = bitcast double %292 to i64
  %316 = and i64 %315, -134217728
  %317 = bitcast i64 %316 to double
  %318 = fsub double %292, %317
  %319 = fmul double %292, %306
  %320 = fmul double %317, %313
  %321 = fsub double %320, %319
  %322 = fmul double %314, %317
  %323 = fmul double %318, %313
  %324 = fmul double %318, %314
  %325 = fmul double %309, %313
  %326 = fmul double %314, %309
  %327 = fmul double %310, %313
  %328 = fmul double %310, %314
  %329 = fsub double 1.000000e+00, %325
  %330 = fsub double %329, %326
  %331 = fsub double %330, %327
  %332 = fsub double %331, %328
  %333 = fmul double %319, %332
  %334 = fadd double %321, %322
  %335 = fadd double %323, %334
  %336 = fadd double %324, %335
  %337 = fadd double %336, %333
  %338 = fmul double %319, %305
  %339 = fsub double %298, %338
  %340 = fmul double %306, %339
  %341 = fadd double %340, %337
  %342 = bitcast double %319 to i64
  %343 = and i64 %342, -134217728
  %344 = bitcast i64 %343 to double
  %345 = fsub double %319, %344
  %346 = fmul double %319, %319
  %347 = fmul double %344, %344
  %348 = fadd double %344, %344
  %349 = fmul double %348, %345
  %350 = fmul double %345, %345
  %351 = fadd double %341, %341
  %352 = fmul double %319, %351
  %353 = fsub double %347, %346
  %354 = fadd double %353, %349
  %355 = fadd double %350, %354
  %356 = fadd double %355, %352
  %357 = fmul double %346, %346
  %358 = fmul double %357, %357
  %359 = fmul double %346, 0x3FC0DB8A525B4A6B
  %360 = fadd double %359, 0x3FC3B3759FB81971
  %361 = fmul double %357, 0x3FC1BDC9AD06D760
  %362 = fadd double %361, %360
  %363 = fmul double %346, 0x3FC745C38C19C82A
  %364 = fadd double %363, 0x3FCC71C750354F90
  %365 = fmul double %346, 0x3FD2492492114D0C
  %366 = fadd double %365, 0x3FD999999999D9EB
  %367 = fmul double %357, %364
  %368 = fadd double %366, %367
  %369 = fmul double %358, %362
  %370 = fadd double %369, %368
  %371 = fmul double %346, %370
  %372 = fadd double %371, 0x3FE5555555555545
  %373 = sitofp i32 %276 to double
  %374 = bitcast double %373 to i64
  %375 = and i64 %374, -134217728
  %376 = bitcast i64 %375 to double
  %377 = fsub double %373, %376
  %378 = fmul double %373, 0x3FE62E42FEFA39EF
  %379 = fmul double %376, 0x3FE62E42F8000000
  %380 = fmul double %376, 0x3E4BE8E7BC000000
  %381 = fmul double %377, 0x3FE62E42F8000000
  %382 = fmul double %377, 0x3E4BE8E7BC000000
  %383 = fmul double %373, 0x3C7ABC9E3B39803F
  %384 = fsub double %379, %378
  %385 = fadd double %380, %384
  %386 = fadd double %381, %385
  %387 = fadd double %382, %386
  %388 = fadd double %383, %387
  %389 = fmul double %319, 2.000000e+00
  %390 = fmul double %341, 2.000000e+00
  %391 = fadd double %378, %389
  %392 = fsub double %378, %391
  %393 = fadd double %389, %392
  %394 = fadd double %388, %393
  %395 = fadd double %394, %390
  %396 = bitcast double %346 to i64
  %397 = and i64 %396, -134217728
  %398 = bitcast i64 %397 to double
  %399 = fsub double %346, %398
  %400 = fmul double %319, %346
  %401 = fmul double %344, %398
  %402 = fmul double %399, %344
  %403 = fmul double %345, %398
  %404 = fmul double %345, %399
  %405 = fmul double %346, %341
  %406 = fmul double %319, %356
  %407 = fsub double %401, %400
  %408 = fadd double %402, %407
  %409 = fadd double %403, %408
  %410 = fadd double %404, %409
  %411 = fadd double %410, %405
  %412 = fadd double %411, %406
  %413 = bitcast double %400 to i64
  %414 = and i64 %413, -134217728
  %415 = bitcast i64 %414 to double
  %416 = fsub double %400, %415
  %417 = bitcast double %372 to i64
  %418 = and i64 %417, -134217728
  %419 = bitcast i64 %418 to double
  %420 = fsub double %372, %419
  %421 = fmul double %400, %372
  %422 = fmul double %415, %419
  %423 = fmul double %416, %419
  %424 = fmul double %420, %415
  %425 = fmul double %416, %420
  %426 = fmul double %372, %412
  %427 = fsub double %422, %421
  %428 = fadd double %423, %427
  %429 = fadd double %424, %428
  %430 = fadd double %425, %429
  %431 = fadd double %426, %430
  %432 = fadd double %391, %421
  %433 = fsub double %391, %432
  %434 = fadd double %421, %433
  %435 = fadd double %434, %395
  %436 = fadd double %435, %431
  %437 = bitcast double %261 to i64
  %438 = and i64 %437, -134217728
  %439 = bitcast i64 %438 to double
  %440 = fsub double %261, %439
  %441 = bitcast double %432 to i64
  %442 = and i64 %441, -134217728
  %443 = bitcast i64 %442 to double
  %444 = fsub double %432, %443
  %445 = fmul double %261, %432
  %446 = fmul double %439, %443
  %447 = fmul double %440, %443
  %448 = fmul double %444, %439
  %449 = fmul double %440, %444
  %450 = fmul double %261, %436
  %451 = fmul double %267, %432
  %452 = fsub double %446, %445
  %453 = fadd double %447, %452
  %454 = fadd double %448, %453
  %455 = fadd double %449, %454
  %456 = fadd double %455, %450
  %457 = fadd double %451, %456
  %458 = fsub double -0.000000e+00, %157
  %459 = fsub double %445, %157
  %460 = fsub double %459, %445
  %461 = fsub double %459, %460
  %462 = fsub double %445, %461
  %463 = fsub double %458, %460
  %464 = fadd double %463, %462
  %465 = fsub double %457, %158
  %466 = fadd double %464, %465
  %467 = fadd double %459, 0x3FED67F1C864BEB5
  %468 = fsub double %467, %459
  %469 = fsub double %467, %468
  %470 = fsub double %459, %469
  %471 = fsub double 0x3FED67F1C864BEB5, %468
  %472 = fadd double %471, %470
  %473 = fadd double %466, 0xBC865B5A1B7FF5DF
  %474 = fadd double %472, %473
  %475 = bitcast double %260 to i64
  %476 = and i64 %475, -134217728
  %477 = bitcast i64 %476 to double
  %478 = fsub double %260, %477
  %479 = bitcast double %170 to i64
  %480 = and i64 %479, -134217728
  %481 = bitcast i64 %480 to double
  %482 = fsub double %170, %481
  %483 = fmul double %170, %260
  %484 = fmul double %481, %477
  %485 = fmul double %478, %481
  %486 = fmul double %482, %477
  %487 = fmul double %482, %478
  %488 = fsub double %484, %483
  %489 = fadd double %485, %488
  %490 = fadd double %486, %489
  %491 = fadd double %487, %490
  %492 = select i1 %160, double 0xBFB13E001A557607, double 0xBFD9A4D55BEAB2D8
  %493 = fadd double %492, %483
  %494 = fsub double %493, %483
  %495 = fsub double %493, %494
  %496 = fsub double %483, %495
  %497 = fsub double %492, %494
  %498 = fadd double %497, %496
  %499 = fadd double %498, %491
  %500 = bitcast double %493 to i64
  %501 = and i64 %500, -134217728
  %502 = bitcast i64 %501 to double
  %503 = fsub double %493, %502
  %504 = fmul double %170, %493
  %505 = fmul double %481, %502
  %506 = fmul double %503, %481
  %507 = fmul double %482, %502
  %508 = fmul double %482, %503
  %509 = fmul double %170, %499
  %510 = fsub double %505, %504
  %511 = fadd double %506, %510
  %512 = fadd double %507, %511
  %513 = fadd double %508, %512
  %514 = fadd double %509, %513
  %515 = select i1 %160, double 0x3FD4A34CC4A60FA6, double 0x3FEA51A6625307D3
  %516 = fadd double %515, %504
  %517 = fsub double %516, %504
  %518 = fsub double %516, %517
  %519 = fsub double %504, %518
  %520 = fsub double %515, %517
  %521 = fadd double %520, %519
  %522 = fadd double %521, %514
  %523 = bitcast double %516 to i64
  %524 = and i64 %523, -134217728
  %525 = bitcast i64 %524 to double
  %526 = fsub double %516, %525
  %527 = fmul double %170, %516
  %528 = fmul double %481, %525
  %529 = fmul double %526, %481
  %530 = fmul double %482, %525
  %531 = fmul double %482, %526
  %532 = fmul double %170, %522
  %533 = fsub double %528, %527
  %534 = fadd double %529, %533
  %535 = fadd double %530, %534
  %536 = fadd double %531, %535
  %537 = fadd double %536, %532
  %538 = select i1 %160, double 0x3FDB0EE6072093CE, double 0xBFE2788CFC6FB619
  %539 = fadd double %538, %527
  %540 = fsub double %539, %527
  %541 = fsub double %539, %540
  %542 = fsub double %527, %541
  %543 = fsub double %538, %540
  %544 = fadd double %543, %542
  %545 = fadd double %544, %537
  %546 = bitcast double %539 to i64
  %547 = and i64 %546, -134217728
  %548 = bitcast i64 %547 to double
  %549 = fsub double %539, %548
  %550 = fmul double %170, %539
  %551 = fmul double %481, %548
  %552 = fmul double %549, %481
  %553 = fmul double %482, %548
  %554 = fmul double %482, %549
  %555 = fmul double %170, %545
  %556 = fsub double %551, %550
  %557 = fadd double %552, %556
  %558 = fadd double %553, %557
  %559 = fadd double %554, %558
  %560 = fadd double %559, %555
  %561 = select i1 %21, double %467, double %550
  %562 = select i1 %21, double %474, double %560
  %563 = fadd double %483, 1.000000e+00
  %564 = fsub double %563, %483
  %565 = fsub double %563, %564
  %566 = fsub double %483, %565
  %567 = fsub double 1.000000e+00, %564
  %568 = fadd double %567, %566
  %569 = fadd double %568, %491
  %570 = select i1 %21, double %563, double 1.000000e+00
  %571 = select i1 %21, double %569, double 0.000000e+00
  %572 = fsub double -0.000000e+00, %561
  %573 = fsub double 0x3FF250D048E7A1BD, %561
  %574 = fadd double %573, 0xBFF250D048E7A1BD
  %575 = fsub double %573, %574
  %576 = fsub double 0x3FF250D048E7A1BD, %575
  %577 = fsub double %572, %574
  %578 = fadd double %577, %576
  %579 = fsub double 0x3C67ABF2AD8D5088, %562
  %580 = fadd double %578, %579
  %581 = select i1 %7, double %573, double %561
  %582 = select i1 %7, double %580, double %562
  %583 = select i1 %6, double %581, double 0x4054CB5ECF0A9650
  %584 = select i1 %6, double %582, double 0x3CF0886A2BC2F41E
  %585 = select i1 %7, double %148, double %570
  %586 = select i1 %7, double %149, double %571
  %587 = select i1 %6, double %585, double 1.000000e+00
  %588 = select i1 %6, double %586, double 0.000000e+00
  br i1 %7, label %589, label %736

; <label>:589:                                    ; preds = %2
  %590 = fmul double %1, 0x3E30000000000000
  %591 = fptosi double %590 to i32
  %592 = sitofp i32 %591 to double
  %593 = fmul double %592, 0x41B0000000000000
  %594 = fsub double %1, %593
  %595 = fmul double %594, 4.000000e+00
  %596 = fptosi double %595 to i32
  %597 = lshr i32 %596, 31
  %598 = xor i32 %597, 1
  %599 = add nsw i32 %598, %596
  %600 = and i32 %599, -2
  %601 = sitofp i32 %600 to double
  %602 = fsub double %595, %601
  %603 = fmul double %602, %602
  %604 = bitcast double %602 to i64
  %605 = and i64 %604, -134217728
  %606 = bitcast i64 %605 to double
  %607 = fsub double %602, %606
  %608 = fmul double %606, %606
  %609 = fmul double %607, %606
  %610 = fmul double %607, %607
  %611 = fsub double %608, %603
  %612 = fadd double %609, %611
  %613 = fadd double %609, %612
  %614 = fadd double %610, %613
  %615 = and i32 %599, 2
  %616 = icmp eq i32 %615, 0
  %617 = select i1 %616, double 0xBD16CB8B645A2115, double 0x3CD1EA3B366CF50B
  %618 = select i1 %616, double 0x3D9E8EFF936BEB38, double 0xBD5B6DF1CE46F480
  %619 = fmul double %617, %603
  %620 = fadd double %618, %619
  %621 = select i1 %616, double 0xBE1E3074CBC7E020, double 0x3DDF9D387B282B12
  %622 = fmul double %603, %620
  %623 = fadd double %621, %622
  %624 = select i1 %616, double 0x3E950783486A74C8, double 0xBE5A6D1F2A0E516D
  %625 = fmul double %603, %623
  %626 = fadd double %624, %625
  %627 = select i1 %616, double 0xBF032D2CCE62B479, double 0x3ECE1F506891B1AB
  %628 = fmul double %603, %626
  %629 = fadd double %627, %628
  %630 = select i1 %616, double 0x3F6466BC6775AADE, double 0xBF355D3C7E3CBFF8
  %631 = fmul double %603, %629
  %632 = fadd double %630, %631
  %633 = fmul double %603, %632
  %634 = select i1 %616, double 0xBFB4ABBCE625BE53, double 0x3F903C1F081B5AC4
  %635 = select i1 %616, double 0x3C50B00000000000, double 0xBC33500000000000
  %636 = fadd double %634, %633
  %637 = fsub double %636, %633
  %638 = fsub double %636, %637
  %639 = fsub double %633, %638
  %640 = fsub double %634, %637
  %641 = fadd double %640, %639
  %642 = fadd double %635, %641
  %643 = bitcast double %603 to i64
  %644 = and i64 %643, -134217728
  %645 = bitcast i64 %644 to double
  %646 = fsub double %603, %645
  %647 = bitcast double %636 to i64
  %648 = and i64 %647, -134217728
  %649 = bitcast i64 %648 to double
  %650 = fsub double %636, %649
  %651 = fmul double %603, %636
  %652 = fmul double %645, %649
  %653 = fmul double %646, %649
  %654 = fmul double %650, %645
  %655 = fmul double %646, %650
  %656 = fmul double %603, %642
  %657 = fmul double %614, %636
  %658 = fsub double %652, %651
  %659 = fadd double %653, %658
  %660 = fadd double %654, %659
  %661 = fadd double %655, %660
  %662 = fadd double %656, %661
  %663 = fadd double %657, %662
  %664 = select i1 %616, double 0x3FE921FB54442D18, double 0xBFD3BD3CC9BE45DE
  %665 = select i1 %616, double 0x3C81A80000000000, double 0xBC76900000000000
  %666 = fadd double %664, %651
  %667 = fsub double %666, %651
  %668 = fsub double %666, %667
  %669 = fsub double %651, %668
  %670 = fsub double %664, %667
  %671 = fadd double %670, %669
  %672 = fadd double %665, %663
  %673 = fadd double %671, %672
  %674 = select i1 %616, double %602, double %603
  %675 = select i1 %616, double 0.000000e+00, double %614
  %676 = bitcast double %666 to i64
  %677 = and i64 %676, -134217728
  %678 = bitcast i64 %677 to double
  %679 = fsub double %666, %678
  %680 = bitcast double %674 to i64
  %681 = and i64 %680, -134217728
  %682 = bitcast i64 %681 to double
  %683 = fsub double %674, %682
  %684 = fmul double %674, %666
  %685 = fmul double %682, %678
  %686 = fmul double %679, %682
  %687 = fmul double %683, %678
  %688 = fmul double %683, %679
  %689 = fmul double %675, %666
  %690 = fmul double %674, %673
  %691 = fsub double %685, %684
  %692 = fadd double %686, %691
  %693 = fadd double %687, %692
  %694 = fadd double %688, %693
  %695 = fadd double %689, %694
  %696 = fadd double %695, %690
  %697 = fadd double %684, 1.000000e+00
  %698 = fsub double %697, %684
  %699 = fsub double %697, %698
  %700 = fsub double %684, %699
  %701 = fsub double 1.000000e+00, %698
  %702 = fadd double %701, %700
  %703 = fadd double %702, %696
  %704 = select i1 %616, double %684, double %697
  %705 = select i1 %616, double %696, double %703
  %706 = shl i32 %599, 29
  %707 = zext i32 %706 to i64
  %708 = shl nuw i64 %707, 32
  %709 = and i64 %708, -9223372036854775808
  %710 = bitcast double %704 to i64
  %711 = xor i64 %709, %710
  %712 = bitcast i64 %711 to double
  %713 = bitcast double %705 to i64
  %714 = xor i64 %709, %713
  %715 = bitcast i64 %714 to double
  %716 = bitcast double %570 to i64
  %717 = and i64 %716, -134217728
  %718 = bitcast i64 %717 to double
  %719 = fsub double %570, %718
  %720 = and i64 %711, -134217728
  %721 = bitcast i64 %720 to double
  %722 = fsub double %712, %721
  %723 = fmul double %570, %712
  %724 = fmul double %721, %718
  %725 = fmul double %719, %721
  %726 = fmul double %722, %718
  %727 = fmul double %722, %719
  %728 = fmul double %570, %715
  %729 = fmul double %571, %712
  %730 = fsub double %724, %723
  %731 = fadd double %725, %730
  %732 = fadd double %726, %731
  %733 = fadd double %727, %732
  %734 = fadd double %728, %733
  %735 = fadd double %729, %734
  br label %736

; <label>:736:                                    ; preds = %2, %589
  %737 = phi double [ %157, %2 ], [ %723, %589 ]
  %738 = phi double [ %158, %2 ], [ %735, %589 ]
  %739 = fmul double %1, 0x4770000000000000
  %740 = select i1 %7, double %737, double %148
  %741 = select i1 %7, double %738, double %149
  %742 = select i1 %6, double %740, double %739
  %743 = select i1 %6, double %741, double 0.000000e+00
  %744 = fdiv double 1.000000e+00, %742
  %745 = bitcast double %742 to i64
  %746 = and i64 %745, -134217728
  %747 = bitcast i64 %746 to double
  %748 = fsub double %742, %747
  %749 = bitcast double %744 to i64
  %750 = and i64 %749, -134217728
  %751 = bitcast i64 %750 to double
  %752 = fsub double %744, %751
  %753 = bitcast double %587 to i64
  %754 = and i64 %753, -134217728
  %755 = bitcast i64 %754 to double
  %756 = fsub double %587, %755
  %757 = fmul double %587, %744
  %758 = fmul double %755, %751
  %759 = fsub double %758, %757
  %760 = fmul double %752, %755
  %761 = fmul double %756, %751
  %762 = fmul double %756, %752
  %763 = fmul double %747, %751
  %764 = fmul double %752, %747
  %765 = fmul double %748, %751
  %766 = fmul double %748, %752
  %767 = fsub double 1.000000e+00, %763
  %768 = fsub double %767, %764
  %769 = fsub double %768, %765
  %770 = fsub double %769, %766
  %771 = fmul double %757, %770
  %772 = fadd double %759, %760
  %773 = fadd double %761, %772
  %774 = fadd double %762, %773
  %775 = fadd double %774, %771
  %776 = fmul double %743, %757
  %777 = fsub double %588, %776
  %778 = fmul double %744, %777
  %779 = fadd double %778, %775
  %780 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store double %583, double* %780, align 8
  %781 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store double %584, double* %781, align 8
  %782 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store double %757, double* %782, align 8
  %783 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store double %779, double* %783, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define double @Sleef_lgammad1_u10purec(double) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, double %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %5 = bitcast double* %4 to i64*
  %6 = load i64, i64* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast double* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %6, 9223372036854775807
  %11 = bitcast i64 %10 to double
  %12 = and i64 %6, -9223372036854775808
  %13 = xor i64 %12, %9
  %14 = bitcast i64 %13 to double
  %15 = fmul double %11, 0x3FF5555555555555
  %16 = fcmp uge double %15, 0x2D30000000000000
  %17 = fmul double %15, 0x52B0000000000000
  %18 = select i1 %16, double %15, double %17
  %19 = bitcast double %18 to i64
  %20 = lshr i64 %19, 52
  %21 = trunc i64 %20 to i32
  %22 = select i1 %16, i32 1023, i32 1323
  %23 = sub nsw i32 %21, %22
  %24 = sub nsw i32 0, %23
  %25 = ashr i32 %24, 1
  %26 = add nsw i32 %25, 1023
  %27 = zext i32 %26 to i64
  %28 = shl i64 %27, 52
  %29 = bitcast i64 %28 to double
  %30 = fmul double %11, %29
  %31 = sub nsw i32 1023, %23
  %32 = sub nsw i32 %31, %25
  %33 = zext i32 %32 to i64
  %34 = shl i64 %33, 52
  %35 = bitcast i64 %34 to double
  %36 = fmul double %30, %35
  %37 = fmul double %14, %29
  %38 = fmul double %37, %35
  %39 = fadd double %36, -1.000000e+00
  %40 = fsub double %39, %36
  %41 = fsub double %39, %40
  %42 = fsub double %36, %41
  %43 = fsub double -1.000000e+00, %40
  %44 = fadd double %43, %42
  %45 = fadd double %38, %44
  %46 = fadd double %36, 1.000000e+00
  %47 = fsub double %46, %36
  %48 = fsub double %46, %47
  %49 = fsub double %36, %48
  %50 = fsub double 1.000000e+00, %47
  %51 = fadd double %50, %49
  %52 = fadd double %38, %51
  %53 = fdiv double 1.000000e+00, %46
  %54 = bitcast double %46 to i64
  %55 = and i64 %54, -134217728
  %56 = bitcast i64 %55 to double
  %57 = fsub double %46, %56
  %58 = bitcast double %53 to i64
  %59 = and i64 %58, -134217728
  %60 = bitcast i64 %59 to double
  %61 = fsub double %53, %60
  %62 = bitcast double %39 to i64
  %63 = and i64 %62, -134217728
  %64 = bitcast i64 %63 to double
  %65 = fsub double %39, %64
  %66 = fmul double %39, %53
  %67 = fmul double %64, %60
  %68 = fsub double %67, %66
  %69 = fmul double %61, %64
  %70 = fmul double %65, %60
  %71 = fmul double %65, %61
  %72 = fmul double %56, %60
  %73 = fmul double %61, %56
  %74 = fmul double %57, %60
  %75 = fmul double %57, %61
  %76 = fsub double 1.000000e+00, %72
  %77 = fsub double %76, %73
  %78 = fsub double %77, %74
  %79 = fsub double %78, %75
  %80 = fmul double %66, %79
  %81 = fadd double %68, %69
  %82 = fadd double %70, %81
  %83 = fadd double %71, %82
  %84 = fadd double %83, %80
  %85 = fmul double %66, %52
  %86 = fsub double %45, %85
  %87 = fmul double %53, %86
  %88 = bitcast double %66 to i64
  %89 = and i64 %88, -134217728
  %90 = bitcast i64 %89 to double
  %91 = fsub double %66, %90
  %92 = fmul double %66, %66
  %93 = fmul double %90, %90
  %94 = fadd double %90, %90
  %95 = fmul double %94, %91
  %96 = fmul double %91, %91
  %97 = fmul double %92, %92
  %98 = fmul double %97, %97
  %99 = fmul double %92, 0x3FC0DB8A525B4A6B
  %100 = fadd double %99, 0x3FC3B3759FB81971
  %101 = insertelement <2 x double> undef, double %97, i32 0
  %102 = insertelement <2 x double> %101, double %92, i32 1
  %103 = fmul <2 x double> %102, <double 0x3FC1BDC9AD06D760, double 0x3FC745C38C19C82A>
  %104 = insertelement <2 x double> <double undef, double 0x3FCC71C750354F90>, double %100, i32 0
  %105 = fadd <2 x double> %103, %104
  %106 = fmul double %92, 0x3FD2492492114D0C
  %107 = fadd double %106, 0x3FD999999999D9EB
  %108 = insertelement <2 x double> undef, double %98, i32 0
  %109 = insertelement <2 x double> %108, double %97, i32 1
  %110 = fmul <2 x double> %109, %105
  %111 = extractelement <2 x double> %110, i32 1
  %112 = fadd double %107, %111
  %113 = extractelement <2 x double> %110, i32 0
  %114 = fadd double %113, %112
  %115 = fmul double %92, %114
  %116 = fadd double %115, 0x3FE5555555555545
  %117 = bitcast double %116 to i64
  %118 = and i64 %117, -134217728
  %119 = bitcast i64 %118 to double
  %120 = insertelement <2 x double> undef, double %87, i32 0
  %121 = insertelement <2 x double> %120, double %116, i32 1
  %122 = insertelement <2 x double> undef, double %84, i32 0
  %123 = insertelement <2 x double> %122, double %119, i32 1
  %124 = fadd <2 x double> %121, %123
  %125 = fsub <2 x double> %121, %123
  %126 = shufflevector <2 x double> %124, <2 x double> %125, <2 x i32> <i32 0, i32 3>
  %127 = extractelement <2 x double> %124, i32 0
  %128 = fadd double %127, %127
  %129 = fmul double %66, %128
  %130 = fsub double %93, %92
  %131 = fadd double %130, %95
  %132 = fadd double %96, %131
  %133 = fadd double %132, %129
  %134 = sitofp i32 %23 to double
  %135 = bitcast double %134 to i64
  %136 = and i64 %135, -134217728
  %137 = bitcast i64 %136 to double
  %138 = fsub double %134, %137
  %139 = fmul double %137, 0x3FE62E42F8000000
  %140 = fmul double %137, 0x3E4BE8E7BC000000
  %141 = fmul double %138, 0x3FE62E42F8000000
  %142 = fmul double %138, 0x3E4BE8E7BC000000
  %143 = fmul double %134, 0x3C7ABC9E3B39803F
  %144 = fmul double %66, %92
  %145 = bitcast double %144 to i64
  %146 = and i64 %145, -134217728
  %147 = bitcast i64 %146 to double
  %148 = insertelement <2 x double> <double 0x3FE62E42FEFA39EF, double undef>, double %147, i32 1
  %149 = insertelement <2 x double> undef, double %134, i32 0
  %150 = insertelement <2 x double> %149, double %119, i32 1
  %151 = fmul <2 x double> %148, %150
  %152 = extractelement <2 x double> %151, i32 0
  %153 = fsub double %139, %152
  %154 = fadd double %140, %153
  %155 = fadd double %141, %154
  %156 = fadd double %142, %155
  %157 = fadd double %143, %156
  %158 = fsub double %144, %147
  %159 = insertelement <2 x double> <double 2.000000e+00, double undef>, double %158, i32 1
  %160 = insertelement <2 x double> undef, double %66, i32 0
  %161 = insertelement <2 x double> %160, double %119, i32 1
  %162 = fmul <2 x double> %159, %161
  %163 = extractelement <2 x double> %162, i32 0
  %164 = fadd double %152, %163
  %165 = bitcast double %92 to i64
  %166 = and i64 %165, -134217728
  %167 = bitcast i64 %166 to double
  %168 = fsub double %92, %167
  %169 = fmul double %90, %167
  %170 = fmul double %168, %90
  %171 = fmul double %91, %167
  %172 = fmul double %91, %168
  %173 = fmul double %92, %127
  %174 = fmul double %66, %133
  %175 = fsub double %169, %144
  %176 = fadd double %170, %175
  %177 = fadd double %171, %176
  %178 = fadd double %172, %177
  %179 = fadd double %178, %173
  %180 = fadd double %179, %174
  %181 = fmul double %144, %116
  %182 = extractelement <2 x double> %125, i32 1
  %183 = fmul double %182, %147
  %184 = fmul <2 x double> %159, %126
  %185 = fmul double %116, %180
  %186 = insertelement <2 x double> undef, double %164, i32 0
  %187 = insertelement <2 x double> %186, double %181, i32 1
  %188 = fsub <2 x double> %151, %187
  %189 = fadd <2 x double> %162, %188
  %190 = insertelement <2 x double> undef, double %157, i32 0
  %191 = insertelement <2 x double> %190, double %183, i32 1
  %192 = fadd <2 x double> %191, %189
  %193 = fadd <2 x double> %192, %184
  %194 = fadd double %164, %181
  %195 = fsub double %164, %194
  %196 = fadd double %181, %195
  %197 = insertelement <2 x double> undef, double %196, i32 0
  %198 = insertelement <2 x double> %197, double %185, i32 1
  %199 = fadd <2 x double> %198, %193
  %200 = extractelement <2 x double> %199, i32 0
  %201 = extractelement <2 x double> %199, i32 1
  %202 = fadd double %200, %201
  %203 = bitcast %struct.dd2* %2 to <2 x double>*
  %204 = load <2 x double>, <2 x double>* %203, align 16
  %205 = insertelement <2 x double> undef, double %194, i32 0
  %206 = insertelement <2 x double> %205, double %202, i32 1
  %207 = fadd <2 x double> %204, %206
  %208 = extractelement <2 x double> %207, i32 0
  %209 = extractelement <2 x double> %204, i32 0
  %210 = fsub double %208, %209
  %211 = fsub double %208, %210
  %212 = fsub double %209, %211
  %213 = fsub double %194, %210
  %214 = fadd double %213, %212
  %215 = extractelement <2 x double> %207, i32 1
  %216 = fadd double %214, %215
  %217 = fadd double %208, %216
  %218 = fcmp oeq double %0, 0x7FF0000000000000
  %219 = fcmp oeq double %0, 0xFFF0000000000000
  %220 = or i1 %218, %219
  %221 = fcmp ole double %0, 0.000000e+00
  %222 = fmul double %0, 0x3E00000000000000
  %223 = fptosi double %222 to i32
  %224 = sitofp i32 %223 to double
  %225 = fmul double %224, 0x41E0000000000000
  %226 = fsub double %0, %225
  %227 = fptosi double %226 to i32
  %228 = sitofp i32 %227 to double
  %229 = fcmp oeq double %226, %228
  %230 = bitcast double %0 to i64
  %231 = and i64 %230, 9223372036854775807
  %232 = bitcast i64 %231 to double
  %233 = fcmp ogt double %232, 0x4340000000000000
  %234 = or i1 %233, %229
  %235 = and i1 %221, %234
  %236 = fcmp une double %0, 0x7FF0000000000000
  %237 = fcmp une double %0, 0xFFF0000000000000
  %238 = fcmp ord double %0, 0.000000e+00
  %239 = and i1 %237, %236
  %240 = and i1 %238, %239
  %241 = fcmp uno double %217, 0.000000e+00
  %242 = and i1 %240, %241
  %243 = or i1 %235, %242
  %244 = or i1 %220, %243
  %245 = select i1 %244, double 0x7FF0000000000000, double %217
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #6
  ret double %245
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_erfd1_u10purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.000000e+00
  %6 = fcmp uge double %4, 3.700000e+00
  %7 = fcmp uge double %4, 6.000000e+00
  %8 = fmul double %4, %4
  %9 = select i1 %5, double %4, double %8
  %10 = select i1 %6, double 0xBC5AF69FE192740F, double 0x3D1FDFABBDFC43F1
  %11 = select i1 %5, double %10, double 0x3BC00EFEFABE989B
  %12 = select i1 %6, double 0x3CC5E4C21B562709, double 0xBD7A8E25B9CCCB64
  %13 = select i1 %5, double %12, double 0xBC0FE6EC06B043F5
  %14 = fmul double %9, %11
  %15 = fadd double %13, %14
  %16 = select i1 %6, double 0xBD20EE4A859274F9, double 0x3DC50B3AE48C7164
  %17 = select i1 %5, double %16, double 0x3C55A7F67BDE0C17
  %18 = fmul double %9, %15
  %19 = fadd double %17, %18
  %20 = select i1 %6, double 0x3D7095F3964F9BBA, double 0xBE0518912B895660
  %21 = select i1 %5, double %20, double 0xBC9A15164BF4F36C
  %22 = fmul double %9, %19
  %23 = fadd double %21, %22
  %24 = select i1 %6, double 0xBDB7174964833400, double 0x3E3E0083E7FD4B05
  %25 = select i1 %5, double %24, double 0x3CDD6F95068FEEA8
  %26 = fmul double %9, %23
  %27 = fadd double %25, %26
  %28 = select i1 %6, double 0x3DF84A341FC35F63, double 0xBE70131398DAE973
  %29 = select i1 %5, double %28, double 0xBD1F56D9FF51275A
  %30 = fmul double %9, %27
  %31 = fadd double %29, %30
  %32 = select i1 %6, double 0xBE34092FAEC3CB81, double 0x3E9AE1C4F259778D
  %33 = select i1 %5, double %32, double 0x3D5F6839841402FB
  %34 = fmul double %9, %31
  %35 = fadd double %33, %34
  %36 = select i1 %6, double 0x3E6A8ABD2DF8AA98, double 0xBEC1E2D7E8039AC0
  %37 = select i1 %5, double %36, double 0xBD9D8453B9E7FD7B
  %38 = fmul double %9, %35
  %39 = fadd double %37, %38
  %40 = select i1 %6, double 0xBE9CA9DF1E6D3F55, double 0x3EE3117A5DB988BA
  %41 = select i1 %5, double %40, double 0x3DD9E6AD5DAB7034
  %42 = fmul double %9, %39
  %43 = fadd double %41, %42
  %44 = select i1 %6, double 0x3EC9739C586B056B, double 0xBF0024D0F7EE3723
  %45 = select i1 %5, double %44, double 0xBE151D7181C08B9D
  %46 = fmul double %9, %43
  %47 = fadd double %45, %46
  %48 = select i1 %6, double 0xBEF2A034D3F36A50, double 0x3F14E58666D1B46F
  %49 = select i1 %5, double %48, double 0x3E4FCC5720620921
  %50 = fmul double %9, %47
  %51 = fadd double %49, %50
  %52 = select i1 %6, double 0x3F1658BA21A7397E, double 0xBF2230DCD58EAD99
  %53 = select i1 %5, double %52, double 0xBE85F742EC43E5C7
  %54 = fmul double %9, %51
  %55 = fadd double %53, %54
  %56 = select i1 %6, double 0xBF3590AE9D03C290, double 0x3F10F5BA38B6A6E5
  %57 = select i1 %5, double %56, double 0x3EBB9E6C9DC6519C
  %58 = fmul double %9, %55
  %59 = fadd double %57, %58
  %60 = select i1 %6, double 0x3F4FC6679B56D25A, double 0x3F405F7D6748381E
  %61 = select i1 %5, double %60, double 0xBEEF4D25C3E0C2EA
  %62 = fmul double %9, %59
  %63 = fadd double %61, %62
  %64 = select i1 %6, double 0xBF5DB24AB8ACFC8B, double 0xBF5A9686E5DE05F7
  %65 = select i1 %5, double %64, double 0x3F1F9A326F9B89B8
  %66 = fmul double %9, %63
  %67 = fadd double %65, %66
  %68 = select i1 %6, double 0xBF3EF7EC1133F0A8, double 0x3F252C1DCB0324BA
  %69 = select i1 %5, double %68, double 0xBF4C02DB40040B84
  %70 = fmul double %9, %67
  %71 = fadd double %69, %70
  %72 = select i1 %6, double 0x3F9567A2F00CE3E5, double 0x3F939CBECA106F66
  %73 = select i1 %5, double %72, double 0x3F7565BCD0E6A540
  %74 = fmul double %9, %71
  %75 = fadd double %73, %74
  %76 = select i1 %6, double 0xBFBAEEA974D564EF, double 0xBFBA4FE8F5D2A23C
  %77 = select i1 %5, double %76, double 0xBF9B82CE31288B52
  %78 = fmul double %9, %75
  %79 = fadd double %77, %78
  %80 = select i1 %6, double 0xBFE44E1CB940DA9C, double 0xBFE45F2B34C61AC0
  %81 = select i1 %5, double %80, double 0x3FBCE2F21A042BE3
  %82 = fmul double %9, %79
  %83 = fadd double %81, %82
  %84 = select i1 %6, double 0xBFF21232BFB32B5A, double 0xBFF20DD7C1F4F99A
  %85 = select i1 %5, double %84, double 0xBFD812746B0379E7
  %86 = fmul double %9, %83
  %87 = fadd double %85, %86
  %88 = bitcast double %87 to i64
  %89 = and i64 %88, -134217728
  %90 = bitcast i64 %89 to double
  %91 = fsub double %87, %90
  %92 = fmul double %9, %87
  %93 = select i1 %6, double 0x3F305C1A38102E9A, double 0x3E6250219DD8BAD1
  %94 = select i1 %5, double %93, double 0x3FF20DD750429B6D
  %95 = fadd double %94, %92
  %96 = insertelement <2 x double> undef, double %95, i32 0
  %97 = insertelement <2 x double> %96, double %9, i32 1
  %98 = bitcast <2 x double> %97 to <2 x i64>
  %99 = and <2 x i64> %98, <i64 -134217728, i64 -134217728>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = insertelement <2 x double> undef, double %91, i32 0
  %102 = insertelement <2 x double> %101, double %90, i32 1
  %103 = shufflevector <2 x double> %100, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %104 = fmul <2 x double> %102, %103
  %105 = extractelement <2 x double> %104, i32 1
  %106 = fsub double %105, %92
  %107 = extractelement <2 x double> %104, i32 0
  %108 = fadd double %107, %106
  %109 = select i1 %6, double 0xBBB9AC0AFE024E87, double 0xBB080EE9AD757828
  %110 = select i1 %5, double %109, double 0x3C71AE3A914FED6D
  %111 = fsub double %95, %92
  %112 = fsub double %95, %111
  %113 = fsub double %92, %112
  %114 = fsub double %94, %111
  %115 = fadd double %114, %113
  %116 = fsub <2 x double> %97, %100
  %117 = and i64 %2, 9223372036720558080
  %118 = bitcast i64 %117 to double
  %119 = fsub double %4, %118
  %120 = fmul double %95, %4
  %121 = insertelement <2 x double> undef, double %118, i32 0
  %122 = shufflevector <2 x double> %121, <2 x double> %116, <2 x i32> <i32 0, i32 3>
  %123 = extractelement <2 x double> %100, i32 0
  %124 = insertelement <2 x double> undef, double %123, i32 0
  %125 = insertelement <2 x double> %124, double %90, i32 1
  %126 = fmul <2 x double> %122, %125
  %127 = insertelement <2 x double> %121, double %91, i32 1
  %128 = fmul <2 x double> %116, %127
  %129 = fmul double %119, %123
  %130 = extractelement <2 x double> %116, i32 0
  %131 = fmul double %119, %130
  %132 = insertelement <2 x double> undef, double %120, i32 0
  %133 = insertelement <2 x double> %132, double %108, i32 1
  %134 = fsub <2 x double> %126, %133
  %135 = fadd <2 x double> %126, %133
  %136 = shufflevector <2 x double> %134, <2 x double> %135, <2 x i32> <i32 0, i32 3>
  %137 = fadd <2 x double> %128, %136
  %138 = insertelement <2 x double> undef, double %129, i32 0
  %139 = insertelement <2 x double> %138, double %110, i32 1
  %140 = fadd <2 x double> %139, %137
  %141 = insertelement <2 x double> undef, double %131, i32 0
  %142 = insertelement <2 x double> %141, double %115, i32 1
  %143 = fadd <2 x double> %142, %140
  %144 = extractelement <2 x double> %143, i32 1
  %145 = fmul double %144, %4
  %146 = extractelement <2 x double> %143, i32 0
  %147 = fadd double %146, %145
  %148 = fadd double %95, %144
  %149 = fmul double %148, 0x3FF71547652B82FE
  %150 = fcmp ogt double %149, 0.000000e+00
  %151 = select i1 %150, double 5.000000e-01, double -5.000000e-01
  %152 = fadd double %149, %151
  %153 = bitcast double %152 to i64
  %154 = fptosi double %152 to i32
  %155 = and i32 %154, 1
  %156 = zext i32 %155 to i64
  %157 = sub i64 %153, %156
  %158 = bitcast i64 %157 to double
  %159 = fptosi double %158 to i32
  %160 = sitofp i32 %159 to double
  %161 = icmp sgt i32 %159, 0
  %162 = select i1 %161, double 5.000000e-01, double -5.000000e-01
  %163 = fadd double %162, %160
  %164 = bitcast double %163 to i64
  %165 = fptosi double %163 to i32
  %166 = and i32 %165, 1
  %167 = zext i32 %166 to i64
  %168 = sub i64 %164, %167
  %169 = bitcast i64 %168 to double
  %170 = fptosi double %169 to i32
  %171 = fmul double %160, 0xBFE62E42FEFA3000
  %172 = fadd double %95, %171
  %173 = fsub double %172, %95
  %174 = fsub double %172, %173
  %175 = fsub double %95, %174
  %176 = fsub double %171, %173
  %177 = fadd double %176, %175
  %178 = fadd double %144, %177
  %179 = fmul double %160, 0xBD53DE6AF278ECE6
  %180 = fadd double %179, %172
  %181 = fsub double %180, %172
  %182 = fsub double %180, %181
  %183 = fsub double %172, %182
  %184 = fsub double %179, %181
  %185 = fadd double %184, %183
  %186 = fadd double %185, %178
  %187 = bitcast double %180 to i64
  %188 = and i64 %187, -134217728
  %189 = bitcast i64 %188 to double
  %190 = fsub double %180, %189
  %191 = fmul double %180, %180
  %192 = fmul double %189, %189
  %193 = fadd double %189, %189
  %194 = fmul double %193, %190
  %195 = fmul double %190, %190
  %196 = fadd double %186, %186
  %197 = fmul double %180, %196
  %198 = fsub double %192, %191
  %199 = fadd double %198, %194
  %200 = fadd double %195, %199
  %201 = fadd double %197, %200
  %202 = bitcast double %191 to i64
  %203 = and i64 %202, -134217728
  %204 = bitcast i64 %203 to double
  %205 = fsub double %191, %204
  %206 = fmul double %191, %191
  %207 = fmul double %204, %204
  %208 = fadd double %204, %204
  %209 = fmul double %208, %205
  %210 = fmul double %205, %205
  %211 = fadd double %201, %201
  %212 = fmul double %191, %211
  %213 = fsub double %207, %206
  %214 = fadd double %213, %209
  %215 = fadd double %210, %214
  %216 = fadd double %215, %212
  %217 = fmul double %206, %206
  %218 = fmul double %180, 0x3DE60632A887194C
  %219 = fadd double %218, 0x3E21F8EAF54829DC
  %220 = fmul double %180, 0x3E5AE652E8103AB6
  %221 = fadd double %220, 0x3E927E4C95A9765C
  %222 = fmul double %180, 0x3EC71DE3A11D7656
  %223 = fadd double %222, 0x3EFA01A01AF6F0B7
  %224 = fmul double %191, %221
  %225 = fadd double %223, %224
  %226 = fmul double %180, 0x3F2A01A01A02D002
  %227 = fadd double %226, 0x3F56C16C16C145CC
  %228 = fmul double %180, 0x3F81111111111119
  %229 = fadd double %228, 0x3FA555555555555A
  %230 = fmul double %191, %227
  %231 = fadd double %229, %230
  %232 = fmul double %206, %225
  %233 = fadd double %231, %232
  %234 = fmul double %219, %217
  %235 = fadd double %234, %233
  %236 = fmul double %180, 0x3FC5555555555555
  %237 = fmul double %189, 0x3FC5555550000000
  %238 = fmul double %190, 0x3FC5555550000000
  %239 = fmul double %189, 0x3E25555554000000
  %240 = fmul double %190, 0x3E25555554000000
  %241 = fmul double %186, 0x3FC5555555555555
  %242 = fsub double %237, %236
  %243 = fadd double %238, %242
  %244 = fadd double %239, %243
  %245 = fadd double %240, %244
  %246 = fadd double %241, %245
  %247 = fadd double %236, 5.000000e-01
  %248 = fsub double 5.000000e-01, %247
  %249 = fadd double %236, %248
  %250 = fadd double %249, %246
  %251 = bitcast double %247 to i64
  %252 = and i64 %251, -134217728
  %253 = bitcast i64 %252 to double
  %254 = fsub double %247, %253
  %255 = fmul double %180, %247
  %256 = fmul double %189, %253
  %257 = fmul double %254, %189
  %258 = fmul double %190, %253
  %259 = fmul double %190, %254
  %260 = fmul double %247, %186
  %261 = fmul double %180, %250
  %262 = fsub double %256, %255
  %263 = fadd double %257, %262
  %264 = fadd double %258, %263
  %265 = fadd double %259, %264
  %266 = fadd double %260, %265
  %267 = fadd double %261, %266
  %268 = fadd double %255, 1.000000e+00
  %269 = fsub double 1.000000e+00, %268
  %270 = fadd double %255, %269
  %271 = fadd double %270, %267
  %272 = bitcast double %268 to i64
  %273 = and i64 %272, -134217728
  %274 = bitcast i64 %273 to double
  %275 = fsub double %268, %274
  %276 = fmul double %180, %268
  %277 = fmul double %189, %274
  %278 = fmul double %275, %189
  %279 = fmul double %190, %274
  %280 = fmul double %190, %275
  %281 = fmul double %268, %186
  %282 = fmul double %180, %271
  %283 = fsub double %277, %276
  %284 = fadd double %278, %283
  %285 = fadd double %279, %284
  %286 = fadd double %280, %285
  %287 = fadd double %281, %286
  %288 = fadd double %287, %282
  %289 = fadd double %276, 1.000000e+00
  %290 = fsub double 1.000000e+00, %289
  %291 = fadd double %276, %290
  %292 = fadd double %291, %288
  %293 = bitcast double %206 to i64
  %294 = and i64 %293, -134217728
  %295 = bitcast i64 %294 to double
  %296 = fsub double %206, %295
  %297 = bitcast double %235 to i64
  %298 = and i64 %297, -134217728
  %299 = bitcast i64 %298 to double
  %300 = fsub double %235, %299
  %301 = fmul double %206, %235
  %302 = fmul double %295, %299
  %303 = fmul double %296, %299
  %304 = fmul double %300, %295
  %305 = fmul double %296, %300
  %306 = fmul double %235, %216
  %307 = fsub double %302, %301
  %308 = fadd double %303, %307
  %309 = fadd double %304, %308
  %310 = fadd double %305, %309
  %311 = fadd double %306, %310
  %312 = fadd double %289, %301
  %313 = fsub double %289, %312
  %314 = fadd double %301, %313
  %315 = fadd double %314, %292
  %316 = fadd double %311, %315
  %317 = ashr i32 %170, 1
  %318 = add nsw i32 %317, 1023
  %319 = zext i32 %318 to i64
  %320 = shl i64 %319, 52
  %321 = bitcast i64 %320 to double
  %322 = fmul double %312, %321
  %323 = add i32 %170, 1023
  %324 = sub i32 %323, %317
  %325 = zext i32 %324 to i64
  %326 = shl i64 %325, 52
  %327 = bitcast i64 %326 to double
  %328 = fmul double %322, %327
  %329 = fmul double %316, %321
  %330 = fmul double %329, %327
  %331 = fcmp olt double %95, -1.000000e+03
  %332 = bitcast double %328 to i64
  %333 = select i1 %331, i64 4294967295, i64 0
  %334 = shl nuw i64 %333, 32
  %335 = or i64 %334, %333
  %336 = xor i64 %335, -1
  %337 = and i64 %332, %336
  %338 = bitcast i64 %337 to double
  %339 = bitcast double %330 to i64
  %340 = and i64 %339, %336
  %341 = bitcast i64 %340 to double
  %342 = fsub double 1.000000e+00, %338
  %343 = fsub double 1.000000e+00, %342
  %344 = fsub double %343, %338
  %345 = fsub double %344, %341
  %346 = select i1 %5, double %342, double %120
  %347 = select i1 %5, double %345, double %147
  %348 = fadd double %346, %347
  %349 = bitcast double %348 to i64
  %350 = select i1 %7, i64 4607182418800017408, i64 %349
  %351 = and i64 %2, -9223372036854775808
  %352 = xor i64 %350, %351
  %353 = bitcast i64 %352 to double
  %354 = fcmp ord double %4, 0.000000e+00
  %355 = select i1 %354, double %353, double 0x7FF8000000000000
  ret double %355
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_erfcd1_u15purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 1.000000e+00
  %6 = fcmp uge double %4, 2.200000e+00
  %7 = fcmp uge double %4, 4.200000e+00
  %8 = fcmp uge double %4, 2.730000e+01
  %9 = and i64 %2, 9223372036720558080
  %10 = bitcast i64 %9 to double
  %11 = fsub double %4, %10
  %12 = fmul double %4, %4
  %13 = fmul double %10, %10
  %14 = fmul double %11, %10
  %15 = fmul double %11, %11
  %16 = fsub double %13, %12
  %17 = fadd double %14, %16
  %18 = fadd double %14, %17
  %19 = fadd double %15, %18
  %20 = fdiv double 1.000000e+00, %4
  %21 = bitcast double %20 to i64
  %22 = and i64 %21, -134217728
  %23 = bitcast i64 %22 to double
  %24 = fsub double %20, %23
  %25 = fsub double %23, %20
  %26 = fmul double %23, 0.000000e+00
  %27 = fmul double %24, 0.000000e+00
  %28 = fmul double %10, %23
  %29 = fmul double %24, %10
  %30 = fmul double %11, %23
  %31 = fsub double 1.000000e+00, %28
  %32 = fsub double %31, %29
  %33 = fsub double %32, %30
  %34 = fadd double %25, %24
  %35 = fadd double %26, %34
  %36 = fadd double %27, %35
  %37 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %11, i32 1
  %38 = insertelement <2 x double> undef, double %20, i32 0
  %39 = insertelement <2 x double> %38, double %24, i32 1
  %40 = fmul <2 x double> %37, %39
  %41 = insertelement <2 x double> <double 0.000000e+00, double undef>, double %33, i32 1
  %42 = fsub <2 x double> %41, %40
  %43 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x double> %43, %42
  %45 = extractelement <2 x double> %44, i32 1
  %46 = fadd double %36, %45
  %47 = extractelement <2 x double> %44, i32 0
  %48 = fadd double %47, %46
  %49 = select i1 %6, double %20, double %4
  %50 = select i1 %6, double %48, double 0.000000e+00
  %51 = select i1 %5, double %49, double %12
  %52 = select i1 %5, double %50, double %19
  %53 = select i1 %7, double 0x40D6CB9FD3B439A9, double 0xC04CCA024E41FBF2
  %54 = select i1 %6, double %53, double 0x3D58315E6C186224
  %55 = select i1 %5, double %54, double 0x3BC00EFEFABE9897
  %56 = select i1 %7, double 0xC0E6ED9388CD091B, double 0x407D2EDD0AE020CC
  %57 = select i1 %6, double %56, double 0xBDAB33CF696F6246
  %58 = select i1 %5, double %57, double 0xBC0FE6EC06B043F2
  %59 = fmul double %51, %55
  %60 = fadd double %58, %59
  %61 = select i1 %7, double 0x40DEFD81FD565E63, double 0xC09C1151CBEBE895
  %62 = select i1 %6, double %61, double 0x3DED1C000C3FE200
  %63 = select i1 %5, double %62, double 0x3C55A7F67BDE0C13
  %64 = fmul double %51, %60
  %65 = fadd double %63, %64
  %66 = select i1 %7, double 0x40A955F72FDA349C, double 0x40B103E466CE6960
  %67 = select i1 %6, double %66, double 0xBE23ACFF2B1B8BEC
  %68 = select i1 %5, double %67, double 0xBC9A15164BF4F369
  %69 = fmul double %51, %65
  %70 = fadd double %68, %69
  %71 = select i1 %7, double 0xC0D3ACCB8514AB13, double 0xC0BD20424648FD63
  %72 = select i1 %6, double %71, double 0x3E52C76D37FDB57D
  %73 = select i1 %5, double %72, double 0x3CDD6F95068FEEA4
  %74 = fmul double %51, %70
  %75 = fadd double %73, %74
  %76 = select i1 %7, double 0x40CE5A08EC3F1AF9, double 0x40C2A8FD1A1289EB
  %77 = select i1 %6, double %76, double 0xBE7ABA200DE4015C
  %78 = select i1 %5, double %77, double 0xBD1F56D9FF51274F
  %79 = fmul double %51, %75
  %80 = fadd double %78, %79
  %81 = select i1 %7, double 0xC0B806DFCAF3E8F0, double 0xC0C27F028C42F7FD
  %82 = select i1 %6, double %81, double 0x3E9D0EE6A4A80D73
  %83 = select i1 %5, double %82, double 0x3D5F683984140301
  %84 = fmul double %51, %80
  %85 = fadd double %83, %84
  %86 = select i1 %7, double 0x40936030E9797DA0, double 0x40BCDB58257A0C6D
  %87 = select i1 %6, double %86, double 0xBEB8137ED27E2624
  %88 = select i1 %5, double %87, double 0xBD9D8453B9E7FD78
  %89 = fmul double %51, %85
  %90 = fadd double %88, %89
  %91 = select i1 %7, double 0xC054869BB9D7AF08, double 0xC0B1CDB68AB7C4E4
  %92 = select i1 %6, double %91, double 0x3ECD0697CBB9A376
  %93 = select i1 %5, double %92, double 0x3DD9E6AD5DAB7037
  %94 = fmul double %51, %90
  %95 = fadd double %93, %94
  %96 = select i1 %7, double 0x4040365402C89D37, double 0x40A13FBBE32520BC
  %97 = select i1 %6, double %96, double 0xBED4ECCCA37D22C1
  %98 = select i1 %5, double %97, double 0xBE151D7181C08BA0
  %99 = fmul double %51, %95
  %100 = fadd double %98, %99
  %101 = select i1 %7, double 0xC03D3BF3C95EBAA1, double 0xC089AE616A35F399
  %102 = select i1 %6, double %101, double 0xBEB5F5266774B791
  %103 = select i1 %5, double %102, double 0x3E4FCC572062092A
  %104 = fmul double %51, %100
  %105 = fadd double %103, %104
  %106 = select i1 %7, double 0x3FD620B48EBD7FD2, double 0x406C5BB5D950D59F
  %107 = select i1 %6, double %106, double 0x3EFD9F88B02EA0EC
  %108 = select i1 %5, double %107, double 0xBE85F742EC43E5BC
  %109 = fmul double %51, %105
  %110 = fadd double %108, %109
  %111 = select i1 %7, double 0x4015F57BD26EB8D7, double 0xC0472AB3D15A1B99
  %112 = select i1 %6, double %111, double 0xBF10C2E202FB0D80
  %113 = select i1 %5, double %112, double 0x3EBB9E6C9DC6519D
  %114 = fmul double %51, %110
  %115 = fadd double %113, %114
  %116 = select i1 %7, double 0x3F598ED6853E65C9, double 0x40231D60ED75C166
  %117 = select i1 %6, double %116, double 0xBEFAE939BE608207
  %118 = select i1 %5, double %117, double 0xBEEF4D25C3E0C2E2
  %119 = fmul double %51, %115
  %120 = fadd double %118, %119
  %121 = select i1 %7, double 0xBFF8AAF93486CD89, double 0xC007AADCFF61A9EE
  %122 = select i1 %6, double %121, double 0x3F4351BFC5997AEF
  %123 = select i1 %5, double %122, double 0x3F1F9A326F9B89C2
  %124 = fmul double %51, %120
  %125 = fadd double %123, %124
  %126 = select i1 %7, double 0x3EC7AEAC5A2C6C34, double 0x3FC56155F28A44A2
  %127 = select i1 %6, double %126, double 0xBF5BC858BD2C3DEE
  %128 = select i1 %5, double %127, double 0xBF4C02DB40040B83
  %129 = fmul double %51, %125
  %130 = fadd double %128, %129
  %131 = select i1 %7, double 0x3FE3FFFFD433AA8A, double 0x3FE38258FA079AD9
  %132 = select i1 %6, double %131, double 0x3F2B61E95A64E1B4
  %133 = select i1 %5, double %132, double 0x3F7565BCD0E6A53F
  %134 = fmul double %51, %130
  %135 = fadd double %133, %134
  %136 = select i1 %7, double 0x3E1DEC4B817418DD, double 0x3F515AA8B364E28B
  %137 = select i1 %6, double %136, double 0x3F93966FE5D12A2E
  %138 = select i1 %5, double %137, double 0xBF9B82CE31288B51
  %139 = fmul double %51, %135
  %140 = fadd double %138, %139
  %141 = bitcast double %51 to i64
  %142 = and i64 %141, -134217728
  %143 = bitcast i64 %142 to double
  %144 = fsub double %51, %143
  %145 = bitcast double %140 to i64
  %146 = and i64 %145, -134217728
  %147 = bitcast i64 %146 to double
  %148 = fsub double %140, %147
  %149 = fmul double %51, %140
  %150 = fmul double %143, %147
  %151 = fmul double %144, %147
  %152 = fmul double %148, %143
  %153 = fmul double %144, %148
  %154 = fmul double %52, %140
  %155 = fsub double %150, %149
  %156 = fadd double %151, %155
  %157 = fadd double %152, %156
  %158 = fadd double %153, %157
  %159 = fadd double %154, %158
  %160 = select i1 %7, double 0xBFE0000000038D52, double 0xBFE0006CA4753FC8
  %161 = select i1 %6, double %160, double 0xBFBA4F4EAB8311A0
  %162 = select i1 %5, double %161, double 0x3FBCE2F21A042BE2
  %163 = select i1 %7, double 0xBC8719E29ACB2723, double 0x3C7E64BB064EBF0B
  %164 = select i1 %6, double %163, double 0xBC5CBFA8068241AE
  %165 = select i1 %5, double %164, double 0xBC52871BC5EF8ED7
  %166 = fadd double %162, %149
  %167 = fsub double %166, %149
  %168 = fsub double %166, %167
  %169 = fsub double %149, %168
  %170 = fsub double %162, %167
  %171 = fadd double %170, %169
  %172 = fadd double %165, %159
  %173 = fadd double %171, %172
  %174 = bitcast double %166 to i64
  %175 = and i64 %174, -134217728
  %176 = bitcast i64 %175 to double
  %177 = fsub double %166, %176
  %178 = fmul double %51, %166
  %179 = fmul double %143, %176
  %180 = fmul double %177, %143
  %181 = fmul double %144, %176
  %182 = fsub double %179, %178
  %183 = fadd double %180, %182
  %184 = fadd double %181, %183
  %185 = select i1 %7, double 0x3D50B89397C75A64, double 0x3EBADCB2F72A1080
  %186 = select i1 %6, double %185, double 0xBFE45F306B230D62
  %187 = select i1 %5, double %186, double 0xBFD812746B0379E7
  %188 = select i1 %7, double 0xB9ED96501FDC09B6, double 0x3B2CF38C548C5245
  %189 = select i1 %6, double %188, double 0x3C619932A20CE10B
  %190 = select i1 %5, double %189, double 0x3C6EE12E49CAD52E
  %191 = fadd double %187, %178
  %192 = fsub double %191, %178
  %193 = fsub double %191, %192
  %194 = fsub double %178, %193
  %195 = fsub double %187, %192
  %196 = fadd double %195, %194
  %197 = bitcast double %191 to i64
  %198 = and i64 %197, -134217728
  %199 = bitcast i64 %198 to double
  %200 = fsub double %191, %199
  %201 = fmul double %51, %191
  %202 = insertelement <2 x double> undef, double %143, i32 0
  %203 = insertelement <2 x double> %202, double %144, i32 1
  %204 = insertelement <2 x double> undef, double %199, i32 0
  %205 = insertelement <2 x double> %204, double %177, i32 1
  %206 = fmul <2 x double> %203, %205
  %207 = insertelement <2 x double> undef, double %200, i32 0
  %208 = insertelement <2 x double> %207, double %52, i32 1
  %209 = insertelement <2 x double> %202, double %166, i32 1
  %210 = fmul <2 x double> %208, %209
  %211 = insertelement <2 x double> undef, double %144, i32 0
  %212 = insertelement <2 x double> %211, double %51, i32 1
  %213 = insertelement <2 x double> %204, double %173, i32 1
  %214 = fmul <2 x double> %212, %213
  %215 = fmul double %144, %200
  %216 = fmul double %52, %191
  %217 = insertelement <2 x double> undef, double %201, i32 0
  %218 = insertelement <2 x double> %217, double %184, i32 1
  %219 = fsub <2 x double> %206, %218
  %220 = fadd <2 x double> %206, %218
  %221 = shufflevector <2 x double> %219, <2 x double> %220, <2 x i32> <i32 0, i32 3>
  %222 = fadd <2 x double> %210, %221
  %223 = fadd <2 x double> %214, %222
  %224 = insertelement <2 x double> undef, double %215, i32 0
  %225 = insertelement <2 x double> %224, double %190, i32 1
  %226 = fadd <2 x double> %225, %223
  %227 = insertelement <2 x double> undef, double %216, i32 0
  %228 = insertelement <2 x double> %227, double %196, i32 1
  %229 = fadd <2 x double> %228, %226
  %230 = extractelement <2 x double> %229, i32 1
  %231 = fmul double %51, %230
  %232 = extractelement <2 x double> %229, i32 0
  %233 = fadd double %232, %231
  %234 = select i1 %7, double 0xBFE250D048E7A1C6, double 0xBFE250D055891FD0
  %235 = select i1 %6, double %234, double 0xBFF20DD7505C75E8
  %236 = select i1 %5, double %235, double 0x3FF20DD750429B6D
  %237 = select i1 %7, double 0xBC7BA6EE6A6AB496, double 0x3C81B3313996DEA7
  %238 = select i1 %6, double %237, double 0x3C9751223FE9154D
  %239 = select i1 %5, double %238, double 0x3C71AE3A914FED6D
  %240 = fadd double %236, %201
  %241 = fsub double %240, %201
  %242 = fsub double %240, %241
  %243 = fsub double %201, %242
  %244 = fsub double %236, %241
  %245 = fadd double %244, %243
  %246 = fadd double %239, %233
  %247 = fadd double %245, %246
  %248 = fsub double -0.000000e+00, %4
  %249 = select i1 %6, double %248, double %240
  %250 = select i1 %6, double 0.000000e+00, double %247
  %251 = bitcast double %249 to i64
  %252 = and i64 %251, -134217728
  %253 = bitcast i64 %252 to double
  %254 = fsub double %249, %253
  %255 = fmul double %249, %4
  %256 = fmul double %10, %253
  %257 = fmul double %254, %10
  %258 = fmul double %11, %253
  %259 = fmul double %11, %254
  %260 = fmul double %250, %4
  %261 = fsub double %256, %255
  %262 = fadd double %257, %261
  %263 = fadd double %258, %262
  %264 = fadd double %259, %263
  %265 = fadd double %264, %260
  %266 = fadd double %240, %255
  %267 = fsub double %266, %255
  %268 = fsub double %266, %267
  %269 = fsub double %255, %268
  %270 = fsub double %240, %267
  %271 = fadd double %270, %269
  %272 = fadd double %247, %265
  %273 = fadd double %271, %272
  %274 = select i1 %6, double %266, double %255
  %275 = select i1 %6, double %273, double %265
  %276 = fsub double 1.000000e+00, %274
  %277 = fsub double 1.000000e+00, %276
  %278 = fsub double %277, %274
  %279 = fadd double %278, 0.000000e+00
  %280 = fsub double %279, %275
  %281 = fadd double %274, %275
  %282 = fmul double %281, 0x3FF71547652B82FE
  %283 = fcmp ogt double %282, 0.000000e+00
  %284 = select i1 %283, double 5.000000e-01, double -5.000000e-01
  %285 = fadd double %282, %284
  %286 = bitcast double %285 to i64
  %287 = fptosi double %285 to i32
  %288 = and i32 %287, 1
  %289 = zext i32 %288 to i64
  %290 = sub i64 %286, %289
  %291 = bitcast i64 %290 to double
  %292 = fptosi double %291 to i32
  %293 = sitofp i32 %292 to double
  %294 = icmp sgt i32 %292, 0
  %295 = select i1 %294, double 5.000000e-01, double -5.000000e-01
  %296 = fadd double %295, %293
  %297 = bitcast double %296 to i64
  %298 = fptosi double %296 to i32
  %299 = and i32 %298, 1
  %300 = zext i32 %299 to i64
  %301 = sub i64 %297, %300
  %302 = bitcast i64 %301 to double
  %303 = fptosi double %302 to i32
  %304 = fmul double %293, 0xBFE62E42FEFA3000
  %305 = fadd double %274, %304
  %306 = fsub double %305, %274
  %307 = fsub double %305, %306
  %308 = fsub double %274, %307
  %309 = fsub double %304, %306
  %310 = fadd double %309, %308
  %311 = fadd double %275, %310
  %312 = fmul double %293, 0xBD53DE6AF278ECE6
  %313 = fadd double %312, %305
  %314 = fsub double %313, %305
  %315 = fsub double %313, %314
  %316 = fsub double %305, %315
  %317 = fsub double %312, %314
  %318 = fadd double %317, %316
  %319 = fadd double %318, %311
  %320 = bitcast double %313 to i64
  %321 = and i64 %320, -134217728
  %322 = bitcast i64 %321 to double
  %323 = fsub double %313, %322
  %324 = fmul double %313, %313
  %325 = fmul double %322, %322
  %326 = fadd double %322, %322
  %327 = fmul double %326, %323
  %328 = fmul double %323, %323
  %329 = fadd double %319, %319
  %330 = fmul double %313, %329
  %331 = fsub double %325, %324
  %332 = fadd double %331, %327
  %333 = fadd double %328, %332
  %334 = fadd double %330, %333
  %335 = bitcast double %324 to i64
  %336 = and i64 %335, -134217728
  %337 = bitcast i64 %336 to double
  %338 = fsub double %324, %337
  %339 = fmul double %324, %324
  %340 = fmul double %337, %337
  %341 = fadd double %337, %337
  %342 = fmul double %341, %338
  %343 = fmul double %338, %338
  %344 = fadd double %334, %334
  %345 = fmul double %324, %344
  %346 = fsub double %340, %339
  %347 = fadd double %346, %342
  %348 = fadd double %343, %347
  %349 = fadd double %348, %345
  %350 = fmul double %339, %339
  %351 = fmul double %313, 0x3DE60632A887194C
  %352 = fadd double %351, 0x3E21F8EAF54829DC
  %353 = fmul double %313, 0x3E5AE652E8103AB6
  %354 = fadd double %353, 0x3E927E4C95A9765C
  %355 = fmul double %313, 0x3EC71DE3A11D7656
  %356 = fadd double %355, 0x3EFA01A01AF6F0B7
  %357 = fmul double %324, %354
  %358 = fadd double %356, %357
  %359 = fmul double %313, 0x3F2A01A01A02D002
  %360 = fadd double %359, 0x3F56C16C16C145CC
  %361 = fmul double %313, 0x3F81111111111119
  %362 = fadd double %361, 0x3FA555555555555A
  %363 = fmul double %324, %360
  %364 = fadd double %362, %363
  %365 = fmul double %339, %358
  %366 = fmul double %313, 0x3FC5555555555555
  %367 = fmul double %322, 0x3FC5555550000000
  %368 = fmul double %323, 0x3FC5555550000000
  %369 = fmul double %322, 0x3E25555554000000
  %370 = fmul double %323, 0x3E25555554000000
  %371 = fmul double %319, 0x3FC5555555555555
  %372 = fsub double %367, %366
  %373 = fadd double %368, %372
  %374 = fadd double %369, %373
  %375 = fadd double %370, %374
  %376 = fadd double %371, %375
  %377 = fadd double %366, 5.000000e-01
  %378 = fsub double 5.000000e-01, %377
  %379 = fadd double %366, %378
  %380 = fadd double %379, %376
  %381 = bitcast double %377 to i64
  %382 = and i64 %381, -134217728
  %383 = bitcast i64 %382 to double
  %384 = fsub double %377, %383
  %385 = insertelement <2 x double> undef, double %352, i32 0
  %386 = insertelement <2 x double> %385, double %313, i32 1
  %387 = insertelement <2 x double> undef, double %350, i32 0
  %388 = insertelement <2 x double> %387, double %377, i32 1
  %389 = fmul <2 x double> %386, %388
  %390 = fmul double %322, %383
  %391 = fmul double %384, %322
  %392 = fmul double %323, %383
  %393 = fmul double %323, %384
  %394 = fmul double %377, %319
  %395 = fmul double %313, %380
  %396 = extractelement <2 x double> %389, i32 1
  %397 = fsub double %390, %396
  %398 = fadd double %391, %397
  %399 = fadd double %392, %398
  %400 = fadd double %393, %399
  %401 = fadd double %394, %400
  %402 = fadd double %395, %401
  %403 = fadd double %396, 1.000000e+00
  %404 = insertelement <2 x double> <double undef, double 1.000000e+00>, double %364, i32 0
  %405 = insertelement <2 x double> undef, double %365, i32 0
  %406 = insertelement <2 x double> %405, double %403, i32 1
  %407 = fadd <2 x double> %404, %406
  %408 = fsub <2 x double> %404, %406
  %409 = shufflevector <2 x double> %407, <2 x double> %408, <2 x i32> <i32 0, i32 3>
  %410 = fadd <2 x double> %389, %409
  %411 = bitcast double %403 to i64
  %412 = and i64 %411, -134217728
  %413 = bitcast i64 %412 to double
  %414 = fsub double %403, %413
  %415 = fmul double %313, %403
  %416 = fmul double %322, %413
  %417 = fmul double %414, %322
  %418 = fsub double %416, %415
  %419 = fadd double %417, %418
  %420 = fadd double %415, 1.000000e+00
  %421 = fsub double 1.000000e+00, %420
  %422 = fadd double %415, %421
  %423 = bitcast double %339 to i64
  %424 = and i64 %423, -134217728
  %425 = bitcast i64 %424 to double
  %426 = fsub double %339, %425
  %427 = extractelement <2 x double> %410, i32 0
  %428 = bitcast double %427 to i64
  %429 = and i64 %428, -134217728
  %430 = bitcast i64 %429 to double
  %431 = insertelement <2 x double> undef, double %430, i32 0
  %432 = insertelement <2 x double> %431, double %402, i32 1
  %433 = fsub <2 x double> %410, %432
  %434 = fadd <2 x double> %410, %432
  %435 = shufflevector <2 x double> %433, <2 x double> %434, <2 x i32> <i32 0, i32 3>
  %436 = fmul double %339, %427
  %437 = insertelement <2 x double> undef, double %425, i32 0
  %438 = insertelement <2 x double> %437, double %323, i32 1
  %439 = insertelement <2 x double> %431, double %413, i32 1
  %440 = fmul <2 x double> %438, %439
  %441 = insertelement <2 x double> undef, double %426, i32 0
  %442 = insertelement <2 x double> %441, double %323, i32 1
  %443 = insertelement <2 x double> %431, double %414, i32 1
  %444 = fmul <2 x double> %442, %443
  %445 = extractelement <2 x double> %433, i32 0
  %446 = insertelement <2 x double> undef, double %445, i32 0
  %447 = insertelement <2 x double> %446, double %403, i32 1
  %448 = insertelement <2 x double> %437, double %319, i32 1
  %449 = fmul <2 x double> %447, %448
  %450 = insertelement <2 x double> %441, double %313, i32 1
  %451 = fmul <2 x double> %450, %435
  %452 = fmul double %427, %349
  %453 = insertelement <2 x double> undef, double %436, i32 0
  %454 = insertelement <2 x double> %453, double %419, i32 1
  %455 = fsub <2 x double> %440, %454
  %456 = fadd <2 x double> %440, %454
  %457 = shufflevector <2 x double> %455, <2 x double> %456, <2 x i32> <i32 0, i32 3>
  %458 = fadd <2 x double> %444, %457
  %459 = fadd <2 x double> %449, %458
  %460 = fadd <2 x double> %451, %459
  %461 = insertelement <2 x double> undef, double %452, i32 0
  %462 = insertelement <2 x double> %461, double %422, i32 1
  %463 = fadd <2 x double> %462, %460
  %464 = fadd double %420, %436
  %465 = fsub double %420, %464
  %466 = fadd double %436, %465
  %467 = extractelement <2 x double> %463, i32 1
  %468 = fadd double %466, %467
  %469 = extractelement <2 x double> %463, i32 0
  %470 = fadd double %469, %468
  %471 = ashr i32 %303, 1
  %472 = add nsw i32 %471, 1023
  %473 = zext i32 %472 to i64
  %474 = shl i64 %473, 52
  %475 = bitcast i64 %474 to double
  %476 = fmul double %464, %475
  %477 = add i32 %303, 1023
  %478 = sub i32 %477, %471
  %479 = zext i32 %478 to i64
  %480 = shl i64 %479, 52
  %481 = bitcast i64 %480 to double
  %482 = fmul double %476, %481
  %483 = fmul double %470, %475
  %484 = fmul double %483, %481
  %485 = fcmp olt double %274, -1.000000e+03
  %486 = bitcast double %482 to i64
  %487 = select i1 %485, i64 4294967295, i64 0
  %488 = shl nuw i64 %487, 32
  %489 = or i64 %488, %487
  %490 = xor i64 %489, -1
  %491 = and i64 %486, %490
  %492 = bitcast i64 %491 to double
  %493 = bitcast double %484 to i64
  %494 = and i64 %493, %490
  %495 = bitcast i64 %494 to double
  %496 = select i1 %5, double %492, double %276
  %497 = select i1 %5, double %495, double %280
  %498 = bitcast double %496 to i64
  %499 = and i64 %498, -134217728
  %500 = bitcast i64 %499 to double
  %501 = fsub double %496, %500
  %502 = fmul double %51, %496
  %503 = fmul double %143, %500
  %504 = fmul double %501, %143
  %505 = fmul double %144, %500
  %506 = fmul double %144, %501
  %507 = fmul double %52, %496
  %508 = fmul double %51, %497
  %509 = fsub double %503, %502
  %510 = fadd double %504, %509
  %511 = fadd double %505, %510
  %512 = fadd double %506, %511
  %513 = fadd double %507, %512
  %514 = fadd double %508, %513
  %515 = select i1 %6, double %502, double %496
  %516 = select i1 %6, double %514, double %497
  %517 = fadd double %515, %516
  %518 = select i1 %8, double 0.000000e+00, double %517
  %519 = ashr i64 %2, 63
  %520 = trunc i64 %519 to i32
  %521 = fsub double 2.000000e+00, %518
  %522 = icmp eq i32 %520, 0
  %523 = select i1 %522, double %518, double %521
  %524 = fcmp ord double %0, 0.000000e+00
  %525 = select i1 %524, double %523, double 0x7FF8000000000000
  ret double %525
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_cinz_sincospid1_u05purec(double) local_unnamed_addr #0 {
  %2 = tail call { double, double } @Sleef_sincospid1_u05purec(double %0)
  ret { double, double } %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_cinz_sincospid1_u35purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 4.000000e+00
  %3 = fptosi double %2 to i32
  %4 = lshr i32 %3, 31
  %5 = xor i32 %4, 1
  %6 = add nsw i32 %5, %3
  %7 = and i32 %6, -2
  %8 = sitofp i32 %7 to double
  %9 = fsub double %2, %8
  %10 = fmul double %9, %9
  %11 = fmul double %10, 0x3D9E42E923057D6C
  %12 = fadd double %11, 0xBE1E3011CA3F21B5
  %13 = fmul double %10, %12
  %14 = fadd double %13, 0x3E9507830918116C
  %15 = fmul double %10, %14
  %16 = fadd double %15, 0xBF032D2CCE398CAE
  %17 = fmul double %10, %16
  %18 = fadd double %17, 0x3F6466BC677591C5
  %19 = fmul double %10, %18
  %20 = fadd double %19, 0xBFB4ABBCE625BE43
  %21 = fmul double %10, %20
  %22 = fadd double %21, 0x3FE921FB54442D18
  %23 = fmul double %9, %22
  %24 = fmul double %10, 0x3D5B29CFED2A85B3
  %25 = fsub double 0x3DDF9CD01C42C7CD, %24
  %26 = fmul double %10, %25
  %27 = fadd double %26, 0xBE5A6D1ED7B66707
  %28 = fmul double %10, %27
  %29 = fadd double %28, 0x3ECE1F50684AD332
  %30 = fmul double %10, %29
  %31 = fadd double %30, 0xBF355D3C7E3C9FCF
  %32 = fmul double %10, %31
  %33 = fadd double %32, 0x3F903C1F081B5AAA
  %34 = fmul double %10, %33
  %35 = fadd double %34, 0xBFD3BD3CC9BE45DE
  %36 = fmul double %10, %35
  %37 = fadd double %36, 1.000000e+00
  %38 = and i32 %6, 2
  %39 = icmp ne i32 %38, 0
  %40 = select i1 %39, double %37, double %23
  %41 = select i1 %39, double %23, double %37
  %42 = shl i32 %6, 29
  %43 = zext i32 %42 to i64
  %44 = shl nuw i64 %43, 32
  %45 = and i64 %44, -9223372036854775808
  %46 = bitcast double %40 to i64
  %47 = xor i64 %45, %46
  %48 = shl i32 %7, 29
  %49 = add i32 %48, 1073741824
  %50 = zext i32 %49 to i64
  %51 = shl nuw i64 %50, 32
  %52 = and i64 %51, -9223372036854775808
  %53 = bitcast double %41 to i64
  %54 = xor i64 %52, %53
  %55 = bitcast double %0 to i64
  %56 = and i64 %55, 9223372036854775807
  %57 = bitcast i64 %56 to double
  %58 = fcmp ogt double %57, 2.500000e+08
  %59 = select i1 %58, i64 4294967295, i64 0
  %60 = shl nuw i64 %59, 32
  %61 = or i64 %60, %59
  %62 = xor i64 %61, -1
  %63 = and i64 %47, %62
  %64 = and i64 %54, %62
  %65 = fcmp oeq double %0, 0x7FF0000000000000
  %66 = fcmp oeq double %0, 0xFFF0000000000000
  %67 = or i1 %65, %66
  %68 = select i1 %67, i64 4294967295, i64 0
  %69 = shl nuw i64 %68, 32
  %70 = or i64 %69, %68
  %71 = or i64 %63, %70
  %72 = bitcast i64 %71 to double
  %73 = or i64 %64, %70
  %74 = bitcast i64 %73 to double
  %75 = insertvalue { double, double } undef, double %72, 0
  %76 = insertvalue { double, double } %75, double %74, 1
  ret { double, double } %76
}

; Function Attrs: norecurse nounwind readnone uwtable
define { double, double } @Sleef_cinz_modfd1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = bitcast double %0 to i64
  %11 = and i64 %10, 9223372036854775807
  %12 = bitcast i64 %11 to double
  %13 = fcmp ule double %12, 0x4330000000000000
  %14 = select i1 %13, double %9, double 0.000000e+00
  %15 = bitcast double %14 to i64
  %16 = and i64 %15, 9223372036854775807
  %17 = and i64 %10, -9223372036854775808
  %18 = or i64 %16, %17
  %19 = bitcast i64 %18 to double
  %20 = fsub double %0, %14
  %21 = bitcast double %20 to i64
  %22 = and i64 %21, 9223372036854775807
  %23 = or i64 %22, %17
  %24 = bitcast i64 %23 to double
  %25 = insertvalue { double, double } undef, double %19, 0
  %26 = insertvalue { double, double } %25, double %24, 1
  ret { double, double } %26
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_logd1_u35purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, %24
  %26 = fmul double %25, %25
  %27 = fmul double %23, %24
  %28 = fmul double %24, 0x3FC385C5CBC3F50D
  %29 = fadd double %28, 0x3FC7474BA672B05F
  %30 = insertelement <2 x double> undef, double %25, i32 0
  %31 = insertelement <2 x double> %30, double %24, i32 1
  %32 = fmul <2 x double> %31, <double 0x3FC3A5791D95DB39, double 0x3FCC71BFEED5D419>
  %33 = insertelement <2 x double> <double undef, double 0x3FD249249BFBE987>, double %29, i32 0
  %34 = fadd <2 x double> %32, %33
  %35 = fmul double %24, 0x3FD99999998C136E
  %36 = fadd double %35, 0x3FE555555555593F
  %37 = insertelement <2 x double> undef, double %26, i32 0
  %38 = insertelement <2 x double> %37, double %25, i32 1
  %39 = fmul <2 x double> %38, %34
  %40 = extractelement <2 x double> %39, i32 1
  %41 = fadd double %36, %40
  %42 = extractelement <2 x double> %39, i32 0
  %43 = fadd double %42, %41
  %44 = sitofp i32 %20 to double
  %45 = fmul double %44, 0x3FE62E42FEFA39EF
  %46 = fmul double %23, 2.000000e+00
  %47 = fadd double %45, %46
  %48 = fmul double %27, %43
  %49 = fadd double %47, %48
  %50 = fcmp une double %4, 0x7FF0000000000000
  %51 = select i1 %50, double %49, double 0x7FF0000000000000
  %52 = fcmp oge double %4, 0.000000e+00
  %53 = select i1 %52, double %51, double 0x7FF8000000000000
  %54 = fcmp une double %4, 0.000000e+00
  %55 = select i1 %54, double %53, double 0xFFF0000000000000
  ret double %55
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_logd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_logd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_powd1_u10purec(double, double) local_unnamed_addr #0 {
  %3 = tail call double @Sleef_powd1_u10purec(double %0, double %1)
  ret double %3
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_sinhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_sinhd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_coshd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_coshd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_tanhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_tanhd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_sinhd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp ogt double %5, 0.000000e+00
  %7 = select i1 %6, double 5.000000e-01, double -5.000000e-01
  %8 = fadd double %5, %7
  %9 = bitcast double %8 to i64
  %10 = fptosi double %8 to i32
  %11 = and i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = sub i64 %9, %12
  %14 = bitcast i64 %13 to double
  %15 = fptosi double %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = icmp sgt i32 %15, 0
  %18 = select i1 %17, double 5.000000e-01, double -5.000000e-01
  %19 = fadd double %18, %16
  %20 = bitcast double %19 to i64
  %21 = fptosi double %19 to i32
  %22 = and i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = sub i64 %20, %23
  %25 = bitcast i64 %24 to double
  %26 = fptosi double %25 to i32
  %27 = fmul double %16, 0x3FE62E42FEFA3000
  %28 = fsub double %4, %27
  %29 = fmul double %16, 0x3D53DE6AF278ECE6
  %30 = fsub double %28, %29
  %31 = fmul double %30, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %30, 0x3E927E52E0FCD573
  %35 = fadd double %34, 0x3EC71DDF1629E6CE
  %36 = fmul double %30, 0x3EFA01A01780879E
  %37 = fadd double %36, 0x3F2A01A01B3603F5
  %38 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %31, i32 1
  %39 = insertelement <2 x double> undef, double %30, i32 0
  %40 = insertelement <2 x double> %39, double %35, i32 1
  %41 = fmul <2 x double> %38, %40
  %42 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %37, i32 1
  %43 = fadd <2 x double> %42, %41
  %44 = fmul double %30, 0x3F56C16C16C20BA0
  %45 = fadd double %44, 0x3F8111111110EB39
  %46 = fmul double %30, 0x3FA555555555553E
  %47 = fadd double %46, 0x3FC555555555555C
  %48 = fmul double %31, %45
  %49 = fadd double %47, %48
  %50 = insertelement <2 x double> undef, double %33, i32 0
  %51 = insertelement <2 x double> %50, double %32, i32 1
  %52 = fmul <2 x double> %43, %51
  %53 = extractelement <2 x double> %52, i32 1
  %54 = fadd double %49, %53
  %55 = extractelement <2 x double> %52, i32 0
  %56 = fadd double %55, %54
  %57 = fmul double %30, %31
  %58 = fmul double %57, %56
  %59 = fmul double %31, 5.000000e-01
  %60 = fadd double %59, %58
  %61 = fadd double %30, %60
  %62 = icmp eq i32 %26, 0
  %63 = fadd double %61, 1.000000e+00
  %64 = ashr i32 %26, 1
  %65 = add nsw i32 %64, 1023
  %66 = zext i32 %65 to i64
  %67 = shl i64 %66, 52
  %68 = bitcast i64 %67 to double
  %69 = fmul double %63, %68
  %70 = add i32 %26, 1023
  %71 = sub i32 %70, %64
  %72 = zext i32 %71 to i64
  %73 = shl i64 %72, 52
  %74 = bitcast i64 %73 to double
  %75 = fmul double %69, %74
  %76 = fadd double %75, -1.000000e+00
  %77 = select i1 %62, double %61, double %76
  %78 = fadd double %77, 2.000000e+00
  %79 = fadd double %77, 1.000000e+00
  %80 = fdiv double %78, %79
  %81 = fmul double %77, 5.000000e-01
  %82 = fmul double %81, %80
  %83 = fcmp ule double %4, 7.090000e+02
  %84 = fcmp ord double %82, 0.000000e+00
  %85 = and i1 %83, %84
  %86 = bitcast double %82 to i64
  %87 = select i1 %85, i64 %86, i64 9218868437227405312
  %88 = and i64 %2, -9223372036854775808
  %89 = xor i64 %87, %88
  %90 = fcmp uno double %0, 0.000000e+00
  %91 = select i1 %90, i64 4294967295, i64 0
  %92 = shl nuw i64 %91, 32
  %93 = or i64 %92, %91
  %94 = or i64 %93, %89
  %95 = bitcast i64 %94 to double
  ret double %95
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_coshd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 0x3FF71547652B82FE
  %6 = fcmp ogt double %5, 0.000000e+00
  %7 = select i1 %6, double 5.000000e-01, double -5.000000e-01
  %8 = fadd double %5, %7
  %9 = bitcast double %8 to i64
  %10 = fptosi double %8 to i32
  %11 = and i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = sub i64 %9, %12
  %14 = bitcast i64 %13 to double
  %15 = fptosi double %14 to i32
  %16 = sitofp i32 %15 to double
  %17 = icmp sgt i32 %15, 0
  %18 = select i1 %17, double 5.000000e-01, double -5.000000e-01
  %19 = fadd double %18, %16
  %20 = bitcast double %19 to i64
  %21 = fptosi double %19 to i32
  %22 = and i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = sub i64 %20, %23
  %25 = bitcast i64 %24 to double
  %26 = fptosi double %25 to i32
  %27 = fmul double %16, 0x3FE62E42FEFA3000
  %28 = fsub double %4, %27
  %29 = fmul double %16, 0x3D53DE6AF278ECE6
  %30 = fsub double %28, %29
  %31 = fmul double %30, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %30, 0x3E21F0E4C4ECD775
  %35 = fadd double %34, 0x3E5AF68A28CC800A
  %36 = fmul double %30, 0x3E927E52E0FCD573
  %37 = fadd double %36, 0x3EC71DDF1629E6CE
  %38 = fmul double %30, 0x3EFA01A01780879E
  %39 = fadd double %38, 0x3F2A01A01B3603F5
  %40 = fmul double %31, %37
  %41 = fadd double %39, %40
  %42 = fmul double %30, 0x3F56C16C16C20BA0
  %43 = fadd double %42, 0x3F8111111110EB39
  %44 = fmul double %30, 0x3FA555555555553E
  %45 = fadd double %44, 0x3FC555555555555C
  %46 = fmul double %31, %43
  %47 = fadd double %45, %46
  %48 = fmul double %32, %41
  %49 = fadd double %47, %48
  %50 = fmul double %35, %33
  %51 = fadd double %50, %49
  %52 = fmul double %30, %51
  %53 = fadd double %52, 5.000000e-01
  %54 = fmul double %31, %53
  %55 = fadd double %30, %54
  %56 = fadd double %55, 1.000000e+00
  %57 = ashr i32 %26, 1
  %58 = add nsw i32 %57, 1023
  %59 = zext i32 %58 to i64
  %60 = shl i64 %59, 52
  %61 = bitcast i64 %60 to double
  %62 = fmul double %56, %61
  %63 = add i32 %26, 1023
  %64 = sub i32 %63, %57
  %65 = zext i32 %64 to i64
  %66 = shl i64 %65, 52
  %67 = bitcast i64 %66 to double
  %68 = fmul double %62, %67
  %69 = fcmp ule double %4, 0x40862E42FE102C83
  %70 = fcmp olt double %4, -1.000000e+03
  %71 = bitcast double %68 to i64
  %72 = select i1 %69, i64 %71, i64 9218868437227405312
  %73 = select i1 %70, i64 4294967295, i64 0
  %74 = shl nuw i64 %73, 32
  %75 = or i64 %74, %73
  %76 = xor i64 %75, -1
  %77 = and i64 %72, %76
  %78 = bitcast i64 %77 to double
  %79 = fdiv double 5.000000e-01, %78
  %80 = fmul double %78, 5.000000e-01
  %81 = fadd double %80, %79
  %82 = fcmp ule double %4, 7.090000e+02
  %83 = fcmp ord double %81, 0.000000e+00
  %84 = and i1 %82, %83
  %85 = fcmp uno double %0, 0.000000e+00
  %86 = bitcast double %81 to i64
  %87 = select i1 %84, i64 %86, i64 9218868437227405312
  %88 = select i1 %85, i64 4294967295, i64 0
  %89 = shl nuw i64 %88, 32
  %90 = or i64 %89, %88
  %91 = or i64 %90, %87
  %92 = bitcast i64 %91 to double
  ret double %92
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_tanhd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fmul double %4, 2.000000e+00
  %6 = fmul double %5, 0x3FF71547652B82FE
  %7 = fcmp ogt double %6, 0.000000e+00
  %8 = select i1 %7, double 5.000000e-01, double -5.000000e-01
  %9 = fadd double %6, %8
  %10 = bitcast double %9 to i64
  %11 = fptosi double %9 to i32
  %12 = and i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = sub i64 %10, %13
  %15 = bitcast i64 %14 to double
  %16 = fptosi double %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = icmp sgt i32 %16, 0
  %19 = select i1 %18, double 5.000000e-01, double -5.000000e-01
  %20 = fadd double %19, %17
  %21 = bitcast double %20 to i64
  %22 = fptosi double %20 to i32
  %23 = and i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = sub i64 %21, %24
  %26 = bitcast i64 %25 to double
  %27 = fptosi double %26 to i32
  %28 = fmul double %17, 0x3FE62E42FEFA3000
  %29 = fsub double %5, %28
  %30 = fmul double %17, 0x3D53DE6AF278ECE6
  %31 = fsub double %29, %30
  %32 = fmul double %31, %31
  %33 = fmul double %32, %32
  %34 = fmul double %33, %33
  %35 = fmul double %31, 0x3E927E52E0FCD573
  %36 = fadd double %35, 0x3EC71DDF1629E6CE
  %37 = fmul double %31, 0x3EFA01A01780879E
  %38 = fadd double %37, 0x3F2A01A01B3603F5
  %39 = insertelement <2 x double> <double 0x3E21F0E4C4ECD775, double undef>, double %32, i32 1
  %40 = insertelement <2 x double> undef, double %31, i32 0
  %41 = insertelement <2 x double> %40, double %36, i32 1
  %42 = fmul <2 x double> %39, %41
  %43 = insertelement <2 x double> <double 0x3E5AF68A28CC800A, double undef>, double %38, i32 1
  %44 = fadd <2 x double> %43, %42
  %45 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %46 = fmul <2 x double> %45, <double 0x3FA555555555553E, double 0x3F56C16C16C20BA0>
  %47 = fadd <2 x double> %46, <double 0x3FC555555555555C, double 0x3F8111111110EB39>
  %48 = extractelement <2 x double> %47, i32 1
  %49 = fmul double %32, %48
  %50 = extractelement <2 x double> %47, i32 0
  %51 = fadd double %50, %49
  %52 = insertelement <2 x double> undef, double %34, i32 0
  %53 = insertelement <2 x double> %52, double %33, i32 1
  %54 = fmul <2 x double> %44, %53
  %55 = extractelement <2 x double> %54, i32 1
  %56 = fadd double %51, %55
  %57 = extractelement <2 x double> %54, i32 0
  %58 = fadd double %57, %56
  %59 = fmul double %31, %32
  %60 = fmul double %59, %58
  %61 = fmul double %32, 5.000000e-01
  %62 = fadd double %61, %60
  %63 = fadd double %31, %62
  %64 = icmp eq i32 %27, 0
  %65 = fadd double %63, 1.000000e+00
  %66 = ashr i32 %27, 1
  %67 = add nsw i32 %66, 1023
  %68 = zext i32 %67 to i64
  %69 = shl i64 %68, 52
  %70 = bitcast i64 %69 to double
  %71 = fmul double %65, %70
  %72 = add i32 %27, 1023
  %73 = sub i32 %72, %66
  %74 = zext i32 %73 to i64
  %75 = shl i64 %74, 52
  %76 = bitcast i64 %75 to double
  %77 = fmul double %71, %76
  %78 = fadd double %77, -1.000000e+00
  %79 = select i1 %64, double %63, double %78
  %80 = fadd double %79, 2.000000e+00
  %81 = fdiv double %79, %80
  %82 = fcmp ule double %4, 0x4032B70887229E90
  %83 = fcmp ord double %81, 0.000000e+00
  %84 = and i1 %82, %83
  %85 = bitcast double %81 to i64
  %86 = select i1 %84, i64 %85, i64 4607182418800017408
  %87 = and i64 %2, -9223372036854775808
  %88 = xor i64 %86, %87
  %89 = fcmp uno double %0, 0.000000e+00
  %90 = select i1 %89, i64 4294967295, i64 0
  %91 = shl nuw i64 %90, 32
  %92 = or i64 %91, %90
  %93 = or i64 %92, %88
  %94 = bitcast i64 %93 to double
  ret double %94
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_asinhd1_u10purec(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_asinhd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_acoshd1_u10purec(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_acoshd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_atanhd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_atanhd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_cbrtd1_u35purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x2D30000000000000
  %6 = fmul double %4, 0x52B0000000000000
  %7 = select i1 %5, double %4, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = select i1 %5, i32 1023, i32 1323
  %12 = sub nsw i32 %10, %11
  %13 = xor i32 %12, -2
  %14 = ashr i32 %13, 1
  %15 = add nsw i32 %14, 1023
  %16 = zext i32 %15 to i64
  %17 = shl i64 %16, 52
  %18 = bitcast i64 %17 to double
  %19 = fmul double %18, %0
  %20 = sub nsw i32 1022, %12
  %21 = sub nsw i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = shl i64 %22, 52
  %24 = bitcast i64 %23 to double
  %25 = fmul double %19, %24
  %26 = add nsw i32 %12, 6145
  %27 = sitofp i32 %26 to double
  %28 = fmul double %27, 0x3FD5555555555555
  %29 = fptosi double %28 to i32
  %30 = sitofp i32 %29 to double
  %31 = fmul double %30, 3.000000e+00
  %32 = fsub double %27, %31
  %33 = fptosi double %32 to i32
  %34 = icmp eq i32 %33, 1
  %35 = select i1 %34, double 0x3FF428A2F98D728B, double 1.000000e+00
  %36 = icmp eq i32 %33, 2
  %37 = select i1 %36, double 0x3FF965FEA53D6E3D, double %35
  %38 = add nsw i32 %29, -2048
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %39, 1023
  %41 = zext i32 %40 to i64
  %42 = shl i64 %41, 52
  %43 = bitcast i64 %42 to double
  %44 = fmul double %37, %43
  %45 = add i32 %29, 3071
  %46 = sub i32 %45, %39
  %47 = zext i32 %46 to i64
  %48 = shl i64 %47, 52
  %49 = bitcast i64 %48 to double
  %50 = fmul double %44, %49
  %51 = bitcast double %50 to i64
  %52 = bitcast double %25 to i64
  %53 = and i64 %52, -9223372036854775808
  %54 = xor i64 %53, %51
  %55 = bitcast i64 %54 to double
  %56 = and i64 %52, 9223372036854775807
  %57 = bitcast i64 %56 to double
  %58 = fmul double %57, 0x3FE47CE4F76BED42
  %59 = fsub double 0x4007B141AAA12A9C, %58
  %60 = fmul double %59, %57
  %61 = fadd double %60, 0xC016EF22A5E505B3
  %62 = fmul double %61, %57
  %63 = fadd double %62, 0x401828DC834C5911
  %64 = fmul double %63, %57
  %65 = fadd double %64, 0xC00EDE0AF7836A8B
  %66 = fmul double %65, %57
  %67 = fadd double %66, 0x4001D887ACE5AC54
  %68 = fmul double %67, %67
  %69 = fmul double %68, %68
  %70 = fmul double %69, %57
  %71 = fsub double %70, %67
  %72 = fmul double %71, 0x3FD5555555555555
  %73 = fsub double %67, %72
  %74 = fmul double %73, %57
  %75 = fmul double %73, %74
  %76 = fmul double %75, 0x3FE5555555555555
  %77 = fmul double %73, %75
  %78 = fadd double %77, -1.000000e+00
  %79 = fmul double %76, %78
  %80 = fsub double %75, %79
  %81 = fmul double %80, %55
  ret double %81
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_cbrtd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_cbrtd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_expm1d1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_expm1d1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_log10d1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_log10d1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_log2d1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_log2d1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_log2d1_u35purec(double) local_unnamed_addr #0 {
  %2 = fcmp uge double %0, 0x10000000000000
  %3 = fmul double %0, 0x43F0000000000000
  %4 = select i1 %2, double %0, double %3
  %5 = fmul double %4, 0x3FF5555555555555
  %6 = bitcast double %5 to i64
  %7 = lshr i64 %6, 52
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 2047
  %10 = sub nsw i32 1023, %9
  %11 = bitcast double %4 to i64
  %12 = zext i32 %10 to i64
  %13 = shl i64 %12, 52
  %14 = and i64 %11, -4294967296
  %15 = add i64 %13, %14
  %16 = and i64 %11, 4294967295
  %17 = or i64 %15, %16
  %18 = bitcast i64 %17 to double
  %19 = select i1 %2, i32 -1023, i32 -1087
  %20 = add nsw i32 %9, %19
  %21 = fadd double %18, -1.000000e+00
  %22 = fadd double %18, 1.000000e+00
  %23 = fdiv double %21, %22
  %24 = fmul double %23, %23
  %25 = fmul double %24, 0x3FCC501739F17BA9
  %26 = fadd double %25, 0x3FCC2B7A962850E9
  %27 = fmul double %24, %26
  %28 = fadd double %27, 0x3FD0CAAEEB877481
  %29 = fmul double %24, %28
  %30 = fadd double %29, 0x3FD484AC6A7CB2DD
  %31 = fmul double %24, %30
  %32 = fadd double %31, 0x3FDA617636C2C254
  %33 = fmul double %24, %32
  %34 = fadd double %33, 0x3FE2776C50E7EDE9
  %35 = fmul double %24, %34
  %36 = fadd double %35, 0x3FEEC709DC3A07B2
  %37 = sitofp i32 %20 to double
  %38 = bitcast double %23 to i64
  %39 = and i64 %38, -134217728
  %40 = bitcast i64 %39 to double
  %41 = fsub double %23, %40
  %42 = fmul double %23, 0x40071547652B82FE
  %43 = fmul double %40, 0x4007154760000000
  %44 = fmul double %41, 0x4007154760000000
  %45 = fmul double %40, 0x3E64AE0BF8000000
  %46 = fmul double %41, 0x3E64AE0BF8000000
  %47 = fsub double %43, %42
  %48 = fadd double %44, %47
  %49 = fadd double %45, %48
  %50 = fadd double %46, %49
  %51 = fadd double %42, %37
  %52 = fsub double %37, %51
  %53 = fadd double %42, %52
  %54 = fadd double %53, %50
  %55 = fmul double %23, %24
  %56 = fadd double %51, %54
  %57 = fmul double %55, %36
  %58 = fadd double %56, %57
  %59 = fcmp une double %4, 0x7FF0000000000000
  %60 = select i1 %59, double %58, double 0x7FF0000000000000
  %61 = fcmp oge double %4, 0.000000e+00
  %62 = select i1 %61, double %60, double 0x7FF8000000000000
  %63 = fcmp une double %4, 0.000000e+00
  %64 = select i1 %63, double %62, double 0xFFF0000000000000
  ret double %64
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_log1pd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_log1pd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fabsd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  ret double %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_copysignd1_purec(double, double) local_unnamed_addr #0 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast double %1 to i64
  %6 = and i64 %5, -9223372036854775808
  %7 = or i64 %6, %4
  %8 = bitcast i64 %7 to double
  ret double %8
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fmaxd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp ogt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fmind1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp ord double %1, 0.000000e+00
  %4 = fcmp olt double %0, %1
  %5 = select i1 %4, double %0, double %1
  %6 = select i1 %3, double %5, double %0
  ret double %6
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fdimd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fsub double %0, %1
  %4 = fcmp uge double %3, 0.000000e+00
  %5 = fcmp une double %0, %1
  %6 = and i1 %5, %4
  %7 = select i1 %6, double %3, double 0.000000e+00
  ret double %7
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_truncd1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp oeq double %0, 0x7FF0000000000000
  %11 = fcmp oeq double %0, 0xFFF0000000000000
  %12 = or i1 %10, %11
  %13 = bitcast double %0 to i64
  %14 = and i64 %13, 9223372036854775807
  %15 = bitcast i64 %14 to double
  %16 = fcmp oge double %15, 0x4330000000000000
  %17 = or i1 %12, %16
  %18 = fsub double %0, %9
  %19 = bitcast double %18 to i64
  %20 = and i64 %19, 9223372036854775807
  %21 = and i64 %13, -9223372036854775808
  %22 = or i64 %20, %21
  %23 = bitcast i64 %22 to double
  %24 = select i1 %17, double %0, double %23
  ret double %24
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_floord1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp uge double %9, 0.000000e+00
  %11 = fadd double %9, 1.000000e+00
  %12 = select i1 %10, double %9, double %11
  %13 = fcmp oeq double %0, 0x7FF0000000000000
  %14 = fcmp oeq double %0, 0xFFF0000000000000
  %15 = or i1 %13, %14
  %16 = bitcast double %0 to i64
  %17 = and i64 %16, 9223372036854775807
  %18 = bitcast i64 %17 to double
  %19 = fcmp oge double %18, 0x4330000000000000
  %20 = or i1 %15, %19
  %21 = fsub double %0, %12
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, 9223372036854775807
  %24 = and i64 %16, -9223372036854775808
  %25 = or i64 %23, %24
  %26 = bitcast i64 %25 to double
  %27 = select i1 %20, double %0, double %26
  ret double %27
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_ceild1_purec(double) local_unnamed_addr #0 {
  %2 = fmul double %0, 0x3E00000000000000
  %3 = fptosi double %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fmul double %4, 0x41E0000000000000
  %6 = fsub double %0, %5
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fsub double %6, %8
  %10 = fcmp ugt double %9, 0.000000e+00
  %11 = fadd double %9, -1.000000e+00
  %12 = select i1 %10, double %11, double %9
  %13 = fcmp oeq double %0, 0x7FF0000000000000
  %14 = fcmp oeq double %0, 0xFFF0000000000000
  %15 = or i1 %13, %14
  %16 = bitcast double %0 to i64
  %17 = and i64 %16, 9223372036854775807
  %18 = bitcast i64 %17 to double
  %19 = fcmp oge double %18, 0x4330000000000000
  %20 = or i1 %15, %19
  %21 = fsub double %0, %12
  %22 = bitcast double %21 to i64
  %23 = and i64 %22, 9223372036854775807
  %24 = and i64 %16, -9223372036854775808
  %25 = or i64 %23, %24
  %26 = bitcast i64 %25 to double
  %27 = select i1 %20, double %0, double %26
  ret double %27
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_roundd1_purec(double) local_unnamed_addr #0 {
  %2 = fadd double %0, 5.000000e-01
  %3 = fmul double %2, 0x3E00000000000000
  %4 = fptosi double %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fmul double %5, 0x41E0000000000000
  %7 = fsub double %2, %6
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fsub double %7, %9
  %11 = fcmp ugt double %2, 0.000000e+00
  %12 = fcmp une double %10, 0.000000e+00
  %13 = fadd double %2, -1.000000e+00
  %14 = or i1 %11, %12
  %15 = select i1 %14, double %2, double %13
  %16 = fcmp uge double %10, 0.000000e+00
  %17 = fadd double %10, 1.000000e+00
  %18 = select i1 %16, double %10, double %17
  %19 = fcmp une double %0, 0x3FDFFFFFFFFFFFFF
  %20 = select i1 %19, double %15, double 0.000000e+00
  %21 = fcmp oeq double %0, 0x7FF0000000000000
  %22 = fcmp oeq double %0, 0xFFF0000000000000
  %23 = or i1 %21, %22
  %24 = bitcast double %0 to i64
  %25 = and i64 %24, 9223372036854775807
  %26 = bitcast i64 %25 to double
  %27 = fcmp oge double %26, 0x4330000000000000
  %28 = or i1 %23, %27
  %29 = fsub double %20, %18
  %30 = bitcast double %29 to i64
  %31 = and i64 %30, 9223372036854775807
  %32 = and i64 %24, -9223372036854775808
  %33 = or i64 %31, %32
  %34 = bitcast i64 %33 to double
  %35 = select i1 %28, double %0, double %34
  ret double %35
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_rintd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, -9223372036854775808
  %4 = or i64 %3, 4841369599423283200
  %5 = bitcast i64 %4 to double
  %6 = and i64 %2, 9223372036854775807
  %7 = bitcast i64 %6 to double
  %8 = fcmp ule double %7, 0x4330000000000000
  %9 = fadd double %5, %0
  %10 = fsub double %9, %5
  %11 = bitcast double %10 to i64
  %12 = or i64 %3, %11
  %13 = bitcast i64 %12 to double
  %14 = select i1 %8, double %13, double %0
  ret double %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_nextafterd1_purec(double, double) local_unnamed_addr #0 {
  %3 = fcmp une double %0, 0.000000e+00
  %4 = bitcast double %1 to i64
  %5 = and i64 %4, -9223372036854775808
  %6 = bitcast i64 %5 to double
  %7 = select i1 %3, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = ashr i64 %8, 63
  %10 = trunc i64 %9 to i32
  %11 = fcmp ole double %7, %1
  %12 = sext i1 %11 to i32
  %13 = xor i64 %8, 9223372036854775807
  %14 = and i64 %13, -4294967296
  %15 = add i64 %13, 1
  %16 = trunc i64 %15 to i32
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i64
  %19 = shl nuw nsw i64 %18, 32
  %20 = add i64 %19, %14
  %21 = and i64 %15, 4294967295
  %22 = or i64 %20, %21
  %23 = icmp eq i32 %12, %10
  %24 = select i1 %23, i64 %8, i64 %22
  %25 = fcmp une double %7, %1
  %26 = zext i1 %25 to i64
  %27 = sub i64 %24, %26
  %28 = and i64 %24, -4294967296
  %29 = and i64 %27, 4294967295
  %30 = trunc i64 %27 to i32
  %31 = icmp eq i32 %30, -1
  %32 = and i1 %25, %31
  %33 = select i1 %32, i64 -4294967296, i64 0
  %34 = add i64 %33, %28
  %35 = or i64 %34, %29
  %36 = xor i64 %35, 9223372036854775807
  %37 = and i64 %36, -4294967296
  %38 = add i64 %36, 1
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, 0
  %41 = zext i1 %40 to i64
  %42 = shl nuw nsw i64 %41, 32
  %43 = add i64 %42, %37
  %44 = and i64 %38, 4294967295
  %45 = or i64 %43, %44
  %46 = select i1 %23, i64 %35, i64 %45
  %47 = bitcast i64 %46 to double
  %48 = fcmp une double %47, 0.000000e+00
  %49 = fcmp oeq double %7, 0.000000e+00
  %50 = and i64 %8, -9223372036854775808
  %51 = bitcast i64 %50 to double
  %52 = or i1 %49, %48
  %53 = select i1 %52, double %47, double %51
  %54 = fcmp une double %7, 0.000000e+00
  %55 = fcmp une double %1, 0.000000e+00
  %56 = or i1 %55, %54
  %57 = select i1 %56, double %53, double %1
  %58 = fcmp ord double %7, %1
  %59 = select i1 %58, double %57, double 0x7FF8000000000000
  ret double %59
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_frfrexpd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = and i64 %8, -9218868437227405313
  %10 = or i64 %9, 4602678819172646912
  %11 = fcmp une double %7, 0x7FF0000000000000
  %12 = fcmp une double %7, 0xFFF0000000000000
  %13 = and i64 %8, -9223372036854775808
  %14 = or i64 %13, 9218868437227405312
  %15 = and i1 %12, %11
  %16 = select i1 %15, i64 %10, i64 %14
  %17 = bitcast i64 %16 to double
  %18 = fcmp une double %7, 0.000000e+00
  %19 = select i1 %18, double %17, double %7
  ret double %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_cinz_expfrexpd1_purec(double) local_unnamed_addr #0 {
  %2 = bitcast double %0 to i64
  %3 = and i64 %2, 9223372036854775807
  %4 = bitcast i64 %3 to double
  %5 = fcmp uge double %4, 0x10000000000000
  %6 = fmul double %0, 0x43E0000000000000
  %7 = select i1 %5, double %0, double %6
  %8 = bitcast double %7 to i64
  %9 = lshr i64 %8, 52
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 2047
  %12 = add nsw i32 %11, -1022
  %13 = fcmp ueq double %7, 0.000000e+00
  %14 = fcmp oeq double %7, 0x7FF0000000000000
  %15 = fcmp oeq double %7, 0xFFF0000000000000
  %16 = or i1 %14, %15
  %17 = or i1 %13, %16
  %18 = select i1 %17, i32 0, i32 %12
  ret i32 %18
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fmad1_purec(double, double, double) local_unnamed_addr #0 {
  %4 = fmul double %0, %1
  %5 = fadd double %4, %2
  %6 = bitcast double %5 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp uge double %8, 1.000000e-300
  %10 = insertelement <2 x double> undef, double %1, i32 0
  %11 = insertelement <2 x double> %10, double %0, i32 1
  %12 = fmul <2 x double> %11, <double 0x46B0000000000000, double 0x46B0000000000000>
  %13 = insertelement <2 x i1> undef, i1 %9, i32 0
  %14 = shufflevector <2 x i1> %13, <2 x i1> undef, <2 x i32> zeroinitializer
  %15 = select <2 x i1> %14, <2 x double> %11, <2 x double> %12
  %16 = fmul double %2, 0x4D70000000000000
  %17 = select i1 %9, double %2, double %16
  %18 = select i1 %9, double 1.000000e+00, double 0x3270000000000000
  %19 = fcmp ule double %8, 1.000000e+300
  %20 = fmul <2 x double> %15, <double 0x3930000000000000, double 0x3930000000000000>
  %21 = insertelement <2 x i1> undef, i1 %19, i32 0
  %22 = shufflevector <2 x i1> %21, <2 x i1> undef, <2 x i32> zeroinitializer
  %23 = select <2 x i1> %22, <2 x double> %15, <2 x double> %20
  %24 = fmul double %17, 0x3270000000000000
  %25 = select i1 %19, double %17, double %24
  %26 = select i1 %19, double %18, double 0x4D70000000000000
  %27 = bitcast <2 x double> %23 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %23, %29
  %31 = extractelement <2 x double> %23, i32 0
  %32 = extractelement <2 x double> %23, i32 1
  %33 = fmul double %32, %31
  %34 = extractelement <2 x double> %29, i32 0
  %35 = extractelement <2 x double> %29, i32 1
  %36 = fmul double %35, %34
  %37 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %38 = fmul <2 x double> %30, %37
  %39 = extractelement <2 x double> %30, i32 0
  %40 = extractelement <2 x double> %30, i32 1
  %41 = fmul double %40, %39
  %42 = fsub double %36, %33
  %43 = extractelement <2 x double> %38, i32 1
  %44 = fadd double %43, %42
  %45 = extractelement <2 x double> %38, i32 0
  %46 = fadd double %45, %44
  %47 = fadd double %41, %46
  %48 = fadd double %25, %33
  %49 = fsub double %48, %33
  %50 = fsub double %48, %49
  %51 = fsub double %33, %50
  %52 = fsub double %25, %49
  %53 = fadd double %52, %51
  %54 = fadd double %53, %47
  %55 = fcmp une double %32, 0.000000e+00
  %56 = fcmp une double %31, 0.000000e+00
  %57 = fadd double %48, %54
  %58 = and i1 %55, %56
  %59 = select i1 %58, double %57, double %25
  %60 = fcmp oeq double %25, 0x7FF0000000000000
  %61 = fcmp oeq double %25, 0xFFF0000000000000
  %62 = or i1 %60, %61
  %63 = fcmp une double %32, 0x7FF0000000000000
  %64 = fcmp une double %32, 0xFFF0000000000000
  %65 = and i1 %64, %63
  %66 = and i1 %65, %62
  %67 = fcmp ord double %32, 0.000000e+00
  %68 = and i1 %67, %66
  %69 = fcmp une double %31, 0x7FF0000000000000
  %70 = fcmp une double %31, 0xFFF0000000000000
  %71 = and i1 %70, %69
  %72 = and i1 %71, %68
  %73 = fcmp ord double %31, 0.000000e+00
  %74 = and i1 %73, %72
  %75 = select i1 %74, double %25, double %5
  %76 = fcmp oeq double %75, 0x7FF0000000000000
  %77 = fcmp oeq double %75, 0xFFF0000000000000
  %78 = or i1 %76, %77
  %79 = fcmp uno double %75, 0.000000e+00
  %80 = or i1 %79, %78
  %81 = fmul double %26, %59
  %82 = select i1 %80, double %75, double %81
  ret double %82
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_sqrtd1_u05purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_sqrtd1_u05purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_sqrtd1_u35purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_sqrtd1_u05purec(double %0) #6
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_hypotd1_u05purec(double, double) local_unnamed_addr #3 {
  %3 = tail call double @Sleef_hypotd1_u05purec(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_hypotd1_u35purec(double, double) local_unnamed_addr #3 {
  %3 = bitcast double %0 to i64
  %4 = and i64 %3, 9223372036854775807
  %5 = bitcast i64 %4 to double
  %6 = bitcast double %1 to i64
  %7 = and i64 %6, 9223372036854775807
  %8 = bitcast i64 %7 to double
  %9 = fcmp olt double %5, %8
  %10 = select i1 %9, double %5, double %8
  %11 = fcmp ogt double %5, %8
  %12 = select i1 %11, double %5, double %8
  %13 = fdiv double %10, %12
  %14 = fmul double %13, %13
  %15 = fadd double %14, 1.000000e+00
  %16 = tail call double @sqrt(double %15) #6
  %17 = fmul double %12, %16
  %18 = fcmp une double %10, 0.000000e+00
  %19 = select i1 %18, double %17, double %12
  %20 = fcmp ord double %8, %5
  %21 = select i1 %20, double %19, double 0x7FF8000000000000
  %22 = fcmp une double %5, 0x7FF0000000000000
  %23 = fcmp une double %8, 0x7FF0000000000000
  %24 = and i1 %22, %23
  %25 = select i1 %24, double %21, double 0x7FF0000000000000
  ret double %25
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_fmodd1_purec(double, double) local_unnamed_addr #0 {
  %3 = tail call double @Sleef_fmodd1_purec(double %0, double %1)
  ret double %3
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_remainderd1_purec(double, double) local_unnamed_addr #0 {
  %3 = tail call double @Sleef_remainderd1_purec(double %0, double %1)
  ret double %3
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_tgammad1_u10purec(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_tgammad1_u10purec(double %0)
  ret double %2
}

; Function Attrs: nounwind uwtable
define double @Sleef_cinz_lgammad1_u10purec(double) local_unnamed_addr #3 {
  %2 = tail call double @Sleef_lgammad1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_erfd1_u10purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_erfd1_u10purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define double @Sleef_cinz_erfcd1_u15purec(double) local_unnamed_addr #0 {
  %2 = tail call double @Sleef_erfcd1_u15purec(double %0)
  ret double %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @Sleef_getIntd1_purec(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 10
  %4 = sext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd1_purec(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4, !4, i64 0}
!4 = !{!"double", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempi: argument 0"}
!9 = distinct !{!9, !"rempi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempi: argument 0"}
!12 = distinct !{!12, !"rempi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempi: argument 0"}
!15 = distinct !{!15, !"rempi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempi: argument 0"}
!18 = distinct !{!18, !"rempi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempi: argument 0"}
!21 = distinct !{!21, !"rempi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempi: argument 0"}
!24 = distinct !{!24, !"rempi"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempi: argument 0"}
!27 = distinct !{!27, !"rempi"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempi: argument 0"}
!30 = distinct !{!30, !"rempi"}
