; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vdouble2 = type { <2 x double>, <2 x double> }
%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }

@.str = private unnamed_addr constant [5 x i8] c"SSE2\00", align 1
@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_ldexpd2_sse2(<2 x double>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 9, i32 9, i32 9, i32 9>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 7, i32 7, i32 7, i32 7>
  %9 = shl <4 x i32> %7, <i32 9, i32 9, i32 9, i32 9>
  %10 = add nsw <4 x i32> %8, <i32 1023, i32 1023, i32 0, i32 0>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = ashr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = xor <2 x i64> %13, <i64 -1, i64 -1>
  %15 = and <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = icmp sgt <4 x i32> %16, <i32 2047, i32 2047, i32 0, i32 0>
  %18 = sext <4 x i1> %17 to <4 x i32>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 8791798056959, i64 0>
  %21 = xor <2 x i64> %19, <i64 -1, i64 -1>
  %22 = and <2 x i64> %15, %21
  %23 = or <2 x i64> %22, %20
  %24 = bitcast <2 x i64> %23 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %26 = and <4 x i32> %25, <i32 0, i32 -1, i32 0, i32 -1>
  %27 = shl <4 x i32> %26, <i32 20, i32 20, i32 20, i32 20>
  %28 = bitcast <4 x i32> %27 to <2 x double>
  %29 = fmul <2 x double> %28, %0
  %30 = fmul <2 x double> %29, %28
  %31 = fmul <2 x double> %30, %28
  %32 = fmul <2 x double> %31, %28
  %33 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 0>
  %34 = sub <4 x i32> %33, %9
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %36 = and <4 x i32> %35, <i32 0, i32 -1, i32 0, i32 -1>
  %37 = shl <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = bitcast <4 x i32> %37 to <2 x double>
  %39 = fmul <2 x double> %32, %38
  ret <2 x double> %39
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = select <2 x i1> %5, <2 x double> %7, <2 x double> %4
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = and <4 x i32> %10, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %12 = lshr exact <4 x i32> %11, <i32 20, i32 20, i32 20, i32 20>
  %13 = bitcast <2 x i64> %6 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 5682241733931, i64 undef>
  %17 = xor <2 x i64> %15, <i64 4393751544831, i64 undef>
  %18 = and <2 x i64> %17, <i64 4393751544831, i64 undef>
  %19 = or <2 x i64> %18, %16
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = sub <4 x i32> %12, %20
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %23 = sitofp <2 x i32> %22 to <2 x double>
  %24 = fcmp oeq <2 x double> %0, zeroinitializer
  %25 = fcmp uno <2 x double> %0, zeroinitializer
  %26 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = or <2 x i1> %26, %25
  %28 = select <2 x i1> %24, <2 x double> <double 0xC1E0000000000000, double 0xC1E0000000000000>, <2 x double> %23
  %29 = select <2 x i1> %27, <2 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <2 x double> %28
  %30 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %29) #6
  %31 = bitcast <4 x i32> %30 to <2 x i64>
  ret <2 x i64> %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #6
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %14) #6
  %16 = fmul <2 x double> %14, <double 0xC00921FB54442D18, double 0xC00921FB54442D18>
  %17 = fadd <2 x double> %16, %0
  %18 = fmul <2 x double> %14, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %19 = fadd <2 x double> %18, %17
  br label %315

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %53, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %27) #6
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %30 = sitofp <2 x i32> %29 to <2 x double>
  %31 = fmul <2 x double> %30, <double 0x4170000000000000, double 0x4170000000000000>
  %32 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %33 = fsub <2 x double> %32, %31
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %33) #6
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %36 = sitofp <2 x i32> %35 to <2 x double>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %36) #6
  %38 = fmul <2 x double> %31, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %39 = fadd <2 x double> %38, %0
  %40 = fmul <2 x double> %36, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %41 = fadd <2 x double> %40, %39
  %42 = fmul <2 x double> %31, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %43 = fadd <2 x double> %42, %41
  %44 = fmul <2 x double> %36, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %45 = fadd <2 x double> %44, %43
  %46 = fmul <2 x double> %31, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %47 = fadd <2 x double> %46, %45
  %48 = fmul <2 x double> %36, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %49 = fadd <2 x double> %48, %47
  %50 = fadd <2 x double> %31, %36
  %51 = fmul <2 x double> %50, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %52 = fadd <2 x double> %51, %49
  br label %315

; <label>:53:                                     ; preds = %20
  %54 = bitcast <2 x double> %0 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %56 = lshr <4 x i32> %55, <i32 20, i32 20, i32 20, i32 20>
  %57 = and <4 x i32> %56, <i32 2047, i32 2047, i32 0, i32 0>
  %58 = add nsw <4 x i32> %57, <i32 -1078, i32 -1078, i32 0, i32 0>
  %59 = icmp sgt <4 x i32> %58, <i32 645, i32 645, i32 0, i32 0>
  %60 = select <4 x i1> %59, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %62 = and <4 x i32> %61, <i32 0, i32 -1, i32 0, i32 -1>
  %63 = shl <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = add <4 x i32> %63, %54
  %65 = bitcast <4 x i32> %64 to <2 x double>
  %66 = ashr <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %67 = xor <4 x i32> %66, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %68 = and <4 x i32> %67, %58
  %69 = shl <4 x i32> %68, <i32 2, i32 2, i32 2, i32 2>
  %70 = extractelement <4 x i32> %69, i32 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !3, !noalias !7
  %74 = extractelement <4 x i32> %69, i32 0
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !3, !noalias !7
  %78 = insertelement <2 x double> undef, double %77, i32 0
  %79 = insertelement <2 x double> %78, double %73, i32 1
  %80 = bitcast <4 x i32> %64 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 -134217728, i64 -134217728>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fsub <2 x double> %65, %82
  %84 = bitcast <2 x double> %79 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 -134217728, i64 -134217728>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fsub <2 x double> %79, %86
  %88 = fmul <2 x double> %79, %65
  %89 = fmul <2 x double> %82, %86
  %90 = bitcast <2 x double> %88 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808>
  %92 = bitcast <2 x i64> %91 to <2 x double>
  %93 = fmul <2 x double> %83, %86
  %94 = fmul <2 x double> %87, %82
  %95 = fmul <2 x double> %83, %87
  %96 = fadd <2 x double> %89, %92
  %97 = fadd <2 x double> %93, %96
  %98 = fadd <2 x double> %94, %97
  %99 = fadd <2 x double> %95, %98
  %100 = and <2 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = or <2 x i64> %100, <i64 4841369599423283200, i64 4841369599423283200>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fmul <2 x double> %88, <double 4.000000e+00, double 4.000000e+00>
  %104 = bitcast <2 x double> %103 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 9223372036854775807, i64 9223372036854775807>
  %106 = bitcast <2 x i64> %105 to <2 x double>
  %107 = fcmp ogt <2 x double> %106, <double 0x4330000000000000, double 0x4330000000000000>
  %108 = fadd <2 x double> %103, %102
  %109 = fsub <2 x double> %108, %102
  %110 = bitcast <2 x double> %109 to <2 x i64>
  %111 = or <2 x i64> %100, %110
  %112 = select <2 x i1> %107, <2 x i64> %104, <2 x i64> %111
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = and <2 x i64> %90, <i64 9223372036854775807, i64 9223372036854775807>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fcmp ogt <2 x double> %115, <double 0x4330000000000000, double 0x4330000000000000>
  %117 = fadd <2 x double> %88, %102
  %118 = fsub <2 x double> %117, %102
  %119 = bitcast <2 x double> %118 to <2 x i64>
  %120 = or <2 x i64> %100, %119
  %121 = select <2 x i1> %116, <2 x i64> %90, <2 x i64> %120
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %113, <double -2.500000e-01, double -2.500000e-01>
  %124 = fadd <2 x double> %88, %123
  %125 = fmul <2 x double> %122, <double -4.000000e+00, double -4.000000e+00>
  %126 = fadd <2 x double> %125, %113
  %127 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %126) #6
  %128 = fadd <2 x double> %99, %124
  %129 = fsub <2 x double> %124, %128
  %130 = fadd <2 x double> %99, %129
  %131 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %71
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !7
  %133 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %75
  %134 = load double, double* %133, align 8, !tbaa !3, !noalias !7
  %135 = insertelement <2 x double> undef, double %134, i32 0
  %136 = insertelement <2 x double> %135, double %132, i32 1
  %137 = bitcast <2 x double> %136 to <2 x i64>
  %138 = and <2 x i64> %137, <i64 -134217728, i64 -134217728>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = fsub <2 x double> %136, %139
  %141 = fmul <2 x double> %136, %65
  %142 = fmul <2 x double> %82, %139
  %143 = bitcast <2 x double> %141 to <2 x i64>
  %144 = xor <2 x i64> %143, <i64 -9223372036854775808, i64 -9223372036854775808>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = fmul <2 x double> %83, %139
  %147 = fmul <2 x double> %140, %82
  %148 = fmul <2 x double> %83, %140
  %149 = fadd <2 x double> %142, %145
  %150 = fadd <2 x double> %146, %149
  %151 = fadd <2 x double> %147, %150
  %152 = fadd <2 x double> %148, %151
  %153 = fadd <2 x double> %141, %128
  %154 = fsub <2 x double> %153, %128
  %155 = fsub <2 x double> %153, %154
  %156 = fsub <2 x double> %128, %155
  %157 = fsub <2 x double> %141, %154
  %158 = fadd <2 x double> %157, %156
  %159 = fadd <2 x double> %152, %130
  %160 = fadd <2 x double> %159, %158
  %161 = bitcast <2 x double> %153 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -9223372036854775808, i64 -9223372036854775808>
  %163 = or <2 x i64> %162, <i64 4841369599423283200, i64 4841369599423283200>
  %164 = bitcast <2 x i64> %163 to <2 x double>
  %165 = fmul <2 x double> %153, <double 4.000000e+00, double 4.000000e+00>
  %166 = bitcast <2 x double> %165 to <2 x i64>
  %167 = and <2 x i64> %166, <i64 9223372036854775807, i64 9223372036854775807>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fcmp ogt <2 x double> %168, <double 0x4330000000000000, double 0x4330000000000000>
  %170 = fadd <2 x double> %165, %164
  %171 = fsub <2 x double> %170, %164
  %172 = bitcast <2 x double> %171 to <2 x i64>
  %173 = or <2 x i64> %162, %172
  %174 = select <2 x i1> %169, <2 x i64> %166, <2 x i64> %173
  %175 = bitcast <2 x i64> %174 to <2 x double>
  %176 = and <2 x i64> %161, <i64 9223372036854775807, i64 9223372036854775807>
  %177 = bitcast <2 x i64> %176 to <2 x double>
  %178 = fcmp ogt <2 x double> %177, <double 0x4330000000000000, double 0x4330000000000000>
  %179 = fadd <2 x double> %153, %164
  %180 = fsub <2 x double> %179, %164
  %181 = bitcast <2 x double> %180 to <2 x i64>
  %182 = or <2 x i64> %162, %181
  %183 = select <2 x i1> %178, <2 x i64> %161, <2 x i64> %182
  %184 = bitcast <2 x i64> %183 to <2 x double>
  %185 = fmul <2 x double> %175, <double -2.500000e-01, double -2.500000e-01>
  %186 = fadd <2 x double> %153, %185
  %187 = fmul <2 x double> %184, <double -4.000000e+00, double -4.000000e+00>
  %188 = fadd <2 x double> %187, %175
  %189 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %188) #6
  %190 = add <4 x i32> %189, %127
  %191 = fadd <2 x double> %160, %186
  %192 = fsub <2 x double> %186, %191
  %193 = fadd <2 x double> %160, %192
  %194 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %71
  %195 = load double, double* %194, align 8, !tbaa !3, !noalias !7
  %196 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %75
  %197 = load double, double* %196, align 8, !tbaa !3, !noalias !7
  %198 = insertelement <2 x double> undef, double %197, i32 0
  %199 = insertelement <2 x double> %198, double %195, i32 1
  %200 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %71
  %201 = load double, double* %200, align 8, !tbaa !3, !noalias !7
  %202 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %75
  %203 = load double, double* %202, align 8, !tbaa !3, !noalias !7
  %204 = insertelement <2 x double> undef, double %203, i32 0
  %205 = insertelement <2 x double> %204, double %201, i32 1
  %206 = bitcast <2 x double> %199 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -134217728, i64 -134217728>
  %208 = bitcast <2 x i64> %207 to <2 x double>
  %209 = fsub <2 x double> %199, %208
  %210 = fmul <2 x double> %199, %65
  %211 = fmul <2 x double> %82, %208
  %212 = bitcast <2 x double> %210 to <2 x i64>
  %213 = xor <2 x i64> %212, <i64 -9223372036854775808, i64 -9223372036854775808>
  %214 = bitcast <2 x i64> %213 to <2 x double>
  %215 = fmul <2 x double> %209, %82
  %216 = fmul <2 x double> %83, %208
  %217 = fmul <2 x double> %83, %209
  %218 = fmul <2 x double> %205, %65
  %219 = fadd <2 x double> %211, %214
  %220 = fadd <2 x double> %215, %219
  %221 = fadd <2 x double> %216, %220
  %222 = fadd <2 x double> %217, %221
  %223 = fadd <2 x double> %218, %222
  %224 = fadd <2 x double> %210, %191
  %225 = fsub <2 x double> %224, %191
  %226 = fsub <2 x double> %224, %225
  %227 = fsub <2 x double> %191, %226
  %228 = fsub <2 x double> %210, %225
  %229 = fadd <2 x double> %228, %227
  %230 = fadd <2 x double> %223, %193
  %231 = fadd <2 x double> %230, %229
  %232 = fadd <2 x double> %224, %231
  %233 = fsub <2 x double> %224, %232
  %234 = fadd <2 x double> %231, %233
  %235 = bitcast <2 x double> %232 to <2 x i64>
  %236 = and <2 x i64> %235, <i64 -134217728, i64 -134217728>
  %237 = bitcast <2 x i64> %236 to <2 x double>
  %238 = fsub <2 x double> %232, %237
  %239 = fmul <2 x double> %232, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %240 = fmul <2 x double> %237, <double 0x401921FB50000000, double 0x401921FB50000000>
  %241 = bitcast <2 x double> %239 to <2 x i64>
  %242 = xor <2 x i64> %241, <i64 -9223372036854775808, i64 -9223372036854775808>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fmul <2 x double> %238, <double 0x401921FB50000000, double 0x401921FB50000000>
  %245 = fmul <2 x double> %237, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %246 = fmul <2 x double> %238, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %247 = fmul <2 x double> %232, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %248 = fmul <2 x double> %234, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %249 = fadd <2 x double> %240, %243
  %250 = fadd <2 x double> %244, %249
  %251 = fadd <2 x double> %245, %250
  %252 = fadd <2 x double> %246, %251
  %253 = fadd <2 x double> %247, %252
  %254 = fadd <2 x double> %248, %253
  %255 = and <2 x i64> %80, <i64 9223372036854775807, i64 9223372036854775807>
  %256 = bitcast <2 x i64> %255 to <2 x double>
  %257 = fcmp olt <2 x double> %256, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %258 = sext <2 x i1> %257 to <2 x i64>
  %259 = and <2 x i64> %258, %80
  %260 = xor <2 x i64> %258, <i64 -1, i64 -1>
  %261 = and <2 x i64> %241, %260
  %262 = or <2 x i64> %261, %259
  %263 = bitcast <2 x double> %254 to <2 x i64>
  %264 = and <2 x i64> %263, %260
  %265 = and <4 x i32> %190, <i32 3, i32 3, i32 0, i32 0>
  %266 = shl nuw nsw <4 x i32> %265, <i32 1, i32 1, i32 1, i32 1>
  %267 = bitcast <2 x i64> %262 to <2 x double>
  %268 = fcmp ogt <2 x double> %267, zeroinitializer
  %269 = sext <2 x i1> %268 to <2 x i64>
  %270 = bitcast <2 x i64> %269 to <4 x i32>
  %271 = shufflevector <4 x i32> %270, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %272 = bitcast <4 x i32> %271 to <2 x i64>
  %273 = and <2 x i64> %272, <i64 8589934594, i64 0>
  %274 = xor <2 x i64> %272, <i64 4294967297, i64 4294967297>
  %275 = and <2 x i64> %274, <i64 4294967297, i64 0>
  %276 = or <2 x i64> %275, %273
  %277 = bitcast <2 x i64> %276 to <4 x i32>
  %278 = add <4 x i32> %266, %277
  %279 = ashr <4 x i32> %278, <i32 2, i32 2, i32 2, i32 2>
  %280 = and <4 x i32> %190, <i32 1, i32 1, i32 0, i32 0>
  %281 = icmp eq <4 x i32> %280, <i32 1, i32 1, i32 0, i32 0>
  %282 = sext <4 x i1> %281 to <4 x i32>
  %283 = and <2 x i64> %262, <i64 -9223372036854775808, i64 -9223372036854775808>
  %284 = xor <2 x i64> %283, <i64 -4613618979930100456, i64 -4613618979930100456>
  %285 = bitcast <2 x i64> %284 to <2 x double>
  %286 = xor <2 x i64> %283, <i64 -4858919839960114169, i64 -4858919839960114169>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = bitcast <2 x i64> %264 to <2 x double>
  %289 = fadd <2 x double> %267, %285
  %290 = fsub <2 x double> %289, %267
  %291 = fsub <2 x double> %289, %290
  %292 = fsub <2 x double> %267, %291
  %293 = fsub <2 x double> %285, %290
  %294 = fadd <2 x double> %293, %292
  %295 = fadd <2 x double> %287, %288
  %296 = fadd <2 x double> %294, %295
  %297 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %298 = bitcast <4 x i32> %297 to <2 x i64>
  %299 = bitcast <2 x double> %289 to <2 x i64>
  %300 = and <2 x i64> %299, %298
  %301 = xor <2 x i64> %298, <i64 -1, i64 -1>
  %302 = and <2 x i64> %262, %301
  %303 = or <2 x i64> %300, %302
  %304 = bitcast <2 x double> %296 to <2 x i64>
  %305 = and <2 x i64> %304, %298
  %306 = and <2 x i64> %264, %301
  %307 = or <2 x i64> %305, %306
  %308 = bitcast <2 x i64> %303 to <2 x double>
  %309 = bitcast <2 x i64> %307 to <2 x double>
  %310 = fadd <2 x double> %308, %309
  %311 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %312 = fcmp uno <2 x double> %0, zeroinitializer
  %313 = or <2 x i1> %311, %312
  %314 = select <2 x i1> %313, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %310
  br label %315

; <label>:315:                                    ; preds = %26, %53, %10
  %316 = phi <4 x i32> [ %15, %10 ], [ %37, %26 ], [ %279, %53 ]
  %317 = phi <2 x double> [ %19, %10 ], [ %52, %26 ], [ %314, %53 ]
  %318 = fmul <2 x double> %317, %317
  %319 = and <4 x i32> %316, <i32 1, i32 1, i32 0, i32 0>
  %320 = icmp eq <4 x i32> %319, <i32 1, i32 1, i32 0, i32 0>
  %321 = sext <4 x i1> %320 to <4 x i32>
  %322 = shufflevector <4 x i32> %321, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = and <2 x i64> %323, <i64 -9223372036854775808, i64 -9223372036854775808>
  %325 = bitcast <2 x double> %317 to <2 x i64>
  %326 = xor <2 x i64> %324, %325
  %327 = bitcast <2 x i64> %326 to <2 x double>
  %328 = fmul <2 x double> %318, %318
  %329 = fmul <2 x double> %328, %328
  %330 = fmul <2 x double> %318, <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>
  %331 = fadd <2 x double> %330, <double 0x3CE94FA618796592, double 0x3CE94FA618796592>
  %332 = fmul <2 x double> %318, <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>
  %333 = fadd <2 x double> %332, <double 0x3DE6124601C23966, double 0x3DE6124601C23966>
  %334 = fmul <2 x double> %328, %331
  %335 = fadd <2 x double> %333, %334
  %336 = fmul <2 x double> %318, <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>
  %337 = fadd <2 x double> %336, <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>
  %338 = fmul <2 x double> %318, <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>
  %339 = fadd <2 x double> %338, <double 0x3F8111111111110F, double 0x3F8111111111110F>
  %340 = fmul <2 x double> %328, %337
  %341 = fadd <2 x double> %339, %340
  %342 = fmul <2 x double> %329, %335
  %343 = fadd <2 x double> %341, %342
  %344 = fmul <2 x double> %318, %343
  %345 = fadd <2 x double> %344, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %346 = fmul <2 x double> %345, %327
  %347 = fmul <2 x double> %318, %346
  %348 = fadd <2 x double> %347, %327
  %349 = bitcast <2 x double> %0 to <4 x i32>
  %350 = icmp eq <4 x i32> %349, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %351 = sext <4 x i1> %350 to <4 x i32>
  %352 = shufflevector <4 x i32> %351, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %353 = and <4 x i32> %352, %351
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = and <2 x i64> %354, %2
  %356 = xor <2 x i64> %354, <i64 -1, i64 -1>
  %357 = bitcast <2 x double> %348 to <2 x i64>
  %358 = and <2 x i64> %357, %356
  %359 = or <2 x i64> %358, %355
  %360 = bitcast <2 x i64> %359 to <2 x double>
  ret <2 x double> %360
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %22, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #6
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %14) #6
  %16 = fmul <2 x double> %14, <double 0xC00921FB54442D18, double 0xC00921FB54442D18>
  %17 = fadd <2 x double> %16, %0
  %18 = fmul <2 x double> %14, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %19 = fadd <2 x double> %18, %17
  %20 = fsub <2 x double> %17, %19
  %21 = fadd <2 x double> %18, %20
  br label %348

; <label>:22:                                     ; preds = %1
  %23 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %24 = sext <2 x i1> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %25) #6
  %27 = icmp eq i32 %26, 65535
  br i1 %27, label %28, label %84, !prof !2

; <label>:28:                                     ; preds = %22
  %29 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %30 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %29) #6
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %32 = sitofp <2 x i32> %31 to <2 x double>
  %33 = fmul <2 x double> %32, <double 0x4170000000000000, double 0x4170000000000000>
  %34 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %35 = fsub <2 x double> %34, %33
  %36 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %35) #6
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %38 = sitofp <2 x i32> %37 to <2 x double>
  %39 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %38) #6
  %40 = fmul <2 x double> %33, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %41 = fadd <2 x double> %40, %0
  %42 = fmul <2 x double> %38, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %43 = fadd <2 x double> %42, %41
  %44 = fsub <2 x double> %41, %43
  %45 = fadd <2 x double> %42, %44
  %46 = fmul <2 x double> %33, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %47 = fadd <2 x double> %46, %43
  %48 = fsub <2 x double> %47, %43
  %49 = fsub <2 x double> %47, %48
  %50 = fsub <2 x double> %43, %49
  %51 = fsub <2 x double> %46, %48
  %52 = fadd <2 x double> %51, %50
  %53 = fadd <2 x double> %45, %52
  %54 = fmul <2 x double> %38, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %55 = fadd <2 x double> %54, %47
  %56 = fsub <2 x double> %55, %47
  %57 = fsub <2 x double> %55, %56
  %58 = fsub <2 x double> %47, %57
  %59 = fsub <2 x double> %54, %56
  %60 = fadd <2 x double> %59, %58
  %61 = fadd <2 x double> %60, %53
  %62 = fmul <2 x double> %33, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %63 = fadd <2 x double> %62, %55
  %64 = fsub <2 x double> %63, %55
  %65 = fsub <2 x double> %63, %64
  %66 = fsub <2 x double> %55, %65
  %67 = fsub <2 x double> %62, %64
  %68 = fadd <2 x double> %67, %66
  %69 = fadd <2 x double> %68, %61
  %70 = fmul <2 x double> %38, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %71 = fadd <2 x double> %70, %63
  %72 = fsub <2 x double> %71, %63
  %73 = fsub <2 x double> %71, %72
  %74 = fsub <2 x double> %63, %73
  %75 = fsub <2 x double> %70, %72
  %76 = fadd <2 x double> %75, %74
  %77 = fadd <2 x double> %76, %69
  %78 = fadd <2 x double> %33, %38
  %79 = fmul <2 x double> %78, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %80 = fadd <2 x double> %79, %71
  %81 = fsub <2 x double> %71, %80
  %82 = fadd <2 x double> %79, %81
  %83 = fadd <2 x double> %82, %77
  br label %348

; <label>:84:                                     ; preds = %22
  %85 = bitcast <2 x double> %0 to <4 x i32>
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %87 = lshr <4 x i32> %86, <i32 20, i32 20, i32 20, i32 20>
  %88 = and <4 x i32> %87, <i32 2047, i32 2047, i32 0, i32 0>
  %89 = add nsw <4 x i32> %88, <i32 -1078, i32 -1078, i32 0, i32 0>
  %90 = icmp sgt <4 x i32> %89, <i32 645, i32 645, i32 0, i32 0>
  %91 = select <4 x i1> %90, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %93 = and <4 x i32> %92, <i32 0, i32 -1, i32 0, i32 -1>
  %94 = shl <4 x i32> %93, <i32 20, i32 20, i32 20, i32 20>
  %95 = add <4 x i32> %94, %85
  %96 = bitcast <4 x i32> %95 to <2 x double>
  %97 = ashr <4 x i32> %89, <i32 31, i32 31, i32 31, i32 31>
  %98 = xor <4 x i32> %97, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %99 = and <4 x i32> %98, %89
  %100 = shl <4 x i32> %99, <i32 2, i32 2, i32 2, i32 2>
  %101 = extractelement <4 x i32> %100, i32 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %102
  %104 = load double, double* %103, align 8, !tbaa !3, !noalias !10
  %105 = extractelement <4 x i32> %100, i32 0
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %106
  %108 = load double, double* %107, align 8, !tbaa !3, !noalias !10
  %109 = insertelement <2 x double> undef, double %108, i32 0
  %110 = insertelement <2 x double> %109, double %104, i32 1
  %111 = bitcast <4 x i32> %95 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %96, %113
  %115 = bitcast <2 x double> %110 to <2 x i64>
  %116 = and <2 x i64> %115, <i64 -134217728, i64 -134217728>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fsub <2 x double> %110, %117
  %119 = fmul <2 x double> %110, %96
  %120 = fmul <2 x double> %113, %117
  %121 = bitcast <2 x double> %119 to <2 x i64>
  %122 = xor <2 x i64> %121, <i64 -9223372036854775808, i64 -9223372036854775808>
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fmul <2 x double> %114, %117
  %125 = fmul <2 x double> %118, %113
  %126 = fmul <2 x double> %114, %118
  %127 = fadd <2 x double> %120, %123
  %128 = fadd <2 x double> %124, %127
  %129 = fadd <2 x double> %125, %128
  %130 = fadd <2 x double> %126, %129
  %131 = and <2 x i64> %121, <i64 -9223372036854775808, i64 -9223372036854775808>
  %132 = or <2 x i64> %131, <i64 4841369599423283200, i64 4841369599423283200>
  %133 = bitcast <2 x i64> %132 to <2 x double>
  %134 = fmul <2 x double> %119, <double 4.000000e+00, double 4.000000e+00>
  %135 = bitcast <2 x double> %134 to <2 x i64>
  %136 = and <2 x i64> %135, <i64 9223372036854775807, i64 9223372036854775807>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = fcmp ogt <2 x double> %137, <double 0x4330000000000000, double 0x4330000000000000>
  %139 = fadd <2 x double> %134, %133
  %140 = fsub <2 x double> %139, %133
  %141 = bitcast <2 x double> %140 to <2 x i64>
  %142 = or <2 x i64> %131, %141
  %143 = select <2 x i1> %138, <2 x i64> %135, <2 x i64> %142
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = and <2 x i64> %121, <i64 9223372036854775807, i64 9223372036854775807>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fcmp ogt <2 x double> %146, <double 0x4330000000000000, double 0x4330000000000000>
  %148 = fadd <2 x double> %119, %133
  %149 = fsub <2 x double> %148, %133
  %150 = bitcast <2 x double> %149 to <2 x i64>
  %151 = or <2 x i64> %131, %150
  %152 = select <2 x i1> %147, <2 x i64> %121, <2 x i64> %151
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fmul <2 x double> %144, <double -2.500000e-01, double -2.500000e-01>
  %155 = fadd <2 x double> %119, %154
  %156 = fmul <2 x double> %153, <double -4.000000e+00, double -4.000000e+00>
  %157 = fadd <2 x double> %156, %144
  %158 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %157) #6
  %159 = fadd <2 x double> %130, %155
  %160 = fsub <2 x double> %155, %159
  %161 = fadd <2 x double> %130, %160
  %162 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %102
  %163 = load double, double* %162, align 8, !tbaa !3, !noalias !10
  %164 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %106
  %165 = load double, double* %164, align 8, !tbaa !3, !noalias !10
  %166 = insertelement <2 x double> undef, double %165, i32 0
  %167 = insertelement <2 x double> %166, double %163, i32 1
  %168 = bitcast <2 x double> %167 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -134217728, i64 -134217728>
  %170 = bitcast <2 x i64> %169 to <2 x double>
  %171 = fsub <2 x double> %167, %170
  %172 = fmul <2 x double> %167, %96
  %173 = fmul <2 x double> %113, %170
  %174 = bitcast <2 x double> %172 to <2 x i64>
  %175 = xor <2 x i64> %174, <i64 -9223372036854775808, i64 -9223372036854775808>
  %176 = bitcast <2 x i64> %175 to <2 x double>
  %177 = fmul <2 x double> %114, %170
  %178 = fmul <2 x double> %171, %113
  %179 = fmul <2 x double> %114, %171
  %180 = fadd <2 x double> %173, %176
  %181 = fadd <2 x double> %177, %180
  %182 = fadd <2 x double> %178, %181
  %183 = fadd <2 x double> %179, %182
  %184 = fadd <2 x double> %172, %159
  %185 = fsub <2 x double> %184, %159
  %186 = fsub <2 x double> %184, %185
  %187 = fsub <2 x double> %159, %186
  %188 = fsub <2 x double> %172, %185
  %189 = fadd <2 x double> %188, %187
  %190 = fadd <2 x double> %183, %161
  %191 = fadd <2 x double> %190, %189
  %192 = bitcast <2 x double> %184 to <2 x i64>
  %193 = and <2 x i64> %192, <i64 -9223372036854775808, i64 -9223372036854775808>
  %194 = or <2 x i64> %193, <i64 4841369599423283200, i64 4841369599423283200>
  %195 = bitcast <2 x i64> %194 to <2 x double>
  %196 = fmul <2 x double> %184, <double 4.000000e+00, double 4.000000e+00>
  %197 = bitcast <2 x double> %196 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 9223372036854775807, i64 9223372036854775807>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fcmp ogt <2 x double> %199, <double 0x4330000000000000, double 0x4330000000000000>
  %201 = fadd <2 x double> %196, %195
  %202 = fsub <2 x double> %201, %195
  %203 = bitcast <2 x double> %202 to <2 x i64>
  %204 = or <2 x i64> %193, %203
  %205 = select <2 x i1> %200, <2 x i64> %197, <2 x i64> %204
  %206 = bitcast <2 x i64> %205 to <2 x double>
  %207 = and <2 x i64> %192, <i64 9223372036854775807, i64 9223372036854775807>
  %208 = bitcast <2 x i64> %207 to <2 x double>
  %209 = fcmp ogt <2 x double> %208, <double 0x4330000000000000, double 0x4330000000000000>
  %210 = fadd <2 x double> %184, %195
  %211 = fsub <2 x double> %210, %195
  %212 = bitcast <2 x double> %211 to <2 x i64>
  %213 = or <2 x i64> %193, %212
  %214 = select <2 x i1> %209, <2 x i64> %192, <2 x i64> %213
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = fmul <2 x double> %206, <double -2.500000e-01, double -2.500000e-01>
  %217 = fadd <2 x double> %184, %216
  %218 = fmul <2 x double> %215, <double -4.000000e+00, double -4.000000e+00>
  %219 = fadd <2 x double> %218, %206
  %220 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %219) #6
  %221 = add <4 x i32> %220, %158
  %222 = fadd <2 x double> %191, %217
  %223 = fsub <2 x double> %217, %222
  %224 = fadd <2 x double> %191, %223
  %225 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %102
  %226 = load double, double* %225, align 8, !tbaa !3, !noalias !10
  %227 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %106
  %228 = load double, double* %227, align 8, !tbaa !3, !noalias !10
  %229 = insertelement <2 x double> undef, double %228, i32 0
  %230 = insertelement <2 x double> %229, double %226, i32 1
  %231 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %102
  %232 = load double, double* %231, align 8, !tbaa !3, !noalias !10
  %233 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %106
  %234 = load double, double* %233, align 8, !tbaa !3, !noalias !10
  %235 = insertelement <2 x double> undef, double %234, i32 0
  %236 = insertelement <2 x double> %235, double %232, i32 1
  %237 = bitcast <2 x double> %230 to <2 x i64>
  %238 = and <2 x i64> %237, <i64 -134217728, i64 -134217728>
  %239 = bitcast <2 x i64> %238 to <2 x double>
  %240 = fsub <2 x double> %230, %239
  %241 = fmul <2 x double> %230, %96
  %242 = fmul <2 x double> %113, %239
  %243 = bitcast <2 x double> %241 to <2 x i64>
  %244 = xor <2 x i64> %243, <i64 -9223372036854775808, i64 -9223372036854775808>
  %245 = bitcast <2 x i64> %244 to <2 x double>
  %246 = fmul <2 x double> %240, %113
  %247 = fmul <2 x double> %114, %239
  %248 = fmul <2 x double> %114, %240
  %249 = fmul <2 x double> %236, %96
  %250 = fadd <2 x double> %242, %245
  %251 = fadd <2 x double> %246, %250
  %252 = fadd <2 x double> %247, %251
  %253 = fadd <2 x double> %248, %252
  %254 = fadd <2 x double> %249, %253
  %255 = fadd <2 x double> %241, %222
  %256 = fsub <2 x double> %255, %222
  %257 = fsub <2 x double> %255, %256
  %258 = fsub <2 x double> %222, %257
  %259 = fsub <2 x double> %241, %256
  %260 = fadd <2 x double> %259, %258
  %261 = fadd <2 x double> %254, %224
  %262 = fadd <2 x double> %261, %260
  %263 = fadd <2 x double> %255, %262
  %264 = fsub <2 x double> %255, %263
  %265 = fadd <2 x double> %262, %264
  %266 = bitcast <2 x double> %263 to <2 x i64>
  %267 = and <2 x i64> %266, <i64 -134217728, i64 -134217728>
  %268 = bitcast <2 x i64> %267 to <2 x double>
  %269 = fsub <2 x double> %263, %268
  %270 = fmul <2 x double> %263, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %271 = fmul <2 x double> %268, <double 0x401921FB50000000, double 0x401921FB50000000>
  %272 = bitcast <2 x double> %270 to <2 x i64>
  %273 = xor <2 x i64> %272, <i64 -9223372036854775808, i64 -9223372036854775808>
  %274 = bitcast <2 x i64> %273 to <2 x double>
  %275 = fmul <2 x double> %269, <double 0x401921FB50000000, double 0x401921FB50000000>
  %276 = fmul <2 x double> %268, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %277 = fmul <2 x double> %269, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %278 = fmul <2 x double> %263, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %279 = fmul <2 x double> %265, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %280 = fadd <2 x double> %271, %274
  %281 = fadd <2 x double> %275, %280
  %282 = fadd <2 x double> %276, %281
  %283 = fadd <2 x double> %277, %282
  %284 = fadd <2 x double> %278, %283
  %285 = fadd <2 x double> %279, %284
  %286 = and <2 x i64> %111, <i64 9223372036854775807, i64 9223372036854775807>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = fcmp olt <2 x double> %287, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %289 = sext <2 x i1> %288 to <2 x i64>
  %290 = and <2 x i64> %289, %111
  %291 = xor <2 x i64> %289, <i64 -1, i64 -1>
  %292 = and <2 x i64> %272, %291
  %293 = or <2 x i64> %292, %290
  %294 = bitcast <2 x double> %285 to <2 x i64>
  %295 = and <2 x i64> %294, %291
  %296 = and <4 x i32> %221, <i32 3, i32 3, i32 0, i32 0>
  %297 = shl nuw nsw <4 x i32> %296, <i32 1, i32 1, i32 1, i32 1>
  %298 = bitcast <2 x i64> %293 to <2 x double>
  %299 = fcmp ogt <2 x double> %298, zeroinitializer
  %300 = sext <2 x i1> %299 to <2 x i64>
  %301 = bitcast <2 x i64> %300 to <4 x i32>
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %303 = bitcast <4 x i32> %302 to <2 x i64>
  %304 = and <2 x i64> %303, <i64 8589934594, i64 0>
  %305 = xor <2 x i64> %303, <i64 4294967297, i64 4294967297>
  %306 = and <2 x i64> %305, <i64 4294967297, i64 0>
  %307 = or <2 x i64> %306, %304
  %308 = bitcast <2 x i64> %307 to <4 x i32>
  %309 = add <4 x i32> %297, %308
  %310 = ashr <4 x i32> %309, <i32 2, i32 2, i32 2, i32 2>
  %311 = and <4 x i32> %221, <i32 1, i32 1, i32 0, i32 0>
  %312 = icmp eq <4 x i32> %311, <i32 1, i32 1, i32 0, i32 0>
  %313 = sext <4 x i1> %312 to <4 x i32>
  %314 = and <2 x i64> %293, <i64 -9223372036854775808, i64 -9223372036854775808>
  %315 = xor <2 x i64> %314, <i64 -4613618979930100456, i64 -4613618979930100456>
  %316 = bitcast <2 x i64> %315 to <2 x double>
  %317 = xor <2 x i64> %314, <i64 -4858919839960114169, i64 -4858919839960114169>
  %318 = bitcast <2 x i64> %317 to <2 x double>
  %319 = bitcast <2 x i64> %295 to <2 x double>
  %320 = fadd <2 x double> %298, %316
  %321 = fsub <2 x double> %320, %298
  %322 = fsub <2 x double> %320, %321
  %323 = fsub <2 x double> %298, %322
  %324 = fsub <2 x double> %316, %321
  %325 = fadd <2 x double> %324, %323
  %326 = fadd <2 x double> %318, %319
  %327 = fadd <2 x double> %325, %326
  %328 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = bitcast <2 x double> %320 to <2 x i64>
  %331 = and <2 x i64> %330, %329
  %332 = xor <2 x i64> %329, <i64 -1, i64 -1>
  %333 = and <2 x i64> %293, %332
  %334 = or <2 x i64> %331, %333
  %335 = bitcast <2 x double> %327 to <2 x i64>
  %336 = and <2 x i64> %335, %329
  %337 = and <2 x i64> %295, %332
  %338 = or <2 x i64> %336, %337
  %339 = bitcast <2 x i64> %334 to <2 x double>
  %340 = bitcast <2 x i64> %338 to <2 x double>
  %341 = fadd <2 x double> %339, %340
  %342 = fsub <2 x double> %339, %341
  %343 = fadd <2 x double> %342, %340
  %344 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %345 = fcmp uno <2 x double> %0, zeroinitializer
  %346 = or <2 x i1> %344, %345
  %347 = select <2 x i1> %346, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %341
  br label %348

; <label>:348:                                    ; preds = %28, %84, %10
  %349 = phi <2 x double> [ %347, %84 ], [ %80, %28 ], [ %19, %10 ]
  %350 = phi <2 x double> [ %343, %84 ], [ %83, %28 ], [ %21, %10 ]
  %351 = phi <4 x i32> [ %310, %84 ], [ %39, %28 ], [ %15, %10 ]
  %352 = bitcast <2 x double> %349 to <2 x i64>
  %353 = and <2 x i64> %352, <i64 -134217728, i64 -134217728>
  %354 = bitcast <2 x i64> %353 to <2 x double>
  %355 = fsub <2 x double> %349, %354
  %356 = fmul <2 x double> %349, %349
  %357 = fmul <2 x double> %354, %354
  %358 = bitcast <2 x double> %356 to <2 x i64>
  %359 = xor <2 x i64> %358, <i64 -9223372036854775808, i64 -9223372036854775808>
  %360 = bitcast <2 x i64> %359 to <2 x double>
  %361 = fadd <2 x double> %354, %354
  %362 = fmul <2 x double> %361, %355
  %363 = fmul <2 x double> %355, %355
  %364 = fadd <2 x double> %350, %350
  %365 = fmul <2 x double> %349, %364
  %366 = fadd <2 x double> %357, %360
  %367 = fadd <2 x double> %366, %362
  %368 = fadd <2 x double> %363, %367
  %369 = fadd <2 x double> %365, %368
  %370 = fmul <2 x double> %356, %356
  %371 = fmul <2 x double> %370, %370
  %372 = fmul <2 x double> %356, <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>
  %373 = fadd <2 x double> %372, <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>
  %374 = fmul <2 x double> %356, <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>
  %375 = fadd <2 x double> %374, <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>
  %376 = fmul <2 x double> %356, <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>
  %377 = fadd <2 x double> %376, <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>
  %378 = fmul <2 x double> %370, %375
  %379 = fadd <2 x double> %377, %378
  %380 = fmul <2 x double> %371, %373
  %381 = fadd <2 x double> %380, %379
  %382 = fmul <2 x double> %356, %381
  %383 = fadd <2 x double> %382, <double 0x3F811111111110B9, double 0x3F811111111110B9>
  %384 = fmul <2 x double> %356, %383
  %385 = fadd <2 x double> %384, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %386 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %385
  %387 = fadd <2 x double> %384, %386
  %388 = bitcast <2 x double> %385 to <2 x i64>
  %389 = and <2 x i64> %388, <i64 -134217728, i64 -134217728>
  %390 = bitcast <2 x i64> %389 to <2 x double>
  %391 = fsub <2 x double> %385, %390
  %392 = and <2 x i64> %358, <i64 -134217728, i64 -134217728>
  %393 = bitcast <2 x i64> %392 to <2 x double>
  %394 = fsub <2 x double> %356, %393
  %395 = fmul <2 x double> %356, %385
  %396 = fmul <2 x double> %393, %390
  %397 = bitcast <2 x double> %395 to <2 x i64>
  %398 = xor <2 x i64> %397, <i64 -9223372036854775808, i64 -9223372036854775808>
  %399 = bitcast <2 x i64> %398 to <2 x double>
  %400 = fmul <2 x double> %391, %393
  %401 = fmul <2 x double> %394, %390
  %402 = fmul <2 x double> %394, %391
  %403 = fmul <2 x double> %369, %385
  %404 = fmul <2 x double> %356, %387
  %405 = fadd <2 x double> %396, %399
  %406 = fadd <2 x double> %400, %405
  %407 = fadd <2 x double> %401, %406
  %408 = fadd <2 x double> %402, %407
  %409 = fadd <2 x double> %403, %408
  %410 = fadd <2 x double> %404, %409
  %411 = fadd <2 x double> %395, <double 1.000000e+00, double 1.000000e+00>
  %412 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %411
  %413 = fadd <2 x double> %395, %412
  %414 = fadd <2 x double> %413, %410
  %415 = bitcast <2 x double> %411 to <2 x i64>
  %416 = and <2 x i64> %415, <i64 -134217728, i64 -134217728>
  %417 = bitcast <2 x i64> %416 to <2 x double>
  %418 = fsub <2 x double> %411, %417
  %419 = fmul <2 x double> %350, %417
  %420 = fmul <2 x double> %414, %354
  %421 = fmul <2 x double> %355, %418
  %422 = fmul <2 x double> %418, %354
  %423 = fmul <2 x double> %355, %417
  %424 = fmul <2 x double> %354, %417
  %425 = fadd <2 x double> %419, %420
  %426 = fadd <2 x double> %421, %425
  %427 = fadd <2 x double> %422, %426
  %428 = fadd <2 x double> %423, %427
  %429 = fadd <2 x double> %424, %428
  %430 = and <4 x i32> %351, <i32 1, i32 1, i32 0, i32 0>
  %431 = icmp eq <4 x i32> %430, <i32 1, i32 1, i32 0, i32 0>
  %432 = sext <4 x i1> %431 to <4 x i32>
  %433 = shufflevector <4 x i32> %432, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = and <2 x i64> %434, <i64 -9223372036854775808, i64 -9223372036854775808>
  %436 = bitcast <2 x double> %429 to <2 x i64>
  %437 = xor <2 x i64> %435, %436
  %438 = fcmp oeq <2 x double> %0, zeroinitializer
  %439 = select <2 x i1> %438, <2 x i64> %2, <2 x i64> %437
  %440 = bitcast <2 x i64> %439 to <2 x double>
  ret <2 x double> %440
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %23, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = fadd <2 x double> %11, <double -5.000000e-01, double -5.000000e-01>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %15 = sitofp <2 x i32> %14 to <2 x double>
  %16 = fmul <2 x double> %15, <double 2.000000e+00, double 2.000000e+00>
  %17 = fadd <2 x double> %16, <double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %17) #6
  %19 = fmul <2 x double> %17, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %20 = fadd <2 x double> %19, %0
  %21 = fmul <2 x double> %17, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %22 = fadd <2 x double> %21, %20
  br label %322

; <label>:23:                                     ; preds = %1
  %24 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %25 = sext <2 x i1> %24 to <2 x i64>
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %26) #6
  %28 = icmp eq i32 %27, 65535
  br i1 %28, label %29, label %60, !prof !2

; <label>:29:                                     ; preds = %23
  %30 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %31 = fadd <2 x double> %30, <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %31) #6
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %36 = fmul <2 x double> %34, <double 0xC160000000000000, double 0xC160000000000000>
  %37 = fadd <2 x double> %36, <double -5.000000e-01, double -5.000000e-01>
  %38 = fadd <2 x double> %35, %37
  %39 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %38) #6
  %40 = fmul <2 x double> %34, <double 0x4170000000000000, double 0x4170000000000000>
  %41 = shl <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  %42 = or <4 x i32> %41, <i32 1, i32 1, i32 0, i32 0>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %44 = sitofp <2 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %40, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %46 = fadd <2 x double> %45, %0
  %47 = fmul <2 x double> %44, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %48 = fadd <2 x double> %46, %47
  %49 = fmul <2 x double> %40, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %50 = fadd <2 x double> %49, %48
  %51 = fmul <2 x double> %44, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %52 = fadd <2 x double> %51, %50
  %53 = fmul <2 x double> %40, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %54 = fadd <2 x double> %53, %52
  %55 = fmul <2 x double> %44, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %56 = fadd <2 x double> %55, %54
  %57 = fadd <2 x double> %40, %44
  %58 = fmul <2 x double> %57, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %59 = fadd <2 x double> %58, %56
  br label %322

; <label>:60:                                     ; preds = %23
  %61 = bitcast <2 x double> %0 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %63 = lshr <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = and <4 x i32> %63, <i32 2047, i32 2047, i32 0, i32 0>
  %65 = add nsw <4 x i32> %64, <i32 -1078, i32 -1078, i32 0, i32 0>
  %66 = icmp sgt <4 x i32> %65, <i32 645, i32 645, i32 0, i32 0>
  %67 = select <4 x i1> %66, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %69 = and <4 x i32> %68, <i32 0, i32 -1, i32 0, i32 -1>
  %70 = shl <4 x i32> %69, <i32 20, i32 20, i32 20, i32 20>
  %71 = add <4 x i32> %70, %61
  %72 = bitcast <4 x i32> %71 to <2 x double>
  %73 = ashr <4 x i32> %65, <i32 31, i32 31, i32 31, i32 31>
  %74 = xor <4 x i32> %73, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %75 = and <4 x i32> %74, %65
  %76 = shl <4 x i32> %75, <i32 2, i32 2, i32 2, i32 2>
  %77 = extractelement <4 x i32> %76, i32 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !3, !noalias !13
  %81 = extractelement <4 x i32> %76, i32 0
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %82
  %84 = load double, double* %83, align 8, !tbaa !3, !noalias !13
  %85 = insertelement <2 x double> undef, double %84, i32 0
  %86 = insertelement <2 x double> %85, double %80, i32 1
  %87 = bitcast <4 x i32> %71 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 -134217728, i64 -134217728>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = fsub <2 x double> %72, %89
  %91 = bitcast <2 x double> %86 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %86, %93
  %95 = fmul <2 x double> %86, %72
  %96 = fmul <2 x double> %89, %93
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %90, %93
  %101 = fmul <2 x double> %94, %89
  %102 = fmul <2 x double> %90, %94
  %103 = fadd <2 x double> %96, %99
  %104 = fadd <2 x double> %100, %103
  %105 = fadd <2 x double> %101, %104
  %106 = fadd <2 x double> %102, %105
  %107 = and <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = or <2 x i64> %107, <i64 4841369599423283200, i64 4841369599423283200>
  %109 = bitcast <2 x i64> %108 to <2 x double>
  %110 = fmul <2 x double> %95, <double 4.000000e+00, double 4.000000e+00>
  %111 = bitcast <2 x double> %110 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 9223372036854775807, i64 9223372036854775807>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fcmp ogt <2 x double> %113, <double 0x4330000000000000, double 0x4330000000000000>
  %115 = fadd <2 x double> %110, %109
  %116 = fsub <2 x double> %115, %109
  %117 = bitcast <2 x double> %116 to <2 x i64>
  %118 = or <2 x i64> %107, %117
  %119 = select <2 x i1> %114, <2 x i64> %111, <2 x i64> %118
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = and <2 x i64> %97, <i64 9223372036854775807, i64 9223372036854775807>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fcmp ogt <2 x double> %122, <double 0x4330000000000000, double 0x4330000000000000>
  %124 = fadd <2 x double> %95, %109
  %125 = fsub <2 x double> %124, %109
  %126 = bitcast <2 x double> %125 to <2 x i64>
  %127 = or <2 x i64> %107, %126
  %128 = select <2 x i1> %123, <2 x i64> %97, <2 x i64> %127
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fmul <2 x double> %120, <double -2.500000e-01, double -2.500000e-01>
  %131 = fadd <2 x double> %95, %130
  %132 = fmul <2 x double> %129, <double -4.000000e+00, double -4.000000e+00>
  %133 = fadd <2 x double> %132, %120
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %133) #6
  %135 = fadd <2 x double> %106, %131
  %136 = fsub <2 x double> %131, %135
  %137 = fadd <2 x double> %106, %136
  %138 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %78
  %139 = load double, double* %138, align 8, !tbaa !3, !noalias !13
  %140 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %82
  %141 = load double, double* %140, align 8, !tbaa !3, !noalias !13
  %142 = insertelement <2 x double> undef, double %141, i32 0
  %143 = insertelement <2 x double> %142, double %139, i32 1
  %144 = bitcast <2 x double> %143 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %143, %146
  %148 = fmul <2 x double> %143, %72
  %149 = fmul <2 x double> %89, %146
  %150 = bitcast <2 x double> %148 to <2 x i64>
  %151 = xor <2 x i64> %150, <i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fmul <2 x double> %90, %146
  %154 = fmul <2 x double> %147, %89
  %155 = fmul <2 x double> %90, %147
  %156 = fadd <2 x double> %149, %152
  %157 = fadd <2 x double> %153, %156
  %158 = fadd <2 x double> %154, %157
  %159 = fadd <2 x double> %155, %158
  %160 = fadd <2 x double> %148, %135
  %161 = fsub <2 x double> %160, %135
  %162 = fsub <2 x double> %160, %161
  %163 = fsub <2 x double> %135, %162
  %164 = fsub <2 x double> %148, %161
  %165 = fadd <2 x double> %164, %163
  %166 = fadd <2 x double> %159, %137
  %167 = fadd <2 x double> %166, %165
  %168 = bitcast <2 x double> %160 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -9223372036854775808, i64 -9223372036854775808>
  %170 = or <2 x i64> %169, <i64 4841369599423283200, i64 4841369599423283200>
  %171 = bitcast <2 x i64> %170 to <2 x double>
  %172 = fmul <2 x double> %160, <double 4.000000e+00, double 4.000000e+00>
  %173 = bitcast <2 x double> %172 to <2 x i64>
  %174 = and <2 x i64> %173, <i64 9223372036854775807, i64 9223372036854775807>
  %175 = bitcast <2 x i64> %174 to <2 x double>
  %176 = fcmp ogt <2 x double> %175, <double 0x4330000000000000, double 0x4330000000000000>
  %177 = fadd <2 x double> %172, %171
  %178 = fsub <2 x double> %177, %171
  %179 = bitcast <2 x double> %178 to <2 x i64>
  %180 = or <2 x i64> %169, %179
  %181 = select <2 x i1> %176, <2 x i64> %173, <2 x i64> %180
  %182 = bitcast <2 x i64> %181 to <2 x double>
  %183 = and <2 x i64> %168, <i64 9223372036854775807, i64 9223372036854775807>
  %184 = bitcast <2 x i64> %183 to <2 x double>
  %185 = fcmp ogt <2 x double> %184, <double 0x4330000000000000, double 0x4330000000000000>
  %186 = fadd <2 x double> %160, %171
  %187 = fsub <2 x double> %186, %171
  %188 = bitcast <2 x double> %187 to <2 x i64>
  %189 = or <2 x i64> %169, %188
  %190 = select <2 x i1> %185, <2 x i64> %168, <2 x i64> %189
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fmul <2 x double> %182, <double -2.500000e-01, double -2.500000e-01>
  %193 = fadd <2 x double> %160, %192
  %194 = fmul <2 x double> %191, <double -4.000000e+00, double -4.000000e+00>
  %195 = fadd <2 x double> %194, %182
  %196 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %195) #6
  %197 = add <4 x i32> %196, %134
  %198 = fadd <2 x double> %167, %193
  %199 = fsub <2 x double> %193, %198
  %200 = fadd <2 x double> %167, %199
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %78
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !13
  %203 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %82
  %204 = load double, double* %203, align 8, !tbaa !3, !noalias !13
  %205 = insertelement <2 x double> undef, double %204, i32 0
  %206 = insertelement <2 x double> %205, double %202, i32 1
  %207 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %78
  %208 = load double, double* %207, align 8, !tbaa !3, !noalias !13
  %209 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %82
  %210 = load double, double* %209, align 8, !tbaa !3, !noalias !13
  %211 = insertelement <2 x double> undef, double %210, i32 0
  %212 = insertelement <2 x double> %211, double %208, i32 1
  %213 = bitcast <2 x double> %206 to <2 x i64>
  %214 = and <2 x i64> %213, <i64 -134217728, i64 -134217728>
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = fsub <2 x double> %206, %215
  %217 = fmul <2 x double> %206, %72
  %218 = fmul <2 x double> %89, %215
  %219 = bitcast <2 x double> %217 to <2 x i64>
  %220 = xor <2 x i64> %219, <i64 -9223372036854775808, i64 -9223372036854775808>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = fmul <2 x double> %216, %89
  %223 = fmul <2 x double> %90, %215
  %224 = fmul <2 x double> %90, %216
  %225 = fmul <2 x double> %212, %72
  %226 = fadd <2 x double> %218, %221
  %227 = fadd <2 x double> %222, %226
  %228 = fadd <2 x double> %223, %227
  %229 = fadd <2 x double> %224, %228
  %230 = fadd <2 x double> %225, %229
  %231 = fadd <2 x double> %217, %198
  %232 = fsub <2 x double> %231, %198
  %233 = fsub <2 x double> %231, %232
  %234 = fsub <2 x double> %198, %233
  %235 = fsub <2 x double> %217, %232
  %236 = fadd <2 x double> %235, %234
  %237 = fadd <2 x double> %230, %200
  %238 = fadd <2 x double> %237, %236
  %239 = fadd <2 x double> %231, %238
  %240 = fsub <2 x double> %231, %239
  %241 = fadd <2 x double> %238, %240
  %242 = bitcast <2 x double> %239 to <2 x i64>
  %243 = and <2 x i64> %242, <i64 -134217728, i64 -134217728>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = fsub <2 x double> %239, %244
  %246 = fmul <2 x double> %239, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %247 = fmul <2 x double> %244, <double 0x401921FB50000000, double 0x401921FB50000000>
  %248 = bitcast <2 x double> %246 to <2 x i64>
  %249 = xor <2 x i64> %248, <i64 -9223372036854775808, i64 -9223372036854775808>
  %250 = bitcast <2 x i64> %249 to <2 x double>
  %251 = fmul <2 x double> %245, <double 0x401921FB50000000, double 0x401921FB50000000>
  %252 = fmul <2 x double> %244, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %253 = fmul <2 x double> %245, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %254 = fmul <2 x double> %239, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %255 = fmul <2 x double> %241, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %256 = fadd <2 x double> %247, %250
  %257 = fadd <2 x double> %251, %256
  %258 = fadd <2 x double> %252, %257
  %259 = fadd <2 x double> %253, %258
  %260 = fadd <2 x double> %254, %259
  %261 = fadd <2 x double> %255, %260
  %262 = and <2 x i64> %87, <i64 9223372036854775807, i64 9223372036854775807>
  %263 = bitcast <2 x i64> %262 to <2 x double>
  %264 = fcmp olt <2 x double> %263, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %265 = sext <2 x i1> %264 to <2 x i64>
  %266 = and <2 x i64> %265, %87
  %267 = xor <2 x i64> %265, <i64 -1, i64 -1>
  %268 = and <2 x i64> %248, %267
  %269 = or <2 x i64> %268, %266
  %270 = bitcast <2 x double> %261 to <2 x i64>
  %271 = and <2 x i64> %270, %267
  %272 = and <4 x i32> %197, <i32 3, i32 3, i32 0, i32 0>
  %273 = shl nuw nsw <4 x i32> %272, <i32 1, i32 1, i32 1, i32 1>
  %274 = bitcast <2 x i64> %269 to <2 x double>
  %275 = fcmp ogt <2 x double> %274, zeroinitializer
  %276 = sext <2 x i1> %275 to <2 x i64>
  %277 = bitcast <2 x i64> %276 to <4 x i32>
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = and <2 x i64> %279, <i64 34359738376, i64 0>
  %281 = xor <2 x i64> %279, <i64 30064771079, i64 30064771079>
  %282 = and <2 x i64> %281, <i64 30064771079, i64 0>
  %283 = or <2 x i64> %282, %280
  %284 = bitcast <2 x i64> %283 to <4 x i32>
  %285 = add <4 x i32> %273, %284
  %286 = ashr <4 x i32> %285, <i32 1, i32 1, i32 1, i32 1>
  %287 = and <4 x i32> %197, <i32 1, i32 1, i32 0, i32 0>
  %288 = icmp eq <4 x i32> %287, zeroinitializer
  %289 = sext <4 x i1> %288 to <4 x i32>
  %290 = and <2 x i64> %276, <i64 -9223372036854775808, i64 -9223372036854775808>
  %291 = or <2 x i64> %290, <i64 4609753056924675352, i64 4609753056924675352>
  %292 = bitcast <2 x i64> %291 to <2 x double>
  %293 = or <2 x i64> %290, <i64 4364452196894661639, i64 4364452196894661639>
  %294 = bitcast <2 x i64> %293 to <2 x double>
  %295 = bitcast <2 x i64> %271 to <2 x double>
  %296 = fadd <2 x double> %274, %292
  %297 = fsub <2 x double> %296, %274
  %298 = fsub <2 x double> %296, %297
  %299 = fsub <2 x double> %274, %298
  %300 = fsub <2 x double> %292, %297
  %301 = fadd <2 x double> %300, %299
  %302 = fadd <2 x double> %294, %295
  %303 = fadd <2 x double> %302, %301
  %304 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %305 = bitcast <4 x i32> %304 to <2 x i64>
  %306 = bitcast <2 x double> %296 to <2 x i64>
  %307 = and <2 x i64> %306, %305
  %308 = xor <2 x i64> %305, <i64 -1, i64 -1>
  %309 = and <2 x i64> %269, %308
  %310 = or <2 x i64> %307, %309
  %311 = bitcast <2 x double> %303 to <2 x i64>
  %312 = and <2 x i64> %311, %305
  %313 = and <2 x i64> %271, %308
  %314 = or <2 x i64> %312, %313
  %315 = bitcast <2 x i64> %310 to <2 x double>
  %316 = bitcast <2 x i64> %314 to <2 x double>
  %317 = fadd <2 x double> %315, %316
  %318 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %319 = fcmp uno <2 x double> %0, zeroinitializer
  %320 = or <2 x i1> %318, %319
  %321 = select <2 x i1> %320, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %317
  br label %322

; <label>:322:                                    ; preds = %29, %60, %10
  %323 = phi <4 x i32> [ %18, %10 ], [ %42, %29 ], [ %286, %60 ]
  %324 = phi <2 x double> [ %22, %10 ], [ %59, %29 ], [ %321, %60 ]
  %325 = fmul <2 x double> %324, %324
  %326 = and <4 x i32> %323, <i32 2, i32 2, i32 0, i32 0>
  %327 = icmp eq <4 x i32> %326, zeroinitializer
  %328 = sext <4 x i1> %327 to <4 x i32>
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %330 = bitcast <4 x i32> %329 to <2 x i64>
  %331 = and <2 x i64> %330, <i64 -9223372036854775808, i64 -9223372036854775808>
  %332 = bitcast <2 x double> %324 to <2 x i64>
  %333 = xor <2 x i64> %331, %332
  %334 = bitcast <2 x i64> %333 to <2 x double>
  %335 = fmul <2 x double> %325, %325
  %336 = fmul <2 x double> %335, %335
  %337 = fmul <2 x double> %325, <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>
  %338 = fadd <2 x double> %337, <double 0x3CE94FA618796592, double 0x3CE94FA618796592>
  %339 = fmul <2 x double> %325, <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>
  %340 = fadd <2 x double> %339, <double 0x3DE6124601C23966, double 0x3DE6124601C23966>
  %341 = fmul <2 x double> %335, %338
  %342 = fadd <2 x double> %340, %341
  %343 = fmul <2 x double> %325, <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>
  %344 = fadd <2 x double> %343, <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>
  %345 = fmul <2 x double> %325, <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>
  %346 = fadd <2 x double> %345, <double 0x3F8111111111110F, double 0x3F8111111111110F>
  %347 = fmul <2 x double> %335, %344
  %348 = fadd <2 x double> %346, %347
  %349 = fmul <2 x double> %336, %342
  %350 = fadd <2 x double> %348, %349
  %351 = fmul <2 x double> %325, %350
  %352 = fadd <2 x double> %351, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %353 = fmul <2 x double> %352, %334
  %354 = fmul <2 x double> %325, %353
  %355 = fadd <2 x double> %354, %334
  ret <2 x double> %355
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %31, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = fadd <2 x double> %11, <double -5.000000e-01, double -5.000000e-01>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %15 = sitofp <2 x i32> %14 to <2 x double>
  %16 = fmul <2 x double> %15, <double 2.000000e+00, double 2.000000e+00>
  %17 = fadd <2 x double> %16, <double 1.000000e+00, double 1.000000e+00>
  %18 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %17) #6
  %19 = fmul <2 x double> %17, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %20 = fadd <2 x double> %19, %0
  %21 = fsub <2 x double> %20, %0
  %22 = fsub <2 x double> %20, %21
  %23 = fsub <2 x double> %0, %22
  %24 = fsub <2 x double> %19, %21
  %25 = fadd <2 x double> %24, %23
  %26 = fmul <2 x double> %17, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %27 = fadd <2 x double> %26, %20
  %28 = fsub <2 x double> %20, %27
  %29 = fadd <2 x double> %26, %28
  %30 = fadd <2 x double> %29, %25
  br label %364

; <label>:31:                                     ; preds = %1
  %32 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %33 = sext <2 x i1> %32 to <2 x i64>
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %35 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %34) #6
  %36 = icmp eq i32 %35, 65535
  br i1 %36, label %37, label %100, !prof !2

; <label>:37:                                     ; preds = %31
  %38 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %39 = fadd <2 x double> %38, <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>
  %40 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %39) #6
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %42 = sitofp <2 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %44 = fmul <2 x double> %42, <double 0xC160000000000000, double 0xC160000000000000>
  %45 = fadd <2 x double> %44, <double -5.000000e-01, double -5.000000e-01>
  %46 = fadd <2 x double> %43, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %46) #6
  %48 = fmul <2 x double> %42, <double 0x4170000000000000, double 0x4170000000000000>
  %49 = shl <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %50 = or <4 x i32> %49, <i32 1, i32 1, i32 0, i32 0>
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %52 = sitofp <2 x i32> %51 to <2 x double>
  %53 = fmul <2 x double> %48, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %54 = fadd <2 x double> %53, %0
  %55 = fmul <2 x double> %52, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %56 = fadd <2 x double> %54, %55
  %57 = fsub <2 x double> %56, %54
  %58 = fsub <2 x double> %56, %57
  %59 = fsub <2 x double> %54, %58
  %60 = fsub <2 x double> %55, %57
  %61 = fadd <2 x double> %60, %59
  %62 = fmul <2 x double> %48, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %63 = fadd <2 x double> %62, %56
  %64 = fsub <2 x double> %63, %56
  %65 = fsub <2 x double> %63, %64
  %66 = fsub <2 x double> %56, %65
  %67 = fsub <2 x double> %62, %64
  %68 = fadd <2 x double> %67, %66
  %69 = fadd <2 x double> %61, %68
  %70 = fmul <2 x double> %52, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %71 = fadd <2 x double> %70, %63
  %72 = fsub <2 x double> %71, %63
  %73 = fsub <2 x double> %71, %72
  %74 = fsub <2 x double> %63, %73
  %75 = fsub <2 x double> %70, %72
  %76 = fadd <2 x double> %75, %74
  %77 = fadd <2 x double> %76, %69
  %78 = fmul <2 x double> %48, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %79 = fadd <2 x double> %78, %71
  %80 = fsub <2 x double> %79, %71
  %81 = fsub <2 x double> %79, %80
  %82 = fsub <2 x double> %71, %81
  %83 = fsub <2 x double> %78, %80
  %84 = fadd <2 x double> %83, %82
  %85 = fadd <2 x double> %84, %77
  %86 = fmul <2 x double> %52, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %87 = fadd <2 x double> %86, %79
  %88 = fsub <2 x double> %87, %79
  %89 = fsub <2 x double> %87, %88
  %90 = fsub <2 x double> %79, %89
  %91 = fsub <2 x double> %86, %88
  %92 = fadd <2 x double> %91, %90
  %93 = fadd <2 x double> %92, %85
  %94 = fadd <2 x double> %48, %52
  %95 = fmul <2 x double> %94, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %96 = fadd <2 x double> %95, %87
  %97 = fsub <2 x double> %87, %96
  %98 = fadd <2 x double> %95, %97
  %99 = fadd <2 x double> %98, %93
  br label %364

; <label>:100:                                    ; preds = %31
  %101 = bitcast <2 x double> %0 to <4 x i32>
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %103 = lshr <4 x i32> %102, <i32 20, i32 20, i32 20, i32 20>
  %104 = and <4 x i32> %103, <i32 2047, i32 2047, i32 0, i32 0>
  %105 = add nsw <4 x i32> %104, <i32 -1078, i32 -1078, i32 0, i32 0>
  %106 = icmp sgt <4 x i32> %105, <i32 645, i32 645, i32 0, i32 0>
  %107 = select <4 x i1> %106, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %109 = and <4 x i32> %108, <i32 0, i32 -1, i32 0, i32 -1>
  %110 = shl <4 x i32> %109, <i32 20, i32 20, i32 20, i32 20>
  %111 = add <4 x i32> %110, %101
  %112 = bitcast <4 x i32> %111 to <2 x double>
  %113 = ashr <4 x i32> %105, <i32 31, i32 31, i32 31, i32 31>
  %114 = xor <4 x i32> %113, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %115 = and <4 x i32> %114, %105
  %116 = shl <4 x i32> %115, <i32 2, i32 2, i32 2, i32 2>
  %117 = extractelement <4 x i32> %116, i32 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !3, !noalias !16
  %121 = extractelement <4 x i32> %116, i32 0
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %122
  %124 = load double, double* %123, align 8, !tbaa !3, !noalias !16
  %125 = insertelement <2 x double> undef, double %124, i32 0
  %126 = insertelement <2 x double> %125, double %120, i32 1
  %127 = bitcast <4 x i32> %111 to <2 x i64>
  %128 = and <2 x i64> %127, <i64 -134217728, i64 -134217728>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fsub <2 x double> %112, %129
  %131 = bitcast <2 x double> %126 to <2 x i64>
  %132 = and <2 x i64> %131, <i64 -134217728, i64 -134217728>
  %133 = bitcast <2 x i64> %132 to <2 x double>
  %134 = fsub <2 x double> %126, %133
  %135 = fmul <2 x double> %126, %112
  %136 = fmul <2 x double> %129, %133
  %137 = bitcast <2 x double> %135 to <2 x i64>
  %138 = xor <2 x i64> %137, <i64 -9223372036854775808, i64 -9223372036854775808>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = fmul <2 x double> %130, %133
  %141 = fmul <2 x double> %134, %129
  %142 = fmul <2 x double> %130, %134
  %143 = fadd <2 x double> %136, %139
  %144 = fadd <2 x double> %140, %143
  %145 = fadd <2 x double> %141, %144
  %146 = fadd <2 x double> %142, %145
  %147 = and <2 x i64> %137, <i64 -9223372036854775808, i64 -9223372036854775808>
  %148 = or <2 x i64> %147, <i64 4841369599423283200, i64 4841369599423283200>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fmul <2 x double> %135, <double 4.000000e+00, double 4.000000e+00>
  %151 = bitcast <2 x double> %150 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 9223372036854775807, i64 9223372036854775807>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fcmp ogt <2 x double> %153, <double 0x4330000000000000, double 0x4330000000000000>
  %155 = fadd <2 x double> %150, %149
  %156 = fsub <2 x double> %155, %149
  %157 = bitcast <2 x double> %156 to <2 x i64>
  %158 = or <2 x i64> %147, %157
  %159 = select <2 x i1> %154, <2 x i64> %151, <2 x i64> %158
  %160 = bitcast <2 x i64> %159 to <2 x double>
  %161 = and <2 x i64> %137, <i64 9223372036854775807, i64 9223372036854775807>
  %162 = bitcast <2 x i64> %161 to <2 x double>
  %163 = fcmp ogt <2 x double> %162, <double 0x4330000000000000, double 0x4330000000000000>
  %164 = fadd <2 x double> %135, %149
  %165 = fsub <2 x double> %164, %149
  %166 = bitcast <2 x double> %165 to <2 x i64>
  %167 = or <2 x i64> %147, %166
  %168 = select <2 x i1> %163, <2 x i64> %137, <2 x i64> %167
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = fmul <2 x double> %160, <double -2.500000e-01, double -2.500000e-01>
  %171 = fadd <2 x double> %135, %170
  %172 = fmul <2 x double> %169, <double -4.000000e+00, double -4.000000e+00>
  %173 = fadd <2 x double> %172, %160
  %174 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %173) #6
  %175 = fadd <2 x double> %146, %171
  %176 = fsub <2 x double> %171, %175
  %177 = fadd <2 x double> %146, %176
  %178 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %118
  %179 = load double, double* %178, align 8, !tbaa !3, !noalias !16
  %180 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %122
  %181 = load double, double* %180, align 8, !tbaa !3, !noalias !16
  %182 = insertelement <2 x double> undef, double %181, i32 0
  %183 = insertelement <2 x double> %182, double %179, i32 1
  %184 = bitcast <2 x double> %183 to <2 x i64>
  %185 = and <2 x i64> %184, <i64 -134217728, i64 -134217728>
  %186 = bitcast <2 x i64> %185 to <2 x double>
  %187 = fsub <2 x double> %183, %186
  %188 = fmul <2 x double> %183, %112
  %189 = fmul <2 x double> %129, %186
  %190 = bitcast <2 x double> %188 to <2 x i64>
  %191 = xor <2 x i64> %190, <i64 -9223372036854775808, i64 -9223372036854775808>
  %192 = bitcast <2 x i64> %191 to <2 x double>
  %193 = fmul <2 x double> %130, %186
  %194 = fmul <2 x double> %187, %129
  %195 = fmul <2 x double> %130, %187
  %196 = fadd <2 x double> %189, %192
  %197 = fadd <2 x double> %193, %196
  %198 = fadd <2 x double> %194, %197
  %199 = fadd <2 x double> %195, %198
  %200 = fadd <2 x double> %188, %175
  %201 = fsub <2 x double> %200, %175
  %202 = fsub <2 x double> %200, %201
  %203 = fsub <2 x double> %175, %202
  %204 = fsub <2 x double> %188, %201
  %205 = fadd <2 x double> %204, %203
  %206 = fadd <2 x double> %199, %177
  %207 = fadd <2 x double> %206, %205
  %208 = bitcast <2 x double> %200 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -9223372036854775808, i64 -9223372036854775808>
  %210 = or <2 x i64> %209, <i64 4841369599423283200, i64 4841369599423283200>
  %211 = bitcast <2 x i64> %210 to <2 x double>
  %212 = fmul <2 x double> %200, <double 4.000000e+00, double 4.000000e+00>
  %213 = bitcast <2 x double> %212 to <2 x i64>
  %214 = and <2 x i64> %213, <i64 9223372036854775807, i64 9223372036854775807>
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = fcmp ogt <2 x double> %215, <double 0x4330000000000000, double 0x4330000000000000>
  %217 = fadd <2 x double> %212, %211
  %218 = fsub <2 x double> %217, %211
  %219 = bitcast <2 x double> %218 to <2 x i64>
  %220 = or <2 x i64> %209, %219
  %221 = select <2 x i1> %216, <2 x i64> %213, <2 x i64> %220
  %222 = bitcast <2 x i64> %221 to <2 x double>
  %223 = and <2 x i64> %208, <i64 9223372036854775807, i64 9223372036854775807>
  %224 = bitcast <2 x i64> %223 to <2 x double>
  %225 = fcmp ogt <2 x double> %224, <double 0x4330000000000000, double 0x4330000000000000>
  %226 = fadd <2 x double> %200, %211
  %227 = fsub <2 x double> %226, %211
  %228 = bitcast <2 x double> %227 to <2 x i64>
  %229 = or <2 x i64> %209, %228
  %230 = select <2 x i1> %225, <2 x i64> %208, <2 x i64> %229
  %231 = bitcast <2 x i64> %230 to <2 x double>
  %232 = fmul <2 x double> %222, <double -2.500000e-01, double -2.500000e-01>
  %233 = fadd <2 x double> %200, %232
  %234 = fmul <2 x double> %231, <double -4.000000e+00, double -4.000000e+00>
  %235 = fadd <2 x double> %234, %222
  %236 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %235) #6
  %237 = add <4 x i32> %236, %174
  %238 = fadd <2 x double> %207, %233
  %239 = fsub <2 x double> %233, %238
  %240 = fadd <2 x double> %207, %239
  %241 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %118
  %242 = load double, double* %241, align 8, !tbaa !3, !noalias !16
  %243 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %122
  %244 = load double, double* %243, align 8, !tbaa !3, !noalias !16
  %245 = insertelement <2 x double> undef, double %244, i32 0
  %246 = insertelement <2 x double> %245, double %242, i32 1
  %247 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %118
  %248 = load double, double* %247, align 8, !tbaa !3, !noalias !16
  %249 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %122
  %250 = load double, double* %249, align 8, !tbaa !3, !noalias !16
  %251 = insertelement <2 x double> undef, double %250, i32 0
  %252 = insertelement <2 x double> %251, double %248, i32 1
  %253 = bitcast <2 x double> %246 to <2 x i64>
  %254 = and <2 x i64> %253, <i64 -134217728, i64 -134217728>
  %255 = bitcast <2 x i64> %254 to <2 x double>
  %256 = fsub <2 x double> %246, %255
  %257 = fmul <2 x double> %246, %112
  %258 = fmul <2 x double> %129, %255
  %259 = bitcast <2 x double> %257 to <2 x i64>
  %260 = xor <2 x i64> %259, <i64 -9223372036854775808, i64 -9223372036854775808>
  %261 = bitcast <2 x i64> %260 to <2 x double>
  %262 = fmul <2 x double> %256, %129
  %263 = fmul <2 x double> %130, %255
  %264 = fmul <2 x double> %130, %256
  %265 = fmul <2 x double> %252, %112
  %266 = fadd <2 x double> %258, %261
  %267 = fadd <2 x double> %262, %266
  %268 = fadd <2 x double> %263, %267
  %269 = fadd <2 x double> %264, %268
  %270 = fadd <2 x double> %265, %269
  %271 = fadd <2 x double> %257, %238
  %272 = fsub <2 x double> %271, %238
  %273 = fsub <2 x double> %271, %272
  %274 = fsub <2 x double> %238, %273
  %275 = fsub <2 x double> %257, %272
  %276 = fadd <2 x double> %275, %274
  %277 = fadd <2 x double> %270, %240
  %278 = fadd <2 x double> %277, %276
  %279 = fadd <2 x double> %271, %278
  %280 = fsub <2 x double> %271, %279
  %281 = fadd <2 x double> %278, %280
  %282 = bitcast <2 x double> %279 to <2 x i64>
  %283 = and <2 x i64> %282, <i64 -134217728, i64 -134217728>
  %284 = bitcast <2 x i64> %283 to <2 x double>
  %285 = fsub <2 x double> %279, %284
  %286 = fmul <2 x double> %279, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %287 = fmul <2 x double> %284, <double 0x401921FB50000000, double 0x401921FB50000000>
  %288 = bitcast <2 x double> %286 to <2 x i64>
  %289 = xor <2 x i64> %288, <i64 -9223372036854775808, i64 -9223372036854775808>
  %290 = bitcast <2 x i64> %289 to <2 x double>
  %291 = fmul <2 x double> %285, <double 0x401921FB50000000, double 0x401921FB50000000>
  %292 = fmul <2 x double> %284, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %293 = fmul <2 x double> %285, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %294 = fmul <2 x double> %279, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %295 = fmul <2 x double> %281, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %296 = fadd <2 x double> %287, %290
  %297 = fadd <2 x double> %291, %296
  %298 = fadd <2 x double> %292, %297
  %299 = fadd <2 x double> %293, %298
  %300 = fadd <2 x double> %294, %299
  %301 = fadd <2 x double> %295, %300
  %302 = and <2 x i64> %127, <i64 9223372036854775807, i64 9223372036854775807>
  %303 = bitcast <2 x i64> %302 to <2 x double>
  %304 = fcmp olt <2 x double> %303, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %305 = sext <2 x i1> %304 to <2 x i64>
  %306 = and <2 x i64> %305, %127
  %307 = xor <2 x i64> %305, <i64 -1, i64 -1>
  %308 = and <2 x i64> %288, %307
  %309 = or <2 x i64> %308, %306
  %310 = bitcast <2 x double> %301 to <2 x i64>
  %311 = and <2 x i64> %310, %307
  %312 = and <4 x i32> %237, <i32 3, i32 3, i32 0, i32 0>
  %313 = shl nuw nsw <4 x i32> %312, <i32 1, i32 1, i32 1, i32 1>
  %314 = bitcast <2 x i64> %309 to <2 x double>
  %315 = fcmp ogt <2 x double> %314, zeroinitializer
  %316 = sext <2 x i1> %315 to <2 x i64>
  %317 = bitcast <2 x i64> %316 to <4 x i32>
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = and <2 x i64> %319, <i64 34359738376, i64 0>
  %321 = xor <2 x i64> %319, <i64 30064771079, i64 30064771079>
  %322 = and <2 x i64> %321, <i64 30064771079, i64 0>
  %323 = or <2 x i64> %322, %320
  %324 = bitcast <2 x i64> %323 to <4 x i32>
  %325 = add <4 x i32> %313, %324
  %326 = ashr <4 x i32> %325, <i32 1, i32 1, i32 1, i32 1>
  %327 = and <4 x i32> %237, <i32 1, i32 1, i32 0, i32 0>
  %328 = icmp eq <4 x i32> %327, zeroinitializer
  %329 = sext <4 x i1> %328 to <4 x i32>
  %330 = and <2 x i64> %316, <i64 -9223372036854775808, i64 -9223372036854775808>
  %331 = or <2 x i64> %330, <i64 4609753056924675352, i64 4609753056924675352>
  %332 = bitcast <2 x i64> %331 to <2 x double>
  %333 = or <2 x i64> %330, <i64 4364452196894661639, i64 4364452196894661639>
  %334 = bitcast <2 x i64> %333 to <2 x double>
  %335 = bitcast <2 x i64> %311 to <2 x double>
  %336 = fadd <2 x double> %314, %332
  %337 = fsub <2 x double> %336, %314
  %338 = fsub <2 x double> %336, %337
  %339 = fsub <2 x double> %314, %338
  %340 = fsub <2 x double> %332, %337
  %341 = fadd <2 x double> %340, %339
  %342 = fadd <2 x double> %334, %335
  %343 = fadd <2 x double> %342, %341
  %344 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = bitcast <2 x double> %336 to <2 x i64>
  %347 = and <2 x i64> %346, %345
  %348 = xor <2 x i64> %345, <i64 -1, i64 -1>
  %349 = and <2 x i64> %309, %348
  %350 = or <2 x i64> %347, %349
  %351 = bitcast <2 x double> %343 to <2 x i64>
  %352 = and <2 x i64> %351, %345
  %353 = and <2 x i64> %311, %348
  %354 = or <2 x i64> %352, %353
  %355 = bitcast <2 x i64> %350 to <2 x double>
  %356 = bitcast <2 x i64> %354 to <2 x double>
  %357 = fadd <2 x double> %355, %356
  %358 = fsub <2 x double> %355, %357
  %359 = fadd <2 x double> %358, %356
  %360 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %361 = fcmp uno <2 x double> %0, zeroinitializer
  %362 = or <2 x i1> %360, %361
  %363 = select <2 x i1> %362, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %357
  br label %364

; <label>:364:                                    ; preds = %37, %100, %10
  %365 = phi <2 x double> [ %363, %100 ], [ %96, %37 ], [ %27, %10 ]
  %366 = phi <2 x double> [ %359, %100 ], [ %99, %37 ], [ %30, %10 ]
  %367 = phi <4 x i32> [ %326, %100 ], [ %50, %37 ], [ %18, %10 ]
  %368 = bitcast <2 x double> %365 to <2 x i64>
  %369 = and <2 x i64> %368, <i64 -134217728, i64 -134217728>
  %370 = bitcast <2 x i64> %369 to <2 x double>
  %371 = fsub <2 x double> %365, %370
  %372 = fmul <2 x double> %365, %365
  %373 = fmul <2 x double> %370, %370
  %374 = bitcast <2 x double> %372 to <2 x i64>
  %375 = xor <2 x i64> %374, <i64 -9223372036854775808, i64 -9223372036854775808>
  %376 = bitcast <2 x i64> %375 to <2 x double>
  %377 = fadd <2 x double> %370, %370
  %378 = fmul <2 x double> %377, %371
  %379 = fmul <2 x double> %371, %371
  %380 = fadd <2 x double> %366, %366
  %381 = fmul <2 x double> %365, %380
  %382 = fadd <2 x double> %373, %376
  %383 = fadd <2 x double> %382, %378
  %384 = fadd <2 x double> %379, %383
  %385 = fadd <2 x double> %381, %384
  %386 = fmul <2 x double> %372, %372
  %387 = fmul <2 x double> %386, %386
  %388 = fmul <2 x double> %372, <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>
  %389 = fadd <2 x double> %388, <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>
  %390 = fmul <2 x double> %372, <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>
  %391 = fadd <2 x double> %390, <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>
  %392 = fmul <2 x double> %372, <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>
  %393 = fadd <2 x double> %392, <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>
  %394 = fmul <2 x double> %386, %391
  %395 = fadd <2 x double> %393, %394
  %396 = fmul <2 x double> %387, %389
  %397 = fadd <2 x double> %396, %395
  %398 = fmul <2 x double> %372, %397
  %399 = fadd <2 x double> %398, <double 0x3F811111111110B9, double 0x3F811111111110B9>
  %400 = fmul <2 x double> %372, %399
  %401 = fadd <2 x double> %400, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %402 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %401
  %403 = fadd <2 x double> %400, %402
  %404 = bitcast <2 x double> %401 to <2 x i64>
  %405 = and <2 x i64> %404, <i64 -134217728, i64 -134217728>
  %406 = bitcast <2 x i64> %405 to <2 x double>
  %407 = fsub <2 x double> %401, %406
  %408 = and <2 x i64> %374, <i64 -134217728, i64 -134217728>
  %409 = bitcast <2 x i64> %408 to <2 x double>
  %410 = fsub <2 x double> %372, %409
  %411 = fmul <2 x double> %372, %401
  %412 = fmul <2 x double> %409, %406
  %413 = bitcast <2 x double> %411 to <2 x i64>
  %414 = xor <2 x i64> %413, <i64 -9223372036854775808, i64 -9223372036854775808>
  %415 = bitcast <2 x i64> %414 to <2 x double>
  %416 = fmul <2 x double> %407, %409
  %417 = fmul <2 x double> %410, %406
  %418 = fmul <2 x double> %410, %407
  %419 = fmul <2 x double> %385, %401
  %420 = fmul <2 x double> %372, %403
  %421 = fadd <2 x double> %412, %415
  %422 = fadd <2 x double> %416, %421
  %423 = fadd <2 x double> %417, %422
  %424 = fadd <2 x double> %418, %423
  %425 = fadd <2 x double> %419, %424
  %426 = fadd <2 x double> %420, %425
  %427 = fadd <2 x double> %411, <double 1.000000e+00, double 1.000000e+00>
  %428 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %427
  %429 = fadd <2 x double> %411, %428
  %430 = fadd <2 x double> %429, %426
  %431 = bitcast <2 x double> %427 to <2 x i64>
  %432 = and <2 x i64> %431, <i64 -134217728, i64 -134217728>
  %433 = bitcast <2 x i64> %432 to <2 x double>
  %434 = fsub <2 x double> %427, %433
  %435 = fmul <2 x double> %366, %433
  %436 = fmul <2 x double> %430, %370
  %437 = fmul <2 x double> %371, %434
  %438 = fmul <2 x double> %434, %370
  %439 = fmul <2 x double> %371, %433
  %440 = fmul <2 x double> %370, %433
  %441 = fadd <2 x double> %435, %436
  %442 = fadd <2 x double> %437, %441
  %443 = fadd <2 x double> %438, %442
  %444 = fadd <2 x double> %439, %443
  %445 = fadd <2 x double> %440, %444
  %446 = and <4 x i32> %367, <i32 2, i32 2, i32 0, i32 0>
  %447 = icmp eq <4 x i32> %446, zeroinitializer
  %448 = sext <4 x i1> %447 to <4 x i32>
  %449 = shufflevector <4 x i32> %448, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %450 = bitcast <4 x i32> %449 to <2 x i64>
  %451 = and <2 x i64> %450, <i64 -9223372036854775808, i64 -9223372036854775808>
  %452 = bitcast <2 x double> %445 to <2 x i64>
  %453 = xor <2 x i64> %451, %452
  %454 = bitcast <2 x i64> %453 to <2 x double>
  ret <2 x double> %454
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u35sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.500000e+01, double 1.500000e+01>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %21, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %15 = sitofp <2 x i32> %14 to <2 x double>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %15) #6
  %17 = fmul <2 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <2 x double> %17, %1
  %19 = fmul <2 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %20 = fadd <2 x double> %19, %18
  br label %273

; <label>:21:                                     ; preds = %2
  %22 = fcmp olt <2 x double> %5, <double 1.000000e+14, double 1.000000e+14>
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %24) #6
  %26 = icmp eq i32 %25, 65535
  br i1 %26, label %27, label %54, !prof !2

; <label>:27:                                     ; preds = %21
  %28 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %29 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %28) #6
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %31 = sitofp <2 x i32> %30 to <2 x double>
  %32 = fmul <2 x double> %31, <double 0x4170000000000000, double 0x4170000000000000>
  %33 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %34 = fsub <2 x double> %33, %32
  %35 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %34) #6
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %37) #6
  %39 = fmul <2 x double> %32, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %40 = fadd <2 x double> %39, %1
  %41 = fmul <2 x double> %37, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %42 = fadd <2 x double> %41, %40
  %43 = fmul <2 x double> %32, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %44 = fadd <2 x double> %43, %42
  %45 = fmul <2 x double> %37, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %46 = fadd <2 x double> %45, %44
  %47 = fmul <2 x double> %32, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %48 = fadd <2 x double> %47, %46
  %49 = fmul <2 x double> %37, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %50 = fadd <2 x double> %49, %48
  %51 = fadd <2 x double> %32, %37
  %52 = fmul <2 x double> %51, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %53 = fadd <2 x double> %52, %50
  br label %273

; <label>:54:                                     ; preds = %21
  %55 = bitcast <2 x double> %1 to <4 x i32>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %57 = lshr <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = and <4 x i32> %57, <i32 2047, i32 2047, i32 0, i32 0>
  %59 = add nsw <4 x i32> %58, <i32 -1078, i32 -1078, i32 0, i32 0>
  %60 = icmp sgt <4 x i32> %59, <i32 645, i32 645, i32 0, i32 0>
  %61 = select <4 x i1> %60, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %63 = and <4 x i32> %62, <i32 0, i32 -1, i32 0, i32 -1>
  %64 = shl <4 x i32> %63, <i32 20, i32 20, i32 20, i32 20>
  %65 = add <4 x i32> %64, %55
  %66 = bitcast <4 x i32> %65 to <2 x double>
  %67 = ashr <4 x i32> %59, <i32 31, i32 31, i32 31, i32 31>
  %68 = xor <4 x i32> %67, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %69 = and <4 x i32> %68, %59
  %70 = shl <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %71 = extractelement <4 x i32> %70, i32 1
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %72
  %74 = load double, double* %73, align 8, !tbaa !3, !noalias !19
  %75 = extractelement <4 x i32> %70, i32 0
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %76
  %78 = load double, double* %77, align 8, !tbaa !3, !noalias !19
  %79 = insertelement <2 x double> undef, double %78, i32 0
  %80 = insertelement <2 x double> %79, double %74, i32 1
  %81 = bitcast <4 x i32> %65 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -134217728, i64 -134217728>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fsub <2 x double> %66, %83
  %85 = bitcast <2 x double> %80 to <2 x i64>
  %86 = and <2 x i64> %85, <i64 -134217728, i64 -134217728>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = fsub <2 x double> %80, %87
  %89 = fmul <2 x double> %80, %66
  %90 = fmul <2 x double> %83, %87
  %91 = bitcast <2 x double> %89 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fmul <2 x double> %84, %87
  %95 = fmul <2 x double> %88, %83
  %96 = fmul <2 x double> %84, %88
  %97 = fadd <2 x double> %90, %93
  %98 = fadd <2 x double> %94, %97
  %99 = fadd <2 x double> %95, %98
  %100 = fadd <2 x double> %96, %99
  %101 = and <2 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808>
  %102 = or <2 x i64> %101, <i64 4841369599423283200, i64 4841369599423283200>
  %103 = bitcast <2 x i64> %102 to <2 x double>
  %104 = fmul <2 x double> %89, <double 4.000000e+00, double 4.000000e+00>
  %105 = bitcast <2 x double> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 9223372036854775807, i64 9223372036854775807>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fcmp ogt <2 x double> %107, <double 0x4330000000000000, double 0x4330000000000000>
  %109 = fadd <2 x double> %104, %103
  %110 = fsub <2 x double> %109, %103
  %111 = bitcast <2 x double> %110 to <2 x i64>
  %112 = or <2 x i64> %101, %111
  %113 = select <2 x i1> %108, <2 x i64> %105, <2 x i64> %112
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = and <2 x i64> %91, <i64 9223372036854775807, i64 9223372036854775807>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = fcmp ogt <2 x double> %116, <double 0x4330000000000000, double 0x4330000000000000>
  %118 = fadd <2 x double> %89, %103
  %119 = fsub <2 x double> %118, %103
  %120 = bitcast <2 x double> %119 to <2 x i64>
  %121 = or <2 x i64> %101, %120
  %122 = select <2 x i1> %117, <2 x i64> %91, <2 x i64> %121
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fmul <2 x double> %114, <double -2.500000e-01, double -2.500000e-01>
  %125 = fadd <2 x double> %89, %124
  %126 = fmul <2 x double> %123, <double -4.000000e+00, double -4.000000e+00>
  %127 = fadd <2 x double> %126, %114
  %128 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %127) #6
  %129 = fadd <2 x double> %100, %125
  %130 = fsub <2 x double> %125, %129
  %131 = fadd <2 x double> %100, %130
  %132 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %72
  %133 = load double, double* %132, align 8, !tbaa !3, !noalias !19
  %134 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %76
  %135 = load double, double* %134, align 8, !tbaa !3, !noalias !19
  %136 = insertelement <2 x double> undef, double %135, i32 0
  %137 = insertelement <2 x double> %136, double %133, i32 1
  %138 = bitcast <2 x double> %137 to <2 x i64>
  %139 = and <2 x i64> %138, <i64 -134217728, i64 -134217728>
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = fsub <2 x double> %137, %140
  %142 = fmul <2 x double> %137, %66
  %143 = fmul <2 x double> %83, %140
  %144 = bitcast <2 x double> %142 to <2 x i64>
  %145 = xor <2 x i64> %144, <i64 -9223372036854775808, i64 -9223372036854775808>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fmul <2 x double> %84, %140
  %148 = fmul <2 x double> %141, %83
  %149 = fmul <2 x double> %84, %141
  %150 = fadd <2 x double> %143, %146
  %151 = fadd <2 x double> %147, %150
  %152 = fadd <2 x double> %148, %151
  %153 = fadd <2 x double> %149, %152
  %154 = fadd <2 x double> %142, %129
  %155 = fsub <2 x double> %154, %129
  %156 = fsub <2 x double> %154, %155
  %157 = fsub <2 x double> %129, %156
  %158 = fsub <2 x double> %142, %155
  %159 = fadd <2 x double> %158, %157
  %160 = fadd <2 x double> %153, %131
  %161 = fadd <2 x double> %160, %159
  %162 = bitcast <2 x double> %154 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -9223372036854775808, i64 -9223372036854775808>
  %164 = or <2 x i64> %163, <i64 4841369599423283200, i64 4841369599423283200>
  %165 = bitcast <2 x i64> %164 to <2 x double>
  %166 = fmul <2 x double> %154, <double 4.000000e+00, double 4.000000e+00>
  %167 = bitcast <2 x double> %166 to <2 x i64>
  %168 = and <2 x i64> %167, <i64 9223372036854775807, i64 9223372036854775807>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = fcmp ogt <2 x double> %169, <double 0x4330000000000000, double 0x4330000000000000>
  %171 = fadd <2 x double> %166, %165
  %172 = fsub <2 x double> %171, %165
  %173 = bitcast <2 x double> %172 to <2 x i64>
  %174 = or <2 x i64> %163, %173
  %175 = select <2 x i1> %170, <2 x i64> %167, <2 x i64> %174
  %176 = bitcast <2 x i64> %175 to <2 x double>
  %177 = and <2 x i64> %162, <i64 9223372036854775807, i64 9223372036854775807>
  %178 = bitcast <2 x i64> %177 to <2 x double>
  %179 = fcmp ogt <2 x double> %178, <double 0x4330000000000000, double 0x4330000000000000>
  %180 = fadd <2 x double> %154, %165
  %181 = fsub <2 x double> %180, %165
  %182 = bitcast <2 x double> %181 to <2 x i64>
  %183 = or <2 x i64> %163, %182
  %184 = select <2 x i1> %179, <2 x i64> %162, <2 x i64> %183
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fmul <2 x double> %176, <double -2.500000e-01, double -2.500000e-01>
  %187 = fadd <2 x double> %154, %186
  %188 = fmul <2 x double> %185, <double -4.000000e+00, double -4.000000e+00>
  %189 = fadd <2 x double> %188, %176
  %190 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %189) #6
  %191 = add <4 x i32> %190, %128
  %192 = fadd <2 x double> %161, %187
  %193 = fsub <2 x double> %187, %192
  %194 = fadd <2 x double> %161, %193
  %195 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %72
  %196 = load double, double* %195, align 8, !tbaa !3, !noalias !19
  %197 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %76
  %198 = load double, double* %197, align 8, !tbaa !3, !noalias !19
  %199 = insertelement <2 x double> undef, double %198, i32 0
  %200 = insertelement <2 x double> %199, double %196, i32 1
  %201 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %72
  %202 = load double, double* %201, align 8, !tbaa !3, !noalias !19
  %203 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %76
  %204 = load double, double* %203, align 8, !tbaa !3, !noalias !19
  %205 = insertelement <2 x double> undef, double %204, i32 0
  %206 = insertelement <2 x double> %205, double %202, i32 1
  %207 = bitcast <2 x double> %200 to <2 x i64>
  %208 = and <2 x i64> %207, <i64 -134217728, i64 -134217728>
  %209 = bitcast <2 x i64> %208 to <2 x double>
  %210 = fsub <2 x double> %200, %209
  %211 = fmul <2 x double> %200, %66
  %212 = fmul <2 x double> %83, %209
  %213 = bitcast <2 x double> %211 to <2 x i64>
  %214 = xor <2 x i64> %213, <i64 -9223372036854775808, i64 -9223372036854775808>
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = fmul <2 x double> %210, %83
  %217 = fmul <2 x double> %84, %209
  %218 = fmul <2 x double> %84, %210
  %219 = fmul <2 x double> %206, %66
  %220 = fadd <2 x double> %212, %215
  %221 = fadd <2 x double> %216, %220
  %222 = fadd <2 x double> %217, %221
  %223 = fadd <2 x double> %218, %222
  %224 = fadd <2 x double> %219, %223
  %225 = fadd <2 x double> %211, %192
  %226 = fsub <2 x double> %225, %192
  %227 = fsub <2 x double> %225, %226
  %228 = fsub <2 x double> %192, %227
  %229 = fsub <2 x double> %211, %226
  %230 = fadd <2 x double> %229, %228
  %231 = fadd <2 x double> %224, %194
  %232 = fadd <2 x double> %231, %230
  %233 = fadd <2 x double> %225, %232
  %234 = fsub <2 x double> %225, %233
  %235 = fadd <2 x double> %232, %234
  %236 = bitcast <2 x double> %233 to <2 x i64>
  %237 = and <2 x i64> %236, <i64 -134217728, i64 -134217728>
  %238 = bitcast <2 x i64> %237 to <2 x double>
  %239 = fsub <2 x double> %233, %238
  %240 = fmul <2 x double> %233, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %241 = fmul <2 x double> %238, <double 0x401921FB50000000, double 0x401921FB50000000>
  %242 = bitcast <2 x double> %240 to <2 x i64>
  %243 = xor <2 x i64> %242, <i64 -9223372036854775808, i64 -9223372036854775808>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = fmul <2 x double> %239, <double 0x401921FB50000000, double 0x401921FB50000000>
  %246 = fmul <2 x double> %238, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %247 = fmul <2 x double> %239, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %248 = fmul <2 x double> %233, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %249 = fmul <2 x double> %235, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %250 = fadd <2 x double> %241, %244
  %251 = fadd <2 x double> %245, %250
  %252 = fadd <2 x double> %246, %251
  %253 = fadd <2 x double> %247, %252
  %254 = fadd <2 x double> %248, %253
  %255 = fadd <2 x double> %249, %254
  %256 = and <2 x i64> %81, <i64 9223372036854775807, i64 9223372036854775807>
  %257 = bitcast <2 x i64> %256 to <2 x double>
  %258 = fcmp olt <2 x double> %257, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %259 = sext <2 x i1> %258 to <2 x i64>
  %260 = and <2 x i64> %259, %81
  %261 = xor <2 x i64> %259, <i64 -1, i64 -1>
  %262 = and <2 x i64> %242, %261
  %263 = or <2 x i64> %262, %260
  %264 = bitcast <2 x double> %255 to <2 x i64>
  %265 = and <2 x i64> %264, %261
  %266 = bitcast <2 x i64> %263 to <2 x double>
  %267 = bitcast <2 x i64> %265 to <2 x double>
  %268 = fadd <2 x double> %266, %267
  %269 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %270 = fcmp uno <2 x double> %1, zeroinitializer
  %271 = or <2 x i1> %269, %270
  %272 = select <2 x i1> %271, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %268
  br label %273

; <label>:273:                                    ; preds = %27, %54, %11
  %274 = phi <4 x i32> [ %16, %11 ], [ %38, %27 ], [ %191, %54 ]
  %275 = phi <2 x double> [ %20, %11 ], [ %53, %27 ], [ %272, %54 ]
  %276 = fmul <2 x double> %275, %275
  %277 = fmul <2 x double> %276, <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>
  %278 = fadd <2 x double> %277, <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>
  %279 = fmul <2 x double> %276, %278
  %280 = fadd <2 x double> %279, <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>
  %281 = fmul <2 x double> %276, %280
  %282 = fadd <2 x double> %281, <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>
  %283 = fmul <2 x double> %276, %282
  %284 = fadd <2 x double> %283, <double 0x3F8111111110F135, double 0x3F8111111110F135>
  %285 = fmul <2 x double> %276, %284
  %286 = fadd <2 x double> %285, <double 0xBFC5555555555542, double 0xBFC5555555555542>
  %287 = fmul <2 x double> %276, %286
  %288 = fmul <2 x double> %275, %287
  %289 = fadd <2 x double> %275, %288
  %290 = bitcast <2 x double> %1 to <4 x i32>
  %291 = icmp eq <4 x i32> %290, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %292 = sext <4 x i1> %291 to <4 x i32>
  %293 = shufflevector <4 x i32> %292, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %294 = and <4 x i32> %293, %292
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = and <2 x i64> %295, <i64 -9223372036854775808, i64 -9223372036854775808>
  %297 = xor <2 x i64> %295, <i64 -1, i64 -1>
  %298 = bitcast <2 x double> %289 to <2 x i64>
  %299 = and <2 x i64> %298, %297
  %300 = or <2 x i64> %299, %296
  %301 = fmul <2 x double> %276, <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>
  %302 = fadd <2 x double> %301, <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>
  %303 = fmul <2 x double> %276, %302
  %304 = fadd <2 x double> %303, <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>
  %305 = fmul <2 x double> %276, %304
  %306 = fadd <2 x double> %305, <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>
  %307 = fmul <2 x double> %276, %306
  %308 = fadd <2 x double> %307, <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>
  %309 = fmul <2 x double> %276, %308
  %310 = fadd <2 x double> %309, <double 0x3FA5555555555545, double 0x3FA5555555555545>
  %311 = fmul <2 x double> %276, %310
  %312 = fadd <2 x double> %311, <double -5.000000e-01, double -5.000000e-01>
  %313 = fmul <2 x double> %276, %312
  %314 = fadd <2 x double> %313, <double 1.000000e+00, double 1.000000e+00>
  %315 = and <4 x i32> %274, <i32 1, i32 1, i32 0, i32 0>
  %316 = icmp eq <4 x i32> %315, zeroinitializer
  %317 = sext <4 x i1> %316 to <4 x i32>
  %318 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = and <2 x i64> %300, %319
  %321 = xor <2 x i64> %319, <i64 -1, i64 -1>
  %322 = bitcast <2 x double> %314 to <2 x i64>
  %323 = and <2 x i64> %322, %321
  %324 = or <2 x i64> %320, %323
  %325 = and <2 x i64> %322, %319
  %326 = and <2 x i64> %300, %321
  %327 = or <2 x i64> %326, %325
  %328 = and <4 x i32> %274, <i32 2, i32 2, i32 0, i32 0>
  %329 = icmp eq <4 x i32> %328, <i32 2, i32 2, i32 0, i32 0>
  %330 = sext <4 x i1> %329 to <4 x i32>
  %331 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %332 = bitcast <4 x i32> %331 to <2 x i64>
  %333 = and <2 x i64> %332, <i64 -9223372036854775808, i64 -9223372036854775808>
  %334 = xor <2 x i64> %324, %333
  %335 = add <4 x i32> %274, <i32 1, i32 1, i32 0, i32 0>
  %336 = and <4 x i32> %335, <i32 2, i32 2, i32 0, i32 0>
  %337 = icmp eq <4 x i32> %336, <i32 2, i32 2, i32 0, i32 0>
  %338 = sext <4 x i1> %337 to <4 x i32>
  %339 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = and <2 x i64> %340, <i64 -9223372036854775808, i64 -9223372036854775808>
  %342 = xor <2 x i64> %327, %341
  %343 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %334, <2 x i64>* %343, align 16
  %344 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %345 = bitcast <2 x double>* %344 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %345, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u10sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.500000e+01, double 1.500000e+01>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %25, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %15 = sitofp <2 x i32> %14 to <2 x double>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %15) #6
  %17 = fmul <2 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <2 x double> %17, %1
  %19 = fmul <2 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %20 = fadd <2 x double> %19, %18
  %21 = fsub <2 x double> %18, %20
  %22 = fadd <2 x double> %19, %21
  %23 = bitcast <2 x double> %20 to <2 x i64>
  %24 = bitcast <2 x double> %22 to <2 x i64>
  br label %307

; <label>:25:                                     ; preds = %2
  %26 = fcmp olt <2 x double> %5, <double 1.000000e+14, double 1.000000e+14>
  %27 = sext <2 x i1> %26 to <2 x i64>
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %28) #6
  %30 = icmp eq i32 %29, 65535
  br i1 %30, label %31, label %89, !prof !2

; <label>:31:                                     ; preds = %25
  %32 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %33 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %32) #6
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %35 = sitofp <2 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %35, <double 0x4170000000000000, double 0x4170000000000000>
  %37 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %38 = fsub <2 x double> %37, %36
  %39 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %38) #6
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %41 = sitofp <2 x i32> %40 to <2 x double>
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %41) #6
  %43 = fmul <2 x double> %36, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %44 = fadd <2 x double> %43, %1
  %45 = fmul <2 x double> %41, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %46 = fadd <2 x double> %45, %44
  %47 = fsub <2 x double> %44, %46
  %48 = fadd <2 x double> %45, %47
  %49 = fmul <2 x double> %36, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %50 = fadd <2 x double> %49, %46
  %51 = fsub <2 x double> %50, %46
  %52 = fsub <2 x double> %50, %51
  %53 = fsub <2 x double> %46, %52
  %54 = fsub <2 x double> %49, %51
  %55 = fadd <2 x double> %54, %53
  %56 = fadd <2 x double> %48, %55
  %57 = fmul <2 x double> %41, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %58 = fadd <2 x double> %57, %50
  %59 = fsub <2 x double> %58, %50
  %60 = fsub <2 x double> %58, %59
  %61 = fsub <2 x double> %50, %60
  %62 = fsub <2 x double> %57, %59
  %63 = fadd <2 x double> %62, %61
  %64 = fadd <2 x double> %63, %56
  %65 = fmul <2 x double> %36, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %66 = fadd <2 x double> %65, %58
  %67 = fsub <2 x double> %66, %58
  %68 = fsub <2 x double> %66, %67
  %69 = fsub <2 x double> %58, %68
  %70 = fsub <2 x double> %65, %67
  %71 = fadd <2 x double> %70, %69
  %72 = fadd <2 x double> %71, %64
  %73 = fmul <2 x double> %41, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %74 = fadd <2 x double> %73, %66
  %75 = fsub <2 x double> %74, %66
  %76 = fsub <2 x double> %74, %75
  %77 = fsub <2 x double> %66, %76
  %78 = fsub <2 x double> %73, %75
  %79 = fadd <2 x double> %78, %77
  %80 = fadd <2 x double> %79, %72
  %81 = fadd <2 x double> %36, %41
  %82 = fmul <2 x double> %81, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %83 = fadd <2 x double> %82, %74
  %84 = fsub <2 x double> %74, %83
  %85 = fadd <2 x double> %82, %84
  %86 = fadd <2 x double> %85, %80
  %87 = bitcast <2 x double> %83 to <2 x i64>
  %88 = bitcast <2 x double> %86 to <2 x i64>
  br label %307

; <label>:89:                                     ; preds = %25
  %90 = bitcast <2 x double> %1 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %92 = lshr <4 x i32> %91, <i32 20, i32 20, i32 20, i32 20>
  %93 = and <4 x i32> %92, <i32 2047, i32 2047, i32 0, i32 0>
  %94 = add nsw <4 x i32> %93, <i32 -1078, i32 -1078, i32 0, i32 0>
  %95 = icmp sgt <4 x i32> %94, <i32 645, i32 645, i32 0, i32 0>
  %96 = select <4 x i1> %95, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %98 = and <4 x i32> %97, <i32 0, i32 -1, i32 0, i32 -1>
  %99 = shl <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = add <4 x i32> %99, %90
  %101 = bitcast <4 x i32> %100 to <2 x double>
  %102 = ashr <4 x i32> %94, <i32 31, i32 31, i32 31, i32 31>
  %103 = xor <4 x i32> %102, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %104 = and <4 x i32> %103, %94
  %105 = shl <4 x i32> %104, <i32 2, i32 2, i32 2, i32 2>
  %106 = extractelement <4 x i32> %105, i32 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %107
  %109 = load double, double* %108, align 8, !tbaa !3, !noalias !22
  %110 = extractelement <4 x i32> %105, i32 0
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %111
  %113 = load double, double* %112, align 8, !tbaa !3, !noalias !22
  %114 = insertelement <2 x double> undef, double %113, i32 0
  %115 = insertelement <2 x double> %114, double %109, i32 1
  %116 = bitcast <4 x i32> %100 to <2 x i64>
  %117 = and <2 x i64> %116, <i64 -134217728, i64 -134217728>
  %118 = bitcast <2 x i64> %117 to <2 x double>
  %119 = fsub <2 x double> %101, %118
  %120 = bitcast <2 x double> %115 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -134217728, i64 -134217728>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fsub <2 x double> %115, %122
  %124 = fmul <2 x double> %115, %101
  %125 = fmul <2 x double> %118, %122
  %126 = bitcast <2 x double> %124 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -9223372036854775808, i64 -9223372036854775808>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fmul <2 x double> %119, %122
  %130 = fmul <2 x double> %123, %118
  %131 = fmul <2 x double> %119, %123
  %132 = fadd <2 x double> %125, %128
  %133 = fadd <2 x double> %129, %132
  %134 = fadd <2 x double> %130, %133
  %135 = fadd <2 x double> %131, %134
  %136 = and <2 x i64> %126, <i64 -9223372036854775808, i64 -9223372036854775808>
  %137 = or <2 x i64> %136, <i64 4841369599423283200, i64 4841369599423283200>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fmul <2 x double> %124, <double 4.000000e+00, double 4.000000e+00>
  %140 = bitcast <2 x double> %139 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 9223372036854775807, i64 9223372036854775807>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fcmp ogt <2 x double> %142, <double 0x4330000000000000, double 0x4330000000000000>
  %144 = fadd <2 x double> %139, %138
  %145 = fsub <2 x double> %144, %138
  %146 = bitcast <2 x double> %145 to <2 x i64>
  %147 = or <2 x i64> %136, %146
  %148 = select <2 x i1> %143, <2 x i64> %140, <2 x i64> %147
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = and <2 x i64> %126, <i64 9223372036854775807, i64 9223372036854775807>
  %151 = bitcast <2 x i64> %150 to <2 x double>
  %152 = fcmp ogt <2 x double> %151, <double 0x4330000000000000, double 0x4330000000000000>
  %153 = fadd <2 x double> %124, %138
  %154 = fsub <2 x double> %153, %138
  %155 = bitcast <2 x double> %154 to <2 x i64>
  %156 = or <2 x i64> %136, %155
  %157 = select <2 x i1> %152, <2 x i64> %126, <2 x i64> %156
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %149, <double -2.500000e-01, double -2.500000e-01>
  %160 = fadd <2 x double> %124, %159
  %161 = fmul <2 x double> %158, <double -4.000000e+00, double -4.000000e+00>
  %162 = fadd <2 x double> %161, %149
  %163 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %162) #6
  %164 = fadd <2 x double> %135, %160
  %165 = fsub <2 x double> %160, %164
  %166 = fadd <2 x double> %135, %165
  %167 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %107
  %168 = load double, double* %167, align 8, !tbaa !3, !noalias !22
  %169 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %111
  %170 = load double, double* %169, align 8, !tbaa !3, !noalias !22
  %171 = insertelement <2 x double> undef, double %170, i32 0
  %172 = insertelement <2 x double> %171, double %168, i32 1
  %173 = bitcast <2 x double> %172 to <2 x i64>
  %174 = and <2 x i64> %173, <i64 -134217728, i64 -134217728>
  %175 = bitcast <2 x i64> %174 to <2 x double>
  %176 = fsub <2 x double> %172, %175
  %177 = fmul <2 x double> %172, %101
  %178 = fmul <2 x double> %118, %175
  %179 = bitcast <2 x double> %177 to <2 x i64>
  %180 = xor <2 x i64> %179, <i64 -9223372036854775808, i64 -9223372036854775808>
  %181 = bitcast <2 x i64> %180 to <2 x double>
  %182 = fmul <2 x double> %119, %175
  %183 = fmul <2 x double> %176, %118
  %184 = fmul <2 x double> %119, %176
  %185 = fadd <2 x double> %178, %181
  %186 = fadd <2 x double> %182, %185
  %187 = fadd <2 x double> %183, %186
  %188 = fadd <2 x double> %184, %187
  %189 = fadd <2 x double> %177, %164
  %190 = fsub <2 x double> %189, %164
  %191 = fsub <2 x double> %189, %190
  %192 = fsub <2 x double> %164, %191
  %193 = fsub <2 x double> %177, %190
  %194 = fadd <2 x double> %193, %192
  %195 = fadd <2 x double> %188, %166
  %196 = fadd <2 x double> %195, %194
  %197 = bitcast <2 x double> %189 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -9223372036854775808, i64 -9223372036854775808>
  %199 = or <2 x i64> %198, <i64 4841369599423283200, i64 4841369599423283200>
  %200 = bitcast <2 x i64> %199 to <2 x double>
  %201 = fmul <2 x double> %189, <double 4.000000e+00, double 4.000000e+00>
  %202 = bitcast <2 x double> %201 to <2 x i64>
  %203 = and <2 x i64> %202, <i64 9223372036854775807, i64 9223372036854775807>
  %204 = bitcast <2 x i64> %203 to <2 x double>
  %205 = fcmp ogt <2 x double> %204, <double 0x4330000000000000, double 0x4330000000000000>
  %206 = fadd <2 x double> %201, %200
  %207 = fsub <2 x double> %206, %200
  %208 = bitcast <2 x double> %207 to <2 x i64>
  %209 = or <2 x i64> %198, %208
  %210 = select <2 x i1> %205, <2 x i64> %202, <2 x i64> %209
  %211 = bitcast <2 x i64> %210 to <2 x double>
  %212 = and <2 x i64> %197, <i64 9223372036854775807, i64 9223372036854775807>
  %213 = bitcast <2 x i64> %212 to <2 x double>
  %214 = fcmp ogt <2 x double> %213, <double 0x4330000000000000, double 0x4330000000000000>
  %215 = fadd <2 x double> %189, %200
  %216 = fsub <2 x double> %215, %200
  %217 = bitcast <2 x double> %216 to <2 x i64>
  %218 = or <2 x i64> %198, %217
  %219 = select <2 x i1> %214, <2 x i64> %197, <2 x i64> %218
  %220 = bitcast <2 x i64> %219 to <2 x double>
  %221 = fmul <2 x double> %211, <double -2.500000e-01, double -2.500000e-01>
  %222 = fadd <2 x double> %189, %221
  %223 = fmul <2 x double> %220, <double -4.000000e+00, double -4.000000e+00>
  %224 = fadd <2 x double> %223, %211
  %225 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %224) #6
  %226 = add <4 x i32> %225, %163
  %227 = fadd <2 x double> %196, %222
  %228 = fsub <2 x double> %222, %227
  %229 = fadd <2 x double> %196, %228
  %230 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %107
  %231 = load double, double* %230, align 8, !tbaa !3, !noalias !22
  %232 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %111
  %233 = load double, double* %232, align 8, !tbaa !3, !noalias !22
  %234 = insertelement <2 x double> undef, double %233, i32 0
  %235 = insertelement <2 x double> %234, double %231, i32 1
  %236 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %107
  %237 = load double, double* %236, align 8, !tbaa !3, !noalias !22
  %238 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %111
  %239 = load double, double* %238, align 8, !tbaa !3, !noalias !22
  %240 = insertelement <2 x double> undef, double %239, i32 0
  %241 = insertelement <2 x double> %240, double %237, i32 1
  %242 = bitcast <2 x double> %235 to <2 x i64>
  %243 = and <2 x i64> %242, <i64 -134217728, i64 -134217728>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = fsub <2 x double> %235, %244
  %246 = fmul <2 x double> %235, %101
  %247 = fmul <2 x double> %118, %244
  %248 = bitcast <2 x double> %246 to <2 x i64>
  %249 = xor <2 x i64> %248, <i64 -9223372036854775808, i64 -9223372036854775808>
  %250 = bitcast <2 x i64> %249 to <2 x double>
  %251 = fmul <2 x double> %245, %118
  %252 = fmul <2 x double> %119, %244
  %253 = fmul <2 x double> %119, %245
  %254 = fmul <2 x double> %241, %101
  %255 = fadd <2 x double> %247, %250
  %256 = fadd <2 x double> %251, %255
  %257 = fadd <2 x double> %252, %256
  %258 = fadd <2 x double> %253, %257
  %259 = fadd <2 x double> %254, %258
  %260 = fadd <2 x double> %246, %227
  %261 = fsub <2 x double> %260, %227
  %262 = fsub <2 x double> %260, %261
  %263 = fsub <2 x double> %227, %262
  %264 = fsub <2 x double> %246, %261
  %265 = fadd <2 x double> %264, %263
  %266 = fadd <2 x double> %259, %229
  %267 = fadd <2 x double> %266, %265
  %268 = fadd <2 x double> %260, %267
  %269 = fsub <2 x double> %260, %268
  %270 = fadd <2 x double> %267, %269
  %271 = bitcast <2 x double> %268 to <2 x i64>
  %272 = and <2 x i64> %271, <i64 -134217728, i64 -134217728>
  %273 = bitcast <2 x i64> %272 to <2 x double>
  %274 = fsub <2 x double> %268, %273
  %275 = fmul <2 x double> %268, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %276 = fmul <2 x double> %273, <double 0x401921FB50000000, double 0x401921FB50000000>
  %277 = bitcast <2 x double> %275 to <2 x i64>
  %278 = xor <2 x i64> %277, <i64 -9223372036854775808, i64 -9223372036854775808>
  %279 = bitcast <2 x i64> %278 to <2 x double>
  %280 = fmul <2 x double> %274, <double 0x401921FB50000000, double 0x401921FB50000000>
  %281 = fmul <2 x double> %273, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %282 = fmul <2 x double> %274, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %283 = fmul <2 x double> %268, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %284 = fmul <2 x double> %270, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %285 = fadd <2 x double> %276, %279
  %286 = fadd <2 x double> %280, %285
  %287 = fadd <2 x double> %281, %286
  %288 = fadd <2 x double> %282, %287
  %289 = fadd <2 x double> %283, %288
  %290 = fadd <2 x double> %284, %289
  %291 = and <2 x i64> %116, <i64 9223372036854775807, i64 9223372036854775807>
  %292 = bitcast <2 x i64> %291 to <2 x double>
  %293 = fcmp olt <2 x double> %292, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %294 = sext <2 x i1> %293 to <2 x i64>
  %295 = and <2 x i64> %294, %116
  %296 = xor <2 x i64> %294, <i64 -1, i64 -1>
  %297 = and <2 x i64> %277, %296
  %298 = bitcast <2 x double> %290 to <2 x i64>
  %299 = and <2 x i64> %298, %296
  %300 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %301 = fcmp uno <2 x double> %1, zeroinitializer
  %302 = or <2 x i1> %300, %301
  %303 = sext <2 x i1> %302 to <2 x i64>
  %304 = or <2 x i64> %295, %303
  %305 = or <2 x i64> %304, %297
  %306 = or <2 x i64> %299, %303
  br label %307

; <label>:307:                                    ; preds = %31, %89, %11
  %308 = phi <2 x i64> [ %305, %89 ], [ %87, %31 ], [ %23, %11 ]
  %309 = phi <2 x i64> [ %306, %89 ], [ %88, %31 ], [ %24, %11 ]
  %310 = phi <4 x i32> [ %226, %89 ], [ %42, %31 ], [ %16, %11 ]
  %311 = bitcast <2 x i64> %308 to <2 x double>
  %312 = bitcast <2 x i64> %309 to <2 x double>
  %313 = and <2 x i64> %308, <i64 -134217728, i64 -134217728>
  %314 = bitcast <2 x i64> %313 to <2 x double>
  %315 = fsub <2 x double> %311, %314
  %316 = fmul <2 x double> %314, %312
  %317 = fmul <2 x double> %315, %315
  %318 = fmul <2 x double> %315, %314
  %319 = fadd <2 x double> %318, %318
  %320 = fmul <2 x double> %314, %314
  %321 = fadd <2 x double> %316, %316
  %322 = fadd <2 x double> %321, %317
  %323 = fadd <2 x double> %322, %319
  %324 = fadd <2 x double> %320, %323
  %325 = bitcast <2 x double> %324 to <2 x i64>
  %326 = fmul <2 x double> %324, <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>
  %327 = fadd <2 x double> %326, <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>
  %328 = fmul <2 x double> %324, %327
  %329 = fadd <2 x double> %328, <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>
  %330 = fmul <2 x double> %324, %329
  %331 = fadd <2 x double> %330, <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>
  %332 = fmul <2 x double> %324, %331
  %333 = fadd <2 x double> %332, <double 0x3F8111111110F135, double 0x3F8111111110F135>
  %334 = fmul <2 x double> %324, %333
  %335 = fadd <2 x double> %334, <double 0xBFC5555555555542, double 0xBFC5555555555542>
  %336 = fmul <2 x double> %324, %311
  %337 = fmul <2 x double> %336, %335
  %338 = fadd <2 x double> %337, %311
  %339 = fsub <2 x double> %311, %338
  %340 = fadd <2 x double> %337, %339
  %341 = fadd <2 x double> %340, %312
  %342 = fadd <2 x double> %338, %341
  %343 = bitcast <2 x double> %1 to <4 x i32>
  %344 = icmp eq <4 x i32> %343, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %345 = sext <4 x i1> %344 to <4 x i32>
  %346 = shufflevector <4 x i32> %345, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %347 = and <4 x i32> %346, %345
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = and <2 x i64> %348, <i64 -9223372036854775808, i64 -9223372036854775808>
  %350 = xor <2 x i64> %348, <i64 -1, i64 -1>
  %351 = bitcast <2 x double> %342 to <2 x i64>
  %352 = and <2 x i64> %351, %350
  %353 = or <2 x i64> %352, %349
  %354 = fmul <2 x double> %324, <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>
  %355 = fadd <2 x double> %354, <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>
  %356 = fmul <2 x double> %324, %355
  %357 = fadd <2 x double> %356, <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>
  %358 = fmul <2 x double> %324, %357
  %359 = fadd <2 x double> %358, <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>
  %360 = fmul <2 x double> %324, %359
  %361 = fadd <2 x double> %360, <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>
  %362 = fmul <2 x double> %324, %361
  %363 = fadd <2 x double> %362, <double 0x3FA5555555555545, double 0x3FA5555555555545>
  %364 = fmul <2 x double> %324, %363
  %365 = fadd <2 x double> %364, <double -5.000000e-01, double -5.000000e-01>
  %366 = and <2 x i64> %325, <i64 -134217728, i64 -134217728>
  %367 = bitcast <2 x i64> %366 to <2 x double>
  %368 = fsub <2 x double> %324, %367
  %369 = bitcast <2 x double> %365 to <2 x i64>
  %370 = and <2 x i64> %369, <i64 -134217728, i64 -134217728>
  %371 = bitcast <2 x i64> %370 to <2 x double>
  %372 = fsub <2 x double> %365, %371
  %373 = fmul <2 x double> %324, %365
  %374 = fmul <2 x double> %367, %371
  %375 = bitcast <2 x double> %373 to <2 x i64>
  %376 = xor <2 x i64> %375, <i64 -9223372036854775808, i64 -9223372036854775808>
  %377 = bitcast <2 x i64> %376 to <2 x double>
  %378 = fmul <2 x double> %368, %371
  %379 = fmul <2 x double> %372, %367
  %380 = fmul <2 x double> %368, %372
  %381 = fadd <2 x double> %374, %377
  %382 = fadd <2 x double> %378, %381
  %383 = fadd <2 x double> %379, %382
  %384 = fadd <2 x double> %380, %383
  %385 = fadd <2 x double> %373, <double 1.000000e+00, double 1.000000e+00>
  %386 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %385
  %387 = fadd <2 x double> %373, %386
  %388 = fadd <2 x double> %387, %384
  %389 = fadd <2 x double> %385, %388
  %390 = and <4 x i32> %310, <i32 1, i32 1, i32 0, i32 0>
  %391 = icmp eq <4 x i32> %390, zeroinitializer
  %392 = sext <4 x i1> %391 to <4 x i32>
  %393 = shufflevector <4 x i32> %392, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = and <2 x i64> %353, %394
  %396 = xor <2 x i64> %394, <i64 -1, i64 -1>
  %397 = bitcast <2 x double> %389 to <2 x i64>
  %398 = and <2 x i64> %397, %396
  %399 = or <2 x i64> %398, %395
  %400 = and <2 x i64> %397, %394
  %401 = and <2 x i64> %353, %396
  %402 = or <2 x i64> %400, %401
  %403 = and <4 x i32> %310, <i32 2, i32 2, i32 0, i32 0>
  %404 = icmp eq <4 x i32> %403, <i32 2, i32 2, i32 0, i32 0>
  %405 = sext <4 x i1> %404 to <4 x i32>
  %406 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %407 = bitcast <4 x i32> %406 to <2 x i64>
  %408 = and <2 x i64> %407, <i64 -9223372036854775808, i64 -9223372036854775808>
  %409 = xor <2 x i64> %399, %408
  %410 = add <4 x i32> %310, <i32 1, i32 1, i32 0, i32 0>
  %411 = and <4 x i32> %410, <i32 2, i32 2, i32 0, i32 0>
  %412 = icmp eq <4 x i32> %411, <i32 2, i32 2, i32 0, i32 0>
  %413 = sext <4 x i1> %412 to <4 x i32>
  %414 = shufflevector <4 x i32> %413, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = and <2 x i64> %415, <i64 -9223372036854775808, i64 -9223372036854775808>
  %417 = xor <2 x i64> %402, %416
  %418 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %409, <2 x i64>* %418, align 16
  %419 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %420 = bitcast <2 x double>* %419 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %420, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u05sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = bitcast <2 x double> %11 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fsub <2 x double> %11, %15
  %17 = fmul <2 x double> %15, %15
  %18 = bitcast <2 x double> %12 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fmul <2 x double> %16, %15
  %22 = fmul <2 x double> %16, %16
  %23 = fadd <2 x double> %17, %20
  %24 = fadd <2 x double> %21, %23
  %25 = fadd <2 x double> %21, %24
  %26 = fadd <2 x double> %22, %25
  %27 = fmul <2 x double> %12, <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>
  %28 = fadd <2 x double> %27, <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>
  %29 = fmul <2 x double> %12, %28
  %30 = fadd <2 x double> %29, <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>
  %31 = fmul <2 x double> %12, %30
  %32 = fadd <2 x double> %31, <double 0x3E950783486A74C8, double 0x3E950783486A74C8>
  %33 = fmul <2 x double> %12, %32
  %34 = fadd <2 x double> %33, <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>
  %35 = fmul <2 x double> %12, %34
  %36 = fadd <2 x double> %35, <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>
  %37 = fmul <2 x double> %12, %36
  %38 = fadd <2 x double> %37, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %39 = fsub <2 x double> %38, %37
  %40 = fsub <2 x double> %38, %39
  %41 = fsub <2 x double> %37, %40
  %42 = fsub <2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %39
  %43 = fadd <2 x double> %42, %41
  %44 = fadd <2 x double> %43, <double 0x3C50B00000000000, double 0x3C50B00000000000>
  %45 = and <2 x i64> %18, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %12, %46
  %48 = bitcast <2 x double> %38 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %38, %50
  %52 = fmul <2 x double> %12, %38
  %53 = fmul <2 x double> %46, %50
  %54 = bitcast <2 x double> %52 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fmul <2 x double> %47, %50
  %58 = fmul <2 x double> %51, %46
  %59 = fmul <2 x double> %47, %51
  %60 = fmul <2 x double> %12, %44
  %61 = fmul <2 x double> %26, %38
  %62 = fadd <2 x double> %53, %56
  %63 = fadd <2 x double> %57, %62
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %59, %64
  %66 = fadd <2 x double> %60, %65
  %67 = fadd <2 x double> %61, %66
  %68 = fadd <2 x double> %52, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %69 = fsub <2 x double> %68, %52
  %70 = fsub <2 x double> %68, %69
  %71 = fsub <2 x double> %52, %70
  %72 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %69
  %73 = fadd <2 x double> %72, %71
  %74 = fadd <2 x double> %67, <double 0x3C81A80000000000, double 0x3C81A80000000000>
  %75 = fadd <2 x double> %73, %74
  %76 = bitcast <2 x double> %68 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -134217728, i64 -134217728>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = fsub <2 x double> %68, %78
  %80 = fmul <2 x double> %11, %68
  %81 = fmul <2 x double> %15, %78
  %82 = bitcast <2 x double> %80 to <2 x i64>
  %83 = xor <2 x i64> %82, <i64 -9223372036854775808, i64 -9223372036854775808>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fmul <2 x double> %79, %15
  %86 = fmul <2 x double> %16, %78
  %87 = fmul <2 x double> %16, %79
  %88 = fmul <2 x double> %11, %75
  %89 = fadd <2 x double> %81, %84
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %92, %88
  %94 = fadd <2 x double> %80, %93
  %95 = bitcast <2 x double> %1 to <4 x i32>
  %96 = icmp eq <4 x i32> %95, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %97 = sext <4 x i1> %96 to <4 x i32>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %99 = and <4 x i32> %98, %97
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -9223372036854775808, i64 -9223372036854775808>
  %102 = xor <2 x i64> %100, <i64 -1, i64 -1>
  %103 = bitcast <2 x double> %94 to <2 x i64>
  %104 = and <2 x i64> %103, %102
  %105 = or <2 x i64> %104, %101
  %106 = fmul <2 x double> %12, <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>
  %107 = fadd <2 x double> %106, <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>
  %108 = fmul <2 x double> %12, %107
  %109 = fadd <2 x double> %108, <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>
  %110 = fmul <2 x double> %12, %109
  %111 = fadd <2 x double> %110, <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>
  %112 = fmul <2 x double> %12, %111
  %113 = fadd <2 x double> %112, <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>
  %114 = fmul <2 x double> %12, %113
  %115 = fadd <2 x double> %114, <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>
  %116 = fmul <2 x double> %12, %115
  %117 = fadd <2 x double> %116, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %118 = fsub <2 x double> %117, %116
  %119 = fsub <2 x double> %117, %118
  %120 = fsub <2 x double> %116, %119
  %121 = fsub <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %118
  %122 = fadd <2 x double> %121, %120
  %123 = fadd <2 x double> %122, <double 0xBC33500000000000, double 0xBC33500000000000>
  %124 = bitcast <2 x double> %117 to <2 x i64>
  %125 = and <2 x i64> %124, <i64 -134217728, i64 -134217728>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fsub <2 x double> %117, %126
  %128 = fmul <2 x double> %12, %117
  %129 = fmul <2 x double> %46, %126
  %130 = bitcast <2 x double> %128 to <2 x i64>
  %131 = xor <2 x i64> %130, <i64 -9223372036854775808, i64 -9223372036854775808>
  %132 = bitcast <2 x i64> %131 to <2 x double>
  %133 = fmul <2 x double> %47, %126
  %134 = fmul <2 x double> %127, %46
  %135 = fmul <2 x double> %47, %127
  %136 = fmul <2 x double> %12, %123
  %137 = fmul <2 x double> %26, %117
  %138 = fadd <2 x double> %129, %132
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %134, %139
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %136, %141
  %143 = fadd <2 x double> %137, %142
  %144 = fadd <2 x double> %128, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %145 = fsub <2 x double> %144, %128
  %146 = fsub <2 x double> %144, %145
  %147 = fsub <2 x double> %128, %146
  %148 = fsub <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %145
  %149 = fadd <2 x double> %148, %147
  %150 = fadd <2 x double> %143, <double 0xBC76900000000000, double 0xBC76900000000000>
  %151 = fadd <2 x double> %149, %150
  %152 = bitcast <2 x double> %144 to <2 x i64>
  %153 = and <2 x i64> %152, <i64 -134217728, i64 -134217728>
  %154 = bitcast <2 x i64> %153 to <2 x double>
  %155 = fsub <2 x double> %144, %154
  %156 = fmul <2 x double> %12, %144
  %157 = fmul <2 x double> %46, %154
  %158 = bitcast <2 x double> %156 to <2 x i64>
  %159 = xor <2 x i64> %158, <i64 -9223372036854775808, i64 -9223372036854775808>
  %160 = bitcast <2 x i64> %159 to <2 x double>
  %161 = fmul <2 x double> %155, %46
  %162 = fmul <2 x double> %47, %154
  %163 = fmul <2 x double> %47, %155
  %164 = fmul <2 x double> %26, %144
  %165 = fmul <2 x double> %12, %151
  %166 = fadd <2 x double> %157, %160
  %167 = fadd <2 x double> %161, %166
  %168 = fadd <2 x double> %162, %167
  %169 = fadd <2 x double> %163, %168
  %170 = fadd <2 x double> %164, %169
  %171 = fadd <2 x double> %170, %165
  %172 = fadd <2 x double> %156, <double 1.000000e+00, double 1.000000e+00>
  %173 = fsub <2 x double> %172, %156
  %174 = fsub <2 x double> %172, %173
  %175 = fsub <2 x double> %156, %174
  %176 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %173
  %177 = fadd <2 x double> %176, %175
  %178 = fadd <2 x double> %177, %171
  %179 = fadd <2 x double> %172, %178
  %180 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %181 = icmp eq <4 x i32> %180, zeroinitializer
  %182 = sext <4 x i1> %181 to <4 x i32>
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %184 = bitcast <4 x i32> %183 to <2 x i64>
  %185 = and <2 x i64> %105, %184
  %186 = xor <2 x i64> %184, <i64 -1, i64 -1>
  %187 = bitcast <2 x double> %179 to <2 x i64>
  %188 = and <2 x i64> %187, %186
  %189 = or <2 x i64> %185, %188
  %190 = and <2 x i64> %187, %184
  %191 = and <2 x i64> %105, %186
  %192 = or <2 x i64> %191, %190
  %193 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %194 = icmp eq <4 x i32> %193, <i32 4, i32 4, i32 0, i32 0>
  %195 = sext <4 x i1> %194 to <4 x i32>
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %197 = bitcast <4 x i32> %196 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -9223372036854775808, i64 -9223372036854775808>
  %199 = xor <2 x i64> %189, %198
  %200 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %201 = and <4 x i32> %200, <i32 4, i32 4, i32 0, i32 0>
  %202 = icmp eq <4 x i32> %201, <i32 4, i32 4, i32 0, i32 0>
  %203 = sext <4 x i1> %202 to <4 x i32>
  %204 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %205 = bitcast <4 x i32> %204 to <2 x i64>
  %206 = and <2 x i64> %205, <i64 -9223372036854775808, i64 -9223372036854775808>
  %207 = xor <2 x i64> %192, %206
  %208 = bitcast <2 x double> %1 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 9223372036854775807, i64 9223372036854775807>
  %210 = bitcast <2 x i64> %209 to <2 x double>
  %211 = fcmp ogt <2 x double> %210, <double 2.500000e+08, double 2.500000e+08>
  %212 = sext <2 x i1> %211 to <2 x i64>
  %213 = xor <2 x i64> %212, <i64 -1, i64 -1>
  %214 = and <2 x i64> %199, %213
  %215 = and <2 x i64> %212, <i64 4607182418800017408, i64 4607182418800017408>
  %216 = and <2 x i64> %207, %213
  %217 = fcmp oeq <2 x double> %210, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %218 = sext <2 x i1> %217 to <2 x i64>
  %219 = or <2 x i64> %214, %218
  %220 = or <2 x i64> %215, %218
  %221 = or <2 x i64> %220, %216
  %222 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %222, align 16
  %223 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %224 = bitcast <2 x double>* %223 to <2 x i64>*
  store <2 x i64> %221, <2 x i64>* %224, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u35sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>
  %14 = fadd <2 x double> %13, <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %15, <double 0x3E9507830918116C, double 0x3E9507830918116C>
  %17 = fmul <2 x double> %12, %16
  %18 = fadd <2 x double> %17, <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>
  %19 = fmul <2 x double> %12, %18
  %20 = fadd <2 x double> %19, <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>
  %21 = fmul <2 x double> %12, %20
  %22 = fadd <2 x double> %21, <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>
  %23 = fmul <2 x double> %12, %22
  %24 = fadd <2 x double> %23, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %25 = fmul <2 x double> %11, %24
  %26 = fmul <2 x double> %12, <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>
  %27 = fadd <2 x double> %26, <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>
  %28 = fmul <2 x double> %12, %27
  %29 = fadd <2 x double> %28, <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>
  %30 = fmul <2 x double> %12, %29
  %31 = fadd <2 x double> %30, <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>
  %32 = fmul <2 x double> %12, %31
  %33 = fadd <2 x double> %32, <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>
  %34 = fmul <2 x double> %12, %33
  %35 = fadd <2 x double> %34, <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>
  %36 = fmul <2 x double> %12, %35
  %37 = fadd <2 x double> %36, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %38 = fmul <2 x double> %12, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %41 = icmp eq <4 x i32> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = bitcast <2 x double> %25 to <2 x i64>
  %46 = and <2 x i64> %45, %44
  %47 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %48 = bitcast <2 x double> %39 to <2 x i64>
  %49 = and <2 x i64> %48, %47
  %50 = or <2 x i64> %49, %46
  %51 = and <2 x i64> %48, %44
  %52 = and <2 x i64> %45, %47
  %53 = or <2 x i64> %51, %52
  %54 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %55 = icmp eq <4 x i32> %54, <i32 4, i32 4, i32 0, i32 0>
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -9223372036854775808, i64 -9223372036854775808>
  %60 = xor <2 x i64> %50, %59
  %61 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %62 = and <4 x i32> %61, <i32 4, i32 4, i32 0, i32 0>
  %63 = icmp eq <4 x i32> %62, <i32 4, i32 4, i32 0, i32 0>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -9223372036854775808, i64 -9223372036854775808>
  %68 = xor <2 x i64> %53, %67
  %69 = bitcast <2 x double> %1 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 9223372036854775807, i64 9223372036854775807>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fcmp ule <2 x double> %71, <double 2.500000e+08, double 2.500000e+08>
  %73 = sext <2 x i1> %72 to <2 x i64>
  %74 = and <2 x i64> %60, %73
  %75 = and <2 x i64> %68, %73
  %76 = fcmp oeq <2 x double> %71, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = or <2 x i64> %74, %77
  %79 = or <2 x i64> %75, %77
  %80 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %80, align 16
  %81 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %82 = bitcast <2 x double>* %81 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %82, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modfd2_sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp ule <2 x double> %15, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = bitcast <2 x double> %12 to <2 x i64>
  %18 = select <2 x i1> %16, <2 x i64> %17, <2 x i64> zeroinitializer
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = and <2 x i64> %18, <i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <2 x i64> %20, %21
  %23 = fsub <2 x double> %1, %19
  %24 = bitcast <2 x double> %23 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 9223372036854775807, i64 9223372036854775807>
  %26 = or <2 x i64> %25, %21
  %27 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %27, align 16
  %28 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %29 = bitcast <2 x double>* %28 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %29, align 16
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinpid2_u05sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 0, i32 0>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 0, i32 0>
  %8 = icmp eq <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = and <4 x i32> %6, <i32 -2, i32 -2, i32 undef, i32 undef>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = fsub <2 x double> %2, %14
  %16 = fmul <2 x double> %15, %15
  %17 = bitcast <2 x double> %15 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 -134217728, i64 -134217728>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fsub <2 x double> %15, %19
  %21 = fmul <2 x double> %19, %19
  %22 = bitcast <2 x double> %16 to <2 x i64>
  %23 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fmul <2 x double> %20, %19
  %26 = fmul <2 x double> %20, %20
  %27 = fadd <2 x double> %21, %24
  %28 = fadd <2 x double> %25, %27
  %29 = fadd <2 x double> %25, %28
  %30 = fadd <2 x double> %26, %29
  %31 = and <2 x i64> %11, <i64 4382541452445283595, i64 4382541452445283595>
  %32 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %33 = and <2 x i64> %32, <i64 -4821442551509016299, i64 -4821442551509016299>
  %34 = or <2 x i64> %33, %31
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = and <2 x i64> %11, <i64 -4802123692345199488, i64 -4802123692345199488>
  %37 = and <2 x i64> %32, <i64 4440143510975015736, i64 4440143510975015736>
  %38 = or <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fmul <2 x double> %16, %35
  %41 = fadd <2 x double> %40, %39
  %42 = and <2 x i64> %11, <i64 4458455022030039826, i64 4458455022030039826>
  %43 = and <2 x i64> %32, <i64 -4747303679008710624, i64 -4747303679008710624>
  %44 = or <2 x i64> %43, %42
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %16, %41
  %47 = fadd <2 x double> %46, %45
  %48 = and <2 x i64> %11, <i64 -4730348477982289555, i64 -4730348477982289555>
  %49 = and <2 x i64> %32, <i64 4509518862318466248, i64 4509518862318466248>
  %50 = or <2 x i64> %49, %48
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fmul <2 x double> %16, %47
  %53 = fadd <2 x double> %52, %51
  %54 = and <2 x i64> %11, <i64 4525589105766150571, i64 4525589105766150571>
  %55 = and <2 x i64> %32, <i64 -4682849517070797703, i64 -4682849517070797703>
  %56 = or <2 x i64> %55, %54
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fmul <2 x double> %16, %53
  %59 = fadd <2 x double> %58, %57
  %60 = and <2 x i64> %11, <i64 -4668722924302319624, i64 -4668722924302319624>
  %61 = and <2 x i64> %32, <i64 4567888881436175070, i64 4567888881436175070>
  %62 = or <2 x i64> %61, %60
  %63 = bitcast <2 x i64> %62 to <2 x double>
  %64 = fmul <2 x double> %16, %59
  %65 = fadd <2 x double> %64, %63
  %66 = fmul <2 x double> %16, %65
  %67 = and <2 x i64> %11, <i64 4580226925013457604, i64 4580226925013457604>
  %68 = and <2 x i64> %32, <i64 -4632889288853963181, i64 -4632889288853963181>
  %69 = or <2 x i64> %68, %67
  %70 = and <2 x i64> %11, <i64 -4885473209836634112, i64 -4885473209836634112>
  %71 = and <2 x i64> %32, <i64 4346167154459017216, i64 4346167154459017216>
  %72 = or <2 x i64> %71, %70
  %73 = bitcast <2 x i64> %69 to <2 x double>
  %74 = bitcast <2 x i64> %72 to <2 x double>
  %75 = fadd <2 x double> %66, %73
  %76 = fsub <2 x double> %75, %66
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %66, %77
  %79 = fsub <2 x double> %73, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %80, %74
  %82 = bitcast <2 x double> %75 to <2 x i64>
  %83 = and <2 x i64> %22, <i64 -134217728, i64 -134217728>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fsub <2 x double> %16, %84
  %86 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = fsub <2 x double> %75, %87
  %89 = fmul <2 x double> %16, %75
  %90 = fmul <2 x double> %84, %87
  %91 = bitcast <2 x double> %89 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fmul <2 x double> %85, %87
  %95 = fmul <2 x double> %88, %84
  %96 = fmul <2 x double> %85, %88
  %97 = fmul <2 x double> %16, %81
  %98 = fmul <2 x double> %30, %75
  %99 = fadd <2 x double> %90, %93
  %100 = fadd <2 x double> %94, %99
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %98, %103
  %105 = and <2 x i64> %11, <i64 -4624144323598989858, i64 -4624144323598989858>
  %106 = and <2 x i64> %32, <i64 4605249457297304856, i64 4605249457297304856>
  %107 = or <2 x i64> %106, %105
  %108 = and <2 x i64> %11, <i64 -4866544017652842496, i64 -4866544017652842496>
  %109 = and <2 x i64> %32, <i64 4359950632224817152, i64 4359950632224817152>
  %110 = or <2 x i64> %109, %108
  %111 = bitcast <2 x i64> %107 to <2 x double>
  %112 = bitcast <2 x i64> %110 to <2 x double>
  %113 = fadd <2 x double> %89, %111
  %114 = fsub <2 x double> %113, %89
  %115 = fsub <2 x double> %113, %114
  %116 = fsub <2 x double> %89, %115
  %117 = fsub <2 x double> %111, %114
  %118 = fadd <2 x double> %117, %116
  %119 = fadd <2 x double> %104, %112
  %120 = fadd <2 x double> %118, %119
  %121 = bitcast <2 x double> %113 to <2 x i64>
  %122 = and <2 x i64> %22, %11
  %123 = and <2 x i64> %17, %32
  %124 = or <2 x i64> %122, %123
  %125 = bitcast <2 x double> %30 to <2 x i64>
  %126 = and <2 x i64> %125, %11
  %127 = bitcast <2 x i64> %124 to <2 x double>
  %128 = bitcast <2 x i64> %126 to <2 x double>
  %129 = and <2 x i64> %121, <i64 -134217728, i64 -134217728>
  %130 = bitcast <2 x i64> %129 to <2 x double>
  %131 = fsub <2 x double> %113, %130
  %132 = and <2 x i64> %124, <i64 -134217728, i64 -134217728>
  %133 = bitcast <2 x i64> %132 to <2 x double>
  %134 = fsub <2 x double> %127, %133
  %135 = fmul <2 x double> %113, %127
  %136 = fmul <2 x double> %133, %130
  %137 = bitcast <2 x double> %135 to <2 x i64>
  %138 = xor <2 x i64> %137, <i64 -9223372036854775808, i64 -9223372036854775808>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = fmul <2 x double> %131, %133
  %141 = fmul <2 x double> %134, %130
  %142 = fmul <2 x double> %134, %131
  %143 = fmul <2 x double> %113, %128
  %144 = fmul <2 x double> %120, %127
  %145 = fadd <2 x double> %136, %139
  %146 = fadd <2 x double> %140, %145
  %147 = fadd <2 x double> %141, %146
  %148 = fadd <2 x double> %142, %147
  %149 = fadd <2 x double> %143, %148
  %150 = fadd <2 x double> %149, %144
  %151 = bitcast <2 x double> %150 to <2 x i64>
  %152 = fadd <2 x double> %135, <double 1.000000e+00, double 1.000000e+00>
  %153 = fsub <2 x double> %152, %135
  %154 = fsub <2 x double> %152, %153
  %155 = fsub <2 x double> %135, %154
  %156 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %153
  %157 = fadd <2 x double> %156, %155
  %158 = fadd <2 x double> %157, %150
  %159 = bitcast <2 x double> %152 to <2 x i64>
  %160 = and <2 x i64> %159, %11
  %161 = and <2 x i64> %137, %32
  %162 = or <2 x i64> %160, %161
  %163 = bitcast <2 x double> %158 to <2 x i64>
  %164 = and <2 x i64> %163, %11
  %165 = and <2 x i64> %151, %32
  %166 = or <2 x i64> %164, %165
  %167 = and <4 x i32> %6, <i32 4, i32 4, i32 0, i32 0>
  %168 = icmp eq <4 x i32> %167, <i32 4, i32 4, i32 0, i32 0>
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = and <2 x i64> %171, <i64 -9223372036854775808, i64 -9223372036854775808>
  %173 = xor <2 x i64> %162, %172
  %174 = xor <2 x i64> %166, %172
  %175 = bitcast <2 x i64> %173 to <2 x double>
  %176 = bitcast <2 x i64> %174 to <2 x double>
  %177 = fadd <2 x double> %175, %176
  %178 = bitcast <2 x double> %0 to <4 x i32>
  %179 = icmp eq <4 x i32> %178, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %180 = sext <4 x i1> %179 to <4 x i32>
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %182 = and <4 x i32> %181, %180
  %183 = bitcast <4 x i32> %182 to <2 x i64>
  %184 = and <2 x i64> %183, <i64 -9223372036854775808, i64 -9223372036854775808>
  %185 = xor <2 x i64> %183, <i64 -1, i64 -1>
  %186 = bitcast <2 x double> %177 to <2 x i64>
  %187 = and <2 x i64> %186, %185
  %188 = or <2 x i64> %187, %184
  %189 = bitcast <2 x double> %0 to <2 x i64>
  %190 = and <2 x i64> %189, <i64 9223372036854775807, i64 9223372036854775807>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fcmp ule <2 x double> %191, <double 2.500000e+08, double 2.500000e+08>
  %193 = fcmp oeq <2 x double> %191, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %194 = bitcast <2 x i64> %188 to <2 x double>
  %195 = select <2 x i1> %192, <2 x double> %194, <2 x double> zeroinitializer
  %196 = select <2 x i1> %193, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %195
  ret <2 x double> %196
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cospid2_u05sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 0, i32 0>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 0, i32 0>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = and <4 x i32> %6, <i32 -2, i32 -2, i32 0, i32 0>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = fsub <2 x double> %2, %14
  %16 = fmul <2 x double> %15, %15
  %17 = bitcast <2 x double> %15 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 -134217728, i64 -134217728>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fsub <2 x double> %15, %19
  %21 = fmul <2 x double> %19, %19
  %22 = bitcast <2 x double> %16 to <2 x i64>
  %23 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fmul <2 x double> %20, %19
  %26 = fmul <2 x double> %20, %20
  %27 = fadd <2 x double> %21, %24
  %28 = fadd <2 x double> %25, %27
  %29 = fadd <2 x double> %25, %28
  %30 = fadd <2 x double> %26, %29
  %31 = and <2 x i64> %11, <i64 4382541452445283595, i64 4382541452445283595>
  %32 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %33 = and <2 x i64> %32, <i64 -4821442551509016299, i64 -4821442551509016299>
  %34 = or <2 x i64> %33, %31
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = and <2 x i64> %11, <i64 -4802123692345199488, i64 -4802123692345199488>
  %37 = and <2 x i64> %32, <i64 4440143510975015736, i64 4440143510975015736>
  %38 = or <2 x i64> %37, %36
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fmul <2 x double> %16, %35
  %41 = fadd <2 x double> %40, %39
  %42 = and <2 x i64> %11, <i64 4458455022030039826, i64 4458455022030039826>
  %43 = and <2 x i64> %32, <i64 -4747303679008710624, i64 -4747303679008710624>
  %44 = or <2 x i64> %43, %42
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %16, %41
  %47 = fadd <2 x double> %46, %45
  %48 = and <2 x i64> %11, <i64 -4730348477982289555, i64 -4730348477982289555>
  %49 = and <2 x i64> %32, <i64 4509518862318466248, i64 4509518862318466248>
  %50 = or <2 x i64> %49, %48
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fmul <2 x double> %16, %47
  %53 = fadd <2 x double> %52, %51
  %54 = and <2 x i64> %11, <i64 4525589105766150571, i64 4525589105766150571>
  %55 = and <2 x i64> %32, <i64 -4682849517070797703, i64 -4682849517070797703>
  %56 = or <2 x i64> %55, %54
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fmul <2 x double> %16, %53
  %59 = fadd <2 x double> %58, %57
  %60 = and <2 x i64> %11, <i64 -4668722924302319624, i64 -4668722924302319624>
  %61 = and <2 x i64> %32, <i64 4567888881436175070, i64 4567888881436175070>
  %62 = or <2 x i64> %61, %60
  %63 = bitcast <2 x i64> %62 to <2 x double>
  %64 = fmul <2 x double> %16, %59
  %65 = fadd <2 x double> %64, %63
  %66 = fmul <2 x double> %16, %65
  %67 = and <2 x i64> %11, <i64 4580226925013457604, i64 4580226925013457604>
  %68 = and <2 x i64> %32, <i64 -4632889288853963181, i64 -4632889288853963181>
  %69 = or <2 x i64> %68, %67
  %70 = and <2 x i64> %11, <i64 -4885473209836634112, i64 -4885473209836634112>
  %71 = and <2 x i64> %32, <i64 4346167154459017216, i64 4346167154459017216>
  %72 = or <2 x i64> %71, %70
  %73 = bitcast <2 x i64> %69 to <2 x double>
  %74 = bitcast <2 x i64> %72 to <2 x double>
  %75 = fadd <2 x double> %66, %73
  %76 = fsub <2 x double> %75, %66
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %66, %77
  %79 = fsub <2 x double> %73, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %80, %74
  %82 = bitcast <2 x double> %75 to <2 x i64>
  %83 = and <2 x i64> %22, <i64 -134217728, i64 -134217728>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fsub <2 x double> %16, %84
  %86 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = fsub <2 x double> %75, %87
  %89 = fmul <2 x double> %16, %75
  %90 = fmul <2 x double> %84, %87
  %91 = bitcast <2 x double> %89 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -9223372036854775808, i64 -9223372036854775808>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fmul <2 x double> %85, %87
  %95 = fmul <2 x double> %88, %84
  %96 = fmul <2 x double> %85, %88
  %97 = fmul <2 x double> %16, %81
  %98 = fmul <2 x double> %30, %75
  %99 = fadd <2 x double> %90, %93
  %100 = fadd <2 x double> %94, %99
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %98, %103
  %105 = and <2 x i64> %11, <i64 -4624144323598989858, i64 -4624144323598989858>
  %106 = and <2 x i64> %32, <i64 4605249457297304856, i64 4605249457297304856>
  %107 = or <2 x i64> %106, %105
  %108 = and <2 x i64> %11, <i64 -4866544017652842496, i64 -4866544017652842496>
  %109 = and <2 x i64> %32, <i64 4359950632224817152, i64 4359950632224817152>
  %110 = or <2 x i64> %109, %108
  %111 = bitcast <2 x i64> %107 to <2 x double>
  %112 = bitcast <2 x i64> %110 to <2 x double>
  %113 = fadd <2 x double> %89, %111
  %114 = fsub <2 x double> %113, %89
  %115 = fsub <2 x double> %113, %114
  %116 = fsub <2 x double> %89, %115
  %117 = fsub <2 x double> %111, %114
  %118 = fadd <2 x double> %117, %116
  %119 = fadd <2 x double> %104, %112
  %120 = fadd <2 x double> %118, %119
  %121 = bitcast <2 x double> %113 to <2 x i64>
  %122 = and <2 x i64> %22, %11
  %123 = and <2 x i64> %17, %32
  %124 = or <2 x i64> %122, %123
  %125 = bitcast <2 x double> %30 to <2 x i64>
  %126 = and <2 x i64> %125, %11
  %127 = bitcast <2 x i64> %124 to <2 x double>
  %128 = bitcast <2 x i64> %126 to <2 x double>
  %129 = and <2 x i64> %121, <i64 -134217728, i64 -134217728>
  %130 = bitcast <2 x i64> %129 to <2 x double>
  %131 = fsub <2 x double> %113, %130
  %132 = and <2 x i64> %124, <i64 -134217728, i64 -134217728>
  %133 = bitcast <2 x i64> %132 to <2 x double>
  %134 = fsub <2 x double> %127, %133
  %135 = fmul <2 x double> %113, %127
  %136 = fmul <2 x double> %133, %130
  %137 = bitcast <2 x double> %135 to <2 x i64>
  %138 = xor <2 x i64> %137, <i64 -9223372036854775808, i64 -9223372036854775808>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = fmul <2 x double> %131, %133
  %141 = fmul <2 x double> %134, %130
  %142 = fmul <2 x double> %134, %131
  %143 = fmul <2 x double> %113, %128
  %144 = fmul <2 x double> %120, %127
  %145 = fadd <2 x double> %136, %139
  %146 = fadd <2 x double> %140, %145
  %147 = fadd <2 x double> %141, %146
  %148 = fadd <2 x double> %142, %147
  %149 = fadd <2 x double> %143, %148
  %150 = fadd <2 x double> %149, %144
  %151 = bitcast <2 x double> %150 to <2 x i64>
  %152 = fadd <2 x double> %135, <double 1.000000e+00, double 1.000000e+00>
  %153 = fsub <2 x double> %152, %135
  %154 = fsub <2 x double> %152, %153
  %155 = fsub <2 x double> %135, %154
  %156 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %153
  %157 = fadd <2 x double> %156, %155
  %158 = fadd <2 x double> %157, %150
  %159 = bitcast <2 x double> %152 to <2 x i64>
  %160 = and <2 x i64> %159, %11
  %161 = and <2 x i64> %137, %32
  %162 = or <2 x i64> %160, %161
  %163 = bitcast <2 x double> %158 to <2 x i64>
  %164 = and <2 x i64> %163, %11
  %165 = and <2 x i64> %151, %32
  %166 = or <2 x i64> %164, %165
  %167 = add <4 x i32> %12, <i32 2, i32 2, i32 0, i32 0>
  %168 = and <4 x i32> %167, <i32 4, i32 4, i32 0, i32 0>
  %169 = icmp eq <4 x i32> %168, <i32 4, i32 4, i32 0, i32 0>
  %170 = sext <4 x i1> %169 to <4 x i32>
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %172 = bitcast <4 x i32> %171 to <2 x i64>
  %173 = and <2 x i64> %172, <i64 -9223372036854775808, i64 -9223372036854775808>
  %174 = xor <2 x i64> %162, %173
  %175 = xor <2 x i64> %166, %173
  %176 = bitcast <2 x i64> %174 to <2 x double>
  %177 = bitcast <2 x i64> %175 to <2 x double>
  %178 = fadd <2 x double> %176, %177
  %179 = bitcast <2 x double> %0 to <2 x i64>
  %180 = and <2 x i64> %179, <i64 9223372036854775807, i64 9223372036854775807>
  %181 = bitcast <2 x i64> %180 to <2 x double>
  %182 = fcmp ogt <2 x double> %181, <double 2.500000e+08, double 2.500000e+08>
  %183 = fcmp oeq <2 x double> %181, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %184 = select <2 x i1> %182, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %178
  %185 = select <2 x i1> %183, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %184
  ret <2 x double> %185
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #6
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %14) #6
  %16 = fmul <2 x double> %14, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %17 = fadd <2 x double> %16, %0
  %18 = fmul <2 x double> %14, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %19 = fadd <2 x double> %18, %17
  br label %272

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <2 x double> %4, <double 1.000000e+06, double 1.000000e+06>
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %53, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %27) #6
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %30 = sitofp <2 x i32> %29 to <2 x double>
  %31 = fmul <2 x double> %30, <double 0x4170000000000000, double 0x4170000000000000>
  %32 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %33 = fsub <2 x double> %32, %31
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %33) #6
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %36 = sitofp <2 x i32> %35 to <2 x double>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %36) #6
  %38 = fmul <2 x double> %31, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %39 = fadd <2 x double> %38, %0
  %40 = fmul <2 x double> %36, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %41 = fadd <2 x double> %40, %39
  %42 = fmul <2 x double> %31, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %43 = fadd <2 x double> %42, %41
  %44 = fmul <2 x double> %36, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %45 = fadd <2 x double> %44, %43
  %46 = fmul <2 x double> %31, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %47 = fadd <2 x double> %46, %45
  %48 = fmul <2 x double> %36, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %49 = fadd <2 x double> %48, %47
  %50 = fadd <2 x double> %31, %36
  %51 = fmul <2 x double> %50, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %52 = fadd <2 x double> %51, %49
  br label %272

; <label>:53:                                     ; preds = %20
  %54 = bitcast <2 x double> %0 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %56 = lshr <4 x i32> %55, <i32 20, i32 20, i32 20, i32 20>
  %57 = and <4 x i32> %56, <i32 2047, i32 2047, i32 0, i32 0>
  %58 = add nsw <4 x i32> %57, <i32 -1078, i32 -1078, i32 0, i32 0>
  %59 = icmp sgt <4 x i32> %58, <i32 645, i32 645, i32 0, i32 0>
  %60 = select <4 x i1> %59, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %62 = and <4 x i32> %61, <i32 0, i32 -1, i32 0, i32 -1>
  %63 = shl <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = add <4 x i32> %63, %54
  %65 = bitcast <4 x i32> %64 to <2 x double>
  %66 = ashr <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %67 = xor <4 x i32> %66, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %68 = and <4 x i32> %67, %58
  %69 = shl <4 x i32> %68, <i32 2, i32 2, i32 2, i32 2>
  %70 = extractelement <4 x i32> %69, i32 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !3, !noalias !25
  %74 = extractelement <4 x i32> %69, i32 0
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !3, !noalias !25
  %78 = insertelement <2 x double> undef, double %77, i32 0
  %79 = insertelement <2 x double> %78, double %73, i32 1
  %80 = bitcast <4 x i32> %64 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 -134217728, i64 -134217728>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fsub <2 x double> %65, %82
  %84 = bitcast <2 x double> %79 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 -134217728, i64 -134217728>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fsub <2 x double> %79, %86
  %88 = fmul <2 x double> %79, %65
  %89 = fmul <2 x double> %82, %86
  %90 = bitcast <2 x double> %88 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808>
  %92 = bitcast <2 x i64> %91 to <2 x double>
  %93 = fmul <2 x double> %83, %86
  %94 = fmul <2 x double> %87, %82
  %95 = fmul <2 x double> %83, %87
  %96 = fadd <2 x double> %89, %92
  %97 = fadd <2 x double> %93, %96
  %98 = fadd <2 x double> %94, %97
  %99 = fadd <2 x double> %95, %98
  %100 = and <2 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = or <2 x i64> %100, <i64 4841369599423283200, i64 4841369599423283200>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fmul <2 x double> %88, <double 4.000000e+00, double 4.000000e+00>
  %104 = bitcast <2 x double> %103 to <2 x i64>
  %105 = and <2 x i64> %104, <i64 9223372036854775807, i64 9223372036854775807>
  %106 = bitcast <2 x i64> %105 to <2 x double>
  %107 = fcmp ogt <2 x double> %106, <double 0x4330000000000000, double 0x4330000000000000>
  %108 = fadd <2 x double> %103, %102
  %109 = fsub <2 x double> %108, %102
  %110 = bitcast <2 x double> %109 to <2 x i64>
  %111 = or <2 x i64> %100, %110
  %112 = select <2 x i1> %107, <2 x i64> %104, <2 x i64> %111
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = and <2 x i64> %90, <i64 9223372036854775807, i64 9223372036854775807>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fcmp ogt <2 x double> %115, <double 0x4330000000000000, double 0x4330000000000000>
  %117 = fadd <2 x double> %88, %102
  %118 = fsub <2 x double> %117, %102
  %119 = bitcast <2 x double> %118 to <2 x i64>
  %120 = or <2 x i64> %100, %119
  %121 = select <2 x i1> %116, <2 x i64> %90, <2 x i64> %120
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %113, <double -2.500000e-01, double -2.500000e-01>
  %124 = fadd <2 x double> %88, %123
  %125 = fmul <2 x double> %122, <double -4.000000e+00, double -4.000000e+00>
  %126 = fadd <2 x double> %125, %113
  %127 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %126) #6
  %128 = fadd <2 x double> %99, %124
  %129 = fsub <2 x double> %124, %128
  %130 = fadd <2 x double> %99, %129
  %131 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %71
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !25
  %133 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %75
  %134 = load double, double* %133, align 8, !tbaa !3, !noalias !25
  %135 = insertelement <2 x double> undef, double %134, i32 0
  %136 = insertelement <2 x double> %135, double %132, i32 1
  %137 = bitcast <2 x double> %136 to <2 x i64>
  %138 = and <2 x i64> %137, <i64 -134217728, i64 -134217728>
  %139 = bitcast <2 x i64> %138 to <2 x double>
  %140 = fsub <2 x double> %136, %139
  %141 = fmul <2 x double> %136, %65
  %142 = fmul <2 x double> %82, %139
  %143 = bitcast <2 x double> %141 to <2 x i64>
  %144 = xor <2 x i64> %143, <i64 -9223372036854775808, i64 -9223372036854775808>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = fmul <2 x double> %83, %139
  %147 = fmul <2 x double> %140, %82
  %148 = fmul <2 x double> %83, %140
  %149 = fadd <2 x double> %142, %145
  %150 = fadd <2 x double> %146, %149
  %151 = fadd <2 x double> %147, %150
  %152 = fadd <2 x double> %148, %151
  %153 = fadd <2 x double> %141, %128
  %154 = fsub <2 x double> %153, %128
  %155 = fsub <2 x double> %153, %154
  %156 = fsub <2 x double> %128, %155
  %157 = fsub <2 x double> %141, %154
  %158 = fadd <2 x double> %157, %156
  %159 = fadd <2 x double> %152, %130
  %160 = fadd <2 x double> %159, %158
  %161 = bitcast <2 x double> %153 to <2 x i64>
  %162 = and <2 x i64> %161, <i64 -9223372036854775808, i64 -9223372036854775808>
  %163 = or <2 x i64> %162, <i64 4841369599423283200, i64 4841369599423283200>
  %164 = bitcast <2 x i64> %163 to <2 x double>
  %165 = fmul <2 x double> %153, <double 4.000000e+00, double 4.000000e+00>
  %166 = bitcast <2 x double> %165 to <2 x i64>
  %167 = and <2 x i64> %166, <i64 9223372036854775807, i64 9223372036854775807>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fcmp ogt <2 x double> %168, <double 0x4330000000000000, double 0x4330000000000000>
  %170 = fadd <2 x double> %165, %164
  %171 = fsub <2 x double> %170, %164
  %172 = bitcast <2 x double> %171 to <2 x i64>
  %173 = or <2 x i64> %162, %172
  %174 = select <2 x i1> %169, <2 x i64> %166, <2 x i64> %173
  %175 = bitcast <2 x i64> %174 to <2 x double>
  %176 = and <2 x i64> %161, <i64 9223372036854775807, i64 9223372036854775807>
  %177 = bitcast <2 x i64> %176 to <2 x double>
  %178 = fcmp ogt <2 x double> %177, <double 0x4330000000000000, double 0x4330000000000000>
  %179 = fadd <2 x double> %153, %164
  %180 = fsub <2 x double> %179, %164
  %181 = bitcast <2 x double> %180 to <2 x i64>
  %182 = or <2 x i64> %162, %181
  %183 = select <2 x i1> %178, <2 x i64> %161, <2 x i64> %182
  %184 = bitcast <2 x i64> %183 to <2 x double>
  %185 = fmul <2 x double> %175, <double -2.500000e-01, double -2.500000e-01>
  %186 = fadd <2 x double> %153, %185
  %187 = fmul <2 x double> %184, <double -4.000000e+00, double -4.000000e+00>
  %188 = fadd <2 x double> %187, %175
  %189 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %188) #6
  %190 = add <4 x i32> %189, %127
  %191 = fadd <2 x double> %160, %186
  %192 = fsub <2 x double> %186, %191
  %193 = fadd <2 x double> %160, %192
  %194 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %71
  %195 = load double, double* %194, align 8, !tbaa !3, !noalias !25
  %196 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %75
  %197 = load double, double* %196, align 8, !tbaa !3, !noalias !25
  %198 = insertelement <2 x double> undef, double %197, i32 0
  %199 = insertelement <2 x double> %198, double %195, i32 1
  %200 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %71
  %201 = load double, double* %200, align 8, !tbaa !3, !noalias !25
  %202 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %75
  %203 = load double, double* %202, align 8, !tbaa !3, !noalias !25
  %204 = insertelement <2 x double> undef, double %203, i32 0
  %205 = insertelement <2 x double> %204, double %201, i32 1
  %206 = bitcast <2 x double> %199 to <2 x i64>
  %207 = and <2 x i64> %206, <i64 -134217728, i64 -134217728>
  %208 = bitcast <2 x i64> %207 to <2 x double>
  %209 = fsub <2 x double> %199, %208
  %210 = fmul <2 x double> %199, %65
  %211 = fmul <2 x double> %82, %208
  %212 = bitcast <2 x double> %210 to <2 x i64>
  %213 = xor <2 x i64> %212, <i64 -9223372036854775808, i64 -9223372036854775808>
  %214 = bitcast <2 x i64> %213 to <2 x double>
  %215 = fmul <2 x double> %209, %82
  %216 = fmul <2 x double> %83, %208
  %217 = fmul <2 x double> %83, %209
  %218 = fmul <2 x double> %205, %65
  %219 = fadd <2 x double> %211, %214
  %220 = fadd <2 x double> %215, %219
  %221 = fadd <2 x double> %216, %220
  %222 = fadd <2 x double> %217, %221
  %223 = fadd <2 x double> %218, %222
  %224 = fadd <2 x double> %210, %191
  %225 = fsub <2 x double> %224, %191
  %226 = fsub <2 x double> %224, %225
  %227 = fsub <2 x double> %191, %226
  %228 = fsub <2 x double> %210, %225
  %229 = fadd <2 x double> %228, %227
  %230 = fadd <2 x double> %223, %193
  %231 = fadd <2 x double> %230, %229
  %232 = fadd <2 x double> %224, %231
  %233 = fsub <2 x double> %224, %232
  %234 = fadd <2 x double> %231, %233
  %235 = bitcast <2 x double> %232 to <2 x i64>
  %236 = and <2 x i64> %235, <i64 -134217728, i64 -134217728>
  %237 = bitcast <2 x i64> %236 to <2 x double>
  %238 = fsub <2 x double> %232, %237
  %239 = fmul <2 x double> %232, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %240 = fmul <2 x double> %237, <double 0x401921FB50000000, double 0x401921FB50000000>
  %241 = bitcast <2 x double> %239 to <2 x i64>
  %242 = xor <2 x i64> %241, <i64 -9223372036854775808, i64 -9223372036854775808>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fmul <2 x double> %238, <double 0x401921FB50000000, double 0x401921FB50000000>
  %245 = fmul <2 x double> %237, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %246 = fmul <2 x double> %238, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %247 = fmul <2 x double> %232, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %248 = fmul <2 x double> %234, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %249 = fadd <2 x double> %240, %243
  %250 = fadd <2 x double> %244, %249
  %251 = fadd <2 x double> %245, %250
  %252 = fadd <2 x double> %246, %251
  %253 = fadd <2 x double> %247, %252
  %254 = fadd <2 x double> %248, %253
  %255 = and <2 x i64> %80, <i64 9223372036854775807, i64 9223372036854775807>
  %256 = bitcast <2 x i64> %255 to <2 x double>
  %257 = fcmp olt <2 x double> %256, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %258 = sext <2 x i1> %257 to <2 x i64>
  %259 = and <2 x i64> %258, %80
  %260 = xor <2 x i64> %258, <i64 -1, i64 -1>
  %261 = and <2 x i64> %241, %260
  %262 = or <2 x i64> %261, %259
  %263 = bitcast <2 x double> %254 to <2 x i64>
  %264 = and <2 x i64> %263, %260
  %265 = bitcast <2 x i64> %262 to <2 x double>
  %266 = bitcast <2 x i64> %264 to <2 x double>
  %267 = fadd <2 x double> %265, %266
  %268 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %269 = fcmp uno <2 x double> %0, zeroinitializer
  %270 = or <2 x i1> %268, %269
  %271 = select <2 x i1> %270, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %267
  br label %272

; <label>:272:                                    ; preds = %26, %53, %10
  %273 = phi <4 x i32> [ %15, %10 ], [ %37, %26 ], [ %190, %53 ]
  %274 = phi <2 x double> [ %19, %10 ], [ %52, %26 ], [ %271, %53 ]
  %275 = fmul <2 x double> %274, <double 5.000000e-01, double 5.000000e-01>
  %276 = fmul <2 x double> %275, %275
  %277 = fmul <2 x double> %276, %276
  %278 = fmul <2 x double> %277, %277
  %279 = fmul <2 x double> %276, <double 0x3F35445F555134ED, double 0x3F35445F555134ED>
  %280 = fadd <2 x double> %279, <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>
  %281 = fmul <2 x double> %276, <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>
  %282 = fadd <2 x double> %281, <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>
  %283 = fmul <2 x double> %277, %280
  %284 = fadd <2 x double> %282, %283
  %285 = fmul <2 x double> %276, <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>
  %286 = fadd <2 x double> %285, <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>
  %287 = fmul <2 x double> %276, <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>
  %288 = fadd <2 x double> %287, <double 0x3FC111111110E933, double 0x3FC111111110E933>
  %289 = fmul <2 x double> %277, %286
  %290 = fadd <2 x double> %288, %289
  %291 = fmul <2 x double> %278, %284
  %292 = fadd <2 x double> %290, %291
  %293 = fmul <2 x double> %276, %292
  %294 = fadd <2 x double> %293, <double 0x3FD5555555555568, double 0x3FD5555555555568>
  %295 = fmul <2 x double> %275, %294
  %296 = fmul <2 x double> %276, %295
  %297 = fadd <2 x double> %275, %296
  %298 = fmul <2 x double> %297, %297
  %299 = fadd <2 x double> %298, <double -1.000000e+00, double -1.000000e+00>
  %300 = fmul <2 x double> %297, <double -2.000000e+00, double -2.000000e+00>
  %301 = and <4 x i32> %273, <i32 1, i32 1, i32 0, i32 0>
  %302 = icmp eq <4 x i32> %301, <i32 1, i32 1, i32 0, i32 0>
  %303 = sext <4 x i1> %302 to <4 x i32>
  %304 = shufflevector <4 x i32> %303, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %305 = bitcast <4 x i32> %304 to <2 x i64>
  %306 = bitcast <2 x double> %299 to <2 x i64>
  %307 = xor <2 x i64> %306, <i64 -9223372036854775808, i64 -9223372036854775808>
  %308 = and <2 x i64> %307, %305
  %309 = xor <2 x i64> %305, <i64 -1, i64 -1>
  %310 = bitcast <2 x double> %300 to <2 x i64>
  %311 = and <2 x i64> %310, %309
  %312 = or <2 x i64> %308, %311
  %313 = bitcast <2 x i64> %312 to <2 x double>
  %314 = and <2 x i64> %310, %305
  %315 = and <2 x i64> %306, %309
  %316 = or <2 x i64> %315, %314
  %317 = bitcast <2 x i64> %316 to <2 x double>
  %318 = fdiv <2 x double> %313, %317
  %319 = fcmp oeq <2 x double> %0, zeroinitializer
  %320 = select <2 x i1> %319, <2 x double> %0, <2 x double> %318
  ret <2 x double> %320
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %24, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %11) #6
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %14 = sitofp <2 x i32> %13 to <2 x double>
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %14) #6
  %16 = fmul <2 x double> %14, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %17 = fadd <2 x double> %16, %0
  %18 = fmul <2 x double> %14, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %19 = fadd <2 x double> %18, %17
  %20 = fsub <2 x double> %17, %19
  %21 = fadd <2 x double> %18, %20
  %22 = bitcast <2 x double> %19 to <2 x i64>
  %23 = bitcast <2 x double> %21 to <2 x i64>
  br label %337

; <label>:24:                                     ; preds = %1
  %25 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %26 = sext <2 x i1> %25 to <2 x i64>
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %27) #6
  %29 = icmp eq i32 %28, 65535
  br i1 %29, label %30, label %119, !prof !2

; <label>:30:                                     ; preds = %24
  %31 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %31) #6
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %34 = sitofp <2 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %34, <double 0x4170000000000000, double 0x4170000000000000>
  %36 = and <2 x i64> %2, <i64 -134217728, i64 -134217728>
  %37 = bitcast <2 x i64> %36 to <2 x double>
  %38 = fsub <2 x double> %0, %37
  %39 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %40 = fmul <2 x double> %37, <double 0x3FE45F3068000000, double 0x3FE45F3068000000>
  %41 = bitcast <2 x double> %39 to <2 x i64>
  %42 = xor <2 x i64> %41, <i64 -9223372036854775808, i64 -9223372036854775808>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fmul <2 x double> %37, <double 0x3E4727220C000000, double 0x3E4727220C000000>
  %45 = fmul <2 x double> %38, <double 0x3FE45F3068000000, double 0x3FE45F3068000000>
  %46 = fmul <2 x double> %38, <double 0x3E4727220C000000, double 0x3E4727220C000000>
  %47 = fmul <2 x double> %0, <double 0xBC86B01EC5417056, double 0xBC86B01EC5417056>
  %48 = fadd <2 x double> %40, %43
  %49 = fadd <2 x double> %44, %48
  %50 = fadd <2 x double> %45, %49
  %51 = fadd <2 x double> %46, %50
  %52 = fadd <2 x double> %47, %51
  %53 = fcmp olt <2 x double> %0, zeroinitializer
  %54 = sext <2 x i1> %53 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -4620693217682128896, i64 -4620693217682128896>
  %56 = and <2 x i64> %54, <i64 4602678819172646912, i64 4602678819172646912>
  %57 = xor <2 x i64> %56, <i64 4602678819172646912, i64 4602678819172646912>
  %58 = or <2 x i64> %57, %55
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fsub <2 x double> %59, %35
  %61 = fadd <2 x double> %39, %60
  %62 = fsub <2 x double> %61, %39
  %63 = fsub <2 x double> %61, %62
  %64 = fsub <2 x double> %39, %63
  %65 = fsub <2 x double> %60, %62
  %66 = fadd <2 x double> %65, %64
  %67 = fadd <2 x double> %52, %66
  %68 = fadd <2 x double> %61, %67
  %69 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %68) #6
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %71 = sitofp <2 x i32> %70 to <2 x double>
  %72 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %71) #6
  %73 = fmul <2 x double> %35, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %74 = fadd <2 x double> %73, %0
  %75 = fmul <2 x double> %71, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %76 = fadd <2 x double> %75, %74
  %77 = fsub <2 x double> %74, %76
  %78 = fadd <2 x double> %75, %77
  %79 = fmul <2 x double> %35, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %80 = fadd <2 x double> %79, %76
  %81 = fsub <2 x double> %80, %76
  %82 = fsub <2 x double> %80, %81
  %83 = fsub <2 x double> %76, %82
  %84 = fsub <2 x double> %79, %81
  %85 = fadd <2 x double> %84, %83
  %86 = fadd <2 x double> %78, %85
  %87 = fmul <2 x double> %71, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %88 = fadd <2 x double> %87, %80
  %89 = fsub <2 x double> %88, %80
  %90 = fsub <2 x double> %88, %89
  %91 = fsub <2 x double> %80, %90
  %92 = fsub <2 x double> %87, %89
  %93 = fadd <2 x double> %92, %91
  %94 = fadd <2 x double> %93, %86
  %95 = fmul <2 x double> %35, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %96 = fadd <2 x double> %95, %88
  %97 = fsub <2 x double> %96, %88
  %98 = fsub <2 x double> %96, %97
  %99 = fsub <2 x double> %88, %98
  %100 = fsub <2 x double> %95, %97
  %101 = fadd <2 x double> %100, %99
  %102 = fadd <2 x double> %101, %94
  %103 = fmul <2 x double> %71, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %104 = fadd <2 x double> %103, %96
  %105 = fsub <2 x double> %104, %96
  %106 = fsub <2 x double> %104, %105
  %107 = fsub <2 x double> %96, %106
  %108 = fsub <2 x double> %103, %105
  %109 = fadd <2 x double> %108, %107
  %110 = fadd <2 x double> %109, %102
  %111 = fadd <2 x double> %35, %71
  %112 = fmul <2 x double> %111, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %113 = fadd <2 x double> %112, %104
  %114 = fsub <2 x double> %104, %113
  %115 = fadd <2 x double> %112, %114
  %116 = fadd <2 x double> %115, %110
  %117 = bitcast <2 x double> %113 to <2 x i64>
  %118 = bitcast <2 x double> %116 to <2 x i64>
  br label %337

; <label>:119:                                    ; preds = %24
  %120 = bitcast <2 x double> %0 to <4 x i32>
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %122 = lshr <4 x i32> %121, <i32 20, i32 20, i32 20, i32 20>
  %123 = and <4 x i32> %122, <i32 2047, i32 2047, i32 0, i32 0>
  %124 = add nsw <4 x i32> %123, <i32 -1078, i32 -1078, i32 0, i32 0>
  %125 = icmp sgt <4 x i32> %124, <i32 645, i32 645, i32 0, i32 0>
  %126 = select <4 x i1> %125, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %128 = and <4 x i32> %127, <i32 0, i32 -1, i32 0, i32 -1>
  %129 = shl <4 x i32> %128, <i32 20, i32 20, i32 20, i32 20>
  %130 = add <4 x i32> %129, %120
  %131 = bitcast <4 x i32> %130 to <2 x double>
  %132 = ashr <4 x i32> %124, <i32 31, i32 31, i32 31, i32 31>
  %133 = xor <4 x i32> %132, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %134 = and <4 x i32> %133, %124
  %135 = shl <4 x i32> %134, <i32 2, i32 2, i32 2, i32 2>
  %136 = extractelement <4 x i32> %135, i32 1
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %137
  %139 = load double, double* %138, align 8, !tbaa !3, !noalias !28
  %140 = extractelement <4 x i32> %135, i32 0
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %141
  %143 = load double, double* %142, align 8, !tbaa !3, !noalias !28
  %144 = insertelement <2 x double> undef, double %143, i32 0
  %145 = insertelement <2 x double> %144, double %139, i32 1
  %146 = bitcast <4 x i32> %130 to <2 x i64>
  %147 = and <2 x i64> %146, <i64 -134217728, i64 -134217728>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fsub <2 x double> %131, %148
  %150 = bitcast <2 x double> %145 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -134217728, i64 -134217728>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fsub <2 x double> %145, %152
  %154 = fmul <2 x double> %145, %131
  %155 = fmul <2 x double> %148, %152
  %156 = bitcast <2 x double> %154 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372036854775808, i64 -9223372036854775808>
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %149, %152
  %160 = fmul <2 x double> %153, %148
  %161 = fmul <2 x double> %149, %153
  %162 = fadd <2 x double> %155, %158
  %163 = fadd <2 x double> %159, %162
  %164 = fadd <2 x double> %160, %163
  %165 = fadd <2 x double> %161, %164
  %166 = and <2 x i64> %156, <i64 -9223372036854775808, i64 -9223372036854775808>
  %167 = or <2 x i64> %166, <i64 4841369599423283200, i64 4841369599423283200>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fmul <2 x double> %154, <double 4.000000e+00, double 4.000000e+00>
  %170 = bitcast <2 x double> %169 to <2 x i64>
  %171 = and <2 x i64> %170, <i64 9223372036854775807, i64 9223372036854775807>
  %172 = bitcast <2 x i64> %171 to <2 x double>
  %173 = fcmp ogt <2 x double> %172, <double 0x4330000000000000, double 0x4330000000000000>
  %174 = fadd <2 x double> %169, %168
  %175 = fsub <2 x double> %174, %168
  %176 = bitcast <2 x double> %175 to <2 x i64>
  %177 = or <2 x i64> %166, %176
  %178 = select <2 x i1> %173, <2 x i64> %170, <2 x i64> %177
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = and <2 x i64> %156, <i64 9223372036854775807, i64 9223372036854775807>
  %181 = bitcast <2 x i64> %180 to <2 x double>
  %182 = fcmp ogt <2 x double> %181, <double 0x4330000000000000, double 0x4330000000000000>
  %183 = fadd <2 x double> %154, %168
  %184 = fsub <2 x double> %183, %168
  %185 = bitcast <2 x double> %184 to <2 x i64>
  %186 = or <2 x i64> %166, %185
  %187 = select <2 x i1> %182, <2 x i64> %156, <2 x i64> %186
  %188 = bitcast <2 x i64> %187 to <2 x double>
  %189 = fmul <2 x double> %179, <double -2.500000e-01, double -2.500000e-01>
  %190 = fadd <2 x double> %154, %189
  %191 = fmul <2 x double> %188, <double -4.000000e+00, double -4.000000e+00>
  %192 = fadd <2 x double> %191, %179
  %193 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %192) #6
  %194 = fadd <2 x double> %165, %190
  %195 = fsub <2 x double> %190, %194
  %196 = fadd <2 x double> %165, %195
  %197 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %137
  %198 = load double, double* %197, align 8, !tbaa !3, !noalias !28
  %199 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %141
  %200 = load double, double* %199, align 8, !tbaa !3, !noalias !28
  %201 = insertelement <2 x double> undef, double %200, i32 0
  %202 = insertelement <2 x double> %201, double %198, i32 1
  %203 = bitcast <2 x double> %202 to <2 x i64>
  %204 = and <2 x i64> %203, <i64 -134217728, i64 -134217728>
  %205 = bitcast <2 x i64> %204 to <2 x double>
  %206 = fsub <2 x double> %202, %205
  %207 = fmul <2 x double> %202, %131
  %208 = fmul <2 x double> %148, %205
  %209 = bitcast <2 x double> %207 to <2 x i64>
  %210 = xor <2 x i64> %209, <i64 -9223372036854775808, i64 -9223372036854775808>
  %211 = bitcast <2 x i64> %210 to <2 x double>
  %212 = fmul <2 x double> %149, %205
  %213 = fmul <2 x double> %206, %148
  %214 = fmul <2 x double> %149, %206
  %215 = fadd <2 x double> %208, %211
  %216 = fadd <2 x double> %212, %215
  %217 = fadd <2 x double> %213, %216
  %218 = fadd <2 x double> %214, %217
  %219 = fadd <2 x double> %207, %194
  %220 = fsub <2 x double> %219, %194
  %221 = fsub <2 x double> %219, %220
  %222 = fsub <2 x double> %194, %221
  %223 = fsub <2 x double> %207, %220
  %224 = fadd <2 x double> %223, %222
  %225 = fadd <2 x double> %218, %196
  %226 = fadd <2 x double> %225, %224
  %227 = bitcast <2 x double> %219 to <2 x i64>
  %228 = and <2 x i64> %227, <i64 -9223372036854775808, i64 -9223372036854775808>
  %229 = or <2 x i64> %228, <i64 4841369599423283200, i64 4841369599423283200>
  %230 = bitcast <2 x i64> %229 to <2 x double>
  %231 = fmul <2 x double> %219, <double 4.000000e+00, double 4.000000e+00>
  %232 = bitcast <2 x double> %231 to <2 x i64>
  %233 = and <2 x i64> %232, <i64 9223372036854775807, i64 9223372036854775807>
  %234 = bitcast <2 x i64> %233 to <2 x double>
  %235 = fcmp ogt <2 x double> %234, <double 0x4330000000000000, double 0x4330000000000000>
  %236 = fadd <2 x double> %231, %230
  %237 = fsub <2 x double> %236, %230
  %238 = bitcast <2 x double> %237 to <2 x i64>
  %239 = or <2 x i64> %228, %238
  %240 = select <2 x i1> %235, <2 x i64> %232, <2 x i64> %239
  %241 = bitcast <2 x i64> %240 to <2 x double>
  %242 = and <2 x i64> %227, <i64 9223372036854775807, i64 9223372036854775807>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fcmp ogt <2 x double> %243, <double 0x4330000000000000, double 0x4330000000000000>
  %245 = fadd <2 x double> %219, %230
  %246 = fsub <2 x double> %245, %230
  %247 = bitcast <2 x double> %246 to <2 x i64>
  %248 = or <2 x i64> %228, %247
  %249 = select <2 x i1> %244, <2 x i64> %227, <2 x i64> %248
  %250 = bitcast <2 x i64> %249 to <2 x double>
  %251 = fmul <2 x double> %241, <double -2.500000e-01, double -2.500000e-01>
  %252 = fadd <2 x double> %219, %251
  %253 = fmul <2 x double> %250, <double -4.000000e+00, double -4.000000e+00>
  %254 = fadd <2 x double> %253, %241
  %255 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %254) #6
  %256 = add <4 x i32> %255, %193
  %257 = fadd <2 x double> %226, %252
  %258 = fsub <2 x double> %252, %257
  %259 = fadd <2 x double> %226, %258
  %260 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %137
  %261 = load double, double* %260, align 8, !tbaa !3, !noalias !28
  %262 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %141
  %263 = load double, double* %262, align 8, !tbaa !3, !noalias !28
  %264 = insertelement <2 x double> undef, double %263, i32 0
  %265 = insertelement <2 x double> %264, double %261, i32 1
  %266 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %137
  %267 = load double, double* %266, align 8, !tbaa !3, !noalias !28
  %268 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %141
  %269 = load double, double* %268, align 8, !tbaa !3, !noalias !28
  %270 = insertelement <2 x double> undef, double %269, i32 0
  %271 = insertelement <2 x double> %270, double %267, i32 1
  %272 = bitcast <2 x double> %265 to <2 x i64>
  %273 = and <2 x i64> %272, <i64 -134217728, i64 -134217728>
  %274 = bitcast <2 x i64> %273 to <2 x double>
  %275 = fsub <2 x double> %265, %274
  %276 = fmul <2 x double> %265, %131
  %277 = fmul <2 x double> %148, %274
  %278 = bitcast <2 x double> %276 to <2 x i64>
  %279 = xor <2 x i64> %278, <i64 -9223372036854775808, i64 -9223372036854775808>
  %280 = bitcast <2 x i64> %279 to <2 x double>
  %281 = fmul <2 x double> %275, %148
  %282 = fmul <2 x double> %149, %274
  %283 = fmul <2 x double> %149, %275
  %284 = fmul <2 x double> %271, %131
  %285 = fadd <2 x double> %277, %280
  %286 = fadd <2 x double> %281, %285
  %287 = fadd <2 x double> %282, %286
  %288 = fadd <2 x double> %283, %287
  %289 = fadd <2 x double> %284, %288
  %290 = fadd <2 x double> %276, %257
  %291 = fsub <2 x double> %290, %257
  %292 = fsub <2 x double> %290, %291
  %293 = fsub <2 x double> %257, %292
  %294 = fsub <2 x double> %276, %291
  %295 = fadd <2 x double> %294, %293
  %296 = fadd <2 x double> %289, %259
  %297 = fadd <2 x double> %296, %295
  %298 = fadd <2 x double> %290, %297
  %299 = fsub <2 x double> %290, %298
  %300 = fadd <2 x double> %297, %299
  %301 = bitcast <2 x double> %298 to <2 x i64>
  %302 = and <2 x i64> %301, <i64 -134217728, i64 -134217728>
  %303 = bitcast <2 x i64> %302 to <2 x double>
  %304 = fsub <2 x double> %298, %303
  %305 = fmul <2 x double> %298, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %306 = fmul <2 x double> %303, <double 0x401921FB50000000, double 0x401921FB50000000>
  %307 = bitcast <2 x double> %305 to <2 x i64>
  %308 = xor <2 x i64> %307, <i64 -9223372036854775808, i64 -9223372036854775808>
  %309 = bitcast <2 x i64> %308 to <2 x double>
  %310 = fmul <2 x double> %304, <double 0x401921FB50000000, double 0x401921FB50000000>
  %311 = fmul <2 x double> %303, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %312 = fmul <2 x double> %304, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %313 = fmul <2 x double> %298, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %314 = fmul <2 x double> %300, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %315 = fadd <2 x double> %306, %309
  %316 = fadd <2 x double> %310, %315
  %317 = fadd <2 x double> %311, %316
  %318 = fadd <2 x double> %312, %317
  %319 = fadd <2 x double> %313, %318
  %320 = fadd <2 x double> %314, %319
  %321 = and <2 x i64> %146, <i64 9223372036854775807, i64 9223372036854775807>
  %322 = bitcast <2 x i64> %321 to <2 x double>
  %323 = fcmp olt <2 x double> %322, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %324 = sext <2 x i1> %323 to <2 x i64>
  %325 = and <2 x i64> %324, %146
  %326 = xor <2 x i64> %324, <i64 -1, i64 -1>
  %327 = and <2 x i64> %307, %326
  %328 = bitcast <2 x double> %320 to <2 x i64>
  %329 = and <2 x i64> %328, %326
  %330 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %331 = fcmp uno <2 x double> %0, zeroinitializer
  %332 = or <2 x i1> %330, %331
  %333 = sext <2 x i1> %332 to <2 x i64>
  %334 = or <2 x i64> %325, %333
  %335 = or <2 x i64> %334, %327
  %336 = or <2 x i64> %329, %333
  br label %337

; <label>:337:                                    ; preds = %30, %119, %10
  %338 = phi <2 x i64> [ %335, %119 ], [ %117, %30 ], [ %22, %10 ]
  %339 = phi <2 x i64> [ %336, %119 ], [ %118, %30 ], [ %23, %10 ]
  %340 = phi <4 x i32> [ %256, %119 ], [ %72, %30 ], [ %15, %10 ]
  %341 = bitcast <2 x i64> %338 to <2 x double>
  %342 = bitcast <2 x i64> %339 to <2 x double>
  %343 = fmul <2 x double> %341, <double 5.000000e-01, double 5.000000e-01>
  %344 = fmul <2 x double> %342, <double 5.000000e-01, double 5.000000e-01>
  %345 = bitcast <2 x double> %343 to <2 x i64>
  %346 = and <2 x i64> %345, <i64 -134217728, i64 -134217728>
  %347 = bitcast <2 x i64> %346 to <2 x double>
  %348 = fsub <2 x double> %343, %347
  %349 = fmul <2 x double> %343, %343
  %350 = fmul <2 x double> %347, %347
  %351 = bitcast <2 x double> %349 to <2 x i64>
  %352 = xor <2 x i64> %351, <i64 -9223372036854775808, i64 -9223372036854775808>
  %353 = bitcast <2 x i64> %352 to <2 x double>
  %354 = fadd <2 x double> %347, %347
  %355 = fmul <2 x double> %354, %348
  %356 = fmul <2 x double> %348, %348
  %357 = fadd <2 x double> %344, %344
  %358 = fmul <2 x double> %343, %357
  %359 = fadd <2 x double> %350, %353
  %360 = fadd <2 x double> %359, %355
  %361 = fadd <2 x double> %356, %360
  %362 = fadd <2 x double> %358, %361
  %363 = fmul <2 x double> %349, %349
  %364 = fmul <2 x double> %363, %363
  %365 = fmul <2 x double> %349, <double 0x3F35445F555134ED, double 0x3F35445F555134ED>
  %366 = fadd <2 x double> %365, <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>
  %367 = fmul <2 x double> %349, <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>
  %368 = fadd <2 x double> %367, <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>
  %369 = fmul <2 x double> %363, %366
  %370 = fadd <2 x double> %368, %369
  %371 = fmul <2 x double> %349, <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>
  %372 = fadd <2 x double> %371, <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>
  %373 = fmul <2 x double> %349, <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>
  %374 = fadd <2 x double> %373, <double 0x3FC111111110E933, double 0x3FC111111110E933>
  %375 = fmul <2 x double> %363, %372
  %376 = fadd <2 x double> %374, %375
  %377 = fmul <2 x double> %364, %370
  %378 = fadd <2 x double> %376, %377
  %379 = fmul <2 x double> %349, %378
  %380 = fadd <2 x double> %379, <double 0x3FD5555555555568, double 0x3FD5555555555568>
  %381 = and <2 x i64> %351, <i64 -134217728, i64 -134217728>
  %382 = bitcast <2 x i64> %381 to <2 x double>
  %383 = fsub <2 x double> %349, %382
  %384 = fmul <2 x double> %343, %349
  %385 = fmul <2 x double> %347, %382
  %386 = bitcast <2 x double> %384 to <2 x i64>
  %387 = xor <2 x i64> %386, <i64 -9223372036854775808, i64 -9223372036854775808>
  %388 = bitcast <2 x i64> %387 to <2 x double>
  %389 = fmul <2 x double> %383, %347
  %390 = fmul <2 x double> %348, %382
  %391 = fmul <2 x double> %348, %383
  %392 = fmul <2 x double> %349, %344
  %393 = fmul <2 x double> %343, %362
  %394 = fadd <2 x double> %385, %388
  %395 = fadd <2 x double> %389, %394
  %396 = fadd <2 x double> %390, %395
  %397 = fadd <2 x double> %391, %396
  %398 = fadd <2 x double> %392, %397
  %399 = fadd <2 x double> %393, %398
  %400 = and <2 x i64> %386, <i64 -134217728, i64 -134217728>
  %401 = bitcast <2 x i64> %400 to <2 x double>
  %402 = fsub <2 x double> %384, %401
  %403 = bitcast <2 x double> %380 to <2 x i64>
  %404 = and <2 x i64> %403, <i64 -134217728, i64 -134217728>
  %405 = bitcast <2 x i64> %404 to <2 x double>
  %406 = fsub <2 x double> %380, %405
  %407 = fmul <2 x double> %384, %380
  %408 = fmul <2 x double> %401, %405
  %409 = bitcast <2 x double> %407 to <2 x i64>
  %410 = xor <2 x i64> %409, <i64 -9223372036854775808, i64 -9223372036854775808>
  %411 = bitcast <2 x i64> %410 to <2 x double>
  %412 = fmul <2 x double> %402, %405
  %413 = fmul <2 x double> %406, %401
  %414 = fmul <2 x double> %402, %406
  %415 = fmul <2 x double> %380, %399
  %416 = fadd <2 x double> %408, %411
  %417 = fadd <2 x double> %412, %416
  %418 = fadd <2 x double> %413, %417
  %419 = fadd <2 x double> %414, %418
  %420 = fadd <2 x double> %415, %419
  %421 = fadd <2 x double> %343, %407
  %422 = fsub <2 x double> %343, %421
  %423 = fadd <2 x double> %407, %422
  %424 = fadd <2 x double> %344, %423
  %425 = fadd <2 x double> %424, %420
  %426 = bitcast <2 x double> %421 to <2 x i64>
  %427 = and <2 x i64> %426, <i64 -134217728, i64 -134217728>
  %428 = bitcast <2 x i64> %427 to <2 x double>
  %429 = fsub <2 x double> %421, %428
  %430 = fmul <2 x double> %421, %421
  %431 = fmul <2 x double> %428, %428
  %432 = bitcast <2 x double> %430 to <2 x i64>
  %433 = xor <2 x i64> %432, <i64 -9223372036854775808, i64 -9223372036854775808>
  %434 = bitcast <2 x i64> %433 to <2 x double>
  %435 = fadd <2 x double> %428, %428
  %436 = fmul <2 x double> %435, %429
  %437 = fmul <2 x double> %429, %429
  %438 = fadd <2 x double> %425, %425
  %439 = fmul <2 x double> %421, %438
  %440 = fadd <2 x double> %431, %434
  %441 = fadd <2 x double> %440, %436
  %442 = fadd <2 x double> %437, %441
  %443 = fadd <2 x double> %442, %439
  %444 = fadd <2 x double> %430, <double -1.000000e+00, double -1.000000e+00>
  %445 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %444
  %446 = fadd <2 x double> %430, %445
  %447 = fadd <2 x double> %446, %443
  %448 = fmul <2 x double> %421, <double -2.000000e+00, double -2.000000e+00>
  %449 = fmul <2 x double> %425, <double -2.000000e+00, double -2.000000e+00>
  %450 = and <4 x i32> %340, <i32 1, i32 1, i32 0, i32 0>
  %451 = icmp eq <4 x i32> %450, <i32 1, i32 1, i32 0, i32 0>
  %452 = sext <4 x i1> %451 to <4 x i32>
  %453 = shufflevector <4 x i32> %452, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %454 = bitcast <4 x i32> %453 to <2 x i64>
  %455 = bitcast <2 x double> %444 to <2 x i64>
  %456 = xor <2 x i64> %455, <i64 -9223372036854775808, i64 -9223372036854775808>
  %457 = bitcast <2 x double> %447 to <2 x i64>
  %458 = xor <2 x i64> %457, <i64 -9223372036854775808, i64 -9223372036854775808>
  %459 = and <2 x i64> %456, %454
  %460 = xor <2 x i64> %454, <i64 -1, i64 -1>
  %461 = bitcast <2 x double> %448 to <2 x i64>
  %462 = and <2 x i64> %461, %460
  %463 = or <2 x i64> %459, %462
  %464 = and <2 x i64> %458, %454
  %465 = bitcast <2 x double> %449 to <2 x i64>
  %466 = and <2 x i64> %465, %460
  %467 = or <2 x i64> %464, %466
  %468 = and <2 x i64> %461, %454
  %469 = and <2 x i64> %455, %460
  %470 = or <2 x i64> %469, %468
  %471 = and <2 x i64> %465, %454
  %472 = and <2 x i64> %457, %460
  %473 = or <2 x i64> %472, %471
  %474 = bitcast <2 x i64> %463 to <2 x double>
  %475 = bitcast <2 x i64> %467 to <2 x double>
  %476 = bitcast <2 x i64> %470 to <2 x double>
  %477 = bitcast <2 x i64> %473 to <2 x double>
  %478 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %476
  %479 = and <2 x i64> %470, <i64 -134217728, i64 -134217728>
  %480 = bitcast <2 x i64> %479 to <2 x double>
  %481 = fsub <2 x double> %476, %480
  %482 = bitcast <2 x double> %478 to <2 x i64>
  %483 = and <2 x i64> %482, <i64 -134217728, i64 -134217728>
  %484 = bitcast <2 x i64> %483 to <2 x double>
  %485 = fsub <2 x double> %478, %484
  %486 = and <2 x i64> %463, <i64 -134217728, i64 -134217728>
  %487 = bitcast <2 x i64> %486 to <2 x double>
  %488 = fsub <2 x double> %474, %487
  %489 = fmul <2 x double> %478, %474
  %490 = fmul <2 x double> %487, %484
  %491 = fsub <2 x double> %490, %489
  %492 = fmul <2 x double> %485, %487
  %493 = fmul <2 x double> %488, %484
  %494 = fmul <2 x double> %488, %485
  %495 = fmul <2 x double> %480, %484
  %496 = fmul <2 x double> %485, %480
  %497 = fmul <2 x double> %481, %484
  %498 = fmul <2 x double> %481, %485
  %499 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %495
  %500 = fsub <2 x double> %499, %496
  %501 = fsub <2 x double> %500, %497
  %502 = fsub <2 x double> %501, %498
  %503 = fmul <2 x double> %489, %502
  %504 = fadd <2 x double> %491, %492
  %505 = fadd <2 x double> %493, %504
  %506 = fadd <2 x double> %494, %505
  %507 = fadd <2 x double> %506, %503
  %508 = fmul <2 x double> %489, %477
  %509 = fsub <2 x double> %475, %508
  %510 = fmul <2 x double> %478, %509
  %511 = fadd <2 x double> %507, %510
  %512 = fadd <2 x double> %489, %511
  %513 = fcmp oeq <2 x double> %0, zeroinitializer
  %514 = select <2 x i1> %513, <2 x double> %0, <2 x double> %512
  ret <2 x double> %514
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u35sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <4 x i32>
  %7 = and <4 x i32> %6, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %8 = icmp eq <4 x i32> %7, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 3, i32 undef>
  %11 = and <4 x i32> %10, %9
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -4294967298, i64 0>
  %15 = bitcast <2 x double> %1 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = bitcast <2 x i64> %14 to <4 x i32>
  %19 = add <4 x i32> %18, <i32 1, i32 1, i32 undef, i32 undef>
  %20 = fcmp olt <2 x double> %17, %5
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = and <4 x i32> %19, %23
  %26 = xor <2 x i64> %24, <i64 -1, i64 undef>
  %27 = and <2 x i64> %14, %26
  %28 = or <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %29 = select <2 x i1> %20, <2 x i64> %28, <2 x i64> %4
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %17, <2 x double> %5) #6
  %32 = fdiv <2 x double> %30, %31
  %33 = fmul <2 x double> %32, %32
  %34 = fmul <2 x double> %33, %33
  %35 = fmul <2 x double> %34, %34
  %36 = fmul <2 x double> %35, %35
  %37 = fmul <2 x double> %36, %36
  %38 = fmul <2 x double> %33, <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>
  %39 = fadd <2 x double> %38, <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>
  %40 = fmul <2 x double> %34, <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>
  %41 = fadd <2 x double> %40, %39
  %42 = fmul <2 x double> %33, <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>
  %43 = fadd <2 x double> %42, <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>
  %44 = fmul <2 x double> %33, <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>
  %45 = fadd <2 x double> %44, <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>
  %46 = fmul <2 x double> %34, %43
  %47 = fadd <2 x double> %45, %46
  %48 = fmul <2 x double> %33, <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>
  %49 = fadd <2 x double> %48, <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>
  %50 = fmul <2 x double> %33, <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>
  %51 = fadd <2 x double> %50, <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>
  %52 = fmul <2 x double> %34, %49
  %53 = fadd <2 x double> %51, %52
  %54 = fmul <2 x double> %35, %47
  %55 = fadd <2 x double> %53, %54
  %56 = fmul <2 x double> %33, <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>
  %57 = fadd <2 x double> %56, <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>
  %58 = fmul <2 x double> %33, <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>
  %59 = fadd <2 x double> %58, <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>
  %60 = fmul <2 x double> %34, %57
  %61 = fadd <2 x double> %59, %60
  %62 = fmul <2 x double> %33, <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>
  %63 = fadd <2 x double> %62, <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>
  %64 = fmul <2 x double> %33, <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>
  %65 = fadd <2 x double> %64, <double 0xBFD55555555553C5, double 0xBFD55555555553C5>
  %66 = fmul <2 x double> %34, %63
  %67 = fadd <2 x double> %65, %66
  %68 = fmul <2 x double> %35, %61
  %69 = fadd <2 x double> %67, %68
  %70 = fmul <2 x double> %36, %55
  %71 = fadd <2 x double> %69, %70
  %72 = fmul <2 x double> %41, %37
  %73 = fadd <2 x double> %72, %71
  %74 = fmul <2 x double> %33, %73
  %75 = fmul <2 x double> %32, %74
  %76 = fadd <2 x double> %32, %75
  %77 = bitcast <2 x i64> %27 to <4 x i32>
  %78 = or <4 x i32> %25, %77
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %80 = sitofp <2 x i32> %79 to <2 x double>
  %81 = fmul <2 x double> %80, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %82 = fadd <2 x double> %81, %76
  %83 = bitcast <2 x double> %82 to <2 x i64>
  %84 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = xor <2 x i64> %84, %83
  %86 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %87 = fcmp oeq <2 x double> %1, zeroinitializer
  %88 = or <2 x i1> %86, %87
  %89 = or <2 x i64> %84, <i64 4609753056924675352, i64 4609753056924675352>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %90
  %92 = bitcast <2 x double> %91 to <2 x i64>
  %93 = select <2 x i1> %86, <2 x i64> %92, <2 x i64> <i64 4609753056924675352, i64 4609753056924675352>
  %94 = select <2 x i1> %88, <2 x i64> %93, <2 x i64> %85
  %95 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %96 = or <2 x i64> %84, <i64 4605249457297304856, i64 4605249457297304856>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %97
  %99 = bitcast <2 x double> %98 to <2 x i64>
  %100 = select <2 x i1> %86, <2 x i64> %99, <2 x i64> <i64 4609753056924675352, i64 4609753056924675352>
  %101 = select <2 x i1> %95, <2 x i64> %100, <2 x i64> %94
  %102 = fcmp oeq <2 x double> %0, zeroinitializer
  %103 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %104 = and <4 x i32> %103, %9
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 4614256656552045848, i64 4614256656552045848>
  %107 = select <2 x i1> %102, <2 x i64> %106, <2 x i64> %101
  %108 = fcmp uno <2 x double> %0, %1
  %109 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %110 = xor <2 x i64> %107, %109
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = select <2 x i1> %108, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %111
  ret <2 x double> %112
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u10sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x4000000000001, double 0x4000000000001>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %1, <double 0x4340000000000000, double 0x4340000000000000>
  %9 = bitcast <2 x double> %8 to <2 x i64>
  %10 = and <2 x i64> %7, %9
  %11 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %12 = and <2 x i64> %11, %3
  %13 = or <2 x i64> %12, %10
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = fmul <2 x double> %0, <double 0x4340000000000000, double 0x4340000000000000>
  %16 = bitcast <2 x double> %15 to <2 x i64>
  %17 = and <2 x i64> %7, %16
  %18 = bitcast <2 x double> %0 to <2 x i64>
  %19 = and <2 x i64> %11, %18
  %20 = or <2 x i64> %19, %17
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = and <2 x i64> %20, <i64 9223372036854775807, i64 9223372036854775807>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = bitcast <2 x i64> %13 to <4 x i32>
  %25 = and <4 x i32> %24, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %26 = icmp eq <4 x i32> %25, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %27 = sext <4 x i1> %26 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 3, i32 undef>
  %29 = and <4 x i32> %28, %27
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %31 = bitcast <4 x i32> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -4294967298, i64 0>
  %33 = fcmp olt <2 x double> %14, zeroinitializer
  %34 = select <2 x i1> %33, <2 x i64> <i64 -9223372036854775808, i64 -9223372036854775808>, <2 x i64> zeroinitializer
  %35 = xor <2 x i64> %34, %13
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = bitcast <2 x i64> %32 to <4 x i32>
  %38 = add <4 x i32> %37, <i32 1, i32 1, i32 undef, i32 undef>
  %39 = fcmp olt <2 x double> %36, %23
  %40 = sext <2 x i1> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <4 x i32>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = and <4 x i32> %38, %42
  %45 = xor <2 x i64> %43, <i64 -1, i64 undef>
  %46 = and <2 x i64> %45, %32
  %47 = xor <2 x i64> %35, <i64 -9223372036854775808, i64 -9223372036854775808>
  %48 = xor <2 x i64> %34, <i64 -9223372036854775808, i64 -9223372036854775808>
  %49 = and <2 x i64> %47, %40
  %50 = xor <2 x i64> %40, <i64 -1, i64 -1>
  %51 = and <2 x i64> %22, %50
  %52 = or <2 x i64> %51, %49
  %53 = and <2 x i64> %48, %40
  %54 = and <2 x i64> %22, %40
  %55 = and <2 x i64> %35, %50
  %56 = or <2 x i64> %55, %54
  %57 = and <2 x i64> %34, %50
  %58 = bitcast <2 x i64> %52 to <2 x double>
  %59 = bitcast <2 x i64> %53 to <2 x double>
  %60 = bitcast <2 x i64> %56 to <2 x double>
  %61 = bitcast <2 x i64> %57 to <2 x double>
  %62 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %60
  %63 = and <2 x i64> %56, <i64 -134217728, i64 -134217728>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = fsub <2 x double> %60, %64
  %66 = bitcast <2 x double> %62 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -134217728, i64 -134217728>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fsub <2 x double> %62, %68
  %70 = and <2 x i64> %52, <i64 -134217728, i64 -134217728>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fsub <2 x double> %58, %71
  %73 = fmul <2 x double> %62, %58
  %74 = fmul <2 x double> %71, %68
  %75 = fsub <2 x double> %74, %73
  %76 = fmul <2 x double> %69, %71
  %77 = fmul <2 x double> %72, %68
  %78 = fmul <2 x double> %72, %69
  %79 = fmul <2 x double> %64, %68
  %80 = fmul <2 x double> %69, %64
  %81 = fmul <2 x double> %65, %68
  %82 = fmul <2 x double> %65, %69
  %83 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %79
  %84 = fsub <2 x double> %83, %80
  %85 = fsub <2 x double> %84, %81
  %86 = fsub <2 x double> %85, %82
  %87 = fmul <2 x double> %73, %86
  %88 = fadd <2 x double> %75, %76
  %89 = fadd <2 x double> %77, %88
  %90 = fadd <2 x double> %78, %89
  %91 = fadd <2 x double> %90, %87
  %92 = fmul <2 x double> %73, %61
  %93 = fsub <2 x double> %59, %92
  %94 = fmul <2 x double> %62, %93
  %95 = fadd <2 x double> %94, %91
  %96 = bitcast <2 x double> %73 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -134217728, i64 -134217728>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fsub <2 x double> %73, %98
  %100 = fmul <2 x double> %73, %73
  %101 = fmul <2 x double> %98, %98
  %102 = bitcast <2 x double> %100 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fadd <2 x double> %98, %98
  %106 = fmul <2 x double> %105, %99
  %107 = fmul <2 x double> %99, %99
  %108 = fadd <2 x double> %95, %95
  %109 = fmul <2 x double> %73, %108
  %110 = fadd <2 x double> %101, %104
  %111 = fadd <2 x double> %110, %106
  %112 = fadd <2 x double> %107, %111
  %113 = fadd <2 x double> %112, %109
  %114 = fadd <2 x double> %100, %113
  %115 = fsub <2 x double> %100, %114
  %116 = fadd <2 x double> %113, %115
  %117 = bitcast <2 x double> %114 to <2 x i64>
  %118 = fmul <2 x double> %114, %114
  %119 = fmul <2 x double> %118, %118
  %120 = fmul <2 x double> %119, %119
  %121 = fmul <2 x double> %114, <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>
  %122 = fadd <2 x double> %121, <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>
  %123 = fmul <2 x double> %114, <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>
  %124 = fadd <2 x double> %123, <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>
  %125 = fmul <2 x double> %118, %122
  %126 = fadd <2 x double> %124, %125
  %127 = fmul <2 x double> %114, <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>
  %128 = fadd <2 x double> %127, <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>
  %129 = fmul <2 x double> %114, <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>
  %130 = fadd <2 x double> %129, <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>
  %131 = fmul <2 x double> %118, %128
  %132 = fadd <2 x double> %130, %131
  %133 = fmul <2 x double> %119, %126
  %134 = fadd <2 x double> %132, %133
  %135 = fmul <2 x double> %114, <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>
  %136 = fadd <2 x double> %135, <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>
  %137 = fmul <2 x double> %114, <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>
  %138 = fadd <2 x double> %137, <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>
  %139 = fmul <2 x double> %118, %136
  %140 = fadd <2 x double> %138, %139
  %141 = fmul <2 x double> %114, <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>
  %142 = fadd <2 x double> %141, <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>
  %143 = fmul <2 x double> %114, <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>
  %144 = fadd <2 x double> %143, <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>
  %145 = fmul <2 x double> %118, %142
  %146 = fadd <2 x double> %144, %145
  %147 = fmul <2 x double> %119, %140
  %148 = fadd <2 x double> %146, %147
  %149 = fmul <2 x double> %120, %134
  %150 = fadd <2 x double> %148, %149
  %151 = fmul <2 x double> %114, %150
  %152 = fadd <2 x double> %151, <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>
  %153 = fmul <2 x double> %114, %152
  %154 = fadd <2 x double> %153, <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>
  %155 = fmul <2 x double> %114, %154
  %156 = fadd <2 x double> %155, <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>
  %157 = fmul <2 x double> %114, %156
  %158 = fadd <2 x double> %157, <double 0xBFD555555555543A, double 0xBFD555555555543A>
  %159 = and <2 x i64> %117, <i64 -134217728, i64 -134217728>
  %160 = bitcast <2 x i64> %159 to <2 x double>
  %161 = fsub <2 x double> %114, %160
  %162 = fmul <2 x double> %73, %114
  %163 = fmul <2 x double> %98, %160
  %164 = bitcast <2 x double> %162 to <2 x i64>
  %165 = xor <2 x i64> %164, <i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = bitcast <2 x i64> %165 to <2 x double>
  %167 = fmul <2 x double> %99, %160
  %168 = fmul <2 x double> %161, %98
  %169 = fmul <2 x double> %99, %161
  %170 = fmul <2 x double> %73, %116
  %171 = fmul <2 x double> %95, %114
  %172 = fadd <2 x double> %163, %166
  %173 = fadd <2 x double> %167, %172
  %174 = fadd <2 x double> %168, %173
  %175 = fadd <2 x double> %169, %174
  %176 = fadd <2 x double> %170, %175
  %177 = fadd <2 x double> %171, %176
  %178 = and <2 x i64> %164, <i64 -134217728, i64 -134217728>
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = fsub <2 x double> %162, %179
  %181 = bitcast <2 x double> %158 to <2 x i64>
  %182 = and <2 x i64> %181, <i64 -134217728, i64 -134217728>
  %183 = bitcast <2 x i64> %182 to <2 x double>
  %184 = fsub <2 x double> %158, %183
  %185 = fmul <2 x double> %162, %158
  %186 = fmul <2 x double> %179, %183
  %187 = bitcast <2 x double> %185 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 -9223372036854775808, i64 -9223372036854775808>
  %189 = bitcast <2 x i64> %188 to <2 x double>
  %190 = fmul <2 x double> %180, %183
  %191 = fmul <2 x double> %184, %179
  %192 = fmul <2 x double> %180, %184
  %193 = fmul <2 x double> %177, %158
  %194 = fadd <2 x double> %186, %189
  %195 = fadd <2 x double> %190, %194
  %196 = fadd <2 x double> %191, %195
  %197 = fadd <2 x double> %192, %196
  %198 = fadd <2 x double> %193, %197
  %199 = fadd <2 x double> %73, %185
  %200 = fsub <2 x double> %73, %199
  %201 = fadd <2 x double> %185, %200
  %202 = fadd <2 x double> %95, %201
  %203 = fadd <2 x double> %202, %198
  %204 = bitcast <2 x i64> %46 to <4 x i32>
  %205 = or <4 x i32> %44, %204
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %207 = sitofp <2 x i32> %206 to <2 x double>
  %208 = bitcast <2 x double> %207 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -134217728, i64 -134217728>
  %210 = bitcast <2 x i64> %209 to <2 x double>
  %211 = fsub <2 x double> %207, %210
  %212 = fmul <2 x double> %207, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %213 = fmul <2 x double> %210, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %214 = bitcast <2 x double> %212 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372036854775808, i64 -9223372036854775808>
  %216 = bitcast <2 x i64> %215 to <2 x double>
  %217 = fmul <2 x double> %210, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %218 = fmul <2 x double> %211, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %219 = fmul <2 x double> %211, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %220 = fmul <2 x double> %207, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %221 = fadd <2 x double> %213, %216
  %222 = fadd <2 x double> %217, %221
  %223 = fadd <2 x double> %218, %222
  %224 = fadd <2 x double> %219, %223
  %225 = fadd <2 x double> %220, %224
  %226 = fadd <2 x double> %212, %199
  %227 = fsub <2 x double> %212, %226
  %228 = fadd <2 x double> %199, %227
  %229 = fadd <2 x double> %225, %228
  %230 = fadd <2 x double> %229, %203
  %231 = fadd <2 x double> %226, %230
  %232 = bitcast <2 x double> %231 to <2 x i64>
  %233 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %234 = xor <2 x i64> %233, %232
  %235 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %236 = bitcast <2 x i64> %235 to <2 x double>
  %237 = fcmp oeq <2 x double> %236, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %238 = fcmp oeq <2 x double> %14, zeroinitializer
  %239 = or <2 x i1> %237, %238
  %240 = or <2 x i64> %233, <i64 4609753056924675352, i64 4609753056924675352>
  %241 = bitcast <2 x i64> %240 to <2 x double>
  %242 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %241
  %243 = bitcast <2 x double> %242 to <2 x i64>
  %244 = select <2 x i1> %237, <2 x i64> %243, <2 x i64> <i64 4609753056924675352, i64 4609753056924675352>
  %245 = select <2 x i1> %239, <2 x i64> %244, <2 x i64> %234
  %246 = fcmp oeq <2 x double> %23, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %247 = or <2 x i64> %233, <i64 4605249457297304856, i64 4605249457297304856>
  %248 = bitcast <2 x i64> %247 to <2 x double>
  %249 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %248
  %250 = bitcast <2 x double> %249 to <2 x i64>
  %251 = select <2 x i1> %237, <2 x i64> %250, <2 x i64> <i64 4609753056924675352, i64 4609753056924675352>
  %252 = select <2 x i1> %246, <2 x i64> %251, <2 x i64> %245
  %253 = fcmp oeq <2 x double> %21, zeroinitializer
  %254 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %255 = and <4 x i32> %254, %27
  %256 = bitcast <4 x i32> %255 to <2 x i64>
  %257 = and <2 x i64> %256, <i64 4614256656552045848, i64 4614256656552045848>
  %258 = select <2 x i1> %253, <2 x i64> %257, <2 x i64> %252
  %259 = fcmp uno <2 x double> %21, %14
  %260 = and <2 x i64> %20, <i64 -9223372036854775808, i64 -9223372036854775808>
  %261 = xor <2 x i64> %258, %260
  %262 = bitcast <2 x i64> %261 to <2 x double>
  %263 = select <2 x i1> %259, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %262
  ret <2 x double> %263
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x double> %7 to <2 x i64>
  %11 = and <2 x i64> %6, %10
  %12 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %13 = bitcast <2 x double> %9 to <2 x i64>
  %14 = and <2 x i64> %13, %12
  %15 = or <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %16) #6
  %18 = and <2 x i64> %3, %6
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = and <2 x i64> %19, %12
  %21 = or <2 x i64> %20, %18
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = fmul <2 x double> %16, %16
  %24 = fmul <2 x double> %23, %23
  %25 = fmul <2 x double> %24, %24
  %26 = fmul <2 x double> %16, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %27 = fadd <2 x double> %26, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %28 = fmul <2 x double> %16, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %29 = fadd <2 x double> %28, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %30 = fmul <2 x double> %23, %27
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %16, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %33 = fadd <2 x double> %32, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %34 = fmul <2 x double> %16, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %35 = fadd <2 x double> %34, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %36 = fmul <2 x double> %23, %33
  %37 = fadd <2 x double> %35, %36
  %38 = fmul <2 x double> %16, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %39 = fadd <2 x double> %38, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %40 = fmul <2 x double> %16, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %41 = fadd <2 x double> %40, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %42 = fmul <2 x double> %23, %39
  %43 = fadd <2 x double> %41, %42
  %44 = fmul <2 x double> %24, %37
  %45 = fadd <2 x double> %43, %44
  %46 = fmul <2 x double> %25, %31
  %47 = fadd <2 x double> %46, %45
  %48 = fmul <2 x double> %16, %22
  %49 = fmul <2 x double> %47, %48
  %50 = fadd <2 x double> %49, %22
  %51 = fmul <2 x double> %50, <double -2.000000e+00, double -2.000000e+00>
  %52 = fadd <2 x double> %51, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %53 = bitcast <2 x double> %50 to <2 x i64>
  %54 = and <2 x i64> %53, %6
  %55 = bitcast <2 x double> %52 to <2 x i64>
  %56 = and <2 x i64> %55, %12
  %57 = or <2 x i64> %56, %54
  %58 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %59 = xor <2 x i64> %57, %58
  %60 = bitcast <2 x i64> %59 to <2 x double>
  ret <2 x double> %60
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x double> %7 to <2 x i64>
  %11 = and <2 x i64> %6, %10
  %12 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %13 = bitcast <2 x double> %9 to <2 x i64>
  %14 = and <2 x i64> %13, %12
  %15 = or <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %16) #6
  %18 = bitcast <2 x double> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -134217728, i64 -134217728>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fsub <2 x double> %17, %20
  %22 = fmul <2 x double> %17, %17
  %23 = fmul <2 x double> %20, %20
  %24 = bitcast <2 x double> %22 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fmul <2 x double> %21, %20
  %28 = fmul <2 x double> %21, %21
  %29 = fadd <2 x double> %23, %26
  %30 = fadd <2 x double> %27, %29
  %31 = fadd <2 x double> %27, %30
  %32 = fadd <2 x double> %28, %31
  %33 = fadd <2 x double> %22, %16
  %34 = fsub <2 x double> %33, %16
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %16, %35
  %37 = fsub <2 x double> %22, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %38, %32
  %40 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %17
  %41 = bitcast <2 x double> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -134217728, i64 -134217728>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fsub <2 x double> %40, %43
  %45 = fmul <2 x double> %20, %43
  %46 = fmul <2 x double> %44, %20
  %47 = fmul <2 x double> %21, %43
  %48 = fmul <2 x double> %21, %44
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %50 = fsub <2 x double> %49, %46
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %51, %48
  %53 = fmul <2 x double> %40, %52
  %54 = bitcast <2 x double> %33 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -134217728, i64 -134217728>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fsub <2 x double> %33, %56
  %58 = fmul <2 x double> %40, %33
  %59 = fmul <2 x double> %43, %56
  %60 = bitcast <2 x double> %58 to <2 x i64>
  %61 = xor <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fmul <2 x double> %57, %43
  %64 = fmul <2 x double> %44, %56
  %65 = fmul <2 x double> %44, %57
  %66 = fmul <2 x double> %33, %53
  %67 = fmul <2 x double> %40, %39
  %68 = fadd <2 x double> %59, %62
  %69 = fadd <2 x double> %63, %68
  %70 = fadd <2 x double> %64, %69
  %71 = fadd <2 x double> %65, %70
  %72 = fadd <2 x double> %71, %66
  %73 = fadd <2 x double> %67, %72
  %74 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %75 = fmul <2 x double> %73, <double 5.000000e-01, double 5.000000e-01>
  %76 = and <2 x i64> %3, %6
  %77 = bitcast <2 x double> %74 to <2 x i64>
  %78 = and <2 x i64> %77, %12
  %79 = or <2 x i64> %78, %76
  %80 = bitcast <2 x double> %75 to <2 x i64>
  %81 = fcmp une <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = and <2 x i64> %79, %82
  %84 = and <2 x i64> %82, %12
  %85 = and <2 x i64> %84, %80
  %86 = fmul <2 x double> %16, %16
  %87 = fmul <2 x double> %86, %86
  %88 = fmul <2 x double> %87, %87
  %89 = fmul <2 x double> %16, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %90 = fadd <2 x double> %89, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %91 = fmul <2 x double> %16, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %92 = fadd <2 x double> %91, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %93 = fmul <2 x double> %86, %90
  %94 = fadd <2 x double> %92, %93
  %95 = fmul <2 x double> %16, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %96 = fadd <2 x double> %95, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %97 = fmul <2 x double> %16, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %98 = fadd <2 x double> %97, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %99 = fmul <2 x double> %86, %96
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %16, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %102 = fadd <2 x double> %101, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %103 = fmul <2 x double> %16, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %104 = fadd <2 x double> %103, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %105 = fmul <2 x double> %86, %102
  %106 = fadd <2 x double> %104, %105
  %107 = fmul <2 x double> %87, %100
  %108 = fadd <2 x double> %106, %107
  %109 = fmul <2 x double> %88, %94
  %110 = fadd <2 x double> %109, %108
  %111 = bitcast <2 x i64> %83 to <2 x double>
  %112 = fmul <2 x double> %16, %111
  %113 = fmul <2 x double> %110, %112
  %114 = bitcast <2 x i64> %85 to <2 x double>
  %115 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %111
  %116 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %115
  %117 = fsub <2 x double> %116, %111
  %118 = fadd <2 x double> %117, <double 0x3C81A62633145C07, double 0x3C81A62633145C07>
  %119 = fsub <2 x double> %118, %114
  %120 = fsub <2 x double> %115, %113
  %121 = fsub <2 x double> %115, %120
  %122 = fsub <2 x double> %121, %113
  %123 = fadd <2 x double> %122, %119
  %124 = fadd <2 x double> %113, %111
  %125 = fadd <2 x double> %120, %123
  %126 = fmul <2 x double> %125, <double 2.000000e+00, double 2.000000e+00>
  %127 = bitcast <2 x double> %124 to <2 x i64>
  %128 = and <2 x i64> %127, %6
  %129 = bitcast <2 x double> %126 to <2 x i64>
  %130 = and <2 x i64> %129, %12
  %131 = or <2 x i64> %130, %128
  %132 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %133 = xor <2 x i64> %131, %132
  %134 = bitcast <2 x i64> %133 to <2 x double>
  ret <2 x double> %134
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x double> %7 to <2 x i64>
  %11 = and <2 x i64> %6, %10
  %12 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %13 = bitcast <2 x double> %9 to <2 x i64>
  %14 = and <2 x i64> %13, %12
  %15 = or <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %16) #6
  %18 = and <2 x i64> %3, %6
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = and <2 x i64> %19, %12
  %21 = or <2 x i64> %20, %18
  %22 = fcmp une <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %23 = select <2 x i1> %22, <2 x i64> %21, <2 x i64> zeroinitializer
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fmul <2 x double> %16, %16
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, %26
  %28 = fmul <2 x double> %16, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %29 = fadd <2 x double> %28, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %30 = fmul <2 x double> %16, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %31 = fadd <2 x double> %30, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %32 = fmul <2 x double> %25, %29
  %33 = fadd <2 x double> %31, %32
  %34 = fmul <2 x double> %16, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %35 = fadd <2 x double> %34, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %36 = fmul <2 x double> %16, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %37 = fadd <2 x double> %36, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %38 = fmul <2 x double> %25, %35
  %39 = fadd <2 x double> %37, %38
  %40 = fmul <2 x double> %16, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %41 = fadd <2 x double> %40, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %42 = fmul <2 x double> %16, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %43 = fadd <2 x double> %42, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %44 = fmul <2 x double> %25, %41
  %45 = fadd <2 x double> %43, %44
  %46 = fmul <2 x double> %26, %39
  %47 = fadd <2 x double> %45, %46
  %48 = fmul <2 x double> %27, %33
  %49 = fadd <2 x double> %48, %47
  %50 = fmul <2 x double> %16, %24
  %51 = fmul <2 x double> %49, %50
  %52 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %53 = xor <2 x i64> %23, %52
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = bitcast <2 x double> %51 to <2 x i64>
  %56 = xor <2 x i64> %52, %55
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fadd <2 x double> %54, %57
  %59 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %58
  %60 = fadd <2 x double> %51, %24
  %61 = fmul <2 x double> %60, <double 2.000000e+00, double 2.000000e+00>
  %62 = bitcast <2 x double> %59 to <2 x i64>
  %63 = and <2 x i64> %62, %6
  %64 = bitcast <2 x double> %61 to <2 x i64>
  %65 = and <2 x i64> %64, %12
  %66 = or <2 x i64> %63, %65
  %67 = fcmp olt <2 x double> %0, zeroinitializer
  %68 = select <2 x i1> %67, <2 x i64> %12, <2 x i64> zeroinitializer
  %69 = xor <2 x i64> %66, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = bitcast <2 x i64> %69 to <2 x double>
  %71 = fadd <2 x double> %70, <double 0x400921FB54442D18, double 0x400921FB54442D18>
  %72 = bitcast <2 x double> %71 to <2 x i64>
  %73 = and <2 x i64> %68, %72
  %74 = xor <2 x i64> %68, <i64 -1, i64 -1>
  %75 = and <2 x i64> %66, %74
  %76 = or <2 x i64> %73, %75
  %77 = bitcast <2 x i64> %76 to <2 x double>
  ret <2 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x double> %7 to <2 x i64>
  %11 = and <2 x i64> %6, %10
  %12 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %13 = bitcast <2 x double> %9 to <2 x i64>
  %14 = and <2 x i64> %13, %12
  %15 = or <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %16) #6
  %18 = bitcast <2 x double> %17 to <2 x i64>
  %19 = and <2 x i64> %18, <i64 -134217728, i64 -134217728>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fsub <2 x double> %17, %20
  %22 = fmul <2 x double> %17, %17
  %23 = fmul <2 x double> %20, %20
  %24 = bitcast <2 x double> %22 to <2 x i64>
  %25 = xor <2 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fmul <2 x double> %21, %20
  %28 = fmul <2 x double> %21, %21
  %29 = fadd <2 x double> %23, %26
  %30 = fadd <2 x double> %27, %29
  %31 = fadd <2 x double> %27, %30
  %32 = fadd <2 x double> %28, %31
  %33 = fadd <2 x double> %22, %16
  %34 = fsub <2 x double> %33, %16
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> %16, %35
  %37 = fsub <2 x double> %22, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %38, %32
  %40 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %17
  %41 = bitcast <2 x double> %40 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -134217728, i64 -134217728>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fsub <2 x double> %40, %43
  %45 = fmul <2 x double> %20, %43
  %46 = fmul <2 x double> %44, %20
  %47 = fmul <2 x double> %21, %43
  %48 = fmul <2 x double> %21, %44
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %50 = fsub <2 x double> %49, %46
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %51, %48
  %53 = fmul <2 x double> %40, %52
  %54 = bitcast <2 x double> %33 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -134217728, i64 -134217728>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fsub <2 x double> %33, %56
  %58 = fmul <2 x double> %40, %33
  %59 = fmul <2 x double> %43, %56
  %60 = bitcast <2 x double> %58 to <2 x i64>
  %61 = xor <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fmul <2 x double> %57, %43
  %64 = fmul <2 x double> %44, %56
  %65 = fmul <2 x double> %44, %57
  %66 = fmul <2 x double> %33, %53
  %67 = fmul <2 x double> %40, %39
  %68 = fadd <2 x double> %59, %62
  %69 = fadd <2 x double> %63, %68
  %70 = fadd <2 x double> %64, %69
  %71 = fadd <2 x double> %65, %70
  %72 = fadd <2 x double> %71, %66
  %73 = fadd <2 x double> %67, %72
  %74 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %75 = fmul <2 x double> %73, <double 5.000000e-01, double 5.000000e-01>
  %76 = and <2 x i64> %3, %6
  %77 = bitcast <2 x double> %74 to <2 x i64>
  %78 = and <2 x i64> %77, %12
  %79 = or <2 x i64> %78, %76
  %80 = bitcast <2 x double> %75 to <2 x i64>
  %81 = fcmp une <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %82 = sext <2 x i1> %81 to <2 x i64>
  %83 = and <2 x i64> %79, %82
  %84 = and <2 x i64> %82, %12
  %85 = and <2 x i64> %84, %80
  %86 = fmul <2 x double> %16, %16
  %87 = fmul <2 x double> %86, %86
  %88 = fmul <2 x double> %87, %87
  %89 = fmul <2 x double> %16, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %90 = fadd <2 x double> %89, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %91 = fmul <2 x double> %16, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %92 = fadd <2 x double> %91, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %93 = fmul <2 x double> %86, %90
  %94 = fadd <2 x double> %92, %93
  %95 = fmul <2 x double> %16, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %96 = fadd <2 x double> %95, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %97 = fmul <2 x double> %16, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %98 = fadd <2 x double> %97, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %99 = fmul <2 x double> %86, %96
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %16, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %102 = fadd <2 x double> %101, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %103 = fmul <2 x double> %16, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %104 = fadd <2 x double> %103, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %105 = fmul <2 x double> %86, %102
  %106 = fadd <2 x double> %104, %105
  %107 = fmul <2 x double> %87, %100
  %108 = fadd <2 x double> %106, %107
  %109 = fmul <2 x double> %88, %94
  %110 = fadd <2 x double> %109, %108
  %111 = bitcast <2 x i64> %83 to <2 x double>
  %112 = fmul <2 x double> %16, %111
  %113 = fmul <2 x double> %110, %112
  %114 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %115 = xor <2 x i64> %83, %114
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = bitcast <2 x double> %113 to <2 x i64>
  %118 = xor <2 x i64> %114, %117
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fadd <2 x double> %116, %119
  %121 = fsub <2 x double> %116, %120
  %122 = fadd <2 x double> %121, %119
  %123 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %120
  %124 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %123
  %125 = fsub <2 x double> %124, %120
  %126 = fadd <2 x double> %125, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %127 = fsub <2 x double> %126, %122
  %128 = bitcast <2 x double> %123 to <2 x i64>
  %129 = bitcast <2 x double> %127 to <2 x i64>
  %130 = bitcast <2 x i64> %85 to <2 x double>
  %131 = fadd <2 x double> %113, %111
  %132 = fsub <2 x double> %111, %131
  %133 = fadd <2 x double> %113, %132
  %134 = fadd <2 x double> %133, %130
  %135 = fmul <2 x double> %131, <double 2.000000e+00, double 2.000000e+00>
  %136 = fmul <2 x double> %134, <double 2.000000e+00, double 2.000000e+00>
  %137 = and <2 x i64> %128, %6
  %138 = bitcast <2 x double> %135 to <2 x i64>
  %139 = and <2 x i64> %138, %12
  %140 = or <2 x i64> %137, %139
  %141 = and <2 x i64> %129, %6
  %142 = bitcast <2 x double> %136 to <2 x i64>
  %143 = and <2 x i64> %142, %12
  %144 = or <2 x i64> %143, %141
  %145 = fcmp olt <2 x double> %0, zeroinitializer
  %146 = select <2 x i1> %145, <2 x i64> %12, <2 x i64> zeroinitializer
  %147 = bitcast <2 x i64> %140 to <2 x double>
  %148 = bitcast <2 x i64> %144 to <2 x double>
  %149 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %147
  %150 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %149
  %151 = fsub <2 x double> %150, %147
  %152 = fadd <2 x double> %151, <double 0x3CA1A62633145C07, double 0x3CA1A62633145C07>
  %153 = fsub <2 x double> %152, %148
  %154 = bitcast <2 x double> %149 to <2 x i64>
  %155 = and <2 x i64> %146, %154
  %156 = xor <2 x i64> %146, <i64 -1, i64 -1>
  %157 = and <2 x i64> %140, %156
  %158 = or <2 x i64> %155, %157
  %159 = bitcast <2 x double> %153 to <2 x i64>
  %160 = and <2 x i64> %146, %159
  %161 = and <2 x i64> %144, %156
  %162 = or <2 x i64> %160, %161
  %163 = bitcast <2 x i64> %158 to <2 x double>
  %164 = bitcast <2 x i64> %162 to <2 x double>
  %165 = fadd <2 x double> %163, %164
  ret <2 x double> %165
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <4 x i32>
  %8 = and <4 x i32> %7, <i32 1, i32 undef, i32 1, i32 undef>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 undef, i32 undef>
  %10 = and <2 x i64> %6, <i64 -4616189618054758400, i64 -4616189618054758400>
  %11 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %12 = and <2 x i64> %3, %11
  %13 = or <2 x i64> %12, %10
  %14 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %15 = and <2 x i64> %3, %6
  %16 = and <2 x i64> %11, <i64 4607182418800017408, i64 4607182418800017408>
  %17 = or <2 x i64> %16, %15
  %18 = bitcast <2 x i64> %13 to <2 x double>
  %19 = bitcast <2 x i64> %14 to <2 x double>
  %20 = bitcast <2 x i64> %17 to <2 x double>
  %21 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %20
  %22 = and <2 x i64> %17, <i64 9223372036720558080, i64 9223372036720558080>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = fsub <2 x double> %20, %23
  %25 = bitcast <2 x double> %21 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -134217728, i64 -134217728>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fsub <2 x double> %21, %27
  %29 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %18, %30
  %32 = fmul <2 x double> %21, %18
  %33 = fmul <2 x double> %30, %27
  %34 = fsub <2 x double> %33, %32
  %35 = fmul <2 x double> %28, %30
  %36 = fmul <2 x double> %31, %27
  %37 = fmul <2 x double> %31, %28
  %38 = fmul <2 x double> %23, %27
  %39 = fmul <2 x double> %28, %23
  %40 = fmul <2 x double> %24, %27
  %41 = fmul <2 x double> %24, %28
  %42 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fmul <2 x double> %32, %45
  %47 = fadd <2 x double> %34, %35
  %48 = fadd <2 x double> %36, %47
  %49 = fadd <2 x double> %37, %48
  %50 = fadd <2 x double> %49, %46
  %51 = fmul <2 x double> %32, zeroinitializer
  %52 = fsub <2 x double> %19, %51
  %53 = fmul <2 x double> %21, %52
  %54 = fadd <2 x double> %53, %50
  %55 = bitcast <2 x double> %32 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -134217728, i64 -134217728>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fsub <2 x double> %32, %57
  %59 = fmul <2 x double> %32, %32
  %60 = fmul <2 x double> %57, %57
  %61 = bitcast <2 x double> %59 to <2 x i64>
  %62 = xor <2 x i64> %61, <i64 -9223372036854775808, i64 -9223372036854775808>
  %63 = bitcast <2 x i64> %62 to <2 x double>
  %64 = fadd <2 x double> %57, %57
  %65 = fmul <2 x double> %64, %58
  %66 = fmul <2 x double> %58, %58
  %67 = fadd <2 x double> %54, %54
  %68 = fmul <2 x double> %32, %67
  %69 = fadd <2 x double> %60, %63
  %70 = fadd <2 x double> %69, %65
  %71 = fadd <2 x double> %66, %70
  %72 = fadd <2 x double> %71, %68
  %73 = fadd <2 x double> %59, %72
  %74 = fsub <2 x double> %59, %73
  %75 = fadd <2 x double> %72, %74
  %76 = bitcast <2 x double> %73 to <2 x i64>
  %77 = fmul <2 x double> %73, %73
  %78 = fmul <2 x double> %77, %77
  %79 = fmul <2 x double> %78, %78
  %80 = fmul <2 x double> %73, <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>
  %81 = fadd <2 x double> %80, <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>
  %82 = fmul <2 x double> %73, <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>
  %83 = fadd <2 x double> %82, <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>
  %84 = fmul <2 x double> %77, %81
  %85 = fadd <2 x double> %83, %84
  %86 = fmul <2 x double> %73, <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>
  %87 = fadd <2 x double> %86, <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>
  %88 = fmul <2 x double> %73, <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>
  %89 = fadd <2 x double> %88, <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>
  %90 = fmul <2 x double> %77, %87
  %91 = fadd <2 x double> %89, %90
  %92 = fmul <2 x double> %78, %85
  %93 = fadd <2 x double> %91, %92
  %94 = fmul <2 x double> %73, <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>
  %95 = fadd <2 x double> %94, <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>
  %96 = fmul <2 x double> %73, <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>
  %97 = fadd <2 x double> %96, <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>
  %98 = fmul <2 x double> %77, %95
  %99 = fadd <2 x double> %97, %98
  %100 = fmul <2 x double> %73, <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>
  %101 = fadd <2 x double> %100, <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>
  %102 = fmul <2 x double> %73, <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>
  %103 = fadd <2 x double> %102, <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>
  %104 = fmul <2 x double> %77, %101
  %105 = fadd <2 x double> %103, %104
  %106 = fmul <2 x double> %78, %99
  %107 = fadd <2 x double> %105, %106
  %108 = fmul <2 x double> %79, %93
  %109 = fadd <2 x double> %107, %108
  %110 = fmul <2 x double> %73, %109
  %111 = fadd <2 x double> %110, <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>
  %112 = fmul <2 x double> %73, %111
  %113 = fadd <2 x double> %112, <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>
  %114 = fmul <2 x double> %73, %113
  %115 = fadd <2 x double> %114, <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>
  %116 = fmul <2 x double> %73, %115
  %117 = fadd <2 x double> %116, <double 0xBFD555555555543A, double 0xBFD555555555543A>
  %118 = and <2 x i64> %76, <i64 -134217728, i64 -134217728>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fsub <2 x double> %73, %119
  %121 = fmul <2 x double> %32, %73
  %122 = fmul <2 x double> %57, %119
  %123 = bitcast <2 x double> %121 to <2 x i64>
  %124 = xor <2 x i64> %123, <i64 -9223372036854775808, i64 -9223372036854775808>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fmul <2 x double> %58, %119
  %127 = fmul <2 x double> %120, %57
  %128 = fmul <2 x double> %58, %120
  %129 = fmul <2 x double> %32, %75
  %130 = fmul <2 x double> %54, %73
  %131 = fadd <2 x double> %122, %125
  %132 = fadd <2 x double> %126, %131
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = and <2 x i64> %123, <i64 -134217728, i64 -134217728>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fsub <2 x double> %121, %138
  %140 = bitcast <2 x double> %117 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %117, %142
  %144 = fmul <2 x double> %121, %117
  %145 = fmul <2 x double> %138, %142
  %146 = bitcast <2 x double> %144 to <2 x i64>
  %147 = xor <2 x i64> %146, <i64 -9223372036854775808, i64 -9223372036854775808>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fmul <2 x double> %139, %142
  %150 = fmul <2 x double> %143, %138
  %151 = fmul <2 x double> %139, %143
  %152 = fmul <2 x double> %136, %117
  %153 = fadd <2 x double> %145, %148
  %154 = fadd <2 x double> %149, %153
  %155 = fadd <2 x double> %150, %154
  %156 = fadd <2 x double> %151, %155
  %157 = fadd <2 x double> %152, %156
  %158 = fadd <2 x double> %32, %144
  %159 = fsub <2 x double> %32, %158
  %160 = fadd <2 x double> %144, %159
  %161 = fadd <2 x double> %54, %160
  %162 = fadd <2 x double> %161, %157
  %163 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %164 = sitofp <2 x i32> %163 to <2 x double>
  %165 = bitcast <2 x double> %164 to <2 x i64>
  %166 = and <2 x i64> %165, <i64 -134217728, i64 -134217728>
  %167 = bitcast <2 x i64> %166 to <2 x double>
  %168 = fsub <2 x double> %164, %167
  %169 = fmul <2 x double> %164, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %170 = fmul <2 x double> %167, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %171 = bitcast <2 x double> %169 to <2 x i64>
  %172 = xor <2 x i64> %171, <i64 -9223372036854775808, i64 -9223372036854775808>
  %173 = bitcast <2 x i64> %172 to <2 x double>
  %174 = fmul <2 x double> %167, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %175 = fmul <2 x double> %168, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %176 = fmul <2 x double> %168, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %177 = fmul <2 x double> %164, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %178 = fadd <2 x double> %170, %173
  %179 = fadd <2 x double> %174, %178
  %180 = fadd <2 x double> %175, %179
  %181 = fadd <2 x double> %176, %180
  %182 = fadd <2 x double> %177, %181
  %183 = fadd <2 x double> %169, %158
  %184 = fsub <2 x double> %169, %183
  %185 = fadd <2 x double> %158, %184
  %186 = fadd <2 x double> %182, %185
  %187 = fadd <2 x double> %186, %162
  %188 = fadd <2 x double> %183, %187
  %189 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %190 = bitcast <2 x double> %188 to <2 x i64>
  %191 = select <2 x i1> %189, <2 x i64> <i64 4609753056924675352, i64 4609753056924675352>, <2 x i64> %190
  %192 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %193 = xor <2 x i64> %191, %192
  %194 = bitcast <2 x i64> %193 to <2 x double>
  ret <2 x double> %194
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <4 x i32>
  %3 = and <4 x i32> %2, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %4 = icmp eq <4 x i32> %3, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %5 = sext <4 x i1> %4 to <4 x i32>
  %6 = shufflevector <4 x i32> %5, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 3, i32 undef>
  %7 = and <4 x i32> %6, %5
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  %10 = and <2 x i64> %9, <i64 8589934594, i64 0>
  %11 = bitcast <2 x double> %0 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = bitcast <2 x i64> %10 to <4 x i32>
  %15 = add <4 x i32> %14, <i32 1, i32 1, i32 0, i32 0>
  %16 = fcmp ogt <2 x double> %13, <double 1.000000e+00, double 1.000000e+00>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <4 x i32> %15, %19
  %22 = xor <2 x i64> %20, <i64 8589934594, i64 8589934594>
  %23 = and <2 x i64> %10, %22
  %24 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %25 = select <2 x i1> %16, <2 x double> %24, <2 x double> %13
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %28, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %26, <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>
  %32 = fadd <2 x double> %31, <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>
  %33 = fmul <2 x double> %27, <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>
  %34 = fadd <2 x double> %33, %32
  %35 = fmul <2 x double> %26, <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>
  %36 = fadd <2 x double> %35, <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>
  %37 = fmul <2 x double> %26, <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>
  %38 = fadd <2 x double> %37, <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>
  %39 = fmul <2 x double> %27, %36
  %40 = fadd <2 x double> %38, %39
  %41 = fmul <2 x double> %26, <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>
  %42 = fadd <2 x double> %41, <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>
  %43 = fmul <2 x double> %26, <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>
  %44 = fadd <2 x double> %43, <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>
  %45 = fmul <2 x double> %27, %42
  %46 = fadd <2 x double> %44, %45
  %47 = fmul <2 x double> %28, %40
  %48 = fadd <2 x double> %46, %47
  %49 = fmul <2 x double> %26, <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>
  %50 = fadd <2 x double> %49, <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>
  %51 = fmul <2 x double> %26, <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>
  %52 = fadd <2 x double> %51, <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>
  %53 = fmul <2 x double> %27, %50
  %54 = fadd <2 x double> %52, %53
  %55 = fmul <2 x double> %26, <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>
  %56 = fadd <2 x double> %55, <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>
  %57 = fmul <2 x double> %26, <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>
  %58 = fadd <2 x double> %57, <double 0xBFD55555555553C5, double 0xBFD55555555553C5>
  %59 = fmul <2 x double> %27, %56
  %60 = fadd <2 x double> %58, %59
  %61 = fmul <2 x double> %28, %54
  %62 = fadd <2 x double> %60, %61
  %63 = fmul <2 x double> %29, %48
  %64 = fadd <2 x double> %62, %63
  %65 = fmul <2 x double> %34, %30
  %66 = fadd <2 x double> %65, %64
  %67 = fmul <2 x double> %26, %66
  %68 = fmul <2 x double> %25, %67
  %69 = fadd <2 x double> %25, %68
  %70 = and <4 x i32> %21, <i32 1, i32 1, i32 0, i32 0>
  %71 = icmp eq <4 x i32> %70, <i32 1, i32 1, i32 0, i32 0>
  %72 = sext <4 x i1> %71 to <4 x i32>
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %69
  %76 = bitcast <2 x double> %75 to <2 x i64>
  %77 = and <2 x i64> %76, %74
  %78 = xor <2 x i64> %74, <i64 -1, i64 -1>
  %79 = bitcast <2 x double> %69 to <2 x i64>
  %80 = and <2 x i64> %79, %78
  %81 = or <2 x i64> %77, %80
  %82 = bitcast <2 x i64> %23 to <4 x i32>
  %83 = or <4 x i32> %21, %82
  %84 = and <4 x i32> %83, <i32 2, i32 2, i32 0, i32 0>
  %85 = icmp eq <4 x i32> %84, <i32 2, i32 2, i32 0, i32 0>
  %86 = sext <4 x i1> %85 to <4 x i32>
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = and <2 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = xor <2 x i64> %81, %89
  %91 = bitcast <2 x i64> %90 to <2 x double>
  ret <2 x double> %91
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %25 = fdiv <2 x double> %23, %24
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %25, %26
  %30 = fmul <2 x double> %26, <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>
  %31 = fadd <2 x double> %30, <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>
  %32 = fmul <2 x double> %27, <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>
  %33 = fadd <2 x double> %32, %31
  %34 = fmul <2 x double> %26, <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>
  %35 = fadd <2 x double> %34, <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>
  %36 = fmul <2 x double> %26, <double 0x3FD99999998C136E, double 0x3FD99999998C136E>
  %37 = fadd <2 x double> %36, <double 0x3FE555555555593F, double 0x3FE555555555593F>
  %38 = fmul <2 x double> %27, %35
  %39 = fadd <2 x double> %37, %38
  %40 = fmul <2 x double> %28, %33
  %41 = fadd <2 x double> %40, %39
  %42 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %43 = and <4 x i32> %11, %42
  %44 = or <4 x i32> %22, %43
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %46 = sitofp <2 x i32> %45 to <2 x double>
  %47 = fmul <2 x double> %46, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %48 = fmul <2 x double> %25, <double 2.000000e+00, double 2.000000e+00>
  %49 = fadd <2 x double> %47, %48
  %50 = fmul <2 x double> %29, %41
  %51 = fadd <2 x double> %49, %50
  %52 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = fcmp ult <2 x double> %5, zeroinitializer
  %54 = fcmp oeq <2 x double> %5, zeroinitializer
  %55 = select <2 x i1> %52, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %51
  %56 = select <2 x i1> %53, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %55
  %57 = select <2 x i1> %54, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %56
  ret <2 x double> %57
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = fmul <2 x double> %5, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %8 = fadd <2 x double> %7, %0
  %9 = fmul <2 x double> %5, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %10 = fadd <2 x double> %9, %8
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %10, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %15 = fadd <2 x double> %14, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %16 = fmul <2 x double> %10, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %17 = fadd <2 x double> %16, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %18 = fmul <2 x double> %10, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %19 = fadd <2 x double> %18, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %20 = fmul <2 x double> %11, %17
  %21 = fadd <2 x double> %19, %20
  %22 = fmul <2 x double> %10, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %23 = fadd <2 x double> %22, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %24 = fmul <2 x double> %10, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %25 = fadd <2 x double> %24, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %26 = fmul <2 x double> %11, %23
  %27 = fadd <2 x double> %25, %26
  %28 = fmul <2 x double> %12, %21
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %15, %13
  %31 = fadd <2 x double> %30, %29
  %32 = fmul <2 x double> %10, %31
  %33 = fadd <2 x double> %32, <double 5.000000e-01, double 5.000000e-01>
  %34 = fmul <2 x double> %11, %33
  %35 = fadd <2 x double> %10, %34
  %36 = fadd <2 x double> %35, <double 1.000000e+00, double 1.000000e+00>
  %37 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %38 = add <4 x i32> %37, <i32 1023, i32 1023, i32 undef, i32 0>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %40 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %36, %42
  %44 = add <4 x i32> %6, <i32 1023, i32 1023, i32 undef, i32 0>
  %45 = sub <4 x i32> %44, %37
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %47 = and <4 x i32> %46, <i32 0, i32 -1, i32 0, i32 -1>
  %48 = shl <4 x i32> %47, <i32 20, i32 20, i32 20, i32 20>
  %49 = bitcast <4 x i32> %48 to <2 x double>
  %50 = fmul <2 x double> %43, %49
  %51 = fcmp ogt <2 x double> %0, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %52 = fcmp uge <2 x double> %0, <double -1.000000e+03, double -1.000000e+03>
  %53 = select <2 x i1> %51, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %50
  %54 = select <2 x i1> %52, <2 x double> %53, <2 x double> zeroinitializer
  ret <2 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %75 = fadd <2 x double> %74, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %76 = fmul <2 x double> %72, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %79 = fadd <2 x double> %78, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %80 = fmul <2 x double> %71, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %81 = fadd <2 x double> %80, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %90 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %90, %93
  %95 = fmul <2 x double> %90, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %96 = fmul <2 x double> %93, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %93, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %101 = fmul <2 x double> %94, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %102 = fmul <2 x double> %94, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %103 = fmul <2 x double> %90, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %104 = fadd <2 x double> %96, %99
  %105 = fadd <2 x double> %100, %104
  %106 = fadd <2 x double> %101, %105
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fmul <2 x double> %48, <double 2.000000e+00, double 2.000000e+00>
  %110 = fmul <2 x double> %70, <double 2.000000e+00, double 2.000000e+00>
  %111 = fadd <2 x double> %95, %109
  %112 = fsub <2 x double> %95, %111
  %113 = fadd <2 x double> %109, %112
  %114 = fadd <2 x double> %113, %108
  %115 = fadd <2 x double> %114, %110
  %116 = fmul <2 x double> %48, %71
  %117 = fmul <2 x double> %116, %85
  %118 = fadd <2 x double> %111, %117
  %119 = fsub <2 x double> %111, %118
  %120 = fadd <2 x double> %117, %119
  %121 = fadd <2 x double> %120, %115
  %122 = fadd <2 x double> %118, %121
  %123 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %124 = fcmp ult <2 x double> %5, zeroinitializer
  %125 = fcmp oeq <2 x double> %5, zeroinitializer
  %126 = select <2 x i1> %123, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %122
  %127 = select <2 x i1> %124, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %126
  %128 = select <2 x i1> %125, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %127
  ret <2 x double> %128
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_powd2_u10sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %8 = fadd <2 x double> %7, %1
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fcmp oeq <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp ogt <2 x double> %15, <double 0x4340000000000000, double 0x4340000000000000>
  %17 = or <2 x i1> %12, %16
  %18 = sext <2 x i1> %17 to <2 x i64>
  %19 = and <4 x i32> %9, <i32 1, i32 1, i32 0, i32 0>
  %20 = icmp eq <4 x i32> %19, <i32 1, i32 1, i32 0, i32 0>
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = fcmp olt <2 x double> %15, <double 0x4340000000000000, double 0x4340000000000000>
  %25 = select <2 x i1> %24, <2 x i64> %23, <2 x i64> zeroinitializer
  %26 = and <2 x i64> %25, %18
  %27 = bitcast <2 x double> %0 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 9223372036854775807, i64 9223372036854775807>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fcmp olt <2 x double> %29, <double 0x10000000000000, double 0x10000000000000>
  %31 = sext <2 x i1> %30 to <2 x i64>
  %32 = fmul <2 x double> %29, <double 0x43F0000000000000, double 0x43F0000000000000>
  %33 = select <2 x i1> %30, <2 x double> %32, <2 x double> %29
  %34 = fmul <2 x double> %33, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %35 = bitcast <2 x double> %34 to <4 x i32>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %37 = lshr <4 x i32> %36, <i32 20, i32 20, i32 20, i32 20>
  %38 = and <4 x i32> %37, <i32 2047, i32 2047, i32 0, i32 0>
  %39 = add nsw <4 x i32> %38, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %40 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %38
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %42 = and <4 x i32> %41, <i32 0, i32 -1, i32 0, i32 -1>
  %43 = shl <4 x i32> %42, <i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <2 x double> %33 to <4 x i32>
  %45 = add <4 x i32> %43, %44
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = bitcast <2 x i64> %31 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %49 = add nsw <4 x i32> %38, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %50 = and <4 x i32> %49, %48
  %51 = fadd <2 x double> %46, <double -1.000000e+00, double -1.000000e+00>
  %52 = fadd <2 x double> %51, <double 1.000000e+00, double 1.000000e+00>
  %53 = fsub <2 x double> %51, %52
  %54 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %53
  %55 = fsub <2 x double> %46, %52
  %56 = fadd <2 x double> %55, %54
  %57 = fadd <2 x double> %46, <double 1.000000e+00, double 1.000000e+00>
  %58 = fadd <2 x double> %57, <double -1.000000e+00, double -1.000000e+00>
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %59
  %61 = fsub <2 x double> %46, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %57
  %64 = bitcast <2 x double> %57 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -134217728, i64 -134217728>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fsub <2 x double> %57, %66
  %68 = bitcast <2 x double> %63 to <2 x i64>
  %69 = and <2 x i64> %68, <i64 -134217728, i64 -134217728>
  %70 = bitcast <2 x i64> %69 to <2 x double>
  %71 = fsub <2 x double> %63, %70
  %72 = bitcast <2 x double> %51 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 -134217728, i64 -134217728>
  %74 = bitcast <2 x i64> %73 to <2 x double>
  %75 = fsub <2 x double> %51, %74
  %76 = fmul <2 x double> %51, %63
  %77 = fmul <2 x double> %74, %70
  %78 = fsub <2 x double> %77, %76
  %79 = fmul <2 x double> %71, %74
  %80 = fmul <2 x double> %75, %70
  %81 = fmul <2 x double> %75, %71
  %82 = fmul <2 x double> %66, %70
  %83 = fmul <2 x double> %71, %66
  %84 = fmul <2 x double> %67, %70
  %85 = fmul <2 x double> %67, %71
  %86 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %82
  %87 = fsub <2 x double> %86, %83
  %88 = fsub <2 x double> %87, %84
  %89 = fsub <2 x double> %88, %85
  %90 = fmul <2 x double> %76, %89
  %91 = fadd <2 x double> %78, %79
  %92 = fadd <2 x double> %80, %91
  %93 = fadd <2 x double> %81, %92
  %94 = fadd <2 x double> %93, %90
  %95 = fmul <2 x double> %76, %62
  %96 = fsub <2 x double> %56, %95
  %97 = fmul <2 x double> %63, %96
  %98 = fadd <2 x double> %97, %94
  %99 = bitcast <2 x double> %76 to <2 x i64>
  %100 = and <2 x i64> %99, <i64 -134217728, i64 -134217728>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fsub <2 x double> %76, %101
  %103 = fmul <2 x double> %76, %76
  %104 = fmul <2 x double> %101, %101
  %105 = bitcast <2 x double> %103 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fadd <2 x double> %101, %101
  %109 = fmul <2 x double> %108, %102
  %110 = fmul <2 x double> %102, %102
  %111 = fadd <2 x double> %98, %98
  %112 = fmul <2 x double> %76, %111
  %113 = fadd <2 x double> %104, %107
  %114 = fadd <2 x double> %113, %109
  %115 = fadd <2 x double> %110, %114
  %116 = fadd <2 x double> %115, %112
  %117 = fmul <2 x double> %103, %103
  %118 = fmul <2 x double> %117, %117
  %119 = fmul <2 x double> %118, %118
  %120 = fmul <2 x double> %103, <double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11>
  %121 = fadd <2 x double> %120, <double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A>
  %122 = fmul <2 x double> %103, <double 0x3FC110F384A1865C, double 0x3FC110F384A1865C>
  %123 = fadd <2 x double> %122, <double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1>
  %124 = fmul <2 x double> %117, %121
  %125 = fadd <2 x double> %123, %124
  %126 = fmul <2 x double> %103, <double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1>
  %127 = fadd <2 x double> %126, <double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F>
  %128 = fmul <2 x double> %103, <double 0x3FD2492492492200, double 0x3FD2492492492200>
  %129 = fadd <2 x double> %128, <double 0x3FD999999999999B, double 0x3FD999999999999B>
  %130 = fmul <2 x double> %117, %127
  %131 = fadd <2 x double> %129, %130
  %132 = fmul <2 x double> %118, %125
  %133 = fadd <2 x double> %131, %132
  %134 = fmul <2 x double> %119, <double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3>
  %135 = fadd <2 x double> %134, %133
  %136 = xor <4 x i32> %48, <i32 -1, i32 -1, i32 undef, i32 undef>
  %137 = and <4 x i32> %39, %136
  %138 = or <4 x i32> %50, %137
  %139 = shufflevector <4 x i32> %138, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %140 = sitofp <2 x i32> %139 to <2 x double>
  %141 = bitcast <2 x double> %140 to <2 x i64>
  %142 = and <2 x i64> %141, <i64 -134217728, i64 -134217728>
  %143 = bitcast <2 x i64> %142 to <2 x double>
  %144 = fsub <2 x double> %140, %143
  %145 = fmul <2 x double> %140, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %146 = fmul <2 x double> %143, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %147 = bitcast <2 x double> %145 to <2 x i64>
  %148 = xor <2 x i64> %147, <i64 -9223372036854775808, i64 -9223372036854775808>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fmul <2 x double> %143, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %151 = fmul <2 x double> %144, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %152 = fmul <2 x double> %144, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %153 = fmul <2 x double> %140, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %154 = fadd <2 x double> %146, %149
  %155 = fadd <2 x double> %150, %154
  %156 = fadd <2 x double> %151, %155
  %157 = fadd <2 x double> %152, %156
  %158 = fadd <2 x double> %153, %157
  %159 = fmul <2 x double> %76, <double 2.000000e+00, double 2.000000e+00>
  %160 = fmul <2 x double> %98, <double 2.000000e+00, double 2.000000e+00>
  %161 = fadd <2 x double> %145, %159
  %162 = fsub <2 x double> %145, %161
  %163 = fadd <2 x double> %159, %162
  %164 = fadd <2 x double> %163, %158
  %165 = fadd <2 x double> %164, %160
  %166 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %167 = bitcast <2 x i64> %166 to <2 x double>
  %168 = fsub <2 x double> %103, %167
  %169 = fmul <2 x double> %76, %103
  %170 = fmul <2 x double> %101, %167
  %171 = bitcast <2 x double> %169 to <2 x i64>
  %172 = xor <2 x i64> %171, <i64 -9223372036854775808, i64 -9223372036854775808>
  %173 = bitcast <2 x i64> %172 to <2 x double>
  %174 = fmul <2 x double> %168, %101
  %175 = fmul <2 x double> %102, %167
  %176 = fmul <2 x double> %102, %168
  %177 = fmul <2 x double> %103, %98
  %178 = fmul <2 x double> %76, %116
  %179 = fadd <2 x double> %170, %173
  %180 = fadd <2 x double> %174, %179
  %181 = fadd <2 x double> %175, %180
  %182 = fadd <2 x double> %176, %181
  %183 = fadd <2 x double> %182, %177
  %184 = fadd <2 x double> %183, %178
  %185 = and <2 x i64> %171, <i64 -134217728, i64 -134217728>
  %186 = bitcast <2 x i64> %185 to <2 x double>
  %187 = fsub <2 x double> %169, %186
  %188 = fmul <2 x double> %169, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %189 = fmul <2 x double> %186, <double 0x3FE5555550000000, double 0x3FE5555550000000>
  %190 = bitcast <2 x double> %188 to <2 x i64>
  %191 = xor <2 x i64> %190, <i64 -9223372036854775808, i64 -9223372036854775808>
  %192 = bitcast <2 x i64> %191 to <2 x double>
  %193 = fmul <2 x double> %187, <double 0x3FE5555550000000, double 0x3FE5555550000000>
  %194 = fmul <2 x double> %186, <double 0x3E45555554000000, double 0x3E45555554000000>
  %195 = fmul <2 x double> %187, <double 0x3E45555554000000, double 0x3E45555554000000>
  %196 = fmul <2 x double> %169, <double 0x3C85F00000000000, double 0x3C85F00000000000>
  %197 = fmul <2 x double> %184, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %198 = fadd <2 x double> %189, %192
  %199 = fadd <2 x double> %193, %198
  %200 = fadd <2 x double> %194, %199
  %201 = fadd <2 x double> %195, %200
  %202 = fadd <2 x double> %196, %201
  %203 = fadd <2 x double> %202, %197
  %204 = fadd <2 x double> %161, %188
  %205 = fsub <2 x double> %161, %204
  %206 = fadd <2 x double> %188, %205
  %207 = fadd <2 x double> %206, %165
  %208 = fadd <2 x double> %207, %203
  %209 = fmul <2 x double> %103, %169
  %210 = fmul <2 x double> %167, %186
  %211 = bitcast <2 x double> %209 to <2 x i64>
  %212 = xor <2 x i64> %211, <i64 -9223372036854775808, i64 -9223372036854775808>
  %213 = bitcast <2 x i64> %212 to <2 x double>
  %214 = fmul <2 x double> %168, %186
  %215 = fmul <2 x double> %187, %167
  %216 = fmul <2 x double> %168, %187
  %217 = fmul <2 x double> %103, %184
  %218 = fmul <2 x double> %169, %116
  %219 = fadd <2 x double> %210, %213
  %220 = fadd <2 x double> %214, %219
  %221 = fadd <2 x double> %215, %220
  %222 = fadd <2 x double> %216, %221
  %223 = fadd <2 x double> %222, %217
  %224 = fadd <2 x double> %218, %223
  %225 = and <2 x i64> %211, <i64 -134217728, i64 -134217728>
  %226 = bitcast <2 x i64> %225 to <2 x double>
  %227 = fsub <2 x double> %209, %226
  %228 = bitcast <2 x double> %135 to <2 x i64>
  %229 = and <2 x i64> %228, <i64 -134217728, i64 -134217728>
  %230 = bitcast <2 x i64> %229 to <2 x double>
  %231 = fsub <2 x double> %135, %230
  %232 = fmul <2 x double> %209, %135
  %233 = fmul <2 x double> %226, %230
  %234 = bitcast <2 x double> %232 to <2 x i64>
  %235 = xor <2 x i64> %234, <i64 -9223372036854775808, i64 -9223372036854775808>
  %236 = bitcast <2 x i64> %235 to <2 x double>
  %237 = fmul <2 x double> %227, %230
  %238 = fmul <2 x double> %231, %226
  %239 = fmul <2 x double> %227, %231
  %240 = fmul <2 x double> %135, %224
  %241 = fadd <2 x double> %233, %236
  %242 = fadd <2 x double> %237, %241
  %243 = fadd <2 x double> %238, %242
  %244 = fadd <2 x double> %239, %243
  %245 = fadd <2 x double> %244, %240
  %246 = fadd <2 x double> %204, %232
  %247 = fsub <2 x double> %204, %246
  %248 = fadd <2 x double> %232, %247
  %249 = fadd <2 x double> %248, %208
  %250 = fadd <2 x double> %249, %245
  %251 = bitcast <2 x double> %246 to <2 x i64>
  %252 = and <2 x i64> %251, <i64 -134217728, i64 -134217728>
  %253 = bitcast <2 x i64> %252 to <2 x double>
  %254 = fsub <2 x double> %246, %253
  %255 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %256 = bitcast <2 x i64> %255 to <2 x double>
  %257 = fsub <2 x double> %1, %256
  %258 = fmul <2 x double> %246, %1
  %259 = fmul <2 x double> %256, %253
  %260 = bitcast <2 x double> %258 to <2 x i64>
  %261 = xor <2 x i64> %260, <i64 -9223372036854775808, i64 -9223372036854775808>
  %262 = bitcast <2 x i64> %261 to <2 x double>
  %263 = fmul <2 x double> %254, %256
  %264 = fmul <2 x double> %257, %253
  %265 = fmul <2 x double> %257, %254
  %266 = fmul <2 x double> %250, %1
  %267 = fadd <2 x double> %259, %262
  %268 = fadd <2 x double> %263, %267
  %269 = fadd <2 x double> %264, %268
  %270 = fadd <2 x double> %265, %269
  %271 = fadd <2 x double> %270, %266
  %272 = fadd <2 x double> %258, %271
  %273 = fmul <2 x double> %272, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %274 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %273) #6
  %275 = shufflevector <4 x i32> %274, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %276 = sitofp <2 x i32> %275 to <2 x double>
  %277 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %276) #6
  %278 = fmul <2 x double> %276, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %279 = fadd <2 x double> %258, %278
  %280 = fsub <2 x double> %279, %258
  %281 = fsub <2 x double> %279, %280
  %282 = fsub <2 x double> %258, %281
  %283 = fsub <2 x double> %278, %280
  %284 = fadd <2 x double> %283, %282
  %285 = fadd <2 x double> %271, %284
  %286 = fmul <2 x double> %276, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %287 = fadd <2 x double> %286, %279
  %288 = fsub <2 x double> %287, %279
  %289 = fsub <2 x double> %287, %288
  %290 = fsub <2 x double> %279, %289
  %291 = fsub <2 x double> %286, %288
  %292 = fadd <2 x double> %291, %290
  %293 = fadd <2 x double> %292, %285
  %294 = fadd <2 x double> %287, %293
  %295 = fsub <2 x double> %287, %294
  %296 = fadd <2 x double> %293, %295
  %297 = fmul <2 x double> %294, %294
  %298 = fmul <2 x double> %297, %297
  %299 = fmul <2 x double> %298, %298
  %300 = fmul <2 x double> %294, <double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9>
  %301 = fadd <2 x double> %300, <double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD>
  %302 = fmul <2 x double> %294, <double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E>
  %303 = fadd <2 x double> %302, <double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B>
  %304 = fmul <2 x double> %294, <double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D>
  %305 = fadd <2 x double> %304, <double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B>
  %306 = fmul <2 x double> %297, %303
  %307 = fadd <2 x double> %305, %306
  %308 = fmul <2 x double> %294, <double 0x3F8111111110FB68, double 0x3F8111111110FB68>
  %309 = fadd <2 x double> %308, <double 0x3FA5555555550E90, double 0x3FA5555555550E90>
  %310 = fmul <2 x double> %294, <double 0x3FC5555555555558, double 0x3FC5555555555558>
  %311 = fadd <2 x double> %310, <double 0x3FE0000000000009, double 0x3FE0000000000009>
  %312 = fmul <2 x double> %297, %309
  %313 = fadd <2 x double> %311, %312
  %314 = fmul <2 x double> %298, %307
  %315 = fadd <2 x double> %313, %314
  %316 = fmul <2 x double> %301, %299
  %317 = fadd <2 x double> %316, %315
  %318 = fadd <2 x double> %294, <double 1.000000e+00, double 1.000000e+00>
  %319 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %318
  %320 = fadd <2 x double> %294, %319
  %321 = fadd <2 x double> %296, %320
  %322 = bitcast <2 x double> %294 to <2 x i64>
  %323 = and <2 x i64> %322, <i64 -134217728, i64 -134217728>
  %324 = bitcast <2 x i64> %323 to <2 x double>
  %325 = fsub <2 x double> %294, %324
  %326 = fmul <2 x double> %324, %324
  %327 = bitcast <2 x double> %297 to <2 x i64>
  %328 = xor <2 x i64> %327, <i64 -9223372036854775808, i64 -9223372036854775808>
  %329 = bitcast <2 x i64> %328 to <2 x double>
  %330 = fadd <2 x double> %324, %324
  %331 = fmul <2 x double> %330, %325
  %332 = fmul <2 x double> %325, %325
  %333 = fadd <2 x double> %296, %296
  %334 = fmul <2 x double> %294, %333
  %335 = fadd <2 x double> %326, %329
  %336 = fadd <2 x double> %335, %331
  %337 = fadd <2 x double> %332, %336
  %338 = fadd <2 x double> %334, %337
  %339 = and <2 x i64> %327, <i64 -134217728, i64 -134217728>
  %340 = bitcast <2 x i64> %339 to <2 x double>
  %341 = fsub <2 x double> %297, %340
  %342 = bitcast <2 x double> %317 to <2 x i64>
  %343 = and <2 x i64> %342, <i64 -134217728, i64 -134217728>
  %344 = bitcast <2 x i64> %343 to <2 x double>
  %345 = fsub <2 x double> %317, %344
  %346 = fmul <2 x double> %297, %317
  %347 = fmul <2 x double> %340, %344
  %348 = bitcast <2 x double> %346 to <2 x i64>
  %349 = xor <2 x i64> %348, <i64 -9223372036854775808, i64 -9223372036854775808>
  %350 = bitcast <2 x i64> %349 to <2 x double>
  %351 = fmul <2 x double> %341, %344
  %352 = fmul <2 x double> %345, %340
  %353 = fmul <2 x double> %341, %345
  %354 = fmul <2 x double> %317, %338
  %355 = fadd <2 x double> %347, %350
  %356 = fadd <2 x double> %351, %355
  %357 = fadd <2 x double> %352, %356
  %358 = fadd <2 x double> %353, %357
  %359 = fadd <2 x double> %354, %358
  %360 = fadd <2 x double> %318, %346
  %361 = fsub <2 x double> %318, %360
  %362 = fadd <2 x double> %346, %361
  %363 = fadd <2 x double> %321, %362
  %364 = fadd <2 x double> %363, %359
  %365 = fadd <2 x double> %360, %364
  %366 = ashr <4 x i32> %277, <i32 1, i32 1, i32 1, i32 1>
  %367 = add <4 x i32> %366, <i32 1023, i32 1023, i32 undef, i32 0>
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %369 = and <4 x i32> %368, <i32 0, i32 -1, i32 0, i32 -1>
  %370 = shl <4 x i32> %369, <i32 20, i32 20, i32 20, i32 20>
  %371 = bitcast <4 x i32> %370 to <2 x double>
  %372 = fmul <2 x double> %365, %371
  %373 = add <4 x i32> %277, <i32 1023, i32 1023, i32 undef, i32 0>
  %374 = sub <4 x i32> %373, %366
  %375 = shufflevector <4 x i32> %374, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %376 = and <4 x i32> %375, <i32 0, i32 -1, i32 0, i32 -1>
  %377 = shl <4 x i32> %376, <i32 20, i32 20, i32 20, i32 20>
  %378 = bitcast <4 x i32> %377 to <2 x double>
  %379 = fmul <2 x double> %372, %378
  %380 = fcmp uge <2 x double> %258, <double -1.000000e+03, double -1.000000e+03>
  %381 = fcmp ogt <2 x double> %258, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %382 = select <2 x i1> %380, <2 x double> %379, <2 x double> zeroinitializer
  %383 = select <2 x i1> %381, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %382
  %384 = fcmp ogt <2 x double> %0, zeroinitializer
  %385 = and <2 x i64> %26, <i64 -4616189618054758400, i64 -4616189618054758400>
  %386 = and <2 x i64> %26, <i64 4607182418800017408, i64 4607182418800017408>
  %387 = xor <2 x i64> %386, <i64 4607182418800017408, i64 4607182418800017408>
  %388 = or <2 x i64> %387, %385
  %389 = and <2 x i64> %388, %18
  %390 = and <2 x i64> %18, <i64 9221120237041090560, i64 9221120237041090560>
  %391 = xor <2 x i64> %390, <i64 9221120237041090560, i64 9221120237041090560>
  %392 = or <2 x i64> %389, %391
  %393 = bitcast <2 x i64> %392 to <2 x double>
  %394 = select <2 x i1> %384, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %393
  %395 = fmul <2 x double> %394, %383
  %396 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %397 = bitcast <2 x double> %396 to <2 x i64>
  %398 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %399 = xor <2 x i64> %398, %397
  %400 = bitcast <2 x i64> %399 to <2 x double>
  %401 = fcmp oeq <2 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %402 = fcmp uge <2 x double> %400, zeroinitializer
  %403 = fcmp oeq <2 x double> %400, zeroinitializer
  %404 = sext <2 x i1> %403 to <2 x i64>
  %405 = and <2 x i64> %404, <i64 4607182418800017408, i64 4607182418800017408>
  %406 = and <2 x i64> %404, <i64 9218868437227405312, i64 9218868437227405312>
  %407 = xor <2 x i64> %406, <i64 9218868437227405312, i64 9218868437227405312>
  %408 = or <2 x i64> %407, %405
  %409 = fcmp oeq <2 x double> %29, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %410 = fcmp oeq <2 x double> %0, zeroinitializer
  %411 = or <2 x i1> %409, %410
  %412 = and <2 x i64> %27, <i64 -9223372036854775808, i64 -9223372036854775808>
  %413 = or <2 x i64> %412, <i64 4607182418800017408, i64 4607182418800017408>
  %414 = and <2 x i64> %26, %413
  %415 = or <2 x i64> %387, %414
  %416 = bitcast <2 x i64> %415 to <2 x double>
  %417 = xor <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %418 = select <2 x i1> %410, <2 x i64> %417, <2 x i64> %13
  %419 = bitcast <2 x i64> %418 to <2 x double>
  %420 = fcmp uge <2 x double> %419, zeroinitializer
  %421 = select <2 x i1> %420, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> zeroinitializer
  %422 = fmul <2 x double> %421, %416
  %423 = fcmp uno <2 x double> %1, %0
  %424 = fcmp oeq <2 x double> %1, zeroinitializer
  %425 = fcmp oeq <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %426 = or <2 x i1> %424, %425
  %427 = bitcast <2 x i64> %408 to <2 x double>
  %428 = select <2 x i1> %402, <2 x double> %427, <2 x double> zeroinitializer
  %429 = select <2 x i1> %401, <2 x double> %428, <2 x double> %395
  %430 = select <2 x i1> %411, <2 x double> %422, <2 x double> %429
  %431 = select <2 x i1> %423, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %430
  %432 = select <2 x i1> %426, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %431
  ret <2 x double> %432
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %9 = sitofp <2 x i32> %8 to <2 x double>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = fmul <2 x double> %9, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %12 = fadd <2 x double> %11, %4
  %13 = fsub <2 x double> %12, %4
  %14 = fsub <2 x double> %12, %13
  %15 = fsub <2 x double> %4, %14
  %16 = fsub <2 x double> %11, %13
  %17 = fadd <2 x double> %16, %15
  %18 = fadd <2 x double> %17, zeroinitializer
  %19 = fmul <2 x double> %9, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %20 = fadd <2 x double> %19, %12
  %21 = fsub <2 x double> %20, %12
  %22 = fsub <2 x double> %20, %21
  %23 = fsub <2 x double> %12, %22
  %24 = fsub <2 x double> %19, %21
  %25 = fadd <2 x double> %24, %23
  %26 = fadd <2 x double> %25, %18
  %27 = bitcast <2 x double> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %20, %29
  %31 = fmul <2 x double> %20, %20
  %32 = fmul <2 x double> %29, %29
  %33 = bitcast <2 x double> %31 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fadd <2 x double> %29, %29
  %37 = fmul <2 x double> %36, %30
  %38 = fmul <2 x double> %30, %30
  %39 = fadd <2 x double> %26, %26
  %40 = fmul <2 x double> %20, %39
  %41 = fadd <2 x double> %32, %35
  %42 = fadd <2 x double> %41, %37
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %31, %46
  %48 = fmul <2 x double> %31, %31
  %49 = fmul <2 x double> %46, %46
  %50 = bitcast <2 x double> %48 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372036854775808, i64 -9223372036854775808>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fadd <2 x double> %46, %46
  %54 = fmul <2 x double> %53, %47
  %55 = fmul <2 x double> %47, %47
  %56 = fadd <2 x double> %44, %44
  %57 = fmul <2 x double> %31, %56
  %58 = fadd <2 x double> %49, %52
  %59 = fadd <2 x double> %58, %54
  %60 = fadd <2 x double> %55, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %48
  %63 = fmul <2 x double> %20, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %64 = fadd <2 x double> %63, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %65 = fmul <2 x double> %20, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %66 = fadd <2 x double> %65, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %67 = fmul <2 x double> %20, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %68 = fadd <2 x double> %67, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %69 = fmul <2 x double> %31, %66
  %70 = fadd <2 x double> %68, %69
  %71 = fmul <2 x double> %20, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %72 = fadd <2 x double> %71, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %73 = fmul <2 x double> %20, <double 0x3F81111111111119, double 0x3F81111111111119>
  %74 = fadd <2 x double> %73, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %75 = fmul <2 x double> %31, %72
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %48, %70
  %78 = fadd <2 x double> %76, %77
  %79 = fmul <2 x double> %64, %62
  %80 = fadd <2 x double> %79, %78
  %81 = fmul <2 x double> %20, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %82 = fmul <2 x double> %29, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %83 = bitcast <2 x double> %81 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fmul <2 x double> %30, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %87 = fmul <2 x double> %29, <double 0x3E25555554000000, double 0x3E25555554000000>
  %88 = fmul <2 x double> %30, <double 0x3E25555554000000, double 0x3E25555554000000>
  %89 = fmul <2 x double> %26, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %90 = fadd <2 x double> %82, %85
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %88, %92
  %94 = fadd <2 x double> %89, %93
  %95 = fadd <2 x double> %81, <double 5.000000e-01, double 5.000000e-01>
  %96 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %95
  %97 = fadd <2 x double> %81, %96
  %98 = fadd <2 x double> %97, %94
  %99 = bitcast <2 x double> %95 to <2 x i64>
  %100 = and <2 x i64> %99, <i64 -134217728, i64 -134217728>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fsub <2 x double> %95, %101
  %103 = fmul <2 x double> %20, %95
  %104 = fmul <2 x double> %29, %101
  %105 = bitcast <2 x double> %103 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fmul <2 x double> %102, %29
  %109 = fmul <2 x double> %30, %101
  %110 = fmul <2 x double> %30, %102
  %111 = fmul <2 x double> %95, %26
  %112 = fmul <2 x double> %20, %98
  %113 = fadd <2 x double> %104, %107
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %111, %116
  %118 = fadd <2 x double> %112, %117
  %119 = fadd <2 x double> %103, <double 1.000000e+00, double 1.000000e+00>
  %120 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %119
  %121 = fadd <2 x double> %103, %120
  %122 = fadd <2 x double> %121, %118
  %123 = bitcast <2 x double> %119 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 -134217728, i64 -134217728>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fsub <2 x double> %119, %125
  %127 = fmul <2 x double> %20, %119
  %128 = fmul <2 x double> %29, %125
  %129 = bitcast <2 x double> %127 to <2 x i64>
  %130 = xor <2 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = fmul <2 x double> %126, %29
  %133 = fmul <2 x double> %30, %125
  %134 = fmul <2 x double> %30, %126
  %135 = fmul <2 x double> %119, %26
  %136 = fmul <2 x double> %20, %122
  %137 = fadd <2 x double> %128, %131
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %134, %139
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %141, %136
  %143 = fadd <2 x double> %127, <double 1.000000e+00, double 1.000000e+00>
  %144 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %143
  %145 = fadd <2 x double> %127, %144
  %146 = fadd <2 x double> %145, %142
  %147 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fsub <2 x double> %48, %148
  %150 = bitcast <2 x double> %80 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -134217728, i64 -134217728>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fsub <2 x double> %80, %152
  %154 = fmul <2 x double> %48, %80
  %155 = fmul <2 x double> %148, %152
  %156 = bitcast <2 x double> %154 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372036854775808, i64 -9223372036854775808>
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %149, %152
  %160 = fmul <2 x double> %153, %148
  %161 = fmul <2 x double> %149, %153
  %162 = fmul <2 x double> %80, %61
  %163 = fadd <2 x double> %155, %158
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %143, %154
  %169 = fsub <2 x double> %143, %168
  %170 = fadd <2 x double> %154, %169
  %171 = fadd <2 x double> %170, %146
  %172 = fadd <2 x double> %167, %171
  %173 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %174 = add <4 x i32> %173, <i32 1023, i32 1023, i32 undef, i32 0>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %176 = and <4 x i32> %175, <i32 0, i32 -1, i32 0, i32 -1>
  %177 = shl <4 x i32> %176, <i32 20, i32 20, i32 20, i32 20>
  %178 = bitcast <4 x i32> %177 to <2 x double>
  %179 = fmul <2 x double> %168, %178
  %180 = add <4 x i32> %10, <i32 1023, i32 1023, i32 undef, i32 0>
  %181 = sub <4 x i32> %180, %173
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %183 = and <4 x i32> %182, <i32 0, i32 -1, i32 0, i32 -1>
  %184 = shl <4 x i32> %183, <i32 20, i32 20, i32 20, i32 20>
  %185 = bitcast <4 x i32> %184 to <2 x double>
  %186 = fmul <2 x double> %179, %185
  %187 = fmul <2 x double> %172, %178
  %188 = fmul <2 x double> %187, %185
  %189 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %190 = bitcast <2 x double> %186 to <2 x i64>
  %191 = sext <2 x i1> %189 to <2 x i64>
  %192 = and <2 x i64> %190, %191
  %193 = bitcast <2 x double> %188 to <2 x i64>
  %194 = and <2 x i64> %193, %191
  %195 = bitcast <2 x i64> %192 to <2 x double>
  %196 = bitcast <2 x i64> %194 to <2 x double>
  %197 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %195
  %198 = and <2 x i64> %192, <i64 -134217728, i64 -134217728>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fsub <2 x double> %195, %199
  %201 = bitcast <2 x double> %197 to <2 x i64>
  %202 = and <2 x i64> %201, <i64 -134217728, i64 -134217728>
  %203 = bitcast <2 x i64> %202 to <2 x double>
  %204 = fsub <2 x double> %197, %203
  %205 = fmul <2 x double> %199, %203
  %206 = fmul <2 x double> %204, %199
  %207 = fmul <2 x double> %200, %203
  %208 = fmul <2 x double> %200, %204
  %209 = fmul <2 x double> %197, %196
  %210 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fsub <2 x double> %212, %208
  %214 = fsub <2 x double> %213, %209
  %215 = fmul <2 x double> %197, %214
  %216 = fsub <2 x double> %195, %197
  %217 = fsub <2 x double> %195, %216
  %218 = fsub <2 x double> %217, %197
  %219 = fadd <2 x double> %218, %196
  %220 = fsub <2 x double> %219, %215
  %221 = fadd <2 x double> %216, %220
  %222 = fmul <2 x double> %221, <double 5.000000e-01, double 5.000000e-01>
  %223 = fcmp ogt <2 x double> %4, <double 7.100000e+02, double 7.100000e+02>
  %224 = fcmp uno <2 x double> %222, zeroinitializer
  %225 = or <2 x i1> %224, %223
  %226 = bitcast <2 x double> %222 to <2 x i64>
  %227 = select <2 x i1> %225, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %226
  %228 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %229 = xor <2 x i64> %227, %228
  %230 = fcmp uno <2 x double> %0, zeroinitializer
  %231 = bitcast <2 x i64> %229 to <2 x double>
  %232 = select <2 x i1> %230, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %231
  ret <2 x double> %232
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %9 = sitofp <2 x i32> %8 to <2 x double>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = fmul <2 x double> %9, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %12 = fadd <2 x double> %11, %4
  %13 = fsub <2 x double> %12, %4
  %14 = fsub <2 x double> %12, %13
  %15 = fsub <2 x double> %4, %14
  %16 = fsub <2 x double> %11, %13
  %17 = fadd <2 x double> %16, %15
  %18 = fadd <2 x double> %17, zeroinitializer
  %19 = fmul <2 x double> %9, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %20 = fadd <2 x double> %19, %12
  %21 = fsub <2 x double> %20, %12
  %22 = fsub <2 x double> %20, %21
  %23 = fsub <2 x double> %12, %22
  %24 = fsub <2 x double> %19, %21
  %25 = fadd <2 x double> %24, %23
  %26 = fadd <2 x double> %25, %18
  %27 = bitcast <2 x double> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %20, %29
  %31 = fmul <2 x double> %20, %20
  %32 = fmul <2 x double> %29, %29
  %33 = bitcast <2 x double> %31 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fadd <2 x double> %29, %29
  %37 = fmul <2 x double> %36, %30
  %38 = fmul <2 x double> %30, %30
  %39 = fadd <2 x double> %26, %26
  %40 = fmul <2 x double> %20, %39
  %41 = fadd <2 x double> %32, %35
  %42 = fadd <2 x double> %41, %37
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %31, %46
  %48 = fmul <2 x double> %31, %31
  %49 = fmul <2 x double> %46, %46
  %50 = bitcast <2 x double> %48 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372036854775808, i64 -9223372036854775808>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fadd <2 x double> %46, %46
  %54 = fmul <2 x double> %53, %47
  %55 = fmul <2 x double> %47, %47
  %56 = fadd <2 x double> %44, %44
  %57 = fmul <2 x double> %31, %56
  %58 = fadd <2 x double> %49, %52
  %59 = fadd <2 x double> %58, %54
  %60 = fadd <2 x double> %55, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %48
  %63 = fmul <2 x double> %20, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %64 = fadd <2 x double> %63, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %65 = fmul <2 x double> %20, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %66 = fadd <2 x double> %65, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %67 = fmul <2 x double> %20, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %68 = fadd <2 x double> %67, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %69 = fmul <2 x double> %31, %66
  %70 = fadd <2 x double> %68, %69
  %71 = fmul <2 x double> %20, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %72 = fadd <2 x double> %71, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %73 = fmul <2 x double> %20, <double 0x3F81111111111119, double 0x3F81111111111119>
  %74 = fadd <2 x double> %73, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %75 = fmul <2 x double> %31, %72
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %48, %70
  %78 = fadd <2 x double> %76, %77
  %79 = fmul <2 x double> %64, %62
  %80 = fadd <2 x double> %79, %78
  %81 = fmul <2 x double> %20, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %82 = fmul <2 x double> %29, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %83 = bitcast <2 x double> %81 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fmul <2 x double> %30, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %87 = fmul <2 x double> %29, <double 0x3E25555554000000, double 0x3E25555554000000>
  %88 = fmul <2 x double> %30, <double 0x3E25555554000000, double 0x3E25555554000000>
  %89 = fmul <2 x double> %26, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %90 = fadd <2 x double> %82, %85
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %88, %92
  %94 = fadd <2 x double> %89, %93
  %95 = fadd <2 x double> %81, <double 5.000000e-01, double 5.000000e-01>
  %96 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %95
  %97 = fadd <2 x double> %81, %96
  %98 = fadd <2 x double> %97, %94
  %99 = bitcast <2 x double> %95 to <2 x i64>
  %100 = and <2 x i64> %99, <i64 -134217728, i64 -134217728>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fsub <2 x double> %95, %101
  %103 = fmul <2 x double> %20, %95
  %104 = fmul <2 x double> %29, %101
  %105 = bitcast <2 x double> %103 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fmul <2 x double> %102, %29
  %109 = fmul <2 x double> %30, %101
  %110 = fmul <2 x double> %30, %102
  %111 = fmul <2 x double> %95, %26
  %112 = fmul <2 x double> %20, %98
  %113 = fadd <2 x double> %104, %107
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %111, %116
  %118 = fadd <2 x double> %112, %117
  %119 = fadd <2 x double> %103, <double 1.000000e+00, double 1.000000e+00>
  %120 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %119
  %121 = fadd <2 x double> %103, %120
  %122 = fadd <2 x double> %121, %118
  %123 = bitcast <2 x double> %119 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 -134217728, i64 -134217728>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fsub <2 x double> %119, %125
  %127 = fmul <2 x double> %20, %119
  %128 = fmul <2 x double> %29, %125
  %129 = bitcast <2 x double> %127 to <2 x i64>
  %130 = xor <2 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = fmul <2 x double> %126, %29
  %133 = fmul <2 x double> %30, %125
  %134 = fmul <2 x double> %30, %126
  %135 = fmul <2 x double> %119, %26
  %136 = fmul <2 x double> %20, %122
  %137 = fadd <2 x double> %128, %131
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %134, %139
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %141, %136
  %143 = fadd <2 x double> %127, <double 1.000000e+00, double 1.000000e+00>
  %144 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %143
  %145 = fadd <2 x double> %127, %144
  %146 = fadd <2 x double> %145, %142
  %147 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fsub <2 x double> %48, %148
  %150 = bitcast <2 x double> %80 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -134217728, i64 -134217728>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fsub <2 x double> %80, %152
  %154 = fmul <2 x double> %48, %80
  %155 = fmul <2 x double> %148, %152
  %156 = bitcast <2 x double> %154 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372036854775808, i64 -9223372036854775808>
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %149, %152
  %160 = fmul <2 x double> %153, %148
  %161 = fmul <2 x double> %149, %153
  %162 = fmul <2 x double> %80, %61
  %163 = fadd <2 x double> %155, %158
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %143, %154
  %169 = fsub <2 x double> %143, %168
  %170 = fadd <2 x double> %154, %169
  %171 = fadd <2 x double> %170, %146
  %172 = fadd <2 x double> %167, %171
  %173 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %174 = add <4 x i32> %173, <i32 1023, i32 1023, i32 undef, i32 0>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %176 = and <4 x i32> %175, <i32 0, i32 -1, i32 0, i32 -1>
  %177 = shl <4 x i32> %176, <i32 20, i32 20, i32 20, i32 20>
  %178 = bitcast <4 x i32> %177 to <2 x double>
  %179 = fmul <2 x double> %168, %178
  %180 = add <4 x i32> %10, <i32 1023, i32 1023, i32 undef, i32 0>
  %181 = sub <4 x i32> %180, %173
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %183 = and <4 x i32> %182, <i32 0, i32 -1, i32 0, i32 -1>
  %184 = shl <4 x i32> %183, <i32 20, i32 20, i32 20, i32 20>
  %185 = bitcast <4 x i32> %184 to <2 x double>
  %186 = fmul <2 x double> %179, %185
  %187 = fmul <2 x double> %172, %178
  %188 = fmul <2 x double> %187, %185
  %189 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %190 = bitcast <2 x double> %186 to <2 x i64>
  %191 = sext <2 x i1> %189 to <2 x i64>
  %192 = and <2 x i64> %190, %191
  %193 = bitcast <2 x double> %188 to <2 x i64>
  %194 = and <2 x i64> %193, %191
  %195 = bitcast <2 x i64> %192 to <2 x double>
  %196 = bitcast <2 x i64> %194 to <2 x double>
  %197 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %195
  %198 = and <2 x i64> %192, <i64 -134217728, i64 -134217728>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fsub <2 x double> %195, %199
  %201 = bitcast <2 x double> %197 to <2 x i64>
  %202 = and <2 x i64> %201, <i64 -134217728, i64 -134217728>
  %203 = bitcast <2 x i64> %202 to <2 x double>
  %204 = fsub <2 x double> %197, %203
  %205 = fmul <2 x double> %199, %203
  %206 = fmul <2 x double> %204, %199
  %207 = fmul <2 x double> %200, %203
  %208 = fmul <2 x double> %200, %204
  %209 = fmul <2 x double> %197, %196
  %210 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fsub <2 x double> %212, %208
  %214 = fsub <2 x double> %213, %209
  %215 = fmul <2 x double> %197, %214
  %216 = fadd <2 x double> %197, %195
  %217 = fsub <2 x double> %195, %216
  %218 = fadd <2 x double> %197, %217
  %219 = fadd <2 x double> %218, %196
  %220 = fadd <2 x double> %219, %215
  %221 = fadd <2 x double> %216, %220
  %222 = fmul <2 x double> %221, <double 5.000000e-01, double 5.000000e-01>
  %223 = fcmp ogt <2 x double> %4, <double 7.100000e+02, double 7.100000e+02>
  %224 = fcmp uno <2 x double> %222, zeroinitializer
  %225 = or <2 x i1> %224, %223
  %226 = fcmp uno <2 x double> %0, zeroinitializer
  %227 = select <2 x i1> %225, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %222
  %228 = select <2 x i1> %226, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %227
  ret <2 x double> %228
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %9 = sitofp <2 x i32> %8 to <2 x double>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = fmul <2 x double> %9, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %12 = fadd <2 x double> %11, %4
  %13 = fsub <2 x double> %12, %4
  %14 = fsub <2 x double> %12, %13
  %15 = fsub <2 x double> %4, %14
  %16 = fsub <2 x double> %11, %13
  %17 = fadd <2 x double> %16, %15
  %18 = fadd <2 x double> %17, zeroinitializer
  %19 = fmul <2 x double> %9, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %20 = fadd <2 x double> %19, %12
  %21 = fsub <2 x double> %20, %12
  %22 = fsub <2 x double> %20, %21
  %23 = fsub <2 x double> %12, %22
  %24 = fsub <2 x double> %19, %21
  %25 = fadd <2 x double> %24, %23
  %26 = fadd <2 x double> %25, %18
  %27 = bitcast <2 x double> %20 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %20, %29
  %31 = fmul <2 x double> %20, %20
  %32 = fmul <2 x double> %29, %29
  %33 = bitcast <2 x double> %31 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fadd <2 x double> %29, %29
  %37 = fmul <2 x double> %36, %30
  %38 = fmul <2 x double> %30, %30
  %39 = fadd <2 x double> %26, %26
  %40 = fmul <2 x double> %20, %39
  %41 = fadd <2 x double> %32, %35
  %42 = fadd <2 x double> %41, %37
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %31, %46
  %48 = fmul <2 x double> %31, %31
  %49 = fmul <2 x double> %46, %46
  %50 = bitcast <2 x double> %48 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372036854775808, i64 -9223372036854775808>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fadd <2 x double> %46, %46
  %54 = fmul <2 x double> %53, %47
  %55 = fmul <2 x double> %47, %47
  %56 = fadd <2 x double> %44, %44
  %57 = fmul <2 x double> %31, %56
  %58 = fadd <2 x double> %49, %52
  %59 = fadd <2 x double> %58, %54
  %60 = fadd <2 x double> %55, %59
  %61 = fadd <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %48
  %63 = fmul <2 x double> %20, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %64 = fadd <2 x double> %63, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %65 = fmul <2 x double> %20, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %66 = fadd <2 x double> %65, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %67 = fmul <2 x double> %20, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %68 = fadd <2 x double> %67, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %69 = fmul <2 x double> %31, %66
  %70 = fadd <2 x double> %68, %69
  %71 = fmul <2 x double> %20, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %72 = fadd <2 x double> %71, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %73 = fmul <2 x double> %20, <double 0x3F81111111111119, double 0x3F81111111111119>
  %74 = fadd <2 x double> %73, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %75 = fmul <2 x double> %31, %72
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %48, %70
  %78 = fadd <2 x double> %76, %77
  %79 = fmul <2 x double> %64, %62
  %80 = fadd <2 x double> %79, %78
  %81 = fmul <2 x double> %20, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %82 = fmul <2 x double> %29, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %83 = bitcast <2 x double> %81 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fmul <2 x double> %30, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %87 = fmul <2 x double> %29, <double 0x3E25555554000000, double 0x3E25555554000000>
  %88 = fmul <2 x double> %30, <double 0x3E25555554000000, double 0x3E25555554000000>
  %89 = fmul <2 x double> %26, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %90 = fadd <2 x double> %82, %85
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %88, %92
  %94 = fadd <2 x double> %89, %93
  %95 = fadd <2 x double> %81, <double 5.000000e-01, double 5.000000e-01>
  %96 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %95
  %97 = fadd <2 x double> %81, %96
  %98 = fadd <2 x double> %97, %94
  %99 = bitcast <2 x double> %95 to <2 x i64>
  %100 = and <2 x i64> %99, <i64 -134217728, i64 -134217728>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fsub <2 x double> %95, %101
  %103 = fmul <2 x double> %20, %95
  %104 = fmul <2 x double> %29, %101
  %105 = bitcast <2 x double> %103 to <2 x i64>
  %106 = xor <2 x i64> %105, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fmul <2 x double> %102, %29
  %109 = fmul <2 x double> %30, %101
  %110 = fmul <2 x double> %30, %102
  %111 = fmul <2 x double> %95, %26
  %112 = fmul <2 x double> %20, %98
  %113 = fadd <2 x double> %104, %107
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %111, %116
  %118 = fadd <2 x double> %112, %117
  %119 = fadd <2 x double> %103, <double 1.000000e+00, double 1.000000e+00>
  %120 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %119
  %121 = fadd <2 x double> %103, %120
  %122 = fadd <2 x double> %121, %118
  %123 = bitcast <2 x double> %119 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 -134217728, i64 -134217728>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fsub <2 x double> %119, %125
  %127 = fmul <2 x double> %20, %119
  %128 = fmul <2 x double> %29, %125
  %129 = bitcast <2 x double> %127 to <2 x i64>
  %130 = xor <2 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = fmul <2 x double> %126, %29
  %133 = fmul <2 x double> %30, %125
  %134 = fmul <2 x double> %30, %126
  %135 = fmul <2 x double> %119, %26
  %136 = fmul <2 x double> %20, %122
  %137 = fadd <2 x double> %128, %131
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %134, %139
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %141, %136
  %143 = fadd <2 x double> %127, <double 1.000000e+00, double 1.000000e+00>
  %144 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %143
  %145 = fadd <2 x double> %127, %144
  %146 = fadd <2 x double> %145, %142
  %147 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fsub <2 x double> %48, %148
  %150 = bitcast <2 x double> %80 to <2 x i64>
  %151 = and <2 x i64> %150, <i64 -134217728, i64 -134217728>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fsub <2 x double> %80, %152
  %154 = fmul <2 x double> %48, %80
  %155 = fmul <2 x double> %148, %152
  %156 = bitcast <2 x double> %154 to <2 x i64>
  %157 = xor <2 x i64> %156, <i64 -9223372036854775808, i64 -9223372036854775808>
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %149, %152
  %160 = fmul <2 x double> %153, %148
  %161 = fmul <2 x double> %149, %153
  %162 = fmul <2 x double> %80, %61
  %163 = fadd <2 x double> %155, %158
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %143, %154
  %169 = fsub <2 x double> %143, %168
  %170 = fadd <2 x double> %154, %169
  %171 = fadd <2 x double> %170, %146
  %172 = fadd <2 x double> %167, %171
  %173 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %174 = add <4 x i32> %173, <i32 1023, i32 1023, i32 undef, i32 0>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %176 = and <4 x i32> %175, <i32 0, i32 -1, i32 0, i32 -1>
  %177 = shl <4 x i32> %176, <i32 20, i32 20, i32 20, i32 20>
  %178 = bitcast <4 x i32> %177 to <2 x double>
  %179 = fmul <2 x double> %168, %178
  %180 = add <4 x i32> %10, <i32 1023, i32 1023, i32 undef, i32 0>
  %181 = sub <4 x i32> %180, %173
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %183 = and <4 x i32> %182, <i32 0, i32 -1, i32 0, i32 -1>
  %184 = shl <4 x i32> %183, <i32 20, i32 20, i32 20, i32 20>
  %185 = bitcast <4 x i32> %184 to <2 x double>
  %186 = fmul <2 x double> %179, %185
  %187 = fmul <2 x double> %172, %178
  %188 = fmul <2 x double> %187, %185
  %189 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %190 = bitcast <2 x double> %186 to <2 x i64>
  %191 = sext <2 x i1> %189 to <2 x i64>
  %192 = and <2 x i64> %190, %191
  %193 = bitcast <2 x double> %188 to <2 x i64>
  %194 = and <2 x i64> %193, %191
  %195 = bitcast <2 x i64> %192 to <2 x double>
  %196 = bitcast <2 x i64> %194 to <2 x double>
  %197 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %195
  %198 = and <2 x i64> %192, <i64 -134217728, i64 -134217728>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fsub <2 x double> %195, %199
  %201 = bitcast <2 x double> %197 to <2 x i64>
  %202 = and <2 x i64> %201, <i64 -134217728, i64 -134217728>
  %203 = bitcast <2 x i64> %202 to <2 x double>
  %204 = fsub <2 x double> %197, %203
  %205 = fmul <2 x double> %199, %203
  %206 = fmul <2 x double> %204, %199
  %207 = fmul <2 x double> %200, %203
  %208 = fmul <2 x double> %200, %204
  %209 = fmul <2 x double> %197, %196
  %210 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fsub <2 x double> %212, %208
  %214 = fsub <2 x double> %213, %209
  %215 = fmul <2 x double> %197, %214
  %216 = xor <2 x i64> %201, <i64 -9223372036854775808, i64 -9223372036854775808>
  %217 = bitcast <2 x double> %215 to <2 x i64>
  %218 = xor <2 x i64> %217, <i64 -9223372036854775808, i64 -9223372036854775808>
  %219 = bitcast <2 x i64> %216 to <2 x double>
  %220 = bitcast <2 x i64> %218 to <2 x double>
  %221 = fadd <2 x double> %195, %219
  %222 = fsub <2 x double> %221, %195
  %223 = fsub <2 x double> %221, %222
  %224 = fsub <2 x double> %195, %223
  %225 = fsub <2 x double> %219, %222
  %226 = fadd <2 x double> %225, %224
  %227 = fadd <2 x double> %196, %220
  %228 = fadd <2 x double> %226, %227
  %229 = fadd <2 x double> %197, %195
  %230 = fsub <2 x double> %229, %195
  %231 = fsub <2 x double> %229, %230
  %232 = fsub <2 x double> %195, %231
  %233 = fsub <2 x double> %197, %230
  %234 = fadd <2 x double> %233, %232
  %235 = fadd <2 x double> %215, %196
  %236 = fadd <2 x double> %234, %235
  %237 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %229
  %238 = bitcast <2 x double> %229 to <2 x i64>
  %239 = and <2 x i64> %238, <i64 -134217728, i64 -134217728>
  %240 = bitcast <2 x i64> %239 to <2 x double>
  %241 = fsub <2 x double> %229, %240
  %242 = bitcast <2 x double> %237 to <2 x i64>
  %243 = and <2 x i64> %242, <i64 -134217728, i64 -134217728>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = fsub <2 x double> %237, %244
  %246 = bitcast <2 x double> %221 to <2 x i64>
  %247 = and <2 x i64> %246, <i64 -134217728, i64 -134217728>
  %248 = bitcast <2 x i64> %247 to <2 x double>
  %249 = fsub <2 x double> %221, %248
  %250 = fmul <2 x double> %237, %221
  %251 = fmul <2 x double> %244, %248
  %252 = fsub <2 x double> %251, %250
  %253 = fmul <2 x double> %245, %248
  %254 = fmul <2 x double> %249, %244
  %255 = fmul <2 x double> %245, %249
  %256 = fmul <2 x double> %240, %244
  %257 = fmul <2 x double> %245, %240
  %258 = fmul <2 x double> %241, %244
  %259 = fmul <2 x double> %241, %245
  %260 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %256
  %261 = fsub <2 x double> %260, %257
  %262 = fsub <2 x double> %261, %258
  %263 = fsub <2 x double> %262, %259
  %264 = fmul <2 x double> %250, %263
  %265 = fadd <2 x double> %253, %252
  %266 = fadd <2 x double> %254, %265
  %267 = fadd <2 x double> %255, %266
  %268 = fadd <2 x double> %264, %267
  %269 = fmul <2 x double> %250, %236
  %270 = fsub <2 x double> %228, %269
  %271 = fmul <2 x double> %237, %270
  %272 = fadd <2 x double> %268, %271
  %273 = fadd <2 x double> %250, %272
  %274 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %275 = fcmp uno <2 x double> %273, zeroinitializer
  %276 = or <2 x i1> %275, %274
  %277 = bitcast <2 x double> %273 to <2 x i64>
  %278 = select <2 x i1> %276, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %277
  %279 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %280 = xor <2 x i64> %278, %279
  %281 = fcmp uno <2 x double> %0, zeroinitializer
  %282 = bitcast <2 x i64> %280 to <2 x double>
  %283 = select <2 x i1> %281, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %282
  ret <2 x double> %283
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %8 = sitofp <2 x i32> %7 to <2 x double>
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %8) #6
  %10 = fmul <2 x double> %8, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %11 = fadd <2 x double> %10, %4
  %12 = fmul <2 x double> %8, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %13 = fadd <2 x double> %12, %11
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %13, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %18 = fadd <2 x double> %17, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %19 = fmul <2 x double> %13, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %20 = fadd <2 x double> %19, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %21 = fmul <2 x double> %13, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %22 = fadd <2 x double> %21, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %23 = fmul <2 x double> %14, %20
  %24 = fadd <2 x double> %22, %23
  %25 = fmul <2 x double> %13, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %26 = fadd <2 x double> %25, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %27 = fmul <2 x double> %13, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %28 = fadd <2 x double> %27, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %29 = fmul <2 x double> %14, %26
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %15, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fmul <2 x double> %18, %16
  %34 = fadd <2 x double> %33, %32
  %35 = fmul <2 x double> %13, %14
  %36 = fmul <2 x double> %35, %34
  %37 = fmul <2 x double> %14, <double 5.000000e-01, double 5.000000e-01>
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %13, %38
  %40 = icmp eq <4 x i32> %9, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = fadd <2 x double> %39, <double 1.000000e+00, double 1.000000e+00>
  %45 = ashr <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 undef, i32 0>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %48 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %49 = shl <4 x i32> %48, <i32 20, i32 20, i32 20, i32 20>
  %50 = bitcast <4 x i32> %49 to <2 x double>
  %51 = fmul <2 x double> %44, %50
  %52 = add <4 x i32> %9, <i32 1023, i32 1023, i32 undef, i32 0>
  %53 = sub <4 x i32> %52, %45
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %55 = and <4 x i32> %54, <i32 0, i32 -1, i32 0, i32 -1>
  %56 = shl <4 x i32> %55, <i32 20, i32 20, i32 20, i32 20>
  %57 = bitcast <4 x i32> %56 to <2 x double>
  %58 = fmul <2 x double> %51, %57
  %59 = fadd <2 x double> %58, <double -1.000000e+00, double -1.000000e+00>
  %60 = bitcast <2 x double> %39 to <2 x i64>
  %61 = and <2 x i64> %60, %43
  %62 = xor <2 x i64> %43, <i64 -1, i64 -1>
  %63 = bitcast <2 x double> %59 to <2 x i64>
  %64 = and <2 x i64> %63, %62
  %65 = or <2 x i64> %64, %61
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fadd <2 x double> %66, <double 2.000000e+00, double 2.000000e+00>
  %68 = fadd <2 x double> %66, <double 1.000000e+00, double 1.000000e+00>
  %69 = fdiv <2 x double> %67, %68
  %70 = fmul <2 x double> %66, <double 5.000000e-01, double 5.000000e-01>
  %71 = fmul <2 x double> %70, %69
  %72 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %73 = fcmp uno <2 x double> %71, zeroinitializer
  %74 = or <2 x i1> %73, %72
  %75 = bitcast <2 x double> %71 to <2 x i64>
  %76 = select <2 x i1> %74, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %75
  %77 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %78 = xor <2 x i64> %76, %77
  %79 = fcmp uno <2 x double> %0, zeroinitializer
  %80 = bitcast <2 x i64> %78 to <2 x double>
  %81 = select <2 x i1> %79, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %80
  ret <2 x double> %81
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %8 = sitofp <2 x i32> %7 to <2 x double>
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %8) #6
  %10 = fmul <2 x double> %8, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %11 = fadd <2 x double> %10, %4
  %12 = fmul <2 x double> %8, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %13 = fadd <2 x double> %12, %11
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %13, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %18 = fadd <2 x double> %17, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %19 = fmul <2 x double> %13, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %20 = fadd <2 x double> %19, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %21 = fmul <2 x double> %13, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %22 = fadd <2 x double> %21, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %23 = fmul <2 x double> %14, %20
  %24 = fadd <2 x double> %22, %23
  %25 = fmul <2 x double> %13, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %26 = fadd <2 x double> %25, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %27 = fmul <2 x double> %13, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %28 = fadd <2 x double> %27, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %29 = fmul <2 x double> %14, %26
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %15, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fmul <2 x double> %18, %16
  %34 = fadd <2 x double> %33, %32
  %35 = fmul <2 x double> %13, %34
  %36 = fadd <2 x double> %35, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %14, %36
  %38 = fadd <2 x double> %13, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = ashr <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %41 = add <4 x i32> %40, <i32 1023, i32 1023, i32 undef, i32 0>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %43 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %44 = shl <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = bitcast <4 x i32> %44 to <2 x double>
  %46 = fmul <2 x double> %39, %45
  %47 = add <4 x i32> %9, <i32 1023, i32 1023, i32 undef, i32 0>
  %48 = sub <4 x i32> %47, %40
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %50 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = shl <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = bitcast <4 x i32> %51 to <2 x double>
  %53 = fmul <2 x double> %46, %52
  %54 = fcmp ogt <2 x double> %4, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %55 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %56 = select <2 x i1> %54, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %53
  %57 = select <2 x i1> %55, <2 x double> %56, <2 x double> zeroinitializer
  %58 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %57
  %59 = fmul <2 x double> %57, <double 5.000000e-01, double 5.000000e-01>
  %60 = fadd <2 x double> %59, %58
  %61 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %62 = fcmp uno <2 x double> %60, zeroinitializer
  %63 = or <2 x i1> %62, %61
  %64 = fcmp uno <2 x double> %0, zeroinitializer
  %65 = select <2 x i1> %63, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %60
  %66 = select <2 x i1> %64, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %65
  ret <2 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %9 = sitofp <2 x i32> %8 to <2 x double>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = fmul <2 x double> %9, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %12 = fadd <2 x double> %5, %11
  %13 = fmul <2 x double> %9, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %14 = fadd <2 x double> %13, %12
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %16, %16
  %18 = fmul <2 x double> %14, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %19 = fadd <2 x double> %18, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %20 = fmul <2 x double> %14, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %21 = fadd <2 x double> %20, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %22 = fmul <2 x double> %14, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %23 = fadd <2 x double> %22, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %24 = fmul <2 x double> %15, %21
  %25 = fadd <2 x double> %23, %24
  %26 = fmul <2 x double> %14, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %27 = fadd <2 x double> %26, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %28 = fmul <2 x double> %14, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %29 = fadd <2 x double> %28, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %30 = fmul <2 x double> %15, %27
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %16, %25
  %33 = fadd <2 x double> %31, %32
  %34 = fmul <2 x double> %19, %17
  %35 = fadd <2 x double> %34, %33
  %36 = fmul <2 x double> %14, %15
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %15, <double 5.000000e-01, double 5.000000e-01>
  %39 = fadd <2 x double> %38, %37
  %40 = fadd <2 x double> %14, %39
  %41 = icmp eq <4 x i32> %10, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = fadd <2 x double> %40, <double 1.000000e+00, double 1.000000e+00>
  %46 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %47 = add <4 x i32> %46, <i32 1023, i32 1023, i32 undef, i32 0>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %49 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = bitcast <4 x i32> %50 to <2 x double>
  %52 = fmul <2 x double> %45, %51
  %53 = add <4 x i32> %10, <i32 1023, i32 1023, i32 undef, i32 0>
  %54 = sub <4 x i32> %53, %46
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %56 = and <4 x i32> %55, <i32 0, i32 -1, i32 0, i32 -1>
  %57 = shl <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %52, %58
  %60 = fadd <2 x double> %59, <double -1.000000e+00, double -1.000000e+00>
  %61 = bitcast <2 x double> %40 to <2 x i64>
  %62 = and <2 x i64> %61, %44
  %63 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %64 = bitcast <2 x double> %60 to <2 x i64>
  %65 = and <2 x i64> %64, %63
  %66 = or <2 x i64> %65, %62
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fadd <2 x double> %67, <double 2.000000e+00, double 2.000000e+00>
  %69 = fdiv <2 x double> %67, %68
  %70 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %71 = fcmp uno <2 x double> %69, zeroinitializer
  %72 = or <2 x i1> %71, %70
  %73 = bitcast <2 x double> %69 to <2 x i64>
  %74 = select <2 x i1> %72, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %73
  %75 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %76 = xor <2 x i64> %74, %75
  %77 = fcmp uno <2 x double> %0, zeroinitializer
  %78 = bitcast <2 x i64> %76 to <2 x double>
  %79 = select <2 x i1> %77, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %78
  ret <2 x double> %79
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asinhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %0
  %8 = and <2 x i64> %2, <i64 -134217728, i64 -134217728>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = fsub <2 x double> %0, %9
  %11 = bitcast <2 x double> %7 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 -134217728, i64 -134217728>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fsub <2 x double> %7, %13
  %15 = fmul <2 x double> %9, %13
  %16 = fmul <2 x double> %14, %9
  %17 = fmul <2 x double> %10, %13
  %18 = fmul <2 x double> %10, %14
  %19 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %20 = fsub <2 x double> %19, %16
  %21 = fsub <2 x double> %20, %17
  %22 = fsub <2 x double> %21, %18
  %23 = fmul <2 x double> %7, %22
  %24 = and <2 x i64> %6, %11
  %25 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %26 = and <2 x i64> %3, %25
  %27 = or <2 x i64> %26, %24
  %28 = bitcast <2 x double> %23 to <2 x i64>
  %29 = and <2 x i64> %28, %6
  %30 = bitcast <2 x i64> %27 to <2 x double>
  %31 = bitcast <2 x i64> %29 to <2 x double>
  %32 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fsub <2 x double> %30, %33
  %35 = fmul <2 x double> %30, %30
  %36 = fmul <2 x double> %33, %33
  %37 = bitcast <2 x double> %35 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372036854775808, i64 -9223372036854775808>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fadd <2 x double> %33, %33
  %41 = fmul <2 x double> %40, %34
  %42 = fmul <2 x double> %34, %34
  %43 = fadd <2 x double> %31, %31
  %44 = fmul <2 x double> %43, %30
  %45 = fadd <2 x double> %36, %39
  %46 = fadd <2 x double> %41, %45
  %47 = fadd <2 x double> %42, %46
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %35, <double 1.000000e+00, double 1.000000e+00>
  %50 = fsub <2 x double> %49, %35
  %51 = fsub <2 x double> %49, %50
  %52 = fsub <2 x double> %35, %51
  %53 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %50
  %54 = fadd <2 x double> %53, %52
  %55 = fadd <2 x double> %54, %48
  %56 = fadd <2 x double> %49, %55
  %57 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %56) #6
  %58 = bitcast <2 x double> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -134217728, i64 -134217728>
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = fsub <2 x double> %57, %60
  %62 = fmul <2 x double> %57, %57
  %63 = fmul <2 x double> %60, %60
  %64 = bitcast <2 x double> %62 to <2 x i64>
  %65 = xor <2 x i64> %64, <i64 -9223372036854775808, i64 -9223372036854775808>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fmul <2 x double> %61, %60
  %68 = fmul <2 x double> %61, %61
  %69 = fadd <2 x double> %63, %66
  %70 = fadd <2 x double> %67, %69
  %71 = fadd <2 x double> %67, %70
  %72 = fadd <2 x double> %68, %71
  %73 = fadd <2 x double> %49, %62
  %74 = fsub <2 x double> %73, %49
  %75 = fsub <2 x double> %73, %74
  %76 = fsub <2 x double> %49, %75
  %77 = fsub <2 x double> %62, %74
  %78 = fadd <2 x double> %77, %76
  %79 = fadd <2 x double> %55, %72
  %80 = fadd <2 x double> %78, %79
  %81 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %57
  %82 = bitcast <2 x double> %81 to <2 x i64>
  %83 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fsub <2 x double> %81, %84
  %86 = fmul <2 x double> %60, %84
  %87 = fmul <2 x double> %85, %60
  %88 = fmul <2 x double> %61, %84
  %89 = fmul <2 x double> %61, %85
  %90 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %86
  %91 = fsub <2 x double> %90, %87
  %92 = fsub <2 x double> %91, %88
  %93 = fsub <2 x double> %92, %89
  %94 = fmul <2 x double> %81, %93
  %95 = bitcast <2 x double> %73 to <2 x i64>
  %96 = and <2 x i64> %95, <i64 -134217728, i64 -134217728>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fsub <2 x double> %73, %97
  %99 = fmul <2 x double> %81, %73
  %100 = fmul <2 x double> %84, %97
  %101 = bitcast <2 x double> %99 to <2 x i64>
  %102 = xor <2 x i64> %101, <i64 -9223372036854775808, i64 -9223372036854775808>
  %103 = bitcast <2 x i64> %102 to <2 x double>
  %104 = fmul <2 x double> %98, %84
  %105 = fmul <2 x double> %85, %97
  %106 = fmul <2 x double> %85, %98
  %107 = fmul <2 x double> %73, %94
  %108 = fmul <2 x double> %81, %80
  %109 = fadd <2 x double> %100, %103
  %110 = fadd <2 x double> %104, %109
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %112, %107
  %114 = fadd <2 x double> %108, %113
  %115 = fmul <2 x double> %99, <double 5.000000e-01, double 5.000000e-01>
  %116 = fmul <2 x double> %114, <double 5.000000e-01, double 5.000000e-01>
  %117 = bitcast <2 x double> %115 to <2 x i64>
  %118 = bitcast <2 x double> %116 to <2 x i64>
  %119 = and <2 x i64> %117, <i64 -134217728, i64 -134217728>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %115, %120
  %122 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fsub <2 x double> %4, %123
  %125 = fmul <2 x double> %115, %4
  %126 = fmul <2 x double> %123, %120
  %127 = bitcast <2 x double> %125 to <2 x i64>
  %128 = xor <2 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fmul <2 x double> %121, %123
  %131 = fmul <2 x double> %124, %120
  %132 = fmul <2 x double> %124, %121
  %133 = fmul <2 x double> %116, %4
  %134 = fadd <2 x double> %126, %129
  %135 = fadd <2 x double> %130, %134
  %136 = fadd <2 x double> %131, %135
  %137 = fadd <2 x double> %132, %136
  %138 = fadd <2 x double> %137, %133
  %139 = and <2 x i64> %127, %6
  %140 = and <2 x i64> %117, %25
  %141 = or <2 x i64> %139, %140
  %142 = bitcast <2 x double> %138 to <2 x i64>
  %143 = and <2 x i64> %142, %6
  %144 = and <2 x i64> %118, %25
  %145 = or <2 x i64> %143, %144
  %146 = bitcast <2 x i64> %141 to <2 x double>
  %147 = bitcast <2 x i64> %145 to <2 x double>
  %148 = fadd <2 x double> %146, %0
  %149 = fsub <2 x double> %148, %146
  %150 = fsub <2 x double> %148, %149
  %151 = fsub <2 x double> %146, %150
  %152 = fsub <2 x double> %0, %149
  %153 = fadd <2 x double> %152, %151
  %154 = fadd <2 x double> %153, %147
  %155 = fadd <2 x double> %148, %154
  %156 = fsub <2 x double> %148, %155
  %157 = fadd <2 x double> %154, %156
  %158 = fmul <2 x double> %155, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %159 = fcmp olt <2 x double> %158, <double 0x2D30000000000000, double 0x2D30000000000000>
  %160 = sext <2 x i1> %159 to <2 x i64>
  %161 = fmul <2 x double> %158, <double 0x52B0000000000000, double 0x52B0000000000000>
  %162 = select <2 x i1> %159, <2 x double> %161, <2 x double> %158
  %163 = bitcast <2 x double> %162 to <4 x i32>
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %165 = and <4 x i32> %164, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %166 = lshr exact <4 x i32> %165, <i32 20, i32 20, i32 20, i32 20>
  %167 = bitcast <2 x i64> %160 to <4 x i32>
  %168 = shufflevector <4 x i32> %167, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = and <2 x i64> %169, <i64 5682241733931, i64 0>
  %171 = xor <2 x i64> %169, <i64 4393751544831, i64 4393751544831>
  %172 = and <2 x i64> %171, <i64 4393751544831, i64 0>
  %173 = or <2 x i64> %172, %170
  %174 = bitcast <2 x i64> %173 to <4 x i32>
  %175 = sub <4 x i32> %166, %174
  %176 = sub <4 x i32> zeroinitializer, %175
  %177 = ashr <4 x i32> %176, <i32 1, i32 1, i32 1, i32 1>
  %178 = add <4 x i32> %177, <i32 1023, i32 1023, i32 undef, i32 0>
  %179 = shufflevector <4 x i32> %178, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %180 = and <4 x i32> %179, <i32 0, i32 -1, i32 0, i32 -1>
  %181 = shl <4 x i32> %180, <i32 20, i32 20, i32 20, i32 20>
  %182 = bitcast <4 x i32> %181 to <2 x double>
  %183 = fmul <2 x double> %155, %182
  %184 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %175
  %185 = sub <4 x i32> %184, %177
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %187 = and <4 x i32> %186, <i32 0, i32 -1, i32 0, i32 -1>
  %188 = shl <4 x i32> %187, <i32 20, i32 20, i32 20, i32 20>
  %189 = bitcast <4 x i32> %188 to <2 x double>
  %190 = fmul <2 x double> %183, %189
  %191 = fmul <2 x double> %157, %182
  %192 = fmul <2 x double> %191, %189
  %193 = fadd <2 x double> %190, <double -1.000000e+00, double -1.000000e+00>
  %194 = fsub <2 x double> %193, %190
  %195 = fsub <2 x double> %193, %194
  %196 = fsub <2 x double> %190, %195
  %197 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %194
  %198 = fadd <2 x double> %197, %196
  %199 = fadd <2 x double> %192, %198
  %200 = fadd <2 x double> %190, <double 1.000000e+00, double 1.000000e+00>
  %201 = fsub <2 x double> %200, %190
  %202 = fsub <2 x double> %200, %201
  %203 = fsub <2 x double> %190, %202
  %204 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %201
  %205 = fadd <2 x double> %204, %203
  %206 = fadd <2 x double> %192, %205
  %207 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %200
  %208 = bitcast <2 x double> %200 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -134217728, i64 -134217728>
  %210 = bitcast <2 x i64> %209 to <2 x double>
  %211 = fsub <2 x double> %200, %210
  %212 = bitcast <2 x double> %207 to <2 x i64>
  %213 = and <2 x i64> %212, <i64 -134217728, i64 -134217728>
  %214 = bitcast <2 x i64> %213 to <2 x double>
  %215 = fsub <2 x double> %207, %214
  %216 = bitcast <2 x double> %193 to <2 x i64>
  %217 = and <2 x i64> %216, <i64 -134217728, i64 -134217728>
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = fsub <2 x double> %193, %218
  %220 = fmul <2 x double> %193, %207
  %221 = fmul <2 x double> %218, %214
  %222 = fsub <2 x double> %221, %220
  %223 = fmul <2 x double> %215, %218
  %224 = fmul <2 x double> %219, %214
  %225 = fmul <2 x double> %219, %215
  %226 = fmul <2 x double> %210, %214
  %227 = fmul <2 x double> %215, %210
  %228 = fmul <2 x double> %211, %214
  %229 = fmul <2 x double> %211, %215
  %230 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %226
  %231 = fsub <2 x double> %230, %227
  %232 = fsub <2 x double> %231, %228
  %233 = fsub <2 x double> %232, %229
  %234 = fmul <2 x double> %220, %233
  %235 = fadd <2 x double> %222, %223
  %236 = fadd <2 x double> %224, %235
  %237 = fadd <2 x double> %225, %236
  %238 = fadd <2 x double> %237, %234
  %239 = fmul <2 x double> %220, %206
  %240 = fsub <2 x double> %199, %239
  %241 = fmul <2 x double> %207, %240
  %242 = fadd <2 x double> %241, %238
  %243 = bitcast <2 x double> %220 to <2 x i64>
  %244 = and <2 x i64> %243, <i64 -134217728, i64 -134217728>
  %245 = bitcast <2 x i64> %244 to <2 x double>
  %246 = fsub <2 x double> %220, %245
  %247 = fmul <2 x double> %220, %220
  %248 = fmul <2 x double> %245, %245
  %249 = bitcast <2 x double> %247 to <2 x i64>
  %250 = xor <2 x i64> %249, <i64 -9223372036854775808, i64 -9223372036854775808>
  %251 = bitcast <2 x i64> %250 to <2 x double>
  %252 = fadd <2 x double> %245, %245
  %253 = fmul <2 x double> %252, %246
  %254 = fmul <2 x double> %246, %246
  %255 = fadd <2 x double> %242, %242
  %256 = fmul <2 x double> %220, %255
  %257 = fadd <2 x double> %248, %251
  %258 = fadd <2 x double> %257, %253
  %259 = fadd <2 x double> %254, %258
  %260 = fadd <2 x double> %259, %256
  %261 = fmul <2 x double> %247, %247
  %262 = fmul <2 x double> %261, %261
  %263 = fmul <2 x double> %247, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %264 = fadd <2 x double> %263, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %265 = fmul <2 x double> %261, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %266 = fadd <2 x double> %265, %264
  %267 = fmul <2 x double> %247, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %268 = fadd <2 x double> %267, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %269 = fmul <2 x double> %247, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %270 = fadd <2 x double> %269, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %271 = fmul <2 x double> %261, %268
  %272 = fadd <2 x double> %270, %271
  %273 = fmul <2 x double> %262, %266
  %274 = fadd <2 x double> %273, %272
  %275 = fmul <2 x double> %247, %274
  %276 = fadd <2 x double> %275, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %277 = shufflevector <4 x i32> %175, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %278 = sitofp <2 x i32> %277 to <2 x double>
  %279 = bitcast <2 x double> %278 to <2 x i64>
  %280 = and <2 x i64> %279, <i64 -134217728, i64 -134217728>
  %281 = bitcast <2 x i64> %280 to <2 x double>
  %282 = fsub <2 x double> %278, %281
  %283 = fmul <2 x double> %278, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %284 = fmul <2 x double> %281, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %285 = bitcast <2 x double> %283 to <2 x i64>
  %286 = xor <2 x i64> %285, <i64 -9223372036854775808, i64 -9223372036854775808>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = fmul <2 x double> %281, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %289 = fmul <2 x double> %282, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %290 = fmul <2 x double> %282, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %291 = fmul <2 x double> %278, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %292 = fadd <2 x double> %284, %287
  %293 = fadd <2 x double> %288, %292
  %294 = fadd <2 x double> %289, %293
  %295 = fadd <2 x double> %290, %294
  %296 = fadd <2 x double> %291, %295
  %297 = fmul <2 x double> %220, <double 2.000000e+00, double 2.000000e+00>
  %298 = fmul <2 x double> %242, <double 2.000000e+00, double 2.000000e+00>
  %299 = fadd <2 x double> %283, %297
  %300 = fsub <2 x double> %283, %299
  %301 = fadd <2 x double> %297, %300
  %302 = fadd <2 x double> %296, %301
  %303 = fadd <2 x double> %302, %298
  %304 = and <2 x i64> %249, <i64 -134217728, i64 -134217728>
  %305 = bitcast <2 x i64> %304 to <2 x double>
  %306 = fsub <2 x double> %247, %305
  %307 = fmul <2 x double> %220, %247
  %308 = fmul <2 x double> %245, %305
  %309 = bitcast <2 x double> %307 to <2 x i64>
  %310 = xor <2 x i64> %309, <i64 -9223372036854775808, i64 -9223372036854775808>
  %311 = bitcast <2 x i64> %310 to <2 x double>
  %312 = fmul <2 x double> %306, %245
  %313 = fmul <2 x double> %246, %305
  %314 = fmul <2 x double> %246, %306
  %315 = fmul <2 x double> %247, %242
  %316 = fmul <2 x double> %220, %260
  %317 = fadd <2 x double> %308, %311
  %318 = fadd <2 x double> %312, %317
  %319 = fadd <2 x double> %313, %318
  %320 = fadd <2 x double> %314, %319
  %321 = fadd <2 x double> %320, %315
  %322 = fadd <2 x double> %321, %316
  %323 = and <2 x i64> %309, <i64 -134217728, i64 -134217728>
  %324 = bitcast <2 x i64> %323 to <2 x double>
  %325 = fsub <2 x double> %307, %324
  %326 = bitcast <2 x double> %276 to <2 x i64>
  %327 = and <2 x i64> %326, <i64 -134217728, i64 -134217728>
  %328 = bitcast <2 x i64> %327 to <2 x double>
  %329 = fsub <2 x double> %276, %328
  %330 = fmul <2 x double> %307, %276
  %331 = fmul <2 x double> %324, %328
  %332 = bitcast <2 x double> %330 to <2 x i64>
  %333 = xor <2 x i64> %332, <i64 -9223372036854775808, i64 -9223372036854775808>
  %334 = bitcast <2 x i64> %333 to <2 x double>
  %335 = fmul <2 x double> %325, %328
  %336 = fmul <2 x double> %329, %324
  %337 = fmul <2 x double> %325, %329
  %338 = fmul <2 x double> %276, %322
  %339 = fadd <2 x double> %331, %334
  %340 = fadd <2 x double> %335, %339
  %341 = fadd <2 x double> %336, %340
  %342 = fadd <2 x double> %337, %341
  %343 = fadd <2 x double> %338, %342
  %344 = fadd <2 x double> %299, %330
  %345 = fsub <2 x double> %299, %344
  %346 = fadd <2 x double> %330, %345
  %347 = fadd <2 x double> %346, %303
  %348 = fadd <2 x double> %347, %343
  %349 = fadd <2 x double> %344, %348
  %350 = fcmp ogt <2 x double> %4, <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>
  %351 = fcmp uno <2 x double> %349, zeroinitializer
  %352 = or <2 x i1> %351, %350
  %353 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %354 = or <2 x i64> %353, <i64 9218868437227405312, i64 9218868437227405312>
  %355 = bitcast <2 x double> %349 to <2 x i64>
  %356 = select <2 x i1> %352, <2 x i64> %354, <2 x i64> %355
  %357 = fcmp uno <2 x double> %0, zeroinitializer
  %358 = select <2 x i1> %357, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %356
  %359 = bitcast <2 x double> %0 to <4 x i32>
  %360 = icmp eq <4 x i32> %359, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %361 = sext <4 x i1> %360 to <4 x i32>
  %362 = shufflevector <4 x i32> %361, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %363 = and <4 x i32> %362, %361
  %364 = bitcast <4 x i32> %363 to <2 x i64>
  %365 = and <2 x i64> %364, <i64 -9223372036854775808, i64 -9223372036854775808>
  %366 = xor <2 x i64> %364, <i64 -1, i64 -1>
  %367 = and <2 x i64> %358, %366
  %368 = or <2 x i64> %367, %365
  %369 = bitcast <2 x i64> %368 to <2 x double>
  ret <2 x double> %369
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acoshd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fsub <2 x double> %2, %0
  %4 = fsub <2 x double> %2, %3
  %5 = fsub <2 x double> %0, %4
  %6 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %3
  %7 = fadd <2 x double> %6, %5
  %8 = fadd <2 x double> %2, %7
  %9 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -134217728, i64 -134217728>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fsub <2 x double> %9, %12
  %14 = fmul <2 x double> %9, %9
  %15 = fmul <2 x double> %12, %12
  %16 = bitcast <2 x double> %14 to <2 x i64>
  %17 = xor <2 x i64> %16, <i64 -9223372036854775808, i64 -9223372036854775808>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fmul <2 x double> %13, %12
  %20 = fmul <2 x double> %13, %13
  %21 = fadd <2 x double> %15, %18
  %22 = fadd <2 x double> %19, %21
  %23 = fadd <2 x double> %19, %22
  %24 = fadd <2 x double> %20, %23
  %25 = fadd <2 x double> %2, %14
  %26 = fsub <2 x double> %25, %2
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> %2, %27
  %29 = fsub <2 x double> %14, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %7, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %9
  %34 = bitcast <2 x double> %33 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -134217728, i64 -134217728>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = fsub <2 x double> %33, %36
  %38 = fmul <2 x double> %12, %36
  %39 = fmul <2 x double> %37, %12
  %40 = fmul <2 x double> %13, %36
  %41 = fmul <2 x double> %13, %37
  %42 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fmul <2 x double> %33, %45
  %47 = bitcast <2 x double> %25 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -134217728, i64 -134217728>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fsub <2 x double> %25, %49
  %51 = fmul <2 x double> %33, %25
  %52 = fmul <2 x double> %36, %49
  %53 = bitcast <2 x double> %51 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372036854775808, i64 -9223372036854775808>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fmul <2 x double> %50, %36
  %57 = fmul <2 x double> %37, %49
  %58 = fmul <2 x double> %37, %50
  %59 = fmul <2 x double> %25, %46
  %60 = fmul <2 x double> %33, %32
  %61 = fadd <2 x double> %52, %55
  %62 = fadd <2 x double> %56, %61
  %63 = fadd <2 x double> %57, %62
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %64, %59
  %66 = fadd <2 x double> %60, %65
  %67 = fmul <2 x double> %51, <double 5.000000e-01, double 5.000000e-01>
  %68 = fmul <2 x double> %66, <double 5.000000e-01, double 5.000000e-01>
  %69 = fadd <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %70 = fsub <2 x double> %69, %0
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %0, %71
  %73 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %69, %74
  %76 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %75) #6
  %77 = bitcast <2 x double> %76 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -134217728, i64 -134217728>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = fsub <2 x double> %76, %79
  %81 = fmul <2 x double> %76, %76
  %82 = fmul <2 x double> %79, %79
  %83 = bitcast <2 x double> %81 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fmul <2 x double> %80, %79
  %87 = fmul <2 x double> %80, %80
  %88 = fadd <2 x double> %82, %85
  %89 = fadd <2 x double> %86, %88
  %90 = fadd <2 x double> %86, %89
  %91 = fadd <2 x double> %87, %90
  %92 = fadd <2 x double> %69, %81
  %93 = fsub <2 x double> %92, %69
  %94 = fsub <2 x double> %92, %93
  %95 = fsub <2 x double> %69, %94
  %96 = fsub <2 x double> %81, %93
  %97 = fadd <2 x double> %96, %95
  %98 = fadd <2 x double> %74, %91
  %99 = fadd <2 x double> %97, %98
  %100 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %76
  %101 = bitcast <2 x double> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -134217728, i64 -134217728>
  %103 = bitcast <2 x i64> %102 to <2 x double>
  %104 = fsub <2 x double> %100, %103
  %105 = fmul <2 x double> %79, %103
  %106 = fmul <2 x double> %104, %79
  %107 = fmul <2 x double> %80, %103
  %108 = fmul <2 x double> %80, %104
  %109 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %105
  %110 = fsub <2 x double> %109, %106
  %111 = fsub <2 x double> %110, %107
  %112 = fsub <2 x double> %111, %108
  %113 = fmul <2 x double> %100, %112
  %114 = bitcast <2 x double> %92 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 -134217728, i64 -134217728>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = fsub <2 x double> %92, %116
  %118 = fmul <2 x double> %100, %92
  %119 = fmul <2 x double> %103, %116
  %120 = bitcast <2 x double> %118 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372036854775808, i64 -9223372036854775808>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %117, %103
  %124 = fmul <2 x double> %104, %116
  %125 = fmul <2 x double> %104, %117
  %126 = fmul <2 x double> %92, %113
  %127 = fmul <2 x double> %100, %99
  %128 = fadd <2 x double> %119, %122
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %124, %129
  %131 = fadd <2 x double> %125, %130
  %132 = fadd <2 x double> %131, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fmul <2 x double> %118, <double 5.000000e-01, double 5.000000e-01>
  %135 = fmul <2 x double> %133, <double 5.000000e-01, double 5.000000e-01>
  %136 = bitcast <2 x double> %67 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -134217728, i64 -134217728>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fsub <2 x double> %67, %138
  %140 = bitcast <2 x double> %134 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %134, %142
  %144 = fmul <2 x double> %67, %134
  %145 = fmul <2 x double> %138, %142
  %146 = bitcast <2 x double> %144 to <2 x i64>
  %147 = xor <2 x i64> %146, <i64 -9223372036854775808, i64 -9223372036854775808>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fmul <2 x double> %139, %142
  %150 = fmul <2 x double> %143, %138
  %151 = fmul <2 x double> %139, %143
  %152 = fmul <2 x double> %67, %135
  %153 = fmul <2 x double> %134, %68
  %154 = fadd <2 x double> %145, %148
  %155 = fadd <2 x double> %149, %154
  %156 = fadd <2 x double> %150, %155
  %157 = fadd <2 x double> %151, %156
  %158 = fadd <2 x double> %157, %152
  %159 = fadd <2 x double> %153, %158
  %160 = fadd <2 x double> %144, %0
  %161 = fsub <2 x double> %160, %144
  %162 = fsub <2 x double> %160, %161
  %163 = fsub <2 x double> %144, %162
  %164 = fsub <2 x double> %0, %161
  %165 = fadd <2 x double> %164, %163
  %166 = fadd <2 x double> %165, %159
  %167 = fmul <2 x double> %160, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %168 = fcmp olt <2 x double> %167, <double 0x2D30000000000000, double 0x2D30000000000000>
  %169 = sext <2 x i1> %168 to <2 x i64>
  %170 = fmul <2 x double> %167, <double 0x52B0000000000000, double 0x52B0000000000000>
  %171 = select <2 x i1> %168, <2 x double> %170, <2 x double> %167
  %172 = bitcast <2 x double> %171 to <4 x i32>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %174 = and <4 x i32> %173, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %175 = lshr exact <4 x i32> %174, <i32 20, i32 20, i32 20, i32 20>
  %176 = bitcast <2 x i64> %169 to <4 x i32>
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = and <2 x i64> %178, <i64 5682241733931, i64 0>
  %180 = xor <2 x i64> %178, <i64 4393751544831, i64 4393751544831>
  %181 = and <2 x i64> %180, <i64 4393751544831, i64 0>
  %182 = or <2 x i64> %181, %179
  %183 = bitcast <2 x i64> %182 to <4 x i32>
  %184 = sub <4 x i32> %175, %183
  %185 = sub <4 x i32> zeroinitializer, %184
  %186 = ashr <4 x i32> %185, <i32 1, i32 1, i32 1, i32 1>
  %187 = add <4 x i32> %186, <i32 1023, i32 1023, i32 undef, i32 0>
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %189 = and <4 x i32> %188, <i32 0, i32 -1, i32 0, i32 -1>
  %190 = shl <4 x i32> %189, <i32 20, i32 20, i32 20, i32 20>
  %191 = bitcast <4 x i32> %190 to <2 x double>
  %192 = fmul <2 x double> %160, %191
  %193 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %184
  %194 = sub <4 x i32> %193, %186
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %196 = and <4 x i32> %195, <i32 0, i32 -1, i32 0, i32 -1>
  %197 = shl <4 x i32> %196, <i32 20, i32 20, i32 20, i32 20>
  %198 = bitcast <4 x i32> %197 to <2 x double>
  %199 = fmul <2 x double> %192, %198
  %200 = fmul <2 x double> %166, %191
  %201 = fmul <2 x double> %200, %198
  %202 = fadd <2 x double> %199, <double -1.000000e+00, double -1.000000e+00>
  %203 = fsub <2 x double> %202, %199
  %204 = fsub <2 x double> %202, %203
  %205 = fsub <2 x double> %199, %204
  %206 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %203
  %207 = fadd <2 x double> %206, %205
  %208 = fadd <2 x double> %201, %207
  %209 = fadd <2 x double> %199, <double 1.000000e+00, double 1.000000e+00>
  %210 = fsub <2 x double> %209, %199
  %211 = fsub <2 x double> %209, %210
  %212 = fsub <2 x double> %199, %211
  %213 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %210
  %214 = fadd <2 x double> %213, %212
  %215 = fadd <2 x double> %201, %214
  %216 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %209
  %217 = bitcast <2 x double> %209 to <2 x i64>
  %218 = and <2 x i64> %217, <i64 -134217728, i64 -134217728>
  %219 = bitcast <2 x i64> %218 to <2 x double>
  %220 = fsub <2 x double> %209, %219
  %221 = bitcast <2 x double> %216 to <2 x i64>
  %222 = and <2 x i64> %221, <i64 -134217728, i64 -134217728>
  %223 = bitcast <2 x i64> %222 to <2 x double>
  %224 = fsub <2 x double> %216, %223
  %225 = bitcast <2 x double> %202 to <2 x i64>
  %226 = and <2 x i64> %225, <i64 -134217728, i64 -134217728>
  %227 = bitcast <2 x i64> %226 to <2 x double>
  %228 = fsub <2 x double> %202, %227
  %229 = fmul <2 x double> %202, %216
  %230 = fmul <2 x double> %227, %223
  %231 = fsub <2 x double> %230, %229
  %232 = fmul <2 x double> %224, %227
  %233 = fmul <2 x double> %228, %223
  %234 = fmul <2 x double> %228, %224
  %235 = fmul <2 x double> %219, %223
  %236 = fmul <2 x double> %224, %219
  %237 = fmul <2 x double> %220, %223
  %238 = fmul <2 x double> %220, %224
  %239 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %235
  %240 = fsub <2 x double> %239, %236
  %241 = fsub <2 x double> %240, %237
  %242 = fsub <2 x double> %241, %238
  %243 = fmul <2 x double> %229, %242
  %244 = fadd <2 x double> %231, %232
  %245 = fadd <2 x double> %233, %244
  %246 = fadd <2 x double> %234, %245
  %247 = fadd <2 x double> %246, %243
  %248 = fmul <2 x double> %229, %215
  %249 = fsub <2 x double> %208, %248
  %250 = fmul <2 x double> %216, %249
  %251 = fadd <2 x double> %250, %247
  %252 = bitcast <2 x double> %229 to <2 x i64>
  %253 = and <2 x i64> %252, <i64 -134217728, i64 -134217728>
  %254 = bitcast <2 x i64> %253 to <2 x double>
  %255 = fsub <2 x double> %229, %254
  %256 = fmul <2 x double> %229, %229
  %257 = fmul <2 x double> %254, %254
  %258 = bitcast <2 x double> %256 to <2 x i64>
  %259 = xor <2 x i64> %258, <i64 -9223372036854775808, i64 -9223372036854775808>
  %260 = bitcast <2 x i64> %259 to <2 x double>
  %261 = fadd <2 x double> %254, %254
  %262 = fmul <2 x double> %261, %255
  %263 = fmul <2 x double> %255, %255
  %264 = fadd <2 x double> %251, %251
  %265 = fmul <2 x double> %229, %264
  %266 = fadd <2 x double> %257, %260
  %267 = fadd <2 x double> %266, %262
  %268 = fadd <2 x double> %263, %267
  %269 = fadd <2 x double> %268, %265
  %270 = fmul <2 x double> %256, %256
  %271 = fmul <2 x double> %270, %270
  %272 = fmul <2 x double> %256, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %273 = fadd <2 x double> %272, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %274 = fmul <2 x double> %270, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %275 = fadd <2 x double> %274, %273
  %276 = fmul <2 x double> %256, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %277 = fadd <2 x double> %276, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %278 = fmul <2 x double> %256, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %279 = fadd <2 x double> %278, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %280 = fmul <2 x double> %270, %277
  %281 = fadd <2 x double> %279, %280
  %282 = fmul <2 x double> %271, %275
  %283 = fadd <2 x double> %282, %281
  %284 = fmul <2 x double> %256, %283
  %285 = fadd <2 x double> %284, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %286 = shufflevector <4 x i32> %184, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %287 = sitofp <2 x i32> %286 to <2 x double>
  %288 = bitcast <2 x double> %287 to <2 x i64>
  %289 = and <2 x i64> %288, <i64 -134217728, i64 -134217728>
  %290 = bitcast <2 x i64> %289 to <2 x double>
  %291 = fsub <2 x double> %287, %290
  %292 = fmul <2 x double> %287, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %293 = fmul <2 x double> %290, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %294 = bitcast <2 x double> %292 to <2 x i64>
  %295 = xor <2 x i64> %294, <i64 -9223372036854775808, i64 -9223372036854775808>
  %296 = bitcast <2 x i64> %295 to <2 x double>
  %297 = fmul <2 x double> %290, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %298 = fmul <2 x double> %291, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %299 = fmul <2 x double> %291, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %300 = fmul <2 x double> %287, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %301 = fadd <2 x double> %293, %296
  %302 = fadd <2 x double> %297, %301
  %303 = fadd <2 x double> %298, %302
  %304 = fadd <2 x double> %299, %303
  %305 = fadd <2 x double> %300, %304
  %306 = fmul <2 x double> %229, <double 2.000000e+00, double 2.000000e+00>
  %307 = fmul <2 x double> %251, <double 2.000000e+00, double 2.000000e+00>
  %308 = fadd <2 x double> %292, %306
  %309 = fsub <2 x double> %292, %308
  %310 = fadd <2 x double> %306, %309
  %311 = fadd <2 x double> %305, %310
  %312 = fadd <2 x double> %311, %307
  %313 = and <2 x i64> %258, <i64 -134217728, i64 -134217728>
  %314 = bitcast <2 x i64> %313 to <2 x double>
  %315 = fsub <2 x double> %256, %314
  %316 = fmul <2 x double> %229, %256
  %317 = fmul <2 x double> %254, %314
  %318 = bitcast <2 x double> %316 to <2 x i64>
  %319 = xor <2 x i64> %318, <i64 -9223372036854775808, i64 -9223372036854775808>
  %320 = bitcast <2 x i64> %319 to <2 x double>
  %321 = fmul <2 x double> %315, %254
  %322 = fmul <2 x double> %255, %314
  %323 = fmul <2 x double> %255, %315
  %324 = fmul <2 x double> %256, %251
  %325 = fmul <2 x double> %229, %269
  %326 = fadd <2 x double> %317, %320
  %327 = fadd <2 x double> %321, %326
  %328 = fadd <2 x double> %322, %327
  %329 = fadd <2 x double> %323, %328
  %330 = fadd <2 x double> %329, %324
  %331 = fadd <2 x double> %330, %325
  %332 = and <2 x i64> %318, <i64 -134217728, i64 -134217728>
  %333 = bitcast <2 x i64> %332 to <2 x double>
  %334 = fsub <2 x double> %316, %333
  %335 = bitcast <2 x double> %285 to <2 x i64>
  %336 = and <2 x i64> %335, <i64 -134217728, i64 -134217728>
  %337 = bitcast <2 x i64> %336 to <2 x double>
  %338 = fsub <2 x double> %285, %337
  %339 = fmul <2 x double> %316, %285
  %340 = fmul <2 x double> %333, %337
  %341 = bitcast <2 x double> %339 to <2 x i64>
  %342 = xor <2 x i64> %341, <i64 -9223372036854775808, i64 -9223372036854775808>
  %343 = bitcast <2 x i64> %342 to <2 x double>
  %344 = fmul <2 x double> %334, %337
  %345 = fmul <2 x double> %338, %333
  %346 = fmul <2 x double> %334, %338
  %347 = fmul <2 x double> %285, %331
  %348 = fadd <2 x double> %340, %343
  %349 = fadd <2 x double> %344, %348
  %350 = fadd <2 x double> %345, %349
  %351 = fadd <2 x double> %346, %350
  %352 = fadd <2 x double> %347, %351
  %353 = fadd <2 x double> %308, %339
  %354 = fsub <2 x double> %308, %353
  %355 = fadd <2 x double> %339, %354
  %356 = fadd <2 x double> %355, %312
  %357 = fadd <2 x double> %356, %352
  %358 = fadd <2 x double> %353, %357
  %359 = bitcast <2 x double> %0 to <2 x i64>
  %360 = and <2 x i64> %359, <i64 9223372036854775807, i64 9223372036854775807>
  %361 = bitcast <2 x i64> %360 to <2 x double>
  %362 = fcmp ogt <2 x double> %361, <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>
  %363 = fcmp uno <2 x double> %358, zeroinitializer
  %364 = or <2 x i1> %363, %362
  %365 = fcmp une <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %366 = fcmp olt <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %367 = fcmp uno <2 x double> %0, zeroinitializer
  %368 = or <2 x i1> %367, %366
  %369 = select <2 x i1> %364, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %358
  %370 = select <2 x i1> %365, <2 x double> %369, <2 x double> zeroinitializer
  %371 = select <2 x i1> %368, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %370
  ret <2 x double> %371
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atanhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <2 x double> %5, <double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <2 x double> %5, %6
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <2 x double> %4, %6
  %10 = fadd <2 x double> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %20 = bitcast <2 x double> %13 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -134217728, i64 -134217728>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = fsub <2 x double> %13, %22
  %24 = bitcast <2 x double> %19 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fsub <2 x double> %19, %26
  %28 = bitcast <2 x double> %5 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %5, %30
  %32 = fmul <2 x double> %5, %19
  %33 = fmul <2 x double> %30, %26
  %34 = fsub <2 x double> %33, %32
  %35 = fmul <2 x double> %27, %30
  %36 = fmul <2 x double> %31, %26
  %37 = fmul <2 x double> %31, %27
  %38 = fmul <2 x double> %22, %26
  %39 = fmul <2 x double> %27, %22
  %40 = fmul <2 x double> %23, %26
  %41 = fmul <2 x double> %23, %27
  %42 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fmul <2 x double> %32, %45
  %47 = fadd <2 x double> %34, %35
  %48 = fadd <2 x double> %36, %47
  %49 = fadd <2 x double> %37, %48
  %50 = fadd <2 x double> %49, %46
  %51 = fmul <2 x double> %32, %18
  %52 = fsub <2 x double> %10, %51
  %53 = fmul <2 x double> %19, %52
  %54 = fadd <2 x double> %53, %50
  %55 = fmul <2 x double> %32, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %56 = fcmp olt <2 x double> %55, <double 0x2D30000000000000, double 0x2D30000000000000>
  %57 = sext <2 x i1> %56 to <2 x i64>
  %58 = fmul <2 x double> %55, <double 0x52B0000000000000, double 0x52B0000000000000>
  %59 = select <2 x i1> %56, <2 x double> %58, <2 x double> %55
  %60 = bitcast <2 x double> %59 to <4 x i32>
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %62 = and <4 x i32> %61, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %63 = lshr exact <4 x i32> %62, <i32 20, i32 20, i32 20, i32 20>
  %64 = bitcast <2 x i64> %57 to <4 x i32>
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 5682241733931, i64 0>
  %68 = xor <2 x i64> %66, <i64 4393751544831, i64 4393751544831>
  %69 = and <2 x i64> %68, <i64 4393751544831, i64 0>
  %70 = or <2 x i64> %69, %67
  %71 = bitcast <2 x i64> %70 to <4 x i32>
  %72 = sub <4 x i32> %63, %71
  %73 = sub <4 x i32> zeroinitializer, %72
  %74 = ashr <4 x i32> %73, <i32 1, i32 1, i32 1, i32 1>
  %75 = add <4 x i32> %74, <i32 1023, i32 1023, i32 undef, i32 0>
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %77 = and <4 x i32> %76, <i32 0, i32 -1, i32 0, i32 -1>
  %78 = shl <4 x i32> %77, <i32 20, i32 20, i32 20, i32 20>
  %79 = bitcast <4 x i32> %78 to <2 x double>
  %80 = fmul <2 x double> %32, %79
  %81 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %72
  %82 = sub <4 x i32> %81, %74
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %84 = and <4 x i32> %83, <i32 0, i32 -1, i32 0, i32 -1>
  %85 = shl <4 x i32> %84, <i32 20, i32 20, i32 20, i32 20>
  %86 = bitcast <4 x i32> %85 to <2 x double>
  %87 = fmul <2 x double> %80, %86
  %88 = fmul <2 x double> %54, %79
  %89 = fmul <2 x double> %88, %86
  %90 = fadd <2 x double> %87, <double -1.000000e+00, double -1.000000e+00>
  %91 = fsub <2 x double> %90, %87
  %92 = fsub <2 x double> %90, %91
  %93 = fsub <2 x double> %87, %92
  %94 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %91
  %95 = fadd <2 x double> %94, %93
  %96 = fadd <2 x double> %89, %95
  %97 = fadd <2 x double> %87, <double 1.000000e+00, double 1.000000e+00>
  %98 = fsub <2 x double> %97, %87
  %99 = fsub <2 x double> %97, %98
  %100 = fsub <2 x double> %87, %99
  %101 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %98
  %102 = fadd <2 x double> %101, %100
  %103 = fadd <2 x double> %89, %102
  %104 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %97
  %105 = bitcast <2 x double> %97 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fsub <2 x double> %97, %107
  %109 = bitcast <2 x double> %104 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -134217728, i64 -134217728>
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fsub <2 x double> %104, %111
  %113 = bitcast <2 x double> %90 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -134217728, i64 -134217728>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fsub <2 x double> %90, %115
  %117 = fmul <2 x double> %90, %104
  %118 = fmul <2 x double> %115, %111
  %119 = fsub <2 x double> %118, %117
  %120 = fmul <2 x double> %112, %115
  %121 = fmul <2 x double> %116, %111
  %122 = fmul <2 x double> %116, %112
  %123 = fmul <2 x double> %107, %111
  %124 = fmul <2 x double> %112, %107
  %125 = fmul <2 x double> %108, %111
  %126 = fmul <2 x double> %108, %112
  %127 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %123
  %128 = fsub <2 x double> %127, %124
  %129 = fsub <2 x double> %128, %125
  %130 = fsub <2 x double> %129, %126
  %131 = fmul <2 x double> %117, %130
  %132 = fadd <2 x double> %119, %120
  %133 = fadd <2 x double> %121, %132
  %134 = fadd <2 x double> %122, %133
  %135 = fadd <2 x double> %134, %131
  %136 = fmul <2 x double> %117, %103
  %137 = fsub <2 x double> %96, %136
  %138 = fmul <2 x double> %104, %137
  %139 = fadd <2 x double> %138, %135
  %140 = bitcast <2 x double> %117 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %117, %142
  %144 = fmul <2 x double> %117, %117
  %145 = fmul <2 x double> %142, %142
  %146 = bitcast <2 x double> %144 to <2 x i64>
  %147 = xor <2 x i64> %146, <i64 -9223372036854775808, i64 -9223372036854775808>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fadd <2 x double> %142, %142
  %150 = fmul <2 x double> %149, %143
  %151 = fmul <2 x double> %143, %143
  %152 = fadd <2 x double> %139, %139
  %153 = fmul <2 x double> %117, %152
  %154 = fadd <2 x double> %145, %148
  %155 = fadd <2 x double> %154, %150
  %156 = fadd <2 x double> %151, %155
  %157 = fadd <2 x double> %156, %153
  %158 = fmul <2 x double> %144, %144
  %159 = fmul <2 x double> %158, %158
  %160 = fmul <2 x double> %144, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %161 = fadd <2 x double> %160, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %162 = fmul <2 x double> %158, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %163 = fadd <2 x double> %162, %161
  %164 = fmul <2 x double> %144, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %165 = fadd <2 x double> %164, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %166 = fmul <2 x double> %144, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %167 = fadd <2 x double> %166, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %168 = fmul <2 x double> %158, %165
  %169 = fadd <2 x double> %167, %168
  %170 = fmul <2 x double> %159, %163
  %171 = fadd <2 x double> %170, %169
  %172 = fmul <2 x double> %144, %171
  %173 = fadd <2 x double> %172, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %174 = shufflevector <4 x i32> %72, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %175 = sitofp <2 x i32> %174 to <2 x double>
  %176 = bitcast <2 x double> %175 to <2 x i64>
  %177 = and <2 x i64> %176, <i64 -134217728, i64 -134217728>
  %178 = bitcast <2 x i64> %177 to <2 x double>
  %179 = fsub <2 x double> %175, %178
  %180 = fmul <2 x double> %175, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %181 = fmul <2 x double> %178, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %182 = bitcast <2 x double> %180 to <2 x i64>
  %183 = xor <2 x i64> %182, <i64 -9223372036854775808, i64 -9223372036854775808>
  %184 = bitcast <2 x i64> %183 to <2 x double>
  %185 = fmul <2 x double> %178, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %186 = fmul <2 x double> %179, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %187 = fmul <2 x double> %179, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %188 = fmul <2 x double> %175, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %189 = fadd <2 x double> %181, %184
  %190 = fadd <2 x double> %185, %189
  %191 = fadd <2 x double> %186, %190
  %192 = fadd <2 x double> %187, %191
  %193 = fadd <2 x double> %188, %192
  %194 = fmul <2 x double> %117, <double 2.000000e+00, double 2.000000e+00>
  %195 = fmul <2 x double> %139, <double 2.000000e+00, double 2.000000e+00>
  %196 = fadd <2 x double> %180, %194
  %197 = fsub <2 x double> %180, %196
  %198 = fadd <2 x double> %194, %197
  %199 = fadd <2 x double> %193, %198
  %200 = fadd <2 x double> %199, %195
  %201 = and <2 x i64> %146, <i64 -134217728, i64 -134217728>
  %202 = bitcast <2 x i64> %201 to <2 x double>
  %203 = fsub <2 x double> %144, %202
  %204 = fmul <2 x double> %117, %144
  %205 = fmul <2 x double> %142, %202
  %206 = bitcast <2 x double> %204 to <2 x i64>
  %207 = xor <2 x i64> %206, <i64 -9223372036854775808, i64 -9223372036854775808>
  %208 = bitcast <2 x i64> %207 to <2 x double>
  %209 = fmul <2 x double> %203, %142
  %210 = fmul <2 x double> %143, %202
  %211 = fmul <2 x double> %143, %203
  %212 = fmul <2 x double> %144, %139
  %213 = fmul <2 x double> %117, %157
  %214 = fadd <2 x double> %205, %208
  %215 = fadd <2 x double> %209, %214
  %216 = fadd <2 x double> %210, %215
  %217 = fadd <2 x double> %211, %216
  %218 = fadd <2 x double> %217, %212
  %219 = fadd <2 x double> %218, %213
  %220 = and <2 x i64> %206, <i64 -134217728, i64 -134217728>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = fsub <2 x double> %204, %221
  %223 = bitcast <2 x double> %173 to <2 x i64>
  %224 = and <2 x i64> %223, <i64 -134217728, i64 -134217728>
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = fsub <2 x double> %173, %225
  %227 = fmul <2 x double> %204, %173
  %228 = fmul <2 x double> %221, %225
  %229 = bitcast <2 x double> %227 to <2 x i64>
  %230 = xor <2 x i64> %229, <i64 -9223372036854775808, i64 -9223372036854775808>
  %231 = bitcast <2 x i64> %230 to <2 x double>
  %232 = fmul <2 x double> %222, %225
  %233 = fmul <2 x double> %226, %221
  %234 = fmul <2 x double> %222, %226
  %235 = fmul <2 x double> %173, %219
  %236 = fadd <2 x double> %228, %231
  %237 = fadd <2 x double> %232, %236
  %238 = fadd <2 x double> %233, %237
  %239 = fadd <2 x double> %234, %238
  %240 = fadd <2 x double> %235, %239
  %241 = fadd <2 x double> %196, %227
  %242 = fsub <2 x double> %196, %241
  %243 = fadd <2 x double> %227, %242
  %244 = fadd <2 x double> %243, %200
  %245 = fadd <2 x double> %244, %240
  %246 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %247 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %248 = fadd <2 x double> %241, %245
  %249 = fmul <2 x double> %248, <double 5.000000e-01, double 5.000000e-01>
  %250 = bitcast <2 x double> %249 to <2 x i64>
  %251 = select <2 x i1> %247, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %250
  %252 = select <2 x i1> %246, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %251
  %253 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %254 = xor <2 x i64> %252, %253
  %255 = bitcast <2 x i64> %254 to <2 x double>
  %256 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %257 = fcmp uno <2 x double> %255, zeroinitializer
  %258 = fcmp uno <2 x double> %0, zeroinitializer
  %259 = or <2 x i1> %256, %258
  %260 = or <2 x i1> %259, %257
  %261 = select <2 x i1> %260, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %255
  ret <2 x double> %261
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = select <2 x i1> %5, <2 x double> %7, <2 x double> %4
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = and <4 x i32> %10, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %12 = lshr exact <4 x i32> %11, <i32 20, i32 20, i32 20, i32 20>
  %13 = bitcast <2 x i64> %6 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 5682241733931, i64 0>
  %17 = xor <2 x i64> %15, <i64 4393751544831, i64 4393751544831>
  %18 = and <2 x i64> %17, <i64 4393751544831, i64 0>
  %19 = or <2 x i64> %18, %16
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = sub <4 x i32> %12, %20
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 undef, i32 undef>
  %23 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %21
  %24 = ashr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = add <4 x i32> %24, <i32 1023, i32 1023, i32 undef, i32 0>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %27 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = bitcast <4 x i32> %28 to <2 x double>
  %30 = fmul <2 x double> %29, %0
  %31 = add <4 x i32> %23, <i32 1023, i32 1023, i32 undef, i32 0>
  %32 = sub <4 x i32> %31, %24
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  %38 = shufflevector <4 x i32> %22, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fadd <2 x double> %39, <double 6.144000e+03, double 6.144000e+03>
  %41 = fmul <2 x double> %40, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #6
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %44 = sitofp <2 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %44, <double 3.000000e+00, double 3.000000e+00>
  %46 = fsub <2 x double> %40, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %46) #6
  %48 = icmp eq <4 x i32> %47, <i32 1, i32 1, i32 0, i32 0>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 4608352999143469707, i64 4608352999143469707>
  %53 = and <2 x i64> %51, <i64 4607182418800017408, i64 4607182418800017408>
  %54 = xor <2 x i64> %53, <i64 4607182418800017408, i64 4607182418800017408>
  %55 = or <2 x i64> %54, %52
  %56 = icmp eq <4 x i32> %47, <i32 2, i32 2, i32 0, i32 0>
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 4609827837958778429, i64 4609827837958778429>
  %61 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %62 = and <2 x i64> %55, %61
  %63 = or <2 x i64> %62, %60
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = add <4 x i32> %42, <i32 -2048, i32 -2048, i32 0, i32 0>
  %66 = ashr <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  %67 = add <4 x i32> %66, <i32 1023, i32 1023, i32 undef, i32 0>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %69 = and <4 x i32> %68, <i32 0, i32 -1, i32 0, i32 -1>
  %70 = shl <4 x i32> %69, <i32 20, i32 20, i32 20, i32 20>
  %71 = bitcast <4 x i32> %70 to <2 x double>
  %72 = fmul <2 x double> %71, %64
  %73 = add <4 x i32> %42, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %74 = sub <4 x i32> %73, %66
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %76 = and <4 x i32> %75, <i32 0, i32 -1, i32 0, i32 -1>
  %77 = shl <4 x i32> %76, <i32 20, i32 20, i32 20, i32 20>
  %78 = bitcast <4 x i32> %77 to <2 x double>
  %79 = fmul <2 x double> %72, %78
  %80 = bitcast <2 x double> %79 to <2 x i64>
  %81 = bitcast <2 x double> %37 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = xor <2 x i64> %82, %80
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = and <2 x i64> %81, <i64 9223372036854775807, i64 9223372036854775807>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %86, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %88 = fadd <2 x double> %87, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %89 = fmul <2 x double> %88, %86
  %90 = fadd <2 x double> %89, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %91 = fmul <2 x double> %90, %86
  %92 = fadd <2 x double> %91, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %93 = fmul <2 x double> %92, %86
  %94 = fadd <2 x double> %93, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %95 = fmul <2 x double> %94, %86
  %96 = fadd <2 x double> %95, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %97 = fmul <2 x double> %96, %96
  %98 = fmul <2 x double> %97, %97
  %99 = fmul <2 x double> %98, %86
  %100 = fsub <2 x double> %99, %96
  %101 = fmul <2 x double> %100, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %102 = fsub <2 x double> %96, %101
  %103 = fmul <2 x double> %102, %86
  %104 = fmul <2 x double> %102, %103
  %105 = fmul <2 x double> %104, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %106 = fmul <2 x double> %102, %104
  %107 = fadd <2 x double> %106, <double -1.000000e+00, double -1.000000e+00>
  %108 = fmul <2 x double> %105, %107
  %109 = fsub <2 x double> %104, %108
  %110 = fmul <2 x double> %109, %84
  ret <2 x double> %110
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = select <2 x i1> %5, <2 x double> %7, <2 x double> %4
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = and <4 x i32> %10, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %12 = lshr exact <4 x i32> %11, <i32 20, i32 20, i32 20, i32 20>
  %13 = bitcast <2 x i64> %6 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 5682241733931, i64 0>
  %17 = xor <2 x i64> %15, <i64 4393751544831, i64 4393751544831>
  %18 = and <2 x i64> %17, <i64 4393751544831, i64 0>
  %19 = or <2 x i64> %18, %16
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = sub <4 x i32> %12, %20
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 undef, i32 undef>
  %23 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %21
  %24 = ashr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = add <4 x i32> %24, <i32 1023, i32 1023, i32 undef, i32 0>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %27 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = bitcast <4 x i32> %28 to <2 x double>
  %30 = fmul <2 x double> %29, %0
  %31 = add <4 x i32> %23, <i32 1023, i32 1023, i32 undef, i32 0>
  %32 = sub <4 x i32> %31, %24
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  %38 = shufflevector <4 x i32> %22, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fadd <2 x double> %39, <double 6.144000e+03, double 6.144000e+03>
  %41 = fmul <2 x double> %40, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #6
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %44 = sitofp <2 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %44, <double 3.000000e+00, double 3.000000e+00>
  %46 = fsub <2 x double> %40, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %46) #6
  %48 = icmp eq <4 x i32> %47, <i32 1, i32 1, i32 0, i32 0>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 4608352999143469707, i64 4608352999143469707>
  %53 = and <2 x i64> %51, <i64 4607182418800017408, i64 4607182418800017408>
  %54 = xor <2 x i64> %53, <i64 4607182418800017408, i64 4607182418800017408>
  %55 = or <2 x i64> %54, %52
  %56 = and <2 x i64> %51, <i64 -4864489982484634594, i64 -4864489982484634594>
  %57 = icmp eq <4 x i32> %47, <i32 2, i32 2, i32 0, i32 0>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 4609827837958778429, i64 4609827837958778429>
  %62 = xor <2 x i64> %60, <i64 -1, i64 -1>
  %63 = and <2 x i64> %55, %62
  %64 = and <2 x i64> %60, <i64 -4855069610512929015, i64 -4855069610512929015>
  %65 = and <2 x i64> %56, %62
  %66 = or <2 x i64> %65, %64
  %67 = bitcast <2 x double> %37 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -9223372036854775808, i64 -9223372036854775808>
  %69 = or <2 x i64> %61, %68
  %70 = or <2 x i64> %69, %63
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = xor <2 x i64> %66, %68
  %73 = bitcast <2 x i64> %72 to <2 x double>
  %74 = and <2 x i64> %67, <i64 9223372036854775807, i64 9223372036854775807>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fmul <2 x double> %75, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %77 = fadd <2 x double> %76, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %78 = fmul <2 x double> %77, %75
  %79 = fadd <2 x double> %78, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %80 = fmul <2 x double> %79, %75
  %81 = fadd <2 x double> %80, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %82 = fmul <2 x double> %81, %75
  %83 = fadd <2 x double> %82, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %84 = fmul <2 x double> %83, %75
  %85 = fadd <2 x double> %84, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %86 = fmul <2 x double> %85, %85
  %87 = fmul <2 x double> %86, %86
  %88 = fmul <2 x double> %87, %75
  %89 = fsub <2 x double> %88, %85
  %90 = fmul <2 x double> %89, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %91 = fsub <2 x double> %85, %90
  %92 = bitcast <2 x double> %91 to <2 x i64>
  %93 = and <2 x i64> %92, <i64 -134217728, i64 -134217728>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fsub <2 x double> %91, %94
  %96 = fmul <2 x double> %91, %91
  %97 = fmul <2 x double> %94, %94
  %98 = bitcast <2 x double> %96 to <2 x i64>
  %99 = xor <2 x i64> %98, <i64 -9223372036854775808, i64 -9223372036854775808>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = fmul <2 x double> %95, %94
  %102 = fmul <2 x double> %95, %95
  %103 = fadd <2 x double> %97, %100
  %104 = fadd <2 x double> %101, %103
  %105 = fadd <2 x double> %101, %104
  %106 = fadd <2 x double> %102, %105
  %107 = and <2 x i64> %98, <i64 -134217728, i64 -134217728>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fsub <2 x double> %96, %108
  %110 = fmul <2 x double> %96, %96
  %111 = fmul <2 x double> %108, %108
  %112 = bitcast <2 x double> %110 to <2 x i64>
  %113 = xor <2 x i64> %112, <i64 -9223372036854775808, i64 -9223372036854775808>
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = fmul <2 x double> %109, %108
  %116 = fmul <2 x double> %109, %109
  %117 = fmul <2 x double> %96, %106
  %118 = fadd <2 x double> %111, %114
  %119 = fadd <2 x double> %115, %118
  %120 = fadd <2 x double> %115, %119
  %121 = fadd <2 x double> %116, %120
  %122 = fadd <2 x double> %117, %121
  %123 = fadd <2 x double> %117, %122
  %124 = and <2 x i64> %112, <i64 -134217728, i64 -134217728>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fsub <2 x double> %110, %125
  %127 = and <2 x i64> %67, <i64 9223372036720558080, i64 9223372036720558080>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fsub <2 x double> %75, %128
  %130 = fmul <2 x double> %110, %75
  %131 = fmul <2 x double> %128, %125
  %132 = bitcast <2 x double> %130 to <2 x i64>
  %133 = xor <2 x i64> %132, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fmul <2 x double> %126, %128
  %136 = fmul <2 x double> %129, %125
  %137 = fmul <2 x double> %129, %126
  %138 = fmul <2 x double> %123, %75
  %139 = fadd <2 x double> %131, %134
  %140 = fadd <2 x double> %135, %139
  %141 = fadd <2 x double> %136, %140
  %142 = fadd <2 x double> %137, %141
  %143 = fadd <2 x double> %142, %138
  %144 = xor <2 x i64> %92, <i64 -9223372036854775808, i64 -9223372036854775808>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = fadd <2 x double> %130, %145
  %147 = fsub <2 x double> %146, %130
  %148 = fsub <2 x double> %146, %147
  %149 = fsub <2 x double> %130, %148
  %150 = fsub <2 x double> %145, %147
  %151 = fadd <2 x double> %150, %149
  %152 = fadd <2 x double> %151, %143
  %153 = fadd <2 x double> %146, %152
  %154 = fmul <2 x double> %153, <double 0xBFE5555555555555, double 0xBFE5555555555555>
  %155 = fmul <2 x double> %91, %154
  %156 = fadd <2 x double> %96, %155
  %157 = fsub <2 x double> %156, %96
  %158 = fsub <2 x double> %156, %157
  %159 = fsub <2 x double> %96, %158
  %160 = fsub <2 x double> %155, %157
  %161 = fadd <2 x double> %160, %159
  %162 = fadd <2 x double> %106, %161
  %163 = bitcast <2 x double> %156 to <2 x i64>
  %164 = and <2 x i64> %163, <i64 -134217728, i64 -134217728>
  %165 = bitcast <2 x i64> %164 to <2 x double>
  %166 = fsub <2 x double> %156, %165
  %167 = fmul <2 x double> %156, %75
  %168 = fmul <2 x double> %128, %165
  %169 = bitcast <2 x double> %167 to <2 x i64>
  %170 = xor <2 x i64> %169, <i64 -9223372036854775808, i64 -9223372036854775808>
  %171 = bitcast <2 x i64> %170 to <2 x double>
  %172 = fmul <2 x double> %166, %128
  %173 = fmul <2 x double> %129, %165
  %174 = fmul <2 x double> %129, %166
  %175 = fmul <2 x double> %162, %75
  %176 = fadd <2 x double> %168, %171
  %177 = fadd <2 x double> %172, %176
  %178 = fadd <2 x double> %173, %177
  %179 = fadd <2 x double> %174, %178
  %180 = fadd <2 x double> %175, %179
  %181 = and <2 x i64> %169, <i64 -134217728, i64 -134217728>
  %182 = bitcast <2 x i64> %181 to <2 x double>
  %183 = fsub <2 x double> %167, %182
  %184 = and <2 x i64> %70, <i64 -4612409501507649536, i64 -4612409501507649536>
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fsub <2 x double> %71, %185
  %187 = fmul <2 x double> %167, %71
  %188 = fmul <2 x double> %182, %185
  %189 = bitcast <2 x double> %187 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -9223372036854775808, i64 -9223372036854775808>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fmul <2 x double> %183, %185
  %193 = fmul <2 x double> %186, %182
  %194 = fmul <2 x double> %183, %186
  %195 = fmul <2 x double> %167, %73
  %196 = fmul <2 x double> %180, %71
  %197 = fadd <2 x double> %188, %191
  %198 = fadd <2 x double> %192, %197
  %199 = fadd <2 x double> %193, %198
  %200 = fadd <2 x double> %194, %199
  %201 = fadd <2 x double> %195, %200
  %202 = fadd <2 x double> %196, %201
  %203 = fadd <2 x double> %187, %202
  %204 = add <4 x i32> %42, <i32 -2048, i32 -2048, i32 0, i32 0>
  %205 = ashr <4 x i32> %204, <i32 1, i32 1, i32 1, i32 1>
  %206 = add <4 x i32> %205, <i32 1023, i32 1023, i32 undef, i32 0>
  %207 = shufflevector <4 x i32> %206, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %208 = and <4 x i32> %207, <i32 0, i32 -1, i32 0, i32 -1>
  %209 = shl <4 x i32> %208, <i32 20, i32 20, i32 20, i32 20>
  %210 = bitcast <4 x i32> %209 to <2 x double>
  %211 = fmul <2 x double> %203, %210
  %212 = add <4 x i32> %42, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %213 = sub <4 x i32> %212, %205
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %215 = and <4 x i32> %214, <i32 0, i32 -1, i32 0, i32 -1>
  %216 = shl <4 x i32> %215, <i32 20, i32 20, i32 20, i32 20>
  %217 = bitcast <4 x i32> %216 to <2 x double>
  %218 = fmul <2 x double> %211, %217
  %219 = fcmp oeq <2 x double> %75, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %220 = or <2 x i64> %68, <i64 9218868437227405312, i64 9218868437227405312>
  %221 = bitcast <2 x double> %218 to <2 x i64>
  %222 = select <2 x i1> %219, <2 x i64> %220, <2 x i64> %221
  %223 = fcmp oeq <2 x double> %75, zeroinitializer
  %224 = select <2 x i1> %223, <2 x i64> %68, <2 x i64> %222
  %225 = bitcast <2 x i64> %224 to <2 x double>
  ret <2 x double> %225
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %0) #6
  %3 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %4 = sitofp <2 x i32> %3 to <2 x double>
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %4) #6
  %6 = fsub <2 x double> %0, %4
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %7, %7
  %9 = fmul <2 x double> %8, %8
  %10 = fmul <2 x double> %6, <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>
  %11 = fadd <2 x double> %10, <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>
  %12 = fmul <2 x double> %6, <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>
  %13 = fadd <2 x double> %12, <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>
  %14 = fmul <2 x double> %6, <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>
  %15 = fadd <2 x double> %14, <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>
  %16 = fmul <2 x double> %7, %13
  %17 = fadd <2 x double> %15, %16
  %18 = fmul <2 x double> %6, <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>
  %19 = fadd <2 x double> %18, <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>
  %20 = fmul <2 x double> %6, <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>
  %21 = fadd <2 x double> %20, <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>
  %22 = fmul <2 x double> %7, %19
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %8, %17
  %25 = fadd <2 x double> %23, %24
  %26 = fmul <2 x double> %11, %9
  %27 = fadd <2 x double> %26, %25
  %28 = fmul <2 x double> %6, %27
  %29 = fadd <2 x double> %28, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 -134217728, i64 -134217728>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = fsub <2 x double> %29, %32
  %34 = bitcast <2 x double> %6 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -134217728, i64 -134217728>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = fsub <2 x double> %6, %36
  %38 = fmul <2 x double> %6, %29
  %39 = fmul <2 x double> %36, %32
  %40 = bitcast <2 x double> %38 to <2 x i64>
  %41 = xor <2 x i64> %40, <i64 -9223372036854775808, i64 -9223372036854775808>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fmul <2 x double> %33, %36
  %44 = fmul <2 x double> %37, %32
  %45 = fmul <2 x double> %37, %33
  %46 = fadd <2 x double> %39, %42
  %47 = fadd <2 x double> %43, %46
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %45, %48
  %50 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %51 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %50
  %52 = fadd <2 x double> %38, %51
  %53 = fadd <2 x double> %52, %49
  %54 = fadd <2 x double> %50, %53
  %55 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %56 = add <4 x i32> %55, <i32 1023, i32 1023, i32 undef, i32 0>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %58 = and <4 x i32> %57, <i32 0, i32 -1, i32 0, i32 -1>
  %59 = shl <4 x i32> %58, <i32 20, i32 20, i32 20, i32 20>
  %60 = bitcast <4 x i32> %59 to <2 x double>
  %61 = fmul <2 x double> %54, %60
  %62 = add <4 x i32> %5, <i32 1023, i32 1023, i32 undef, i32 0>
  %63 = sub <4 x i32> %62, %55
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %65 = and <4 x i32> %64, <i32 0, i32 -1, i32 0, i32 -1>
  %66 = shl <4 x i32> %65, <i32 20, i32 20, i32 20, i32 20>
  %67 = bitcast <4 x i32> %66 to <2 x double>
  %68 = fmul <2 x double> %61, %67
  %69 = fcmp oge <2 x double> %0, <double 1.024000e+03, double 1.024000e+03>
  %70 = fcmp uge <2 x double> %0, <double -2.000000e+03, double -2.000000e+03>
  %71 = select <2 x i1> %69, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %68
  %72 = select <2 x i1> %70, <2 x double> %71, <2 x double> zeroinitializer
  ret <2 x double> %72
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %0) #6
  %3 = shufflevector <4 x i32> %2, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %4 = sitofp <2 x i32> %3 to <2 x double>
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %4) #6
  %6 = fsub <2 x double> %0, %4
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %7, %7
  %9 = fmul <2 x double> %8, %8
  %10 = fmul <2 x double> %6, <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>
  %11 = fadd <2 x double> %10, <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>
  %12 = fmul <2 x double> %6, <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>
  %13 = fadd <2 x double> %12, <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>
  %14 = fmul <2 x double> %6, <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>
  %15 = fadd <2 x double> %14, <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>
  %16 = fmul <2 x double> %7, %13
  %17 = fadd <2 x double> %15, %16
  %18 = fmul <2 x double> %6, <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>
  %19 = fadd <2 x double> %18, <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>
  %20 = fmul <2 x double> %6, <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>
  %21 = fadd <2 x double> %20, <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>
  %22 = fmul <2 x double> %7, %19
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %8, %17
  %25 = fadd <2 x double> %23, %24
  %26 = fmul <2 x double> %11, %9
  %27 = fadd <2 x double> %26, %25
  %28 = fmul <2 x double> %6, %27
  %29 = fadd <2 x double> %28, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %30 = fmul <2 x double> %6, %29
  %31 = fadd <2 x double> %30, <double 1.000000e+00, double 1.000000e+00>
  %32 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %33 = add <4 x i32> %32, <i32 1023, i32 1023, i32 undef, i32 0>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %35 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %31, %37
  %39 = add <4 x i32> %5, <i32 1023, i32 1023, i32 undef, i32 0>
  %40 = sub <4 x i32> %39, %32
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %42 = and <4 x i32> %41, <i32 0, i32 -1, i32 0, i32 -1>
  %43 = shl <4 x i32> %42, <i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <4 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %38, %44
  %46 = fcmp oge <2 x double> %0, <double 1.024000e+03, double 1.024000e+03>
  %47 = fcmp uge <2 x double> %0, <double -2.000000e+03, double -2.000000e+03>
  %48 = select <2 x i1> %46, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %45
  %49 = select <2 x i1> %47, <2 x double> %48, <2 x double> zeroinitializer
  ret <2 x double> %49
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = fmul <2 x double> %5, <double 0xBFD34413509F7000, double 0xBFD34413509F7000>
  %8 = fadd <2 x double> %7, %0
  %9 = fmul <2 x double> %5, <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>
  %10 = fadd <2 x double> %9, %8
  %11 = fmul <2 x double> %10, <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>
  %12 = fadd <2 x double> %11, <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>
  %13 = fmul <2 x double> %10, %12
  %14 = fadd <2 x double> %13, <double 0x3F748988CFF14706, double 0x3F748988CFF14706>
  %15 = fmul <2 x double> %10, %14
  %16 = fadd <2 x double> %15, <double 0x3F9411663B046154, double 0x3F9411663B046154>
  %17 = fmul <2 x double> %10, %16
  %18 = fadd <2 x double> %17, <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>
  %19 = fmul <2 x double> %10, %18
  %20 = fadd <2 x double> %19, <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>
  %21 = fmul <2 x double> %10, %20
  %22 = fadd <2 x double> %21, <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>
  %23 = fmul <2 x double> %10, %22
  %24 = fadd <2 x double> %23, <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>
  %25 = fmul <2 x double> %10, %24
  %26 = fadd <2 x double> %25, <double 0x4000470591DE2C43, double 0x4000470591DE2C43>
  %27 = fmul <2 x double> %10, %26
  %28 = fadd <2 x double> %27, <double 0x40053524C73CEA78, double 0x40053524C73CEA78>
  %29 = fmul <2 x double> %10, %28
  %30 = fadd <2 x double> %29, <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fsub <2 x double> %30, %33
  %35 = bitcast <2 x double> %10 to <2 x i64>
  %36 = and <2 x i64> %35, <i64 -134217728, i64 -134217728>
  %37 = bitcast <2 x i64> %36 to <2 x double>
  %38 = fsub <2 x double> %10, %37
  %39 = fmul <2 x double> %10, %30
  %40 = fmul <2 x double> %37, %33
  %41 = bitcast <2 x double> %39 to <2 x i64>
  %42 = xor <2 x i64> %41, <i64 -9223372036854775808, i64 -9223372036854775808>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fmul <2 x double> %34, %37
  %45 = fmul <2 x double> %38, %33
  %46 = fmul <2 x double> %38, %34
  %47 = fadd <2 x double> %40, %43
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %45, %48
  %50 = fadd <2 x double> %46, %49
  %51 = fadd <2 x double> %39, <double 1.000000e+00, double 1.000000e+00>
  %52 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %51
  %53 = fadd <2 x double> %39, %52
  %54 = fadd <2 x double> %53, %50
  %55 = fadd <2 x double> %51, %54
  %56 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %57 = add <4 x i32> %56, <i32 1023, i32 1023, i32 undef, i32 0>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %59 = and <4 x i32> %58, <i32 0, i32 -1, i32 0, i32 -1>
  %60 = shl <4 x i32> %59, <i32 20, i32 20, i32 20, i32 20>
  %61 = bitcast <4 x i32> %60 to <2 x double>
  %62 = fmul <2 x double> %55, %61
  %63 = add <4 x i32> %6, <i32 1023, i32 1023, i32 undef, i32 0>
  %64 = sub <4 x i32> %63, %56
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %66 = and <4 x i32> %65, <i32 0, i32 -1, i32 0, i32 -1>
  %67 = shl <4 x i32> %66, <i32 20, i32 20, i32 20, i32 20>
  %68 = bitcast <4 x i32> %67 to <2 x double>
  %69 = fmul <2 x double> %62, %68
  %70 = fcmp ogt <2 x double> %0, <double 0x40734413509F79FE, double 0x40734413509F79FE>
  %71 = fcmp uge <2 x double> %0, <double -3.500000e+02, double -3.500000e+02>
  %72 = select <2 x i1> %70, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %69
  %73 = select <2 x i1> %71, <2 x double> %72, <2 x double> zeroinitializer
  ret <2 x double> %73
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = fmul <2 x double> %5, <double 0xBFD34413509F7000, double 0xBFD34413509F7000>
  %8 = fadd <2 x double> %7, %0
  %9 = fmul <2 x double> %5, <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>
  %10 = fadd <2 x double> %9, %8
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %10, <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>
  %15 = fadd <2 x double> %14, <double 0x3F748988CFF14706, double 0x3F748988CFF14706>
  %16 = fmul <2 x double> %11, <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>
  %17 = fadd <2 x double> %16, %15
  %18 = fmul <2 x double> %10, <double 0x3F9411663B046154, double 0x3F9411663B046154>
  %19 = fadd <2 x double> %18, <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>
  %20 = fmul <2 x double> %10, <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>
  %21 = fadd <2 x double> %20, <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>
  %22 = fmul <2 x double> %11, %19
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %10, <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>
  %25 = fadd <2 x double> %24, <double 0x4000470591DE2C43, double 0x4000470591DE2C43>
  %26 = fmul <2 x double> %10, <double 0x40053524C73CEA78, double 0x40053524C73CEA78>
  %27 = fadd <2 x double> %26, <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>
  %28 = fmul <2 x double> %11, %25
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %12, %23
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %13, %17
  %33 = fadd <2 x double> %32, %31
  %34 = fmul <2 x double> %10, %33
  %35 = fadd <2 x double> %34, <double 1.000000e+00, double 1.000000e+00>
  %36 = ashr <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %37 = add <4 x i32> %36, <i32 1023, i32 1023, i32 undef, i32 0>
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %39 = and <4 x i32> %38, <i32 0, i32 -1, i32 0, i32 -1>
  %40 = shl <4 x i32> %39, <i32 20, i32 20, i32 20, i32 20>
  %41 = bitcast <4 x i32> %40 to <2 x double>
  %42 = fmul <2 x double> %35, %41
  %43 = add <4 x i32> %6, <i32 1023, i32 1023, i32 undef, i32 0>
  %44 = sub <4 x i32> %43, %36
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %42, %48
  %50 = fcmp ogt <2 x double> %0, <double 0x40734413509F79FE, double 0x40734413509F79FE>
  %51 = fcmp uge <2 x double> %0, <double -3.500000e+02, double -3.500000e+02>
  %52 = select <2 x i1> %50, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %49
  %53 = select <2 x i1> %51, <2 x double> %52, <2 x double> zeroinitializer
  ret <2 x double> %53
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expm1d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fadd <2 x double> %0, zeroinitializer
  %3 = fmul <2 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = fmul <2 x double> %6, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %9 = fadd <2 x double> %8, %0
  %10 = fsub <2 x double> %9, %0
  %11 = fsub <2 x double> %9, %10
  %12 = fsub <2 x double> %0, %11
  %13 = fsub <2 x double> %8, %10
  %14 = fadd <2 x double> %13, %12
  %15 = fadd <2 x double> %14, zeroinitializer
  %16 = fmul <2 x double> %6, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %17 = fadd <2 x double> %16, %9
  %18 = fsub <2 x double> %17, %9
  %19 = fsub <2 x double> %17, %18
  %20 = fsub <2 x double> %9, %19
  %21 = fsub <2 x double> %16, %18
  %22 = fadd <2 x double> %21, %20
  %23 = fadd <2 x double> %22, %15
  %24 = bitcast <2 x double> %17 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fsub <2 x double> %17, %26
  %28 = fmul <2 x double> %17, %17
  %29 = fmul <2 x double> %26, %26
  %30 = bitcast <2 x double> %28 to <2 x i64>
  %31 = xor <2 x i64> %30, <i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = fadd <2 x double> %26, %26
  %34 = fmul <2 x double> %33, %27
  %35 = fmul <2 x double> %27, %27
  %36 = fadd <2 x double> %23, %23
  %37 = fmul <2 x double> %17, %36
  %38 = fadd <2 x double> %29, %32
  %39 = fadd <2 x double> %38, %34
  %40 = fadd <2 x double> %35, %39
  %41 = fadd <2 x double> %37, %40
  %42 = and <2 x i64> %30, <i64 -134217728, i64 -134217728>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fsub <2 x double> %28, %43
  %45 = fmul <2 x double> %28, %28
  %46 = fmul <2 x double> %43, %43
  %47 = bitcast <2 x double> %45 to <2 x i64>
  %48 = xor <2 x i64> %47, <i64 -9223372036854775808, i64 -9223372036854775808>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fadd <2 x double> %43, %43
  %51 = fmul <2 x double> %50, %44
  %52 = fmul <2 x double> %44, %44
  %53 = fadd <2 x double> %41, %41
  %54 = fmul <2 x double> %28, %53
  %55 = fadd <2 x double> %46, %49
  %56 = fadd <2 x double> %55, %51
  %57 = fadd <2 x double> %52, %56
  %58 = fadd <2 x double> %57, %54
  %59 = fmul <2 x double> %45, %45
  %60 = fmul <2 x double> %17, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %61 = fadd <2 x double> %60, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %62 = fmul <2 x double> %17, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %63 = fadd <2 x double> %62, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %64 = fmul <2 x double> %17, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %65 = fadd <2 x double> %64, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %66 = fmul <2 x double> %28, %63
  %67 = fadd <2 x double> %65, %66
  %68 = fmul <2 x double> %17, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %69 = fadd <2 x double> %68, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %70 = fmul <2 x double> %17, <double 0x3F81111111111119, double 0x3F81111111111119>
  %71 = fadd <2 x double> %70, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %72 = fmul <2 x double> %28, %69
  %73 = fadd <2 x double> %71, %72
  %74 = fmul <2 x double> %45, %67
  %75 = fadd <2 x double> %73, %74
  %76 = fmul <2 x double> %61, %59
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %17, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %79 = fmul <2 x double> %26, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %80 = bitcast <2 x double> %78 to <2 x i64>
  %81 = xor <2 x i64> %80, <i64 -9223372036854775808, i64 -9223372036854775808>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fmul <2 x double> %27, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %84 = fmul <2 x double> %26, <double 0x3E25555554000000, double 0x3E25555554000000>
  %85 = fmul <2 x double> %27, <double 0x3E25555554000000, double 0x3E25555554000000>
  %86 = fmul <2 x double> %23, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %87 = fadd <2 x double> %79, %82
  %88 = fadd <2 x double> %83, %87
  %89 = fadd <2 x double> %84, %88
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %78, <double 5.000000e-01, double 5.000000e-01>
  %93 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %92
  %94 = fadd <2 x double> %78, %93
  %95 = fadd <2 x double> %94, %91
  %96 = bitcast <2 x double> %92 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -134217728, i64 -134217728>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fsub <2 x double> %92, %98
  %100 = fmul <2 x double> %17, %92
  %101 = fmul <2 x double> %26, %98
  %102 = bitcast <2 x double> %100 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fmul <2 x double> %99, %26
  %106 = fmul <2 x double> %27, %98
  %107 = fmul <2 x double> %27, %99
  %108 = fmul <2 x double> %92, %23
  %109 = fmul <2 x double> %17, %95
  %110 = fadd <2 x double> %101, %104
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %100, <double 1.000000e+00, double 1.000000e+00>
  %117 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %116
  %118 = fadd <2 x double> %100, %117
  %119 = fadd <2 x double> %118, %115
  %120 = bitcast <2 x double> %116 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -134217728, i64 -134217728>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fsub <2 x double> %116, %122
  %124 = fmul <2 x double> %17, %116
  %125 = fmul <2 x double> %26, %122
  %126 = bitcast <2 x double> %124 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -9223372036854775808, i64 -9223372036854775808>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fmul <2 x double> %123, %26
  %130 = fmul <2 x double> %27, %122
  %131 = fmul <2 x double> %27, %123
  %132 = fmul <2 x double> %116, %23
  %133 = fmul <2 x double> %17, %119
  %134 = fadd <2 x double> %125, %128
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %131, %136
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %138, %133
  %140 = fadd <2 x double> %124, <double 1.000000e+00, double 1.000000e+00>
  %141 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %140
  %142 = fadd <2 x double> %124, %141
  %143 = fadd <2 x double> %142, %139
  %144 = and <2 x i64> %47, <i64 -134217728, i64 -134217728>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = fsub <2 x double> %45, %145
  %147 = bitcast <2 x double> %77 to <2 x i64>
  %148 = and <2 x i64> %147, <i64 -134217728, i64 -134217728>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fsub <2 x double> %77, %149
  %151 = fmul <2 x double> %45, %77
  %152 = fmul <2 x double> %145, %149
  %153 = bitcast <2 x double> %151 to <2 x i64>
  %154 = xor <2 x i64> %153, <i64 -9223372036854775808, i64 -9223372036854775808>
  %155 = bitcast <2 x i64> %154 to <2 x double>
  %156 = fmul <2 x double> %146, %149
  %157 = fmul <2 x double> %150, %145
  %158 = fmul <2 x double> %146, %150
  %159 = fmul <2 x double> %77, %58
  %160 = fadd <2 x double> %152, %155
  %161 = fadd <2 x double> %156, %160
  %162 = fadd <2 x double> %157, %161
  %163 = fadd <2 x double> %158, %162
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %140, %151
  %166 = fsub <2 x double> %140, %165
  %167 = fadd <2 x double> %151, %166
  %168 = fadd <2 x double> %167, %143
  %169 = fadd <2 x double> %164, %168
  %170 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %171 = add <4 x i32> %170, <i32 1023, i32 1023, i32 undef, i32 0>
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %173 = and <4 x i32> %172, <i32 0, i32 -1, i32 0, i32 -1>
  %174 = shl <4 x i32> %173, <i32 20, i32 20, i32 20, i32 20>
  %175 = bitcast <4 x i32> %174 to <2 x double>
  %176 = fmul <2 x double> %165, %175
  %177 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 0>
  %178 = sub <4 x i32> %177, %170
  %179 = shufflevector <4 x i32> %178, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %180 = and <4 x i32> %179, <i32 0, i32 -1, i32 0, i32 -1>
  %181 = shl <4 x i32> %180, <i32 20, i32 20, i32 20, i32 20>
  %182 = bitcast <4 x i32> %181 to <2 x double>
  %183 = fmul <2 x double> %176, %182
  %184 = fmul <2 x double> %169, %175
  %185 = fmul <2 x double> %184, %182
  %186 = fcmp uge <2 x double> %0, <double -1.000000e+03, double -1.000000e+03>
  %187 = bitcast <2 x double> %183 to <2 x i64>
  %188 = sext <2 x i1> %186 to <2 x i64>
  %189 = and <2 x i64> %187, %188
  %190 = bitcast <2 x double> %185 to <2 x i64>
  %191 = and <2 x i64> %190, %188
  %192 = bitcast <2 x i64> %189 to <2 x double>
  %193 = bitcast <2 x i64> %191 to <2 x double>
  %194 = fadd <2 x double> %192, <double -1.000000e+00, double -1.000000e+00>
  %195 = fsub <2 x double> %194, %192
  %196 = fsub <2 x double> %194, %195
  %197 = fsub <2 x double> %192, %196
  %198 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %195
  %199 = fadd <2 x double> %198, %197
  %200 = fadd <2 x double> %199, %193
  %201 = fadd <2 x double> %194, %200
  %202 = fcmp ogt <2 x double> %0, <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>
  %203 = bitcast <2 x double> %201 to <2 x i64>
  %204 = select <2 x i1> %202, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %203
  %205 = fcmp olt <2 x double> %0, <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>
  %206 = select <2 x i1> %205, <2 x i64> <i64 -4616189618054758400, i64 -4616189618054758400>, <2 x i64> %204
  %207 = bitcast <2 x double> %0 to <4 x i32>
  %208 = icmp eq <4 x i32> %207, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %209 = sext <4 x i1> %208 to <4 x i32>
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %211 = and <4 x i32> %210, %209
  %212 = bitcast <4 x i32> %211 to <2 x i64>
  %213 = and <2 x i64> %212, <i64 -9223372036854775808, i64 -9223372036854775808>
  %214 = xor <2 x i64> %212, <i64 -1, i64 -1>
  %215 = and <2 x i64> %206, %214
  %216 = or <2 x i64> %215, %213
  %217 = bitcast <2 x i64> %216 to <2 x double>
  ret <2 x double> %217
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log10d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>
  %75 = fadd <2 x double> %74, <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>
  %76 = fmul <2 x double> %72, <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>
  %79 = fadd <2 x double> %78, <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>
  %80 = fmul <2 x double> %71, <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>
  %81 = fadd <2 x double> %80, <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %90 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %90, %93
  %95 = fmul <2 x double> %90, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %96 = fmul <2 x double> %93, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %93, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %101 = fmul <2 x double> %94, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %102 = fmul <2 x double> %94, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %103 = fmul <2 x double> %90, <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>
  %104 = fadd <2 x double> %96, %99
  %105 = fadd <2 x double> %100, %104
  %106 = fadd <2 x double> %101, %105
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = bitcast <2 x double> %48 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -134217728, i64 -134217728>
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fsub <2 x double> %48, %111
  %113 = fmul <2 x double> %48, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %114 = fmul <2 x double> %111, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %115 = bitcast <2 x double> %113 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fmul <2 x double> %112, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %119 = fmul <2 x double> %111, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %120 = fmul <2 x double> %112, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %121 = fmul <2 x double> %48, <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>
  %122 = fmul <2 x double> %70, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %123 = fadd <2 x double> %114, %117
  %124 = fadd <2 x double> %118, %123
  %125 = fadd <2 x double> %119, %124
  %126 = fadd <2 x double> %120, %125
  %127 = fadd <2 x double> %121, %126
  %128 = fadd <2 x double> %127, %122
  %129 = fadd <2 x double> %95, %113
  %130 = fsub <2 x double> %95, %129
  %131 = fadd <2 x double> %113, %130
  %132 = fadd <2 x double> %131, %108
  %133 = fadd <2 x double> %132, %128
  %134 = fmul <2 x double> %48, %71
  %135 = fmul <2 x double> %134, %85
  %136 = fadd <2 x double> %129, %135
  %137 = fsub <2 x double> %129, %136
  %138 = fadd <2 x double> %135, %137
  %139 = fadd <2 x double> %138, %133
  %140 = fadd <2 x double> %136, %139
  %141 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %142 = fcmp ult <2 x double> %5, zeroinitializer
  %143 = fcmp oeq <2 x double> %5, zeroinitializer
  %144 = select <2 x i1> %141, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %140
  %145 = select <2 x i1> %142, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %144
  %146 = select <2 x i1> %143, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %145
  ret <2 x double> %146
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %75 = fadd <2 x double> %74, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %76 = fmul <2 x double> %72, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %79 = fadd <2 x double> %78, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %80 = fmul <2 x double> %71, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %81 = fadd <2 x double> %80, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %48 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %48, %93
  %95 = fmul <2 x double> %48, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %96 = fmul <2 x double> %93, <double 0x4007154760000000, double 0x4007154760000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %94, <double 0x4007154760000000, double 0x4007154760000000>
  %101 = fmul <2 x double> %93, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %102 = fmul <2 x double> %94, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %103 = fmul <2 x double> %48, <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>
  %104 = fmul <2 x double> %70, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %105 = fadd <2 x double> %96, %99
  %106 = fadd <2 x double> %100, %105
  %107 = fadd <2 x double> %101, %106
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %103, %108
  %110 = fadd <2 x double> %109, %104
  %111 = fadd <2 x double> %95, %90
  %112 = fsub <2 x double> %111, %90
  %113 = fsub <2 x double> %111, %112
  %114 = fsub <2 x double> %90, %113
  %115 = fsub <2 x double> %95, %112
  %116 = fadd <2 x double> %115, %114
  %117 = fadd <2 x double> %116, %110
  %118 = fmul <2 x double> %48, %71
  %119 = fmul <2 x double> %118, %85
  %120 = fadd <2 x double> %111, %119
  %121 = fsub <2 x double> %120, %111
  %122 = fsub <2 x double> %120, %121
  %123 = fsub <2 x double> %111, %122
  %124 = fsub <2 x double> %119, %121
  %125 = fadd <2 x double> %124, %123
  %126 = fadd <2 x double> %125, %117
  %127 = fadd <2 x double> %120, %126
  %128 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %129 = fcmp ult <2 x double> %5, zeroinitializer
  %130 = fcmp oeq <2 x double> %5, zeroinitializer
  %131 = select <2 x i1> %128, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %127
  %132 = select <2 x i1> %129, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %131
  %133 = select <2 x i1> %130, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %132
  ret <2 x double> %133
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %25 = fdiv <2 x double> %23, %24
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %28 = fadd <2 x double> %27, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %29 = fmul <2 x double> %26, %28
  %30 = fadd <2 x double> %29, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %31 = fmul <2 x double> %26, %30
  %32 = fadd <2 x double> %31, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %33 = fmul <2 x double> %26, %32
  %34 = fadd <2 x double> %33, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %35 = fmul <2 x double> %26, %34
  %36 = fadd <2 x double> %35, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %37 = fmul <2 x double> %26, %36
  %38 = fadd <2 x double> %37, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %39 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %40 = and <4 x i32> %11, %39
  %41 = or <4 x i32> %22, %40
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %43 = sitofp <2 x i32> %42 to <2 x double>
  %44 = bitcast <2 x double> %25 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %25, %46
  %48 = fmul <2 x double> %25, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %49 = fmul <2 x double> %46, <double 0x4007154760000000, double 0x4007154760000000>
  %50 = bitcast <2 x double> %48 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372036854775808, i64 -9223372036854775808>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fmul <2 x double> %47, <double 0x4007154760000000, double 0x4007154760000000>
  %54 = fmul <2 x double> %46, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %55 = fmul <2 x double> %47, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %56 = fadd <2 x double> %49, %52
  %57 = fadd <2 x double> %53, %56
  %58 = fadd <2 x double> %54, %57
  %59 = fadd <2 x double> %55, %58
  %60 = fadd <2 x double> %48, %43
  %61 = fsub <2 x double> %43, %60
  %62 = fadd <2 x double> %48, %61
  %63 = fadd <2 x double> %62, %59
  %64 = fmul <2 x double> %25, %26
  %65 = fadd <2 x double> %60, %63
  %66 = fmul <2 x double> %64, %38
  %67 = fadd <2 x double> %65, %66
  %68 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %69 = fcmp ult <2 x double> %5, zeroinitializer
  %70 = fcmp oeq <2 x double> %5, zeroinitializer
  %71 = select <2 x i1> %68, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %67
  %72 = select <2 x i1> %69, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %71
  %73 = select <2 x i1> %70, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %72
  ret <2 x double> %73
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log1pd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fcmp olt <2 x double> %2, <double 0x10000000000000, double 0x10000000000000>
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = select <2 x i1> %3, <2 x double> %5, <2 x double> %2
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = add <4 x i32> %16, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %20 = fmul <2 x double> %18, %0
  %21 = fadd <2 x double> %20, %19
  %22 = bitcast <2 x i64> %4 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %24 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %25 = and <4 x i32> %24, %23
  %26 = xor <4 x i32> %23, <i32 -1, i32 -1, i32 undef, i32 undef>
  %27 = and <4 x i32> %12, %26
  %28 = or <4 x i32> %25, %27
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %30 = sitofp <2 x i32> %29 to <2 x double>
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fsub <2 x double> %30, %33
  %35 = fmul <2 x double> %30, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %36 = fmul <2 x double> %33, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %37 = bitcast <2 x double> %35 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372036854775808, i64 -9223372036854775808>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fmul <2 x double> %33, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %41 = fmul <2 x double> %34, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %42 = fmul <2 x double> %34, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %43 = fmul <2 x double> %30, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %44 = fadd <2 x double> %36, %39
  %45 = fadd <2 x double> %40, %44
  %46 = fadd <2 x double> %41, %45
  %47 = fadd <2 x double> %42, %46
  %48 = fadd <2 x double> %43, %47
  %49 = fadd <2 x double> %21, <double 2.000000e+00, double 2.000000e+00>
  %50 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %49
  %51 = fadd <2 x double> %21, %50
  %52 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %53 = bitcast <2 x double> %49 to <2 x i64>
  %54 = and <2 x i64> %53, <i64 -134217728, i64 -134217728>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fsub <2 x double> %49, %55
  %57 = bitcast <2 x double> %52 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -134217728, i64 -134217728>
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fsub <2 x double> %52, %59
  %61 = bitcast <2 x double> %21 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 -134217728, i64 -134217728>
  %63 = bitcast <2 x i64> %62 to <2 x double>
  %64 = fsub <2 x double> %21, %63
  %65 = fmul <2 x double> %21, %52
  %66 = fmul <2 x double> %63, %59
  %67 = fsub <2 x double> %66, %65
  %68 = fmul <2 x double> %60, %63
  %69 = fmul <2 x double> %64, %59
  %70 = fmul <2 x double> %64, %60
  %71 = fmul <2 x double> %55, %59
  %72 = fmul <2 x double> %60, %55
  %73 = fmul <2 x double> %56, %59
  %74 = fmul <2 x double> %56, %60
  %75 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %71
  %76 = fsub <2 x double> %75, %72
  %77 = fsub <2 x double> %76, %73
  %78 = fsub <2 x double> %77, %74
  %79 = fmul <2 x double> %65, %78
  %80 = fadd <2 x double> %67, %68
  %81 = fadd <2 x double> %69, %80
  %82 = fadd <2 x double> %70, %81
  %83 = fadd <2 x double> %82, %79
  %84 = fmul <2 x double> %65, %51
  %85 = fsub <2 x double> zeroinitializer, %84
  %86 = fmul <2 x double> %52, %85
  %87 = fadd <2 x double> %86, %83
  %88 = fmul <2 x double> %65, %65
  %89 = fmul <2 x double> %88, %88
  %90 = fmul <2 x double> %89, %89
  %91 = fmul <2 x double> %88, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %92 = fadd <2 x double> %91, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %93 = fmul <2 x double> %89, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %94 = fadd <2 x double> %93, %92
  %95 = fmul <2 x double> %88, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %96 = fadd <2 x double> %95, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %97 = fmul <2 x double> %88, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %98 = fadd <2 x double> %97, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %99 = fmul <2 x double> %89, %96
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %90, %94
  %102 = fadd <2 x double> %101, %100
  %103 = fmul <2 x double> %65, <double 2.000000e+00, double 2.000000e+00>
  %104 = fmul <2 x double> %87, <double 2.000000e+00, double 2.000000e+00>
  %105 = fadd <2 x double> %35, %103
  %106 = fsub <2 x double> %35, %105
  %107 = fadd <2 x double> %103, %106
  %108 = fadd <2 x double> %48, %107
  %109 = fadd <2 x double> %108, %104
  %110 = fmul <2 x double> %65, %88
  %111 = fmul <2 x double> %110, %102
  %112 = fadd <2 x double> %105, %111
  %113 = fsub <2 x double> %105, %112
  %114 = fadd <2 x double> %111, %113
  %115 = fadd <2 x double> %114, %109
  %116 = fadd <2 x double> %112, %115
  %117 = fcmp ogt <2 x double> %0, <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>
  %118 = bitcast <2 x double> %116 to <2 x i64>
  %119 = select <2 x i1> %117, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %118
  %120 = fcmp olt <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %121 = fcmp uno <2 x double> %0, zeroinitializer
  %122 = or <2 x i1> %121, %120
  %123 = select <2 x i1> %122, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %119
  %124 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %125 = select <2 x i1> %124, <2 x i64> <i64 -4503599627370496, i64 -4503599627370496>, <2 x i64> %123
  %126 = bitcast <2 x double> %0 to <4 x i32>
  %127 = icmp eq <4 x i32> %126, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %130 = and <4 x i32> %129, %128
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = and <2 x i64> %131, <i64 -9223372036854775808, i64 -9223372036854775808>
  %133 = xor <2 x i64> %131, <i64 -1, i64 -1>
  %134 = and <2 x i64> %125, %133
  %135 = or <2 x i64> %134, %132
  %136 = bitcast <2 x i64> %135 to <2 x double>
  ret <2 x double> %136
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_fabsd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_copysignd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmaxd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #6
  %5 = select <2 x i1> %3, <2 x double> %0, <2 x double> %4
  ret <2 x double> %5
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmind2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #6
  %5 = select <2 x i1> %3, <2 x double> %0, <2 x double> %4
  ret <2 x double> %5
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_fdimd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = fcmp uge <2 x double> %3, zeroinitializer
  %5 = fcmp une <2 x double> %0, %1
  %6 = and <2 x i1> %4, %5
  %7 = select <2 x i1> %6, <2 x double> %3, <2 x double> zeroinitializer
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_truncd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = bitcast <2 x double> %0 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 9223372036854775807, i64 9223372036854775807>
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = fcmp oeq <2 x double> %14, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %16 = fcmp oge <2 x double> %14, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = or <2 x i1> %16, %15
  %18 = fsub <2 x double> %0, %11
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <2 x i64> %12, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <2 x i64> %20, %21
  %23 = select <2 x i1> %17, <2 x i64> %12, <2 x i64> %22
  %24 = bitcast <2 x i64> %23 to <2 x double>
  ret <2 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_floord2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp olt <2 x double> %11, zeroinitializer
  %13 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %14 = select <2 x i1> %12, <2 x double> %13, <2 x double> %11
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = fcmp oge <2 x double> %17, <double 0x4330000000000000, double 0x4330000000000000>
  %20 = or <2 x i1> %19, %18
  %21 = fsub <2 x double> %0, %14
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372036854775807, i64 9223372036854775807>
  %24 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %25 = or <2 x i64> %23, %24
  %26 = select <2 x i1> %20, <2 x i64> %15, <2 x i64> %25
  %27 = bitcast <2 x i64> %26 to <2 x double>
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_ceild2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp ole <2 x double> %11, zeroinitializer
  %13 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %14 = select <2 x i1> %12, <2 x double> %11, <2 x double> %13
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = fcmp oge <2 x double> %17, <double 0x4330000000000000, double 0x4330000000000000>
  %20 = or <2 x i1> %19, %18
  %21 = fsub <2 x double> %0, %14
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372036854775807, i64 9223372036854775807>
  %24 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %25 = or <2 x i64> %23, %24
  %26 = select <2 x i1> %20, <2 x i64> %15, <2 x i64> %25
  %27 = bitcast <2 x i64> %26 to <2 x double>
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_roundd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = fcmp ole <2 x double> %2, zeroinitializer
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = and <2 x i1> %14, %13
  %16 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %17 = select <2 x i1> %15, <2 x double> %16, <2 x double> %2
  %18 = fcmp olt <2 x double> %12, zeroinitializer
  %19 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %20 = select <2 x i1> %18, <2 x double> %19, <2 x double> %12
  %21 = fcmp une <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %22 = select <2 x i1> %21, <2 x double> %17, <2 x double> zeroinitializer
  %23 = bitcast <2 x double> %0 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fcmp oeq <2 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = fcmp oge <2 x double> %25, <double 0x4330000000000000, double 0x4330000000000000>
  %28 = or <2 x i1> %27, %26
  %29 = fsub <2 x double> %22, %20
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 9223372036854775807, i64 9223372036854775807>
  %32 = and <2 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808>
  %33 = or <2 x i64> %31, %32
  %34 = select <2 x i1> %28, <2 x i64> %23, <2 x i64> %33
  %35 = bitcast <2 x i64> %34 to <2 x double>
  ret <2 x double> %35
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_rintd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %4 = or <2 x i64> %3, <i64 4841369599423283200, i64 4841369599423283200>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = fcmp ogt <2 x double> %7, <double 0x4330000000000000, double 0x4330000000000000>
  %9 = fadd <2 x double> %5, %0
  %10 = fsub <2 x double> %9, %5
  %11 = bitcast <2 x double> %10 to <2 x i64>
  %12 = or <2 x i64> %3, %11
  %13 = select <2 x i1> %8, <2 x i64> %2, <2 x i64> %12
  %14 = bitcast <2 x i64> %13 to <2 x double>
  ret <2 x double> %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_nextafterd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = bitcast <2 x double> %1 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 -9223372036854775808, i64 -9223372036854775808>
  %6 = bitcast <2 x double> %0 to <2 x i64>
  %7 = select <2 x i1> %3, <2 x i64> %5, <2 x i64> %6
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = and <4 x i32> %9, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %11 = icmp eq <4 x i32> %10, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %14 = and <4 x i32> %13, %12
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = fcmp ole <2 x double> %8, %1
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = xor <2 x i64> %15, %17
  %19 = xor <4 x i32> %9, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %20 = add <4 x i32> %19, <i32 1, i32 0, i32 1, i32 0>
  %21 = icmp eq <4 x i32> %20, <i32 0, i32 -1, i32 0, i32 -1>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 1, i64 1>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %27 = bitcast <4 x float> %26 to <4 x i32>
  %28 = add <4 x i32> %20, %27
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = and <2 x i64> %18, %29
  %31 = xor <2 x i64> %18, <i64 -1, i64 -1>
  %32 = and <2 x i64> %7, %31
  %33 = or <2 x i64> %30, %32
  %34 = fcmp une <2 x double> %8, %1
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %33 to <4 x i32>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = and <4 x i32> %37, <i32 1, i32 0, i32 1, i32 0>
  %39 = sub <4 x i32> %36, %38
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = icmp eq <4 x i32> %39, <i32 -1, i32 0, i32 -1, i32 0>
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 4294967295, i64 4294967295>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = add <4 x i32> %39, %47
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = select <2 x i1> %34, <2 x i64> %49, <2 x i64> %40
  %51 = bitcast <2 x i64> %50 to <4 x i32>
  %52 = xor <4 x i32> %51, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %53 = add <4 x i32> %52, <i32 1, i32 0, i32 1, i32 0>
  %54 = icmp eq <4 x i32> %53, <i32 0, i32 -1, i32 0, i32 -1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 1, i64 1>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %60 = bitcast <4 x float> %59 to <4 x i32>
  %61 = add <4 x i32> %53, %60
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = and <2 x i64> %18, %62
  %64 = and <2 x i64> %50, %31
  %65 = or <2 x i64> %63, %64
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fcmp oeq <2 x double> %66, zeroinitializer
  %68 = fcmp une <2 x double> %8, zeroinitializer
  %69 = and <2 x i1> %67, %68
  %70 = and <2 x i64> %7, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = select <2 x i1> %69, <2 x i64> %70, <2 x i64> %65
  %72 = fcmp oeq <2 x double> %8, zeroinitializer
  %73 = fcmp oeq <2 x double> %1, zeroinitializer
  %74 = and <2 x i1> %72, %73
  %75 = select <2 x i1> %74, <2 x i64> %4, <2 x i64> %71
  %76 = fcmp uno <2 x double> %8, %1
  %77 = bitcast <2 x i64> %75 to <2 x double>
  %78 = select <2 x i1> %76, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %77
  ret <2 x double> %78
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_frfrexpd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = select <2 x i1> %5, <2 x double> %6, <2 x double> %0
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <2 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912>
  %11 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fcmp oeq <2 x double> %12, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %14 = and <2 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808>
  %15 = or <2 x i64> %14, <i64 9218868437227405312, i64 9218868437227405312>
  %16 = select <2 x i1> %13, <2 x i64> %15, <2 x i64> %10
  %17 = fcmp oeq <2 x double> %7, zeroinitializer
  %18 = select <2 x i1> %17, <2 x i64> %8, <2 x i64> %16
  %19 = bitcast <2 x i64> %18 to <2 x double>
  ret <2 x double> %19
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = select <2 x i1> %5, <2 x double> %6, <2 x double> %0
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = bitcast <2 x double> %7 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 0, i32 0>
  %13 = add nsw <4 x i32> %12, <i32 -1022, i32 -1022, i32 0, i32 0>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = fcmp one <2 x double> %7, zeroinitializer
  %16 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp une <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = and <2 x i1> %18, %15
  %20 = select <2 x i1> %19, <2 x i64> %14, <2 x i64> zeroinitializer
  ret <2 x i64> %20
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmad2_sse2(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #1 {
  %4 = fmul <2 x double> %0, %1
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 1.000000e-300, double 1.000000e-300>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %0, <double 0x46B0000000000000, double 0x46B0000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %14, %15
  %17 = or <2 x i64> %16, %13
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fmul <2 x double> %1, <double 0x46B0000000000000, double 0x46B0000000000000>
  %20 = bitcast <2 x double> %19 to <2 x i64>
  %21 = and <2 x i64> %10, %20
  %22 = bitcast <2 x double> %1 to <2 x i64>
  %23 = and <2 x i64> %14, %22
  %24 = or <2 x i64> %23, %21
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fmul <2 x double> %2, <double 0x4D70000000000000, double 0x4D70000000000000>
  %27 = bitcast <2 x double> %26 to <2 x i64>
  %28 = and <2 x i64> %10, %27
  %29 = bitcast <2 x double> %2 to <2 x i64>
  %30 = and <2 x i64> %14, %29
  %31 = or <2 x i64> %30, %28
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = and <2 x i64> %10, <i64 3634404899287990272, i64 3634404899287990272>
  %34 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %35 = or <2 x i64> %34, %33
  %36 = fcmp ogt <2 x double> %8, <double 1.000000e+300, double 1.000000e+300>
  %37 = sext <2 x i1> %36 to <2 x i64>
  %38 = fmul <2 x double> %18, <double 0x3930000000000000, double 0x3930000000000000>
  %39 = bitcast <2 x double> %38 to <2 x i64>
  %40 = and <2 x i64> %39, %37
  %41 = xor <2 x i64> %37, <i64 -1, i64 -1>
  %42 = and <2 x i64> %17, %41
  %43 = or <2 x i64> %40, %42
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = fmul <2 x double> %25, <double 0x3930000000000000, double 0x3930000000000000>
  %46 = bitcast <2 x double> %45 to <2 x i64>
  %47 = and <2 x i64> %46, %37
  %48 = and <2 x i64> %24, %41
  %49 = or <2 x i64> %47, %48
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fmul <2 x double> %32, <double 0x3270000000000000, double 0x3270000000000000>
  %52 = bitcast <2 x double> %51 to <2 x i64>
  %53 = and <2 x i64> %52, %37
  %54 = and <2 x i64> %31, %41
  %55 = or <2 x i64> %53, %54
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = and <2 x i64> %37, <i64 5579959938312044544, i64 5579959938312044544>
  %58 = and <2 x i64> %35, %41
  %59 = or <2 x i64> %58, %57
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = and <2 x i64> %43, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %44, %62
  %64 = and <2 x i64> %49, <i64 -134217728, i64 -134217728>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fsub <2 x double> %50, %65
  %67 = fmul <2 x double> %44, %50
  %68 = fmul <2 x double> %62, %65
  %69 = bitcast <2 x double> %67 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fmul <2 x double> %63, %65
  %73 = fmul <2 x double> %66, %62
  %74 = fmul <2 x double> %63, %66
  %75 = fadd <2 x double> %68, %71
  %76 = fadd <2 x double> %72, %75
  %77 = fadd <2 x double> %73, %76
  %78 = fadd <2 x double> %74, %77
  %79 = fadd <2 x double> %67, %56
  %80 = fsub <2 x double> %79, %67
  %81 = fsub <2 x double> %79, %80
  %82 = fsub <2 x double> %67, %81
  %83 = fsub <2 x double> %56, %80
  %84 = fadd <2 x double> %83, %82
  %85 = fadd <2 x double> %84, %78
  %86 = fcmp oeq <2 x double> %44, zeroinitializer
  %87 = fcmp oeq <2 x double> %50, zeroinitializer
  %88 = or <2 x i1> %87, %86
  %89 = fadd <2 x double> %79, %85
  %90 = select <2 x i1> %88, <2 x double> %56, <2 x double> %89
  %91 = and <2 x i64> %55, <i64 9223372036854775807, i64 9223372036854775807>
  %92 = bitcast <2 x i64> %91 to <2 x double>
  %93 = fcmp oeq <2 x double> %92, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %94 = and <2 x i64> %43, <i64 9223372036854775807, i64 9223372036854775807>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fcmp une <2 x double> %95, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %97 = and <2 x i64> %49, <i64 9223372036854775807, i64 9223372036854775807>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fcmp une <2 x double> %98, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %100 = fcmp ord <2 x double> %50, %44
  %101 = and <2 x i1> %100, %93
  %102 = and <2 x i1> %101, %96
  %103 = and <2 x i1> %102, %99
  %104 = select <2 x i1> %103, <2 x i64> %55, <2 x i64> %6
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = and <2 x i64> %104, <i64 9223372036854775807, i64 9223372036854775807>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fcmp oeq <2 x double> %107, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = fcmp uno <2 x double> %105, zeroinitializer
  %110 = or <2 x i1> %108, %109
  %111 = fmul <2 x double> %90, %60
  %112 = select <2 x i1> %110, <2 x double> %105, <2 x double> %111
  ret <2 x double> %112
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u05sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = select <2 x i1> %2, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x double> %8 to <2 x i64>
  %10 = and <2 x i64> %9, %7
  %11 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %12 = and <2 x i64> %4, %11
  %13 = or <2 x i64> %12, %10
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = and <2 x i64> %7, <i64 4026218066869223424, i64 4026218066869223424>
  %16 = and <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %17 = or <2 x i64> %16, %15
  %18 = fcmp ogt <2 x double> %14, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = fmul <2 x double> %14, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, %19
  %23 = xor <2 x i64> %19, <i64 -1, i64 -1>
  %24 = and <2 x i64> %13, %23
  %25 = or <2 x i64> %24, %22
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = and <2 x i64> %19, <i64 5755600323779493888, i64 5755600323779493888>
  %28 = and <2 x i64> %17, %23
  %29 = or <2 x i64> %28, %27
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fadd <2 x double> %26, <double 9.999880e-321, double 9.999880e-321>
  %32 = bitcast <2 x double> %31 to <4 x i32>
  %33 = lshr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %33
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %26, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %37, %35
  %39 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %38
  %40 = fmul <2 x double> %39, %35
  %41 = fmul <2 x double> %36, %40
  %42 = fmul <2 x double> %40, %41
  %43 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %42
  %44 = fmul <2 x double> %40, %43
  %45 = fmul <2 x double> %36, %44
  %46 = fmul <2 x double> %44, %45
  %47 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %46
  %48 = fmul <2 x double> %44, %47
  %49 = fmul <2 x double> %48, %26
  %50 = bitcast <2 x double> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fsub <2 x double> %49, %52
  %54 = fmul <2 x double> %49, %49
  %55 = fmul <2 x double> %52, %52
  %56 = bitcast <2 x double> %54 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fmul <2 x double> %53, %52
  %60 = fmul <2 x double> %53, %53
  %61 = fadd <2 x double> %55, %58
  %62 = fadd <2 x double> %59, %61
  %63 = fadd <2 x double> %59, %62
  %64 = fadd <2 x double> %60, %63
  %65 = fadd <2 x double> %54, %26
  %66 = fsub <2 x double> %65, %26
  %67 = fsub <2 x double> %65, %66
  %68 = fsub <2 x double> %26, %67
  %69 = fsub <2 x double> %54, %66
  %70 = fadd <2 x double> %69, %68
  %71 = fadd <2 x double> %70, %64
  %72 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %72, %75
  %77 = fmul <2 x double> %52, %75
  %78 = fmul <2 x double> %76, %52
  %79 = fmul <2 x double> %53, %75
  %80 = fmul <2 x double> %53, %76
  %81 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %77
  %82 = fsub <2 x double> %81, %78
  %83 = fsub <2 x double> %82, %79
  %84 = fsub <2 x double> %83, %80
  %85 = fmul <2 x double> %72, %84
  %86 = bitcast <2 x double> %65 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -134217728, i64 -134217728>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fsub <2 x double> %65, %88
  %90 = fmul <2 x double> %72, %65
  %91 = fmul <2 x double> %75, %88
  %92 = bitcast <2 x double> %90 to <2 x i64>
  %93 = xor <2 x i64> %92, <i64 -9223372036854775808, i64 -9223372036854775808>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fmul <2 x double> %89, %75
  %96 = fmul <2 x double> %76, %88
  %97 = fmul <2 x double> %76, %89
  %98 = fmul <2 x double> %65, %85
  %99 = fmul <2 x double> %72, %71
  %100 = fadd <2 x double> %91, %94
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %103, %98
  %105 = fadd <2 x double> %99, %104
  %106 = fadd <2 x double> %90, %105
  %107 = fmul <2 x double> %106, %30
  %108 = fcmp oeq <2 x double> %26, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = bitcast <2 x double> %107 to <2 x i64>
  %110 = select <2 x i1> %108, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %109
  %111 = fcmp oeq <2 x double> %26, zeroinitializer
  %112 = select <2 x i1> %111, <2 x i64> %25, <2 x i64> %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  ret <2 x double> %113
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %0) #6
  ret <2 x double> %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = select <2 x i1> %2, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x double> %8 to <2 x i64>
  %10 = and <2 x i64> %9, %7
  %11 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %12 = and <2 x i64> %4, %11
  %13 = or <2 x i64> %12, %10
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = and <2 x i64> %7, <i64 4026218066869223424, i64 4026218066869223424>
  %16 = and <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %17 = or <2 x i64> %16, %15
  %18 = fcmp ogt <2 x double> %14, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = fmul <2 x double> %14, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, %19
  %23 = xor <2 x i64> %19, <i64 -1, i64 -1>
  %24 = and <2 x i64> %13, %23
  %25 = or <2 x i64> %24, %22
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = and <2 x i64> %19, <i64 5755600323779493888, i64 5755600323779493888>
  %28 = and <2 x i64> %17, %23
  %29 = or <2 x i64> %28, %27
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fadd <2 x double> %26, <double 9.999880e-321, double 9.999880e-321>
  %32 = bitcast <2 x double> %31 to <4 x i32>
  %33 = lshr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %33
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %26, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %37, %35
  %39 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %38
  %40 = fmul <2 x double> %39, %35
  %41 = fmul <2 x double> %36, %40
  %42 = fmul <2 x double> %40, %41
  %43 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %42
  %44 = fmul <2 x double> %40, %43
  %45 = fmul <2 x double> %36, %44
  %46 = fmul <2 x double> %44, %45
  %47 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %46
  %48 = fmul <2 x double> %44, %47
  %49 = fmul <2 x double> %48, %26
  %50 = bitcast <2 x double> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fsub <2 x double> %49, %52
  %54 = fmul <2 x double> %49, %49
  %55 = fmul <2 x double> %52, %52
  %56 = bitcast <2 x double> %54 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fmul <2 x double> %53, %52
  %60 = fmul <2 x double> %53, %53
  %61 = fadd <2 x double> %55, %58
  %62 = fadd <2 x double> %59, %61
  %63 = fadd <2 x double> %59, %62
  %64 = fadd <2 x double> %60, %63
  %65 = fadd <2 x double> %54, %26
  %66 = fsub <2 x double> %65, %26
  %67 = fsub <2 x double> %65, %66
  %68 = fsub <2 x double> %26, %67
  %69 = fsub <2 x double> %54, %66
  %70 = fadd <2 x double> %69, %68
  %71 = fadd <2 x double> %70, %64
  %72 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %72, %75
  %77 = fmul <2 x double> %52, %75
  %78 = fmul <2 x double> %76, %52
  %79 = fmul <2 x double> %53, %75
  %80 = fmul <2 x double> %53, %76
  %81 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %77
  %82 = fsub <2 x double> %81, %78
  %83 = fsub <2 x double> %82, %79
  %84 = fsub <2 x double> %83, %80
  %85 = fmul <2 x double> %72, %84
  %86 = bitcast <2 x double> %65 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -134217728, i64 -134217728>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fsub <2 x double> %65, %88
  %90 = fmul <2 x double> %72, %65
  %91 = fmul <2 x double> %75, %88
  %92 = bitcast <2 x double> %90 to <2 x i64>
  %93 = xor <2 x i64> %92, <i64 -9223372036854775808, i64 -9223372036854775808>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fmul <2 x double> %89, %75
  %96 = fmul <2 x double> %76, %88
  %97 = fmul <2 x double> %76, %89
  %98 = fmul <2 x double> %65, %85
  %99 = fmul <2 x double> %72, %71
  %100 = fadd <2 x double> %91, %94
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %103, %98
  %105 = fadd <2 x double> %99, %104
  %106 = fadd <2 x double> %90, %105
  %107 = fmul <2 x double> %106, %30
  %108 = fcmp oeq <2 x double> %26, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = bitcast <2 x double> %107 to <2 x i64>
  %110 = select <2 x i1> %108, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %109
  %111 = fcmp oeq <2 x double> %26, zeroinitializer
  %112 = select <2 x i1> %111, <2 x i64> %25, <2 x i64> %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  ret <2 x double> %113
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u05sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fcmp olt <2 x double> %10, <double 0x10000000000000, double 0x10000000000000>
  %12 = sext <2 x i1> %11 to <2 x i64>
  %13 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %14 = bitcast <2 x double> %13 to <2 x i64>
  %15 = and <2 x i64> %12, %14
  %16 = xor <2 x i64> %12, <i64 -1, i64 -1>
  %17 = bitcast <2 x double> %9 to <2 x i64>
  %18 = and <2 x i64> %16, %17
  %19 = or <2 x i64> %18, %15
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, %12
  %24 = bitcast <2 x double> %10 to <2 x i64>
  %25 = and <2 x i64> %16, %24
  %26 = or <2 x i64> %25, %23
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %27
  %29 = and <2 x i64> %26, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %27, %30
  %32 = bitcast <2 x double> %28 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -134217728, i64 -134217728>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = fsub <2 x double> %28, %34
  %36 = and <2 x i64> %19, <i64 -134217728, i64 -134217728>
  %37 = bitcast <2 x i64> %36 to <2 x double>
  %38 = fsub <2 x double> %20, %37
  %39 = fmul <2 x double> %28, %20
  %40 = fmul <2 x double> %37, %34
  %41 = fsub <2 x double> %40, %39
  %42 = fmul <2 x double> %35, %37
  %43 = fmul <2 x double> %38, %34
  %44 = fmul <2 x double> %38, %35
  %45 = fmul <2 x double> %30, %34
  %46 = fmul <2 x double> %35, %30
  %47 = fmul <2 x double> %31, %34
  %48 = fmul <2 x double> %31, %35
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %50 = fsub <2 x double> %49, %46
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %51, %48
  %53 = fmul <2 x double> %39, %52
  %54 = fadd <2 x double> %41, %42
  %55 = fadd <2 x double> %43, %54
  %56 = fadd <2 x double> %44, %55
  %57 = fadd <2 x double> %56, %53
  %58 = fmul <2 x double> %39, zeroinitializer
  %59 = fsub <2 x double> zeroinitializer, %58
  %60 = fmul <2 x double> %28, %59
  %61 = fadd <2 x double> %60, %57
  %62 = bitcast <2 x double> %39 to <2 x i64>
  %63 = and <2 x i64> %62, <i64 -134217728, i64 -134217728>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = fsub <2 x double> %39, %64
  %66 = fmul <2 x double> %39, %39
  %67 = fmul <2 x double> %64, %64
  %68 = bitcast <2 x double> %66 to <2 x i64>
  %69 = xor <2 x i64> %68, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = bitcast <2 x i64> %69 to <2 x double>
  %71 = fadd <2 x double> %64, %64
  %72 = fmul <2 x double> %71, %65
  %73 = fmul <2 x double> %65, %65
  %74 = fadd <2 x double> %61, %61
  %75 = fmul <2 x double> %39, %74
  %76 = fadd <2 x double> %67, %70
  %77 = fadd <2 x double> %76, %72
  %78 = fadd <2 x double> %73, %77
  %79 = fadd <2 x double> %78, %75
  %80 = fadd <2 x double> %66, <double 1.000000e+00, double 1.000000e+00>
  %81 = fsub <2 x double> %80, %66
  %82 = fsub <2 x double> %80, %81
  %83 = fsub <2 x double> %66, %82
  %84 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %81
  %85 = fadd <2 x double> %84, %83
  %86 = fadd <2 x double> %85, %79
  %87 = fadd <2 x double> %80, %86
  %88 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %87) #6
  %89 = bitcast <2 x double> %88 to <2 x i64>
  %90 = and <2 x i64> %89, <i64 -134217728, i64 -134217728>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = fsub <2 x double> %88, %91
  %93 = fmul <2 x double> %88, %88
  %94 = fmul <2 x double> %91, %91
  %95 = bitcast <2 x double> %93 to <2 x i64>
  %96 = xor <2 x i64> %95, <i64 -9223372036854775808, i64 -9223372036854775808>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fmul <2 x double> %92, %91
  %99 = fmul <2 x double> %92, %92
  %100 = fadd <2 x double> %94, %97
  %101 = fadd <2 x double> %98, %100
  %102 = fadd <2 x double> %98, %101
  %103 = fadd <2 x double> %99, %102
  %104 = fadd <2 x double> %93, %80
  %105 = fsub <2 x double> %104, %80
  %106 = fsub <2 x double> %104, %105
  %107 = fsub <2 x double> %80, %106
  %108 = fsub <2 x double> %93, %105
  %109 = fadd <2 x double> %108, %107
  %110 = fadd <2 x double> %103, %86
  %111 = fadd <2 x double> %109, %110
  %112 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %88
  %113 = bitcast <2 x double> %112 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -134217728, i64 -134217728>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fsub <2 x double> %112, %115
  %117 = fmul <2 x double> %91, %115
  %118 = fmul <2 x double> %116, %91
  %119 = fmul <2 x double> %92, %115
  %120 = fmul <2 x double> %92, %116
  %121 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %122 = fsub <2 x double> %121, %118
  %123 = fsub <2 x double> %122, %119
  %124 = fsub <2 x double> %123, %120
  %125 = fmul <2 x double> %112, %124
  %126 = bitcast <2 x double> %104 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -134217728, i64 -134217728>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fsub <2 x double> %104, %128
  %130 = fmul <2 x double> %112, %104
  %131 = fmul <2 x double> %115, %128
  %132 = bitcast <2 x double> %130 to <2 x i64>
  %133 = xor <2 x i64> %132, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fmul <2 x double> %129, %115
  %136 = fmul <2 x double> %116, %128
  %137 = fmul <2 x double> %116, %129
  %138 = fmul <2 x double> %104, %125
  %139 = fmul <2 x double> %112, %111
  %140 = fadd <2 x double> %131, %134
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %136, %141
  %143 = fadd <2 x double> %137, %142
  %144 = fadd <2 x double> %138, %143
  %145 = fadd <2 x double> %144, %139
  %146 = fmul <2 x double> %130, <double 5.000000e-01, double 5.000000e-01>
  %147 = fmul <2 x double> %145, <double 5.000000e-01, double 5.000000e-01>
  %148 = bitcast <2 x double> %146 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %146, %150
  %152 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fsub <2 x double> %10, %153
  %155 = fmul <2 x double> %10, %146
  %156 = fmul <2 x double> %153, %150
  %157 = bitcast <2 x double> %155 to <2 x i64>
  %158 = xor <2 x i64> %157, <i64 -9223372036854775808, i64 -9223372036854775808>
  %159 = bitcast <2 x i64> %158 to <2 x double>
  %160 = fmul <2 x double> %151, %153
  %161 = fmul <2 x double> %154, %150
  %162 = fmul <2 x double> %154, %151
  %163 = fmul <2 x double> %10, %147
  %164 = fadd <2 x double> %156, %159
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %167, %163
  %169 = fadd <2 x double> %155, %168
  %170 = fcmp uno <2 x double> %169, zeroinitializer
  %171 = bitcast <2 x double> %169 to <2 x i64>
  %172 = select <2 x i1> %170, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %171
  %173 = fcmp oeq <2 x double> %9, zeroinitializer
  %174 = select <2 x i1> %173, <2 x i64> %24, <2 x i64> %172
  %175 = fcmp uno <2 x double> %8, %5
  %176 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %178 = or <2 x i1> %177, %176
  %179 = bitcast <2 x i64> %174 to <2 x double>
  %180 = select <2 x i1> %175, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %179
  %181 = select <2 x i1> %178, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %180
  ret <2 x double> %181
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u35sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fdiv <2 x double> %9, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %13) #6
  %15 = fmul <2 x double> %10, %14
  %16 = fcmp oeq <2 x double> %9, zeroinitializer
  %17 = select <2 x i1> %16, <2 x double> %10, <2 x double> %15
  %18 = fcmp uno <2 x double> %8, %5
  %19 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %20 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = or <2 x i1> %20, %19
  %22 = select <2 x i1> %18, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %17
  %23 = select <2 x i1> %21, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %22
  ret <2 x double> %23
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmodd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x10000000000000, double 0x10000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = and <2 x i64> %4, %14
  %16 = or <2 x i64> %15, %13
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, %10
  %21 = and <2 x i64> %7, %14
  %22 = or <2 x i64> %21, %20
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = and <2 x i64> %10, <i64 4363988038922010624, i64 4363988038922010624>
  %25 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %26 = or <2 x i64> %25, %24
  %27 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %23
  %28 = bitcast <2 x double> %27 to <2 x i64>
  %29 = add <2 x i64> %28, <i64 -1, i64 -1>
  %30 = fcmp une <2 x double> %27, zeroinitializer
  %31 = bitcast <2 x i64> %29 to <2 x double>
  %32 = select <2 x i1> %30, <2 x double> %31, <2 x double> zeroinitializer
  %33 = fmul <2 x double> %23, <double 3.000000e+00, double 3.000000e+00>
  %34 = fadd <2 x double> %23, %23
  %35 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = and <2 x i64> %35, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %36, %38
  br label %40

; <label>:40:                                     ; preds = %40, %2
  %41 = phi i32 [ 0, %2 ], [ %107, %40 ]
  %42 = phi <2 x double> [ zeroinitializer, %2 ], [ %101, %40 ]
  %43 = phi <2 x double> [ %17, %2 ], [ %99, %40 ]
  %44 = bitcast <2 x double> %43 to <2 x i64>
  %45 = add <2 x i64> %44, <i64 -1, i64 -1>
  %46 = fcmp une <2 x double> %43, zeroinitializer
  %47 = bitcast <2 x i64> %45 to <2 x double>
  %48 = select <2 x i1> %46, <2 x double> %47, <2 x double> zeroinitializer
  %49 = fmul <2 x double> %32, %48
  %50 = fmul <2 x double> %49, <double 0x3E00000000000000, double 0x3E00000000000000>
  %51 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %50) #6
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %53 = sitofp <2 x i32> %52 to <2 x double>
  %54 = fmul <2 x double> %53, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %55 = fadd <2 x double> %49, %54
  %56 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %55) #6
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %58 = sitofp <2 x i32> %57 to <2 x double>
  %59 = fsub <2 x double> %55, %58
  %60 = bitcast <2 x double> %49 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 9223372036854775807, i64 9223372036854775807>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fcmp oge <2 x double> %62, <double 0x4330000000000000, double 0x4330000000000000>
  %64 = fsub <2 x double> %49, %59
  %65 = select <2 x i1> %63, <2 x double> %49, <2 x double> %64
  %66 = bitcast <2 x double> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -2, i64 -2>
  %68 = fcmp olt <2 x double> %43, %33
  %69 = fcmp oge <2 x double> %43, %23
  %70 = and <2 x i1> %69, %68
  %71 = select <2 x i1> %70, <2 x i64> <i64 4611686018427387904, i64 4611686018427387904>, <2 x i64> %67
  %72 = fcmp olt <2 x double> %43, %34
  %73 = and <2 x i1> %69, %72
  %74 = select <2 x i1> %73, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %71
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = and <2 x i64> %74, <i64 -134217728, i64 -134217728>
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fsub <2 x double> %75, %77
  %79 = fmul <2 x double> %36, %75
  %80 = fmul <2 x double> %38, %77
  %81 = bitcast <2 x double> %79 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %78, %38
  %85 = fmul <2 x double> %39, %77
  %86 = fmul <2 x double> %39, %78
  %87 = fadd <2 x double> %80, %83
  %88 = fadd <2 x double> %84, %87
  %89 = fadd <2 x double> %85, %88
  %90 = fadd <2 x double> %86, %89
  %91 = fadd <2 x double> %43, %79
  %92 = fsub <2 x double> %91, %43
  %93 = fsub <2 x double> %91, %92
  %94 = fsub <2 x double> %43, %93
  %95 = fsub <2 x double> %79, %92
  %96 = fadd <2 x double> %95, %94
  %97 = fadd <2 x double> %42, %90
  %98 = fadd <2 x double> %96, %97
  %99 = fadd <2 x double> %91, %98
  %100 = fsub <2 x double> %91, %99
  %101 = fadd <2 x double> %98, %100
  %102 = fcmp olt <2 x double> %99, %23
  %103 = sext <2 x i1> %102 to <2 x i64>
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %104) #6
  %106 = icmp ne i32 %105, 65535
  %107 = add nuw nsw i32 %41, 1
  %108 = icmp ult i32 %107, 21
  %109 = and i1 %106, %108
  br i1 %109, label %40, label %110

; <label>:110:                                    ; preds = %40
  %111 = bitcast <2 x i64> %26 to <2 x double>
  %112 = fmul <2 x double> %99, %111
  %113 = fadd <2 x double> %99, %101
  %114 = fcmp une <2 x double> %113, %23
  %115 = bitcast <2 x double> %112 to <2 x i64>
  %116 = select <2 x i1> %114, <2 x i64> %115, <2 x i64> zeroinitializer
  %117 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %118 = xor <2 x i64> %116, %117
  %119 = fcmp olt <2 x double> %17, %23
  %120 = select <2 x i1> %119, <2 x i64> %3, <2 x i64> %118
  %121 = fcmp oeq <2 x double> %23, zeroinitializer
  %122 = bitcast <2 x i64> %120 to <2 x double>
  %123 = select <2 x i1> %121, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %122
  ret <2 x double> %123
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_remainderd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x20000000000000, double 0x20000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = and <2 x i64> %4, %14
  %16 = or <2 x i64> %15, %13
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, %10
  %21 = and <2 x i64> %7, %14
  %22 = or <2 x i64> %21, %20
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = and <2 x i64> %10, <i64 4363988038922010624, i64 4363988038922010624>
  %25 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %26 = or <2 x i64> %25, %24
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %23
  %29 = fmul <2 x double> %23, <double 1.500000e+00, double 1.500000e+00>
  %30 = fmul <2 x double> %23, <double 5.000000e-01, double 5.000000e-01>
  %31 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = fsub <2 x double> %32, %34
  br label %36

; <label>:36:                                     ; preds = %2, %71
  %37 = phi i32 [ 0, %2 ], [ %127, %71 ]
  %38 = phi <2 x i64> [ zeroinitializer, %2 ], [ %100, %71 ]
  %39 = phi <2 x double> [ zeroinitializer, %2 ], [ %126, %71 ]
  %40 = phi <2 x double> [ %17, %2 ], [ %124, %71 ]
  %41 = fmul <2 x double> %28, %40
  %42 = bitcast <2 x double> %41 to <2 x i64>
  %43 = and <2 x i64> %42, <i64 -9223372036854775808, i64 -9223372036854775808>
  %44 = or <2 x i64> %43, <i64 4841369599423283200, i64 4841369599423283200>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = and <2 x i64> %42, <i64 9223372036854775807, i64 9223372036854775807>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fcmp ogt <2 x double> %47, <double 0x4330000000000000, double 0x4330000000000000>
  %49 = fadd <2 x double> %41, %45
  %50 = fsub <2 x double> %49, %45
  %51 = bitcast <2 x double> %50 to <2 x i64>
  %52 = or <2 x i64> %43, %51
  %53 = select <2 x i1> %48, <2 x i64> %42, <2 x i64> %52
  %54 = and <2 x i64> %53, <i64 -2, i64 -2>
  %55 = bitcast <2 x double> %40 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 9223372036854775807, i64 9223372036854775807>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fcmp ogt <2 x double> %29, %57
  %59 = select <2 x i1> %58, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %54
  %60 = fcmp ogt <2 x double> %30, %57
  %61 = fcmp oeq <2 x double> %30, %57
  %62 = select <2 x i1> %61, <2 x i64> %38, <2 x i64> <i64 -1, i64 -1>
  %63 = select <2 x i1> %60, <2 x i64> zeroinitializer, <2 x i64> %62
  %64 = and <2 x i64> %59, %63
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fcmp oeq <2 x double> %65, zeroinitializer
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %68) #6
  %70 = icmp eq i32 %69, 65535
  br i1 %70, label %129, label %71

; <label>:71:                                     ; preds = %36
  %72 = fmul <2 x double> %32, %65
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 9223372036854775807, i64 9223372036854775807>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fcmp oeq <2 x double> %75, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %77 = and <2 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808>
  %78 = xor <2 x i64> %77, <i64 -4616189618054758400, i64 -4616189618054758400>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = fadd <2 x double> %79, %65
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = select <2 x i1> %76, <2 x i64> %81, <2 x i64> %64
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %83, <double 0x3E00000000000000, double 0x3E00000000000000>
  %85 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %84) #6
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %87 = sitofp <2 x i32> %86 to <2 x double>
  %88 = fmul <2 x double> %87, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %89 = fadd <2 x double> %88, %83
  %90 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %89) #6
  %91 = and <4 x i32> %90, <i32 1, i32 1, i32 0, i32 0>
  %92 = icmp eq <4 x i32> %91, <i32 1, i32 1, i32 0, i32 0>
  %93 = sext <4 x i1> %92 to <4 x i32>
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = and <2 x i64> %82, <i64 9223372036854775807, i64 9223372036854775807>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fcmp olt <2 x double> %97, <double 0x4340000000000000, double 0x4340000000000000>
  %99 = select <2 x i1> %98, <2 x i64> %95, <2 x i64> zeroinitializer
  %100 = xor <2 x i64> %99, %38
  %101 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fsub <2 x double> %83, %102
  %104 = fmul <2 x double> %32, %83
  %105 = fmul <2 x double> %34, %102
  %106 = bitcast <2 x double> %104 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fmul <2 x double> %103, %34
  %110 = fmul <2 x double> %35, %102
  %111 = fmul <2 x double> %35, %103
  %112 = fadd <2 x double> %105, %108
  %113 = fadd <2 x double> %109, %112
  %114 = fadd <2 x double> %110, %113
  %115 = fadd <2 x double> %111, %114
  %116 = fadd <2 x double> %40, %104
  %117 = fsub <2 x double> %116, %40
  %118 = fsub <2 x double> %116, %117
  %119 = fsub <2 x double> %40, %118
  %120 = fsub <2 x double> %104, %117
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %39, %115
  %123 = fadd <2 x double> %121, %122
  %124 = fadd <2 x double> %116, %123
  %125 = fsub <2 x double> %116, %124
  %126 = fadd <2 x double> %123, %125
  %127 = add nuw nsw i32 %37, 1
  %128 = icmp ult i32 %127, 21
  br i1 %128, label %36, label %129

; <label>:129:                                    ; preds = %36, %71
  %130 = phi <2 x double> [ %40, %36 ], [ %124, %71 ]
  %131 = fmul <2 x double> %130, %27
  %132 = bitcast <2 x double> %131 to <2 x i64>
  %133 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = xor <2 x i64> %133, %132
  %135 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %136 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %137 = select <2 x i1> %136, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %138 = select <2 x i1> %135, <2 x i64> %137, <2 x i64> %134
  %139 = fcmp oeq <2 x double> %23, zeroinitializer
  %140 = bitcast <2 x i64> %138 to <2 x double>
  %141 = select <2 x i1> %139, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %140
  ret <2 x double> %141
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_tgammad2_u10sse2(<2 x double>) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <2 x double>, <2 x double>* %4, align 16
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <2 x double>, <2 x double>* %6, align 16
  %8 = fadd <2 x double> %5, %7
  %9 = fmul <2 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %12 = sitofp <2 x i32> %11 to <2 x double>
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = fmul <2 x double> %12, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %15 = fadd <2 x double> %5, %14
  %16 = fsub <2 x double> %15, %5
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %5, %17
  %19 = fsub <2 x double> %14, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fadd <2 x double> %7, %20
  %22 = fmul <2 x double> %12, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %23 = fadd <2 x double> %22, %15
  %24 = fsub <2 x double> %23, %15
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> %15, %25
  %27 = fsub <2 x double> %22, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %28, %21
  %30 = bitcast <2 x double> %23 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 -134217728, i64 -134217728>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = fsub <2 x double> %23, %32
  %34 = fmul <2 x double> %23, %23
  %35 = fmul <2 x double> %32, %32
  %36 = bitcast <2 x double> %34 to <2 x i64>
  %37 = xor <2 x i64> %36, <i64 -9223372036854775808, i64 -9223372036854775808>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fadd <2 x double> %32, %32
  %40 = fmul <2 x double> %39, %33
  %41 = fmul <2 x double> %33, %33
  %42 = fadd <2 x double> %29, %29
  %43 = fmul <2 x double> %23, %42
  %44 = fadd <2 x double> %35, %38
  %45 = fadd <2 x double> %44, %40
  %46 = fadd <2 x double> %41, %45
  %47 = fadd <2 x double> %43, %46
  %48 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fsub <2 x double> %34, %49
  %51 = fmul <2 x double> %34, %34
  %52 = fmul <2 x double> %49, %49
  %53 = bitcast <2 x double> %51 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372036854775808, i64 -9223372036854775808>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fadd <2 x double> %49, %49
  %57 = fmul <2 x double> %56, %50
  %58 = fmul <2 x double> %50, %50
  %59 = fadd <2 x double> %47, %47
  %60 = fmul <2 x double> %34, %59
  %61 = fadd <2 x double> %52, %55
  %62 = fadd <2 x double> %61, %57
  %63 = fadd <2 x double> %58, %62
  %64 = fadd <2 x double> %63, %60
  %65 = fmul <2 x double> %51, %51
  %66 = fmul <2 x double> %23, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %67 = fadd <2 x double> %66, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %68 = fmul <2 x double> %23, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %69 = fadd <2 x double> %68, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %70 = fmul <2 x double> %23, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %71 = fadd <2 x double> %70, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %72 = fmul <2 x double> %34, %69
  %73 = fadd <2 x double> %71, %72
  %74 = fmul <2 x double> %23, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %75 = fadd <2 x double> %74, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %76 = fmul <2 x double> %23, <double 0x3F81111111111119, double 0x3F81111111111119>
  %77 = fadd <2 x double> %76, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %78 = fmul <2 x double> %34, %75
  %79 = fadd <2 x double> %77, %78
  %80 = fmul <2 x double> %51, %73
  %81 = fadd <2 x double> %79, %80
  %82 = fmul <2 x double> %67, %65
  %83 = fadd <2 x double> %82, %81
  %84 = fmul <2 x double> %23, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %85 = fmul <2 x double> %32, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %86 = bitcast <2 x double> %84 to <2 x i64>
  %87 = xor <2 x i64> %86, <i64 -9223372036854775808, i64 -9223372036854775808>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fmul <2 x double> %33, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %90 = fmul <2 x double> %32, <double 0x3E25555554000000, double 0x3E25555554000000>
  %91 = fmul <2 x double> %33, <double 0x3E25555554000000, double 0x3E25555554000000>
  %92 = fmul <2 x double> %29, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %93 = fadd <2 x double> %85, %88
  %94 = fadd <2 x double> %89, %93
  %95 = fadd <2 x double> %90, %94
  %96 = fadd <2 x double> %91, %95
  %97 = fadd <2 x double> %92, %96
  %98 = fadd <2 x double> %84, <double 5.000000e-01, double 5.000000e-01>
  %99 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %98
  %100 = fadd <2 x double> %84, %99
  %101 = fadd <2 x double> %100, %97
  %102 = bitcast <2 x double> %98 to <2 x i64>
  %103 = and <2 x i64> %102, <i64 -134217728, i64 -134217728>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fsub <2 x double> %98, %104
  %106 = fmul <2 x double> %23, %98
  %107 = fmul <2 x double> %32, %104
  %108 = bitcast <2 x double> %106 to <2 x i64>
  %109 = xor <2 x i64> %108, <i64 -9223372036854775808, i64 -9223372036854775808>
  %110 = bitcast <2 x i64> %109 to <2 x double>
  %111 = fmul <2 x double> %105, %32
  %112 = fmul <2 x double> %33, %104
  %113 = fmul <2 x double> %33, %105
  %114 = fmul <2 x double> %98, %29
  %115 = fmul <2 x double> %23, %101
  %116 = fadd <2 x double> %107, %110
  %117 = fadd <2 x double> %111, %116
  %118 = fadd <2 x double> %112, %117
  %119 = fadd <2 x double> %113, %118
  %120 = fadd <2 x double> %114, %119
  %121 = fadd <2 x double> %115, %120
  %122 = fadd <2 x double> %106, <double 1.000000e+00, double 1.000000e+00>
  %123 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %122
  %124 = fadd <2 x double> %106, %123
  %125 = fadd <2 x double> %124, %121
  %126 = bitcast <2 x double> %122 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -134217728, i64 -134217728>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fsub <2 x double> %122, %128
  %130 = fmul <2 x double> %23, %122
  %131 = fmul <2 x double> %32, %128
  %132 = bitcast <2 x double> %130 to <2 x i64>
  %133 = xor <2 x i64> %132, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fmul <2 x double> %129, %32
  %136 = fmul <2 x double> %33, %128
  %137 = fmul <2 x double> %33, %129
  %138 = fmul <2 x double> %122, %29
  %139 = fmul <2 x double> %23, %125
  %140 = fadd <2 x double> %131, %134
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %136, %141
  %143 = fadd <2 x double> %137, %142
  %144 = fadd <2 x double> %138, %143
  %145 = fadd <2 x double> %144, %139
  %146 = fadd <2 x double> %130, <double 1.000000e+00, double 1.000000e+00>
  %147 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %146
  %148 = fadd <2 x double> %130, %147
  %149 = fadd <2 x double> %148, %145
  %150 = and <2 x i64> %53, <i64 -134217728, i64 -134217728>
  %151 = bitcast <2 x i64> %150 to <2 x double>
  %152 = fsub <2 x double> %51, %151
  %153 = bitcast <2 x double> %83 to <2 x i64>
  %154 = and <2 x i64> %153, <i64 -134217728, i64 -134217728>
  %155 = bitcast <2 x i64> %154 to <2 x double>
  %156 = fsub <2 x double> %83, %155
  %157 = fmul <2 x double> %51, %83
  %158 = fmul <2 x double> %151, %155
  %159 = bitcast <2 x double> %157 to <2 x i64>
  %160 = xor <2 x i64> %159, <i64 -9223372036854775808, i64 -9223372036854775808>
  %161 = bitcast <2 x i64> %160 to <2 x double>
  %162 = fmul <2 x double> %152, %155
  %163 = fmul <2 x double> %156, %151
  %164 = fmul <2 x double> %152, %156
  %165 = fmul <2 x double> %83, %64
  %166 = fadd <2 x double> %158, %161
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %163, %167
  %169 = fadd <2 x double> %164, %168
  %170 = fadd <2 x double> %165, %169
  %171 = fadd <2 x double> %146, %157
  %172 = fsub <2 x double> %146, %171
  %173 = fadd <2 x double> %157, %172
  %174 = fadd <2 x double> %173, %149
  %175 = fadd <2 x double> %170, %174
  %176 = ashr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  %177 = add <4 x i32> %176, <i32 1023, i32 1023, i32 undef, i32 0>
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %179 = and <4 x i32> %178, <i32 0, i32 -1, i32 0, i32 -1>
  %180 = shl <4 x i32> %179, <i32 20, i32 20, i32 20, i32 20>
  %181 = bitcast <4 x i32> %180 to <2 x double>
  %182 = fmul <2 x double> %171, %181
  %183 = add <4 x i32> %13, <i32 1023, i32 1023, i32 undef, i32 0>
  %184 = sub <4 x i32> %183, %176
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %186 = and <4 x i32> %185, <i32 0, i32 -1, i32 0, i32 -1>
  %187 = shl <4 x i32> %186, <i32 20, i32 20, i32 20, i32 20>
  %188 = bitcast <4 x i32> %187 to <2 x double>
  %189 = fmul <2 x double> %182, %188
  %190 = fmul <2 x double> %175, %181
  %191 = fmul <2 x double> %190, %188
  %192 = fcmp uge <2 x double> %5, <double -1.000000e+03, double -1.000000e+03>
  %193 = bitcast <2 x double> %189 to <2 x i64>
  %194 = sext <2 x i1> %192 to <2 x i64>
  %195 = and <2 x i64> %193, %194
  %196 = bitcast <2 x double> %191 to <2 x i64>
  %197 = and <2 x i64> %196, %194
  %198 = bitcast <2 x i64> %195 to <2 x double>
  %199 = bitcast <2 x i64> %197 to <2 x double>
  %200 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %201 = load <2 x double>, <2 x double>* %200, align 16
  %202 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %203 = load <2 x double>, <2 x double>* %202, align 16
  %204 = and <2 x i64> %195, <i64 -134217728, i64 -134217728>
  %205 = bitcast <2 x i64> %204 to <2 x double>
  %206 = fsub <2 x double> %198, %205
  %207 = bitcast <2 x double> %201 to <2 x i64>
  %208 = and <2 x i64> %207, <i64 -134217728, i64 -134217728>
  %209 = bitcast <2 x i64> %208 to <2 x double>
  %210 = fsub <2 x double> %201, %209
  %211 = fmul <2 x double> %201, %198
  %212 = fmul <2 x double> %209, %205
  %213 = bitcast <2 x double> %211 to <2 x i64>
  %214 = xor <2 x i64> %213, <i64 -9223372036854775808, i64 -9223372036854775808>
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = fmul <2 x double> %206, %209
  %217 = fmul <2 x double> %210, %205
  %218 = fmul <2 x double> %210, %206
  %219 = fmul <2 x double> %203, %198
  %220 = fmul <2 x double> %201, %199
  %221 = fadd <2 x double> %212, %215
  %222 = fadd <2 x double> %216, %221
  %223 = fadd <2 x double> %217, %222
  %224 = fadd <2 x double> %218, %223
  %225 = fadd <2 x double> %219, %224
  %226 = fadd <2 x double> %225, %220
  %227 = fadd <2 x double> %211, %226
  %228 = fcmp oeq <2 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000>
  %229 = fcmp olt <2 x double> %0, zeroinitializer
  %230 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %231 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %230) #6
  %232 = shufflevector <4 x i32> %231, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %233 = sitofp <2 x i32> %232 to <2 x double>
  %234 = fmul <2 x double> %233, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %235 = fadd <2 x double> %234, %0
  %236 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %235) #6
  %237 = shufflevector <4 x i32> %236, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %238 = sitofp <2 x i32> %237 to <2 x double>
  %239 = fcmp oeq <2 x double> %235, %238
  %240 = bitcast <2 x double> %0 to <2 x i64>
  %241 = and <2 x i64> %240, <i64 9223372036854775807, i64 9223372036854775807>
  %242 = bitcast <2 x i64> %241 to <2 x double>
  %243 = fcmp ogt <2 x double> %242, <double 0x4340000000000000, double 0x4340000000000000>
  %244 = or <2 x i1> %239, %243
  %245 = and <2 x i1> %244, %229
  %246 = or <2 x i1> %245, %228
  %247 = fcmp une <2 x double> %242, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %248 = fcmp ord <2 x double> %0, zeroinitializer
  %249 = and <2 x i1> %247, %248
  %250 = and <2 x i1> %249, %229
  %251 = fcmp uno <2 x double> %227, zeroinitializer
  %252 = and <2 x i1> %250, %251
  %253 = or <2 x i1> %246, %252
  %254 = bitcast <2 x double> %227 to <2 x i64>
  %255 = select <2 x i1> %253, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %254
  %256 = bitcast <2 x i64> %255 to <2 x double>
  %257 = fcmp oeq <2 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %258 = or <2 x i1> %249, %257
  %259 = fcmp oge <2 x double> %0, <double 0x8010000000000000, double 0x8010000000000000>
  %260 = and <2 x i1> %258, %259
  %261 = fcmp oeq <2 x double> %0, zeroinitializer
  %262 = fcmp ogt <2 x double> %0, <double 2.000000e+02, double 2.000000e+02>
  %263 = or <2 x i1> %262, %261
  %264 = fcmp uno <2 x double> %256, zeroinitializer
  %265 = or <2 x i1> %263, %264
  %266 = and <2 x i1> %260, %265
  %267 = and <2 x i64> %240, <i64 -9223372036854775808, i64 -9223372036854775808>
  %268 = or <2 x i64> %267, <i64 9218868437227405312, i64 9218868437227405312>
  %269 = select <2 x i1> %266, <2 x i64> %268, <2 x i64> %255
  %270 = bitcast <2 x i64> %269 to <2 x double>
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <2 x double> %270
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, <2 x double>) unnamed_addr #3 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.000000e-306, double 1.000000e-306>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fcmp olt <2 x double> %1, <double 5.000000e-01, double 5.000000e-01>
  %9 = sext <2 x i1> %8 to <2 x i64>
  %10 = xor <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %11 = bitcast <2 x i64> %10 to <2 x double>
  %12 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %13 = fadd <2 x double> %12, <double -1.000000e+00, double -1.000000e+00>
  %14 = fsub <2 x double> %12, %13
  %15 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %14
  %16 = fsub <2 x double> %11, %13
  %17 = fadd <2 x double> %16, %15
  %18 = bitcast <2 x double> %12 to <2 x i64>
  %19 = and <2 x i64> %18, %9
  %20 = xor <2 x i64> %9, <i64 -1, i64 -1>
  %21 = and <2 x i64> %20, %3
  %22 = or <2 x i64> %19, %21
  %23 = bitcast <2 x double> %17 to <2 x i64>
  %24 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %25 = and <2 x i64> %22, %24
  %26 = and <2 x i64> %24, %9
  %27 = and <2 x i64> %26, %23
  %28 = bitcast <2 x i64> %25 to <2 x double>
  %29 = fcmp oge <2 x double> %28, <double 5.000000e-01, double 5.000000e-01>
  %30 = fcmp ole <2 x double> %28, <double 1.100000e+00, double 1.100000e+00>
  %31 = and <2 x i1> %30, %29
  %32 = sext <2 x i1> %31 to <2 x i64>
  %33 = fcmp oge <2 x double> %28, <double 2.300000e+00, double 2.300000e+00>
  %34 = sext <2 x i1> %33 to <2 x i64>
  %35 = bitcast <2 x i64> %27 to <2 x double>
  %36 = fadd <2 x double> %28, <double 1.000000e+00, double 1.000000e+00>
  %37 = fsub <2 x double> %36, %28
  %38 = fsub <2 x double> %36, %37
  %39 = fsub <2 x double> %28, %38
  %40 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %37
  %41 = fadd <2 x double> %40, %39
  %42 = fadd <2 x double> %41, %35
  %43 = bitcast <2 x double> %36 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 -134217728, i64 -134217728>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fsub <2 x double> %36, %45
  %47 = and <2 x i64> %25, <i64 -134217728, i64 -134217728>
  %48 = bitcast <2 x i64> %47 to <2 x double>
  %49 = fsub <2 x double> %28, %48
  %50 = fmul <2 x double> %36, %28
  %51 = fmul <2 x double> %48, %45
  %52 = bitcast <2 x double> %50 to <2 x i64>
  %53 = xor <2 x i64> %52, <i64 -9223372036854775808, i64 -9223372036854775808>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = fmul <2 x double> %46, %48
  %56 = fmul <2 x double> %49, %45
  %57 = fmul <2 x double> %49, %46
  %58 = fmul <2 x double> %36, %35
  %59 = fmul <2 x double> %42, %28
  %60 = fadd <2 x double> %51, %54
  %61 = fadd <2 x double> %55, %60
  %62 = fadd <2 x double> %56, %61
  %63 = fadd <2 x double> %57, %62
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %59, %64
  %66 = fadd <2 x double> %50, %65
  %67 = fsub <2 x double> %50, %66
  %68 = fadd <2 x double> %65, %67
  %69 = fadd <2 x double> %28, <double 2.000000e+00, double 2.000000e+00>
  %70 = fsub <2 x double> %69, %28
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %28, %71
  %73 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %74, %35
  %76 = bitcast <2 x double> %69 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -134217728, i64 -134217728>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = fsub <2 x double> %69, %78
  %80 = bitcast <2 x double> %66 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 -134217728, i64 -134217728>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fsub <2 x double> %66, %82
  %84 = fmul <2 x double> %69, %66
  %85 = fmul <2 x double> %78, %82
  %86 = bitcast <2 x double> %84 to <2 x i64>
  %87 = xor <2 x i64> %86, <i64 -9223372036854775808, i64 -9223372036854775808>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fmul <2 x double> %79, %82
  %90 = fmul <2 x double> %83, %78
  %91 = fmul <2 x double> %79, %83
  %92 = fmul <2 x double> %69, %68
  %93 = fmul <2 x double> %75, %66
  %94 = fadd <2 x double> %85, %88
  %95 = fadd <2 x double> %89, %94
  %96 = fadd <2 x double> %90, %95
  %97 = fadd <2 x double> %91, %96
  %98 = fadd <2 x double> %92, %97
  %99 = fadd <2 x double> %93, %98
  %100 = fadd <2 x double> %84, %99
  %101 = fsub <2 x double> %84, %100
  %102 = fadd <2 x double> %99, %101
  %103 = fadd <2 x double> %28, <double 3.000000e+00, double 3.000000e+00>
  %104 = fsub <2 x double> %103, %28
  %105 = fsub <2 x double> %103, %104
  %106 = fsub <2 x double> %28, %105
  %107 = fsub <2 x double> <double 3.000000e+00, double 3.000000e+00>, %104
  %108 = fadd <2 x double> %107, %106
  %109 = fadd <2 x double> %108, %35
  %110 = bitcast <2 x double> %103 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 -134217728, i64 -134217728>
  %112 = bitcast <2 x i64> %111 to <2 x double>
  %113 = fsub <2 x double> %103, %112
  %114 = bitcast <2 x double> %100 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 -134217728, i64 -134217728>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = fsub <2 x double> %100, %116
  %118 = fmul <2 x double> %103, %100
  %119 = fmul <2 x double> %112, %116
  %120 = bitcast <2 x double> %118 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372036854775808, i64 -9223372036854775808>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %113, %116
  %124 = fmul <2 x double> %117, %112
  %125 = fmul <2 x double> %113, %117
  %126 = fmul <2 x double> %103, %102
  %127 = fmul <2 x double> %109, %100
  %128 = fadd <2 x double> %119, %122
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %124, %129
  %131 = fadd <2 x double> %125, %130
  %132 = fadd <2 x double> %126, %131
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %118, %133
  %135 = fsub <2 x double> %118, %134
  %136 = fadd <2 x double> %133, %135
  %137 = fadd <2 x double> %28, <double 4.000000e+00, double 4.000000e+00>
  %138 = fsub <2 x double> %137, %28
  %139 = fsub <2 x double> %137, %138
  %140 = fsub <2 x double> %28, %139
  %141 = fsub <2 x double> <double 4.000000e+00, double 4.000000e+00>, %138
  %142 = fadd <2 x double> %141, %140
  %143 = fadd <2 x double> %142, %35
  %144 = bitcast <2 x double> %137 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %137, %146
  %148 = bitcast <2 x double> %134 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %134, %150
  %152 = fmul <2 x double> %137, %134
  %153 = fmul <2 x double> %146, %150
  %154 = bitcast <2 x double> %152 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = bitcast <2 x i64> %155 to <2 x double>
  %157 = fmul <2 x double> %147, %150
  %158 = fmul <2 x double> %151, %146
  %159 = fmul <2 x double> %147, %151
  %160 = fmul <2 x double> %137, %136
  %161 = fmul <2 x double> %143, %134
  %162 = fadd <2 x double> %153, %156
  %163 = fadd <2 x double> %157, %162
  %164 = fadd <2 x double> %158, %163
  %165 = fadd <2 x double> %159, %164
  %166 = fadd <2 x double> %160, %165
  %167 = fadd <2 x double> %161, %166
  %168 = fadd <2 x double> %152, %167
  %169 = fsub <2 x double> %152, %168
  %170 = fadd <2 x double> %167, %169
  %171 = fcmp ole <2 x double> %28, <double 7.000000e+00, double 7.000000e+00>
  %172 = and <2 x i1> %171, %33
  %173 = sext <2 x i1> %172 to <2 x i64>
  %174 = bitcast <2 x double> %168 to <2 x i64>
  %175 = and <2 x i64> %174, %173
  %176 = xor <2 x i64> %173, <i64 -1, i64 -1>
  %177 = and <2 x i64> %176, <i64 4607182418800017408, i64 4607182418800017408>
  %178 = or <2 x i64> %175, %177
  %179 = bitcast <2 x double> %170 to <2 x i64>
  %180 = and <2 x i64> %179, %173
  %181 = fadd <2 x double> %28, <double 5.000000e+00, double 5.000000e+00>
  %182 = fsub <2 x double> %181, %28
  %183 = fsub <2 x double> %181, %182
  %184 = fsub <2 x double> %28, %183
  %185 = fsub <2 x double> <double 5.000000e+00, double 5.000000e+00>, %182
  %186 = fadd <2 x double> %185, %184
  %187 = fadd <2 x double> %186, %35
  %188 = bitcast <2 x double> %181 to <2 x i64>
  %189 = and <2 x i64> %173, %188
  %190 = and <2 x i64> %25, %176
  %191 = or <2 x i64> %190, %189
  %192 = bitcast <2 x double> %187 to <2 x i64>
  %193 = and <2 x i64> %192, %173
  %194 = and <2 x i64> %27, %176
  %195 = or <2 x i64> %193, %194
  %196 = bitcast <2 x i64> %191 to <2 x double>
  %197 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %196
  %198 = and <2 x i64> %32, <i64 -4616189618054758400, i64 -4616189618054758400>
  %199 = xor <2 x i64> %32, <i64 -1, i64 -1>
  %200 = and <2 x i64> %199, <i64 -4611686018427387904, i64 -4611686018427387904>
  %201 = or <2 x i64> %200, %198
  %202 = bitcast <2 x i64> %201 to <2 x double>
  %203 = bitcast <2 x i64> %195 to <2 x double>
  %204 = fadd <2 x double> %196, %202
  %205 = fsub <2 x double> %204, %196
  %206 = fsub <2 x double> %204, %205
  %207 = fsub <2 x double> %196, %206
  %208 = fsub <2 x double> %202, %205
  %209 = fadd <2 x double> %208, %207
  %210 = fadd <2 x double> %209, %203
  %211 = fadd <2 x double> %204, %210
  %212 = bitcast <2 x double> %197 to <2 x i64>
  %213 = and <2 x i64> %212, %34
  %214 = xor <2 x i64> %34, <i64 -1, i64 -1>
  %215 = bitcast <2 x double> %211 to <2 x i64>
  %216 = and <2 x i64> %215, %214
  %217 = or <2 x i64> %216, %213
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = and <2 x i64> %32, <i64 4628990865731894945, i64 4628990865731894945>
  %220 = and <2 x i64> %199, <i64 4499938007948547471, i64 4499938007948547471>
  %221 = or <2 x i64> %220, %219
  %222 = and <2 x i64> %34, <i64 -4583651061041902579, i64 -4583651061041902579>
  %223 = and <2 x i64> %221, %214
  %224 = or <2 x i64> %223, %222
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = and <2 x i64> %32, <i64 4638712752025651385, i64 4638712752025651385>
  %227 = and <2 x i64> %199, <i64 4511172875794430198, i64 4511172875794430198>
  %228 = or <2 x i64> %227, %226
  %229 = and <2 x i64> %34, <i64 4607726473740378146, i64 4607726473740378146>
  %230 = and <2 x i64> %228, %214
  %231 = or <2 x i64> %230, %229
  %232 = bitcast <2 x i64> %231 to <2 x double>
  %233 = fmul <2 x double> %225, %218
  %234 = fadd <2 x double> %233, %232
  %235 = and <2 x i64> %32, <i64 4643312448339715962, i64 4643312448339715962>
  %236 = and <2 x i64> %199, <i64 4517518629147204198, i64 4517518629147204198>
  %237 = or <2 x i64> %236, %235
  %238 = and <2 x i64> %34, <i64 4623732013342670336, i64 4623732013342670336>
  %239 = and <2 x i64> %237, %214
  %240 = or <2 x i64> %239, %238
  %241 = bitcast <2 x i64> %240 to <2 x double>
  %242 = fmul <2 x double> %234, %218
  %243 = fadd <2 x double> %242, %241
  %244 = and <2 x i64> %32, <i64 4644490207952558079, i64 4644490207952558079>
  %245 = and <2 x i64> %199, <i64 4519729804099124960, i64 4519729804099124960>
  %246 = or <2 x i64> %245, %244
  %247 = and <2 x i64> %34, <i64 -4630309571905774700, i64 -4630309571905774700>
  %248 = and <2 x i64> %246, %214
  %249 = or <2 x i64> %248, %247
  %250 = bitcast <2 x i64> %249 to <2 x double>
  %251 = fmul <2 x double> %243, %218
  %252 = fadd <2 x double> %251, %250
  %253 = and <2 x i64> %32, <i64 4643665350832152325, i64 4643665350832152325>
  %254 = and <2 x i64> %199, <i64 4518689910307445488, i64 4518689910307445488>
  %255 = or <2 x i64> %254, %253
  %256 = and <2 x i64> %34, <i64 -4614425102797125273, i64 -4614425102797125273>
  %257 = and <2 x i64> %255, %214
  %258 = or <2 x i64> %257, %256
  %259 = bitcast <2 x i64> %258 to <2 x double>
  %260 = fmul <2 x double> %252, %218
  %261 = fadd <2 x double> %260, %259
  %262 = and <2 x i64> %32, <i64 4640286234873123387, i64 4640286234873123387>
  %263 = and <2 x i64> %199, <i64 4512561106878963199, i64 4512561106878963199>
  %264 = or <2 x i64> %263, %262
  %265 = and <2 x i64> %34, <i64 4579832880030872457, i64 4579832880030872457>
  %266 = and <2 x i64> %264, %214
  %267 = or <2 x i64> %266, %265
  %268 = bitcast <2 x i64> %267 to <2 x double>
  %269 = fmul <2 x double> %261, %218
  %270 = fadd <2 x double> %269, %268
  %271 = and <2 x i64> %32, <i64 4635153104983663610, i64 4635153104983663610>
  %272 = and <2 x i64> %199, <i64 -4723826929566639415, i64 -4723826929566639415>
  %273 = or <2 x i64> %272, %271
  %274 = and <2 x i64> %34, <i64 4595636634724895684, i64 4595636634724895684>
  %275 = and <2 x i64> %273, %214
  %276 = or <2 x i64> %275, %274
  %277 = bitcast <2 x i64> %276 to <2 x double>
  %278 = fmul <2 x double> %270, %218
  %279 = fadd <2 x double> %278, %277
  %280 = and <2 x i64> %32, <i64 4627766280333013118, i64 4627766280333013118>
  %281 = and <2 x i64> %199, <i64 -4713748081893641033, i64 -4713748081893641033>
  %282 = or <2 x i64> %281, %280
  %283 = and <2 x i64> %34, <i64 -4655503103197131491, i64 -4655503103197131491>
  %284 = and <2 x i64> %282, %214
  %285 = or <2 x i64> %284, %283
  %286 = bitcast <2 x i64> %285 to <2 x double>
  %287 = fmul <2 x double> %279, %218
  %288 = fadd <2 x double> %287, %286
  %289 = and <2 x i64> %32, <i64 4618178849122471796, i64 4618178849122471796>
  %290 = and <2 x i64> %199, <i64 4504229745673225844, i64 4504229745673225844>
  %291 = or <2 x i64> %290, %289
  %292 = and <2 x i64> %34, <i64 -4639203983214410053, i64 -4639203983214410053>
  %293 = and <2 x i64> %291, %214
  %294 = or <2 x i64> %293, %292
  %295 = bitcast <2 x i64> %294 to <2 x double>
  %296 = fmul <2 x double> %288, %218
  %297 = fadd <2 x double> %296, %295
  %298 = and <2 x i64> %32, <i64 4604723701528390427, i64 4604723701528390427>
  %299 = and <2 x i64> %199, <i64 -4711566955297425034, i64 -4711566955297425034>
  %300 = or <2 x i64> %299, %298
  %301 = and <2 x i64> %34, <i64 4558121363887046255, i64 4558121363887046255>
  %302 = and <2 x i64> %300, %214
  %303 = or <2 x i64> %302, %301
  %304 = bitcast <2 x i64> %303 to <2 x double>
  %305 = fmul <2 x double> %297, %218
  %306 = fadd <2 x double> %305, %304
  %307 = and <2 x i64> %32, <i64 4590714887236699823, i64 4590714887236699823>
  %308 = and <2 x i64> %199, <i64 4517199226922736710, i64 4517199226922736710>
  %309 = or <2 x i64> %308, %307
  %310 = and <2 x i64> %34, <i64 4574032596866580507, i64 4574032596866580507>
  %311 = and <2 x i64> %309, %214
  %312 = or <2 x i64> %311, %310
  %313 = bitcast <2 x i64> %312 to <2 x double>
  %314 = fmul <2 x double> %306, %218
  %315 = fadd <2 x double> %314, %313
  %316 = and <2 x i64> %32, <i64 -4632790564581178452, i64 -4632790564581178452>
  %317 = and <2 x i64> %199, <i64 -4701452149379134118, i64 -4701452149379134118>
  %318 = or <2 x i64> %317, %316
  %319 = and <2 x i64> %34, <i64 -4673244221023164097, i64 -4673244221023164097>
  %320 = and <2 x i64> %318, %214
  %321 = or <2 x i64> %320, %319
  %322 = bitcast <2 x i64> %321 to <2 x double>
  %323 = fmul <2 x double> %315, %218
  %324 = fadd <2 x double> %323, %322
  %325 = and <2 x i64> %32, <i64 4589585112579564335, i64 4589585112579564335>
  %326 = and <2 x i64> %199, <i64 4526777181759564724, i64 4526777181759564724>
  %327 = or <2 x i64> %326, %325
  %328 = and <2 x i64> %34, <i64 -4656900424698860322, i64 -4656900424698860322>
  %329 = and <2 x i64> %327, %214
  %330 = or <2 x i64> %329, %328
  %331 = bitcast <2 x i64> %330 to <2 x double>
  %332 = fmul <2 x double> %324, %218
  %333 = fadd <2 x double> %332, %331
  %334 = and <2 x i64> %32, <i64 -4633150187697410354, i64 -4633150187697410354>
  %335 = and <2 x i64> %199, <i64 -4691682047663757122, i64 -4691682047663757122>
  %336 = or <2 x i64> %335, %334
  %337 = and <2 x i64> %34, <i64 4544944698862146538, i64 4544944698862146538>
  %338 = and <2 x i64> %336, %214
  %339 = or <2 x i64> %338, %337
  %340 = bitcast <2 x i64> %339 to <2 x double>
  %341 = fmul <2 x double> %333, %218
  %342 = fadd <2 x double> %341, %340
  %343 = and <2 x i64> %32, <i64 4590672216818055370, i64 4590672216818055370>
  %344 = and <2 x i64> %199, <i64 4536673903005821641, i64 4536673903005821641>
  %345 = or <2 x i64> %344, %343
  %346 = and <2 x i64> %34, <i64 4560882232296793744, i64 4560882232296793744>
  %347 = and <2 x i64> %345, %214
  %348 = or <2 x i64> %347, %346
  %349 = bitcast <2 x i64> %348 to <2 x double>
  %350 = fmul <2 x double> %342, %218
  %351 = fadd <2 x double> %350, %349
  %352 = and <2 x i64> %32, <i64 -4632154003283410230, i64 -4632154003283410230>
  %353 = and <2 x i64> %199, <i64 -4681617274913155367, i64 -4681617274913155367>
  %354 = or <2 x i64> %353, %352
  %355 = and <2 x i64> %34, <i64 -4680614995829692655, i64 -4680614995829692655>
  %356 = and <2 x i64> %354, %214
  %357 = or <2 x i64> %356, %355
  %358 = bitcast <2 x i64> %357 to <2 x double>
  %359 = fmul <2 x double> %351, %218
  %360 = fadd <2 x double> %359, %358
  %361 = and <2 x i64> %32, <i64 4591877359262876601, i64 4591877359262876601>
  %362 = and <2 x i64> %199, <i64 4546967093496363901, i64 4546967093496363901>
  %363 = or <2 x i64> %362, %361
  %364 = and <2 x i64> %34, <i64 -4664771042223752376, i64 -4664771042223752376>
  %365 = and <2 x i64> %363, %214
  %366 = or <2 x i64> %365, %364
  %367 = bitcast <2 x i64> %366 to <2 x double>
  %368 = fmul <2 x double> %360, %218
  %369 = fadd <2 x double> %368, %367
  %370 = and <2 x i64> %32, <i64 -4630685135397393127, i64 -4630685135397393127>
  %371 = and <2 x i64> %199, <i64 -4671007055348405473, i64 -4671007055348405473>
  %372 = or <2 x i64> %371, %370
  %373 = and <2 x i64> %34, <i64 4544773452824428600, i64 4544773452824428600>
  %374 = and <2 x i64> %372, %214
  %375 = or <2 x i64> %374, %373
  %376 = bitcast <2 x i64> %375 to <2 x double>
  %377 = fmul <2 x double> %369, %218
  %378 = fadd <2 x double> %377, %376
  %379 = and <2 x i64> %32, <i64 4593689982618372312, i64 4593689982618372312>
  %380 = and <2 x i64> %199, <i64 4557840094913820549, i64 4557840094913820549>
  %381 = or <2 x i64> %380, %379
  %382 = and <2 x i64> %34, <i64 4560370708704981700, i64 4560370708704981700>
  %383 = and <2 x i64> %381, %214
  %384 = or <2 x i64> %383, %382
  %385 = bitcast <2 x i64> %384 to <2 x double>
  %386 = fmul <2 x double> %378, %218
  %387 = fadd <2 x double> %386, %385
  %388 = and <2 x i64> %32, <i64 -4629014072072395933, i64 -4629014072072395933>
  %389 = and <2 x i64> %199, <i64 -4660228607417970486, i64 -4660228607417970486>
  %390 = or <2 x i64> %389, %388
  %391 = and <2 x i64> %34, <i64 -4670773986871760807, i64 -4670773986871760807>
  %392 = and <2 x i64> %390, %214
  %393 = or <2 x i64> %392, %391
  %394 = bitcast <2 x i64> %393 to <2 x double>
  %395 = fmul <2 x double> %387, %218
  %396 = fadd <2 x double> %395, %394
  %397 = and <2 x i64> %32, <i64 4595276961403928110, i64 4595276961403928110>
  %398 = and <2 x i64> %199, <i64 4568811485565514336, i64 4568811485565514336>
  %399 = or <2 x i64> %398, %397
  %400 = and <2 x i64> %34, <i64 -4655042894840023864, i64 -4655042894840023864>
  %401 = and <2 x i64> %399, %214
  %402 = or <2 x i64> %401, %400
  %403 = bitcast <2 x i64> %402 to <2 x double>
  %404 = fmul <2 x double> %396, %218
  %405 = fadd <2 x double> %404, %403
  %406 = and <2 x i64> %32, <i64 -4626732164641571832, i64 -4626732164641571832>
  %407 = and <2 x i64> %199, <i64 -4648207054096762857, i64 -4648207054096762857>
  %408 = or <2 x i64> %407, %406
  %409 = and <2 x i64> %34, <i64 4570152821863859996, i64 4570152821863859996>
  %410 = and <2 x i64> %408, %214
  %411 = or <2 x i64> %410, %409
  %412 = bitcast <2 x i64> %411 to <2 x double>
  %413 = fmul <2 x double> %405, %218
  %414 = fadd <2 x double> %413, %412
  %415 = and <2 x i64> %32, <i64 4598545970429941779, i64 4598545970429941779>
  %416 = and <2 x i64> %199, <i64 4581589235563070597, i64 4581589235563070597>
  %417 = or <2 x i64> %416, %415
  %418 = and <2 x i64> %34, <i64 4590669220166325589, i64 4590669220166325589>
  %419 = and <2 x i64> %417, %214
  %420 = or <2 x i64> %419, %418
  %421 = bitcast <2 x i64> %420 to <2 x double>
  %422 = fmul <2 x double> %414, %218
  %423 = fadd <2 x double> %422, %421
  %424 = fadd <2 x double> %196, <double -5.000000e-01, double -5.000000e-01>
  %425 = fsub <2 x double> %424, %196
  %426 = fsub <2 x double> %424, %425
  %427 = fsub <2 x double> %196, %426
  %428 = fsub <2 x double> <double -5.000000e-01, double -5.000000e-01>, %425
  %429 = fadd <2 x double> %428, %427
  %430 = fadd <2 x double> %429, %203
  %431 = fmul <2 x double> %196, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %432 = fcmp olt <2 x double> %431, <double 0x2D30000000000000, double 0x2D30000000000000>
  %433 = sext <2 x i1> %432 to <2 x i64>
  %434 = fmul <2 x double> %431, <double 0x52B0000000000000, double 0x52B0000000000000>
  %435 = select <2 x i1> %432, <2 x double> %434, <2 x double> %431
  %436 = bitcast <2 x double> %435 to <4 x i32>
  %437 = shufflevector <4 x i32> %436, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %438 = and <4 x i32> %437, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %439 = lshr exact <4 x i32> %438, <i32 20, i32 20, i32 20, i32 20>
  %440 = bitcast <2 x i64> %433 to <4 x i32>
  %441 = shufflevector <4 x i32> %440, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %442 = bitcast <4 x i32> %441 to <2 x i64>
  %443 = and <2 x i64> %442, <i64 5682241733931, i64 0>
  %444 = xor <2 x i64> %442, <i64 4393751544831, i64 4393751544831>
  %445 = and <2 x i64> %444, <i64 4393751544831, i64 0>
  %446 = or <2 x i64> %445, %443
  %447 = bitcast <2 x i64> %446 to <4 x i32>
  %448 = sub <4 x i32> %439, %447
  %449 = sub <4 x i32> zeroinitializer, %448
  %450 = ashr <4 x i32> %449, <i32 1, i32 1, i32 1, i32 1>
  %451 = add <4 x i32> %450, <i32 1023, i32 1023, i32 undef, i32 0>
  %452 = shufflevector <4 x i32> %451, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %453 = and <4 x i32> %452, <i32 0, i32 -1, i32 0, i32 -1>
  %454 = shl <4 x i32> %453, <i32 20, i32 20, i32 20, i32 20>
  %455 = bitcast <4 x i32> %454 to <2 x double>
  %456 = fmul <2 x double> %196, %455
  %457 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %448
  %458 = sub <4 x i32> %457, %450
  %459 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %460 = and <4 x i32> %459, <i32 0, i32 -1, i32 0, i32 -1>
  %461 = shl <4 x i32> %460, <i32 20, i32 20, i32 20, i32 20>
  %462 = bitcast <4 x i32> %461 to <2 x double>
  %463 = fmul <2 x double> %456, %462
  %464 = fmul <2 x double> %203, %455
  %465 = fmul <2 x double> %464, %462
  %466 = fadd <2 x double> %463, <double -1.000000e+00, double -1.000000e+00>
  %467 = fsub <2 x double> %466, %463
  %468 = fsub <2 x double> %466, %467
  %469 = fsub <2 x double> %463, %468
  %470 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %467
  %471 = fadd <2 x double> %470, %469
  %472 = fadd <2 x double> %465, %471
  %473 = fadd <2 x double> %463, <double 1.000000e+00, double 1.000000e+00>
  %474 = fsub <2 x double> %473, %463
  %475 = fsub <2 x double> %473, %474
  %476 = fsub <2 x double> %463, %475
  %477 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %474
  %478 = fadd <2 x double> %477, %476
  %479 = fadd <2 x double> %465, %478
  %480 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %473
  %481 = bitcast <2 x double> %473 to <2 x i64>
  %482 = and <2 x i64> %481, <i64 -134217728, i64 -134217728>
  %483 = bitcast <2 x i64> %482 to <2 x double>
  %484 = fsub <2 x double> %473, %483
  %485 = bitcast <2 x double> %480 to <2 x i64>
  %486 = and <2 x i64> %485, <i64 -134217728, i64 -134217728>
  %487 = bitcast <2 x i64> %486 to <2 x double>
  %488 = fsub <2 x double> %480, %487
  %489 = bitcast <2 x double> %466 to <2 x i64>
  %490 = and <2 x i64> %489, <i64 -134217728, i64 -134217728>
  %491 = bitcast <2 x i64> %490 to <2 x double>
  %492 = fsub <2 x double> %466, %491
  %493 = fmul <2 x double> %466, %480
  %494 = fmul <2 x double> %491, %487
  %495 = fsub <2 x double> %494, %493
  %496 = fmul <2 x double> %488, %491
  %497 = fmul <2 x double> %492, %487
  %498 = fmul <2 x double> %492, %488
  %499 = fmul <2 x double> %483, %487
  %500 = fmul <2 x double> %488, %483
  %501 = fmul <2 x double> %484, %487
  %502 = fmul <2 x double> %484, %488
  %503 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %499
  %504 = fsub <2 x double> %503, %500
  %505 = fsub <2 x double> %504, %501
  %506 = fsub <2 x double> %505, %502
  %507 = fmul <2 x double> %493, %506
  %508 = fadd <2 x double> %495, %496
  %509 = fadd <2 x double> %497, %508
  %510 = fadd <2 x double> %498, %509
  %511 = fadd <2 x double> %510, %507
  %512 = fmul <2 x double> %493, %479
  %513 = fsub <2 x double> %472, %512
  %514 = fmul <2 x double> %480, %513
  %515 = fadd <2 x double> %514, %511
  %516 = bitcast <2 x double> %493 to <2 x i64>
  %517 = and <2 x i64> %516, <i64 -134217728, i64 -134217728>
  %518 = bitcast <2 x i64> %517 to <2 x double>
  %519 = fsub <2 x double> %493, %518
  %520 = fmul <2 x double> %493, %493
  %521 = fmul <2 x double> %518, %518
  %522 = bitcast <2 x double> %520 to <2 x i64>
  %523 = xor <2 x i64> %522, <i64 -9223372036854775808, i64 -9223372036854775808>
  %524 = bitcast <2 x i64> %523 to <2 x double>
  %525 = fadd <2 x double> %518, %518
  %526 = fmul <2 x double> %525, %519
  %527 = fmul <2 x double> %519, %519
  %528 = fadd <2 x double> %515, %515
  %529 = fmul <2 x double> %493, %528
  %530 = fadd <2 x double> %521, %524
  %531 = fadd <2 x double> %530, %526
  %532 = fadd <2 x double> %527, %531
  %533 = fadd <2 x double> %532, %529
  %534 = fmul <2 x double> %520, %520
  %535 = fmul <2 x double> %534, %534
  %536 = fmul <2 x double> %520, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %537 = fadd <2 x double> %536, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %538 = fmul <2 x double> %534, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %539 = fadd <2 x double> %538, %537
  %540 = fmul <2 x double> %520, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %541 = fadd <2 x double> %540, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %542 = fmul <2 x double> %520, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %543 = fadd <2 x double> %542, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %544 = fmul <2 x double> %534, %541
  %545 = fadd <2 x double> %543, %544
  %546 = fmul <2 x double> %535, %539
  %547 = fadd <2 x double> %546, %545
  %548 = fmul <2 x double> %520, %547
  %549 = fadd <2 x double> %548, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %550 = shufflevector <4 x i32> %448, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %551 = sitofp <2 x i32> %550 to <2 x double>
  %552 = bitcast <2 x double> %551 to <2 x i64>
  %553 = and <2 x i64> %552, <i64 -134217728, i64 -134217728>
  %554 = bitcast <2 x i64> %553 to <2 x double>
  %555 = fsub <2 x double> %551, %554
  %556 = fmul <2 x double> %551, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %557 = fmul <2 x double> %554, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %558 = bitcast <2 x double> %556 to <2 x i64>
  %559 = xor <2 x i64> %558, <i64 -9223372036854775808, i64 -9223372036854775808>
  %560 = bitcast <2 x i64> %559 to <2 x double>
  %561 = fmul <2 x double> %554, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %562 = fmul <2 x double> %555, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %563 = fmul <2 x double> %555, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %564 = fmul <2 x double> %551, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %565 = fadd <2 x double> %557, %560
  %566 = fadd <2 x double> %561, %565
  %567 = fadd <2 x double> %562, %566
  %568 = fadd <2 x double> %563, %567
  %569 = fadd <2 x double> %564, %568
  %570 = fmul <2 x double> %493, <double 2.000000e+00, double 2.000000e+00>
  %571 = fmul <2 x double> %515, <double 2.000000e+00, double 2.000000e+00>
  %572 = fadd <2 x double> %556, %570
  %573 = fsub <2 x double> %556, %572
  %574 = fadd <2 x double> %570, %573
  %575 = fadd <2 x double> %569, %574
  %576 = fadd <2 x double> %575, %571
  %577 = and <2 x i64> %522, <i64 -134217728, i64 -134217728>
  %578 = bitcast <2 x i64> %577 to <2 x double>
  %579 = fsub <2 x double> %520, %578
  %580 = fmul <2 x double> %493, %520
  %581 = fmul <2 x double> %518, %578
  %582 = bitcast <2 x double> %580 to <2 x i64>
  %583 = xor <2 x i64> %582, <i64 -9223372036854775808, i64 -9223372036854775808>
  %584 = bitcast <2 x i64> %583 to <2 x double>
  %585 = fmul <2 x double> %579, %518
  %586 = fmul <2 x double> %519, %578
  %587 = fmul <2 x double> %519, %579
  %588 = fmul <2 x double> %520, %515
  %589 = fmul <2 x double> %493, %533
  %590 = fadd <2 x double> %581, %584
  %591 = fadd <2 x double> %585, %590
  %592 = fadd <2 x double> %586, %591
  %593 = fadd <2 x double> %587, %592
  %594 = fadd <2 x double> %593, %588
  %595 = fadd <2 x double> %594, %589
  %596 = and <2 x i64> %582, <i64 -134217728, i64 -134217728>
  %597 = bitcast <2 x i64> %596 to <2 x double>
  %598 = fsub <2 x double> %580, %597
  %599 = bitcast <2 x double> %549 to <2 x i64>
  %600 = and <2 x i64> %599, <i64 -134217728, i64 -134217728>
  %601 = bitcast <2 x i64> %600 to <2 x double>
  %602 = fsub <2 x double> %549, %601
  %603 = fmul <2 x double> %580, %549
  %604 = fmul <2 x double> %597, %601
  %605 = bitcast <2 x double> %603 to <2 x i64>
  %606 = xor <2 x i64> %605, <i64 -9223372036854775808, i64 -9223372036854775808>
  %607 = bitcast <2 x i64> %606 to <2 x double>
  %608 = fmul <2 x double> %598, %601
  %609 = fmul <2 x double> %602, %597
  %610 = fmul <2 x double> %598, %602
  %611 = fmul <2 x double> %549, %595
  %612 = fadd <2 x double> %604, %607
  %613 = fadd <2 x double> %608, %612
  %614 = fadd <2 x double> %609, %613
  %615 = fadd <2 x double> %610, %614
  %616 = fadd <2 x double> %611, %615
  %617 = fadd <2 x double> %572, %603
  %618 = fsub <2 x double> %572, %617
  %619 = fadd <2 x double> %603, %618
  %620 = fadd <2 x double> %619, %576
  %621 = fadd <2 x double> %620, %616
  %622 = bitcast <2 x double> %424 to <2 x i64>
  %623 = and <2 x i64> %622, <i64 -134217728, i64 -134217728>
  %624 = bitcast <2 x i64> %623 to <2 x double>
  %625 = fsub <2 x double> %424, %624
  %626 = bitcast <2 x double> %617 to <2 x i64>
  %627 = and <2 x i64> %626, <i64 -134217728, i64 -134217728>
  %628 = bitcast <2 x i64> %627 to <2 x double>
  %629 = fsub <2 x double> %617, %628
  %630 = fmul <2 x double> %424, %617
  %631 = fmul <2 x double> %624, %628
  %632 = bitcast <2 x double> %630 to <2 x i64>
  %633 = xor <2 x i64> %632, <i64 -9223372036854775808, i64 -9223372036854775808>
  %634 = bitcast <2 x i64> %633 to <2 x double>
  %635 = fmul <2 x double> %625, %628
  %636 = fmul <2 x double> %629, %624
  %637 = fmul <2 x double> %625, %629
  %638 = fmul <2 x double> %424, %621
  %639 = fmul <2 x double> %430, %617
  %640 = fadd <2 x double> %631, %634
  %641 = fadd <2 x double> %635, %640
  %642 = fadd <2 x double> %636, %641
  %643 = fadd <2 x double> %637, %642
  %644 = fadd <2 x double> %643, %638
  %645 = fadd <2 x double> %639, %644
  %646 = xor <2 x i64> %191, <i64 -9223372036854775808, i64 -9223372036854775808>
  %647 = xor <2 x i64> %195, <i64 -9223372036854775808, i64 -9223372036854775808>
  %648 = bitcast <2 x i64> %646 to <2 x double>
  %649 = bitcast <2 x i64> %647 to <2 x double>
  %650 = fadd <2 x double> %630, %648
  %651 = fsub <2 x double> %650, %630
  %652 = fsub <2 x double> %650, %651
  %653 = fsub <2 x double> %630, %652
  %654 = fsub <2 x double> %648, %651
  %655 = fadd <2 x double> %654, %653
  %656 = fadd <2 x double> %645, %649
  %657 = fadd <2 x double> %655, %656
  %658 = fadd <2 x double> %650, <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>
  %659 = fsub <2 x double> %658, %650
  %660 = fsub <2 x double> %658, %659
  %661 = fsub <2 x double> %650, %660
  %662 = fsub <2 x double> <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>, %659
  %663 = fadd <2 x double> %662, %661
  %664 = fadd <2 x double> %657, <double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF>
  %665 = fadd <2 x double> %663, %664
  %666 = bitcast <2 x double> %423 to <2 x i64>
  %667 = and <2 x i64> %666, <i64 -134217728, i64 -134217728>
  %668 = bitcast <2 x i64> %667 to <2 x double>
  %669 = fsub <2 x double> %423, %668
  %670 = and <2 x i64> %217, <i64 -134217728, i64 -134217728>
  %671 = bitcast <2 x i64> %670 to <2 x double>
  %672 = fsub <2 x double> %218, %671
  %673 = fmul <2 x double> %423, %218
  %674 = fmul <2 x double> %671, %668
  %675 = bitcast <2 x double> %673 to <2 x i64>
  %676 = xor <2 x i64> %675, <i64 -9223372036854775808, i64 -9223372036854775808>
  %677 = bitcast <2 x i64> %676 to <2 x double>
  %678 = fmul <2 x double> %669, %671
  %679 = fmul <2 x double> %672, %668
  %680 = fmul <2 x double> %672, %669
  %681 = fadd <2 x double> %674, %677
  %682 = fadd <2 x double> %678, %681
  %683 = fadd <2 x double> %679, %682
  %684 = fadd <2 x double> %680, %683
  %685 = and <2 x i64> %32, <i64 -4622482306242006312, i64 -4622482306242006312>
  %686 = and <2 x i64> %199, <i64 -4633854371424799225, i64 -4633854371424799225>
  %687 = or <2 x i64> %686, %685
  %688 = bitcast <2 x i64> %687 to <2 x double>
  %689 = fadd <2 x double> %673, %688
  %690 = fsub <2 x double> %689, %673
  %691 = fsub <2 x double> %689, %690
  %692 = fsub <2 x double> %673, %691
  %693 = fsub <2 x double> %688, %690
  %694 = fadd <2 x double> %693, %692
  %695 = fadd <2 x double> %694, %684
  %696 = bitcast <2 x double> %689 to <2 x i64>
  %697 = and <2 x i64> %696, <i64 -134217728, i64 -134217728>
  %698 = bitcast <2 x i64> %697 to <2 x double>
  %699 = fsub <2 x double> %689, %698
  %700 = fmul <2 x double> %689, %218
  %701 = fmul <2 x double> %671, %698
  %702 = bitcast <2 x double> %700 to <2 x i64>
  %703 = xor <2 x i64> %702, <i64 -9223372036854775808, i64 -9223372036854775808>
  %704 = bitcast <2 x i64> %703 to <2 x double>
  %705 = fmul <2 x double> %699, %671
  %706 = fmul <2 x double> %672, %698
  %707 = fmul <2 x double> %672, %699
  %708 = fmul <2 x double> %695, %218
  %709 = fadd <2 x double> %701, %704
  %710 = fadd <2 x double> %705, %709
  %711 = fadd <2 x double> %706, %710
  %712 = fadd <2 x double> %707, %711
  %713 = fadd <2 x double> %708, %712
  %714 = and <2 x i64> %32, <i64 4605583343995783123, i64 4605583343995783123>
  %715 = and <2 x i64> %199, <i64 4599480669564178342, i64 4599480669564178342>
  %716 = or <2 x i64> %715, %714
  %717 = bitcast <2 x i64> %716 to <2 x double>
  %718 = fadd <2 x double> %700, %717
  %719 = fsub <2 x double> %718, %700
  %720 = fsub <2 x double> %718, %719
  %721 = fsub <2 x double> %700, %720
  %722 = fsub <2 x double> %717, %719
  %723 = fadd <2 x double> %722, %721
  %724 = fadd <2 x double> %723, %713
  %725 = bitcast <2 x double> %718 to <2 x i64>
  %726 = and <2 x i64> %725, <i64 -134217728, i64 -134217728>
  %727 = bitcast <2 x i64> %726 to <2 x double>
  %728 = fsub <2 x double> %718, %727
  %729 = fmul <2 x double> %718, %218
  %730 = fmul <2 x double> %671, %727
  %731 = bitcast <2 x double> %729 to <2 x i64>
  %732 = xor <2 x i64> %731, <i64 -9223372036854775808, i64 -9223372036854775808>
  %733 = bitcast <2 x i64> %732 to <2 x double>
  %734 = fmul <2 x double> %728, %671
  %735 = fmul <2 x double> %672, %727
  %736 = fmul <2 x double> %672, %728
  %737 = fmul <2 x double> %724, %218
  %738 = fadd <2 x double> %730, %733
  %739 = fadd <2 x double> %734, %738
  %740 = fadd <2 x double> %735, %739
  %741 = fadd <2 x double> %736, %740
  %742 = fadd <2 x double> %741, %737
  %743 = and <2 x i64> %32, <i64 -4619997720802773479, i64 -4619997720802773479>
  %744 = and <2 x i64> %199, <i64 4601287825413936078, i64 4601287825413936078>
  %745 = or <2 x i64> %744, %743
  %746 = bitcast <2 x i64> %745 to <2 x double>
  %747 = fadd <2 x double> %729, %746
  %748 = fsub <2 x double> %747, %729
  %749 = fsub <2 x double> %747, %748
  %750 = fsub <2 x double> %729, %749
  %751 = fsub <2 x double> %746, %748
  %752 = fadd <2 x double> %751, %750
  %753 = fadd <2 x double> %752, %742
  %754 = bitcast <2 x double> %747 to <2 x i64>
  %755 = and <2 x i64> %754, <i64 -134217728, i64 -134217728>
  %756 = bitcast <2 x i64> %755 to <2 x double>
  %757 = fsub <2 x double> %747, %756
  %758 = fmul <2 x double> %747, %218
  %759 = fmul <2 x double> %671, %756
  %760 = bitcast <2 x double> %758 to <2 x i64>
  %761 = xor <2 x i64> %760, <i64 -9223372036854775808, i64 -9223372036854775808>
  %762 = bitcast <2 x i64> %761 to <2 x double>
  %763 = fmul <2 x double> %757, %671
  %764 = fmul <2 x double> %672, %756
  %765 = fmul <2 x double> %672, %757
  %766 = fmul <2 x double> %753, %218
  %767 = fadd <2 x double> %759, %762
  %768 = fadd <2 x double> %763, %767
  %769 = fadd <2 x double> %764, %768
  %770 = fadd <2 x double> %765, %769
  %771 = fadd <2 x double> %770, %766
  %772 = bitcast <2 x double> %658 to <2 x i64>
  %773 = and <2 x i64> %772, %34
  %774 = and <2 x i64> %760, %214
  %775 = or <2 x i64> %774, %773
  %776 = bitcast <2 x double> %665 to <2 x i64>
  %777 = and <2 x i64> %776, %34
  %778 = bitcast <2 x double> %771 to <2 x i64>
  %779 = and <2 x i64> %778, %214
  %780 = or <2 x i64> %779, %777
  %781 = fadd <2 x double> %673, <double 1.000000e+00, double 1.000000e+00>
  %782 = fsub <2 x double> %781, %673
  %783 = fsub <2 x double> %781, %782
  %784 = fsub <2 x double> %673, %783
  %785 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %782
  %786 = fadd <2 x double> %785, %784
  %787 = fadd <2 x double> %786, %684
  %788 = bitcast <2 x double> %781 to <2 x i64>
  %789 = and <2 x i64> %788, %34
  %790 = and <2 x i64> %214, <i64 4607182418800017408, i64 4607182418800017408>
  %791 = or <2 x i64> %789, %790
  %792 = bitcast <2 x double> %787 to <2 x i64>
  %793 = and <2 x i64> %792, %34
  %794 = xor <2 x i64> %775, <i64 -9223372036854775808, i64 -9223372036854775808>
  %795 = xor <2 x i64> %780, <i64 -9223372036854775808, i64 -9223372036854775808>
  %796 = bitcast <2 x i64> %794 to <2 x double>
  %797 = bitcast <2 x i64> %795 to <2 x double>
  %798 = fadd <2 x double> %796, <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>
  %799 = fadd <2 x double> %798, <double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD>
  %800 = fsub <2 x double> %798, %799
  %801 = fsub <2 x double> <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>, %800
  %802 = fsub <2 x double> %796, %799
  %803 = fadd <2 x double> %802, %801
  %804 = fadd <2 x double> %797, <double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088>
  %805 = fadd <2 x double> %803, %804
  %806 = bitcast <2 x double> %798 to <2 x i64>
  %807 = and <2 x i64> %806, %9
  %808 = and <2 x i64> %775, %20
  %809 = or <2 x i64> %807, %808
  %810 = bitcast <2 x double> %805 to <2 x i64>
  %811 = and <2 x i64> %810, %9
  %812 = and <2 x i64> %780, %20
  %813 = or <2 x i64> %811, %812
  %814 = and <2 x i64> %7, <i64 4635553524532024912, i64 4635553524532024912>
  %815 = and <2 x i64> %809, %24
  %816 = or <2 x i64> %815, %814
  %817 = and <2 x i64> %7, <i64 4391159626268341278, i64 4391159626268341278>
  %818 = and <2 x i64> %813, %24
  %819 = or <2 x i64> %818, %817
  %820 = bitcast <2 x i64> %791 to <2 x double>
  %821 = and <2 x i64> %178, %9
  %822 = and <2 x i64> %791, %20
  %823 = or <2 x i64> %822, %821
  %824 = and <2 x i64> %180, %9
  %825 = and <2 x i64> %793, %20
  %826 = or <2 x i64> %825, %824
  %827 = and <2 x i64> %7, <i64 4607182418800017408, i64 4607182418800017408>
  %828 = and <2 x i64> %823, %24
  %829 = or <2 x i64> %828, %827
  %830 = and <2 x i64> %826, %24
  %831 = bitcast <2 x i64> %20 to <16 x i8>
  %832 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %831) #6
  %833 = icmp eq i32 %832, 65535
  br i1 %833, label %1040, label %834

; <label>:834:                                    ; preds = %2
  %835 = bitcast <2 x i64> %793 to <2 x double>
  %836 = fmul <2 x double> %1, <double 0x3E30000000000000, double 0x3E30000000000000>
  %837 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %836) #6
  %838 = shufflevector <4 x i32> %837, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %839 = sitofp <2 x i32> %838 to <2 x double>
  %840 = fmul <2 x double> %839, <double 0x41B0000000000000, double 0x41B0000000000000>
  %841 = fsub <2 x double> %1, %840
  %842 = fmul <2 x double> %841, <double 4.000000e+00, double 4.000000e+00>
  %843 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %842) #6
  %844 = lshr <4 x i32> %843, <i32 31, i32 31, i32 31, i32 31>
  %845 = xor <4 x i32> %844, <i32 1, i32 1, i32 0, i32 0>
  %846 = add <4 x i32> %845, %843
  %847 = and <4 x i32> %846, <i32 2, i32 2, i32 0, i32 0>
  %848 = icmp eq <4 x i32> %847, <i32 2, i32 2, i32 0, i32 0>
  %849 = sext <4 x i1> %848 to <4 x i32>
  %850 = shufflevector <4 x i32> %849, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %851 = bitcast <4 x i32> %850 to <2 x i64>
  %852 = and <4 x i32> %846, <i32 -2, i32 -2, i32 undef, i32 undef>
  %853 = shufflevector <4 x i32> %852, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %854 = sitofp <2 x i32> %853 to <2 x double>
  %855 = fsub <2 x double> %842, %854
  %856 = fmul <2 x double> %855, %855
  %857 = bitcast <2 x double> %855 to <2 x i64>
  %858 = and <2 x i64> %857, <i64 -134217728, i64 -134217728>
  %859 = bitcast <2 x i64> %858 to <2 x double>
  %860 = fsub <2 x double> %855, %859
  %861 = fmul <2 x double> %859, %859
  %862 = bitcast <2 x double> %856 to <2 x i64>
  %863 = xor <2 x i64> %862, <i64 -9223372036854775808, i64 -9223372036854775808>
  %864 = bitcast <2 x i64> %863 to <2 x double>
  %865 = fmul <2 x double> %860, %859
  %866 = fmul <2 x double> %860, %860
  %867 = fadd <2 x double> %861, %864
  %868 = fadd <2 x double> %865, %867
  %869 = fadd <2 x double> %865, %868
  %870 = fadd <2 x double> %866, %869
  %871 = and <2 x i64> %851, <i64 4382541452445283595, i64 4382541452445283595>
  %872 = xor <2 x i64> %851, <i64 -1, i64 -1>
  %873 = and <2 x i64> %872, <i64 -4821442551509016299, i64 -4821442551509016299>
  %874 = or <2 x i64> %873, %871
  %875 = bitcast <2 x i64> %874 to <2 x double>
  %876 = and <2 x i64> %851, <i64 -4802123692345199488, i64 -4802123692345199488>
  %877 = and <2 x i64> %872, <i64 4440143510975015736, i64 4440143510975015736>
  %878 = or <2 x i64> %877, %876
  %879 = bitcast <2 x i64> %878 to <2 x double>
  %880 = fmul <2 x double> %856, %875
  %881 = fadd <2 x double> %880, %879
  %882 = and <2 x i64> %851, <i64 4458455022030039826, i64 4458455022030039826>
  %883 = and <2 x i64> %872, <i64 -4747303679008710624, i64 -4747303679008710624>
  %884 = or <2 x i64> %883, %882
  %885 = bitcast <2 x i64> %884 to <2 x double>
  %886 = fmul <2 x double> %856, %881
  %887 = fadd <2 x double> %886, %885
  %888 = and <2 x i64> %851, <i64 -4730348477982289555, i64 -4730348477982289555>
  %889 = and <2 x i64> %872, <i64 4509518862318466248, i64 4509518862318466248>
  %890 = or <2 x i64> %889, %888
  %891 = bitcast <2 x i64> %890 to <2 x double>
  %892 = fmul <2 x double> %856, %887
  %893 = fadd <2 x double> %892, %891
  %894 = and <2 x i64> %851, <i64 4525589105766150571, i64 4525589105766150571>
  %895 = and <2 x i64> %872, <i64 -4682849517070797703, i64 -4682849517070797703>
  %896 = or <2 x i64> %895, %894
  %897 = bitcast <2 x i64> %896 to <2 x double>
  %898 = fmul <2 x double> %856, %893
  %899 = fadd <2 x double> %898, %897
  %900 = and <2 x i64> %851, <i64 -4668722924302319624, i64 -4668722924302319624>
  %901 = and <2 x i64> %872, <i64 4567888881436175070, i64 4567888881436175070>
  %902 = or <2 x i64> %901, %900
  %903 = bitcast <2 x i64> %902 to <2 x double>
  %904 = fmul <2 x double> %856, %899
  %905 = fadd <2 x double> %904, %903
  %906 = fmul <2 x double> %856, %905
  %907 = and <2 x i64> %851, <i64 4580226925013457604, i64 4580226925013457604>
  %908 = and <2 x i64> %872, <i64 -4632889288853963181, i64 -4632889288853963181>
  %909 = or <2 x i64> %908, %907
  %910 = and <2 x i64> %851, <i64 -4885473209836634112, i64 -4885473209836634112>
  %911 = and <2 x i64> %872, <i64 4346167154459017216, i64 4346167154459017216>
  %912 = or <2 x i64> %911, %910
  %913 = bitcast <2 x i64> %909 to <2 x double>
  %914 = bitcast <2 x i64> %912 to <2 x double>
  %915 = fadd <2 x double> %906, %913
  %916 = fsub <2 x double> %915, %906
  %917 = fsub <2 x double> %915, %916
  %918 = fsub <2 x double> %906, %917
  %919 = fsub <2 x double> %913, %916
  %920 = fadd <2 x double> %919, %918
  %921 = fadd <2 x double> %920, %914
  %922 = bitcast <2 x double> %915 to <2 x i64>
  %923 = and <2 x i64> %862, <i64 -134217728, i64 -134217728>
  %924 = bitcast <2 x i64> %923 to <2 x double>
  %925 = fsub <2 x double> %856, %924
  %926 = and <2 x i64> %922, <i64 -134217728, i64 -134217728>
  %927 = bitcast <2 x i64> %926 to <2 x double>
  %928 = fsub <2 x double> %915, %927
  %929 = fmul <2 x double> %856, %915
  %930 = fmul <2 x double> %924, %927
  %931 = bitcast <2 x double> %929 to <2 x i64>
  %932 = xor <2 x i64> %931, <i64 -9223372036854775808, i64 -9223372036854775808>
  %933 = bitcast <2 x i64> %932 to <2 x double>
  %934 = fmul <2 x double> %925, %927
  %935 = fmul <2 x double> %928, %924
  %936 = fmul <2 x double> %925, %928
  %937 = fmul <2 x double> %856, %921
  %938 = fmul <2 x double> %870, %915
  %939 = fadd <2 x double> %930, %933
  %940 = fadd <2 x double> %934, %939
  %941 = fadd <2 x double> %935, %940
  %942 = fadd <2 x double> %936, %941
  %943 = fadd <2 x double> %937, %942
  %944 = fadd <2 x double> %938, %943
  %945 = and <2 x i64> %851, <i64 -4624144323598989858, i64 -4624144323598989858>
  %946 = and <2 x i64> %872, <i64 4605249457297304856, i64 4605249457297304856>
  %947 = or <2 x i64> %946, %945
  %948 = and <2 x i64> %851, <i64 -4866544017652842496, i64 -4866544017652842496>
  %949 = and <2 x i64> %872, <i64 4359950632224817152, i64 4359950632224817152>
  %950 = or <2 x i64> %949, %948
  %951 = bitcast <2 x i64> %947 to <2 x double>
  %952 = bitcast <2 x i64> %950 to <2 x double>
  %953 = fadd <2 x double> %929, %951
  %954 = fsub <2 x double> %953, %929
  %955 = fsub <2 x double> %953, %954
  %956 = fsub <2 x double> %929, %955
  %957 = fsub <2 x double> %951, %954
  %958 = fadd <2 x double> %957, %956
  %959 = fadd <2 x double> %944, %952
  %960 = fadd <2 x double> %958, %959
  %961 = bitcast <2 x double> %953 to <2 x i64>
  %962 = and <2 x i64> %862, %851
  %963 = and <2 x i64> %857, %872
  %964 = or <2 x i64> %962, %963
  %965 = bitcast <2 x double> %870 to <2 x i64>
  %966 = and <2 x i64> %965, %851
  %967 = bitcast <2 x i64> %964 to <2 x double>
  %968 = bitcast <2 x i64> %966 to <2 x double>
  %969 = and <2 x i64> %961, <i64 -134217728, i64 -134217728>
  %970 = bitcast <2 x i64> %969 to <2 x double>
  %971 = fsub <2 x double> %953, %970
  %972 = and <2 x i64> %964, <i64 -134217728, i64 -134217728>
  %973 = bitcast <2 x i64> %972 to <2 x double>
  %974 = fsub <2 x double> %967, %973
  %975 = fmul <2 x double> %953, %967
  %976 = fmul <2 x double> %973, %970
  %977 = bitcast <2 x double> %975 to <2 x i64>
  %978 = xor <2 x i64> %977, <i64 -9223372036854775808, i64 -9223372036854775808>
  %979 = bitcast <2 x i64> %978 to <2 x double>
  %980 = fmul <2 x double> %971, %973
  %981 = fmul <2 x double> %974, %970
  %982 = fmul <2 x double> %974, %971
  %983 = fmul <2 x double> %953, %968
  %984 = fmul <2 x double> %960, %967
  %985 = fadd <2 x double> %976, %979
  %986 = fadd <2 x double> %980, %985
  %987 = fadd <2 x double> %981, %986
  %988 = fadd <2 x double> %982, %987
  %989 = fadd <2 x double> %983, %988
  %990 = fadd <2 x double> %989, %984
  %991 = bitcast <2 x double> %990 to <2 x i64>
  %992 = fadd <2 x double> %975, <double 1.000000e+00, double 1.000000e+00>
  %993 = fsub <2 x double> %992, %975
  %994 = fsub <2 x double> %992, %993
  %995 = fsub <2 x double> %975, %994
  %996 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %993
  %997 = fadd <2 x double> %996, %995
  %998 = fadd <2 x double> %997, %990
  %999 = bitcast <2 x double> %992 to <2 x i64>
  %1000 = and <2 x i64> %999, %851
  %1001 = and <2 x i64> %977, %872
  %1002 = or <2 x i64> %1000, %1001
  %1003 = bitcast <2 x double> %998 to <2 x i64>
  %1004 = and <2 x i64> %1003, %851
  %1005 = and <2 x i64> %991, %872
  %1006 = or <2 x i64> %1004, %1005
  %1007 = and <4 x i32> %846, <i32 4, i32 4, i32 0, i32 0>
  %1008 = icmp eq <4 x i32> %1007, <i32 4, i32 4, i32 0, i32 0>
  %1009 = sext <4 x i1> %1008 to <4 x i32>
  %1010 = shufflevector <4 x i32> %1009, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1011 = bitcast <4 x i32> %1010 to <2 x i64>
  %1012 = and <2 x i64> %1011, <i64 -9223372036854775808, i64 -9223372036854775808>
  %1013 = xor <2 x i64> %1002, %1012
  %1014 = xor <2 x i64> %1006, %1012
  %1015 = bitcast <2 x i64> %1013 to <2 x double>
  %1016 = bitcast <2 x i64> %1014 to <2 x double>
  %1017 = and <2 x i64> %791, <i64 -134217728, i64 -134217728>
  %1018 = bitcast <2 x i64> %1017 to <2 x double>
  %1019 = fsub <2 x double> %820, %1018
  %1020 = and <2 x i64> %1013, <i64 -134217728, i64 -134217728>
  %1021 = bitcast <2 x i64> %1020 to <2 x double>
  %1022 = fsub <2 x double> %1015, %1021
  %1023 = fmul <2 x double> %820, %1015
  %1024 = fmul <2 x double> %1018, %1021
  %1025 = bitcast <2 x double> %1023 to <2 x i64>
  %1026 = xor <2 x i64> %1025, <i64 -9223372036854775808, i64 -9223372036854775808>
  %1027 = bitcast <2 x i64> %1026 to <2 x double>
  %1028 = fmul <2 x double> %1019, %1021
  %1029 = fmul <2 x double> %1022, %1018
  %1030 = fmul <2 x double> %1019, %1022
  %1031 = fmul <2 x double> %820, %1016
  %1032 = fmul <2 x double> %835, %1015
  %1033 = fadd <2 x double> %1024, %1027
  %1034 = fadd <2 x double> %1028, %1033
  %1035 = fadd <2 x double> %1029, %1034
  %1036 = fadd <2 x double> %1030, %1035
  %1037 = fadd <2 x double> %1036, %1031
  %1038 = fadd <2 x double> %1032, %1037
  %1039 = bitcast <2 x double> %1038 to <2 x i64>
  br label %1040

; <label>:1040:                                   ; preds = %2, %834
  %1041 = phi <2 x i64> [ %1025, %834 ], [ %191, %2 ]
  %1042 = phi <2 x i64> [ %1039, %834 ], [ %195, %2 ]
  %1043 = fmul <2 x double> %1, <double 0x4770000000000000, double 0x4770000000000000>
  %1044 = and <2 x i64> %1041, %9
  %1045 = and <2 x i64> %178, %20
  %1046 = or <2 x i64> %1044, %1045
  %1047 = and <2 x i64> %1042, %9
  %1048 = and <2 x i64> %180, %20
  %1049 = or <2 x i64> %1047, %1048
  %1050 = bitcast <2 x double> %1043 to <2 x i64>
  %1051 = and <2 x i64> %7, %1050
  %1052 = and <2 x i64> %1046, %24
  %1053 = or <2 x i64> %1052, %1051
  %1054 = and <2 x i64> %1049, %24
  %1055 = bitcast <2 x i64> %829 to <2 x double>
  %1056 = bitcast <2 x i64> %830 to <2 x double>
  %1057 = bitcast <2 x i64> %1053 to <2 x double>
  %1058 = bitcast <2 x i64> %1054 to <2 x double>
  %1059 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %1057
  %1060 = and <2 x i64> %1053, <i64 -134217728, i64 -134217728>
  %1061 = bitcast <2 x i64> %1060 to <2 x double>
  %1062 = fsub <2 x double> %1057, %1061
  %1063 = bitcast <2 x double> %1059 to <2 x i64>
  %1064 = and <2 x i64> %1063, <i64 -134217728, i64 -134217728>
  %1065 = bitcast <2 x i64> %1064 to <2 x double>
  %1066 = fsub <2 x double> %1059, %1065
  %1067 = and <2 x i64> %829, <i64 -134217728, i64 -134217728>
  %1068 = bitcast <2 x i64> %1067 to <2 x double>
  %1069 = fsub <2 x double> %1055, %1068
  %1070 = fmul <2 x double> %1059, %1055
  %1071 = fmul <2 x double> %1068, %1065
  %1072 = fsub <2 x double> %1071, %1070
  %1073 = fmul <2 x double> %1066, %1068
  %1074 = fmul <2 x double> %1069, %1065
  %1075 = fmul <2 x double> %1069, %1066
  %1076 = fmul <2 x double> %1061, %1065
  %1077 = fmul <2 x double> %1066, %1061
  %1078 = fmul <2 x double> %1062, %1065
  %1079 = fmul <2 x double> %1062, %1066
  %1080 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %1076
  %1081 = fsub <2 x double> %1080, %1077
  %1082 = fsub <2 x double> %1081, %1078
  %1083 = fsub <2 x double> %1082, %1079
  %1084 = fmul <2 x double> %1070, %1083
  %1085 = fadd <2 x double> %1072, %1073
  %1086 = fadd <2 x double> %1074, %1085
  %1087 = fadd <2 x double> %1075, %1086
  %1088 = fadd <2 x double> %1087, %1084
  %1089 = fmul <2 x double> %1070, %1058
  %1090 = fsub <2 x double> %1056, %1089
  %1091 = fmul <2 x double> %1059, %1090
  %1092 = fadd <2 x double> %1091, %1088
  %1093 = bitcast %struct.dd2* %0 to <2 x i64>*
  store <2 x i64> %816, <2 x i64>* %1093, align 16
  %1094 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  %1095 = bitcast <2 x double>* %1094 to <2 x i64>*
  store <2 x i64> %819, <2 x i64>* %1095, align 16
  %1096 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store <2 x double> %1070, <2 x double>* %1096, align 16
  %1097 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store <2 x double> %1092, <2 x double>* %1097, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_lgammad2_u10sse2(<2 x double>) local_unnamed_addr #3 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <2 x double>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <2 x double>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = fmul <2 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = fcmp olt <2 x double> %15, <double 0x2D30000000000000, double 0x2D30000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = fmul <2 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000>
  %19 = select <2 x i1> %16, <2 x double> %18, <2 x double> %15
  %20 = bitcast <2 x double> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %22 = and <4 x i32> %21, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %23 = lshr exact <4 x i32> %22, <i32 20, i32 20, i32 20, i32 20>
  %24 = bitcast <2 x i64> %17 to <4 x i32>
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = and <2 x i64> %26, <i64 5682241733931, i64 0>
  %28 = xor <2 x i64> %26, <i64 4393751544831, i64 4393751544831>
  %29 = and <2 x i64> %28, <i64 4393751544831, i64 0>
  %30 = or <2 x i64> %29, %27
  %31 = bitcast <2 x i64> %30 to <4 x i32>
  %32 = sub <4 x i32> %23, %31
  %33 = sub <4 x i32> zeroinitializer, %32
  %34 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %35 = add <4 x i32> %34, <i32 1023, i32 1023, i32 undef, i32 0>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %37 = and <4 x i32> %36, <i32 0, i32 -1, i32 0, i32 -1>
  %38 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <4 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %13, %39
  %41 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %32
  %42 = sub <4 x i32> %41, %34
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %44 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = fmul <2 x double> %40, %46
  %48 = fmul <2 x double> %14, %39
  %49 = fmul <2 x double> %48, %46
  %50 = fadd <2 x double> %47, <double -1.000000e+00, double -1.000000e+00>
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %50, %51
  %53 = fsub <2 x double> %47, %52
  %54 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %51
  %55 = fadd <2 x double> %54, %53
  %56 = fadd <2 x double> %49, %55
  %57 = fadd <2 x double> %47, <double 1.000000e+00, double 1.000000e+00>
  %58 = fsub <2 x double> %57, %47
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> %47, %59
  %61 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %49, %62
  %64 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %57
  %65 = bitcast <2 x double> %57 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 -134217728, i64 -134217728>
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fsub <2 x double> %57, %67
  %69 = bitcast <2 x double> %64 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 -134217728, i64 -134217728>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fsub <2 x double> %64, %71
  %73 = bitcast <2 x double> %50 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %50, %75
  %77 = fmul <2 x double> %50, %64
  %78 = fmul <2 x double> %75, %71
  %79 = fsub <2 x double> %78, %77
  %80 = fmul <2 x double> %72, %75
  %81 = fmul <2 x double> %76, %71
  %82 = fmul <2 x double> %76, %72
  %83 = fmul <2 x double> %67, %71
  %84 = fmul <2 x double> %72, %67
  %85 = fmul <2 x double> %68, %71
  %86 = fmul <2 x double> %68, %72
  %87 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %83
  %88 = fsub <2 x double> %87, %84
  %89 = fsub <2 x double> %88, %85
  %90 = fsub <2 x double> %89, %86
  %91 = fmul <2 x double> %77, %90
  %92 = fadd <2 x double> %79, %80
  %93 = fadd <2 x double> %81, %92
  %94 = fadd <2 x double> %82, %93
  %95 = fadd <2 x double> %94, %91
  %96 = fmul <2 x double> %77, %63
  %97 = fsub <2 x double> %56, %96
  %98 = fmul <2 x double> %64, %97
  %99 = fadd <2 x double> %98, %95
  %100 = bitcast <2 x double> %77 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -134217728, i64 -134217728>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fsub <2 x double> %77, %102
  %104 = fmul <2 x double> %77, %77
  %105 = fmul <2 x double> %102, %102
  %106 = bitcast <2 x double> %104 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fadd <2 x double> %102, %102
  %110 = fmul <2 x double> %109, %103
  %111 = fmul <2 x double> %103, %103
  %112 = fadd <2 x double> %99, %99
  %113 = fmul <2 x double> %77, %112
  %114 = fadd <2 x double> %105, %108
  %115 = fadd <2 x double> %114, %110
  %116 = fadd <2 x double> %111, %115
  %117 = fadd <2 x double> %116, %113
  %118 = fmul <2 x double> %104, %104
  %119 = fmul <2 x double> %118, %118
  %120 = fmul <2 x double> %104, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %121 = fadd <2 x double> %120, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %122 = fmul <2 x double> %118, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %123 = fadd <2 x double> %122, %121
  %124 = fmul <2 x double> %104, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %125 = fadd <2 x double> %124, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %126 = fmul <2 x double> %104, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %127 = fadd <2 x double> %126, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %128 = fmul <2 x double> %118, %125
  %129 = fadd <2 x double> %127, %128
  %130 = fmul <2 x double> %119, %123
  %131 = fadd <2 x double> %130, %129
  %132 = fmul <2 x double> %104, %131
  %133 = fadd <2 x double> %132, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %134 = shufflevector <4 x i32> %32, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %135 = sitofp <2 x i32> %134 to <2 x double>
  %136 = bitcast <2 x double> %135 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -134217728, i64 -134217728>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fsub <2 x double> %135, %138
  %140 = fmul <2 x double> %135, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %141 = fmul <2 x double> %138, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %142 = bitcast <2 x double> %140 to <2 x i64>
  %143 = xor <2 x i64> %142, <i64 -9223372036854775808, i64 -9223372036854775808>
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = fmul <2 x double> %138, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %146 = fmul <2 x double> %139, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %147 = fmul <2 x double> %139, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %148 = fmul <2 x double> %135, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %149 = fadd <2 x double> %141, %144
  %150 = fadd <2 x double> %145, %149
  %151 = fadd <2 x double> %146, %150
  %152 = fadd <2 x double> %147, %151
  %153 = fadd <2 x double> %148, %152
  %154 = fmul <2 x double> %77, <double 2.000000e+00, double 2.000000e+00>
  %155 = fmul <2 x double> %99, <double 2.000000e+00, double 2.000000e+00>
  %156 = fadd <2 x double> %140, %154
  %157 = fsub <2 x double> %140, %156
  %158 = fadd <2 x double> %154, %157
  %159 = fadd <2 x double> %153, %158
  %160 = fadd <2 x double> %159, %155
  %161 = and <2 x i64> %106, <i64 -134217728, i64 -134217728>
  %162 = bitcast <2 x i64> %161 to <2 x double>
  %163 = fsub <2 x double> %104, %162
  %164 = fmul <2 x double> %77, %104
  %165 = fmul <2 x double> %102, %162
  %166 = bitcast <2 x double> %164 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372036854775808, i64 -9223372036854775808>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fmul <2 x double> %163, %102
  %170 = fmul <2 x double> %103, %162
  %171 = fmul <2 x double> %103, %163
  %172 = fmul <2 x double> %104, %99
  %173 = fmul <2 x double> %77, %117
  %174 = fadd <2 x double> %165, %168
  %175 = fadd <2 x double> %169, %174
  %176 = fadd <2 x double> %170, %175
  %177 = fadd <2 x double> %171, %176
  %178 = fadd <2 x double> %177, %172
  %179 = fadd <2 x double> %178, %173
  %180 = and <2 x i64> %166, <i64 -134217728, i64 -134217728>
  %181 = bitcast <2 x i64> %180 to <2 x double>
  %182 = fsub <2 x double> %164, %181
  %183 = bitcast <2 x double> %133 to <2 x i64>
  %184 = and <2 x i64> %183, <i64 -134217728, i64 -134217728>
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fsub <2 x double> %133, %185
  %187 = fmul <2 x double> %164, %133
  %188 = fmul <2 x double> %181, %185
  %189 = bitcast <2 x double> %187 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -9223372036854775808, i64 -9223372036854775808>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fmul <2 x double> %182, %185
  %193 = fmul <2 x double> %186, %181
  %194 = fmul <2 x double> %182, %186
  %195 = fmul <2 x double> %133, %179
  %196 = fadd <2 x double> %188, %191
  %197 = fadd <2 x double> %192, %196
  %198 = fadd <2 x double> %193, %197
  %199 = fadd <2 x double> %194, %198
  %200 = fadd <2 x double> %195, %199
  %201 = fadd <2 x double> %156, %187
  %202 = fsub <2 x double> %156, %201
  %203 = fadd <2 x double> %187, %202
  %204 = fadd <2 x double> %203, %160
  %205 = fadd <2 x double> %204, %200
  %206 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %207 = load <2 x double>, <2 x double>* %206, align 16
  %208 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %209 = load <2 x double>, <2 x double>* %208, align 16
  %210 = fadd <2 x double> %207, %201
  %211 = fsub <2 x double> %210, %207
  %212 = fsub <2 x double> %210, %211
  %213 = fsub <2 x double> %207, %212
  %214 = fsub <2 x double> %201, %211
  %215 = fadd <2 x double> %214, %213
  %216 = fadd <2 x double> %209, %205
  %217 = fadd <2 x double> %215, %216
  %218 = fadd <2 x double> %210, %217
  %219 = bitcast <2 x double> %0 to <2 x i64>
  %220 = and <2 x i64> %219, <i64 9223372036854775807, i64 9223372036854775807>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = fcmp oeq <2 x double> %221, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %223 = fcmp ole <2 x double> %0, zeroinitializer
  %224 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %225 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %224) #6
  %226 = shufflevector <4 x i32> %225, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %227 = sitofp <2 x i32> %226 to <2 x double>
  %228 = fmul <2 x double> %227, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %229 = fadd <2 x double> %228, %0
  %230 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %229) #6
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %232 = sitofp <2 x i32> %231 to <2 x double>
  %233 = fcmp oeq <2 x double> %229, %232
  %234 = fcmp ogt <2 x double> %221, <double 0x4340000000000000, double 0x4340000000000000>
  %235 = or <2 x i1> %233, %234
  %236 = and <2 x i1> %235, %223
  %237 = fcmp une <2 x double> %221, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %238 = fcmp ord <2 x double> %0, zeroinitializer
  %239 = and <2 x i1> %237, %238
  %240 = fcmp uno <2 x double> %218, zeroinitializer
  %241 = and <2 x i1> %239, %240
  %242 = or <2 x i1> %236, %222
  %243 = or <2 x i1> %242, %241
  %244 = select <2 x i1> %243, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %218
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <2 x double> %244
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fcmp olt <2 x double> %4, <double 3.700000e+00, double 3.700000e+00>
  %8 = sext <2 x i1> %7 to <2 x i64>
  %9 = fcmp olt <2 x double> %4, <double 6.000000e+00, double 6.000000e+00>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %4, %4
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %12, %6
  %14 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %15 = and <2 x i64> %3, %14
  %16 = or <2 x i64> %15, %13
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = and <2 x i64> %8, <i64 4404484889311462385, i64 4404484889311462385>
  %19 = xor <2 x i64> %8, <i64 -1, i64 -1>
  %20 = and <2 x i64> %19, <i64 -4874312480130436081, i64 -4874312480130436081>
  %21 = or <2 x i64> %20, %18
  %22 = and <2 x i64> %6, <i64 4305457732057471131, i64 4305457732057471131>
  %23 = and <2 x i64> %21, %14
  %24 = or <2 x i64> %23, %22
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = and <2 x i64> %8, <i64 -4793362560700331164, i64 -4793362560700331164>
  %27 = and <2 x i64> %19, <i64 4379157735021094665, i64 4379157735021094665>
  %28 = or <2 x i64> %27, %26
  %29 = and <2 x i64> %6, <i64 -4895440368529554443, i64 -4895440368529554443>
  %30 = and <2 x i64> %28, %14
  %31 = or <2 x i64> %30, %29
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = fmul <2 x double> %17, %25
  %34 = fadd <2 x double> %33, %32
  %35 = and <2 x i64> %8, <i64 4450976154296021348, i64 4450976154296021348>
  %36 = and <2 x i64> %19, <i64 -4818589597450472199, i64 -4818589597450472199>
  %37 = or <2 x i64> %36, %35
  %38 = and <2 x i64> %6, <i64 4347565692378024983, i64 4347565692378024983>
  %39 = and <2 x i64> %37, %14
  %40 = or <2 x i64> %39, %38
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %34, %17
  %43 = fadd <2 x double> %42, %41
  %44 = and <2 x i64> %8, <i64 -4754366819839945120, i64 -4754366819839945120>
  %45 = and <2 x i64> %19, <i64 4427203307136588730, i64 4427203307136588730>
  %46 = or <2 x i64> %45, %44
  %47 = and <2 x i64> %6, <i64 -4856546062657850516, i64 -4856546062657850516>
  %48 = and <2 x i64> %46, %14
  %49 = or <2 x i64> %48, %47
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fmul <2 x double> %43, %17
  %52 = fadd <2 x double> %51, %50
  %53 = and <2 x i64> %8, <i64 4485022845440445189, i64 4485022845440445189>
  %54 = and <2 x i64> %19, <i64 -4776323275816750080, i64 -4776323275816750080>
  %55 = or <2 x i64> %54, %53
  %56 = and <2 x i64> %6, <i64 4385784297979637416, i64 4385784297979637416>
  %57 = and <2 x i64> %55, %14
  %58 = or <2 x i64> %57, %56
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fmul <2 x double> %52, %17
  %61 = fadd <2 x double> %60, %59
  %62 = and <2 x i64> %8, <i64 -4724255034221860493, i64 -4724255034221860493>
  %63 = and <2 x i64> %19, <i64 4465400618269499235, i64 4465400618269499235>
  %64 = or <2 x i64> %63, %62
  %65 = and <2 x i64> %6, <i64 -4819037581971740838, i64 -4819037581971740838>
  %66 = and <2 x i64> %64, %14
  %67 = or <2 x i64> %66, %65
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fmul <2 x double> %61, %17
  %70 = fadd <2 x double> %69, %68
  %71 = and <2 x i64> %8, <i64 4511166212760762253, i64 4511166212760762253>
  %72 = and <2 x i64> %19, <i64 -4741154407314109567, i64 -4741154407314109567>
  %73 = or <2 x i64> %72, %71
  %74 = and <2 x i64> %6, <i64 4422367955339444987, i64 4422367955339444987>
  %75 = and <2 x i64> %73, %14
  %76 = or <2 x i64> %75, %74
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fmul <2 x double> %70, %17
  %79 = fadd <2 x double> %78, %77
  %80 = and <2 x i64> %8, <i64 -4701227119059690816, i64 -4701227119059690816>
  %81 = and <2 x i64> %19, <i64 4497559723007584920, i64 4497559723007584920>
  %82 = or <2 x i64> %81, %80
  %83 = and <2 x i64> %6, <i64 -4783521734061458053, i64 -4783521734061458053>
  %84 = and <2 x i64> %82, %14
  %85 = or <2 x i64> %84, %83
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %79, %17
  %88 = fadd <2 x double> %87, %86
  %89 = and <2 x i64> %8, <i64 4531484867320973498, i64 4531484867320973498>
  %90 = and <2 x i64> %19, <i64 -4711704334383104171, i64 -4711704334383104171>
  %91 = or <2 x i64> %90, %89
  %92 = and <2 x i64> %6, <i64 4456846938535063604, i64 4456846938535063604>
  %93 = and <2 x i64> %91, %14
  %94 = or <2 x i64> %93, %92
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fmul <2 x double> %88, %17
  %97 = fadd <2 x double> %96, %95
  %98 = and <2 x i64> %8, <i64 -4683703132533934301, i64 -4683703132533934301>
  %99 = and <2 x i64> %19, <i64 4524274416005875051, i64 4524274416005875051>
  %100 = or <2 x i64> %99, %98
  %101 = and <2 x i64> %6, <i64 -4749857858646930531, i64 -4749857858646930531>
  %102 = and <2 x i64> %100, %14
  %103 = or <2 x i64> %102, %101
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fmul <2 x double> %97, %17
  %106 = fadd <2 x double> %105, %104
  %107 = and <2 x i64> %8, <i64 4545510289337070703, i64 4545510289337070703>
  %108 = and <2 x i64> %19, <i64 -4687508113384576432, i64 -4687508113384576432>
  %109 = or <2 x i64> %108, %107
  %110 = and <2 x i64> %6, <i64 4490032028089190689, i64 4490032028089190689>
  %111 = and <2 x i64> %109, %14
  %112 = or <2 x i64> %111, %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fmul <2 x double> %106, %17
  %115 = fadd <2 x double> %114, %113
  %116 = and <2 x i64> %8, <i64 -4674119738223317607, i64 -4674119738223317607>
  %117 = and <2 x i64> %19, <i64 4545918430328863102, i64 4545918430328863102>
  %118 = or <2 x i64> %117, %116
  %119 = and <2 x i64> %6, <i64 -4718093167796951609, i64 -4718093167796951609>
  %120 = and <2 x i64> %118, %14
  %121 = or <2 x i64> %120, %119
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %115, %17
  %124 = fadd <2 x double> %123, %122
  %125 = and <2 x i64> %8, <i64 4544402204181047013, i64 4544402204181047013>
  %126 = and <2 x i64> %19, <i64 -4668666359066672496, i64 -4668666359066672496>
  %127 = or <2 x i64> %126, %125
  %128 = and <2 x i64> %6, <i64 4520380840337101212, i64 4520380840337101212>
  %129 = and <2 x i64> %127, %14
  %130 = or <2 x i64> %129, %128
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = fmul <2 x double> %124, %17
  %133 = fadd <2 x double> %132, %131
  %134 = and <2 x i64> %8, <i64 4557747815107278878, i64 4557747815107278878>
  %135 = and <2 x i64> %19, <i64 4562083095839691354, i64 4562083095839691354>
  %136 = or <2 x i64> %135, %134
  %137 = and <2 x i64> %6, <i64 -4688443862473981206, i64 -4688443862473981206>
  %138 = and <2 x i64> %136, %14
  %139 = or <2 x i64> %138, %137
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = fmul <2 x double> %133, %17
  %142 = fadd <2 x double> %141, %140
  %143 = and <2 x i64> %8, <i64 -4658245358435039753, i64 -4658245358435039753>
  %144 = and <2 x i64> %19, <i64 -4657370405635556213, i64 -4657370405635556213>
  %145 = or <2 x i64> %144, %143
  %146 = and <2 x i64> %6, <i64 4548523690078996920, i64 4548523690078996920>
  %147 = and <2 x i64> %145, %14
  %148 = or <2 x i64> %147, %146
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fmul <2 x double> %142, %17
  %151 = fadd <2 x double> %150, %149
  %152 = and <2 x i64> %8, <i64 4550091504999408826, i64 4550091504999408826>
  %153 = and <2 x i64> %19, <i64 -4666019570636296024, i64 -4666019570636296024>
  %154 = or <2 x i64> %153, %152
  %155 = and <2 x i64> %6, <i64 -4662348373540205692, i64 -4662348373540205692>
  %156 = and <2 x i64> %154, %14
  %157 = or <2 x i64> %156, %155
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %151, %17
  %160 = fadd <2 x double> %159, %158
  %161 = and <2 x i64> %8, <i64 4581177589213720422, i64 4581177589213720422>
  %162 = and <2 x i64> %19, <i64 4581682145429087205, i64 4581682145429087205>
  %163 = or <2 x i64> %162, %161
  %164 = and <2 x i64> %6, <i64 4572672858297640256, i64 4572672858297640256>
  %165 = and <2 x i64> %163, %14
  %166 = or <2 x i64> %165, %164
  %167 = bitcast <2 x i64> %166 to <2 x double>
  %168 = fmul <2 x double> %160, %17
  %169 = fadd <2 x double> %168, %167
  %170 = and <2 x i64> %8, <i64 -4631301404821904836, i64 -4631301404821904836>
  %171 = and <2 x i64> %19, <i64 -4631126855220108049, i64 -4631126855220108049>
  %172 = or <2 x i64> %171, %170
  %173 = and <2 x i64> %6, <i64 -4639971168975549614, i64 -4639971168975549614>
  %174 = and <2 x i64> %172, %14
  %175 = or <2 x i64> %174, %173
  %176 = bitcast <2 x i64> %175 to <2 x double>
  %177 = fmul <2 x double> %169, %17
  %178 = fadd <2 x double> %177, %176
  %179 = and <2 x i64> %8, <i64 -4619462678601655616, i64 -4619462678601655616>
  %180 = and <2 x i64> %19, <i64 -4619481432501200228, i64 -4619481432501200228>
  %181 = or <2 x i64> %180, %179
  %182 = and <2 x i64> %6, <i64 4592795249457507299, i64 4592795249457507299>
  %183 = and <2 x i64> %181, %14
  %184 = or <2 x i64> %183, %182
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fmul <2 x double> %178, %17
  %187 = fadd <2 x double> %186, %185
  %188 = and <2 x i64> %8, <i64 -4615611447778149990, i64 -4615611447778149990>
  %189 = and <2 x i64> %19, <i64 -4615606658927482022, i64 -4615606658927482022>
  %190 = or <2 x i64> %189, %188
  %191 = and <2 x i64> %6, <i64 -4622924726274917913, i64 -4622924726274917913>
  %192 = and <2 x i64> %190, %14
  %193 = or <2 x i64> %192, %191
  %194 = bitcast <2 x i64> %193 to <2 x double>
  %195 = fmul <2 x double> %187, %17
  %196 = fadd <2 x double> %195, %194
  %197 = bitcast <2 x double> %196 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -134217728, i64 -134217728>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fsub <2 x double> %196, %199
  %201 = and <2 x i64> %16, <i64 -134217728, i64 -134217728>
  %202 = bitcast <2 x i64> %201 to <2 x double>
  %203 = fsub <2 x double> %17, %202
  %204 = fmul <2 x double> %196, %17
  %205 = fmul <2 x double> %202, %199
  %206 = bitcast <2 x double> %204 to <2 x i64>
  %207 = xor <2 x i64> %206, <i64 -9223372036854775808, i64 -9223372036854775808>
  %208 = bitcast <2 x i64> %207 to <2 x double>
  %209 = fmul <2 x double> %200, %202
  %210 = fmul <2 x double> %203, %199
  %211 = fmul <2 x double> %203, %200
  %212 = fadd <2 x double> %205, %208
  %213 = fadd <2 x double> %209, %212
  %214 = fadd <2 x double> %210, %213
  %215 = fadd <2 x double> %211, %214
  %216 = and <2 x i64> %8, <i64 4495243483381545681, i64 4495243483381545681>
  %217 = and <2 x i64> %19, <i64 4553240490951061146, i64 4553240490951061146>
  %218 = or <2 x i64> %217, %216
  %219 = and <2 x i64> %6, <i64 4607760587169110893, i64 4607760587169110893>
  %220 = and <2 x i64> %218, %14
  %221 = or <2 x i64> %220, %219
  %222 = bitcast <2 x i64> %221 to <2 x double>
  %223 = and <2 x i64> %8, <i64 -4969705792003016664, i64 -4969705792003016664>
  %224 = and <2 x i64> %19, <i64 -4919711954714341753, i64 -4919711954714341753>
  %225 = or <2 x i64> %224, %223
  %226 = and <2 x i64> %6, <i64 4355453881213250925, i64 4355453881213250925>
  %227 = and <2 x i64> %225, %14
  %228 = or <2 x i64> %227, %226
  %229 = bitcast <2 x i64> %228 to <2 x double>
  %230 = fadd <2 x double> %204, %222
  %231 = fsub <2 x double> %230, %204
  %232 = fsub <2 x double> %230, %231
  %233 = fsub <2 x double> %204, %232
  %234 = fsub <2 x double> %222, %231
  %235 = fadd <2 x double> %234, %233
  %236 = fadd <2 x double> %215, %229
  %237 = fadd <2 x double> %235, %236
  %238 = bitcast <2 x double> %230 to <2 x i64>
  %239 = and <2 x i64> %238, <i64 -134217728, i64 -134217728>
  %240 = bitcast <2 x i64> %239 to <2 x double>
  %241 = fsub <2 x double> %230, %240
  %242 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fsub <2 x double> %4, %243
  %245 = fmul <2 x double> %230, %4
  %246 = fmul <2 x double> %243, %240
  %247 = bitcast <2 x double> %245 to <2 x i64>
  %248 = xor <2 x i64> %247, <i64 -9223372036854775808, i64 -9223372036854775808>
  %249 = bitcast <2 x i64> %248 to <2 x double>
  %250 = fmul <2 x double> %241, %243
  %251 = fmul <2 x double> %244, %240
  %252 = fmul <2 x double> %244, %241
  %253 = fmul <2 x double> %237, %4
  %254 = fadd <2 x double> %246, %249
  %255 = fadd <2 x double> %250, %254
  %256 = fadd <2 x double> %251, %255
  %257 = fadd <2 x double> %252, %256
  %258 = fadd <2 x double> %257, %253
  %259 = fadd <2 x double> %230, %237
  %260 = fmul <2 x double> %259, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %261 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %260) #6
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %263 = sitofp <2 x i32> %262 to <2 x double>
  %264 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %263) #6
  %265 = fmul <2 x double> %263, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %266 = fadd <2 x double> %230, %265
  %267 = fsub <2 x double> %266, %230
  %268 = fsub <2 x double> %266, %267
  %269 = fsub <2 x double> %230, %268
  %270 = fsub <2 x double> %265, %267
  %271 = fadd <2 x double> %270, %269
  %272 = fadd <2 x double> %237, %271
  %273 = fmul <2 x double> %263, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %274 = fadd <2 x double> %273, %266
  %275 = fsub <2 x double> %274, %266
  %276 = fsub <2 x double> %274, %275
  %277 = fsub <2 x double> %266, %276
  %278 = fsub <2 x double> %273, %275
  %279 = fadd <2 x double> %278, %277
  %280 = fadd <2 x double> %279, %272
  %281 = bitcast <2 x double> %274 to <2 x i64>
  %282 = and <2 x i64> %281, <i64 -134217728, i64 -134217728>
  %283 = bitcast <2 x i64> %282 to <2 x double>
  %284 = fsub <2 x double> %274, %283
  %285 = fmul <2 x double> %274, %274
  %286 = fmul <2 x double> %283, %283
  %287 = bitcast <2 x double> %285 to <2 x i64>
  %288 = xor <2 x i64> %287, <i64 -9223372036854775808, i64 -9223372036854775808>
  %289 = bitcast <2 x i64> %288 to <2 x double>
  %290 = fadd <2 x double> %283, %283
  %291 = fmul <2 x double> %290, %284
  %292 = fmul <2 x double> %284, %284
  %293 = fadd <2 x double> %280, %280
  %294 = fmul <2 x double> %274, %293
  %295 = fadd <2 x double> %286, %289
  %296 = fadd <2 x double> %295, %291
  %297 = fadd <2 x double> %292, %296
  %298 = fadd <2 x double> %294, %297
  %299 = and <2 x i64> %287, <i64 -134217728, i64 -134217728>
  %300 = bitcast <2 x i64> %299 to <2 x double>
  %301 = fsub <2 x double> %285, %300
  %302 = fmul <2 x double> %285, %285
  %303 = fmul <2 x double> %300, %300
  %304 = bitcast <2 x double> %302 to <2 x i64>
  %305 = xor <2 x i64> %304, <i64 -9223372036854775808, i64 -9223372036854775808>
  %306 = bitcast <2 x i64> %305 to <2 x double>
  %307 = fadd <2 x double> %300, %300
  %308 = fmul <2 x double> %307, %301
  %309 = fmul <2 x double> %301, %301
  %310 = fadd <2 x double> %298, %298
  %311 = fmul <2 x double> %285, %310
  %312 = fadd <2 x double> %303, %306
  %313 = fadd <2 x double> %312, %308
  %314 = fadd <2 x double> %309, %313
  %315 = fadd <2 x double> %314, %311
  %316 = fmul <2 x double> %302, %302
  %317 = fmul <2 x double> %274, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %318 = fadd <2 x double> %317, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %319 = fmul <2 x double> %274, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %320 = fadd <2 x double> %319, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %321 = fmul <2 x double> %274, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %322 = fadd <2 x double> %321, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %323 = fmul <2 x double> %285, %320
  %324 = fadd <2 x double> %322, %323
  %325 = fmul <2 x double> %274, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %326 = fadd <2 x double> %325, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %327 = fmul <2 x double> %274, <double 0x3F81111111111119, double 0x3F81111111111119>
  %328 = fadd <2 x double> %327, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %329 = fmul <2 x double> %285, %326
  %330 = fadd <2 x double> %328, %329
  %331 = fmul <2 x double> %302, %324
  %332 = fadd <2 x double> %330, %331
  %333 = fmul <2 x double> %318, %316
  %334 = fadd <2 x double> %333, %332
  %335 = fmul <2 x double> %274, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %336 = fmul <2 x double> %283, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %337 = bitcast <2 x double> %335 to <2 x i64>
  %338 = xor <2 x i64> %337, <i64 -9223372036854775808, i64 -9223372036854775808>
  %339 = bitcast <2 x i64> %338 to <2 x double>
  %340 = fmul <2 x double> %284, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %341 = fmul <2 x double> %283, <double 0x3E25555554000000, double 0x3E25555554000000>
  %342 = fmul <2 x double> %284, <double 0x3E25555554000000, double 0x3E25555554000000>
  %343 = fmul <2 x double> %280, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %344 = fadd <2 x double> %336, %339
  %345 = fadd <2 x double> %340, %344
  %346 = fadd <2 x double> %341, %345
  %347 = fadd <2 x double> %342, %346
  %348 = fadd <2 x double> %343, %347
  %349 = fadd <2 x double> %335, <double 5.000000e-01, double 5.000000e-01>
  %350 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %349
  %351 = fadd <2 x double> %335, %350
  %352 = fadd <2 x double> %351, %348
  %353 = bitcast <2 x double> %349 to <2 x i64>
  %354 = and <2 x i64> %353, <i64 -134217728, i64 -134217728>
  %355 = bitcast <2 x i64> %354 to <2 x double>
  %356 = fsub <2 x double> %349, %355
  %357 = fmul <2 x double> %274, %349
  %358 = fmul <2 x double> %283, %355
  %359 = bitcast <2 x double> %357 to <2 x i64>
  %360 = xor <2 x i64> %359, <i64 -9223372036854775808, i64 -9223372036854775808>
  %361 = bitcast <2 x i64> %360 to <2 x double>
  %362 = fmul <2 x double> %356, %283
  %363 = fmul <2 x double> %284, %355
  %364 = fmul <2 x double> %284, %356
  %365 = fmul <2 x double> %349, %280
  %366 = fmul <2 x double> %274, %352
  %367 = fadd <2 x double> %358, %361
  %368 = fadd <2 x double> %362, %367
  %369 = fadd <2 x double> %363, %368
  %370 = fadd <2 x double> %364, %369
  %371 = fadd <2 x double> %365, %370
  %372 = fadd <2 x double> %366, %371
  %373 = fadd <2 x double> %357, <double 1.000000e+00, double 1.000000e+00>
  %374 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %373
  %375 = fadd <2 x double> %357, %374
  %376 = fadd <2 x double> %375, %372
  %377 = bitcast <2 x double> %373 to <2 x i64>
  %378 = and <2 x i64> %377, <i64 -134217728, i64 -134217728>
  %379 = bitcast <2 x i64> %378 to <2 x double>
  %380 = fsub <2 x double> %373, %379
  %381 = fmul <2 x double> %274, %373
  %382 = fmul <2 x double> %283, %379
  %383 = bitcast <2 x double> %381 to <2 x i64>
  %384 = xor <2 x i64> %383, <i64 -9223372036854775808, i64 -9223372036854775808>
  %385 = bitcast <2 x i64> %384 to <2 x double>
  %386 = fmul <2 x double> %380, %283
  %387 = fmul <2 x double> %284, %379
  %388 = fmul <2 x double> %284, %380
  %389 = fmul <2 x double> %373, %280
  %390 = fmul <2 x double> %274, %376
  %391 = fadd <2 x double> %382, %385
  %392 = fadd <2 x double> %386, %391
  %393 = fadd <2 x double> %387, %392
  %394 = fadd <2 x double> %388, %393
  %395 = fadd <2 x double> %389, %394
  %396 = fadd <2 x double> %395, %390
  %397 = fadd <2 x double> %381, <double 1.000000e+00, double 1.000000e+00>
  %398 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %397
  %399 = fadd <2 x double> %381, %398
  %400 = fadd <2 x double> %399, %396
  %401 = and <2 x i64> %304, <i64 -134217728, i64 -134217728>
  %402 = bitcast <2 x i64> %401 to <2 x double>
  %403 = fsub <2 x double> %302, %402
  %404 = bitcast <2 x double> %334 to <2 x i64>
  %405 = and <2 x i64> %404, <i64 -134217728, i64 -134217728>
  %406 = bitcast <2 x i64> %405 to <2 x double>
  %407 = fsub <2 x double> %334, %406
  %408 = fmul <2 x double> %302, %334
  %409 = fmul <2 x double> %402, %406
  %410 = bitcast <2 x double> %408 to <2 x i64>
  %411 = xor <2 x i64> %410, <i64 -9223372036854775808, i64 -9223372036854775808>
  %412 = bitcast <2 x i64> %411 to <2 x double>
  %413 = fmul <2 x double> %403, %406
  %414 = fmul <2 x double> %407, %402
  %415 = fmul <2 x double> %403, %407
  %416 = fmul <2 x double> %334, %315
  %417 = fadd <2 x double> %409, %412
  %418 = fadd <2 x double> %413, %417
  %419 = fadd <2 x double> %414, %418
  %420 = fadd <2 x double> %415, %419
  %421 = fadd <2 x double> %416, %420
  %422 = fadd <2 x double> %397, %408
  %423 = fsub <2 x double> %397, %422
  %424 = fadd <2 x double> %408, %423
  %425 = fadd <2 x double> %424, %400
  %426 = fadd <2 x double> %421, %425
  %427 = ashr <4 x i32> %264, <i32 1, i32 1, i32 1, i32 1>
  %428 = add <4 x i32> %427, <i32 1023, i32 1023, i32 undef, i32 0>
  %429 = shufflevector <4 x i32> %428, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %430 = and <4 x i32> %429, <i32 0, i32 -1, i32 0, i32 -1>
  %431 = shl <4 x i32> %430, <i32 20, i32 20, i32 20, i32 20>
  %432 = bitcast <4 x i32> %431 to <2 x double>
  %433 = fmul <2 x double> %422, %432
  %434 = add <4 x i32> %264, <i32 1023, i32 1023, i32 undef, i32 0>
  %435 = sub <4 x i32> %434, %427
  %436 = shufflevector <4 x i32> %435, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %437 = and <4 x i32> %436, <i32 0, i32 -1, i32 0, i32 -1>
  %438 = shl <4 x i32> %437, <i32 20, i32 20, i32 20, i32 20>
  %439 = bitcast <4 x i32> %438 to <2 x double>
  %440 = fmul <2 x double> %433, %439
  %441 = fmul <2 x double> %426, %432
  %442 = fmul <2 x double> %441, %439
  %443 = fcmp uge <2 x double> %230, <double -1.000000e+03, double -1.000000e+03>
  %444 = bitcast <2 x double> %440 to <2 x i64>
  %445 = sext <2 x i1> %443 to <2 x i64>
  %446 = and <2 x i64> %444, %445
  %447 = bitcast <2 x double> %442 to <2 x i64>
  %448 = and <2 x i64> %447, %445
  %449 = xor <2 x i64> %446, <i64 -9223372036854775808, i64 -9223372036854775808>
  %450 = xor <2 x i64> %448, <i64 -9223372036854775808, i64 -9223372036854775808>
  %451 = bitcast <2 x i64> %449 to <2 x double>
  %452 = bitcast <2 x i64> %450 to <2 x double>
  %453 = fadd <2 x double> %451, <double 1.000000e+00, double 1.000000e+00>
  %454 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %453
  %455 = fadd <2 x double> %454, %451
  %456 = fadd <2 x double> %455, %452
  %457 = and <2 x i64> %247, %6
  %458 = bitcast <2 x double> %453 to <2 x i64>
  %459 = and <2 x i64> %458, %14
  %460 = or <2 x i64> %459, %457
  %461 = bitcast <2 x double> %258 to <2 x i64>
  %462 = and <2 x i64> %461, %6
  %463 = bitcast <2 x double> %456 to <2 x i64>
  %464 = and <2 x i64> %463, %14
  %465 = or <2 x i64> %464, %462
  %466 = bitcast <2 x i64> %460 to <2 x double>
  %467 = bitcast <2 x i64> %465 to <2 x double>
  %468 = fadd <2 x double> %466, %467
  %469 = bitcast <2 x double> %468 to <2 x i64>
  %470 = and <2 x i64> %469, %10
  %471 = and <2 x i64> %10, <i64 4607182418800017408, i64 4607182418800017408>
  %472 = xor <2 x i64> %471, <i64 4607182418800017408, i64 4607182418800017408>
  %473 = or <2 x i64> %470, %472
  %474 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %475 = xor <2 x i64> %473, %474
  %476 = fcmp uno <2 x double> %4, zeroinitializer
  %477 = bitcast <2 x i64> %475 to <2 x double>
  %478 = select <2 x i1> %476, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %477
  ret <2 x double> %478
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfcd2_u15sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fcmp olt <2 x double> %4, <double 2.200000e+00, double 2.200000e+00>
  %8 = sext <2 x i1> %7 to <2 x i64>
  %9 = fcmp olt <2 x double> %4, <double 4.200000e+00, double 4.200000e+00>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fcmp olt <2 x double> %4, <double 2.730000e+01, double 2.730000e+01>
  %12 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fsub <2 x double> %4, %13
  %15 = fmul <2 x double> %4, %4
  %16 = fmul <2 x double> %13, %13
  %17 = bitcast <2 x double> %15 to <2 x i64>
  %18 = xor <2 x i64> %17, <i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fmul <2 x double> %14, %13
  %21 = fmul <2 x double> %14, %14
  %22 = fadd <2 x double> %16, %19
  %23 = fadd <2 x double> %20, %22
  %24 = fadd <2 x double> %20, %23
  %25 = fadd <2 x double> %21, %24
  %26 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %27 = bitcast <2 x double> %26 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %26, %29
  %31 = fsub <2 x double> %29, %26
  %32 = fmul <2 x double> %29, zeroinitializer
  %33 = fmul <2 x double> %30, zeroinitializer
  %34 = fmul <2 x double> %13, %29
  %35 = fmul <2 x double> %30, %13
  %36 = fmul <2 x double> %14, %29
  %37 = fmul <2 x double> %14, %30
  %38 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %34
  %39 = fsub <2 x double> %38, %35
  %40 = fsub <2 x double> %39, %36
  %41 = fsub <2 x double> %40, %37
  %42 = fmul <2 x double> %26, %41
  %43 = fadd <2 x double> %31, %30
  %44 = fadd <2 x double> %32, %43
  %45 = fadd <2 x double> %33, %44
  %46 = fadd <2 x double> %45, %42
  %47 = fmul <2 x double> %26, zeroinitializer
  %48 = fsub <2 x double> zeroinitializer, %47
  %49 = fmul <2 x double> %26, %48
  %50 = fadd <2 x double> %49, %46
  %51 = and <2 x i64> %3, %8
  %52 = xor <2 x i64> %8, <i64 -1, i64 -1>
  %53 = and <2 x i64> %27, %52
  %54 = or <2 x i64> %53, %51
  %55 = bitcast <2 x double> %50 to <2 x i64>
  %56 = and <2 x i64> %17, %6
  %57 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %58 = and <2 x i64> %54, %57
  %59 = or <2 x i64> %58, %56
  %60 = bitcast <2 x double> %25 to <2 x i64>
  %61 = and <2 x i64> %60, %6
  %62 = and <2 x i64> %57, %52
  %63 = and <2 x i64> %62, %55
  %64 = or <2 x i64> %63, %61
  %65 = and <2 x i64> %10, <i64 -4590071808945685518, i64 -4590071808945685518>
  %66 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %67 = and <2 x i64> %66, <i64 4672145550755510697, i64 4672145550755510697>
  %68 = or <2 x i64> %67, %65
  %69 = and <2 x i64> %8, <i64 4420337315874365988, i64 4420337315874365988>
  %70 = and <2 x i64> %68, %52
  %71 = or <2 x i64> %70, %69
  %72 = and <2 x i64> %6, <i64 4305457732057471127, i64 4305457732057471127>
  %73 = and <2 x i64> %71, %57
  %74 = or <2 x i64> %73, %72
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = bitcast <2 x i64> %59 to <2 x double>
  %77 = and <2 x i64> %10, <i64 4646921917421330636, i64 4646921917421330636>
  %78 = and <2 x i64> %66, <i64 -4546685555872823013, i64 -4546685555872823013>
  %79 = or <2 x i64> %78, %77
  %80 = and <2 x i64> %8, <i64 -4779669613603495354, i64 -4779669613603495354>
  %81 = and <2 x i64> %79, %52
  %82 = or <2 x i64> %81, %80
  %83 = and <2 x i64> %6, <i64 -4895440368529554446, i64 -4895440368529554446>
  %84 = and <2 x i64> %82, %57
  %85 = or <2 x i64> %84, %83
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %76, %75
  %88 = fadd <2 x double> %87, %86
  %89 = and <2 x i64> %10, <i64 -4567756879049267051, i64 -4567756879049267051>
  %90 = and <2 x i64> %66, <i64 4674452198000057955, i64 4674452198000057955>
  %91 = or <2 x i64> %90, %89
  %92 = and <2 x i64> %8, <i64 4462253592325120512, i64 4462253592325120512>
  %93 = and <2 x i64> %91, %52
  %94 = or <2 x i64> %93, %92
  %95 = and <2 x i64> %6, <i64 4347565692378024979, i64 4347565692378024979>
  %96 = and <2 x i64> %94, %57
  %97 = or <2 x i64> %96, %95
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fmul <2 x double> %88, %76
  %100 = fadd <2 x double> %99, %98
  %101 = and <2 x i64> %10, <i64 4661511368817404256, i64 4661511368817404256>
  %102 = and <2 x i64> %66, <i64 4659349809639601308, i64 4659349809639601308>
  %103 = or <2 x i64> %102, %101
  %104 = and <2 x i64> %8, <i64 -4745759370378507284, i64 -4745759370378507284>
  %105 = and <2 x i64> %103, %52
  %106 = or <2 x i64> %105, %104
  %107 = and <2 x i64> %6, <i64 -4856546062657850519, i64 -4856546062657850519>
  %108 = and <2 x i64> %106, %57
  %109 = or <2 x i64> %108, %107
  %110 = bitcast <2 x i64> %109 to <2 x double>
  %111 = fmul <2 x double> %100, %76
  %112 = fadd <2 x double> %111, %110
  %113 = and <2 x i64> %10, <i64 -4558451778809954973, i64 -4558451778809954973>
  %114 = and <2 x i64> %66, <i64 -4552104808230376685, i64 -4552104808230376685>
  %115 = or <2 x i64> %114, %113
  %116 = and <2 x i64> %8, <i64 4490871050346542461, i64 4490871050346542461>
  %117 = and <2 x i64> %115, %52
  %118 = or <2 x i64> %117, %116
  %119 = and <2 x i64> %6, <i64 4385784297979637412, i64 4385784297979637412>
  %120 = and <2 x i64> %118, %57
  %121 = or <2 x i64> %120, %119
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %112, %76
  %124 = fadd <2 x double> %123, %122
  %125 = and <2 x i64> %10, <i64 4666477968926869995, i64 4666477968926869995>
  %126 = and <2 x i64> %66, <i64 4669768857999579897, i64 4669768857999579897>
  %127 = or <2 x i64> %126, %125
  %128 = and <2 x i64> %8, <i64 -4721256612509777572, i64 -4721256612509777572>
  %129 = and <2 x i64> %127, %52
  %130 = or <2 x i64> %129, %128
  %131 = and <2 x i64> %6, <i64 -4819037581971740849, i64 -4819037581971740849>
  %132 = and <2 x i64> %130, %57
  %133 = or <2 x i64> %132, %131
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fmul <2 x double> %124, %76
  %136 = fadd <2 x double> %135, %134
  %137 = and <2 x i64> %10, <i64 -4556940224025659395, i64 -4556940224025659395>
  %138 = and <2 x i64> %66, <i64 -4559887064460171024, i64 -4559887064460171024>
  %139 = or <2 x i64> %138, %137
  %140 = and <2 x i64> %8, <i64 4511778785462848883, i64 4511778785462848883>
  %141 = and <2 x i64> %139, %52
  %142 = or <2 x i64> %141, %140
  %143 = and <2 x i64> %6, <i64 4422367955339444993, i64 4422367955339444993>
  %144 = and <2 x i64> %142, %57
  %145 = or <2 x i64> %144, %143
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fmul <2 x double> %136, %76
  %148 = fadd <2 x double> %147, %146
  %149 = and <2 x i64> %10, <i64 4664844485681351789, i64 4664844485681351789>
  %150 = and <2 x i64> %66, <i64 4653168603195604384, i64 4653168603195604384>
  %151 = or <2 x i64> %150, %149
  %152 = and <2 x i64> %8, <i64 -4703988375370193372, i64 -4703988375370193372>
  %153 = and <2 x i64> %151, %52
  %154 = or <2 x i64> %153, %152
  %155 = and <2 x i64> %6, <i64 -4783521734061458056, i64 -4783521734061458056>
  %156 = and <2 x i64> %154, %57
  %157 = or <2 x i64> %156, %155
  %158 = bitcast <2 x i64> %157 to <2 x double>
  %159 = fmul <2 x double> %148, %76
  %160 = fadd <2 x double> %159, %158
  %161 = and <2 x i64> %10, <i64 -4561638763654560540, i64 -4561638763654560540>
  %162 = and <2 x i64> %66, <i64 -4587894116987719928, i64 -4587894116987719928>
  %163 = or <2 x i64> %162, %161
  %164 = and <2 x i64> %8, <i64 4525280449604985718, i64 4525280449604985718>
  %165 = and <2 x i64> %163, %52
  %166 = or <2 x i64> %165, %164
  %167 = and <2 x i64> %6, <i64 4456846938535063607, i64 4456846938535063607>
  %168 = and <2 x i64> %166, %57
  %169 = or <2 x i64> %168, %167
  %170 = bitcast <2 x i64> %169 to <2 x double>
  %171 = fmul <2 x double> %160, %76
  %172 = fadd <2 x double> %171, %170
  %173 = and <2 x i64> %10, <i64 4657073565880099004, i64 4657073565880099004>
  %174 = and <2 x i64> %66, <i64 4629760151388724535, i64 4629760151388724535>
  %175 = or <2 x i64> %174, %173
  %176 = and <2 x i64> %8, <i64 -4695868147780214079, i64 -4695868147780214079>
  %177 = and <2 x i64> %175, %52
  %178 = or <2 x i64> %177, %176
  %179 = and <2 x i64> %6, <i64 -4749857858646930528, i64 -4749857858646930528>
  %180 = and <2 x i64> %178, %57
  %181 = or <2 x i64> %180, %179
  %182 = bitcast <2 x i64> %181 to <2 x double>
  %183 = fmul <2 x double> %172, %76
  %184 = fadd <2 x double> %183, %182
  %185 = and <2 x i64> %10, <i64 -4572932213201046631, i64 -4572932213201046631>
  %186 = and <2 x i64> %66, <i64 -4594450126606517599, i64 -4594450126606517599>
  %187 = or <2 x i64> %186, %185
  %188 = and <2 x i64> %8, <i64 -4704584690425350255, i64 -4704584690425350255>
  %189 = and <2 x i64> %187, %52
  %190 = or <2 x i64> %189, %188
  %191 = and <2 x i64> %6, <i64 4490032028089190698, i64 4490032028089190698>
  %192 = and <2 x i64> %190, %57
  %193 = or <2 x i64> %192, %191
  %194 = bitcast <2 x i64> %193 to <2 x double>
  %195 = fmul <2 x double> %184, %76
  %196 = fadd <2 x double> %195, %194
  %197 = and <2 x i64> %10, <i64 4642186152505300383, i64 4642186152505300383>
  %198 = and <2 x i64> %66, <i64 4599900029266526162, i64 4599900029266526162>
  %199 = or <2 x i64> %198, %197
  %200 = and <2 x i64> %8, <i64 4538959408879542508, i64 4538959408879542508>
  %201 = and <2 x i64> %199, %52
  %202 = or <2 x i64> %201, %200
  %203 = and <2 x i64> %6, <i64 -4718093167796951620, i64 -4718093167796951620>
  %204 = and <2 x i64> %202, %57
  %205 = or <2 x i64> %204, %203
  %206 = bitcast <2 x i64> %205 to <2 x double>
  %207 = fmul <2 x double> %196, %76
  %208 = fadd <2 x double> %207, %206
  %209 = and <2 x i64> %10, <i64 -4591654343281075303, i64 -4591654343281075303>
  %210 = and <2 x i64> %66, <i64 4617866905098565847, i64 4617866905098565847>
  %211 = or <2 x i64> %210, %209
  %212 = and <2 x i64> %8, <i64 -4679025736869540480, i64 -4679025736869540480>
  %213 = and <2 x i64> %211, %52
  %214 = or <2 x i64> %213, %212
  %215 = and <2 x i64> %6, <i64 4520380840337101213, i64 4520380840337101213>
  %216 = and <2 x i64> %214, %57
  %217 = or <2 x i64> %216, %215
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = fmul <2 x double> %208, %76
  %220 = fadd <2 x double> %219, %218
  %221 = and <2 x i64> %10, <i64 4621569944750244198, i64 4621569944750244198>
  %222 = and <2 x i64> %66, <i64 4564836749326312905, i64 4564836749326312905>
  %223 = or <2 x i64> %222, %221
  %224 = and <2 x i64> %8, <i64 -4685176028109176313, i64 -4685176028109176313>
  %225 = and <2 x i64> %223, %52
  %226 = or <2 x i64> %225, %224
  %227 = and <2 x i64> %6, <i64 -4688443862473981214, i64 -4688443862473981214>
  %228 = and <2 x i64> %226, %57
  %229 = or <2 x i64> %228, %227
  %230 = bitcast <2 x i64> %229 to <2 x double>
  %231 = fmul <2 x double> %220, %76
  %232 = fadd <2 x double> %231, %230
  %233 = and <2 x i64> %10, <i64 -4609527827436295698, i64 -4609527827436295698>
  %234 = and <2 x i64> %66, <i64 -4613749830936244855, i64 -4613749830936244855>
  %235 = or <2 x i64> %234, %233
  %236 = and <2 x i64> %8, <i64 4558577131924847343, i64 4558577131924847343>
  %237 = and <2 x i64> %235, %52
  %238 = or <2 x i64> %237, %236
  %239 = and <2 x i64> %6, <i64 4548523690078996930, i64 4548523690078996930>
  %240 = and <2 x i64> %238, %57
  %241 = or <2 x i64> %240, %239
  %242 = bitcast <2 x i64> %241 to <2 x double>
  %243 = fmul <2 x double> %232, %76
  %244 = fadd <2 x double> %243, %242
  %245 = and <2 x i64> %10, <i64 4595186016570721442, i64 4595186016570721442>
  %246 = and <2 x i64> %66, <i64 4523776405987421236, i64 4523776405987421236>
  %247 = or <2 x i64> %246, %245
  %248 = and <2 x i64> %8, <i64 -4657909106128175634, i64 -4657909106128175634>
  %249 = and <2 x i64> %247, %52
  %250 = or <2 x i64> %249, %248
  %251 = and <2 x i64> %6, <i64 -4662348373540205693, i64 -4662348373540205693>
  %252 = and <2 x i64> %250, %57
  %253 = or <2 x i64> %252, %251
  %254 = bitcast <2 x i64> %253 to <2 x double>
  %255 = fmul <2 x double> %244, %76
  %256 = fadd <2 x double> %255, %254
  %257 = and <2 x i64> %10, <i64 4603666562766314201, i64 4603666562766314201>
  %258 = and <2 x i64> %66, <i64 4603804718344678026, i64 4603804718344678026>
  %259 = or <2 x i64> %258, %257
  %260 = and <2 x i64> %8, <i64 4551839503259853236, i64 4551839503259853236>
  %261 = and <2 x i64> %259, %52
  %262 = or <2 x i64> %261, %260
  %263 = and <2 x i64> %6, <i64 4572672858297640255, i64 4572672858297640255>
  %264 = and <2 x i64> %262, %57
  %265 = or <2 x i64> %264, %263
  %266 = bitcast <2 x i64> %265 to <2 x double>
  %267 = fmul <2 x double> %256, %76
  %268 = fadd <2 x double> %267, %266
  %269 = and <2 x i64> %10, <i64 4562527578113761931, i64 4562527578113761931>
  %270 = and <2 x i64> %66, <i64 4475993413714712797, i64 4475993413714712797>
  %271 = or <2 x i64> %270, %269
  %272 = and <2 x i64> %8, <i64 4581170653307152942, i64 4581170653307152942>
  %273 = and <2 x i64> %271, %52
  %274 = or <2 x i64> %273, %272
  %275 = and <2 x i64> %6, <i64 -4639971168975549615, i64 -4639971168975549615>
  %276 = and <2 x i64> %274, %57
  %277 = or <2 x i64> %276, %275
  %278 = bitcast <2 x i64> %277 to <2 x double>
  %279 = fmul <2 x double> %268, %76
  %280 = fadd <2 x double> %279, %278
  %281 = bitcast <2 x i64> %64 to <2 x double>
  %282 = and <2 x i64> %59, <i64 -134217728, i64 -134217728>
  %283 = bitcast <2 x i64> %282 to <2 x double>
  %284 = fsub <2 x double> %76, %283
  %285 = bitcast <2 x double> %280 to <2 x i64>
  %286 = and <2 x i64> %285, <i64 -134217728, i64 -134217728>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = fsub <2 x double> %280, %287
  %289 = fmul <2 x double> %280, %76
  %290 = fmul <2 x double> %283, %287
  %291 = bitcast <2 x double> %289 to <2 x i64>
  %292 = xor <2 x i64> %291, <i64 -9223372036854775808, i64 -9223372036854775808>
  %293 = bitcast <2 x i64> %292 to <2 x double>
  %294 = fmul <2 x double> %284, %287
  %295 = fmul <2 x double> %288, %283
  %296 = fmul <2 x double> %284, %288
  %297 = fmul <2 x double> %280, %281
  %298 = fadd <2 x double> %290, %293
  %299 = fadd <2 x double> %294, %298
  %300 = fadd <2 x double> %295, %299
  %301 = fadd <2 x double> %296, %300
  %302 = fadd <2 x double> %297, %301
  %303 = and <2 x i64> %10, <i64 -4620692751066513464, i64 -4620692751066513464>
  %304 = and <2 x i64> %66, <i64 -4620693217681896110, i64 -4620693217681896110>
  %305 = or <2 x i64> %304, %303
  %306 = and <2 x i64> %8, <i64 -4631302067493596768, i64 -4631302067493596768>
  %307 = and <2 x i64> %305, %52
  %308 = or <2 x i64> %307, %306
  %309 = and <2 x i64> %6, <i64 4592795249457507298, i64 4592795249457507298>
  %310 = and <2 x i64> %308, %57
  %311 = or <2 x i64> %310, %309
  %312 = bitcast <2 x i64> %311 to <2 x double>
  %313 = and <2 x i64> %10, <i64 4359032243768704779, i64 4359032243768704779>
  %314 = and <2 x i64> %66, <i64 -4861888811672852701, i64 -4861888811672852701>
  %315 = or <2 x i64> %314, %313
  %316 = and <2 x i64> %8, <i64 -4873809968337108562, i64 -4873809968337108562>
  %317 = and <2 x i64> %315, %52
  %318 = or <2 x i64> %317, %316
  %319 = and <2 x i64> %6, <i64 -4876686893134147881, i64 -4876686893134147881>
  %320 = and <2 x i64> %318, %57
  %321 = or <2 x i64> %320, %319
  %322 = bitcast <2 x i64> %321 to <2 x double>
  %323 = fadd <2 x double> %289, %312
  %324 = fsub <2 x double> %323, %289
  %325 = fsub <2 x double> %323, %324
  %326 = fsub <2 x double> %289, %325
  %327 = fsub <2 x double> %312, %324
  %328 = fadd <2 x double> %327, %326
  %329 = fadd <2 x double> %302, %322
  %330 = fadd <2 x double> %328, %329
  %331 = bitcast <2 x double> %323 to <2 x i64>
  %332 = and <2 x i64> %331, <i64 -134217728, i64 -134217728>
  %333 = bitcast <2 x i64> %332 to <2 x double>
  %334 = fsub <2 x double> %323, %333
  %335 = fmul <2 x double> %323, %76
  %336 = fmul <2 x double> %283, %333
  %337 = bitcast <2 x double> %335 to <2 x i64>
  %338 = xor <2 x i64> %337, <i64 -9223372036854775808, i64 -9223372036854775808>
  %339 = bitcast <2 x i64> %338 to <2 x double>
  %340 = fmul <2 x double> %334, %283
  %341 = fmul <2 x double> %284, %333
  %342 = fmul <2 x double> %284, %334
  %343 = fmul <2 x double> %323, %281
  %344 = fmul <2 x double> %330, %76
  %345 = fadd <2 x double> %336, %339
  %346 = fadd <2 x double> %340, %345
  %347 = fadd <2 x double> %341, %346
  %348 = fadd <2 x double> %342, %347
  %349 = fadd <2 x double> %343, %348
  %350 = fadd <2 x double> %349, %344
  %351 = and <2 x i64> %10, <i64 4520167837228732544, i64 4520167837228732544>
  %352 = and <2 x i64> %66, <i64 4418234178496584292, i64 4418234178496584292>
  %353 = or <2 x i64> %352, %351
  %354 = and <2 x i64> %8, <i64 -4619462656214758046, i64 -4619462656214758046>
  %355 = and <2 x i64> %353, %52
  %356 = or <2 x i64> %355, %354
  %357 = and <2 x i64> %6, <i64 -4622924726274917913, i64 -4622924726274917913>
  %358 = and <2 x i64> %356, %57
  %359 = or <2 x i64> %358, %357
  %360 = bitcast <2 x i64> %359 to <2 x double>
  %361 = and <2 x i64> %10, <i64 4264050731252470341, i64 4264050731252470341>
  %362 = and <2 x i64> %66, <i64 -5049214336336393802, i64 -5049214336336393802>
  %363 = or <2 x i64> %362, %361
  %364 = and <2 x i64> %8, <i64 4350927157762777355, i64 4350927157762777355>
  %365 = and <2 x i64> %363, %52
  %366 = or <2 x i64> %365, %364
  %367 = and <2 x i64> %6, <i64 4354665478636623150, i64 4354665478636623150>
  %368 = and <2 x i64> %366, %57
  %369 = or <2 x i64> %368, %367
  %370 = bitcast <2 x i64> %369 to <2 x double>
  %371 = fadd <2 x double> %335, %360
  %372 = fsub <2 x double> %371, %335
  %373 = fsub <2 x double> %371, %372
  %374 = fsub <2 x double> %335, %373
  %375 = fsub <2 x double> %360, %372
  %376 = fadd <2 x double> %375, %374
  %377 = fadd <2 x double> %350, %370
  %378 = fadd <2 x double> %376, %377
  %379 = bitcast <2 x double> %371 to <2 x i64>
  %380 = and <2 x i64> %379, <i64 -134217728, i64 -134217728>
  %381 = bitcast <2 x i64> %380 to <2 x double>
  %382 = fsub <2 x double> %371, %381
  %383 = fmul <2 x double> %371, %76
  %384 = fmul <2 x double> %283, %381
  %385 = bitcast <2 x double> %383 to <2 x i64>
  %386 = xor <2 x i64> %385, <i64 -9223372036854775808, i64 -9223372036854775808>
  %387 = bitcast <2 x i64> %386 to <2 x double>
  %388 = fmul <2 x double> %382, %283
  %389 = fmul <2 x double> %284, %381
  %390 = fmul <2 x double> %284, %382
  %391 = fmul <2 x double> %371, %281
  %392 = fmul <2 x double> %378, %76
  %393 = fadd <2 x double> %384, %387
  %394 = fadd <2 x double> %388, %393
  %395 = fadd <2 x double> %389, %394
  %396 = fadd <2 x double> %390, %395
  %397 = fadd <2 x double> %391, %396
  %398 = fadd <2 x double> %397, %392
  %399 = and <2 x i64> %10, <i64 -4620041412010238000, i64 -4620041412010238000>
  %400 = and <2 x i64> %66, <i64 -4620041412222148154, i64 -4620041412222148154>
  %401 = or <2 x i64> %400, %399
  %402 = and <2 x i64> %8, <i64 -4615611449683970584, i64 -4615611449683970584>
  %403 = and <2 x i64> %401, %52
  %404 = or <2 x i64> %403, %402
  %405 = and <2 x i64> %6, <i64 4607760587169110893, i64 4607760587169110893>
  %406 = and <2 x i64> %404, %57
  %407 = or <2 x i64> %406, %405
  %408 = bitcast <2 x i64> %407 to <2 x double>
  %409 = and <2 x i64> %10, <i64 4359962938272308903, i64 4359962938272308903>
  %410 = and <2 x i64> %66, <i64 -4865111429525883754, i64 -4865111429525883754>
  %411 = or <2 x i64> %410, %409
  %412 = and <2 x i64> %8, <i64 4366047571301963085, i64 4366047571301963085>
  %413 = and <2 x i64> %411, %52
  %414 = or <2 x i64> %413, %412
  %415 = and <2 x i64> %6, <i64 4355453881213250925, i64 4355453881213250925>
  %416 = and <2 x i64> %414, %57
  %417 = or <2 x i64> %416, %415
  %418 = bitcast <2 x i64> %417 to <2 x double>
  %419 = fadd <2 x double> %383, %408
  %420 = fsub <2 x double> %419, %383
  %421 = fsub <2 x double> %419, %420
  %422 = fsub <2 x double> %383, %421
  %423 = fsub <2 x double> %408, %420
  %424 = fadd <2 x double> %423, %422
  %425 = fadd <2 x double> %398, %418
  %426 = fadd <2 x double> %424, %425
  %427 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %428 = bitcast <2 x double> %419 to <2 x i64>
  %429 = and <2 x i64> %428, %8
  %430 = and <2 x i64> %427, %52
  %431 = or <2 x i64> %429, %430
  %432 = bitcast <2 x double> %426 to <2 x i64>
  %433 = and <2 x i64> %432, %8
  %434 = bitcast <2 x i64> %431 to <2 x double>
  %435 = bitcast <2 x i64> %433 to <2 x double>
  %436 = and <2 x i64> %431, <i64 -134217728, i64 -134217728>
  %437 = bitcast <2 x i64> %436 to <2 x double>
  %438 = fsub <2 x double> %434, %437
  %439 = fmul <2 x double> %4, %434
  %440 = fmul <2 x double> %13, %437
  %441 = bitcast <2 x double> %439 to <2 x i64>
  %442 = xor <2 x i64> %441, <i64 -9223372036854775808, i64 -9223372036854775808>
  %443 = bitcast <2 x i64> %442 to <2 x double>
  %444 = fmul <2 x double> %438, %13
  %445 = fmul <2 x double> %14, %437
  %446 = fmul <2 x double> %14, %438
  %447 = fmul <2 x double> %4, %435
  %448 = fadd <2 x double> %440, %443
  %449 = fadd <2 x double> %444, %448
  %450 = fadd <2 x double> %445, %449
  %451 = fadd <2 x double> %446, %450
  %452 = fadd <2 x double> %451, %447
  %453 = bitcast <2 x double> %452 to <2 x i64>
  %454 = fadd <2 x double> %419, %439
  %455 = fsub <2 x double> %454, %439
  %456 = fsub <2 x double> %454, %455
  %457 = fsub <2 x double> %439, %456
  %458 = fsub <2 x double> %419, %455
  %459 = fadd <2 x double> %458, %457
  %460 = fadd <2 x double> %426, %452
  %461 = fadd <2 x double> %459, %460
  %462 = and <2 x i64> %441, %8
  %463 = bitcast <2 x double> %454 to <2 x i64>
  %464 = and <2 x i64> %463, %52
  %465 = or <2 x i64> %464, %462
  %466 = and <2 x i64> %453, %8
  %467 = bitcast <2 x double> %461 to <2 x i64>
  %468 = and <2 x i64> %467, %52
  %469 = or <2 x i64> %468, %466
  %470 = bitcast <2 x i64> %465 to <2 x double>
  %471 = bitcast <2 x i64> %469 to <2 x double>
  %472 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %470
  %473 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %472
  %474 = fsub <2 x double> %473, %470
  %475 = fadd <2 x double> %474, zeroinitializer
  %476 = fsub <2 x double> %475, %471
  %477 = fadd <2 x double> %470, %471
  %478 = fmul <2 x double> %477, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %479 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %478) #6
  %480 = shufflevector <4 x i32> %479, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %481 = sitofp <2 x i32> %480 to <2 x double>
  %482 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %481) #6
  %483 = fmul <2 x double> %481, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %484 = fadd <2 x double> %483, %470
  %485 = fsub <2 x double> %484, %470
  %486 = fsub <2 x double> %484, %485
  %487 = fsub <2 x double> %470, %486
  %488 = fsub <2 x double> %483, %485
  %489 = fadd <2 x double> %488, %487
  %490 = fadd <2 x double> %489, %471
  %491 = fmul <2 x double> %481, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %492 = fadd <2 x double> %491, %484
  %493 = fsub <2 x double> %492, %484
  %494 = fsub <2 x double> %492, %493
  %495 = fsub <2 x double> %484, %494
  %496 = fsub <2 x double> %491, %493
  %497 = fadd <2 x double> %496, %495
  %498 = fadd <2 x double> %497, %490
  %499 = bitcast <2 x double> %492 to <2 x i64>
  %500 = and <2 x i64> %499, <i64 -134217728, i64 -134217728>
  %501 = bitcast <2 x i64> %500 to <2 x double>
  %502 = fsub <2 x double> %492, %501
  %503 = fmul <2 x double> %492, %492
  %504 = fmul <2 x double> %501, %501
  %505 = bitcast <2 x double> %503 to <2 x i64>
  %506 = xor <2 x i64> %505, <i64 -9223372036854775808, i64 -9223372036854775808>
  %507 = bitcast <2 x i64> %506 to <2 x double>
  %508 = fadd <2 x double> %501, %501
  %509 = fmul <2 x double> %508, %502
  %510 = fmul <2 x double> %502, %502
  %511 = fadd <2 x double> %498, %498
  %512 = fmul <2 x double> %492, %511
  %513 = fadd <2 x double> %504, %507
  %514 = fadd <2 x double> %513, %509
  %515 = fadd <2 x double> %510, %514
  %516 = fadd <2 x double> %512, %515
  %517 = and <2 x i64> %505, <i64 -134217728, i64 -134217728>
  %518 = bitcast <2 x i64> %517 to <2 x double>
  %519 = fsub <2 x double> %503, %518
  %520 = fmul <2 x double> %503, %503
  %521 = fmul <2 x double> %518, %518
  %522 = bitcast <2 x double> %520 to <2 x i64>
  %523 = xor <2 x i64> %522, <i64 -9223372036854775808, i64 -9223372036854775808>
  %524 = bitcast <2 x i64> %523 to <2 x double>
  %525 = fadd <2 x double> %518, %518
  %526 = fmul <2 x double> %525, %519
  %527 = fmul <2 x double> %519, %519
  %528 = fadd <2 x double> %516, %516
  %529 = fmul <2 x double> %503, %528
  %530 = fadd <2 x double> %521, %524
  %531 = fadd <2 x double> %530, %526
  %532 = fadd <2 x double> %527, %531
  %533 = fadd <2 x double> %532, %529
  %534 = fmul <2 x double> %520, %520
  %535 = fmul <2 x double> %492, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %536 = fadd <2 x double> %535, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %537 = fmul <2 x double> %492, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %538 = fadd <2 x double> %537, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %539 = fmul <2 x double> %492, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %540 = fadd <2 x double> %539, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %541 = fmul <2 x double> %503, %538
  %542 = fadd <2 x double> %540, %541
  %543 = fmul <2 x double> %492, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %544 = fadd <2 x double> %543, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %545 = fmul <2 x double> %492, <double 0x3F81111111111119, double 0x3F81111111111119>
  %546 = fadd <2 x double> %545, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %547 = fmul <2 x double> %503, %544
  %548 = fadd <2 x double> %546, %547
  %549 = fmul <2 x double> %520, %542
  %550 = fadd <2 x double> %548, %549
  %551 = fmul <2 x double> %536, %534
  %552 = fadd <2 x double> %551, %550
  %553 = fmul <2 x double> %492, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %554 = fmul <2 x double> %501, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %555 = bitcast <2 x double> %553 to <2 x i64>
  %556 = xor <2 x i64> %555, <i64 -9223372036854775808, i64 -9223372036854775808>
  %557 = bitcast <2 x i64> %556 to <2 x double>
  %558 = fmul <2 x double> %502, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %559 = fmul <2 x double> %501, <double 0x3E25555554000000, double 0x3E25555554000000>
  %560 = fmul <2 x double> %502, <double 0x3E25555554000000, double 0x3E25555554000000>
  %561 = fmul <2 x double> %498, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %562 = fadd <2 x double> %554, %557
  %563 = fadd <2 x double> %558, %562
  %564 = fadd <2 x double> %559, %563
  %565 = fadd <2 x double> %560, %564
  %566 = fadd <2 x double> %561, %565
  %567 = fadd <2 x double> %553, <double 5.000000e-01, double 5.000000e-01>
  %568 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %567
  %569 = fadd <2 x double> %553, %568
  %570 = fadd <2 x double> %569, %566
  %571 = bitcast <2 x double> %567 to <2 x i64>
  %572 = and <2 x i64> %571, <i64 -134217728, i64 -134217728>
  %573 = bitcast <2 x i64> %572 to <2 x double>
  %574 = fsub <2 x double> %567, %573
  %575 = fmul <2 x double> %492, %567
  %576 = fmul <2 x double> %501, %573
  %577 = bitcast <2 x double> %575 to <2 x i64>
  %578 = xor <2 x i64> %577, <i64 -9223372036854775808, i64 -9223372036854775808>
  %579 = bitcast <2 x i64> %578 to <2 x double>
  %580 = fmul <2 x double> %574, %501
  %581 = fmul <2 x double> %502, %573
  %582 = fmul <2 x double> %502, %574
  %583 = fmul <2 x double> %567, %498
  %584 = fmul <2 x double> %492, %570
  %585 = fadd <2 x double> %576, %579
  %586 = fadd <2 x double> %580, %585
  %587 = fadd <2 x double> %581, %586
  %588 = fadd <2 x double> %582, %587
  %589 = fadd <2 x double> %583, %588
  %590 = fadd <2 x double> %584, %589
  %591 = fadd <2 x double> %575, <double 1.000000e+00, double 1.000000e+00>
  %592 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %591
  %593 = fadd <2 x double> %575, %592
  %594 = fadd <2 x double> %593, %590
  %595 = bitcast <2 x double> %591 to <2 x i64>
  %596 = and <2 x i64> %595, <i64 -134217728, i64 -134217728>
  %597 = bitcast <2 x i64> %596 to <2 x double>
  %598 = fsub <2 x double> %591, %597
  %599 = fmul <2 x double> %492, %591
  %600 = fmul <2 x double> %501, %597
  %601 = bitcast <2 x double> %599 to <2 x i64>
  %602 = xor <2 x i64> %601, <i64 -9223372036854775808, i64 -9223372036854775808>
  %603 = bitcast <2 x i64> %602 to <2 x double>
  %604 = fmul <2 x double> %598, %501
  %605 = fmul <2 x double> %502, %597
  %606 = fmul <2 x double> %502, %598
  %607 = fmul <2 x double> %591, %498
  %608 = fmul <2 x double> %492, %594
  %609 = fadd <2 x double> %600, %603
  %610 = fadd <2 x double> %604, %609
  %611 = fadd <2 x double> %605, %610
  %612 = fadd <2 x double> %606, %611
  %613 = fadd <2 x double> %607, %612
  %614 = fadd <2 x double> %613, %608
  %615 = fadd <2 x double> %599, <double 1.000000e+00, double 1.000000e+00>
  %616 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %615
  %617 = fadd <2 x double> %599, %616
  %618 = fadd <2 x double> %617, %614
  %619 = and <2 x i64> %522, <i64 -134217728, i64 -134217728>
  %620 = bitcast <2 x i64> %619 to <2 x double>
  %621 = fsub <2 x double> %520, %620
  %622 = bitcast <2 x double> %552 to <2 x i64>
  %623 = and <2 x i64> %622, <i64 -134217728, i64 -134217728>
  %624 = bitcast <2 x i64> %623 to <2 x double>
  %625 = fsub <2 x double> %552, %624
  %626 = fmul <2 x double> %520, %552
  %627 = fmul <2 x double> %620, %624
  %628 = bitcast <2 x double> %626 to <2 x i64>
  %629 = xor <2 x i64> %628, <i64 -9223372036854775808, i64 -9223372036854775808>
  %630 = bitcast <2 x i64> %629 to <2 x double>
  %631 = fmul <2 x double> %621, %624
  %632 = fmul <2 x double> %625, %620
  %633 = fmul <2 x double> %621, %625
  %634 = fmul <2 x double> %552, %533
  %635 = fadd <2 x double> %627, %630
  %636 = fadd <2 x double> %631, %635
  %637 = fadd <2 x double> %632, %636
  %638 = fadd <2 x double> %633, %637
  %639 = fadd <2 x double> %634, %638
  %640 = fadd <2 x double> %615, %626
  %641 = fsub <2 x double> %615, %640
  %642 = fadd <2 x double> %626, %641
  %643 = fadd <2 x double> %642, %618
  %644 = fadd <2 x double> %639, %643
  %645 = ashr <4 x i32> %482, <i32 1, i32 1, i32 1, i32 1>
  %646 = add <4 x i32> %645, <i32 1023, i32 1023, i32 undef, i32 0>
  %647 = shufflevector <4 x i32> %646, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %648 = and <4 x i32> %647, <i32 0, i32 -1, i32 0, i32 -1>
  %649 = shl <4 x i32> %648, <i32 20, i32 20, i32 20, i32 20>
  %650 = bitcast <4 x i32> %649 to <2 x double>
  %651 = fmul <2 x double> %640, %650
  %652 = add <4 x i32> %482, <i32 1023, i32 1023, i32 undef, i32 0>
  %653 = sub <4 x i32> %652, %645
  %654 = shufflevector <4 x i32> %653, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %655 = and <4 x i32> %654, <i32 0, i32 -1, i32 0, i32 -1>
  %656 = shl <4 x i32> %655, <i32 20, i32 20, i32 20, i32 20>
  %657 = bitcast <4 x i32> %656 to <2 x double>
  %658 = fmul <2 x double> %651, %657
  %659 = fmul <2 x double> %644, %650
  %660 = fmul <2 x double> %659, %657
  %661 = fcmp uge <2 x double> %470, <double -1.000000e+03, double -1.000000e+03>
  %662 = bitcast <2 x double> %658 to <2 x i64>
  %663 = bitcast <2 x double> %660 to <2 x i64>
  %664 = bitcast <2 x double> %472 to <2 x i64>
  %665 = and <2 x i64> %664, %6
  %666 = select <2 x i1> %661, <2 x i64> %57, <2 x i64> zeroinitializer
  %667 = and <2 x i64> %666, %662
  %668 = or <2 x i64> %667, %665
  %669 = bitcast <2 x double> %476 to <2 x i64>
  %670 = and <2 x i64> %669, %6
  %671 = and <2 x i64> %666, %663
  %672 = or <2 x i64> %671, %670
  %673 = bitcast <2 x i64> %668 to <2 x double>
  %674 = bitcast <2 x i64> %672 to <2 x double>
  %675 = and <2 x i64> %668, <i64 -134217728, i64 -134217728>
  %676 = bitcast <2 x i64> %675 to <2 x double>
  %677 = fsub <2 x double> %673, %676
  %678 = fmul <2 x double> %76, %673
  %679 = fmul <2 x double> %283, %676
  %680 = bitcast <2 x double> %678 to <2 x i64>
  %681 = xor <2 x i64> %680, <i64 -9223372036854775808, i64 -9223372036854775808>
  %682 = bitcast <2 x i64> %681 to <2 x double>
  %683 = fmul <2 x double> %677, %283
  %684 = fmul <2 x double> %284, %676
  %685 = fmul <2 x double> %284, %677
  %686 = fmul <2 x double> %281, %673
  %687 = fmul <2 x double> %76, %674
  %688 = fadd <2 x double> %679, %682
  %689 = fadd <2 x double> %683, %688
  %690 = fadd <2 x double> %684, %689
  %691 = fadd <2 x double> %685, %690
  %692 = fadd <2 x double> %686, %691
  %693 = fadd <2 x double> %692, %687
  %694 = and <2 x i64> %668, %8
  %695 = and <2 x i64> %680, %52
  %696 = or <2 x i64> %695, %694
  %697 = and <2 x i64> %672, %8
  %698 = bitcast <2 x double> %693 to <2 x i64>
  %699 = and <2 x i64> %698, %52
  %700 = or <2 x i64> %699, %697
  %701 = bitcast <2 x i64> %696 to <2 x double>
  %702 = bitcast <2 x i64> %700 to <2 x double>
  %703 = fadd <2 x double> %701, %702
  %704 = bitcast <2 x double> %703 to <2 x i64>
  %705 = select <2 x i1> %11, <2 x i64> %704, <2 x i64> zeroinitializer
  %706 = bitcast <2 x i64> %705 to <2 x double>
  %707 = bitcast <2 x double> %0 to <4 x i32>
  %708 = and <4 x i32> %707, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %709 = icmp eq <4 x i32> %708, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %710 = sext <4 x i1> %709 to <4 x i32>
  %711 = shufflevector <4 x i32> %710, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %712 = and <4 x i32> %711, %710
  %713 = bitcast <4 x i32> %712 to <2 x i64>
  %714 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %706
  %715 = bitcast <2 x double> %714 to <2 x i64>
  %716 = and <2 x i64> %715, %713
  %717 = xor <2 x i64> %713, <i64 -1, i64 -1>
  %718 = and <2 x i64> %705, %717
  %719 = or <2 x i64> %716, %718
  %720 = fcmp uno <2 x double> %0, zeroinitializer
  %721 = bitcast <2 x i64> %719 to <2 x double>
  %722 = select <2 x i1> %720, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %721
  ret <2 x double> %722
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospid2_u05sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  tail call void @Sleef_sincospid2_u05sse2(%struct.vdouble2* sret %0, <2 x double> %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospid2_u35sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>
  %14 = fadd <2 x double> %13, <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %15, <double 0x3E9507830918116C, double 0x3E9507830918116C>
  %17 = fmul <2 x double> %12, %16
  %18 = fadd <2 x double> %17, <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>
  %19 = fmul <2 x double> %12, %18
  %20 = fadd <2 x double> %19, <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>
  %21 = fmul <2 x double> %12, %20
  %22 = fadd <2 x double> %21, <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>
  %23 = fmul <2 x double> %12, %22
  %24 = fadd <2 x double> %23, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %25 = fmul <2 x double> %11, %24
  %26 = fmul <2 x double> %12, <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>
  %27 = fadd <2 x double> %26, <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>
  %28 = fmul <2 x double> %12, %27
  %29 = fadd <2 x double> %28, <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>
  %30 = fmul <2 x double> %12, %29
  %31 = fadd <2 x double> %30, <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>
  %32 = fmul <2 x double> %12, %31
  %33 = fadd <2 x double> %32, <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>
  %34 = fmul <2 x double> %12, %33
  %35 = fadd <2 x double> %34, <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>
  %36 = fmul <2 x double> %12, %35
  %37 = fadd <2 x double> %36, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %38 = fmul <2 x double> %12, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %41 = icmp eq <4 x i32> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = bitcast <2 x double> %25 to <2 x i64>
  %46 = and <2 x i64> %45, %44
  %47 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %48 = bitcast <2 x double> %39 to <2 x i64>
  %49 = and <2 x i64> %48, %47
  %50 = or <2 x i64> %49, %46
  %51 = and <2 x i64> %48, %44
  %52 = and <2 x i64> %45, %47
  %53 = or <2 x i64> %51, %52
  %54 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %55 = icmp eq <4 x i32> %54, <i32 4, i32 4, i32 0, i32 0>
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 -9223372036854775808, i64 -9223372036854775808>
  %60 = xor <2 x i64> %50, %59
  %61 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %62 = and <4 x i32> %61, <i32 4, i32 4, i32 0, i32 0>
  %63 = icmp eq <4 x i32> %62, <i32 4, i32 4, i32 0, i32 0>
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 -9223372036854775808, i64 -9223372036854775808>
  %68 = xor <2 x i64> %53, %67
  %69 = bitcast <2 x double> %1 to <2 x i64>
  %70 = and <2 x i64> %69, <i64 9223372036854775807, i64 9223372036854775807>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fcmp ule <2 x double> %71, <double 2.500000e+08, double 2.500000e+08>
  %73 = sext <2 x i1> %72 to <2 x i64>
  %74 = and <2 x i64> %60, %73
  %75 = and <2 x i64> %68, %73
  %76 = fcmp oeq <2 x double> %71, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = or <2 x i64> %74, %77
  %79 = or <2 x i64> %75, %77
  %80 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %80, align 16, !alias.scope !31
  %81 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %82 = bitcast <2 x double>* %81 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %82, align 16, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modfd2_sse2(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #3 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp ule <2 x double> %15, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = bitcast <2 x double> %12 to <2 x i64>
  %18 = select <2 x i1> %16, <2 x i64> %17, <2 x i64> zeroinitializer
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = and <2 x i64> %18, <i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <2 x i64> %20, %21
  %23 = fsub <2 x double> %1, %19
  %24 = bitcast <2 x double> %23 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 9223372036854775807, i64 9223372036854775807>
  %26 = or <2 x i64> %25, %21
  %27 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %27, align 16, !alias.scope !34
  %28 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %29 = bitcast <2 x double>* %28 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %29, align 16, !alias.scope !34
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_logd2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %25 = fdiv <2 x double> %23, %24
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, %26
  %28 = fmul <2 x double> %27, %27
  %29 = fmul <2 x double> %25, %26
  %30 = fmul <2 x double> %26, <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>
  %31 = fadd <2 x double> %30, <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>
  %32 = fmul <2 x double> %27, <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>
  %33 = fadd <2 x double> %32, %31
  %34 = fmul <2 x double> %26, <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>
  %35 = fadd <2 x double> %34, <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>
  %36 = fmul <2 x double> %26, <double 0x3FD99999998C136E, double 0x3FD99999998C136E>
  %37 = fadd <2 x double> %36, <double 0x3FE555555555593F, double 0x3FE555555555593F>
  %38 = fmul <2 x double> %27, %35
  %39 = fadd <2 x double> %37, %38
  %40 = fmul <2 x double> %28, %33
  %41 = fadd <2 x double> %40, %39
  %42 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %43 = and <4 x i32> %11, %42
  %44 = or <4 x i32> %22, %43
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %46 = sitofp <2 x i32> %45 to <2 x double>
  %47 = fmul <2 x double> %46, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %48 = fmul <2 x double> %25, <double 2.000000e+00, double 2.000000e+00>
  %49 = fadd <2 x double> %47, %48
  %50 = fmul <2 x double> %29, %41
  %51 = fadd <2 x double> %49, %50
  %52 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %53 = fcmp ult <2 x double> %5, zeroinitializer
  %54 = fcmp oeq <2 x double> %5, zeroinitializer
  %55 = select <2 x i1> %52, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %51
  %56 = select <2 x i1> %53, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %55
  %57 = select <2 x i1> %54, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %56
  ret <2 x double> %57
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_logd2_u10sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %75 = fadd <2 x double> %74, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %76 = fmul <2 x double> %72, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %79 = fadd <2 x double> %78, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %80 = fmul <2 x double> %71, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %81 = fadd <2 x double> %80, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %90 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %90, %93
  %95 = fmul <2 x double> %90, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %96 = fmul <2 x double> %93, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %93, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %101 = fmul <2 x double> %94, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %102 = fmul <2 x double> %94, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %103 = fmul <2 x double> %90, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %104 = fadd <2 x double> %96, %99
  %105 = fadd <2 x double> %100, %104
  %106 = fadd <2 x double> %101, %105
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fmul <2 x double> %48, <double 2.000000e+00, double 2.000000e+00>
  %110 = fmul <2 x double> %70, <double 2.000000e+00, double 2.000000e+00>
  %111 = fadd <2 x double> %95, %109
  %112 = fsub <2 x double> %95, %111
  %113 = fadd <2 x double> %109, %112
  %114 = fadd <2 x double> %113, %108
  %115 = fadd <2 x double> %114, %110
  %116 = fmul <2 x double> %48, %71
  %117 = fmul <2 x double> %116, %85
  %118 = fadd <2 x double> %111, %117
  %119 = fsub <2 x double> %111, %118
  %120 = fadd <2 x double> %117, %119
  %121 = fadd <2 x double> %120, %115
  %122 = fadd <2 x double> %118, %121
  %123 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %124 = fcmp ult <2 x double> %5, zeroinitializer
  %125 = fcmp oeq <2 x double> %5, zeroinitializer
  %126 = select <2 x i1> %123, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %122
  %127 = select <2 x i1> %124, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %126
  %128 = select <2 x i1> %125, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %127
  ret <2 x double> %128
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_powd2_u10sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = tail call <2 x double> @Sleef_powd2_u10sse2(<2 x double> %0, <2 x double> %1)
  ret <2 x double> %3
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sinhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_sinhd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_coshd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_coshd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_tanhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_tanhd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sinhd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %8 = sitofp <2 x i32> %7 to <2 x double>
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %8) #6
  %10 = fmul <2 x double> %8, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %11 = fadd <2 x double> %10, %4
  %12 = fmul <2 x double> %8, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %13 = fadd <2 x double> %12, %11
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %13, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %18 = fadd <2 x double> %17, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %19 = fmul <2 x double> %13, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %20 = fadd <2 x double> %19, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %21 = fmul <2 x double> %13, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %22 = fadd <2 x double> %21, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %23 = fmul <2 x double> %14, %20
  %24 = fadd <2 x double> %22, %23
  %25 = fmul <2 x double> %13, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %26 = fadd <2 x double> %25, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %27 = fmul <2 x double> %13, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %28 = fadd <2 x double> %27, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %29 = fmul <2 x double> %14, %26
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %15, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fmul <2 x double> %18, %16
  %34 = fadd <2 x double> %33, %32
  %35 = fmul <2 x double> %13, %14
  %36 = fmul <2 x double> %35, %34
  %37 = fmul <2 x double> %14, <double 5.000000e-01, double 5.000000e-01>
  %38 = fadd <2 x double> %37, %36
  %39 = fadd <2 x double> %13, %38
  %40 = icmp eq <4 x i32> %9, zeroinitializer
  %41 = sext <4 x i1> %40 to <4 x i32>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = fadd <2 x double> %39, <double 1.000000e+00, double 1.000000e+00>
  %45 = ashr <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %46 = add <4 x i32> %45, <i32 1023, i32 1023, i32 undef, i32 0>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %48 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %49 = shl <4 x i32> %48, <i32 20, i32 20, i32 20, i32 20>
  %50 = bitcast <4 x i32> %49 to <2 x double>
  %51 = fmul <2 x double> %44, %50
  %52 = add <4 x i32> %9, <i32 1023, i32 1023, i32 undef, i32 0>
  %53 = sub <4 x i32> %52, %45
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %55 = and <4 x i32> %54, <i32 0, i32 -1, i32 0, i32 -1>
  %56 = shl <4 x i32> %55, <i32 20, i32 20, i32 20, i32 20>
  %57 = bitcast <4 x i32> %56 to <2 x double>
  %58 = fmul <2 x double> %51, %57
  %59 = fadd <2 x double> %58, <double -1.000000e+00, double -1.000000e+00>
  %60 = bitcast <2 x double> %39 to <2 x i64>
  %61 = and <2 x i64> %60, %43
  %62 = xor <2 x i64> %43, <i64 -1, i64 -1>
  %63 = bitcast <2 x double> %59 to <2 x i64>
  %64 = and <2 x i64> %63, %62
  %65 = or <2 x i64> %64, %61
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fadd <2 x double> %66, <double 2.000000e+00, double 2.000000e+00>
  %68 = fadd <2 x double> %66, <double 1.000000e+00, double 1.000000e+00>
  %69 = fdiv <2 x double> %67, %68
  %70 = fmul <2 x double> %66, <double 5.000000e-01, double 5.000000e-01>
  %71 = fmul <2 x double> %70, %69
  %72 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %73 = fcmp uno <2 x double> %71, zeroinitializer
  %74 = or <2 x i1> %73, %72
  %75 = bitcast <2 x double> %71 to <2 x i64>
  %76 = select <2 x i1> %74, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %75
  %77 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %78 = xor <2 x i64> %76, %77
  %79 = fcmp uno <2 x double> %0, zeroinitializer
  %80 = bitcast <2 x i64> %78 to <2 x double>
  %81 = select <2 x i1> %79, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %80
  ret <2 x double> %81
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_coshd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %5) #6
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %8 = sitofp <2 x i32> %7 to <2 x double>
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %8) #6
  %10 = fmul <2 x double> %8, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %11 = fadd <2 x double> %10, %4
  %12 = fmul <2 x double> %8, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %13 = fadd <2 x double> %12, %11
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %13, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %18 = fadd <2 x double> %17, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %19 = fmul <2 x double> %13, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %20 = fadd <2 x double> %19, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %21 = fmul <2 x double> %13, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %22 = fadd <2 x double> %21, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %23 = fmul <2 x double> %14, %20
  %24 = fadd <2 x double> %22, %23
  %25 = fmul <2 x double> %13, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %26 = fadd <2 x double> %25, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %27 = fmul <2 x double> %13, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %28 = fadd <2 x double> %27, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %29 = fmul <2 x double> %14, %26
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %15, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fmul <2 x double> %18, %16
  %34 = fadd <2 x double> %33, %32
  %35 = fmul <2 x double> %13, %34
  %36 = fadd <2 x double> %35, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %14, %36
  %38 = fadd <2 x double> %13, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = ashr <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %41 = add <4 x i32> %40, <i32 1023, i32 1023, i32 undef, i32 0>
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %43 = and <4 x i32> %42, <i32 0, i32 -1, i32 0, i32 -1>
  %44 = shl <4 x i32> %43, <i32 20, i32 20, i32 20, i32 20>
  %45 = bitcast <4 x i32> %44 to <2 x double>
  %46 = fmul <2 x double> %39, %45
  %47 = add <4 x i32> %9, <i32 1023, i32 1023, i32 undef, i32 0>
  %48 = sub <4 x i32> %47, %40
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %50 = and <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = shl <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = bitcast <4 x i32> %51 to <2 x double>
  %53 = fmul <2 x double> %46, %52
  %54 = fcmp ogt <2 x double> %4, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %55 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %56 = select <2 x i1> %54, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %53
  %57 = select <2 x i1> %55, <2 x double> %56, <2 x double> zeroinitializer
  %58 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %57
  %59 = fmul <2 x double> %57, <double 5.000000e-01, double 5.000000e-01>
  %60 = fadd <2 x double> %59, %58
  %61 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %62 = fcmp uno <2 x double> %60, zeroinitializer
  %63 = or <2 x i1> %62, %61
  %64 = fcmp uno <2 x double> %0, zeroinitializer
  %65 = select <2 x i1> %63, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %60
  %66 = select <2 x i1> %64, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %65
  ret <2 x double> %66
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_tanhd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %9 = sitofp <2 x i32> %8 to <2 x double>
  %10 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %9) #6
  %11 = fmul <2 x double> %9, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %12 = fadd <2 x double> %5, %11
  %13 = fmul <2 x double> %9, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %14 = fadd <2 x double> %13, %12
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %16, %16
  %18 = fmul <2 x double> %14, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %19 = fadd <2 x double> %18, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %20 = fmul <2 x double> %14, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %21 = fadd <2 x double> %20, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %22 = fmul <2 x double> %14, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %23 = fadd <2 x double> %22, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %24 = fmul <2 x double> %15, %21
  %25 = fadd <2 x double> %23, %24
  %26 = fmul <2 x double> %14, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %27 = fadd <2 x double> %26, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %28 = fmul <2 x double> %14, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %29 = fadd <2 x double> %28, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %30 = fmul <2 x double> %15, %27
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %16, %25
  %33 = fadd <2 x double> %31, %32
  %34 = fmul <2 x double> %19, %17
  %35 = fadd <2 x double> %34, %33
  %36 = fmul <2 x double> %14, %15
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %15, <double 5.000000e-01, double 5.000000e-01>
  %39 = fadd <2 x double> %38, %37
  %40 = fadd <2 x double> %14, %39
  %41 = icmp eq <4 x i32> %10, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  %45 = fadd <2 x double> %40, <double 1.000000e+00, double 1.000000e+00>
  %46 = ashr <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %47 = add <4 x i32> %46, <i32 1023, i32 1023, i32 undef, i32 0>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %49 = and <4 x i32> %48, <i32 0, i32 -1, i32 0, i32 -1>
  %50 = shl <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = bitcast <4 x i32> %50 to <2 x double>
  %52 = fmul <2 x double> %45, %51
  %53 = add <4 x i32> %10, <i32 1023, i32 1023, i32 undef, i32 0>
  %54 = sub <4 x i32> %53, %46
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %56 = and <4 x i32> %55, <i32 0, i32 -1, i32 0, i32 -1>
  %57 = shl <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %52, %58
  %60 = fadd <2 x double> %59, <double -1.000000e+00, double -1.000000e+00>
  %61 = bitcast <2 x double> %40 to <2 x i64>
  %62 = and <2 x i64> %61, %44
  %63 = xor <2 x i64> %44, <i64 -1, i64 -1>
  %64 = bitcast <2 x double> %60 to <2 x i64>
  %65 = and <2 x i64> %64, %63
  %66 = or <2 x i64> %65, %62
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fadd <2 x double> %67, <double 2.000000e+00, double 2.000000e+00>
  %69 = fdiv <2 x double> %67, %68
  %70 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %71 = fcmp uno <2 x double> %69, zeroinitializer
  %72 = or <2 x i1> %71, %70
  %73 = bitcast <2 x double> %69 to <2 x i64>
  %74 = select <2 x i1> %72, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %73
  %75 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %76 = xor <2 x i64> %74, %75
  %77 = fcmp uno <2 x double> %0, zeroinitializer
  %78 = bitcast <2 x i64> %76 to <2 x double>
  %79 = select <2 x i1> %77, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %78
  ret <2 x double> %79
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_asinhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_asinhd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_acoshd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_acoshd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_atanhd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_atanhd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_cbrtd2_u35sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = select <2 x i1> %5, <2 x double> %7, <2 x double> %4
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = and <4 x i32> %10, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %12 = lshr exact <4 x i32> %11, <i32 20, i32 20, i32 20, i32 20>
  %13 = bitcast <2 x i64> %6 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 5682241733931, i64 0>
  %17 = xor <2 x i64> %15, <i64 4393751544831, i64 4393751544831>
  %18 = and <2 x i64> %17, <i64 4393751544831, i64 0>
  %19 = or <2 x i64> %18, %16
  %20 = bitcast <2 x i64> %19 to <4 x i32>
  %21 = sub <4 x i32> %12, %20
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 undef, i32 undef>
  %23 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %21
  %24 = ashr <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = add <4 x i32> %24, <i32 1023, i32 1023, i32 undef, i32 0>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %27 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = bitcast <4 x i32> %28 to <2 x double>
  %30 = fmul <2 x double> %29, %0
  %31 = add <4 x i32> %23, <i32 1023, i32 1023, i32 undef, i32 0>
  %32 = sub <4 x i32> %31, %24
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  %38 = shufflevector <4 x i32> %22, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %39 = sitofp <2 x i32> %38 to <2 x double>
  %40 = fadd <2 x double> %39, <double 6.144000e+03, double 6.144000e+03>
  %41 = fmul <2 x double> %40, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %41) #6
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %44 = sitofp <2 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %44, <double 3.000000e+00, double 3.000000e+00>
  %46 = fsub <2 x double> %40, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %46) #6
  %48 = icmp eq <4 x i32> %47, <i32 1, i32 1, i32 0, i32 0>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 4608352999143469707, i64 4608352999143469707>
  %53 = and <2 x i64> %51, <i64 4607182418800017408, i64 4607182418800017408>
  %54 = xor <2 x i64> %53, <i64 4607182418800017408, i64 4607182418800017408>
  %55 = or <2 x i64> %54, %52
  %56 = icmp eq <4 x i32> %47, <i32 2, i32 2, i32 0, i32 0>
  %57 = sext <4 x i1> %56 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 4609827837958778429, i64 4609827837958778429>
  %61 = xor <2 x i64> %59, <i64 -1, i64 -1>
  %62 = and <2 x i64> %55, %61
  %63 = or <2 x i64> %62, %60
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = add <4 x i32> %42, <i32 -2048, i32 -2048, i32 0, i32 0>
  %66 = ashr <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  %67 = add <4 x i32> %66, <i32 1023, i32 1023, i32 undef, i32 0>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %69 = and <4 x i32> %68, <i32 0, i32 -1, i32 0, i32 -1>
  %70 = shl <4 x i32> %69, <i32 20, i32 20, i32 20, i32 20>
  %71 = bitcast <4 x i32> %70 to <2 x double>
  %72 = fmul <2 x double> %71, %64
  %73 = add <4 x i32> %42, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %74 = sub <4 x i32> %73, %66
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %76 = and <4 x i32> %75, <i32 0, i32 -1, i32 0, i32 -1>
  %77 = shl <4 x i32> %76, <i32 20, i32 20, i32 20, i32 20>
  %78 = bitcast <4 x i32> %77 to <2 x double>
  %79 = fmul <2 x double> %72, %78
  %80 = bitcast <2 x double> %79 to <2 x i64>
  %81 = bitcast <2 x double> %37 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = xor <2 x i64> %82, %80
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = and <2 x i64> %81, <i64 9223372036854775807, i64 9223372036854775807>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %86, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %88 = fadd <2 x double> %87, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %89 = fmul <2 x double> %88, %86
  %90 = fadd <2 x double> %89, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %91 = fmul <2 x double> %90, %86
  %92 = fadd <2 x double> %91, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %93 = fmul <2 x double> %92, %86
  %94 = fadd <2 x double> %93, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %95 = fmul <2 x double> %94, %86
  %96 = fadd <2 x double> %95, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %97 = fmul <2 x double> %96, %96
  %98 = fmul <2 x double> %97, %97
  %99 = fmul <2 x double> %98, %86
  %100 = fsub <2 x double> %99, %96
  %101 = fmul <2 x double> %100, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %102 = fsub <2 x double> %96, %101
  %103 = fmul <2 x double> %102, %86
  %104 = fmul <2 x double> %102, %103
  %105 = fmul <2 x double> %104, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %106 = fmul <2 x double> %102, %104
  %107 = fadd <2 x double> %106, <double -1.000000e+00, double -1.000000e+00>
  %108 = fmul <2 x double> %105, %107
  %109 = fsub <2 x double> %104, %108
  %110 = fmul <2 x double> %109, %84
  ret <2 x double> %110
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_cbrtd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_cbrtd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_expm1d2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_expm1d2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log10d2_u10sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>
  %75 = fadd <2 x double> %74, <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>
  %76 = fmul <2 x double> %72, <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>
  %79 = fadd <2 x double> %78, <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>
  %80 = fmul <2 x double> %71, <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>
  %81 = fadd <2 x double> %80, <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %90 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %90, %93
  %95 = fmul <2 x double> %90, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %96 = fmul <2 x double> %93, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %93, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %101 = fmul <2 x double> %94, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %102 = fmul <2 x double> %94, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %103 = fmul <2 x double> %90, <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>
  %104 = fadd <2 x double> %96, %99
  %105 = fadd <2 x double> %100, %104
  %106 = fadd <2 x double> %101, %105
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = bitcast <2 x double> %48 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -134217728, i64 -134217728>
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fsub <2 x double> %48, %111
  %113 = fmul <2 x double> %48, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %114 = fmul <2 x double> %111, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %115 = bitcast <2 x double> %113 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fmul <2 x double> %112, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %119 = fmul <2 x double> %111, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %120 = fmul <2 x double> %112, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %121 = fmul <2 x double> %48, <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>
  %122 = fmul <2 x double> %70, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %123 = fadd <2 x double> %114, %117
  %124 = fadd <2 x double> %118, %123
  %125 = fadd <2 x double> %119, %124
  %126 = fadd <2 x double> %120, %125
  %127 = fadd <2 x double> %121, %126
  %128 = fadd <2 x double> %127, %122
  %129 = fadd <2 x double> %95, %113
  %130 = fsub <2 x double> %95, %129
  %131 = fadd <2 x double> %113, %130
  %132 = fadd <2 x double> %131, %108
  %133 = fadd <2 x double> %132, %128
  %134 = fmul <2 x double> %48, %71
  %135 = fmul <2 x double> %134, %85
  %136 = fadd <2 x double> %129, %135
  %137 = fsub <2 x double> %129, %136
  %138 = fadd <2 x double> %135, %137
  %139 = fadd <2 x double> %138, %133
  %140 = fadd <2 x double> %136, %139
  %141 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %142 = fcmp ult <2 x double> %5, zeroinitializer
  %143 = fcmp oeq <2 x double> %5, zeroinitializer
  %144 = select <2 x i1> %141, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %140
  %145 = select <2 x i1> %142, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %144
  %146 = select <2 x i1> %143, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %145
  ret <2 x double> %146
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log2d2_u10sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %23, <double 1.000000e+00, double 1.000000e+00>
  %25 = fsub <2 x double> %23, %24
  %26 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %25
  %27 = fsub <2 x double> %18, %24
  %28 = fadd <2 x double> %27, %26
  %29 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %30 = fadd <2 x double> %29, <double -1.000000e+00, double -1.000000e+00>
  %31 = fsub <2 x double> %29, %30
  %32 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %33 = fsub <2 x double> %18, %30
  %34 = fadd <2 x double> %33, %32
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %29
  %36 = bitcast <2 x double> %29 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %29, %38
  %40 = bitcast <2 x double> %35 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %35, %42
  %44 = bitcast <2 x double> %23 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %23, %46
  %48 = fmul <2 x double> %23, %35
  %49 = fmul <2 x double> %46, %42
  %50 = fsub <2 x double> %49, %48
  %51 = fmul <2 x double> %43, %46
  %52 = fmul <2 x double> %47, %42
  %53 = fmul <2 x double> %47, %43
  %54 = fmul <2 x double> %38, %42
  %55 = fmul <2 x double> %43, %38
  %56 = fmul <2 x double> %39, %42
  %57 = fmul <2 x double> %39, %43
  %58 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %54
  %59 = fsub <2 x double> %58, %55
  %60 = fsub <2 x double> %59, %56
  %61 = fsub <2 x double> %60, %57
  %62 = fmul <2 x double> %48, %61
  %63 = fadd <2 x double> %50, %51
  %64 = fadd <2 x double> %52, %63
  %65 = fadd <2 x double> %53, %64
  %66 = fadd <2 x double> %65, %62
  %67 = fmul <2 x double> %48, %34
  %68 = fsub <2 x double> %28, %67
  %69 = fmul <2 x double> %35, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %48, %48
  %72 = fmul <2 x double> %71, %71
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %71, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %75 = fadd <2 x double> %74, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %76 = fmul <2 x double> %72, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %77 = fadd <2 x double> %76, %75
  %78 = fmul <2 x double> %71, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %79 = fadd <2 x double> %78, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %80 = fmul <2 x double> %71, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %81 = fadd <2 x double> %80, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %82 = fmul <2 x double> %72, %79
  %83 = fadd <2 x double> %81, %82
  %84 = fmul <2 x double> %73, %77
  %85 = fadd <2 x double> %84, %83
  %86 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %87 = and <4 x i32> %11, %86
  %88 = or <4 x i32> %22, %87
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %90 = sitofp <2 x i32> %89 to <2 x double>
  %91 = bitcast <2 x double> %48 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %48, %93
  %95 = fmul <2 x double> %48, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %96 = fmul <2 x double> %93, <double 0x4007154760000000, double 0x4007154760000000>
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %94, <double 0x4007154760000000, double 0x4007154760000000>
  %101 = fmul <2 x double> %93, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %102 = fmul <2 x double> %94, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %103 = fmul <2 x double> %48, <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>
  %104 = fmul <2 x double> %70, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %105 = fadd <2 x double> %96, %99
  %106 = fadd <2 x double> %100, %105
  %107 = fadd <2 x double> %101, %106
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %103, %108
  %110 = fadd <2 x double> %109, %104
  %111 = fadd <2 x double> %95, %90
  %112 = fsub <2 x double> %111, %90
  %113 = fsub <2 x double> %111, %112
  %114 = fsub <2 x double> %90, %113
  %115 = fsub <2 x double> %95, %112
  %116 = fadd <2 x double> %115, %114
  %117 = fadd <2 x double> %116, %110
  %118 = fmul <2 x double> %48, %71
  %119 = fmul <2 x double> %118, %85
  %120 = fadd <2 x double> %111, %119
  %121 = fsub <2 x double> %120, %111
  %122 = fsub <2 x double> %120, %121
  %123 = fsub <2 x double> %111, %122
  %124 = fsub <2 x double> %119, %121
  %125 = fadd <2 x double> %124, %123
  %126 = fadd <2 x double> %125, %117
  %127 = fadd <2 x double> %120, %126
  %128 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %129 = fcmp ult <2 x double> %5, zeroinitializer
  %130 = fcmp oeq <2 x double> %5, zeroinitializer
  %131 = select <2 x i1> %128, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %127
  %132 = select <2 x i1> %129, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %131
  %133 = select <2 x i1> %130, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %132
  ret <2 x double> %133
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log2d2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = select <2 x i1> %2, <2 x double> %4, <2 x double> %0
  %6 = fmul <2 x double> %5, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %7 = bitcast <2 x double> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %9 = lshr <4 x i32> %8, <i32 20, i32 20, i32 20, i32 20>
  %10 = and <4 x i32> %9, <i32 2047, i32 2047, i32 0, i32 0>
  %11 = add nsw <4 x i32> %10, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %12 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %10
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %14 = and <4 x i32> %13, <i32 0, i32 -1, i32 0, i32 -1>
  %15 = shl <4 x i32> %14, <i32 20, i32 20, i32 20, i32 20>
  %16 = bitcast <2 x double> %5 to <4 x i32>
  %17 = add <4 x i32> %15, %16
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = bitcast <2 x i64> %3 to <4 x i32>
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %21 = add nsw <4 x i32> %10, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %22 = and <4 x i32> %21, %20
  %23 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %24 = fadd <2 x double> %18, <double 1.000000e+00, double 1.000000e+00>
  %25 = fdiv <2 x double> %23, %24
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %28 = fadd <2 x double> %27, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %29 = fmul <2 x double> %26, %28
  %30 = fadd <2 x double> %29, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %31 = fmul <2 x double> %26, %30
  %32 = fadd <2 x double> %31, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %33 = fmul <2 x double> %26, %32
  %34 = fadd <2 x double> %33, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %35 = fmul <2 x double> %26, %34
  %36 = fadd <2 x double> %35, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %37 = fmul <2 x double> %26, %36
  %38 = fadd <2 x double> %37, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %39 = xor <4 x i32> %20, <i32 -1, i32 -1, i32 undef, i32 undef>
  %40 = and <4 x i32> %11, %39
  %41 = or <4 x i32> %22, %40
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %43 = sitofp <2 x i32> %42 to <2 x double>
  %44 = bitcast <2 x double> %25 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %25, %46
  %48 = fmul <2 x double> %25, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %49 = fmul <2 x double> %46, <double 0x4007154760000000, double 0x4007154760000000>
  %50 = bitcast <2 x double> %48 to <2 x i64>
  %51 = xor <2 x i64> %50, <i64 -9223372036854775808, i64 -9223372036854775808>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fmul <2 x double> %47, <double 0x4007154760000000, double 0x4007154760000000>
  %54 = fmul <2 x double> %46, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %55 = fmul <2 x double> %47, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %56 = fadd <2 x double> %49, %52
  %57 = fadd <2 x double> %53, %56
  %58 = fadd <2 x double> %54, %57
  %59 = fadd <2 x double> %55, %58
  %60 = fadd <2 x double> %48, %43
  %61 = fsub <2 x double> %43, %60
  %62 = fadd <2 x double> %48, %61
  %63 = fadd <2 x double> %62, %59
  %64 = fmul <2 x double> %25, %26
  %65 = fadd <2 x double> %60, %63
  %66 = fmul <2 x double> %64, %38
  %67 = fadd <2 x double> %65, %66
  %68 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %69 = fcmp ult <2 x double> %5, zeroinitializer
  %70 = fcmp oeq <2 x double> %5, zeroinitializer
  %71 = select <2 x i1> %68, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %67
  %72 = select <2 x i1> %69, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %71
  %73 = select <2 x i1> %70, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %72
  ret <2 x double> %73
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log1pd2_u10sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fcmp olt <2 x double> %2, <double 0x10000000000000, double 0x10000000000000>
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = select <2 x i1> %3, <2 x double> %5, <2 x double> %2
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 undef, i32 undef>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = add <4 x i32> %16, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %18 = bitcast <4 x i32> %17 to <2 x double>
  %19 = fadd <2 x double> %18, <double -1.000000e+00, double -1.000000e+00>
  %20 = fmul <2 x double> %18, %0
  %21 = fadd <2 x double> %20, %19
  %22 = bitcast <2 x i64> %4 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %24 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 undef, i32 undef>
  %25 = and <4 x i32> %24, %23
  %26 = xor <4 x i32> %23, <i32 -1, i32 -1, i32 undef, i32 undef>
  %27 = and <4 x i32> %12, %26
  %28 = or <4 x i32> %25, %27
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %30 = sitofp <2 x i32> %29 to <2 x double>
  %31 = bitcast <2 x double> %30 to <2 x i64>
  %32 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fsub <2 x double> %30, %33
  %35 = fmul <2 x double> %30, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %36 = fmul <2 x double> %33, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %37 = bitcast <2 x double> %35 to <2 x i64>
  %38 = xor <2 x i64> %37, <i64 -9223372036854775808, i64 -9223372036854775808>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fmul <2 x double> %33, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %41 = fmul <2 x double> %34, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %42 = fmul <2 x double> %34, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %43 = fmul <2 x double> %30, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %44 = fadd <2 x double> %36, %39
  %45 = fadd <2 x double> %40, %44
  %46 = fadd <2 x double> %41, %45
  %47 = fadd <2 x double> %42, %46
  %48 = fadd <2 x double> %43, %47
  %49 = fadd <2 x double> %21, <double 2.000000e+00, double 2.000000e+00>
  %50 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %49
  %51 = fadd <2 x double> %21, %50
  %52 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %53 = bitcast <2 x double> %49 to <2 x i64>
  %54 = and <2 x i64> %53, <i64 -134217728, i64 -134217728>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fsub <2 x double> %49, %55
  %57 = bitcast <2 x double> %52 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 -134217728, i64 -134217728>
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fsub <2 x double> %52, %59
  %61 = bitcast <2 x double> %21 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 -134217728, i64 -134217728>
  %63 = bitcast <2 x i64> %62 to <2 x double>
  %64 = fsub <2 x double> %21, %63
  %65 = fmul <2 x double> %21, %52
  %66 = fmul <2 x double> %63, %59
  %67 = fsub <2 x double> %66, %65
  %68 = fmul <2 x double> %60, %63
  %69 = fmul <2 x double> %64, %59
  %70 = fmul <2 x double> %64, %60
  %71 = fmul <2 x double> %55, %59
  %72 = fmul <2 x double> %60, %55
  %73 = fmul <2 x double> %56, %59
  %74 = fmul <2 x double> %56, %60
  %75 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %71
  %76 = fsub <2 x double> %75, %72
  %77 = fsub <2 x double> %76, %73
  %78 = fsub <2 x double> %77, %74
  %79 = fmul <2 x double> %65, %78
  %80 = fadd <2 x double> %67, %68
  %81 = fadd <2 x double> %69, %80
  %82 = fadd <2 x double> %70, %81
  %83 = fadd <2 x double> %82, %79
  %84 = fmul <2 x double> %65, %51
  %85 = fsub <2 x double> zeroinitializer, %84
  %86 = fmul <2 x double> %52, %85
  %87 = fadd <2 x double> %86, %83
  %88 = fmul <2 x double> %65, %65
  %89 = fmul <2 x double> %88, %88
  %90 = fmul <2 x double> %89, %89
  %91 = fmul <2 x double> %88, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %92 = fadd <2 x double> %91, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %93 = fmul <2 x double> %89, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %94 = fadd <2 x double> %93, %92
  %95 = fmul <2 x double> %88, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %96 = fadd <2 x double> %95, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %97 = fmul <2 x double> %88, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %98 = fadd <2 x double> %97, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %99 = fmul <2 x double> %89, %96
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %90, %94
  %102 = fadd <2 x double> %101, %100
  %103 = fmul <2 x double> %65, <double 2.000000e+00, double 2.000000e+00>
  %104 = fmul <2 x double> %87, <double 2.000000e+00, double 2.000000e+00>
  %105 = fadd <2 x double> %35, %103
  %106 = fsub <2 x double> %35, %105
  %107 = fadd <2 x double> %103, %106
  %108 = fadd <2 x double> %48, %107
  %109 = fadd <2 x double> %108, %104
  %110 = fmul <2 x double> %65, %88
  %111 = fmul <2 x double> %110, %102
  %112 = fadd <2 x double> %105, %111
  %113 = fsub <2 x double> %105, %112
  %114 = fadd <2 x double> %111, %113
  %115 = fadd <2 x double> %114, %109
  %116 = fadd <2 x double> %112, %115
  %117 = fcmp ogt <2 x double> %0, <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>
  %118 = bitcast <2 x double> %116 to <2 x i64>
  %119 = select <2 x i1> %117, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %118
  %120 = fcmp olt <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %121 = fcmp uno <2 x double> %0, zeroinitializer
  %122 = or <2 x i1> %121, %120
  %123 = select <2 x i1> %122, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %119
  %124 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %125 = select <2 x i1> %124, <2 x i64> <i64 -4503599627370496, i64 -4503599627370496>, <2 x i64> %123
  %126 = bitcast <2 x double> %0 to <4 x i32>
  %127 = icmp eq <4 x i32> %126, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %130 = and <4 x i32> %129, %128
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = and <2 x i64> %131, <i64 -9223372036854775808, i64 -9223372036854775808>
  %133 = xor <2 x i64> %131, <i64 -1, i64 -1>
  %134 = and <2 x i64> %125, %133
  %135 = or <2 x i64> %134, %132
  %136 = bitcast <2 x i64> %135 to <2 x double>
  ret <2 x double> %136
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fabsd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_copysignd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmaxd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #6
  %5 = select <2 x i1> %3, <2 x double> %0, <2 x double> %4
  ret <2 x double> %5
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmind2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #6
  %5 = select <2 x i1> %3, <2 x double> %0, <2 x double> %4
  ret <2 x double> %5
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fdimd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = fcmp uge <2 x double> %3, zeroinitializer
  %5 = fcmp une <2 x double> %0, %1
  %6 = and <2 x i1> %4, %5
  %7 = select <2 x i1> %6, <2 x double> %3, <2 x double> zeroinitializer
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_truncd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = bitcast <2 x double> %0 to <2 x i64>
  %13 = and <2 x i64> %12, <i64 9223372036854775807, i64 9223372036854775807>
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = fcmp oeq <2 x double> %14, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %16 = fcmp oge <2 x double> %14, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = or <2 x i1> %16, %15
  %18 = fsub <2 x double> %0, %11
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 9223372036854775807, i64 9223372036854775807>
  %21 = and <2 x i64> %12, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = or <2 x i64> %20, %21
  %23 = select <2 x i1> %17, <2 x i64> %12, <2 x i64> %22
  %24 = bitcast <2 x i64> %23 to <2 x double>
  ret <2 x double> %24
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_floord2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp olt <2 x double> %11, zeroinitializer
  %13 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %14 = select <2 x i1> %12, <2 x double> %13, <2 x double> %11
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = fcmp oge <2 x double> %17, <double 0x4330000000000000, double 0x4330000000000000>
  %20 = or <2 x i1> %19, %18
  %21 = fsub <2 x double> %0, %14
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372036854775807, i64 9223372036854775807>
  %24 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %25 = or <2 x i64> %23, %24
  %26 = select <2 x i1> %20, <2 x i64> %15, <2 x i64> %25
  %27 = bitcast <2 x i64> %26 to <2 x double>
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_ceild2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp ole <2 x double> %11, zeroinitializer
  %13 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %14 = select <2 x i1> %12, <2 x double> %11, <2 x double> %13
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %15, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp oeq <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = fcmp oge <2 x double> %17, <double 0x4330000000000000, double 0x4330000000000000>
  %20 = or <2 x i1> %19, %18
  %21 = fsub <2 x double> %0, %14
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 9223372036854775807, i64 9223372036854775807>
  %24 = and <2 x i64> %15, <i64 -9223372036854775808, i64 -9223372036854775808>
  %25 = or <2 x i64> %23, %24
  %26 = select <2 x i1> %20, <2 x i64> %15, <2 x i64> %25
  %27 = bitcast <2 x i64> %26 to <2 x double>
  ret <2 x double> %27
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_roundd2_sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = fcmp ole <2 x double> %2, zeroinitializer
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = and <2 x i1> %14, %13
  %16 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %17 = select <2 x i1> %15, <2 x double> %16, <2 x double> %2
  %18 = fcmp olt <2 x double> %12, zeroinitializer
  %19 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %20 = select <2 x i1> %18, <2 x double> %19, <2 x double> %12
  %21 = fcmp une <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %22 = select <2 x i1> %21, <2 x double> %17, <2 x double> zeroinitializer
  %23 = bitcast <2 x double> %0 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 9223372036854775807, i64 9223372036854775807>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fcmp oeq <2 x double> %25, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %27 = fcmp oge <2 x double> %25, <double 0x4330000000000000, double 0x4330000000000000>
  %28 = or <2 x i1> %27, %26
  %29 = fsub <2 x double> %22, %20
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 9223372036854775807, i64 9223372036854775807>
  %32 = and <2 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808>
  %33 = or <2 x i64> %31, %32
  %34 = select <2 x i1> %28, <2 x i64> %23, <2 x i64> %33
  %35 = bitcast <2 x i64> %34 to <2 x double>
  ret <2 x double> %35
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_rintd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %4 = or <2 x i64> %3, <i64 4841369599423283200, i64 4841369599423283200>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = fcmp ogt <2 x double> %7, <double 0x4330000000000000, double 0x4330000000000000>
  %9 = fadd <2 x double> %5, %0
  %10 = fsub <2 x double> %9, %5
  %11 = bitcast <2 x double> %10 to <2 x i64>
  %12 = or <2 x i64> %3, %11
  %13 = select <2 x i1> %8, <2 x i64> %2, <2 x i64> %12
  %14 = bitcast <2 x i64> %13 to <2 x double>
  ret <2 x double> %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_nextafterd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = bitcast <2 x double> %1 to <2 x i64>
  %5 = and <2 x i64> %4, <i64 -9223372036854775808, i64 -9223372036854775808>
  %6 = bitcast <2 x double> %0 to <2 x i64>
  %7 = select <2 x i1> %3, <2 x i64> %5, <2 x i64> %6
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = and <4 x i32> %9, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %11 = icmp eq <4 x i32> %10, <i32 0, i32 -2147483648, i32 0, i32 -2147483648>
  %12 = sext <4 x i1> %11 to <4 x i32>
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %14 = and <4 x i32> %13, %12
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = fcmp ole <2 x double> %8, %1
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = xor <2 x i64> %15, %17
  %19 = xor <4 x i32> %9, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %20 = add <4 x i32> %19, <i32 1, i32 0, i32 1, i32 0>
  %21 = icmp eq <4 x i32> %20, <i32 0, i32 -1, i32 0, i32 -1>
  %22 = sext <4 x i1> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 1, i64 1>
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %27 = bitcast <4 x float> %26 to <4 x i32>
  %28 = add <4 x i32> %20, %27
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = and <2 x i64> %18, %29
  %31 = xor <2 x i64> %18, <i64 -1, i64 -1>
  %32 = and <2 x i64> %7, %31
  %33 = or <2 x i64> %30, %32
  %34 = fcmp une <2 x double> %8, %1
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = bitcast <2 x i64> %33 to <4 x i32>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  %38 = and <4 x i32> %37, <i32 1, i32 0, i32 1, i32 0>
  %39 = sub <4 x i32> %36, %38
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = icmp eq <4 x i32> %39, <i32 -1, i32 0, i32 -1, i32 0>
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = and <2 x i64> %43, <i64 4294967295, i64 4294967295>
  %45 = bitcast <2 x i64> %44 to <4 x float>
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = add <4 x i32> %39, %47
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = select <2 x i1> %34, <2 x i64> %49, <2 x i64> %40
  %51 = bitcast <2 x i64> %50 to <4 x i32>
  %52 = xor <4 x i32> %51, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %53 = add <4 x i32> %52, <i32 1, i32 0, i32 1, i32 0>
  %54 = icmp eq <4 x i32> %53, <i32 0, i32 -1, i32 0, i32 -1>
  %55 = sext <4 x i1> %54 to <4 x i32>
  %56 = bitcast <4 x i32> %55 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 1, i64 1>
  %58 = bitcast <2 x i64> %57 to <4 x float>
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %60 = bitcast <4 x float> %59 to <4 x i32>
  %61 = add <4 x i32> %53, %60
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = and <2 x i64> %18, %62
  %64 = and <2 x i64> %50, %31
  %65 = or <2 x i64> %63, %64
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fcmp oeq <2 x double> %66, zeroinitializer
  %68 = fcmp une <2 x double> %8, zeroinitializer
  %69 = and <2 x i1> %67, %68
  %70 = and <2 x i64> %7, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = select <2 x i1> %69, <2 x i64> %70, <2 x i64> %65
  %72 = fcmp oeq <2 x double> %8, zeroinitializer
  %73 = fcmp oeq <2 x double> %1, zeroinitializer
  %74 = and <2 x i1> %72, %73
  %75 = select <2 x i1> %74, <2 x i64> %4, <2 x i64> %71
  %76 = fcmp uno <2 x double> %8, %1
  %77 = bitcast <2 x i64> %75 to <2 x double>
  %78 = select <2 x i1> %76, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %77
  ret <2 x double> %78
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_frfrexpd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = select <2 x i1> %5, <2 x double> %6, <2 x double> %0
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = and <2 x i64> %8, <i64 -9218868437227405313, i64 -9218868437227405313>
  %10 = or <2 x i64> %9, <i64 4602678819172646912, i64 4602678819172646912>
  %11 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fcmp oeq <2 x double> %12, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %14 = and <2 x i64> %8, <i64 -9223372036854775808, i64 -9223372036854775808>
  %15 = or <2 x i64> %14, <i64 9218868437227405312, i64 9218868437227405312>
  %16 = select <2 x i1> %13, <2 x i64> %15, <2 x i64> %10
  %17 = fcmp oeq <2 x double> %7, zeroinitializer
  %18 = select <2 x i1> %17, <2 x i64> %8, <2 x i64> %16
  %19 = bitcast <2 x i64> %18 to <2 x double>
  ret <2 x double> %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x i64> @Sleef_cinz_expfrexpd2_sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %7 = select <2 x i1> %5, <2 x double> %6, <2 x double> %0
  %8 = bitcast <2 x double> %7 to <2 x i64>
  %9 = bitcast <2 x double> %7 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 0, i32 0>
  %13 = add nsw <4 x i32> %12, <i32 -1022, i32 -1022, i32 0, i32 0>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = fcmp one <2 x double> %7, zeroinitializer
  %16 = and <2 x i64> %8, <i64 9223372036854775807, i64 9223372036854775807>
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fcmp une <2 x double> %17, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %19 = and <2 x i1> %18, %15
  %20 = select <2 x i1> %19, <2 x i64> %14, <2 x i64> zeroinitializer
  ret <2 x i64> %20
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmad2_sse2(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #0 {
  %4 = fmul <2 x double> %0, %1
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 1.000000e-300, double 1.000000e-300>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %0, <double 0x46B0000000000000, double 0x46B0000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = bitcast <2 x double> %0 to <2 x i64>
  %16 = and <2 x i64> %14, %15
  %17 = or <2 x i64> %16, %13
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fmul <2 x double> %1, <double 0x46B0000000000000, double 0x46B0000000000000>
  %20 = bitcast <2 x double> %19 to <2 x i64>
  %21 = and <2 x i64> %10, %20
  %22 = bitcast <2 x double> %1 to <2 x i64>
  %23 = and <2 x i64> %14, %22
  %24 = or <2 x i64> %23, %21
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fmul <2 x double> %2, <double 0x4D70000000000000, double 0x4D70000000000000>
  %27 = bitcast <2 x double> %26 to <2 x i64>
  %28 = and <2 x i64> %10, %27
  %29 = bitcast <2 x double> %2 to <2 x i64>
  %30 = and <2 x i64> %14, %29
  %31 = or <2 x i64> %30, %28
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = and <2 x i64> %10, <i64 3634404899287990272, i64 3634404899287990272>
  %34 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %35 = or <2 x i64> %34, %33
  %36 = fcmp ogt <2 x double> %8, <double 1.000000e+300, double 1.000000e+300>
  %37 = sext <2 x i1> %36 to <2 x i64>
  %38 = fmul <2 x double> %18, <double 0x3930000000000000, double 0x3930000000000000>
  %39 = bitcast <2 x double> %38 to <2 x i64>
  %40 = and <2 x i64> %39, %37
  %41 = xor <2 x i64> %37, <i64 -1, i64 -1>
  %42 = and <2 x i64> %17, %41
  %43 = or <2 x i64> %40, %42
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = fmul <2 x double> %25, <double 0x3930000000000000, double 0x3930000000000000>
  %46 = bitcast <2 x double> %45 to <2 x i64>
  %47 = and <2 x i64> %46, %37
  %48 = and <2 x i64> %24, %41
  %49 = or <2 x i64> %47, %48
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fmul <2 x double> %32, <double 0x3270000000000000, double 0x3270000000000000>
  %52 = bitcast <2 x double> %51 to <2 x i64>
  %53 = and <2 x i64> %52, %37
  %54 = and <2 x i64> %31, %41
  %55 = or <2 x i64> %53, %54
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = and <2 x i64> %37, <i64 5579959938312044544, i64 5579959938312044544>
  %58 = and <2 x i64> %35, %41
  %59 = or <2 x i64> %58, %57
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = and <2 x i64> %43, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %44, %62
  %64 = and <2 x i64> %49, <i64 -134217728, i64 -134217728>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fsub <2 x double> %50, %65
  %67 = fmul <2 x double> %44, %50
  %68 = fmul <2 x double> %62, %65
  %69 = bitcast <2 x double> %67 to <2 x i64>
  %70 = xor <2 x i64> %69, <i64 -9223372036854775808, i64 -9223372036854775808>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fmul <2 x double> %63, %65
  %73 = fmul <2 x double> %66, %62
  %74 = fmul <2 x double> %63, %66
  %75 = fadd <2 x double> %68, %71
  %76 = fadd <2 x double> %72, %75
  %77 = fadd <2 x double> %73, %76
  %78 = fadd <2 x double> %74, %77
  %79 = fadd <2 x double> %67, %56
  %80 = fsub <2 x double> %79, %67
  %81 = fsub <2 x double> %79, %80
  %82 = fsub <2 x double> %67, %81
  %83 = fsub <2 x double> %56, %80
  %84 = fadd <2 x double> %83, %82
  %85 = fadd <2 x double> %84, %78
  %86 = fcmp oeq <2 x double> %44, zeroinitializer
  %87 = fcmp oeq <2 x double> %50, zeroinitializer
  %88 = or <2 x i1> %87, %86
  %89 = fadd <2 x double> %79, %85
  %90 = select <2 x i1> %88, <2 x double> %56, <2 x double> %89
  %91 = and <2 x i64> %55, <i64 9223372036854775807, i64 9223372036854775807>
  %92 = bitcast <2 x i64> %91 to <2 x double>
  %93 = fcmp oeq <2 x double> %92, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %94 = and <2 x i64> %43, <i64 9223372036854775807, i64 9223372036854775807>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fcmp une <2 x double> %95, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %97 = and <2 x i64> %49, <i64 9223372036854775807, i64 9223372036854775807>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fcmp une <2 x double> %98, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %100 = fcmp ord <2 x double> %50, %44
  %101 = and <2 x i1> %93, %100
  %102 = and <2 x i1> %101, %96
  %103 = and <2 x i1> %102, %99
  %104 = select <2 x i1> %103, <2 x i64> %55, <2 x i64> %6
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = and <2 x i64> %104, <i64 9223372036854775807, i64 9223372036854775807>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fcmp oeq <2 x double> %107, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = fcmp uno <2 x double> %105, zeroinitializer
  %110 = or <2 x i1> %108, %109
  %111 = fmul <2 x double> %90, %60
  %112 = select <2 x i1> %110, <2 x double> %105, <2 x double> %111
  ret <2 x double> %112
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sqrtd2_u05sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = select <2 x i1> %2, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x double> %8 to <2 x i64>
  %10 = and <2 x i64> %9, %7
  %11 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %12 = and <2 x i64> %4, %11
  %13 = or <2 x i64> %12, %10
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = and <2 x i64> %7, <i64 4026218066869223424, i64 4026218066869223424>
  %16 = and <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %17 = or <2 x i64> %16, %15
  %18 = fcmp ogt <2 x double> %14, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = fmul <2 x double> %14, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, %19
  %23 = xor <2 x i64> %19, <i64 -1, i64 -1>
  %24 = and <2 x i64> %13, %23
  %25 = or <2 x i64> %24, %22
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = and <2 x i64> %19, <i64 5755600323779493888, i64 5755600323779493888>
  %28 = and <2 x i64> %17, %23
  %29 = or <2 x i64> %28, %27
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fadd <2 x double> %26, <double 9.999880e-321, double 9.999880e-321>
  %32 = bitcast <2 x double> %31 to <4 x i32>
  %33 = lshr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %33
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %26, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %37, %35
  %39 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %38
  %40 = fmul <2 x double> %39, %35
  %41 = fmul <2 x double> %36, %40
  %42 = fmul <2 x double> %40, %41
  %43 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %42
  %44 = fmul <2 x double> %40, %43
  %45 = fmul <2 x double> %36, %44
  %46 = fmul <2 x double> %44, %45
  %47 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %46
  %48 = fmul <2 x double> %44, %47
  %49 = fmul <2 x double> %48, %26
  %50 = bitcast <2 x double> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fsub <2 x double> %49, %52
  %54 = fmul <2 x double> %49, %49
  %55 = fmul <2 x double> %52, %52
  %56 = bitcast <2 x double> %54 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fmul <2 x double> %53, %52
  %60 = fmul <2 x double> %53, %53
  %61 = fadd <2 x double> %55, %58
  %62 = fadd <2 x double> %59, %61
  %63 = fadd <2 x double> %59, %62
  %64 = fadd <2 x double> %60, %63
  %65 = fadd <2 x double> %54, %26
  %66 = fsub <2 x double> %65, %26
  %67 = fsub <2 x double> %65, %66
  %68 = fsub <2 x double> %26, %67
  %69 = fsub <2 x double> %54, %66
  %70 = fadd <2 x double> %69, %68
  %71 = fadd <2 x double> %70, %64
  %72 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %72, %75
  %77 = fmul <2 x double> %52, %75
  %78 = fmul <2 x double> %76, %52
  %79 = fmul <2 x double> %53, %75
  %80 = fmul <2 x double> %53, %76
  %81 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %77
  %82 = fsub <2 x double> %81, %78
  %83 = fsub <2 x double> %82, %79
  %84 = fsub <2 x double> %83, %80
  %85 = fmul <2 x double> %72, %84
  %86 = bitcast <2 x double> %65 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -134217728, i64 -134217728>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fsub <2 x double> %65, %88
  %90 = fmul <2 x double> %72, %65
  %91 = fmul <2 x double> %75, %88
  %92 = bitcast <2 x double> %90 to <2 x i64>
  %93 = xor <2 x i64> %92, <i64 -9223372036854775808, i64 -9223372036854775808>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fmul <2 x double> %89, %75
  %96 = fmul <2 x double> %76, %88
  %97 = fmul <2 x double> %76, %89
  %98 = fmul <2 x double> %65, %85
  %99 = fmul <2 x double> %72, %71
  %100 = fadd <2 x double> %91, %94
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %103, %98
  %105 = fadd <2 x double> %99, %104
  %106 = fadd <2 x double> %90, %105
  %107 = fmul <2 x double> %106, %30
  %108 = fcmp oeq <2 x double> %26, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = bitcast <2 x double> %107 to <2 x i64>
  %110 = select <2 x i1> %108, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %109
  %111 = fcmp oeq <2 x double> %26, zeroinitializer
  %112 = select <2 x i1> %111, <2 x i64> %25, <2 x i64> %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  ret <2 x double> %113
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sqrtd2_u35sse2(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = select <2 x i1> %2, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x double> %8 to <2 x i64>
  %10 = and <2 x i64> %9, %7
  %11 = xor <2 x i64> %7, <i64 -1, i64 -1>
  %12 = and <2 x i64> %4, %11
  %13 = or <2 x i64> %12, %10
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = and <2 x i64> %7, <i64 4026218066869223424, i64 4026218066869223424>
  %16 = and <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %17 = or <2 x i64> %16, %15
  %18 = fcmp ogt <2 x double> %14, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %19 = sext <2 x i1> %18 to <2 x i64>
  %20 = fmul <2 x double> %14, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %21 = bitcast <2 x double> %20 to <2 x i64>
  %22 = and <2 x i64> %21, %19
  %23 = xor <2 x i64> %19, <i64 -1, i64 -1>
  %24 = and <2 x i64> %13, %23
  %25 = or <2 x i64> %24, %22
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = and <2 x i64> %19, <i64 5755600323779493888, i64 5755600323779493888>
  %28 = and <2 x i64> %17, %23
  %29 = or <2 x i64> %28, %27
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fadd <2 x double> %26, <double 9.999880e-321, double 9.999880e-321>
  %32 = bitcast <2 x double> %31 to <4 x i32>
  %33 = lshr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %33
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %26, <double 5.000000e-01, double 5.000000e-01>
  %37 = fmul <2 x double> %36, %35
  %38 = fmul <2 x double> %37, %35
  %39 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %38
  %40 = fmul <2 x double> %39, %35
  %41 = fmul <2 x double> %36, %40
  %42 = fmul <2 x double> %40, %41
  %43 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %42
  %44 = fmul <2 x double> %40, %43
  %45 = fmul <2 x double> %36, %44
  %46 = fmul <2 x double> %44, %45
  %47 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %46
  %48 = fmul <2 x double> %44, %47
  %49 = fmul <2 x double> %48, %26
  %50 = bitcast <2 x double> %49 to <2 x i64>
  %51 = and <2 x i64> %50, <i64 -134217728, i64 -134217728>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = fsub <2 x double> %49, %52
  %54 = fmul <2 x double> %49, %49
  %55 = fmul <2 x double> %52, %52
  %56 = bitcast <2 x double> %54 to <2 x i64>
  %57 = xor <2 x i64> %56, <i64 -9223372036854775808, i64 -9223372036854775808>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fmul <2 x double> %53, %52
  %60 = fmul <2 x double> %53, %53
  %61 = fadd <2 x double> %55, %58
  %62 = fadd <2 x double> %59, %61
  %63 = fadd <2 x double> %59, %62
  %64 = fadd <2 x double> %60, %63
  %65 = fadd <2 x double> %54, %26
  %66 = fsub <2 x double> %65, %26
  %67 = fsub <2 x double> %65, %66
  %68 = fsub <2 x double> %26, %67
  %69 = fsub <2 x double> %54, %66
  %70 = fadd <2 x double> %69, %68
  %71 = fadd <2 x double> %70, %64
  %72 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %72, %75
  %77 = fmul <2 x double> %52, %75
  %78 = fmul <2 x double> %76, %52
  %79 = fmul <2 x double> %53, %75
  %80 = fmul <2 x double> %53, %76
  %81 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %77
  %82 = fsub <2 x double> %81, %78
  %83 = fsub <2 x double> %82, %79
  %84 = fsub <2 x double> %83, %80
  %85 = fmul <2 x double> %72, %84
  %86 = bitcast <2 x double> %65 to <2 x i64>
  %87 = and <2 x i64> %86, <i64 -134217728, i64 -134217728>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fsub <2 x double> %65, %88
  %90 = fmul <2 x double> %72, %65
  %91 = fmul <2 x double> %75, %88
  %92 = bitcast <2 x double> %90 to <2 x i64>
  %93 = xor <2 x i64> %92, <i64 -9223372036854775808, i64 -9223372036854775808>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fmul <2 x double> %89, %75
  %96 = fmul <2 x double> %76, %88
  %97 = fmul <2 x double> %76, %89
  %98 = fmul <2 x double> %65, %85
  %99 = fmul <2 x double> %72, %71
  %100 = fadd <2 x double> %91, %94
  %101 = fadd <2 x double> %95, %100
  %102 = fadd <2 x double> %96, %101
  %103 = fadd <2 x double> %97, %102
  %104 = fadd <2 x double> %103, %98
  %105 = fadd <2 x double> %99, %104
  %106 = fadd <2 x double> %90, %105
  %107 = fmul <2 x double> %106, %30
  %108 = fcmp oeq <2 x double> %26, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %109 = bitcast <2 x double> %107 to <2 x i64>
  %110 = select <2 x i1> %108, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %109
  %111 = fcmp oeq <2 x double> %26, zeroinitializer
  %112 = select <2 x i1> %111, <2 x i64> %25, <2 x i64> %110
  %113 = bitcast <2 x i64> %112 to <2 x double>
  ret <2 x double> %113
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_hypotd2_u05sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fcmp olt <2 x double> %10, <double 0x10000000000000, double 0x10000000000000>
  %12 = sext <2 x i1> %11 to <2 x i64>
  %13 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %14 = bitcast <2 x double> %13 to <2 x i64>
  %15 = and <2 x i64> %12, %14
  %16 = xor <2 x i64> %12, <i64 -1, i64 -1>
  %17 = bitcast <2 x double> %9 to <2 x i64>
  %18 = and <2 x i64> %16, %17
  %19 = or <2 x i64> %18, %15
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %22 = bitcast <2 x double> %21 to <2 x i64>
  %23 = and <2 x i64> %22, %12
  %24 = bitcast <2 x double> %10 to <2 x i64>
  %25 = and <2 x i64> %16, %24
  %26 = or <2 x i64> %25, %23
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %27
  %29 = and <2 x i64> %26, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %27, %30
  %32 = bitcast <2 x double> %28 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -134217728, i64 -134217728>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = fsub <2 x double> %28, %34
  %36 = and <2 x i64> %19, <i64 -134217728, i64 -134217728>
  %37 = bitcast <2 x i64> %36 to <2 x double>
  %38 = fsub <2 x double> %20, %37
  %39 = fmul <2 x double> %28, %20
  %40 = fmul <2 x double> %37, %34
  %41 = fsub <2 x double> %40, %39
  %42 = fmul <2 x double> %35, %37
  %43 = fmul <2 x double> %38, %34
  %44 = fmul <2 x double> %38, %35
  %45 = fmul <2 x double> %30, %34
  %46 = fmul <2 x double> %35, %30
  %47 = fmul <2 x double> %31, %34
  %48 = fmul <2 x double> %31, %35
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %50 = fsub <2 x double> %49, %46
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %51, %48
  %53 = fmul <2 x double> %39, %52
  %54 = fadd <2 x double> %41, %42
  %55 = fadd <2 x double> %43, %54
  %56 = fadd <2 x double> %44, %55
  %57 = fadd <2 x double> %56, %53
  %58 = fmul <2 x double> %39, zeroinitializer
  %59 = fsub <2 x double> zeroinitializer, %58
  %60 = fmul <2 x double> %28, %59
  %61 = fadd <2 x double> %60, %57
  %62 = bitcast <2 x double> %39 to <2 x i64>
  %63 = and <2 x i64> %62, <i64 -134217728, i64 -134217728>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = fsub <2 x double> %39, %64
  %66 = fmul <2 x double> %39, %39
  %67 = fmul <2 x double> %64, %64
  %68 = bitcast <2 x double> %66 to <2 x i64>
  %69 = xor <2 x i64> %68, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = bitcast <2 x i64> %69 to <2 x double>
  %71 = fadd <2 x double> %64, %64
  %72 = fmul <2 x double> %71, %65
  %73 = fmul <2 x double> %65, %65
  %74 = fadd <2 x double> %61, %61
  %75 = fmul <2 x double> %39, %74
  %76 = fadd <2 x double> %67, %70
  %77 = fadd <2 x double> %76, %72
  %78 = fadd <2 x double> %73, %77
  %79 = fadd <2 x double> %78, %75
  %80 = fadd <2 x double> %66, <double 1.000000e+00, double 1.000000e+00>
  %81 = fsub <2 x double> %80, %66
  %82 = fsub <2 x double> %80, %81
  %83 = fsub <2 x double> %66, %82
  %84 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %81
  %85 = fadd <2 x double> %84, %83
  %86 = fadd <2 x double> %85, %79
  %87 = fadd <2 x double> %80, %86
  %88 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %87) #6
  %89 = bitcast <2 x double> %88 to <2 x i64>
  %90 = and <2 x i64> %89, <i64 -134217728, i64 -134217728>
  %91 = bitcast <2 x i64> %90 to <2 x double>
  %92 = fsub <2 x double> %88, %91
  %93 = fmul <2 x double> %88, %88
  %94 = fmul <2 x double> %91, %91
  %95 = bitcast <2 x double> %93 to <2 x i64>
  %96 = xor <2 x i64> %95, <i64 -9223372036854775808, i64 -9223372036854775808>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fmul <2 x double> %92, %91
  %99 = fmul <2 x double> %92, %92
  %100 = fadd <2 x double> %94, %97
  %101 = fadd <2 x double> %98, %100
  %102 = fadd <2 x double> %98, %101
  %103 = fadd <2 x double> %99, %102
  %104 = fadd <2 x double> %93, %80
  %105 = fsub <2 x double> %104, %80
  %106 = fsub <2 x double> %104, %105
  %107 = fsub <2 x double> %80, %106
  %108 = fsub <2 x double> %93, %105
  %109 = fadd <2 x double> %108, %107
  %110 = fadd <2 x double> %103, %86
  %111 = fadd <2 x double> %109, %110
  %112 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %88
  %113 = bitcast <2 x double> %112 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -134217728, i64 -134217728>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fsub <2 x double> %112, %115
  %117 = fmul <2 x double> %91, %115
  %118 = fmul <2 x double> %116, %91
  %119 = fmul <2 x double> %92, %115
  %120 = fmul <2 x double> %92, %116
  %121 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %122 = fsub <2 x double> %121, %118
  %123 = fsub <2 x double> %122, %119
  %124 = fsub <2 x double> %123, %120
  %125 = fmul <2 x double> %112, %124
  %126 = bitcast <2 x double> %104 to <2 x i64>
  %127 = and <2 x i64> %126, <i64 -134217728, i64 -134217728>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fsub <2 x double> %104, %128
  %130 = fmul <2 x double> %112, %104
  %131 = fmul <2 x double> %115, %128
  %132 = bitcast <2 x double> %130 to <2 x i64>
  %133 = xor <2 x i64> %132, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fmul <2 x double> %129, %115
  %136 = fmul <2 x double> %116, %128
  %137 = fmul <2 x double> %116, %129
  %138 = fmul <2 x double> %104, %125
  %139 = fmul <2 x double> %112, %111
  %140 = fadd <2 x double> %131, %134
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %136, %141
  %143 = fadd <2 x double> %137, %142
  %144 = fadd <2 x double> %138, %143
  %145 = fadd <2 x double> %144, %139
  %146 = fmul <2 x double> %130, <double 5.000000e-01, double 5.000000e-01>
  %147 = fmul <2 x double> %145, <double 5.000000e-01, double 5.000000e-01>
  %148 = bitcast <2 x double> %146 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %146, %150
  %152 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fsub <2 x double> %10, %153
  %155 = fmul <2 x double> %10, %146
  %156 = fmul <2 x double> %153, %150
  %157 = bitcast <2 x double> %155 to <2 x i64>
  %158 = xor <2 x i64> %157, <i64 -9223372036854775808, i64 -9223372036854775808>
  %159 = bitcast <2 x i64> %158 to <2 x double>
  %160 = fmul <2 x double> %151, %153
  %161 = fmul <2 x double> %154, %150
  %162 = fmul <2 x double> %154, %151
  %163 = fmul <2 x double> %10, %147
  %164 = fadd <2 x double> %156, %159
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %167, %163
  %169 = fadd <2 x double> %155, %168
  %170 = fcmp uno <2 x double> %169, zeroinitializer
  %171 = bitcast <2 x double> %169 to <2 x i64>
  %172 = select <2 x i1> %170, <2 x i64> <i64 9218868437227405312, i64 9218868437227405312>, <2 x i64> %171
  %173 = fcmp oeq <2 x double> %9, zeroinitializer
  %174 = select <2 x i1> %173, <2 x i64> %24, <2 x i64> %172
  %175 = fcmp uno <2 x double> %8, %5
  %176 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %178 = or <2 x i1> %177, %176
  %179 = bitcast <2 x i64> %174 to <2 x double>
  %180 = select <2 x i1> %175, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %179
  %181 = select <2 x i1> %178, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %180
  ret <2 x double> %181
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_hypotd2_u35sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fdiv <2 x double> %9, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %13) #6
  %15 = fmul <2 x double> %10, %14
  %16 = fcmp oeq <2 x double> %9, zeroinitializer
  %17 = select <2 x i1> %16, <2 x double> %10, <2 x double> %15
  %18 = fcmp uno <2 x double> %8, %5
  %19 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %20 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = or <2 x i1> %20, %19
  %22 = select <2 x i1> %18, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %17
  %23 = select <2 x i1> %21, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %22
  ret <2 x double> %23
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmodd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x10000000000000, double 0x10000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = and <2 x i64> %4, %14
  %16 = or <2 x i64> %15, %13
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, %10
  %21 = and <2 x i64> %7, %14
  %22 = or <2 x i64> %21, %20
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %25 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %23
  %26 = bitcast <2 x double> %25 to <2 x i64>
  %27 = add <2 x i64> %26, <i64 -1, i64 -1>
  %28 = fcmp une <2 x double> %25, zeroinitializer
  %29 = bitcast <2 x i64> %27 to <2 x double>
  %30 = select <2 x i1> %28, <2 x double> %29, <2 x double> zeroinitializer
  %31 = fmul <2 x double> %23, <double 3.000000e+00, double 3.000000e+00>
  %32 = fadd <2 x double> %23, %23
  %33 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = fsub <2 x double> %34, %36
  br label %38

; <label>:38:                                     ; preds = %38, %2
  %39 = phi i32 [ 0, %2 ], [ %105, %38 ]
  %40 = phi <2 x double> [ zeroinitializer, %2 ], [ %99, %38 ]
  %41 = phi <2 x double> [ %17, %2 ], [ %97, %38 ]
  %42 = bitcast <2 x double> %41 to <2 x i64>
  %43 = add <2 x i64> %42, <i64 -1, i64 -1>
  %44 = fcmp une <2 x double> %41, zeroinitializer
  %45 = bitcast <2 x i64> %43 to <2 x double>
  %46 = select <2 x i1> %44, <2 x double> %45, <2 x double> zeroinitializer
  %47 = fmul <2 x double> %30, %46
  %48 = fmul <2 x double> %47, <double 0x3E00000000000000, double 0x3E00000000000000>
  %49 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %48) #6
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %51 = sitofp <2 x i32> %50 to <2 x double>
  %52 = fmul <2 x double> %51, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %53 = fadd <2 x double> %52, %47
  %54 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %53) #6
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %56 = sitofp <2 x i32> %55 to <2 x double>
  %57 = fsub <2 x double> %53, %56
  %58 = bitcast <2 x double> %47 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 9223372036854775807, i64 9223372036854775807>
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = fcmp oge <2 x double> %60, <double 0x4330000000000000, double 0x4330000000000000>
  %62 = fsub <2 x double> %47, %57
  %63 = select <2 x i1> %61, <2 x double> %47, <2 x double> %62
  %64 = bitcast <2 x double> %63 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 -2, i64 -2>
  %66 = fcmp olt <2 x double> %41, %31
  %67 = fcmp oge <2 x double> %41, %23
  %68 = and <2 x i1> %67, %66
  %69 = select <2 x i1> %68, <2 x i64> <i64 4611686018427387904, i64 4611686018427387904>, <2 x i64> %65
  %70 = fcmp olt <2 x double> %41, %32
  %71 = and <2 x i1> %67, %70
  %72 = select <2 x i1> %71, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %69
  %73 = bitcast <2 x i64> %72 to <2 x double>
  %74 = and <2 x i64> %72, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %73, %75
  %77 = fmul <2 x double> %34, %73
  %78 = fmul <2 x double> %36, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %36
  %83 = fmul <2 x double> %37, %75
  %84 = fmul <2 x double> %37, %76
  %85 = fadd <2 x double> %78, %81
  %86 = fadd <2 x double> %82, %85
  %87 = fadd <2 x double> %83, %86
  %88 = fadd <2 x double> %84, %87
  %89 = fadd <2 x double> %41, %77
  %90 = fsub <2 x double> %89, %41
  %91 = fsub <2 x double> %89, %90
  %92 = fsub <2 x double> %41, %91
  %93 = fsub <2 x double> %77, %90
  %94 = fadd <2 x double> %93, %92
  %95 = fadd <2 x double> %40, %88
  %96 = fadd <2 x double> %94, %95
  %97 = fadd <2 x double> %89, %96
  %98 = fsub <2 x double> %89, %97
  %99 = fadd <2 x double> %96, %98
  %100 = fcmp olt <2 x double> %97, %23
  %101 = sext <2 x i1> %100 to <2 x i64>
  %102 = bitcast <2 x i64> %101 to <16 x i8>
  %103 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %102) #6
  %104 = icmp ne i32 %103, 65535
  %105 = add nuw nsw i32 %39, 1
  %106 = icmp ult i32 %105, 21
  %107 = and i1 %106, %104
  br i1 %107, label %38, label %108

; <label>:108:                                    ; preds = %38
  %109 = and <2 x i64> %10, <i64 4363988038922010624, i64 4363988038922010624>
  %110 = or <2 x i64> %24, %109
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fmul <2 x double> %97, %111
  %113 = fadd <2 x double> %97, %99
  %114 = fcmp une <2 x double> %113, %23
  %115 = bitcast <2 x double> %112 to <2 x i64>
  %116 = select <2 x i1> %114, <2 x i64> %115, <2 x i64> zeroinitializer
  %117 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %118 = xor <2 x i64> %116, %117
  %119 = fcmp olt <2 x double> %17, %23
  %120 = select <2 x i1> %119, <2 x i64> %3, <2 x i64> %118
  %121 = fcmp oeq <2 x double> %23, zeroinitializer
  %122 = bitcast <2 x i64> %120 to <2 x double>
  %123 = select <2 x i1> %121, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %122
  ret <2 x double> %123
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_remainderd2_sse2(<2 x double>, <2 x double>) local_unnamed_addr #1 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x20000000000000, double 0x20000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x double> %11 to <2 x i64>
  %13 = and <2 x i64> %10, %12
  %14 = xor <2 x i64> %10, <i64 -1, i64 -1>
  %15 = and <2 x i64> %4, %14
  %16 = or <2 x i64> %15, %13
  %17 = bitcast <2 x i64> %16 to <2 x double>
  %18 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %19 = bitcast <2 x double> %18 to <2 x i64>
  %20 = and <2 x i64> %19, %10
  %21 = and <2 x i64> %7, %14
  %22 = or <2 x i64> %21, %20
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = and <2 x i64> %10, <i64 4363988038922010624, i64 4363988038922010624>
  %25 = and <2 x i64> %14, <i64 4607182418800017408, i64 4607182418800017408>
  %26 = or <2 x i64> %25, %24
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %23
  %29 = fmul <2 x double> %23, <double 1.500000e+00, double 1.500000e+00>
  %30 = fmul <2 x double> %23, <double 5.000000e-01, double 5.000000e-01>
  %31 = xor <2 x i64> %22, <i64 -9223372036854775808, i64 -9223372036854775808>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = fsub <2 x double> %32, %34
  br label %36

; <label>:36:                                     ; preds = %71, %2
  %37 = phi i32 [ 0, %2 ], [ %127, %71 ]
  %38 = phi <2 x i64> [ zeroinitializer, %2 ], [ %100, %71 ]
  %39 = phi <2 x double> [ zeroinitializer, %2 ], [ %126, %71 ]
  %40 = phi <2 x double> [ %17, %2 ], [ %124, %71 ]
  %41 = fmul <2 x double> %28, %40
  %42 = bitcast <2 x double> %41 to <2 x i64>
  %43 = and <2 x i64> %42, <i64 -9223372036854775808, i64 -9223372036854775808>
  %44 = or <2 x i64> %43, <i64 4841369599423283200, i64 4841369599423283200>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = and <2 x i64> %42, <i64 9223372036854775807, i64 9223372036854775807>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fcmp ogt <2 x double> %47, <double 0x4330000000000000, double 0x4330000000000000>
  %49 = fadd <2 x double> %41, %45
  %50 = fsub <2 x double> %49, %45
  %51 = bitcast <2 x double> %50 to <2 x i64>
  %52 = or <2 x i64> %43, %51
  %53 = select <2 x i1> %48, <2 x i64> %42, <2 x i64> %52
  %54 = and <2 x i64> %53, <i64 -2, i64 -2>
  %55 = bitcast <2 x double> %40 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 9223372036854775807, i64 9223372036854775807>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fcmp ogt <2 x double> %29, %57
  %59 = select <2 x i1> %58, <2 x i64> <i64 4607182418800017408, i64 4607182418800017408>, <2 x i64> %54
  %60 = fcmp ogt <2 x double> %30, %57
  %61 = fcmp oeq <2 x double> %30, %57
  %62 = select <2 x i1> %61, <2 x i64> %38, <2 x i64> <i64 -1, i64 -1>
  %63 = select <2 x i1> %60, <2 x i64> zeroinitializer, <2 x i64> %62
  %64 = and <2 x i64> %59, %63
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fcmp oeq <2 x double> %65, zeroinitializer
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %68) #6
  %70 = icmp eq i32 %69, 65535
  br i1 %70, label %129, label %71

; <label>:71:                                     ; preds = %36
  %72 = fmul <2 x double> %32, %65
  %73 = bitcast <2 x double> %72 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 9223372036854775807, i64 9223372036854775807>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fcmp oeq <2 x double> %75, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %77 = and <2 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808>
  %78 = xor <2 x i64> %77, <i64 -4616189618054758400, i64 -4616189618054758400>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = fadd <2 x double> %79, %65
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = select <2 x i1> %76, <2 x i64> %81, <2 x i64> %64
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %83, <double 0x3E00000000000000, double 0x3E00000000000000>
  %85 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %84) #6
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %87 = sitofp <2 x i32> %86 to <2 x double>
  %88 = fmul <2 x double> %87, <double 0xC1E0000000000000, double 0xC1E0000000000000>
  %89 = fadd <2 x double> %88, %83
  %90 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %89) #6
  %91 = and <4 x i32> %90, <i32 1, i32 1, i32 0, i32 0>
  %92 = icmp eq <4 x i32> %91, <i32 1, i32 1, i32 0, i32 0>
  %93 = sext <4 x i1> %92 to <4 x i32>
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = and <2 x i64> %82, <i64 9223372036854775807, i64 9223372036854775807>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = fcmp olt <2 x double> %97, <double 0x4340000000000000, double 0x4340000000000000>
  %99 = select <2 x i1> %98, <2 x i64> %95, <2 x i64> zeroinitializer
  %100 = xor <2 x i64> %99, %38
  %101 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fsub <2 x double> %83, %102
  %104 = fmul <2 x double> %32, %83
  %105 = fmul <2 x double> %34, %102
  %106 = bitcast <2 x double> %104 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fmul <2 x double> %103, %34
  %110 = fmul <2 x double> %35, %102
  %111 = fmul <2 x double> %35, %103
  %112 = fadd <2 x double> %105, %108
  %113 = fadd <2 x double> %109, %112
  %114 = fadd <2 x double> %110, %113
  %115 = fadd <2 x double> %111, %114
  %116 = fadd <2 x double> %40, %104
  %117 = fsub <2 x double> %116, %40
  %118 = fsub <2 x double> %116, %117
  %119 = fsub <2 x double> %40, %118
  %120 = fsub <2 x double> %104, %117
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %39, %115
  %123 = fadd <2 x double> %121, %122
  %124 = fadd <2 x double> %116, %123
  %125 = fsub <2 x double> %116, %124
  %126 = fadd <2 x double> %123, %125
  %127 = add nuw nsw i32 %37, 1
  %128 = icmp ult i32 %127, 21
  br i1 %128, label %36, label %129

; <label>:129:                                    ; preds = %36, %71
  %130 = phi <2 x double> [ %40, %36 ], [ %124, %71 ]
  %131 = fmul <2 x double> %130, %27
  %132 = bitcast <2 x double> %131 to <2 x i64>
  %133 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %134 = xor <2 x i64> %133, %132
  %135 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %136 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %137 = select <2 x i1> %136, <2 x i64> <i64 9221120237041090560, i64 9221120237041090560>, <2 x i64> %3
  %138 = select <2 x i1> %135, <2 x i64> %137, <2 x i64> %134
  %139 = fcmp oeq <2 x double> %23, zeroinitializer
  %140 = bitcast <2 x i64> %138 to <2 x double>
  %141 = select <2 x i1> %139, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %140
  ret <2 x double> %141
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_cinz_tgammad2_u10sse2(<2 x double>) local_unnamed_addr #3 {
  %2 = tail call <2 x double> @Sleef_tgammad2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_cinz_lgammad2_u10sse2(<2 x double>) local_unnamed_addr #3 {
  %2 = tail call <2 x double> @Sleef_lgammad2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_erfd2_u10sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_erfd2_u10sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_erfcd2_u15sse2(<2 x double>) local_unnamed_addr #1 {
  %2 = tail call <2 x double> @Sleef_erfcd2_u15sse2(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntd2_sse2(i32) local_unnamed_addr #3 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %9 = load i32, i32* %8, align 4, !tbaa !37
  %10 = and i32 %9, 67108864
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 0, i32 3
  br label %13

; <label>:13:                                     ; preds = %1, %5
  %14 = phi i32 [ %12, %5 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd2_sse2(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.max.pd(<2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.min.pd(<2 x double>, <2 x double>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !4, i64 0}
!4 = !{!"double", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempi: argument 0"}
!9 = distinct !{!9, !"rempi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempi: argument 0"}
!12 = distinct !{!12, !"rempi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempi: argument 0"}
!15 = distinct !{!15, !"rempi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempi: argument 0"}
!18 = distinct !{!18, !"rempi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempi: argument 0"}
!21 = distinct !{!21, !"rempi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempi: argument 0"}
!24 = distinct !{!24, !"rempi"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempi: argument 0"}
!27 = distinct !{!27, !"rempi"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempi: argument 0"}
!30 = distinct !{!30, !"rempi"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospid2_u35sse2: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospid2_u35sse2"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_modfd2_sse2: argument 0"}
!36 = distinct !{!36, !"Sleef_modfd2_sse2"}
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !5, i64 0}
