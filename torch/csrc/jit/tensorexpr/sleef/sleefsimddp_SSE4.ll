; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimddp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vdouble2 = type { <2 x double>, <2 x double> }
%struct.dd2 = type { %struct.vdouble2, %struct.vdouble2 }

@.str = private unnamed_addr constant [7 x i8] c"SSE4.1\00", align 1
@rempitabdp = external local_unnamed_addr constant [0 x double], align 8

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_ldexpd2_sse4(<2 x double>, <2 x i64>) local_unnamed_addr #0 {
  %3 = bitcast <2 x i64> %1 to <4 x i32>
  %4 = ashr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = add <4 x i32> %4, %3
  %6 = ashr <4 x i32> %5, <i32 9, i32 9, i32 9, i32 9>
  %7 = sub nsw <4 x i32> %6, %4
  %8 = shl nsw <4 x i32> %7, <i32 7, i32 7, i32 7, i32 7>
  %9 = shl <4 x i32> %7, <i32 9, i32 9, i32 9, i32 9>
  %10 = add nsw <4 x i32> %8, <i32 1023, i32 1023, i32 0, i32 0>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = ashr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = xor <2 x i64> %13, <i64 -1, i64 -1>
  %15 = and <2 x i64> %14, %11
  %16 = bitcast <2 x i64> %15 to <4 x i32>
  %17 = icmp sgt <4 x i32> %16, <i32 2047, i32 2047, i32 0, i32 0>
  %18 = sext <4 x i1> %17 to <4 x i32>
  %19 = bitcast <2 x i64> %15 to <16 x i8>
  %20 = bitcast <4 x i32> %18 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> <i8 -1, i8 7, i8 0, i8 0, i8 -1, i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %20) #6
  %22 = bitcast <16 x i8> %21 to <4 x i32>
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %24 = and <4 x i32> %23, <i32 0, i32 -1, i32 0, i32 -1>
  %25 = shl <4 x i32> %24, <i32 20, i32 20, i32 20, i32 20>
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = fmul <2 x double> %26, %0
  %28 = fmul <2 x double> %27, %26
  %29 = fmul <2 x double> %28, %26
  %30 = fmul <2 x double> %29, %26
  %31 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 0>
  %32 = sub <4 x i32> %31, %9
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %34 = and <4 x i32> %33, <i32 0, i32 -1, i32 0, i32 -1>
  %35 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %36 = bitcast <4 x i32> %35 to <2 x double>
  %37 = fmul <2 x double> %30, %36
  ret <2 x double> %37
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_ilogbd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %12 = and <4 x i32> %11, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %13 = lshr exact <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = bitcast <2 x i64> %6 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %16) #6
  %18 = bitcast <16 x i8> %17 to <4 x i32>
  %19 = sub <4 x i32> %13, %18
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %21 = sitofp <2 x i32> %20 to <2 x double>
  %22 = fcmp oeq <2 x double> %0, zeroinitializer
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %21, <2 x double> <double 0xC1E0000000000000, double 0xC1E0000000000000>, <2 x double> %24) #6
  %26 = fcmp uno <2 x double> %0, zeroinitializer
  %27 = sext <2 x i1> %26 to <2 x i64>
  %28 = bitcast <2 x i64> %27 to <2 x double>
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <2 x double> %28) #6
  %30 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %31 = sext <2 x i1> %30 to <2 x i64>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> <double 0x41DFFFFFFFC00000, double 0x41DFFFFFFFC00000>, <2 x double> %32) #6
  %34 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %33) #6
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  ret <2 x i64> %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %18, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = fmul <2 x double> %12, <double 0xC00921FB54442D18, double 0xC00921FB54442D18>
  %15 = fadd <2 x double> %14, %0
  %16 = fmul <2 x double> %12, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %17 = fadd <2 x double> %16, %15
  br label %255

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %20 to <16 x i8>
  %22 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %21) #6
  %23 = icmp eq i32 %22, 65535
  br i1 %23, label %24, label %47, !prof !2

; <label>:24:                                     ; preds = %18
  %25 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %26 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %25, i32 11) #6
  %27 = fmul <2 x double> %26, <double 0x4170000000000000, double 0x4170000000000000>
  %28 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %29 = fsub <2 x double> %28, %27
  %30 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %29, i32 8) #6
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %30) #6
  %32 = fmul <2 x double> %27, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %33 = fadd <2 x double> %32, %0
  %34 = fmul <2 x double> %30, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %35 = fadd <2 x double> %34, %33
  %36 = fmul <2 x double> %27, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %37 = fadd <2 x double> %36, %35
  %38 = fmul <2 x double> %30, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %39 = fadd <2 x double> %38, %37
  %40 = fmul <2 x double> %27, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %41 = fadd <2 x double> %40, %39
  %42 = fmul <2 x double> %30, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %43 = fadd <2 x double> %42, %41
  %44 = fadd <2 x double> %27, %30
  %45 = fmul <2 x double> %44, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %46 = fadd <2 x double> %45, %43
  br label %255

; <label>:47:                                     ; preds = %18
  %48 = bitcast <2 x double> %0 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %50 = lshr <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %50, <i32 2047, i32 2047, i32 0, i32 0>
  %52 = add nsw <4 x i32> %51, <i32 -1078, i32 -1078, i32 0, i32 0>
  %53 = icmp sgt <4 x i32> %52, <i32 645, i32 645, i32 0, i32 0>
  %54 = select <4 x i1> %53, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %56 = and <4 x i32> %55, <i32 0, i32 -1, i32 0, i32 -1>
  %57 = shl <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = add <4 x i32> %57, %48
  %59 = bitcast <4 x i32> %58 to <2 x double>
  %60 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %61 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %62 = and <4 x i32> %61, %52
  %63 = shl <4 x i32> %62, <i32 2, i32 2, i32 2, i32 2>
  %64 = extractelement <4 x i32> %63, i32 1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !3, !noalias !7
  %68 = extractelement <4 x i32> %63, i32 0
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %69
  %71 = load double, double* %70, align 8, !tbaa !3, !noalias !7
  %72 = insertelement <2 x double> undef, double %71, i32 0
  %73 = insertelement <2 x double> %72, double %67, i32 1
  %74 = bitcast <4 x i32> %58 to <2 x i64>
  %75 = and <2 x i64> %74, <i64 -134217728, i64 -134217728>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = fsub <2 x double> %59, %76
  %78 = bitcast <2 x double> %73 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -134217728, i64 -134217728>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = fsub <2 x double> %73, %80
  %82 = fmul <2 x double> %73, %59
  %83 = fmul <2 x double> %76, %80
  %84 = bitcast <2 x double> %82 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %77, %80
  %88 = fmul <2 x double> %81, %76
  %89 = fmul <2 x double> %77, %81
  %90 = fadd <2 x double> %83, %86
  %91 = fadd <2 x double> %87, %90
  %92 = fadd <2 x double> %88, %91
  %93 = fadd <2 x double> %89, %92
  %94 = fmul <2 x double> %82, <double 4.000000e+00, double 4.000000e+00>
  %95 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %94, i32 8) #6
  %96 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %82, i32 8) #6
  %97 = fmul <2 x double> %96, <double 4.000000e+00, double 4.000000e+00>
  %98 = fsub <2 x double> %95, %97
  %99 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %98) #6
  %100 = fmul <2 x double> %95, <double 2.500000e-01, double 2.500000e-01>
  %101 = fsub <2 x double> %82, %100
  %102 = fadd <2 x double> %101, %93
  %103 = fsub <2 x double> %101, %102
  %104 = fadd <2 x double> %93, %103
  %105 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %65
  %106 = load double, double* %105, align 8, !tbaa !3, !noalias !7
  %107 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %69
  %108 = load double, double* %107, align 8, !tbaa !3, !noalias !7
  %109 = insertelement <2 x double> undef, double %108, i32 0
  %110 = insertelement <2 x double> %109, double %106, i32 1
  %111 = bitcast <2 x double> %110 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %110, %113
  %115 = fmul <2 x double> %110, %59
  %116 = fmul <2 x double> %76, %113
  %117 = bitcast <2 x double> %115 to <2 x i64>
  %118 = xor <2 x i64> %117, <i64 -9223372036854775808, i64 -9223372036854775808>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fmul <2 x double> %77, %113
  %121 = fmul <2 x double> %114, %76
  %122 = fmul <2 x double> %77, %114
  %123 = fadd <2 x double> %116, %119
  %124 = fadd <2 x double> %120, %123
  %125 = fadd <2 x double> %121, %124
  %126 = fadd <2 x double> %122, %125
  %127 = fadd <2 x double> %115, %102
  %128 = fsub <2 x double> %127, %102
  %129 = fsub <2 x double> %127, %128
  %130 = fsub <2 x double> %102, %129
  %131 = fsub <2 x double> %115, %128
  %132 = fadd <2 x double> %131, %130
  %133 = fadd <2 x double> %104, %126
  %134 = fadd <2 x double> %133, %132
  %135 = fmul <2 x double> %127, <double 4.000000e+00, double 4.000000e+00>
  %136 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %135, i32 8) #6
  %137 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %127, i32 8) #6
  %138 = fmul <2 x double> %137, <double 4.000000e+00, double 4.000000e+00>
  %139 = fsub <2 x double> %136, %138
  %140 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %139) #6
  %141 = fmul <2 x double> %136, <double 2.500000e-01, double 2.500000e-01>
  %142 = fsub <2 x double> %127, %141
  %143 = add <4 x i32> %140, %99
  %144 = fadd <2 x double> %142, %134
  %145 = fsub <2 x double> %142, %144
  %146 = fadd <2 x double> %134, %145
  %147 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %65
  %148 = load double, double* %147, align 8, !tbaa !3, !noalias !7
  %149 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %69
  %150 = load double, double* %149, align 8, !tbaa !3, !noalias !7
  %151 = insertelement <2 x double> undef, double %150, i32 0
  %152 = insertelement <2 x double> %151, double %148, i32 1
  %153 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %65
  %154 = load double, double* %153, align 8, !tbaa !3, !noalias !7
  %155 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %69
  %156 = load double, double* %155, align 8, !tbaa !3, !noalias !7
  %157 = insertelement <2 x double> undef, double %156, i32 0
  %158 = insertelement <2 x double> %157, double %154, i32 1
  %159 = bitcast <2 x double> %152 to <2 x i64>
  %160 = and <2 x i64> %159, <i64 -134217728, i64 -134217728>
  %161 = bitcast <2 x i64> %160 to <2 x double>
  %162 = fsub <2 x double> %152, %161
  %163 = fmul <2 x double> %152, %59
  %164 = fmul <2 x double> %76, %161
  %165 = bitcast <2 x double> %163 to <2 x i64>
  %166 = xor <2 x i64> %165, <i64 -9223372036854775808, i64 -9223372036854775808>
  %167 = bitcast <2 x i64> %166 to <2 x double>
  %168 = fmul <2 x double> %162, %76
  %169 = fmul <2 x double> %77, %161
  %170 = fmul <2 x double> %77, %162
  %171 = fmul <2 x double> %158, %59
  %172 = fadd <2 x double> %164, %167
  %173 = fadd <2 x double> %168, %172
  %174 = fadd <2 x double> %169, %173
  %175 = fadd <2 x double> %170, %174
  %176 = fadd <2 x double> %171, %175
  %177 = fadd <2 x double> %163, %144
  %178 = fsub <2 x double> %177, %144
  %179 = fsub <2 x double> %177, %178
  %180 = fsub <2 x double> %144, %179
  %181 = fsub <2 x double> %163, %178
  %182 = fadd <2 x double> %181, %180
  %183 = fadd <2 x double> %146, %176
  %184 = fadd <2 x double> %183, %182
  %185 = fadd <2 x double> %177, %184
  %186 = fsub <2 x double> %177, %185
  %187 = fadd <2 x double> %184, %186
  %188 = bitcast <2 x double> %185 to <2 x i64>
  %189 = and <2 x i64> %188, <i64 -134217728, i64 -134217728>
  %190 = bitcast <2 x i64> %189 to <2 x double>
  %191 = fsub <2 x double> %185, %190
  %192 = fmul <2 x double> %185, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %193 = fmul <2 x double> %190, <double 0x401921FB50000000, double 0x401921FB50000000>
  %194 = bitcast <2 x double> %192 to <2 x i64>
  %195 = xor <2 x i64> %194, <i64 -9223372036854775808, i64 -9223372036854775808>
  %196 = bitcast <2 x i64> %195 to <2 x double>
  %197 = fmul <2 x double> %191, <double 0x401921FB50000000, double 0x401921FB50000000>
  %198 = fmul <2 x double> %190, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %199 = fmul <2 x double> %191, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %200 = fmul <2 x double> %185, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %201 = fmul <2 x double> %187, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %202 = fadd <2 x double> %193, %196
  %203 = fadd <2 x double> %197, %202
  %204 = fadd <2 x double> %198, %203
  %205 = fadd <2 x double> %199, %204
  %206 = fadd <2 x double> %200, %205
  %207 = fadd <2 x double> %201, %206
  %208 = and <2 x i64> %74, <i64 9223372036854775807, i64 9223372036854775807>
  %209 = bitcast <2 x i64> %208 to <2 x double>
  %210 = fcmp olt <2 x double> %209, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %211 = sext <2 x i1> %210 to <2 x i64>
  %212 = bitcast <2 x i64> %211 to <2 x double>
  %213 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %192, <2 x double> %59, <2 x double> %212) #6
  %214 = bitcast <2 x double> %207 to <2 x i64>
  %215 = xor <2 x i64> %211, <i64 -1, i64 -1>
  %216 = and <2 x i64> %214, %215
  %217 = and <4 x i32> %143, <i32 3, i32 3, i32 0, i32 0>
  %218 = shl nuw nsw <4 x i32> %217, <i32 1, i32 1, i32 1, i32 1>
  %219 = fcmp ogt <2 x double> %213, zeroinitializer
  %220 = sext <2 x i1> %219 to <2 x i64>
  %221 = bitcast <2 x i64> %220 to <4 x i32>
  %222 = shufflevector <4 x i32> %221, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %223 = bitcast <4 x i32> %222 to <16 x i8>
  %224 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %223) #6
  %225 = bitcast <16 x i8> %224 to <4 x i32>
  %226 = add <4 x i32> %218, %225
  %227 = ashr <4 x i32> %226, <i32 2, i32 2, i32 2, i32 2>
  %228 = and <4 x i32> %143, <i32 1, i32 1, i32 0, i32 0>
  %229 = icmp eq <4 x i32> %228, <i32 1, i32 1, i32 0, i32 0>
  %230 = sext <4 x i1> %229 to <4 x i32>
  %231 = bitcast <2 x double> %213 to <2 x i64>
  %232 = and <2 x i64> %231, <i64 -9223372036854775808, i64 -9223372036854775808>
  %233 = xor <2 x i64> %232, <i64 -4613618979930100456, i64 -4613618979930100456>
  %234 = bitcast <2 x i64> %233 to <2 x double>
  %235 = xor <2 x i64> %232, <i64 -4858919839960114169, i64 -4858919839960114169>
  %236 = bitcast <2 x i64> %235 to <2 x double>
  %237 = bitcast <2 x i64> %216 to <2 x double>
  %238 = fadd <2 x double> %213, %234
  %239 = fsub <2 x double> %238, %213
  %240 = fsub <2 x double> %238, %239
  %241 = fsub <2 x double> %213, %240
  %242 = fsub <2 x double> %234, %239
  %243 = fadd <2 x double> %242, %241
  %244 = fadd <2 x double> %236, %237
  %245 = fadd <2 x double> %243, %244
  %246 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %247 = bitcast <4 x i32> %246 to <2 x double>
  %248 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %213, <2 x double> %238, <2 x double> %247) #6
  %249 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %237, <2 x double> %245, <2 x double> %247) #6
  %250 = fadd <2 x double> %248, %249
  %251 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %252 = fcmp uno <2 x double> %0, zeroinitializer
  %253 = or <2 x i1> %251, %252
  %254 = select <2 x i1> %253, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %250
  br label %255

; <label>:255:                                    ; preds = %24, %47, %10
  %256 = phi <4 x i32> [ %13, %10 ], [ %31, %24 ], [ %227, %47 ]
  %257 = phi <2 x double> [ %17, %10 ], [ %46, %24 ], [ %254, %47 ]
  %258 = fmul <2 x double> %257, %257
  %259 = and <4 x i32> %256, <i32 1, i32 1, i32 0, i32 0>
  %260 = icmp eq <4 x i32> %259, <i32 1, i32 1, i32 0, i32 0>
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %263 = bitcast <4 x i32> %262 to <2 x i64>
  %264 = and <2 x i64> %263, <i64 -9223372036854775808, i64 -9223372036854775808>
  %265 = bitcast <2 x double> %257 to <2 x i64>
  %266 = xor <2 x i64> %264, %265
  %267 = bitcast <2 x i64> %266 to <2 x double>
  %268 = fmul <2 x double> %258, %258
  %269 = fmul <2 x double> %268, %268
  %270 = fmul <2 x double> %258, <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>
  %271 = fadd <2 x double> %270, <double 0x3CE94FA618796592, double 0x3CE94FA618796592>
  %272 = fmul <2 x double> %258, <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>
  %273 = fadd <2 x double> %272, <double 0x3DE6124601C23966, double 0x3DE6124601C23966>
  %274 = fmul <2 x double> %268, %271
  %275 = fadd <2 x double> %273, %274
  %276 = fmul <2 x double> %258, <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>
  %277 = fadd <2 x double> %276, <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>
  %278 = fmul <2 x double> %258, <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>
  %279 = fadd <2 x double> %278, <double 0x3F8111111111110F, double 0x3F8111111111110F>
  %280 = fmul <2 x double> %268, %277
  %281 = fadd <2 x double> %279, %280
  %282 = fmul <2 x double> %269, %275
  %283 = fadd <2 x double> %281, %282
  %284 = fmul <2 x double> %258, %283
  %285 = fadd <2 x double> %284, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %286 = fmul <2 x double> %285, %267
  %287 = fmul <2 x double> %258, %286
  %288 = fadd <2 x double> %287, %267
  %289 = icmp eq <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %290 = sext <2 x i1> %289 to <2 x i64>
  %291 = bitcast <2 x i64> %290 to <2 x double>
  %292 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %288, <2 x double> %0, <2 x double> %291) #6
  ret <2 x double> %292
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sind2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %20, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = fmul <2 x double> %12, <double 0xC00921FB54442D18, double 0xC00921FB54442D18>
  %15 = fadd <2 x double> %14, %0
  %16 = fmul <2 x double> %12, <double 0xBCA1A62633145C07, double 0xBCA1A62633145C07>
  %17 = fadd <2 x double> %16, %15
  %18 = fsub <2 x double> %15, %17
  %19 = fadd <2 x double> %16, %18
  br label %288

; <label>:20:                                     ; preds = %1
  %21 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %22 = sext <2 x i1> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %23) #6
  %25 = icmp eq i32 %24, 65535
  br i1 %25, label %26, label %78, !prof !2

; <label>:26:                                     ; preds = %20
  %27 = fmul <2 x double> %0, <double 0x3E545F306DC9C883, double 0x3E545F306DC9C883>
  %28 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %27, i32 11) #6
  %29 = fmul <2 x double> %28, <double 0x4170000000000000, double 0x4170000000000000>
  %30 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %31 = fsub <2 x double> %30, %29
  %32 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %31, i32 8) #6
  %33 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %32) #6
  %34 = fmul <2 x double> %29, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %35 = fadd <2 x double> %34, %0
  %36 = fmul <2 x double> %32, <double 0xC00921FB50000000, double 0xC00921FB50000000>
  %37 = fadd <2 x double> %36, %35
  %38 = fsub <2 x double> %35, %37
  %39 = fadd <2 x double> %36, %38
  %40 = fmul <2 x double> %29, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %41 = fadd <2 x double> %40, %37
  %42 = fsub <2 x double> %41, %37
  %43 = fsub <2 x double> %41, %42
  %44 = fsub <2 x double> %37, %43
  %45 = fsub <2 x double> %40, %42
  %46 = fadd <2 x double> %45, %44
  %47 = fadd <2 x double> %39, %46
  %48 = fmul <2 x double> %32, <double 0xBE6110B460000000, double 0xBE6110B460000000>
  %49 = fadd <2 x double> %48, %41
  %50 = fsub <2 x double> %49, %41
  %51 = fsub <2 x double> %49, %50
  %52 = fsub <2 x double> %41, %51
  %53 = fsub <2 x double> %48, %50
  %54 = fadd <2 x double> %53, %52
  %55 = fadd <2 x double> %54, %47
  %56 = fmul <2 x double> %29, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %57 = fadd <2 x double> %56, %49
  %58 = fsub <2 x double> %57, %49
  %59 = fsub <2 x double> %57, %58
  %60 = fsub <2 x double> %49, %59
  %61 = fsub <2 x double> %56, %58
  %62 = fadd <2 x double> %61, %60
  %63 = fadd <2 x double> %62, %55
  %64 = fmul <2 x double> %32, <double 0xBCA1A62630000000, double 0xBCA1A62630000000>
  %65 = fadd <2 x double> %64, %57
  %66 = fsub <2 x double> %65, %57
  %67 = fsub <2 x double> %65, %66
  %68 = fsub <2 x double> %57, %67
  %69 = fsub <2 x double> %64, %66
  %70 = fadd <2 x double> %69, %68
  %71 = fadd <2 x double> %70, %63
  %72 = fadd <2 x double> %29, %32
  %73 = fmul <2 x double> %72, <double 0xBAF8A2E03707344A, double 0xBAF8A2E03707344A>
  %74 = fadd <2 x double> %73, %65
  %75 = fsub <2 x double> %65, %74
  %76 = fadd <2 x double> %73, %75
  %77 = fadd <2 x double> %76, %71
  br label %288

; <label>:78:                                     ; preds = %20
  %79 = bitcast <2 x double> %0 to <4 x i32>
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %81 = lshr <4 x i32> %80, <i32 20, i32 20, i32 20, i32 20>
  %82 = and <4 x i32> %81, <i32 2047, i32 2047, i32 0, i32 0>
  %83 = add nsw <4 x i32> %82, <i32 -1078, i32 -1078, i32 0, i32 0>
  %84 = icmp sgt <4 x i32> %83, <i32 645, i32 645, i32 0, i32 0>
  %85 = select <4 x i1> %84, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %87 = and <4 x i32> %86, <i32 0, i32 -1, i32 0, i32 -1>
  %88 = shl <4 x i32> %87, <i32 20, i32 20, i32 20, i32 20>
  %89 = add <4 x i32> %88, %79
  %90 = bitcast <4 x i32> %89 to <2 x double>
  %91 = ashr <4 x i32> %83, <i32 31, i32 31, i32 31, i32 31>
  %92 = xor <4 x i32> %91, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %93 = and <4 x i32> %92, %83
  %94 = shl <4 x i32> %93, <i32 2, i32 2, i32 2, i32 2>
  %95 = extractelement <4 x i32> %94, i32 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %96
  %98 = load double, double* %97, align 8, !tbaa !3, !noalias !10
  %99 = extractelement <4 x i32> %94, i32 0
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !3, !noalias !10
  %103 = insertelement <2 x double> undef, double %102, i32 0
  %104 = insertelement <2 x double> %103, double %98, i32 1
  %105 = bitcast <4 x i32> %89 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fsub <2 x double> %90, %107
  %109 = bitcast <2 x double> %104 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -134217728, i64 -134217728>
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fsub <2 x double> %104, %111
  %113 = fmul <2 x double> %104, %90
  %114 = fmul <2 x double> %107, %111
  %115 = bitcast <2 x double> %113 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fmul <2 x double> %108, %111
  %119 = fmul <2 x double> %112, %107
  %120 = fmul <2 x double> %108, %112
  %121 = fadd <2 x double> %114, %117
  %122 = fadd <2 x double> %118, %121
  %123 = fadd <2 x double> %119, %122
  %124 = fadd <2 x double> %120, %123
  %125 = fmul <2 x double> %113, <double 4.000000e+00, double 4.000000e+00>
  %126 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %125, i32 8) #6
  %127 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %113, i32 8) #6
  %128 = fmul <2 x double> %127, <double 4.000000e+00, double 4.000000e+00>
  %129 = fsub <2 x double> %126, %128
  %130 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %129) #6
  %131 = fmul <2 x double> %126, <double 2.500000e-01, double 2.500000e-01>
  %132 = fsub <2 x double> %113, %131
  %133 = fadd <2 x double> %132, %124
  %134 = fsub <2 x double> %132, %133
  %135 = fadd <2 x double> %124, %134
  %136 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %96
  %137 = load double, double* %136, align 8, !tbaa !3, !noalias !10
  %138 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %100
  %139 = load double, double* %138, align 8, !tbaa !3, !noalias !10
  %140 = insertelement <2 x double> undef, double %139, i32 0
  %141 = insertelement <2 x double> %140, double %137, i32 1
  %142 = bitcast <2 x double> %141 to <2 x i64>
  %143 = and <2 x i64> %142, <i64 -134217728, i64 -134217728>
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = fsub <2 x double> %141, %144
  %146 = fmul <2 x double> %141, %90
  %147 = fmul <2 x double> %107, %144
  %148 = bitcast <2 x double> %146 to <2 x i64>
  %149 = xor <2 x i64> %148, <i64 -9223372036854775808, i64 -9223372036854775808>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fmul <2 x double> %108, %144
  %152 = fmul <2 x double> %145, %107
  %153 = fmul <2 x double> %108, %145
  %154 = fadd <2 x double> %147, %150
  %155 = fadd <2 x double> %151, %154
  %156 = fadd <2 x double> %152, %155
  %157 = fadd <2 x double> %153, %156
  %158 = fadd <2 x double> %146, %133
  %159 = fsub <2 x double> %158, %133
  %160 = fsub <2 x double> %158, %159
  %161 = fsub <2 x double> %133, %160
  %162 = fsub <2 x double> %146, %159
  %163 = fadd <2 x double> %162, %161
  %164 = fadd <2 x double> %135, %157
  %165 = fadd <2 x double> %164, %163
  %166 = fmul <2 x double> %158, <double 4.000000e+00, double 4.000000e+00>
  %167 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %166, i32 8) #6
  %168 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %158, i32 8) #6
  %169 = fmul <2 x double> %168, <double 4.000000e+00, double 4.000000e+00>
  %170 = fsub <2 x double> %167, %169
  %171 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %170) #6
  %172 = fmul <2 x double> %167, <double 2.500000e-01, double 2.500000e-01>
  %173 = fsub <2 x double> %158, %172
  %174 = add <4 x i32> %171, %130
  %175 = fadd <2 x double> %173, %165
  %176 = fsub <2 x double> %173, %175
  %177 = fadd <2 x double> %165, %176
  %178 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %96
  %179 = load double, double* %178, align 8, !tbaa !3, !noalias !10
  %180 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %100
  %181 = load double, double* %180, align 8, !tbaa !3, !noalias !10
  %182 = insertelement <2 x double> undef, double %181, i32 0
  %183 = insertelement <2 x double> %182, double %179, i32 1
  %184 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %96
  %185 = load double, double* %184, align 8, !tbaa !3, !noalias !10
  %186 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %100
  %187 = load double, double* %186, align 8, !tbaa !3, !noalias !10
  %188 = insertelement <2 x double> undef, double %187, i32 0
  %189 = insertelement <2 x double> %188, double %185, i32 1
  %190 = bitcast <2 x double> %183 to <2 x i64>
  %191 = and <2 x i64> %190, <i64 -134217728, i64 -134217728>
  %192 = bitcast <2 x i64> %191 to <2 x double>
  %193 = fsub <2 x double> %183, %192
  %194 = fmul <2 x double> %183, %90
  %195 = fmul <2 x double> %107, %192
  %196 = bitcast <2 x double> %194 to <2 x i64>
  %197 = xor <2 x i64> %196, <i64 -9223372036854775808, i64 -9223372036854775808>
  %198 = bitcast <2 x i64> %197 to <2 x double>
  %199 = fmul <2 x double> %193, %107
  %200 = fmul <2 x double> %108, %192
  %201 = fmul <2 x double> %108, %193
  %202 = fmul <2 x double> %189, %90
  %203 = fadd <2 x double> %195, %198
  %204 = fadd <2 x double> %199, %203
  %205 = fadd <2 x double> %200, %204
  %206 = fadd <2 x double> %201, %205
  %207 = fadd <2 x double> %202, %206
  %208 = fadd <2 x double> %194, %175
  %209 = fsub <2 x double> %208, %175
  %210 = fsub <2 x double> %208, %209
  %211 = fsub <2 x double> %175, %210
  %212 = fsub <2 x double> %194, %209
  %213 = fadd <2 x double> %212, %211
  %214 = fadd <2 x double> %177, %207
  %215 = fadd <2 x double> %214, %213
  %216 = fadd <2 x double> %208, %215
  %217 = fsub <2 x double> %208, %216
  %218 = fadd <2 x double> %215, %217
  %219 = bitcast <2 x double> %216 to <2 x i64>
  %220 = and <2 x i64> %219, <i64 -134217728, i64 -134217728>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = fsub <2 x double> %216, %221
  %223 = fmul <2 x double> %216, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %224 = fmul <2 x double> %221, <double 0x401921FB50000000, double 0x401921FB50000000>
  %225 = bitcast <2 x double> %223 to <2 x i64>
  %226 = xor <2 x i64> %225, <i64 -9223372036854775808, i64 -9223372036854775808>
  %227 = bitcast <2 x i64> %226 to <2 x double>
  %228 = fmul <2 x double> %222, <double 0x401921FB50000000, double 0x401921FB50000000>
  %229 = fmul <2 x double> %221, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %230 = fmul <2 x double> %222, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %231 = fmul <2 x double> %216, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %232 = fmul <2 x double> %218, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %233 = fadd <2 x double> %224, %227
  %234 = fadd <2 x double> %228, %233
  %235 = fadd <2 x double> %229, %234
  %236 = fadd <2 x double> %230, %235
  %237 = fadd <2 x double> %231, %236
  %238 = fadd <2 x double> %232, %237
  %239 = and <2 x i64> %105, <i64 9223372036854775807, i64 9223372036854775807>
  %240 = bitcast <2 x i64> %239 to <2 x double>
  %241 = fcmp olt <2 x double> %240, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %242 = sext <2 x i1> %241 to <2 x i64>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %223, <2 x double> %90, <2 x double> %243) #6
  %245 = bitcast <2 x double> %238 to <2 x i64>
  %246 = xor <2 x i64> %242, <i64 -1, i64 -1>
  %247 = and <2 x i64> %245, %246
  %248 = and <4 x i32> %174, <i32 3, i32 3, i32 0, i32 0>
  %249 = shl nuw nsw <4 x i32> %248, <i32 1, i32 1, i32 1, i32 1>
  %250 = fcmp ogt <2 x double> %244, zeroinitializer
  %251 = sext <2 x i1> %250 to <2 x i64>
  %252 = bitcast <2 x i64> %251 to <4 x i32>
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %254 = bitcast <4 x i32> %253 to <16 x i8>
  %255 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %254) #6
  %256 = bitcast <16 x i8> %255 to <4 x i32>
  %257 = add <4 x i32> %249, %256
  %258 = ashr <4 x i32> %257, <i32 2, i32 2, i32 2, i32 2>
  %259 = and <4 x i32> %174, <i32 1, i32 1, i32 0, i32 0>
  %260 = icmp eq <4 x i32> %259, <i32 1, i32 1, i32 0, i32 0>
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = bitcast <2 x double> %244 to <2 x i64>
  %263 = and <2 x i64> %262, <i64 -9223372036854775808, i64 -9223372036854775808>
  %264 = xor <2 x i64> %263, <i64 -4613618979930100456, i64 -4613618979930100456>
  %265 = bitcast <2 x i64> %264 to <2 x double>
  %266 = xor <2 x i64> %263, <i64 -4858919839960114169, i64 -4858919839960114169>
  %267 = bitcast <2 x i64> %266 to <2 x double>
  %268 = bitcast <2 x i64> %247 to <2 x double>
  %269 = fadd <2 x double> %244, %265
  %270 = fsub <2 x double> %269, %244
  %271 = fsub <2 x double> %269, %270
  %272 = fsub <2 x double> %244, %271
  %273 = fsub <2 x double> %265, %270
  %274 = fadd <2 x double> %273, %272
  %275 = fadd <2 x double> %267, %268
  %276 = fadd <2 x double> %274, %275
  %277 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %278 = bitcast <4 x i32> %277 to <2 x double>
  %279 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %244, <2 x double> %269, <2 x double> %278) #6
  %280 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %268, <2 x double> %276, <2 x double> %278) #6
  %281 = fadd <2 x double> %279, %280
  %282 = fsub <2 x double> %279, %281
  %283 = fadd <2 x double> %280, %282
  %284 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %285 = fcmp uno <2 x double> %0, zeroinitializer
  %286 = or <2 x i1> %284, %285
  %287 = select <2 x i1> %286, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %281
  br label %288

; <label>:288:                                    ; preds = %26, %78, %10
  %289 = phi <2 x double> [ %287, %78 ], [ %74, %26 ], [ %17, %10 ]
  %290 = phi <2 x double> [ %283, %78 ], [ %77, %26 ], [ %19, %10 ]
  %291 = phi <4 x i32> [ %258, %78 ], [ %33, %26 ], [ %13, %10 ]
  %292 = bitcast <2 x double> %289 to <2 x i64>
  %293 = and <2 x i64> %292, <i64 -134217728, i64 -134217728>
  %294 = bitcast <2 x i64> %293 to <2 x double>
  %295 = fsub <2 x double> %289, %294
  %296 = fmul <2 x double> %289, %289
  %297 = fmul <2 x double> %294, %294
  %298 = bitcast <2 x double> %296 to <2 x i64>
  %299 = xor <2 x i64> %298, <i64 -9223372036854775808, i64 -9223372036854775808>
  %300 = bitcast <2 x i64> %299 to <2 x double>
  %301 = fadd <2 x double> %294, %294
  %302 = fmul <2 x double> %301, %295
  %303 = fmul <2 x double> %295, %295
  %304 = fadd <2 x double> %290, %290
  %305 = fmul <2 x double> %289, %304
  %306 = fadd <2 x double> %297, %300
  %307 = fadd <2 x double> %306, %302
  %308 = fadd <2 x double> %303, %307
  %309 = fadd <2 x double> %305, %308
  %310 = fmul <2 x double> %296, %296
  %311 = fmul <2 x double> %310, %310
  %312 = fmul <2 x double> %296, <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>
  %313 = fadd <2 x double> %312, <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>
  %314 = fmul <2 x double> %296, <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>
  %315 = fadd <2 x double> %314, <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>
  %316 = fmul <2 x double> %296, <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>
  %317 = fadd <2 x double> %316, <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>
  %318 = fmul <2 x double> %310, %315
  %319 = fadd <2 x double> %317, %318
  %320 = fmul <2 x double> %311, %313
  %321 = fadd <2 x double> %320, %319
  %322 = fmul <2 x double> %296, %321
  %323 = fadd <2 x double> %322, <double 0x3F811111111110B9, double 0x3F811111111110B9>
  %324 = fmul <2 x double> %296, %323
  %325 = fadd <2 x double> %324, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %326 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %325
  %327 = fadd <2 x double> %324, %326
  %328 = bitcast <2 x double> %325 to <2 x i64>
  %329 = and <2 x i64> %328, <i64 -134217728, i64 -134217728>
  %330 = bitcast <2 x i64> %329 to <2 x double>
  %331 = fsub <2 x double> %325, %330
  %332 = and <2 x i64> %298, <i64 -134217728, i64 -134217728>
  %333 = bitcast <2 x i64> %332 to <2 x double>
  %334 = fsub <2 x double> %296, %333
  %335 = fmul <2 x double> %296, %325
  %336 = fmul <2 x double> %333, %330
  %337 = bitcast <2 x double> %335 to <2 x i64>
  %338 = xor <2 x i64> %337, <i64 -9223372036854775808, i64 -9223372036854775808>
  %339 = bitcast <2 x i64> %338 to <2 x double>
  %340 = fmul <2 x double> %331, %333
  %341 = fmul <2 x double> %334, %330
  %342 = fmul <2 x double> %334, %331
  %343 = fmul <2 x double> %309, %325
  %344 = fmul <2 x double> %296, %327
  %345 = fadd <2 x double> %336, %339
  %346 = fadd <2 x double> %340, %345
  %347 = fadd <2 x double> %341, %346
  %348 = fadd <2 x double> %342, %347
  %349 = fadd <2 x double> %343, %348
  %350 = fadd <2 x double> %344, %349
  %351 = fadd <2 x double> %335, <double 1.000000e+00, double 1.000000e+00>
  %352 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %351
  %353 = fadd <2 x double> %335, %352
  %354 = fadd <2 x double> %353, %350
  %355 = bitcast <2 x double> %351 to <2 x i64>
  %356 = and <2 x i64> %355, <i64 -134217728, i64 -134217728>
  %357 = bitcast <2 x i64> %356 to <2 x double>
  %358 = fsub <2 x double> %351, %357
  %359 = fmul <2 x double> %290, %357
  %360 = fmul <2 x double> %354, %294
  %361 = fmul <2 x double> %295, %358
  %362 = fmul <2 x double> %358, %294
  %363 = fmul <2 x double> %295, %357
  %364 = fmul <2 x double> %294, %357
  %365 = fadd <2 x double> %359, %360
  %366 = fadd <2 x double> %361, %365
  %367 = fadd <2 x double> %362, %366
  %368 = fadd <2 x double> %363, %367
  %369 = fadd <2 x double> %364, %368
  %370 = and <4 x i32> %291, <i32 1, i32 1, i32 0, i32 0>
  %371 = icmp eq <4 x i32> %370, <i32 1, i32 1, i32 0, i32 0>
  %372 = sext <4 x i1> %371 to <4 x i32>
  %373 = shufflevector <4 x i32> %372, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %374 = bitcast <4 x i32> %373 to <2 x i64>
  %375 = and <2 x i64> %374, <i64 -9223372036854775808, i64 -9223372036854775808>
  %376 = bitcast <2 x double> %369 to <2 x i64>
  %377 = xor <2 x i64> %375, %376
  %378 = bitcast <2 x i64> %377 to <2 x double>
  %379 = fcmp oeq <2 x double> %0, zeroinitializer
  %380 = sext <2 x i1> %379 to <2 x i64>
  %381 = bitcast <2 x i64> %380 to <2 x double>
  %382 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %378, <2 x double> %0, <2 x double> %381) #6
  ret <2 x double> %382
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %21, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = fadd <2 x double> %11, <double -5.000000e-01, double -5.000000e-01>
  %13 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %12, i32 8) #6
  %14 = fmul <2 x double> %13, <double 2.000000e+00, double 2.000000e+00>
  %15 = fadd <2 x double> %14, <double 1.000000e+00, double 1.000000e+00>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %15) #6
  %17 = fmul <2 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <2 x double> %17, %0
  %19 = fmul <2 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %20 = fadd <2 x double> %19, %18
  br label %266

; <label>:21:                                     ; preds = %1
  %22 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %24) #6
  %26 = icmp eq i32 %25, 65535
  br i1 %26, label %27, label %56, !prof !2

; <label>:27:                                     ; preds = %21
  %28 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %29 = fadd <2 x double> %28, <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>
  %30 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %29, i32 11) #6
  %31 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %32 = fmul <2 x double> %30, <double 0xC160000000000000, double 0xC160000000000000>
  %33 = fadd <2 x double> %32, <double -5.000000e-01, double -5.000000e-01>
  %34 = fadd <2 x double> %31, %33
  %35 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %34) #6
  %36 = fmul <2 x double> %30, <double 0x4170000000000000, double 0x4170000000000000>
  %37 = shl <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>
  %38 = or <4 x i32> %37, <i32 1, i32 1, i32 0, i32 0>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %40 = sitofp <2 x i32> %39 to <2 x double>
  %41 = fmul <2 x double> %36, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %42 = fadd <2 x double> %41, %0
  %43 = fmul <2 x double> %40, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %44 = fadd <2 x double> %42, %43
  %45 = fmul <2 x double> %36, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %46 = fadd <2 x double> %45, %44
  %47 = fmul <2 x double> %40, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %48 = fadd <2 x double> %47, %46
  %49 = fmul <2 x double> %36, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %50 = fadd <2 x double> %49, %48
  %51 = fmul <2 x double> %40, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %52 = fadd <2 x double> %51, %50
  %53 = fadd <2 x double> %36, %40
  %54 = fmul <2 x double> %53, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %55 = fadd <2 x double> %54, %52
  br label %266

; <label>:56:                                     ; preds = %21
  %57 = bitcast <2 x double> %0 to <4 x i32>
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %59 = lshr <4 x i32> %58, <i32 20, i32 20, i32 20, i32 20>
  %60 = and <4 x i32> %59, <i32 2047, i32 2047, i32 0, i32 0>
  %61 = add nsw <4 x i32> %60, <i32 -1078, i32 -1078, i32 0, i32 0>
  %62 = icmp sgt <4 x i32> %61, <i32 645, i32 645, i32 0, i32 0>
  %63 = select <4 x i1> %62, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %65 = and <4 x i32> %64, <i32 0, i32 -1, i32 0, i32 -1>
  %66 = shl <4 x i32> %65, <i32 20, i32 20, i32 20, i32 20>
  %67 = add <4 x i32> %66, %57
  %68 = bitcast <4 x i32> %67 to <2 x double>
  %69 = ashr <4 x i32> %61, <i32 31, i32 31, i32 31, i32 31>
  %70 = xor <4 x i32> %69, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %71 = and <4 x i32> %70, %61
  %72 = shl <4 x i32> %71, <i32 2, i32 2, i32 2, i32 2>
  %73 = extractelement <4 x i32> %72, i32 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %74
  %76 = load double, double* %75, align 8, !tbaa !3, !noalias !13
  %77 = extractelement <4 x i32> %72, i32 0
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !3, !noalias !13
  %81 = insertelement <2 x double> undef, double %80, i32 0
  %82 = insertelement <2 x double> %81, double %76, i32 1
  %83 = bitcast <4 x i32> %67 to <2 x i64>
  %84 = and <2 x i64> %83, <i64 -134217728, i64 -134217728>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fsub <2 x double> %68, %85
  %87 = bitcast <2 x double> %82 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 -134217728, i64 -134217728>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = fsub <2 x double> %82, %89
  %91 = fmul <2 x double> %82, %68
  %92 = fmul <2 x double> %85, %89
  %93 = bitcast <2 x double> %91 to <2 x i64>
  %94 = xor <2 x i64> %93, <i64 -9223372036854775808, i64 -9223372036854775808>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fmul <2 x double> %86, %89
  %97 = fmul <2 x double> %90, %85
  %98 = fmul <2 x double> %86, %90
  %99 = fadd <2 x double> %92, %95
  %100 = fadd <2 x double> %96, %99
  %101 = fadd <2 x double> %97, %100
  %102 = fadd <2 x double> %98, %101
  %103 = fmul <2 x double> %91, <double 4.000000e+00, double 4.000000e+00>
  %104 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %103, i32 8) #6
  %105 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %91, i32 8) #6
  %106 = fmul <2 x double> %105, <double 4.000000e+00, double 4.000000e+00>
  %107 = fsub <2 x double> %104, %106
  %108 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %107) #6
  %109 = fmul <2 x double> %104, <double 2.500000e-01, double 2.500000e-01>
  %110 = fsub <2 x double> %91, %109
  %111 = fadd <2 x double> %110, %102
  %112 = fsub <2 x double> %110, %111
  %113 = fadd <2 x double> %102, %112
  %114 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %74
  %115 = load double, double* %114, align 8, !tbaa !3, !noalias !13
  %116 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %78
  %117 = load double, double* %116, align 8, !tbaa !3, !noalias !13
  %118 = insertelement <2 x double> undef, double %117, i32 0
  %119 = insertelement <2 x double> %118, double %115, i32 1
  %120 = bitcast <2 x double> %119 to <2 x i64>
  %121 = and <2 x i64> %120, <i64 -134217728, i64 -134217728>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fsub <2 x double> %119, %122
  %124 = fmul <2 x double> %119, %68
  %125 = fmul <2 x double> %85, %122
  %126 = bitcast <2 x double> %124 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -9223372036854775808, i64 -9223372036854775808>
  %128 = bitcast <2 x i64> %127 to <2 x double>
  %129 = fmul <2 x double> %86, %122
  %130 = fmul <2 x double> %123, %85
  %131 = fmul <2 x double> %86, %123
  %132 = fadd <2 x double> %125, %128
  %133 = fadd <2 x double> %129, %132
  %134 = fadd <2 x double> %130, %133
  %135 = fadd <2 x double> %131, %134
  %136 = fadd <2 x double> %124, %111
  %137 = fsub <2 x double> %136, %111
  %138 = fsub <2 x double> %136, %137
  %139 = fsub <2 x double> %111, %138
  %140 = fsub <2 x double> %124, %137
  %141 = fadd <2 x double> %140, %139
  %142 = fadd <2 x double> %113, %135
  %143 = fadd <2 x double> %142, %141
  %144 = fmul <2 x double> %136, <double 4.000000e+00, double 4.000000e+00>
  %145 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %144, i32 8) #6
  %146 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %136, i32 8) #6
  %147 = fmul <2 x double> %146, <double 4.000000e+00, double 4.000000e+00>
  %148 = fsub <2 x double> %145, %147
  %149 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %148) #6
  %150 = fmul <2 x double> %145, <double 2.500000e-01, double 2.500000e-01>
  %151 = fsub <2 x double> %136, %150
  %152 = add <4 x i32> %149, %108
  %153 = fadd <2 x double> %151, %143
  %154 = fsub <2 x double> %151, %153
  %155 = fadd <2 x double> %143, %154
  %156 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %74
  %157 = load double, double* %156, align 8, !tbaa !3, !noalias !13
  %158 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %78
  %159 = load double, double* %158, align 8, !tbaa !3, !noalias !13
  %160 = insertelement <2 x double> undef, double %159, i32 0
  %161 = insertelement <2 x double> %160, double %157, i32 1
  %162 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %74
  %163 = load double, double* %162, align 8, !tbaa !3, !noalias !13
  %164 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %78
  %165 = load double, double* %164, align 8, !tbaa !3, !noalias !13
  %166 = insertelement <2 x double> undef, double %165, i32 0
  %167 = insertelement <2 x double> %166, double %163, i32 1
  %168 = bitcast <2 x double> %161 to <2 x i64>
  %169 = and <2 x i64> %168, <i64 -134217728, i64 -134217728>
  %170 = bitcast <2 x i64> %169 to <2 x double>
  %171 = fsub <2 x double> %161, %170
  %172 = fmul <2 x double> %161, %68
  %173 = fmul <2 x double> %85, %170
  %174 = bitcast <2 x double> %172 to <2 x i64>
  %175 = xor <2 x i64> %174, <i64 -9223372036854775808, i64 -9223372036854775808>
  %176 = bitcast <2 x i64> %175 to <2 x double>
  %177 = fmul <2 x double> %171, %85
  %178 = fmul <2 x double> %86, %170
  %179 = fmul <2 x double> %86, %171
  %180 = fmul <2 x double> %167, %68
  %181 = fadd <2 x double> %173, %176
  %182 = fadd <2 x double> %177, %181
  %183 = fadd <2 x double> %178, %182
  %184 = fadd <2 x double> %179, %183
  %185 = fadd <2 x double> %180, %184
  %186 = fadd <2 x double> %172, %153
  %187 = fsub <2 x double> %186, %153
  %188 = fsub <2 x double> %186, %187
  %189 = fsub <2 x double> %153, %188
  %190 = fsub <2 x double> %172, %187
  %191 = fadd <2 x double> %190, %189
  %192 = fadd <2 x double> %155, %185
  %193 = fadd <2 x double> %192, %191
  %194 = fadd <2 x double> %186, %193
  %195 = fsub <2 x double> %186, %194
  %196 = fadd <2 x double> %193, %195
  %197 = bitcast <2 x double> %194 to <2 x i64>
  %198 = and <2 x i64> %197, <i64 -134217728, i64 -134217728>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fsub <2 x double> %194, %199
  %201 = fmul <2 x double> %194, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %202 = fmul <2 x double> %199, <double 0x401921FB50000000, double 0x401921FB50000000>
  %203 = bitcast <2 x double> %201 to <2 x i64>
  %204 = xor <2 x i64> %203, <i64 -9223372036854775808, i64 -9223372036854775808>
  %205 = bitcast <2 x i64> %204 to <2 x double>
  %206 = fmul <2 x double> %200, <double 0x401921FB50000000, double 0x401921FB50000000>
  %207 = fmul <2 x double> %199, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %208 = fmul <2 x double> %200, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %209 = fmul <2 x double> %194, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %210 = fmul <2 x double> %196, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %211 = fadd <2 x double> %202, %205
  %212 = fadd <2 x double> %206, %211
  %213 = fadd <2 x double> %207, %212
  %214 = fadd <2 x double> %208, %213
  %215 = fadd <2 x double> %209, %214
  %216 = fadd <2 x double> %210, %215
  %217 = and <2 x i64> %83, <i64 9223372036854775807, i64 9223372036854775807>
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = fcmp olt <2 x double> %218, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %220 = sext <2 x i1> %219 to <2 x i64>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %201, <2 x double> %68, <2 x double> %221) #6
  %223 = bitcast <2 x double> %216 to <2 x i64>
  %224 = xor <2 x i64> %220, <i64 -1, i64 -1>
  %225 = and <2 x i64> %223, %224
  %226 = and <4 x i32> %152, <i32 3, i32 3, i32 0, i32 0>
  %227 = shl nuw nsw <4 x i32> %226, <i32 1, i32 1, i32 1, i32 1>
  %228 = fcmp ogt <2 x double> %222, zeroinitializer
  %229 = sext <2 x i1> %228 to <2 x i64>
  %230 = bitcast <2 x i64> %229 to <4 x i32>
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %232 = bitcast <4 x i32> %231 to <16 x i8>
  %233 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %232) #6
  %234 = bitcast <16 x i8> %233 to <4 x i32>
  %235 = add <4 x i32> %227, %234
  %236 = ashr <4 x i32> %235, <i32 1, i32 1, i32 1, i32 1>
  %237 = and <4 x i32> %152, <i32 1, i32 1, i32 0, i32 0>
  %238 = icmp eq <4 x i32> %237, zeroinitializer
  %239 = sext <4 x i1> %238 to <4 x i32>
  %240 = bitcast <2 x i64> %229 to <2 x double>
  %241 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> zeroinitializer, <2 x double> %240) #6
  %242 = bitcast <2 x double> %241 to <2 x i64>
  %243 = and <2 x i64> %242, <i64 -9223372036854775808, i64 -9223372036854775808>
  %244 = xor <2 x i64> %243, <i64 -4613618979930100456, i64 -4613618979930100456>
  %245 = bitcast <2 x i64> %244 to <2 x double>
  %246 = xor <2 x i64> %243, <i64 -4858919839960114169, i64 -4858919839960114169>
  %247 = bitcast <2 x i64> %246 to <2 x double>
  %248 = bitcast <2 x i64> %225 to <2 x double>
  %249 = fadd <2 x double> %222, %245
  %250 = fsub <2 x double> %249, %222
  %251 = fsub <2 x double> %249, %250
  %252 = fsub <2 x double> %222, %251
  %253 = fsub <2 x double> %245, %250
  %254 = fadd <2 x double> %253, %252
  %255 = fadd <2 x double> %247, %248
  %256 = fadd <2 x double> %254, %255
  %257 = shufflevector <4 x i32> %239, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %258 = bitcast <4 x i32> %257 to <2 x double>
  %259 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %222, <2 x double> %249, <2 x double> %258) #6
  %260 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %248, <2 x double> %256, <2 x double> %258) #6
  %261 = fadd <2 x double> %259, %260
  %262 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %263 = fcmp uno <2 x double> %0, zeroinitializer
  %264 = or <2 x i1> %262, %263
  %265 = select <2 x i1> %264, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %261
  br label %266

; <label>:266:                                    ; preds = %27, %56, %10
  %267 = phi <4 x i32> [ %16, %10 ], [ %38, %27 ], [ %236, %56 ]
  %268 = phi <2 x double> [ %20, %10 ], [ %55, %27 ], [ %265, %56 ]
  %269 = fmul <2 x double> %268, %268
  %270 = and <4 x i32> %267, <i32 2, i32 2, i32 0, i32 0>
  %271 = icmp eq <4 x i32> %270, zeroinitializer
  %272 = sext <4 x i1> %271 to <4 x i32>
  %273 = shufflevector <4 x i32> %272, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %274 = bitcast <4 x i32> %273 to <2 x i64>
  %275 = and <2 x i64> %274, <i64 -9223372036854775808, i64 -9223372036854775808>
  %276 = bitcast <2 x double> %268 to <2 x i64>
  %277 = xor <2 x i64> %275, %276
  %278 = bitcast <2 x i64> %277 to <2 x double>
  %279 = fmul <2 x double> %269, %269
  %280 = fmul <2 x double> %279, %279
  %281 = fmul <2 x double> %269, <double 0xBC62622B22D526BE, double 0xBC62622B22D526BE>
  %282 = fadd <2 x double> %281, <double 0x3CE94FA618796592, double 0x3CE94FA618796592>
  %283 = fmul <2 x double> %269, <double 0xBD6AE7EA531357BF, double 0xBD6AE7EA531357BF>
  %284 = fadd <2 x double> %283, <double 0x3DE6124601C23966, double 0x3DE6124601C23966>
  %285 = fmul <2 x double> %279, %282
  %286 = fadd <2 x double> %284, %285
  %287 = fmul <2 x double> %269, <double 0xBE5AE64567CB5786, double 0xBE5AE64567CB5786>
  %288 = fadd <2 x double> %287, <double 0x3EC71DE3A5568A50, double 0x3EC71DE3A5568A50>
  %289 = fmul <2 x double> %269, <double 0xBF2A01A01A019FC7, double 0xBF2A01A01A019FC7>
  %290 = fadd <2 x double> %289, <double 0x3F8111111111110F, double 0x3F8111111111110F>
  %291 = fmul <2 x double> %279, %288
  %292 = fadd <2 x double> %290, %291
  %293 = fmul <2 x double> %280, %286
  %294 = fadd <2 x double> %292, %293
  %295 = fmul <2 x double> %269, %294
  %296 = fadd <2 x double> %295, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %297 = fmul <2 x double> %296, %278
  %298 = fmul <2 x double> %269, %297
  %299 = fadd <2 x double> %298, %278
  ret <2 x double> %299
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cosd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %29, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %12 = fadd <2 x double> %11, <double -5.000000e-01, double -5.000000e-01>
  %13 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %12, i32 8) #6
  %14 = fmul <2 x double> %13, <double 2.000000e+00, double 2.000000e+00>
  %15 = fadd <2 x double> %14, <double 1.000000e+00, double 1.000000e+00>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %15) #6
  %17 = fmul <2 x double> %15, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %18 = fadd <2 x double> %17, %0
  %19 = fsub <2 x double> %18, %0
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %0, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fmul <2 x double> %15, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %25 = fadd <2 x double> %24, %18
  %26 = fsub <2 x double> %18, %25
  %27 = fadd <2 x double> %24, %26
  %28 = fadd <2 x double> %27, %23
  br label %308

; <label>:29:                                     ; preds = %1
  %30 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %31 = sext <2 x i1> %30 to <2 x i64>
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %32) #6
  %34 = icmp eq i32 %33, 65535
  br i1 %34, label %35, label %96, !prof !2

; <label>:35:                                     ; preds = %29
  %36 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %37 = fadd <2 x double> %36, <double 0xBE545F306DC9C883, double 0xBE545F306DC9C883>
  %38 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %37, i32 11) #6
  %39 = fmul <2 x double> %0, <double 0x3FD45F306DC9C883, double 0x3FD45F306DC9C883>
  %40 = fmul <2 x double> %38, <double 0xC160000000000000, double 0xC160000000000000>
  %41 = fadd <2 x double> %40, <double -5.000000e-01, double -5.000000e-01>
  %42 = fadd <2 x double> %39, %41
  %43 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %42) #6
  %44 = fmul <2 x double> %38, <double 0x4170000000000000, double 0x4170000000000000>
  %45 = shl <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>
  %46 = or <4 x i32> %45, <i32 1, i32 1, i32 0, i32 0>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %48 = sitofp <2 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %44, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %50 = fadd <2 x double> %49, %0
  %51 = fmul <2 x double> %48, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %52 = fadd <2 x double> %50, %51
  %53 = fsub <2 x double> %52, %50
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %50, %54
  %56 = fsub <2 x double> %51, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fmul <2 x double> %44, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %59 = fadd <2 x double> %58, %52
  %60 = fsub <2 x double> %59, %52
  %61 = fsub <2 x double> %59, %60
  %62 = fsub <2 x double> %52, %61
  %63 = fsub <2 x double> %58, %60
  %64 = fadd <2 x double> %63, %62
  %65 = fadd <2 x double> %57, %64
  %66 = fmul <2 x double> %48, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %67 = fadd <2 x double> %66, %59
  %68 = fsub <2 x double> %67, %59
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %59, %69
  %71 = fsub <2 x double> %66, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %72, %65
  %74 = fmul <2 x double> %44, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %75 = fadd <2 x double> %74, %67
  %76 = fsub <2 x double> %75, %67
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %67, %77
  %79 = fsub <2 x double> %74, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %80, %73
  %82 = fmul <2 x double> %48, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %83 = fadd <2 x double> %82, %75
  %84 = fsub <2 x double> %83, %75
  %85 = fsub <2 x double> %83, %84
  %86 = fsub <2 x double> %75, %85
  %87 = fsub <2 x double> %82, %84
  %88 = fadd <2 x double> %87, %86
  %89 = fadd <2 x double> %88, %81
  %90 = fadd <2 x double> %44, %48
  %91 = fmul <2 x double> %90, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %92 = fadd <2 x double> %91, %83
  %93 = fsub <2 x double> %83, %92
  %94 = fadd <2 x double> %91, %93
  %95 = fadd <2 x double> %94, %89
  br label %308

; <label>:96:                                     ; preds = %29
  %97 = bitcast <2 x double> %0 to <4 x i32>
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %99 = lshr <4 x i32> %98, <i32 20, i32 20, i32 20, i32 20>
  %100 = and <4 x i32> %99, <i32 2047, i32 2047, i32 0, i32 0>
  %101 = add nsw <4 x i32> %100, <i32 -1078, i32 -1078, i32 0, i32 0>
  %102 = icmp sgt <4 x i32> %101, <i32 645, i32 645, i32 0, i32 0>
  %103 = select <4 x i1> %102, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %105 = and <4 x i32> %104, <i32 0, i32 -1, i32 0, i32 -1>
  %106 = shl <4 x i32> %105, <i32 20, i32 20, i32 20, i32 20>
  %107 = add <4 x i32> %106, %97
  %108 = bitcast <4 x i32> %107 to <2 x double>
  %109 = ashr <4 x i32> %101, <i32 31, i32 31, i32 31, i32 31>
  %110 = xor <4 x i32> %109, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %111 = and <4 x i32> %110, %101
  %112 = shl <4 x i32> %111, <i32 2, i32 2, i32 2, i32 2>
  %113 = extractelement <4 x i32> %112, i32 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %114
  %116 = load double, double* %115, align 8, !tbaa !3, !noalias !16
  %117 = extractelement <4 x i32> %112, i32 0
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !3, !noalias !16
  %121 = insertelement <2 x double> undef, double %120, i32 0
  %122 = insertelement <2 x double> %121, double %116, i32 1
  %123 = bitcast <4 x i32> %107 to <2 x i64>
  %124 = and <2 x i64> %123, <i64 -134217728, i64 -134217728>
  %125 = bitcast <2 x i64> %124 to <2 x double>
  %126 = fsub <2 x double> %108, %125
  %127 = bitcast <2 x double> %122 to <2 x i64>
  %128 = and <2 x i64> %127, <i64 -134217728, i64 -134217728>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fsub <2 x double> %122, %129
  %131 = fmul <2 x double> %122, %108
  %132 = fmul <2 x double> %125, %129
  %133 = bitcast <2 x double> %131 to <2 x i64>
  %134 = xor <2 x i64> %133, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = fmul <2 x double> %126, %129
  %137 = fmul <2 x double> %130, %125
  %138 = fmul <2 x double> %126, %130
  %139 = fadd <2 x double> %132, %135
  %140 = fadd <2 x double> %136, %139
  %141 = fadd <2 x double> %137, %140
  %142 = fadd <2 x double> %138, %141
  %143 = fmul <2 x double> %131, <double 4.000000e+00, double 4.000000e+00>
  %144 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %143, i32 8) #6
  %145 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %131, i32 8) #6
  %146 = fmul <2 x double> %145, <double 4.000000e+00, double 4.000000e+00>
  %147 = fsub <2 x double> %144, %146
  %148 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %147) #6
  %149 = fmul <2 x double> %144, <double 2.500000e-01, double 2.500000e-01>
  %150 = fsub <2 x double> %131, %149
  %151 = fadd <2 x double> %150, %142
  %152 = fsub <2 x double> %150, %151
  %153 = fadd <2 x double> %142, %152
  %154 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %114
  %155 = load double, double* %154, align 8, !tbaa !3, !noalias !16
  %156 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %118
  %157 = load double, double* %156, align 8, !tbaa !3, !noalias !16
  %158 = insertelement <2 x double> undef, double %157, i32 0
  %159 = insertelement <2 x double> %158, double %155, i32 1
  %160 = bitcast <2 x double> %159 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 -134217728, i64 -134217728>
  %162 = bitcast <2 x i64> %161 to <2 x double>
  %163 = fsub <2 x double> %159, %162
  %164 = fmul <2 x double> %159, %108
  %165 = fmul <2 x double> %125, %162
  %166 = bitcast <2 x double> %164 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372036854775808, i64 -9223372036854775808>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fmul <2 x double> %126, %162
  %170 = fmul <2 x double> %163, %125
  %171 = fmul <2 x double> %126, %163
  %172 = fadd <2 x double> %165, %168
  %173 = fadd <2 x double> %169, %172
  %174 = fadd <2 x double> %170, %173
  %175 = fadd <2 x double> %171, %174
  %176 = fadd <2 x double> %164, %151
  %177 = fsub <2 x double> %176, %151
  %178 = fsub <2 x double> %176, %177
  %179 = fsub <2 x double> %151, %178
  %180 = fsub <2 x double> %164, %177
  %181 = fadd <2 x double> %180, %179
  %182 = fadd <2 x double> %153, %175
  %183 = fadd <2 x double> %182, %181
  %184 = fmul <2 x double> %176, <double 4.000000e+00, double 4.000000e+00>
  %185 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %184, i32 8) #6
  %186 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %176, i32 8) #6
  %187 = fmul <2 x double> %186, <double 4.000000e+00, double 4.000000e+00>
  %188 = fsub <2 x double> %185, %187
  %189 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %188) #6
  %190 = fmul <2 x double> %185, <double 2.500000e-01, double 2.500000e-01>
  %191 = fsub <2 x double> %176, %190
  %192 = add <4 x i32> %189, %148
  %193 = fadd <2 x double> %191, %183
  %194 = fsub <2 x double> %191, %193
  %195 = fadd <2 x double> %183, %194
  %196 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %114
  %197 = load double, double* %196, align 8, !tbaa !3, !noalias !16
  %198 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %118
  %199 = load double, double* %198, align 8, !tbaa !3, !noalias !16
  %200 = insertelement <2 x double> undef, double %199, i32 0
  %201 = insertelement <2 x double> %200, double %197, i32 1
  %202 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %114
  %203 = load double, double* %202, align 8, !tbaa !3, !noalias !16
  %204 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %118
  %205 = load double, double* %204, align 8, !tbaa !3, !noalias !16
  %206 = insertelement <2 x double> undef, double %205, i32 0
  %207 = insertelement <2 x double> %206, double %203, i32 1
  %208 = bitcast <2 x double> %201 to <2 x i64>
  %209 = and <2 x i64> %208, <i64 -134217728, i64 -134217728>
  %210 = bitcast <2 x i64> %209 to <2 x double>
  %211 = fsub <2 x double> %201, %210
  %212 = fmul <2 x double> %201, %108
  %213 = fmul <2 x double> %125, %210
  %214 = bitcast <2 x double> %212 to <2 x i64>
  %215 = xor <2 x i64> %214, <i64 -9223372036854775808, i64 -9223372036854775808>
  %216 = bitcast <2 x i64> %215 to <2 x double>
  %217 = fmul <2 x double> %211, %125
  %218 = fmul <2 x double> %126, %210
  %219 = fmul <2 x double> %126, %211
  %220 = fmul <2 x double> %207, %108
  %221 = fadd <2 x double> %213, %216
  %222 = fadd <2 x double> %217, %221
  %223 = fadd <2 x double> %218, %222
  %224 = fadd <2 x double> %219, %223
  %225 = fadd <2 x double> %220, %224
  %226 = fadd <2 x double> %212, %193
  %227 = fsub <2 x double> %226, %193
  %228 = fsub <2 x double> %226, %227
  %229 = fsub <2 x double> %193, %228
  %230 = fsub <2 x double> %212, %227
  %231 = fadd <2 x double> %230, %229
  %232 = fadd <2 x double> %195, %225
  %233 = fadd <2 x double> %232, %231
  %234 = fadd <2 x double> %226, %233
  %235 = fsub <2 x double> %226, %234
  %236 = fadd <2 x double> %233, %235
  %237 = bitcast <2 x double> %234 to <2 x i64>
  %238 = and <2 x i64> %237, <i64 -134217728, i64 -134217728>
  %239 = bitcast <2 x i64> %238 to <2 x double>
  %240 = fsub <2 x double> %234, %239
  %241 = fmul <2 x double> %234, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %242 = fmul <2 x double> %239, <double 0x401921FB50000000, double 0x401921FB50000000>
  %243 = bitcast <2 x double> %241 to <2 x i64>
  %244 = xor <2 x i64> %243, <i64 -9223372036854775808, i64 -9223372036854775808>
  %245 = bitcast <2 x i64> %244 to <2 x double>
  %246 = fmul <2 x double> %240, <double 0x401921FB50000000, double 0x401921FB50000000>
  %247 = fmul <2 x double> %239, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %248 = fmul <2 x double> %240, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %249 = fmul <2 x double> %234, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %250 = fmul <2 x double> %236, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %251 = fadd <2 x double> %242, %245
  %252 = fadd <2 x double> %246, %251
  %253 = fadd <2 x double> %247, %252
  %254 = fadd <2 x double> %248, %253
  %255 = fadd <2 x double> %249, %254
  %256 = fadd <2 x double> %250, %255
  %257 = and <2 x i64> %123, <i64 9223372036854775807, i64 9223372036854775807>
  %258 = bitcast <2 x i64> %257 to <2 x double>
  %259 = fcmp olt <2 x double> %258, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %260 = sext <2 x i1> %259 to <2 x i64>
  %261 = bitcast <2 x i64> %260 to <2 x double>
  %262 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %241, <2 x double> %108, <2 x double> %261) #6
  %263 = bitcast <2 x double> %256 to <2 x i64>
  %264 = xor <2 x i64> %260, <i64 -1, i64 -1>
  %265 = and <2 x i64> %263, %264
  %266 = and <4 x i32> %192, <i32 3, i32 3, i32 0, i32 0>
  %267 = shl nuw nsw <4 x i32> %266, <i32 1, i32 1, i32 1, i32 1>
  %268 = fcmp ogt <2 x double> %262, zeroinitializer
  %269 = sext <2 x i1> %268 to <2 x i64>
  %270 = bitcast <2 x i64> %269 to <4 x i32>
  %271 = shufflevector <4 x i32> %270, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %272 = bitcast <4 x i32> %271 to <16 x i8>
  %273 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %272) #6
  %274 = bitcast <16 x i8> %273 to <4 x i32>
  %275 = add <4 x i32> %267, %274
  %276 = ashr <4 x i32> %275, <i32 1, i32 1, i32 1, i32 1>
  %277 = and <4 x i32> %192, <i32 1, i32 1, i32 0, i32 0>
  %278 = icmp eq <4 x i32> %277, zeroinitializer
  %279 = sext <4 x i1> %278 to <4 x i32>
  %280 = bitcast <2 x i64> %269 to <2 x double>
  %281 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> zeroinitializer, <2 x double> %280) #6
  %282 = bitcast <2 x double> %281 to <2 x i64>
  %283 = and <2 x i64> %282, <i64 -9223372036854775808, i64 -9223372036854775808>
  %284 = xor <2 x i64> %283, <i64 -4613618979930100456, i64 -4613618979930100456>
  %285 = bitcast <2 x i64> %284 to <2 x double>
  %286 = xor <2 x i64> %283, <i64 -4858919839960114169, i64 -4858919839960114169>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = bitcast <2 x i64> %265 to <2 x double>
  %289 = fadd <2 x double> %262, %285
  %290 = fsub <2 x double> %289, %262
  %291 = fsub <2 x double> %289, %290
  %292 = fsub <2 x double> %262, %291
  %293 = fsub <2 x double> %285, %290
  %294 = fadd <2 x double> %293, %292
  %295 = fadd <2 x double> %287, %288
  %296 = fadd <2 x double> %294, %295
  %297 = shufflevector <4 x i32> %279, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %298 = bitcast <4 x i32> %297 to <2 x double>
  %299 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %262, <2 x double> %289, <2 x double> %298) #6
  %300 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %288, <2 x double> %296, <2 x double> %298) #6
  %301 = fadd <2 x double> %299, %300
  %302 = fsub <2 x double> %299, %301
  %303 = fadd <2 x double> %300, %302
  %304 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %305 = fcmp uno <2 x double> %0, zeroinitializer
  %306 = or <2 x i1> %304, %305
  %307 = select <2 x i1> %306, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %301
  br label %308

; <label>:308:                                    ; preds = %35, %96, %10
  %309 = phi <2 x double> [ %307, %96 ], [ %92, %35 ], [ %25, %10 ]
  %310 = phi <2 x double> [ %303, %96 ], [ %95, %35 ], [ %28, %10 ]
  %311 = phi <4 x i32> [ %276, %96 ], [ %46, %35 ], [ %16, %10 ]
  %312 = bitcast <2 x double> %309 to <2 x i64>
  %313 = and <2 x i64> %312, <i64 -134217728, i64 -134217728>
  %314 = bitcast <2 x i64> %313 to <2 x double>
  %315 = fsub <2 x double> %309, %314
  %316 = fmul <2 x double> %309, %309
  %317 = fmul <2 x double> %314, %314
  %318 = bitcast <2 x double> %316 to <2 x i64>
  %319 = xor <2 x i64> %318, <i64 -9223372036854775808, i64 -9223372036854775808>
  %320 = bitcast <2 x i64> %319 to <2 x double>
  %321 = fadd <2 x double> %314, %314
  %322 = fmul <2 x double> %321, %315
  %323 = fmul <2 x double> %315, %315
  %324 = fadd <2 x double> %310, %310
  %325 = fmul <2 x double> %309, %324
  %326 = fadd <2 x double> %317, %320
  %327 = fadd <2 x double> %326, %322
  %328 = fadd <2 x double> %323, %327
  %329 = fadd <2 x double> %325, %328
  %330 = fmul <2 x double> %316, %316
  %331 = fmul <2 x double> %330, %330
  %332 = fmul <2 x double> %316, <double 0x3CE8811A03B2B11D, double 0x3CE8811A03B2B11D>
  %333 = fadd <2 x double> %332, <double 0xBD6AE422BC319350, double 0xBD6AE422BC319350>
  %334 = fmul <2 x double> %316, <double 0x3DE6123C74705F67, double 0x3DE6123C74705F67>
  %335 = fadd <2 x double> %334, <double 0xBE5AE6454BAA2959, double 0xBE5AE6454BAA2959>
  %336 = fmul <2 x double> %316, <double 0x3EC71DE3A525FBED, double 0x3EC71DE3A525FBED>
  %337 = fadd <2 x double> %336, <double 0xBF2A01A01A014225, double 0xBF2A01A01A014225>
  %338 = fmul <2 x double> %330, %335
  %339 = fadd <2 x double> %337, %338
  %340 = fmul <2 x double> %331, %333
  %341 = fadd <2 x double> %340, %339
  %342 = fmul <2 x double> %316, %341
  %343 = fadd <2 x double> %342, <double 0x3F811111111110B9, double 0x3F811111111110B9>
  %344 = fmul <2 x double> %316, %343
  %345 = fadd <2 x double> %344, <double 0xBFC5555555555555, double 0xBFC5555555555555>
  %346 = fsub <2 x double> <double 0xBFC5555555555555, double 0xBFC5555555555555>, %345
  %347 = fadd <2 x double> %344, %346
  %348 = bitcast <2 x double> %345 to <2 x i64>
  %349 = and <2 x i64> %348, <i64 -134217728, i64 -134217728>
  %350 = bitcast <2 x i64> %349 to <2 x double>
  %351 = fsub <2 x double> %345, %350
  %352 = and <2 x i64> %318, <i64 -134217728, i64 -134217728>
  %353 = bitcast <2 x i64> %352 to <2 x double>
  %354 = fsub <2 x double> %316, %353
  %355 = fmul <2 x double> %316, %345
  %356 = fmul <2 x double> %353, %350
  %357 = bitcast <2 x double> %355 to <2 x i64>
  %358 = xor <2 x i64> %357, <i64 -9223372036854775808, i64 -9223372036854775808>
  %359 = bitcast <2 x i64> %358 to <2 x double>
  %360 = fmul <2 x double> %351, %353
  %361 = fmul <2 x double> %354, %350
  %362 = fmul <2 x double> %354, %351
  %363 = fmul <2 x double> %329, %345
  %364 = fmul <2 x double> %316, %347
  %365 = fadd <2 x double> %356, %359
  %366 = fadd <2 x double> %360, %365
  %367 = fadd <2 x double> %361, %366
  %368 = fadd <2 x double> %362, %367
  %369 = fadd <2 x double> %363, %368
  %370 = fadd <2 x double> %364, %369
  %371 = fadd <2 x double> %355, <double 1.000000e+00, double 1.000000e+00>
  %372 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %371
  %373 = fadd <2 x double> %355, %372
  %374 = fadd <2 x double> %373, %370
  %375 = bitcast <2 x double> %371 to <2 x i64>
  %376 = and <2 x i64> %375, <i64 -134217728, i64 -134217728>
  %377 = bitcast <2 x i64> %376 to <2 x double>
  %378 = fsub <2 x double> %371, %377
  %379 = fmul <2 x double> %310, %377
  %380 = fmul <2 x double> %374, %314
  %381 = fmul <2 x double> %315, %378
  %382 = fmul <2 x double> %378, %314
  %383 = fmul <2 x double> %315, %377
  %384 = fmul <2 x double> %314, %377
  %385 = fadd <2 x double> %379, %380
  %386 = fadd <2 x double> %381, %385
  %387 = fadd <2 x double> %382, %386
  %388 = fadd <2 x double> %383, %387
  %389 = fadd <2 x double> %384, %388
  %390 = and <4 x i32> %311, <i32 2, i32 2, i32 0, i32 0>
  %391 = icmp eq <4 x i32> %390, zeroinitializer
  %392 = sext <4 x i1> %391 to <4 x i32>
  %393 = shufflevector <4 x i32> %392, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = and <2 x i64> %394, <i64 -9223372036854775808, i64 -9223372036854775808>
  %396 = bitcast <2 x double> %389 to <2 x i64>
  %397 = xor <2 x i64> %395, %396
  %398 = bitcast <2 x i64> %397 to <2 x double>
  ret <2 x double> %398
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u35sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.500000e+01, double 1.500000e+01>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %19, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %13 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %12, i32 8) #6
  %14 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %13) #6
  %15 = fmul <2 x double> %13, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %16 = fadd <2 x double> %15, %1
  %17 = fmul <2 x double> %13, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %18 = fadd <2 x double> %17, %16
  br label %224

; <label>:19:                                     ; preds = %2
  %20 = fcmp olt <2 x double> %5, <double 1.000000e+14, double 1.000000e+14>
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %22) #6
  %24 = icmp eq i32 %23, 65535
  br i1 %24, label %25, label %48, !prof !2

; <label>:25:                                     ; preds = %19
  %26 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %27 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %26, i32 11) #6
  %28 = fmul <2 x double> %27, <double 0x4170000000000000, double 0x4170000000000000>
  %29 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %30 = fsub <2 x double> %29, %28
  %31 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %30, i32 8) #6
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %31) #6
  %33 = fmul <2 x double> %28, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %34 = fadd <2 x double> %33, %1
  %35 = fmul <2 x double> %31, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %36 = fadd <2 x double> %35, %34
  %37 = fmul <2 x double> %28, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %38 = fadd <2 x double> %37, %36
  %39 = fmul <2 x double> %31, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %40 = fadd <2 x double> %39, %38
  %41 = fmul <2 x double> %28, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %42 = fadd <2 x double> %41, %40
  %43 = fmul <2 x double> %31, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %44 = fadd <2 x double> %43, %42
  %45 = fadd <2 x double> %28, %31
  %46 = fmul <2 x double> %45, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %47 = fadd <2 x double> %46, %44
  br label %224

; <label>:48:                                     ; preds = %19
  %49 = bitcast <2 x double> %1 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %51 = lshr <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %52 = and <4 x i32> %51, <i32 2047, i32 2047, i32 0, i32 0>
  %53 = add nsw <4 x i32> %52, <i32 -1078, i32 -1078, i32 0, i32 0>
  %54 = icmp sgt <4 x i32> %53, <i32 645, i32 645, i32 0, i32 0>
  %55 = select <4 x i1> %54, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %57 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %58 = shl <4 x i32> %57, <i32 20, i32 20, i32 20, i32 20>
  %59 = add <4 x i32> %58, %49
  %60 = bitcast <4 x i32> %59 to <2 x double>
  %61 = ashr <4 x i32> %53, <i32 31, i32 31, i32 31, i32 31>
  %62 = xor <4 x i32> %61, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %63 = and <4 x i32> %62, %53
  %64 = shl <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = extractelement <4 x i32> %64, i32 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !3, !noalias !19
  %69 = extractelement <4 x i32> %64, i32 0
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !3, !noalias !19
  %73 = insertelement <2 x double> undef, double %72, i32 0
  %74 = insertelement <2 x double> %73, double %68, i32 1
  %75 = bitcast <4 x i32> %59 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -134217728, i64 -134217728>
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fsub <2 x double> %60, %77
  %79 = bitcast <2 x double> %74 to <2 x i64>
  %80 = and <2 x i64> %79, <i64 -134217728, i64 -134217728>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fsub <2 x double> %74, %81
  %83 = fmul <2 x double> %74, %60
  %84 = fmul <2 x double> %77, %81
  %85 = bitcast <2 x double> %83 to <2 x i64>
  %86 = xor <2 x i64> %85, <i64 -9223372036854775808, i64 -9223372036854775808>
  %87 = bitcast <2 x i64> %86 to <2 x double>
  %88 = fmul <2 x double> %78, %81
  %89 = fmul <2 x double> %82, %77
  %90 = fmul <2 x double> %78, %82
  %91 = fadd <2 x double> %84, %87
  %92 = fadd <2 x double> %88, %91
  %93 = fadd <2 x double> %89, %92
  %94 = fadd <2 x double> %90, %93
  %95 = fmul <2 x double> %83, <double 4.000000e+00, double 4.000000e+00>
  %96 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %95, i32 8) #6
  %97 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %83, i32 8) #6
  %98 = fmul <2 x double> %97, <double 4.000000e+00, double 4.000000e+00>
  %99 = fsub <2 x double> %96, %98
  %100 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %99) #6
  %101 = fmul <2 x double> %96, <double 2.500000e-01, double 2.500000e-01>
  %102 = fsub <2 x double> %83, %101
  %103 = fadd <2 x double> %102, %94
  %104 = fsub <2 x double> %102, %103
  %105 = fadd <2 x double> %94, %104
  %106 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %66
  %107 = load double, double* %106, align 8, !tbaa !3, !noalias !19
  %108 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %70
  %109 = load double, double* %108, align 8, !tbaa !3, !noalias !19
  %110 = insertelement <2 x double> undef, double %109, i32 0
  %111 = insertelement <2 x double> %110, double %107, i32 1
  %112 = bitcast <2 x double> %111 to <2 x i64>
  %113 = and <2 x i64> %112, <i64 -134217728, i64 -134217728>
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = fsub <2 x double> %111, %114
  %116 = fmul <2 x double> %111, %60
  %117 = fmul <2 x double> %77, %114
  %118 = bitcast <2 x double> %116 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372036854775808, i64 -9223372036854775808>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fmul <2 x double> %78, %114
  %122 = fmul <2 x double> %115, %77
  %123 = fmul <2 x double> %78, %115
  %124 = fadd <2 x double> %117, %120
  %125 = fadd <2 x double> %121, %124
  %126 = fadd <2 x double> %122, %125
  %127 = fadd <2 x double> %123, %126
  %128 = fadd <2 x double> %116, %103
  %129 = fsub <2 x double> %128, %103
  %130 = fsub <2 x double> %128, %129
  %131 = fsub <2 x double> %103, %130
  %132 = fsub <2 x double> %116, %129
  %133 = fadd <2 x double> %132, %131
  %134 = fadd <2 x double> %105, %127
  %135 = fadd <2 x double> %134, %133
  %136 = fmul <2 x double> %128, <double 4.000000e+00, double 4.000000e+00>
  %137 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %136, i32 8) #6
  %138 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %128, i32 8) #6
  %139 = fmul <2 x double> %138, <double 4.000000e+00, double 4.000000e+00>
  %140 = fsub <2 x double> %137, %139
  %141 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %140) #6
  %142 = fmul <2 x double> %137, <double 2.500000e-01, double 2.500000e-01>
  %143 = fsub <2 x double> %128, %142
  %144 = add <4 x i32> %141, %100
  %145 = fadd <2 x double> %143, %135
  %146 = fsub <2 x double> %143, %145
  %147 = fadd <2 x double> %135, %146
  %148 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %66
  %149 = load double, double* %148, align 8, !tbaa !3, !noalias !19
  %150 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %70
  %151 = load double, double* %150, align 8, !tbaa !3, !noalias !19
  %152 = insertelement <2 x double> undef, double %151, i32 0
  %153 = insertelement <2 x double> %152, double %149, i32 1
  %154 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %66
  %155 = load double, double* %154, align 8, !tbaa !3, !noalias !19
  %156 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %70
  %157 = load double, double* %156, align 8, !tbaa !3, !noalias !19
  %158 = insertelement <2 x double> undef, double %157, i32 0
  %159 = insertelement <2 x double> %158, double %155, i32 1
  %160 = bitcast <2 x double> %153 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 -134217728, i64 -134217728>
  %162 = bitcast <2 x i64> %161 to <2 x double>
  %163 = fsub <2 x double> %153, %162
  %164 = fmul <2 x double> %153, %60
  %165 = fmul <2 x double> %77, %162
  %166 = bitcast <2 x double> %164 to <2 x i64>
  %167 = xor <2 x i64> %166, <i64 -9223372036854775808, i64 -9223372036854775808>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fmul <2 x double> %163, %77
  %170 = fmul <2 x double> %78, %162
  %171 = fmul <2 x double> %78, %163
  %172 = fmul <2 x double> %159, %60
  %173 = fadd <2 x double> %165, %168
  %174 = fadd <2 x double> %169, %173
  %175 = fadd <2 x double> %170, %174
  %176 = fadd <2 x double> %171, %175
  %177 = fadd <2 x double> %172, %176
  %178 = fadd <2 x double> %164, %145
  %179 = fsub <2 x double> %178, %145
  %180 = fsub <2 x double> %178, %179
  %181 = fsub <2 x double> %145, %180
  %182 = fsub <2 x double> %164, %179
  %183 = fadd <2 x double> %182, %181
  %184 = fadd <2 x double> %147, %177
  %185 = fadd <2 x double> %184, %183
  %186 = fadd <2 x double> %178, %185
  %187 = fsub <2 x double> %178, %186
  %188 = fadd <2 x double> %185, %187
  %189 = bitcast <2 x double> %186 to <2 x i64>
  %190 = and <2 x i64> %189, <i64 -134217728, i64 -134217728>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fsub <2 x double> %186, %191
  %193 = fmul <2 x double> %186, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %194 = fmul <2 x double> %191, <double 0x401921FB50000000, double 0x401921FB50000000>
  %195 = bitcast <2 x double> %193 to <2 x i64>
  %196 = xor <2 x i64> %195, <i64 -9223372036854775808, i64 -9223372036854775808>
  %197 = bitcast <2 x i64> %196 to <2 x double>
  %198 = fmul <2 x double> %192, <double 0x401921FB50000000, double 0x401921FB50000000>
  %199 = fmul <2 x double> %191, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %200 = fmul <2 x double> %192, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %201 = fmul <2 x double> %186, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %202 = fmul <2 x double> %188, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %203 = fadd <2 x double> %194, %197
  %204 = fadd <2 x double> %198, %203
  %205 = fadd <2 x double> %199, %204
  %206 = fadd <2 x double> %200, %205
  %207 = fadd <2 x double> %201, %206
  %208 = fadd <2 x double> %202, %207
  %209 = and <2 x i64> %75, <i64 9223372036854775807, i64 9223372036854775807>
  %210 = bitcast <2 x i64> %209 to <2 x double>
  %211 = fcmp olt <2 x double> %210, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %212 = sext <2 x i1> %211 to <2 x i64>
  %213 = bitcast <2 x i64> %212 to <2 x double>
  %214 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %193, <2 x double> %60, <2 x double> %213) #6
  %215 = bitcast <2 x double> %208 to <2 x i64>
  %216 = xor <2 x i64> %212, <i64 -1, i64 -1>
  %217 = and <2 x i64> %215, %216
  %218 = bitcast <2 x i64> %217 to <2 x double>
  %219 = fadd <2 x double> %214, %218
  %220 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %221 = fcmp uno <2 x double> %1, zeroinitializer
  %222 = or <2 x i1> %220, %221
  %223 = select <2 x i1> %222, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %219
  br label %224

; <label>:224:                                    ; preds = %25, %48, %11
  %225 = phi <4 x i32> [ %14, %11 ], [ %32, %25 ], [ %144, %48 ]
  %226 = phi <2 x double> [ %18, %11 ], [ %47, %25 ], [ %223, %48 ]
  %227 = fmul <2 x double> %226, %226
  %228 = fmul <2 x double> %227, <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>
  %229 = fadd <2 x double> %228, <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>
  %230 = fmul <2 x double> %227, %229
  %231 = fadd <2 x double> %230, <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>
  %232 = fmul <2 x double> %227, %231
  %233 = fadd <2 x double> %232, <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>
  %234 = fmul <2 x double> %227, %233
  %235 = fadd <2 x double> %234, <double 0x3F8111111110F135, double 0x3F8111111110F135>
  %236 = fmul <2 x double> %227, %235
  %237 = fadd <2 x double> %236, <double 0xBFC5555555555542, double 0xBFC5555555555542>
  %238 = fmul <2 x double> %227, %237
  %239 = fmul <2 x double> %226, %238
  %240 = fadd <2 x double> %226, %239
  %241 = icmp eq <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %242 = sext <2 x i1> %241 to <2 x i64>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %240, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %243) #6
  %245 = fmul <2 x double> %227, <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>
  %246 = fadd <2 x double> %245, <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>
  %247 = fmul <2 x double> %227, %246
  %248 = fadd <2 x double> %247, <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>
  %249 = fmul <2 x double> %227, %248
  %250 = fadd <2 x double> %249, <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>
  %251 = fmul <2 x double> %227, %250
  %252 = fadd <2 x double> %251, <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>
  %253 = fmul <2 x double> %227, %252
  %254 = fadd <2 x double> %253, <double 0x3FA5555555555545, double 0x3FA5555555555545>
  %255 = fmul <2 x double> %227, %254
  %256 = fadd <2 x double> %255, <double -5.000000e-01, double -5.000000e-01>
  %257 = fmul <2 x double> %227, %256
  %258 = fadd <2 x double> %257, <double 1.000000e+00, double 1.000000e+00>
  %259 = and <4 x i32> %225, <i32 1, i32 1, i32 0, i32 0>
  %260 = icmp eq <4 x i32> %259, zeroinitializer
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %263 = bitcast <4 x i32> %262 to <2 x double>
  %264 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %258, <2 x double> %244, <2 x double> %263) #6
  %265 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %244, <2 x double> %258, <2 x double> %263) #6
  %266 = and <4 x i32> %225, <i32 2, i32 2, i32 0, i32 0>
  %267 = icmp eq <4 x i32> %266, <i32 2, i32 2, i32 0, i32 0>
  %268 = sext <4 x i1> %267 to <4 x i32>
  %269 = shufflevector <4 x i32> %268, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = and <2 x i64> %270, <i64 -9223372036854775808, i64 -9223372036854775808>
  %272 = bitcast <2 x double> %264 to <2 x i64>
  %273 = xor <2 x i64> %271, %272
  %274 = add <4 x i32> %225, <i32 1, i32 1, i32 0, i32 0>
  %275 = and <4 x i32> %274, <i32 2, i32 2, i32 0, i32 0>
  %276 = icmp eq <4 x i32> %275, <i32 2, i32 2, i32 0, i32 0>
  %277 = sext <4 x i1> %276 to <4 x i32>
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = and <2 x i64> %279, <i64 -9223372036854775808, i64 -9223372036854775808>
  %281 = bitcast <2 x double> %265 to <2 x i64>
  %282 = xor <2 x i64> %280, %281
  %283 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %273, <2 x i64>* %283, align 16
  %284 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %285 = bitcast <2 x double>* %284 to <2 x i64>*
  store <2 x i64> %282, <2 x i64>* %285, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosd2_u10sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.500000e+01, double 1.500000e+01>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <16 x i8>
  %9 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %8) #6
  %10 = icmp eq i32 %9, 65535
  br i1 %10, label %11, label %22, !prof !2

; <label>:11:                                     ; preds = %2
  %12 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %13 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %12, i32 8) #6
  %14 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %13) #6
  %15 = fmul <2 x double> %13, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %16 = fadd <2 x double> %15, %1
  %17 = fmul <2 x double> %13, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %18 = fadd <2 x double> %17, %16
  %19 = fsub <2 x double> %16, %18
  %20 = fadd <2 x double> %17, %19
  %21 = bitcast <2 x double> %20 to <2 x i64>
  br label %259

; <label>:22:                                     ; preds = %2
  %23 = fcmp olt <2 x double> %5, <double 1.000000e+14, double 1.000000e+14>
  %24 = sext <2 x i1> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %25) #6
  %27 = icmp eq i32 %26, 65535
  br i1 %27, label %28, label %81, !prof !2

; <label>:28:                                     ; preds = %22
  %29 = fmul <2 x double> %1, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %30 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %29, i32 11) #6
  %31 = fmul <2 x double> %30, <double 0x4170000000000000, double 0x4170000000000000>
  %32 = fmul <2 x double> %1, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %33 = fsub <2 x double> %32, %31
  %34 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %33, i32 8) #6
  %35 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %34) #6
  %36 = fmul <2 x double> %31, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %37 = fadd <2 x double> %36, %1
  %38 = fmul <2 x double> %34, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %39 = fadd <2 x double> %38, %37
  %40 = fsub <2 x double> %37, %39
  %41 = fadd <2 x double> %38, %40
  %42 = fmul <2 x double> %31, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %43 = fadd <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %39
  %45 = fsub <2 x double> %43, %44
  %46 = fsub <2 x double> %39, %45
  %47 = fsub <2 x double> %42, %44
  %48 = fadd <2 x double> %47, %46
  %49 = fadd <2 x double> %41, %48
  %50 = fmul <2 x double> %34, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %51 = fadd <2 x double> %50, %43
  %52 = fsub <2 x double> %51, %43
  %53 = fsub <2 x double> %51, %52
  %54 = fsub <2 x double> %43, %53
  %55 = fsub <2 x double> %50, %52
  %56 = fadd <2 x double> %55, %54
  %57 = fadd <2 x double> %56, %49
  %58 = fmul <2 x double> %31, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %59 = fadd <2 x double> %58, %51
  %60 = fsub <2 x double> %59, %51
  %61 = fsub <2 x double> %59, %60
  %62 = fsub <2 x double> %51, %61
  %63 = fsub <2 x double> %58, %60
  %64 = fadd <2 x double> %63, %62
  %65 = fadd <2 x double> %64, %57
  %66 = fmul <2 x double> %34, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %67 = fadd <2 x double> %66, %59
  %68 = fsub <2 x double> %67, %59
  %69 = fsub <2 x double> %67, %68
  %70 = fsub <2 x double> %59, %69
  %71 = fsub <2 x double> %66, %68
  %72 = fadd <2 x double> %71, %70
  %73 = fadd <2 x double> %72, %65
  %74 = fadd <2 x double> %31, %34
  %75 = fmul <2 x double> %74, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %76 = fadd <2 x double> %75, %67
  %77 = fsub <2 x double> %67, %76
  %78 = fadd <2 x double> %75, %77
  %79 = fadd <2 x double> %78, %73
  %80 = bitcast <2 x double> %79 to <2 x i64>
  br label %259

; <label>:81:                                     ; preds = %22
  %82 = bitcast <2 x double> %1 to <4 x i32>
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %84 = lshr <4 x i32> %83, <i32 20, i32 20, i32 20, i32 20>
  %85 = and <4 x i32> %84, <i32 2047, i32 2047, i32 0, i32 0>
  %86 = add nsw <4 x i32> %85, <i32 -1078, i32 -1078, i32 0, i32 0>
  %87 = icmp sgt <4 x i32> %86, <i32 645, i32 645, i32 0, i32 0>
  %88 = select <4 x i1> %87, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %90 = and <4 x i32> %89, <i32 0, i32 -1, i32 0, i32 -1>
  %91 = shl <4 x i32> %90, <i32 20, i32 20, i32 20, i32 20>
  %92 = add <4 x i32> %91, %82
  %93 = bitcast <4 x i32> %92 to <2 x double>
  %94 = ashr <4 x i32> %86, <i32 31, i32 31, i32 31, i32 31>
  %95 = xor <4 x i32> %94, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %96 = and <4 x i32> %95, %86
  %97 = shl <4 x i32> %96, <i32 2, i32 2, i32 2, i32 2>
  %98 = extractelement <4 x i32> %97, i32 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %99
  %101 = load double, double* %100, align 8, !tbaa !3, !noalias !22
  %102 = extractelement <4 x i32> %97, i32 0
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %103
  %105 = load double, double* %104, align 8, !tbaa !3, !noalias !22
  %106 = insertelement <2 x double> undef, double %105, i32 0
  %107 = insertelement <2 x double> %106, double %101, i32 1
  %108 = bitcast <4 x i32> %92 to <2 x i64>
  %109 = and <2 x i64> %108, <i64 -134217728, i64 -134217728>
  %110 = bitcast <2 x i64> %109 to <2 x double>
  %111 = fsub <2 x double> %93, %110
  %112 = bitcast <2 x double> %107 to <2 x i64>
  %113 = and <2 x i64> %112, <i64 -134217728, i64 -134217728>
  %114 = bitcast <2 x i64> %113 to <2 x double>
  %115 = fsub <2 x double> %107, %114
  %116 = fmul <2 x double> %107, %93
  %117 = fmul <2 x double> %110, %114
  %118 = bitcast <2 x double> %116 to <2 x i64>
  %119 = xor <2 x i64> %118, <i64 -9223372036854775808, i64 -9223372036854775808>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fmul <2 x double> %111, %114
  %122 = fmul <2 x double> %115, %110
  %123 = fmul <2 x double> %111, %115
  %124 = fadd <2 x double> %117, %120
  %125 = fadd <2 x double> %121, %124
  %126 = fadd <2 x double> %122, %125
  %127 = fadd <2 x double> %123, %126
  %128 = fmul <2 x double> %116, <double 4.000000e+00, double 4.000000e+00>
  %129 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %128, i32 8) #6
  %130 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %116, i32 8) #6
  %131 = fmul <2 x double> %130, <double 4.000000e+00, double 4.000000e+00>
  %132 = fsub <2 x double> %129, %131
  %133 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %132) #6
  %134 = fmul <2 x double> %129, <double 2.500000e-01, double 2.500000e-01>
  %135 = fsub <2 x double> %116, %134
  %136 = fadd <2 x double> %135, %127
  %137 = fsub <2 x double> %135, %136
  %138 = fadd <2 x double> %127, %137
  %139 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %99
  %140 = load double, double* %139, align 8, !tbaa !3, !noalias !22
  %141 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %103
  %142 = load double, double* %141, align 8, !tbaa !3, !noalias !22
  %143 = insertelement <2 x double> undef, double %142, i32 0
  %144 = insertelement <2 x double> %143, double %140, i32 1
  %145 = bitcast <2 x double> %144 to <2 x i64>
  %146 = and <2 x i64> %145, <i64 -134217728, i64 -134217728>
  %147 = bitcast <2 x i64> %146 to <2 x double>
  %148 = fsub <2 x double> %144, %147
  %149 = fmul <2 x double> %144, %93
  %150 = fmul <2 x double> %110, %147
  %151 = bitcast <2 x double> %149 to <2 x i64>
  %152 = xor <2 x i64> %151, <i64 -9223372036854775808, i64 -9223372036854775808>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fmul <2 x double> %111, %147
  %155 = fmul <2 x double> %148, %110
  %156 = fmul <2 x double> %111, %148
  %157 = fadd <2 x double> %150, %153
  %158 = fadd <2 x double> %154, %157
  %159 = fadd <2 x double> %155, %158
  %160 = fadd <2 x double> %156, %159
  %161 = fadd <2 x double> %149, %136
  %162 = fsub <2 x double> %161, %136
  %163 = fsub <2 x double> %161, %162
  %164 = fsub <2 x double> %136, %163
  %165 = fsub <2 x double> %149, %162
  %166 = fadd <2 x double> %165, %164
  %167 = fadd <2 x double> %138, %160
  %168 = fadd <2 x double> %167, %166
  %169 = fmul <2 x double> %161, <double 4.000000e+00, double 4.000000e+00>
  %170 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %169, i32 8) #6
  %171 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %161, i32 8) #6
  %172 = fmul <2 x double> %171, <double 4.000000e+00, double 4.000000e+00>
  %173 = fsub <2 x double> %170, %172
  %174 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %173) #6
  %175 = fmul <2 x double> %170, <double 2.500000e-01, double 2.500000e-01>
  %176 = fsub <2 x double> %161, %175
  %177 = add <4 x i32> %174, %133
  %178 = fadd <2 x double> %176, %168
  %179 = fsub <2 x double> %176, %178
  %180 = fadd <2 x double> %168, %179
  %181 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %99
  %182 = load double, double* %181, align 8, !tbaa !3, !noalias !22
  %183 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %103
  %184 = load double, double* %183, align 8, !tbaa !3, !noalias !22
  %185 = insertelement <2 x double> undef, double %184, i32 0
  %186 = insertelement <2 x double> %185, double %182, i32 1
  %187 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %99
  %188 = load double, double* %187, align 8, !tbaa !3, !noalias !22
  %189 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %103
  %190 = load double, double* %189, align 8, !tbaa !3, !noalias !22
  %191 = insertelement <2 x double> undef, double %190, i32 0
  %192 = insertelement <2 x double> %191, double %188, i32 1
  %193 = bitcast <2 x double> %186 to <2 x i64>
  %194 = and <2 x i64> %193, <i64 -134217728, i64 -134217728>
  %195 = bitcast <2 x i64> %194 to <2 x double>
  %196 = fsub <2 x double> %186, %195
  %197 = fmul <2 x double> %186, %93
  %198 = fmul <2 x double> %110, %195
  %199 = bitcast <2 x double> %197 to <2 x i64>
  %200 = xor <2 x i64> %199, <i64 -9223372036854775808, i64 -9223372036854775808>
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fmul <2 x double> %196, %110
  %203 = fmul <2 x double> %111, %195
  %204 = fmul <2 x double> %111, %196
  %205 = fmul <2 x double> %192, %93
  %206 = fadd <2 x double> %198, %201
  %207 = fadd <2 x double> %202, %206
  %208 = fadd <2 x double> %203, %207
  %209 = fadd <2 x double> %204, %208
  %210 = fadd <2 x double> %205, %209
  %211 = fadd <2 x double> %197, %178
  %212 = fsub <2 x double> %211, %178
  %213 = fsub <2 x double> %211, %212
  %214 = fsub <2 x double> %178, %213
  %215 = fsub <2 x double> %197, %212
  %216 = fadd <2 x double> %215, %214
  %217 = fadd <2 x double> %180, %210
  %218 = fadd <2 x double> %217, %216
  %219 = fadd <2 x double> %211, %218
  %220 = fsub <2 x double> %211, %219
  %221 = fadd <2 x double> %218, %220
  %222 = bitcast <2 x double> %219 to <2 x i64>
  %223 = and <2 x i64> %222, <i64 -134217728, i64 -134217728>
  %224 = bitcast <2 x i64> %223 to <2 x double>
  %225 = fsub <2 x double> %219, %224
  %226 = fmul <2 x double> %219, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %227 = fmul <2 x double> %224, <double 0x401921FB50000000, double 0x401921FB50000000>
  %228 = bitcast <2 x double> %226 to <2 x i64>
  %229 = xor <2 x i64> %228, <i64 -9223372036854775808, i64 -9223372036854775808>
  %230 = bitcast <2 x i64> %229 to <2 x double>
  %231 = fmul <2 x double> %225, <double 0x401921FB50000000, double 0x401921FB50000000>
  %232 = fmul <2 x double> %224, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %233 = fmul <2 x double> %225, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %234 = fmul <2 x double> %219, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %235 = fmul <2 x double> %221, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %236 = fadd <2 x double> %227, %230
  %237 = fadd <2 x double> %231, %236
  %238 = fadd <2 x double> %232, %237
  %239 = fadd <2 x double> %233, %238
  %240 = fadd <2 x double> %234, %239
  %241 = fadd <2 x double> %235, %240
  %242 = and <2 x i64> %108, <i64 9223372036854775807, i64 9223372036854775807>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fcmp olt <2 x double> %243, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %245 = sext <2 x i1> %244 to <2 x i64>
  %246 = bitcast <2 x i64> %245 to <2 x double>
  %247 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %226, <2 x double> %93, <2 x double> %246) #6
  %248 = bitcast <2 x double> %241 to <2 x i64>
  %249 = xor <2 x i64> %245, <i64 -1, i64 -1>
  %250 = and <2 x i64> %248, %249
  %251 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %252 = fcmp uno <2 x double> %1, zeroinitializer
  %253 = or <2 x i1> %251, %252
  %254 = sext <2 x i1> %253 to <2 x i64>
  %255 = bitcast <2 x double> %247 to <2 x i64>
  %256 = or <2 x i64> %255, %254
  %257 = bitcast <2 x i64> %256 to <2 x double>
  %258 = or <2 x i64> %250, %254
  br label %259

; <label>:259:                                    ; preds = %28, %81, %11
  %260 = phi <2 x double> [ %257, %81 ], [ %76, %28 ], [ %18, %11 ]
  %261 = phi <2 x i64> [ %258, %81 ], [ %80, %28 ], [ %21, %11 ]
  %262 = phi <4 x i32> [ %177, %81 ], [ %35, %28 ], [ %14, %11 ]
  %263 = bitcast <2 x i64> %261 to <2 x double>
  %264 = bitcast <2 x double> %260 to <2 x i64>
  %265 = and <2 x i64> %264, <i64 -134217728, i64 -134217728>
  %266 = bitcast <2 x i64> %265 to <2 x double>
  %267 = fsub <2 x double> %260, %266
  %268 = fmul <2 x double> %263, %266
  %269 = fmul <2 x double> %267, %267
  %270 = fmul <2 x double> %267, %266
  %271 = fadd <2 x double> %270, %270
  %272 = fmul <2 x double> %266, %266
  %273 = fadd <2 x double> %268, %268
  %274 = fadd <2 x double> %273, %269
  %275 = fadd <2 x double> %274, %271
  %276 = fadd <2 x double> %272, %275
  %277 = fmul <2 x double> %276, <double 0x3DE5D82500BECB6B, double 0x3DE5D82500BECB6B>
  %278 = fadd <2 x double> %277, <double 0xBE5AE5E1E6F6F6D8, double 0xBE5AE5E1E6F6F6D8>
  %279 = fmul <2 x double> %276, %278
  %280 = fadd <2 x double> %279, <double 0x3EC71DE3503EAE9C, double 0x3EC71DE3503EAE9C>
  %281 = fmul <2 x double> %276, %280
  %282 = fadd <2 x double> %281, <double 0xBF2A01A019B64F6A, double 0xBF2A01A019B64F6A>
  %283 = fmul <2 x double> %276, %282
  %284 = fadd <2 x double> %283, <double 0x3F8111111110F135, double 0x3F8111111110F135>
  %285 = fmul <2 x double> %276, %284
  %286 = fadd <2 x double> %285, <double 0xBFC5555555555542, double 0xBFC5555555555542>
  %287 = fmul <2 x double> %260, %276
  %288 = fmul <2 x double> %287, %286
  %289 = fadd <2 x double> %260, %288
  %290 = fsub <2 x double> %260, %289
  %291 = fadd <2 x double> %288, %290
  %292 = fadd <2 x double> %291, %263
  %293 = fadd <2 x double> %289, %292
  %294 = icmp eq <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %295 = sext <2 x i1> %294 to <2 x i64>
  %296 = bitcast <2 x i64> %295 to <2 x double>
  %297 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %293, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %296) #6
  %298 = fmul <2 x double> %276, <double 0xBDA8FBF9C1BDB8CE, double 0xBDA8FBF9C1BDB8CE>
  %299 = fadd <2 x double> %298, <double 0x3E21EEA016409F05, double 0x3E21EEA016409F05>
  %300 = fmul <2 x double> %276, %299
  %301 = fadd <2 x double> %300, <double 0xBE927E4F8130BE9C, double 0xBE927E4F8130BE9C>
  %302 = fmul <2 x double> %276, %301
  %303 = fadd <2 x double> %302, <double 0x3EFA01A019C8F025, double 0x3EFA01A019C8F025>
  %304 = fmul <2 x double> %276, %303
  %305 = fadd <2 x double> %304, <double 0xBF56C16C16C14C96, double 0xBF56C16C16C14C96>
  %306 = fmul <2 x double> %276, %305
  %307 = fadd <2 x double> %306, <double 0x3FA5555555555545, double 0x3FA5555555555545>
  %308 = fmul <2 x double> %276, %307
  %309 = fadd <2 x double> %308, <double -5.000000e-01, double -5.000000e-01>
  %310 = bitcast <2 x double> %276 to <2 x i64>
  %311 = and <2 x i64> %310, <i64 -134217728, i64 -134217728>
  %312 = bitcast <2 x i64> %311 to <2 x double>
  %313 = fsub <2 x double> %276, %312
  %314 = bitcast <2 x double> %309 to <2 x i64>
  %315 = and <2 x i64> %314, <i64 -134217728, i64 -134217728>
  %316 = bitcast <2 x i64> %315 to <2 x double>
  %317 = fsub <2 x double> %309, %316
  %318 = fmul <2 x double> %276, %309
  %319 = fmul <2 x double> %312, %316
  %320 = bitcast <2 x double> %318 to <2 x i64>
  %321 = xor <2 x i64> %320, <i64 -9223372036854775808, i64 -9223372036854775808>
  %322 = bitcast <2 x i64> %321 to <2 x double>
  %323 = fmul <2 x double> %313, %316
  %324 = fmul <2 x double> %317, %312
  %325 = fmul <2 x double> %313, %317
  %326 = fadd <2 x double> %319, %322
  %327 = fadd <2 x double> %323, %326
  %328 = fadd <2 x double> %324, %327
  %329 = fadd <2 x double> %325, %328
  %330 = fadd <2 x double> %318, <double 1.000000e+00, double 1.000000e+00>
  %331 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %330
  %332 = fadd <2 x double> %318, %331
  %333 = fadd <2 x double> %332, %329
  %334 = fadd <2 x double> %330, %333
  %335 = and <4 x i32> %262, <i32 1, i32 1, i32 0, i32 0>
  %336 = icmp eq <4 x i32> %335, zeroinitializer
  %337 = sext <4 x i1> %336 to <4 x i32>
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %339 = bitcast <4 x i32> %338 to <2 x double>
  %340 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %334, <2 x double> %297, <2 x double> %339) #6
  %341 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %297, <2 x double> %334, <2 x double> %339) #6
  %342 = and <4 x i32> %262, <i32 2, i32 2, i32 0, i32 0>
  %343 = icmp eq <4 x i32> %342, <i32 2, i32 2, i32 0, i32 0>
  %344 = sext <4 x i1> %343 to <4 x i32>
  %345 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = and <2 x i64> %346, <i64 -9223372036854775808, i64 -9223372036854775808>
  %348 = bitcast <2 x double> %340 to <2 x i64>
  %349 = xor <2 x i64> %347, %348
  %350 = add <4 x i32> %262, <i32 1, i32 1, i32 0, i32 0>
  %351 = and <4 x i32> %350, <i32 2, i32 2, i32 0, i32 0>
  %352 = icmp eq <4 x i32> %351, <i32 2, i32 2, i32 0, i32 0>
  %353 = sext <4 x i1> %352 to <4 x i32>
  %354 = shufflevector <4 x i32> %353, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %355 = bitcast <4 x i32> %354 to <2 x i64>
  %356 = and <2 x i64> %355, <i64 -9223372036854775808, i64 -9223372036854775808>
  %357 = bitcast <2 x double> %341 to <2 x i64>
  %358 = xor <2 x i64> %356, %357
  %359 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %349, <2 x i64>* %359, align 16
  %360 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %361 = bitcast <2 x double>* %360 to <2 x i64>*
  store <2 x i64> %358, <2 x i64>* %361, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u05sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = bitcast <2 x double> %11 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fsub <2 x double> %11, %15
  %17 = fmul <2 x double> %15, %15
  %18 = bitcast <2 x double> %12 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fmul <2 x double> %16, %15
  %22 = fmul <2 x double> %16, %16
  %23 = fadd <2 x double> %17, %20
  %24 = fadd <2 x double> %21, %23
  %25 = fadd <2 x double> %21, %24
  %26 = fadd <2 x double> %22, %25
  %27 = fmul <2 x double> %12, <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>
  %28 = fadd <2 x double> %27, <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>
  %29 = fmul <2 x double> %12, %28
  %30 = fadd <2 x double> %29, <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>
  %31 = fmul <2 x double> %12, %30
  %32 = fadd <2 x double> %31, <double 0x3E950783486A74C8, double 0x3E950783486A74C8>
  %33 = fmul <2 x double> %12, %32
  %34 = fadd <2 x double> %33, <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>
  %35 = fmul <2 x double> %12, %34
  %36 = fadd <2 x double> %35, <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>
  %37 = fmul <2 x double> %12, %36
  %38 = fadd <2 x double> %37, <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>
  %39 = fsub <2 x double> %38, %37
  %40 = fsub <2 x double> %38, %39
  %41 = fsub <2 x double> %37, %40
  %42 = fsub <2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, %39
  %43 = fadd <2 x double> %42, %41
  %44 = fadd <2 x double> %43, <double 0x3C50B00000000000, double 0x3C50B00000000000>
  %45 = and <2 x i64> %18, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %12, %46
  %48 = bitcast <2 x double> %38 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %38, %50
  %52 = fmul <2 x double> %12, %38
  %53 = fmul <2 x double> %46, %50
  %54 = bitcast <2 x double> %52 to <2 x i64>
  %55 = xor <2 x i64> %54, <i64 -9223372036854775808, i64 -9223372036854775808>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fmul <2 x double> %47, %50
  %58 = fmul <2 x double> %51, %46
  %59 = fmul <2 x double> %47, %51
  %60 = fmul <2 x double> %12, %44
  %61 = fmul <2 x double> %26, %38
  %62 = fadd <2 x double> %53, %56
  %63 = fadd <2 x double> %57, %62
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %59, %64
  %66 = fadd <2 x double> %60, %65
  %67 = fadd <2 x double> %61, %66
  %68 = fadd <2 x double> %52, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %69 = fsub <2 x double> %68, %52
  %70 = fsub <2 x double> %68, %69
  %71 = fsub <2 x double> %52, %70
  %72 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %69
  %73 = fadd <2 x double> %72, %71
  %74 = fadd <2 x double> %67, <double 0x3C81A80000000000, double 0x3C81A80000000000>
  %75 = fadd <2 x double> %73, %74
  %76 = bitcast <2 x double> %68 to <2 x i64>
  %77 = and <2 x i64> %76, <i64 -134217728, i64 -134217728>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = fsub <2 x double> %68, %78
  %80 = fmul <2 x double> %11, %68
  %81 = fmul <2 x double> %15, %78
  %82 = bitcast <2 x double> %80 to <2 x i64>
  %83 = xor <2 x i64> %82, <i64 -9223372036854775808, i64 -9223372036854775808>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fmul <2 x double> %79, %15
  %86 = fmul <2 x double> %16, %78
  %87 = fmul <2 x double> %16, %79
  %88 = fmul <2 x double> %11, %75
  %89 = fadd <2 x double> %81, %84
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %92, %88
  %94 = fadd <2 x double> %80, %93
  %95 = bitcast <2 x double> %1 to <2 x i64>
  %96 = icmp eq <2 x i64> %95, <i64 -9223372036854775808, i64 -9223372036854775808>
  %97 = sext <2 x i1> %96 to <2 x i64>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %98) #6
  %100 = fmul <2 x double> %12, <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>
  %101 = fadd <2 x double> %100, <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>
  %102 = fmul <2 x double> %12, %101
  %103 = fadd <2 x double> %102, <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>
  %104 = fmul <2 x double> %12, %103
  %105 = fadd <2 x double> %104, <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>
  %106 = fmul <2 x double> %12, %105
  %107 = fadd <2 x double> %106, <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>
  %108 = fmul <2 x double> %12, %107
  %109 = fadd <2 x double> %108, <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>
  %110 = fmul <2 x double> %12, %109
  %111 = fadd <2 x double> %110, <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>
  %112 = fsub <2 x double> %111, %110
  %113 = fsub <2 x double> %111, %112
  %114 = fsub <2 x double> %110, %113
  %115 = fsub <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, %112
  %116 = fadd <2 x double> %115, %114
  %117 = fadd <2 x double> %116, <double 0xBC33500000000000, double 0xBC33500000000000>
  %118 = bitcast <2 x double> %111 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -134217728, i64 -134217728>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %111, %120
  %122 = fmul <2 x double> %12, %111
  %123 = fmul <2 x double> %46, %120
  %124 = bitcast <2 x double> %122 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fmul <2 x double> %47, %120
  %128 = fmul <2 x double> %121, %46
  %129 = fmul <2 x double> %47, %121
  %130 = fmul <2 x double> %12, %117
  %131 = fmul <2 x double> %26, %111
  %132 = fadd <2 x double> %123, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %131, %136
  %138 = fadd <2 x double> %122, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %139 = fsub <2 x double> %138, %122
  %140 = fsub <2 x double> %138, %139
  %141 = fsub <2 x double> %122, %140
  %142 = fsub <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, %139
  %143 = fadd <2 x double> %142, %141
  %144 = fadd <2 x double> %137, <double 0xBC76900000000000, double 0xBC76900000000000>
  %145 = fadd <2 x double> %143, %144
  %146 = bitcast <2 x double> %138 to <2 x i64>
  %147 = and <2 x i64> %146, <i64 -134217728, i64 -134217728>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fsub <2 x double> %138, %148
  %150 = fmul <2 x double> %12, %138
  %151 = fmul <2 x double> %46, %148
  %152 = bitcast <2 x double> %150 to <2 x i64>
  %153 = xor <2 x i64> %152, <i64 -9223372036854775808, i64 -9223372036854775808>
  %154 = bitcast <2 x i64> %153 to <2 x double>
  %155 = fmul <2 x double> %149, %46
  %156 = fmul <2 x double> %47, %148
  %157 = fmul <2 x double> %47, %149
  %158 = fmul <2 x double> %26, %138
  %159 = fmul <2 x double> %12, %145
  %160 = fadd <2 x double> %151, %154
  %161 = fadd <2 x double> %155, %160
  %162 = fadd <2 x double> %156, %161
  %163 = fadd <2 x double> %157, %162
  %164 = fadd <2 x double> %158, %163
  %165 = fadd <2 x double> %164, %159
  %166 = fadd <2 x double> %150, <double 1.000000e+00, double 1.000000e+00>
  %167 = fsub <2 x double> %166, %150
  %168 = fsub <2 x double> %166, %167
  %169 = fsub <2 x double> %150, %168
  %170 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %167
  %171 = fadd <2 x double> %170, %169
  %172 = fadd <2 x double> %171, %165
  %173 = fadd <2 x double> %166, %172
  %174 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %175 = icmp eq <4 x i32> %174, zeroinitializer
  %176 = sext <4 x i1> %175 to <4 x i32>
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %178 = bitcast <4 x i32> %177 to <2 x double>
  %179 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %173, <2 x double> %99, <2 x double> %178) #6
  %180 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %99, <2 x double> %173, <2 x double> %178) #6
  %181 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %182 = icmp eq <4 x i32> %181, <i32 4, i32 4, i32 0, i32 0>
  %183 = sext <4 x i1> %182 to <4 x i32>
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %185 = bitcast <4 x i32> %184 to <2 x i64>
  %186 = and <2 x i64> %185, <i64 -9223372036854775808, i64 -9223372036854775808>
  %187 = bitcast <2 x double> %179 to <2 x i64>
  %188 = xor <2 x i64> %186, %187
  %189 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %190 = and <4 x i32> %189, <i32 4, i32 4, i32 0, i32 0>
  %191 = icmp eq <4 x i32> %190, <i32 4, i32 4, i32 0, i32 0>
  %192 = sext <4 x i1> %191 to <4 x i32>
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %194 = bitcast <4 x i32> %193 to <2 x i64>
  %195 = and <2 x i64> %194, <i64 -9223372036854775808, i64 -9223372036854775808>
  %196 = bitcast <2 x double> %180 to <2 x i64>
  %197 = xor <2 x i64> %195, %196
  %198 = bitcast <2 x i64> %197 to <2 x double>
  %199 = and <2 x i64> %95, <i64 9223372036854775807, i64 9223372036854775807>
  %200 = bitcast <2 x i64> %199 to <2 x double>
  %201 = fcmp ogt <2 x double> %200, <double 2.500000e+08, double 2.500000e+08>
  %202 = sext <2 x i1> %201 to <2 x i64>
  %203 = xor <2 x i64> %202, <i64 -1, i64 -1>
  %204 = and <2 x i64> %188, %203
  %205 = bitcast <2 x i64> %202 to <2 x double>
  %206 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %198, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %205) #6
  %207 = fcmp oeq <2 x double> %200, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %208 = sext <2 x i1> %207 to <2 x i64>
  %209 = or <2 x i64> %204, %208
  %210 = bitcast <2 x double> %206 to <2 x i64>
  %211 = or <2 x i64> %210, %208
  %212 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %212, align 16
  %213 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %214 = bitcast <2 x double>* %213 to <2 x i64>*
  store <2 x i64> %211, <2 x i64>* %214, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospid2_u35sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>
  %14 = fadd <2 x double> %13, <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %15, <double 0x3E9507830918116C, double 0x3E9507830918116C>
  %17 = fmul <2 x double> %12, %16
  %18 = fadd <2 x double> %17, <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>
  %19 = fmul <2 x double> %12, %18
  %20 = fadd <2 x double> %19, <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>
  %21 = fmul <2 x double> %12, %20
  %22 = fadd <2 x double> %21, <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>
  %23 = fmul <2 x double> %12, %22
  %24 = fadd <2 x double> %23, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %25 = fmul <2 x double> %11, %24
  %26 = fmul <2 x double> %12, <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>
  %27 = fadd <2 x double> %26, <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>
  %28 = fmul <2 x double> %12, %27
  %29 = fadd <2 x double> %28, <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>
  %30 = fmul <2 x double> %12, %29
  %31 = fadd <2 x double> %30, <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>
  %32 = fmul <2 x double> %12, %31
  %33 = fadd <2 x double> %32, <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>
  %34 = fmul <2 x double> %12, %33
  %35 = fadd <2 x double> %34, <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>
  %36 = fmul <2 x double> %12, %35
  %37 = fadd <2 x double> %36, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %38 = fmul <2 x double> %12, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %41 = icmp eq <4 x i32> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %25, <2 x double> %44) #6
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %39, <2 x double> %44) #6
  %47 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %48 = icmp eq <4 x i32> %47, <i32 4, i32 4, i32 0, i32 0>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -9223372036854775808, i64 -9223372036854775808>
  %53 = bitcast <2 x double> %45 to <2 x i64>
  %54 = xor <2 x i64> %52, %53
  %55 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %56 = and <4 x i32> %55, <i32 4, i32 4, i32 0, i32 0>
  %57 = icmp eq <4 x i32> %56, <i32 4, i32 4, i32 0, i32 0>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x double> %46 to <2 x i64>
  %63 = xor <2 x i64> %61, %62
  %64 = bitcast <2 x double> %1 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 9223372036854775807, i64 9223372036854775807>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fcmp ule <2 x double> %66, <double 2.500000e+08, double 2.500000e+08>
  %68 = sext <2 x i1> %67 to <2 x i64>
  %69 = and <2 x i64> %54, %68
  %70 = and <2 x i64> %63, %68
  %71 = fcmp oeq <2 x double> %66, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %72 = sext <2 x i1> %71 to <2 x i64>
  %73 = or <2 x i64> %69, %72
  %74 = or <2 x i64> %70, %72
  %75 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %75, align 16
  %76 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %77 = bitcast <2 x double>* %76 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modfd2_sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp ogt <2 x double> %15, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> zeroinitializer, <2 x double> %18) #6
  %20 = bitcast <2 x double> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 9223372036854775807, i64 9223372036854775807>
  %22 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %23 = or <2 x i64> %21, %22
  %24 = fsub <2 x double> %1, %19
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = or <2 x i64> %26, %22
  %28 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %23, <2 x i64>* %28, align 16
  %29 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %30 = bitcast <2 x double>* %29 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %30, align 16
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinpid2_u05sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 0, i32 0>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 0, i32 0>
  %8 = icmp eq <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = and <4 x i32> %6, <i32 -2, i32 -2, i32 undef, i32 undef>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %13 = sitofp <2 x i32> %12 to <2 x double>
  %14 = fsub <2 x double> %2, %13
  %15 = fmul <2 x double> %14, %14
  %16 = bitcast <2 x double> %14 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -134217728, i64 -134217728>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fsub <2 x double> %14, %18
  %20 = fmul <2 x double> %18, %18
  %21 = bitcast <2 x double> %15 to <2 x i64>
  %22 = xor <2 x i64> %21, <i64 -9223372036854775808, i64 -9223372036854775808>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = fmul <2 x double> %19, %18
  %25 = fmul <2 x double> %19, %19
  %26 = fadd <2 x double> %20, %23
  %27 = fadd <2 x double> %24, %26
  %28 = fadd <2 x double> %24, %27
  %29 = fadd <2 x double> %25, %28
  %30 = bitcast <4 x i32> %10 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %30) #6
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %30) #6
  %33 = fmul <2 x double> %31, %15
  %34 = fadd <2 x double> %32, %33
  %35 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %30) #6
  %36 = fmul <2 x double> %15, %34
  %37 = fadd <2 x double> %35, %36
  %38 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %30) #6
  %39 = fmul <2 x double> %15, %37
  %40 = fadd <2 x double> %38, %39
  %41 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %30) #6
  %42 = fmul <2 x double> %15, %40
  %43 = fadd <2 x double> %41, %42
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %30) #6
  %45 = fmul <2 x double> %15, %43
  %46 = fadd <2 x double> %44, %45
  %47 = fmul <2 x double> %15, %46
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %30) #6
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %30) #6
  %50 = fadd <2 x double> %48, %47
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %50, %51
  %53 = fsub <2 x double> %47, %52
  %54 = fsub <2 x double> %48, %51
  %55 = fadd <2 x double> %54, %53
  %56 = fadd <2 x double> %49, %55
  %57 = and <2 x i64> %21, <i64 -134217728, i64 -134217728>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fsub <2 x double> %15, %58
  %60 = bitcast <2 x double> %50 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %50, %62
  %64 = fmul <2 x double> %15, %50
  %65 = fmul <2 x double> %58, %62
  %66 = bitcast <2 x double> %64 to <2 x i64>
  %67 = xor <2 x i64> %66, <i64 -9223372036854775808, i64 -9223372036854775808>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fmul <2 x double> %59, %62
  %70 = fmul <2 x double> %63, %58
  %71 = fmul <2 x double> %59, %63
  %72 = fmul <2 x double> %15, %56
  %73 = fmul <2 x double> %29, %50
  %74 = fadd <2 x double> %65, %68
  %75 = fadd <2 x double> %69, %74
  %76 = fadd <2 x double> %70, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %72, %77
  %79 = fadd <2 x double> %73, %78
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %30) #6
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %30) #6
  %82 = fadd <2 x double> %80, %64
  %83 = fsub <2 x double> %82, %64
  %84 = fsub <2 x double> %82, %83
  %85 = fsub <2 x double> %64, %84
  %86 = fsub <2 x double> %80, %83
  %87 = fadd <2 x double> %86, %85
  %88 = fadd <2 x double> %81, %79
  %89 = fadd <2 x double> %87, %88
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %15, <2 x double> %30) #6
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %29, <2 x double> %30) #6
  %92 = bitcast <2 x double> %82 to <2 x i64>
  %93 = and <2 x i64> %92, <i64 -134217728, i64 -134217728>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fsub <2 x double> %82, %94
  %96 = bitcast <2 x double> %90 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -134217728, i64 -134217728>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fsub <2 x double> %90, %98
  %100 = fmul <2 x double> %90, %82
  %101 = fmul <2 x double> %98, %94
  %102 = bitcast <2 x double> %100 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fmul <2 x double> %95, %98
  %106 = fmul <2 x double> %99, %94
  %107 = fmul <2 x double> %99, %95
  %108 = fmul <2 x double> %91, %82
  %109 = fmul <2 x double> %90, %89
  %110 = fadd <2 x double> %101, %104
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %114, %109
  %116 = fadd <2 x double> %100, <double 1.000000e+00, double 1.000000e+00>
  %117 = fsub <2 x double> %116, %100
  %118 = fsub <2 x double> %116, %117
  %119 = fsub <2 x double> %100, %118
  %120 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %121, %115
  %123 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %100, <2 x double> %116, <2 x double> %30) #6
  %124 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %115, <2 x double> %122, <2 x double> %30) #6
  %125 = and <4 x i32> %6, <i32 4, i32 4, i32 0, i32 0>
  %126 = icmp eq <4 x i32> %125, <i32 4, i32 4, i32 0, i32 0>
  %127 = sext <4 x i1> %126 to <4 x i32>
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %129 = bitcast <4 x i32> %128 to <2 x i64>
  %130 = and <2 x i64> %129, <i64 -9223372036854775808, i64 -9223372036854775808>
  %131 = bitcast <2 x double> %123 to <2 x i64>
  %132 = xor <2 x i64> %130, %131
  %133 = bitcast <2 x double> %124 to <2 x i64>
  %134 = xor <2 x i64> %130, %133
  %135 = bitcast <2 x i64> %132 to <2 x double>
  %136 = bitcast <2 x i64> %134 to <2 x double>
  %137 = fadd <2 x double> %135, %136
  %138 = bitcast <2 x double> %0 to <2 x i64>
  %139 = icmp eq <2 x i64> %138, <i64 -9223372036854775808, i64 -9223372036854775808>
  %140 = sext <2 x i1> %139 to <2 x i64>
  %141 = bitcast <2 x i64> %140 to <2 x double>
  %142 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %141) #6
  %143 = and <2 x i64> %138, <i64 9223372036854775807, i64 9223372036854775807>
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = fcmp ule <2 x double> %144, <double 2.500000e+08, double 2.500000e+08>
  %146 = fcmp oeq <2 x double> %144, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %147 = select <2 x i1> %145, <2 x double> %142, <2 x double> zeroinitializer
  %148 = select <2 x i1> %146, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %147
  ret <2 x double> %148
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cospid2_u05sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 4.000000e+00, double 4.000000e+00>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = lshr <4 x i32> %3, <i32 31, i32 31, i32 31, i32 31>
  %5 = xor <4 x i32> %4, <i32 1, i32 1, i32 0, i32 0>
  %6 = add <4 x i32> %5, %3
  %7 = and <4 x i32> %6, <i32 2, i32 2, i32 0, i32 0>
  %8 = icmp eq <4 x i32> %7, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %11 = and <4 x i32> %6, <i32 -2, i32 -2, i32 0, i32 0>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %13 = sitofp <2 x i32> %12 to <2 x double>
  %14 = fsub <2 x double> %2, %13
  %15 = fmul <2 x double> %14, %14
  %16 = bitcast <2 x double> %14 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -134217728, i64 -134217728>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fsub <2 x double> %14, %18
  %20 = fmul <2 x double> %18, %18
  %21 = bitcast <2 x double> %15 to <2 x i64>
  %22 = xor <2 x i64> %21, <i64 -9223372036854775808, i64 -9223372036854775808>
  %23 = bitcast <2 x i64> %22 to <2 x double>
  %24 = fmul <2 x double> %19, %18
  %25 = fmul <2 x double> %19, %19
  %26 = fadd <2 x double> %20, %23
  %27 = fadd <2 x double> %24, %26
  %28 = fadd <2 x double> %24, %27
  %29 = fadd <2 x double> %25, %28
  %30 = bitcast <4 x i32> %10 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %30) #6
  %32 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %30) #6
  %33 = fmul <2 x double> %31, %15
  %34 = fadd <2 x double> %32, %33
  %35 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %30) #6
  %36 = fmul <2 x double> %15, %34
  %37 = fadd <2 x double> %35, %36
  %38 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %30) #6
  %39 = fmul <2 x double> %15, %37
  %40 = fadd <2 x double> %38, %39
  %41 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %30) #6
  %42 = fmul <2 x double> %15, %40
  %43 = fadd <2 x double> %41, %42
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %30) #6
  %45 = fmul <2 x double> %15, %43
  %46 = fadd <2 x double> %44, %45
  %47 = fmul <2 x double> %15, %46
  %48 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %30) #6
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %30) #6
  %50 = fadd <2 x double> %48, %47
  %51 = fsub <2 x double> %50, %47
  %52 = fsub <2 x double> %50, %51
  %53 = fsub <2 x double> %47, %52
  %54 = fsub <2 x double> %48, %51
  %55 = fadd <2 x double> %54, %53
  %56 = fadd <2 x double> %49, %55
  %57 = and <2 x i64> %21, <i64 -134217728, i64 -134217728>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fsub <2 x double> %15, %58
  %60 = bitcast <2 x double> %50 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %50, %62
  %64 = fmul <2 x double> %15, %50
  %65 = fmul <2 x double> %58, %62
  %66 = bitcast <2 x double> %64 to <2 x i64>
  %67 = xor <2 x i64> %66, <i64 -9223372036854775808, i64 -9223372036854775808>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fmul <2 x double> %59, %62
  %70 = fmul <2 x double> %63, %58
  %71 = fmul <2 x double> %59, %63
  %72 = fmul <2 x double> %15, %56
  %73 = fmul <2 x double> %29, %50
  %74 = fadd <2 x double> %65, %68
  %75 = fadd <2 x double> %69, %74
  %76 = fadd <2 x double> %70, %75
  %77 = fadd <2 x double> %71, %76
  %78 = fadd <2 x double> %72, %77
  %79 = fadd <2 x double> %73, %78
  %80 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %30) #6
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %30) #6
  %82 = fadd <2 x double> %80, %64
  %83 = fsub <2 x double> %82, %64
  %84 = fsub <2 x double> %82, %83
  %85 = fsub <2 x double> %64, %84
  %86 = fsub <2 x double> %80, %83
  %87 = fadd <2 x double> %86, %85
  %88 = fadd <2 x double> %81, %79
  %89 = fadd <2 x double> %87, %88
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %15, <2 x double> %30) #6
  %91 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %29, <2 x double> %30) #6
  %92 = bitcast <2 x double> %82 to <2 x i64>
  %93 = and <2 x i64> %92, <i64 -134217728, i64 -134217728>
  %94 = bitcast <2 x i64> %93 to <2 x double>
  %95 = fsub <2 x double> %82, %94
  %96 = bitcast <2 x double> %90 to <2 x i64>
  %97 = and <2 x i64> %96, <i64 -134217728, i64 -134217728>
  %98 = bitcast <2 x i64> %97 to <2 x double>
  %99 = fsub <2 x double> %90, %98
  %100 = fmul <2 x double> %90, %82
  %101 = fmul <2 x double> %98, %94
  %102 = bitcast <2 x double> %100 to <2 x i64>
  %103 = xor <2 x i64> %102, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = fmul <2 x double> %95, %98
  %106 = fmul <2 x double> %99, %94
  %107 = fmul <2 x double> %99, %95
  %108 = fmul <2 x double> %91, %82
  %109 = fmul <2 x double> %90, %89
  %110 = fadd <2 x double> %101, %104
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %114, %109
  %116 = fadd <2 x double> %100, <double 1.000000e+00, double 1.000000e+00>
  %117 = fsub <2 x double> %116, %100
  %118 = fsub <2 x double> %116, %117
  %119 = fsub <2 x double> %100, %118
  %120 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %121 = fadd <2 x double> %120, %119
  %122 = fadd <2 x double> %121, %115
  %123 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %100, <2 x double> %116, <2 x double> %30) #6
  %124 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %115, <2 x double> %122, <2 x double> %30) #6
  %125 = add <4 x i32> %11, <i32 2, i32 2, i32 0, i32 0>
  %126 = and <4 x i32> %125, <i32 4, i32 4, i32 0, i32 0>
  %127 = icmp eq <4 x i32> %126, <i32 4, i32 4, i32 0, i32 0>
  %128 = sext <4 x i1> %127 to <4 x i32>
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = and <2 x i64> %130, <i64 -9223372036854775808, i64 -9223372036854775808>
  %132 = bitcast <2 x double> %123 to <2 x i64>
  %133 = xor <2 x i64> %131, %132
  %134 = bitcast <2 x double> %124 to <2 x i64>
  %135 = xor <2 x i64> %131, %134
  %136 = bitcast <2 x i64> %133 to <2 x double>
  %137 = bitcast <2 x i64> %135 to <2 x double>
  %138 = fadd <2 x double> %136, %137
  %139 = bitcast <2 x double> %0 to <2 x i64>
  %140 = and <2 x i64> %139, <i64 9223372036854775807, i64 9223372036854775807>
  %141 = bitcast <2 x i64> %140 to <2 x double>
  %142 = fcmp ogt <2 x double> %141, <double 2.500000e+08, double 2.500000e+08>
  %143 = sext <2 x i1> %142 to <2 x i64>
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %138, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %144) #6
  %146 = fcmp oeq <2 x double> %141, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %147 = select <2 x i1> %146, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %145
  ret <2 x double> %147
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %18, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = fmul <2 x double> %12, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %15 = fadd <2 x double> %14, %0
  %16 = fmul <2 x double> %12, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %17 = fadd <2 x double> %16, %15
  br label %223

; <label>:18:                                     ; preds = %1
  %19 = fcmp olt <2 x double> %4, <double 1.000000e+06, double 1.000000e+06>
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = bitcast <2 x i64> %20 to <16 x i8>
  %22 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %21) #6
  %23 = icmp eq i32 %22, 65535
  br i1 %23, label %24, label %47, !prof !2

; <label>:24:                                     ; preds = %18
  %25 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %26 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %25, i32 11) #6
  %27 = fmul <2 x double> %26, <double 0x4170000000000000, double 0x4170000000000000>
  %28 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %29 = fsub <2 x double> %28, %27
  %30 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %29, i32 8) #6
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %30) #6
  %32 = fmul <2 x double> %27, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %33 = fadd <2 x double> %32, %0
  %34 = fmul <2 x double> %30, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %35 = fadd <2 x double> %34, %33
  %36 = fmul <2 x double> %27, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %37 = fadd <2 x double> %36, %35
  %38 = fmul <2 x double> %30, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %39 = fadd <2 x double> %38, %37
  %40 = fmul <2 x double> %27, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %41 = fadd <2 x double> %40, %39
  %42 = fmul <2 x double> %30, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %43 = fadd <2 x double> %42, %41
  %44 = fadd <2 x double> %27, %30
  %45 = fmul <2 x double> %44, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %46 = fadd <2 x double> %45, %43
  br label %223

; <label>:47:                                     ; preds = %18
  %48 = bitcast <2 x double> %0 to <4 x i32>
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %50 = lshr <4 x i32> %49, <i32 20, i32 20, i32 20, i32 20>
  %51 = and <4 x i32> %50, <i32 2047, i32 2047, i32 0, i32 0>
  %52 = add nsw <4 x i32> %51, <i32 -1078, i32 -1078, i32 0, i32 0>
  %53 = icmp sgt <4 x i32> %52, <i32 645, i32 645, i32 0, i32 0>
  %54 = select <4 x i1> %53, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %56 = and <4 x i32> %55, <i32 0, i32 -1, i32 0, i32 -1>
  %57 = shl <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = add <4 x i32> %57, %48
  %59 = bitcast <4 x i32> %58 to <2 x double>
  %60 = ashr <4 x i32> %52, <i32 31, i32 31, i32 31, i32 31>
  %61 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %62 = and <4 x i32> %61, %52
  %63 = shl <4 x i32> %62, <i32 2, i32 2, i32 2, i32 2>
  %64 = extractelement <4 x i32> %63, i32 1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !3, !noalias !25
  %68 = extractelement <4 x i32> %63, i32 0
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %69
  %71 = load double, double* %70, align 8, !tbaa !3, !noalias !25
  %72 = insertelement <2 x double> undef, double %71, i32 0
  %73 = insertelement <2 x double> %72, double %67, i32 1
  %74 = bitcast <4 x i32> %58 to <2 x i64>
  %75 = and <2 x i64> %74, <i64 -134217728, i64 -134217728>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = fsub <2 x double> %59, %76
  %78 = bitcast <2 x double> %73 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -134217728, i64 -134217728>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = fsub <2 x double> %73, %80
  %82 = fmul <2 x double> %73, %59
  %83 = fmul <2 x double> %76, %80
  %84 = bitcast <2 x double> %82 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %77, %80
  %88 = fmul <2 x double> %81, %76
  %89 = fmul <2 x double> %77, %81
  %90 = fadd <2 x double> %83, %86
  %91 = fadd <2 x double> %87, %90
  %92 = fadd <2 x double> %88, %91
  %93 = fadd <2 x double> %89, %92
  %94 = fmul <2 x double> %82, <double 4.000000e+00, double 4.000000e+00>
  %95 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %94, i32 8) #6
  %96 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %82, i32 8) #6
  %97 = fmul <2 x double> %96, <double 4.000000e+00, double 4.000000e+00>
  %98 = fsub <2 x double> %95, %97
  %99 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %98) #6
  %100 = fmul <2 x double> %95, <double 2.500000e-01, double 2.500000e-01>
  %101 = fsub <2 x double> %82, %100
  %102 = fadd <2 x double> %101, %93
  %103 = fsub <2 x double> %101, %102
  %104 = fadd <2 x double> %93, %103
  %105 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %65
  %106 = load double, double* %105, align 8, !tbaa !3, !noalias !25
  %107 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %69
  %108 = load double, double* %107, align 8, !tbaa !3, !noalias !25
  %109 = insertelement <2 x double> undef, double %108, i32 0
  %110 = insertelement <2 x double> %109, double %106, i32 1
  %111 = bitcast <2 x double> %110 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %110, %113
  %115 = fmul <2 x double> %110, %59
  %116 = fmul <2 x double> %76, %113
  %117 = bitcast <2 x double> %115 to <2 x i64>
  %118 = xor <2 x i64> %117, <i64 -9223372036854775808, i64 -9223372036854775808>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fmul <2 x double> %77, %113
  %121 = fmul <2 x double> %114, %76
  %122 = fmul <2 x double> %77, %114
  %123 = fadd <2 x double> %116, %119
  %124 = fadd <2 x double> %120, %123
  %125 = fadd <2 x double> %121, %124
  %126 = fadd <2 x double> %122, %125
  %127 = fadd <2 x double> %115, %102
  %128 = fsub <2 x double> %127, %102
  %129 = fsub <2 x double> %127, %128
  %130 = fsub <2 x double> %102, %129
  %131 = fsub <2 x double> %115, %128
  %132 = fadd <2 x double> %131, %130
  %133 = fadd <2 x double> %104, %126
  %134 = fadd <2 x double> %133, %132
  %135 = fmul <2 x double> %127, <double 4.000000e+00, double 4.000000e+00>
  %136 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %135, i32 8) #6
  %137 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %127, i32 8) #6
  %138 = fmul <2 x double> %137, <double 4.000000e+00, double 4.000000e+00>
  %139 = fsub <2 x double> %136, %138
  %140 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %139) #6
  %141 = fmul <2 x double> %136, <double 2.500000e-01, double 2.500000e-01>
  %142 = fsub <2 x double> %127, %141
  %143 = add <4 x i32> %140, %99
  %144 = fadd <2 x double> %142, %134
  %145 = fsub <2 x double> %142, %144
  %146 = fadd <2 x double> %134, %145
  %147 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %65
  %148 = load double, double* %147, align 8, !tbaa !3, !noalias !25
  %149 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %69
  %150 = load double, double* %149, align 8, !tbaa !3, !noalias !25
  %151 = insertelement <2 x double> undef, double %150, i32 0
  %152 = insertelement <2 x double> %151, double %148, i32 1
  %153 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %65
  %154 = load double, double* %153, align 8, !tbaa !3, !noalias !25
  %155 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %69
  %156 = load double, double* %155, align 8, !tbaa !3, !noalias !25
  %157 = insertelement <2 x double> undef, double %156, i32 0
  %158 = insertelement <2 x double> %157, double %154, i32 1
  %159 = bitcast <2 x double> %152 to <2 x i64>
  %160 = and <2 x i64> %159, <i64 -134217728, i64 -134217728>
  %161 = bitcast <2 x i64> %160 to <2 x double>
  %162 = fsub <2 x double> %152, %161
  %163 = fmul <2 x double> %152, %59
  %164 = fmul <2 x double> %76, %161
  %165 = bitcast <2 x double> %163 to <2 x i64>
  %166 = xor <2 x i64> %165, <i64 -9223372036854775808, i64 -9223372036854775808>
  %167 = bitcast <2 x i64> %166 to <2 x double>
  %168 = fmul <2 x double> %162, %76
  %169 = fmul <2 x double> %77, %161
  %170 = fmul <2 x double> %77, %162
  %171 = fmul <2 x double> %158, %59
  %172 = fadd <2 x double> %164, %167
  %173 = fadd <2 x double> %168, %172
  %174 = fadd <2 x double> %169, %173
  %175 = fadd <2 x double> %170, %174
  %176 = fadd <2 x double> %171, %175
  %177 = fadd <2 x double> %163, %144
  %178 = fsub <2 x double> %177, %144
  %179 = fsub <2 x double> %177, %178
  %180 = fsub <2 x double> %144, %179
  %181 = fsub <2 x double> %163, %178
  %182 = fadd <2 x double> %181, %180
  %183 = fadd <2 x double> %146, %176
  %184 = fadd <2 x double> %183, %182
  %185 = fadd <2 x double> %177, %184
  %186 = fsub <2 x double> %177, %185
  %187 = fadd <2 x double> %184, %186
  %188 = bitcast <2 x double> %185 to <2 x i64>
  %189 = and <2 x i64> %188, <i64 -134217728, i64 -134217728>
  %190 = bitcast <2 x i64> %189 to <2 x double>
  %191 = fsub <2 x double> %185, %190
  %192 = fmul <2 x double> %185, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %193 = fmul <2 x double> %190, <double 0x401921FB50000000, double 0x401921FB50000000>
  %194 = bitcast <2 x double> %192 to <2 x i64>
  %195 = xor <2 x i64> %194, <i64 -9223372036854775808, i64 -9223372036854775808>
  %196 = bitcast <2 x i64> %195 to <2 x double>
  %197 = fmul <2 x double> %191, <double 0x401921FB50000000, double 0x401921FB50000000>
  %198 = fmul <2 x double> %190, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %199 = fmul <2 x double> %191, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %200 = fmul <2 x double> %185, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %201 = fmul <2 x double> %187, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %202 = fadd <2 x double> %193, %196
  %203 = fadd <2 x double> %197, %202
  %204 = fadd <2 x double> %198, %203
  %205 = fadd <2 x double> %199, %204
  %206 = fadd <2 x double> %200, %205
  %207 = fadd <2 x double> %201, %206
  %208 = and <2 x i64> %74, <i64 9223372036854775807, i64 9223372036854775807>
  %209 = bitcast <2 x i64> %208 to <2 x double>
  %210 = fcmp olt <2 x double> %209, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %211 = sext <2 x i1> %210 to <2 x i64>
  %212 = bitcast <2 x i64> %211 to <2 x double>
  %213 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %192, <2 x double> %59, <2 x double> %212) #6
  %214 = bitcast <2 x double> %207 to <2 x i64>
  %215 = xor <2 x i64> %211, <i64 -1, i64 -1>
  %216 = and <2 x i64> %214, %215
  %217 = bitcast <2 x i64> %216 to <2 x double>
  %218 = fadd <2 x double> %213, %217
  %219 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %220 = fcmp uno <2 x double> %0, zeroinitializer
  %221 = or <2 x i1> %219, %220
  %222 = select <2 x i1> %221, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %218
  br label %223

; <label>:223:                                    ; preds = %24, %47, %10
  %224 = phi <4 x i32> [ %13, %10 ], [ %31, %24 ], [ %143, %47 ]
  %225 = phi <2 x double> [ %17, %10 ], [ %46, %24 ], [ %222, %47 ]
  %226 = fmul <2 x double> %225, <double 5.000000e-01, double 5.000000e-01>
  %227 = fmul <2 x double> %226, %226
  %228 = fmul <2 x double> %227, %227
  %229 = fmul <2 x double> %228, %228
  %230 = fmul <2 x double> %227, <double 0x3F35445F555134ED, double 0x3F35445F555134ED>
  %231 = fadd <2 x double> %230, <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>
  %232 = fmul <2 x double> %227, <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>
  %233 = fadd <2 x double> %232, <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>
  %234 = fmul <2 x double> %228, %231
  %235 = fadd <2 x double> %233, %234
  %236 = fmul <2 x double> %227, <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>
  %237 = fadd <2 x double> %236, <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>
  %238 = fmul <2 x double> %227, <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>
  %239 = fadd <2 x double> %238, <double 0x3FC111111110E933, double 0x3FC111111110E933>
  %240 = fmul <2 x double> %228, %237
  %241 = fadd <2 x double> %239, %240
  %242 = fmul <2 x double> %229, %235
  %243 = fadd <2 x double> %241, %242
  %244 = fmul <2 x double> %227, %243
  %245 = fadd <2 x double> %244, <double 0x3FD5555555555568, double 0x3FD5555555555568>
  %246 = fmul <2 x double> %226, %245
  %247 = fmul <2 x double> %227, %246
  %248 = fadd <2 x double> %226, %247
  %249 = fmul <2 x double> %248, %248
  %250 = fadd <2 x double> %249, <double -1.000000e+00, double -1.000000e+00>
  %251 = fmul <2 x double> %248, <double -2.000000e+00, double -2.000000e+00>
  %252 = and <4 x i32> %224, <i32 1, i32 1, i32 0, i32 0>
  %253 = icmp eq <4 x i32> %252, <i32 1, i32 1, i32 0, i32 0>
  %254 = sext <4 x i1> %253 to <4 x i32>
  %255 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %256 = bitcast <2 x double> %250 to <2 x i64>
  %257 = xor <2 x i64> %256, <i64 -9223372036854775808, i64 -9223372036854775808>
  %258 = bitcast <2 x i64> %257 to <2 x double>
  %259 = bitcast <4 x i32> %255 to <2 x double>
  %260 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %251, <2 x double> %258, <2 x double> %259) #6
  %261 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %250, <2 x double> %251, <2 x double> %259) #6
  %262 = fdiv <2 x double> %260, %261
  %263 = fcmp oeq <2 x double> %0, zeroinitializer
  %264 = sext <2 x i1> %263 to <2 x i64>
  %265 = bitcast <2 x i64> %264 to <2 x double>
  %266 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %262, <2 x double> %0, <2 x double> %265) #6
  ret <2 x double> %266
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tand2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.500000e+01, double 1.500000e+01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %7) #6
  %9 = icmp eq i32 %8, 65535
  br i1 %9, label %10, label %21, !prof !2

; <label>:10:                                     ; preds = %1
  %11 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %12 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %11, i32 8) #6
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %12) #6
  %14 = fmul <2 x double> %12, <double 0xBFF921FB54442D18, double 0xBFF921FB54442D18>
  %15 = fadd <2 x double> %14, %0
  %16 = fmul <2 x double> %12, <double 0xBC91A62633145C07, double 0xBC91A62633145C07>
  %17 = fadd <2 x double> %16, %15
  %18 = fsub <2 x double> %15, %17
  %19 = fadd <2 x double> %16, %18
  %20 = bitcast <2 x double> %19 to <2 x i64>
  br label %286

; <label>:21:                                     ; preds = %1
  %22 = fcmp olt <2 x double> %4, <double 1.000000e+14, double 1.000000e+14>
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %24) #6
  %26 = icmp eq i32 %25, 65535
  br i1 %26, label %27, label %108, !prof !2

; <label>:27:                                     ; preds = %21
  %28 = fmul <2 x double> %0, <double 0x3E645F306DC9C883, double 0x3E645F306DC9C883>
  %29 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %28, i32 11) #6
  %30 = fmul <2 x double> %29, <double 0x4170000000000000, double 0x4170000000000000>
  %31 = and <2 x i64> %2, <i64 -134217728, i64 -134217728>
  %32 = bitcast <2 x i64> %31 to <2 x double>
  %33 = fsub <2 x double> %0, %32
  %34 = fmul <2 x double> %0, <double 0x3FE45F306DC9C883, double 0x3FE45F306DC9C883>
  %35 = fmul <2 x double> %32, <double 0x3FE45F3068000000, double 0x3FE45F3068000000>
  %36 = bitcast <2 x double> %34 to <2 x i64>
  %37 = xor <2 x i64> %36, <i64 -9223372036854775808, i64 -9223372036854775808>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fmul <2 x double> %32, <double 0x3E4727220C000000, double 0x3E4727220C000000>
  %40 = fmul <2 x double> %33, <double 0x3FE45F3068000000, double 0x3FE45F3068000000>
  %41 = fmul <2 x double> %33, <double 0x3E4727220C000000, double 0x3E4727220C000000>
  %42 = fmul <2 x double> %0, <double 0xBC86B01EC5417056, double 0xBC86B01EC5417056>
  %43 = fadd <2 x double> %35, %38
  %44 = fadd <2 x double> %39, %43
  %45 = fadd <2 x double> %40, %44
  %46 = fadd <2 x double> %41, %45
  %47 = fadd <2 x double> %42, %46
  %48 = fcmp olt <2 x double> %0, zeroinitializer
  %49 = sext <2 x i1> %48 to <2 x i64>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double -5.000000e-01, double -5.000000e-01>, <2 x double> %50) #6
  %52 = fsub <2 x double> %51, %30
  %53 = fadd <2 x double> %34, %52
  %54 = fsub <2 x double> %53, %34
  %55 = fsub <2 x double> %53, %54
  %56 = fsub <2 x double> %34, %55
  %57 = fsub <2 x double> %52, %54
  %58 = fadd <2 x double> %57, %56
  %59 = fadd <2 x double> %47, %58
  %60 = fadd <2 x double> %53, %59
  %61 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %60, i32 11) #6
  %62 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %61) #6
  %63 = fmul <2 x double> %30, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %64 = fadd <2 x double> %63, %0
  %65 = fmul <2 x double> %61, <double 0xBFF921FB50000000, double 0xBFF921FB50000000>
  %66 = fadd <2 x double> %64, %65
  %67 = fsub <2 x double> %64, %66
  %68 = fadd <2 x double> %65, %67
  %69 = fmul <2 x double> %30, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %70 = fadd <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %66
  %72 = fsub <2 x double> %70, %71
  %73 = fsub <2 x double> %66, %72
  %74 = fsub <2 x double> %69, %71
  %75 = fadd <2 x double> %74, %73
  %76 = fadd <2 x double> %68, %75
  %77 = fmul <2 x double> %61, <double 0xBE5110B460000000, double 0xBE5110B460000000>
  %78 = fadd <2 x double> %77, %70
  %79 = fsub <2 x double> %78, %70
  %80 = fsub <2 x double> %78, %79
  %81 = fsub <2 x double> %70, %80
  %82 = fsub <2 x double> %77, %79
  %83 = fadd <2 x double> %82, %81
  %84 = fadd <2 x double> %83, %76
  %85 = fmul <2 x double> %30, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %86 = fadd <2 x double> %85, %78
  %87 = fsub <2 x double> %86, %78
  %88 = fsub <2 x double> %86, %87
  %89 = fsub <2 x double> %78, %88
  %90 = fsub <2 x double> %85, %87
  %91 = fadd <2 x double> %90, %89
  %92 = fadd <2 x double> %91, %84
  %93 = fmul <2 x double> %61, <double 0xBC91A62630000000, double 0xBC91A62630000000>
  %94 = fadd <2 x double> %93, %86
  %95 = fsub <2 x double> %94, %86
  %96 = fsub <2 x double> %94, %95
  %97 = fsub <2 x double> %86, %96
  %98 = fsub <2 x double> %93, %95
  %99 = fadd <2 x double> %98, %97
  %100 = fadd <2 x double> %99, %92
  %101 = fadd <2 x double> %30, %61
  %102 = fmul <2 x double> %101, <double 0xBAE8A2E03707344A, double 0xBAE8A2E03707344A>
  %103 = fadd <2 x double> %102, %94
  %104 = fsub <2 x double> %94, %103
  %105 = fadd <2 x double> %102, %104
  %106 = fadd <2 x double> %105, %100
  %107 = bitcast <2 x double> %106 to <2 x i64>
  br label %286

; <label>:108:                                    ; preds = %21
  %109 = bitcast <2 x double> %0 to <4 x i32>
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %111 = lshr <4 x i32> %110, <i32 20, i32 20, i32 20, i32 20>
  %112 = and <4 x i32> %111, <i32 2047, i32 2047, i32 0, i32 0>
  %113 = add nsw <4 x i32> %112, <i32 -1078, i32 -1078, i32 0, i32 0>
  %114 = icmp sgt <4 x i32> %113, <i32 645, i32 645, i32 0, i32 0>
  %115 = select <4 x i1> %114, <4 x i32> <i32 -64, i32 -64, i32 undef, i32 0>, <4 x i32> <i32 0, i32 0, i32 undef, i32 0>
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %117 = and <4 x i32> %116, <i32 0, i32 -1, i32 0, i32 -1>
  %118 = shl <4 x i32> %117, <i32 20, i32 20, i32 20, i32 20>
  %119 = add <4 x i32> %118, %109
  %120 = bitcast <4 x i32> %119 to <2 x double>
  %121 = ashr <4 x i32> %113, <i32 31, i32 31, i32 31, i32 31>
  %122 = xor <4 x i32> %121, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %123 = and <4 x i32> %122, %113
  %124 = shl <4 x i32> %123, <i32 2, i32 2, i32 2, i32 2>
  %125 = extractelement <4 x i32> %124, i32 1
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %126
  %128 = load double, double* %127, align 8, !tbaa !3, !noalias !28
  %129 = extractelement <4 x i32> %124, i32 0
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [0 x double], [0 x double]* @rempitabdp, i64 0, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !3, !noalias !28
  %133 = insertelement <2 x double> undef, double %132, i32 0
  %134 = insertelement <2 x double> %133, double %128, i32 1
  %135 = bitcast <4 x i32> %119 to <2 x i64>
  %136 = and <2 x i64> %135, <i64 -134217728, i64 -134217728>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = fsub <2 x double> %120, %137
  %139 = bitcast <2 x double> %134 to <2 x i64>
  %140 = and <2 x i64> %139, <i64 -134217728, i64 -134217728>
  %141 = bitcast <2 x i64> %140 to <2 x double>
  %142 = fsub <2 x double> %134, %141
  %143 = fmul <2 x double> %134, %120
  %144 = fmul <2 x double> %137, %141
  %145 = bitcast <2 x double> %143 to <2 x i64>
  %146 = xor <2 x i64> %145, <i64 -9223372036854775808, i64 -9223372036854775808>
  %147 = bitcast <2 x i64> %146 to <2 x double>
  %148 = fmul <2 x double> %138, %141
  %149 = fmul <2 x double> %142, %137
  %150 = fmul <2 x double> %138, %142
  %151 = fadd <2 x double> %144, %147
  %152 = fadd <2 x double> %148, %151
  %153 = fadd <2 x double> %149, %152
  %154 = fadd <2 x double> %150, %153
  %155 = fmul <2 x double> %143, <double 4.000000e+00, double 4.000000e+00>
  %156 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %155, i32 8) #6
  %157 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %143, i32 8) #6
  %158 = fmul <2 x double> %157, <double 4.000000e+00, double 4.000000e+00>
  %159 = fsub <2 x double> %156, %158
  %160 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %159) #6
  %161 = fmul <2 x double> %156, <double 2.500000e-01, double 2.500000e-01>
  %162 = fsub <2 x double> %143, %161
  %163 = fadd <2 x double> %162, %154
  %164 = fsub <2 x double> %162, %163
  %165 = fadd <2 x double> %154, %164
  %166 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %126
  %167 = load double, double* %166, align 8, !tbaa !3, !noalias !28
  %168 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 1), i64 %130
  %169 = load double, double* %168, align 8, !tbaa !3, !noalias !28
  %170 = insertelement <2 x double> undef, double %169, i32 0
  %171 = insertelement <2 x double> %170, double %167, i32 1
  %172 = bitcast <2 x double> %171 to <2 x i64>
  %173 = and <2 x i64> %172, <i64 -134217728, i64 -134217728>
  %174 = bitcast <2 x i64> %173 to <2 x double>
  %175 = fsub <2 x double> %171, %174
  %176 = fmul <2 x double> %171, %120
  %177 = fmul <2 x double> %137, %174
  %178 = bitcast <2 x double> %176 to <2 x i64>
  %179 = xor <2 x i64> %178, <i64 -9223372036854775808, i64 -9223372036854775808>
  %180 = bitcast <2 x i64> %179 to <2 x double>
  %181 = fmul <2 x double> %138, %174
  %182 = fmul <2 x double> %175, %137
  %183 = fmul <2 x double> %138, %175
  %184 = fadd <2 x double> %177, %180
  %185 = fadd <2 x double> %181, %184
  %186 = fadd <2 x double> %182, %185
  %187 = fadd <2 x double> %183, %186
  %188 = fadd <2 x double> %176, %163
  %189 = fsub <2 x double> %188, %163
  %190 = fsub <2 x double> %188, %189
  %191 = fsub <2 x double> %163, %190
  %192 = fsub <2 x double> %176, %189
  %193 = fadd <2 x double> %192, %191
  %194 = fadd <2 x double> %165, %187
  %195 = fadd <2 x double> %194, %193
  %196 = fmul <2 x double> %188, <double 4.000000e+00, double 4.000000e+00>
  %197 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %196, i32 8) #6
  %198 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %188, i32 8) #6
  %199 = fmul <2 x double> %198, <double 4.000000e+00, double 4.000000e+00>
  %200 = fsub <2 x double> %197, %199
  %201 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %200) #6
  %202 = fmul <2 x double> %197, <double 2.500000e-01, double 2.500000e-01>
  %203 = fsub <2 x double> %188, %202
  %204 = add <4 x i32> %201, %160
  %205 = fadd <2 x double> %203, %195
  %206 = fsub <2 x double> %203, %205
  %207 = fadd <2 x double> %195, %206
  %208 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %126
  %209 = load double, double* %208, align 8, !tbaa !3, !noalias !28
  %210 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 2), i64 %130
  %211 = load double, double* %210, align 8, !tbaa !3, !noalias !28
  %212 = insertelement <2 x double> undef, double %211, i32 0
  %213 = insertelement <2 x double> %212, double %209, i32 1
  %214 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %126
  %215 = load double, double* %214, align 8, !tbaa !3, !noalias !28
  %216 = getelementptr inbounds double, double* getelementptr inbounds ([0 x double], [0 x double]* @rempitabdp, i64 0, i64 3), i64 %130
  %217 = load double, double* %216, align 8, !tbaa !3, !noalias !28
  %218 = insertelement <2 x double> undef, double %217, i32 0
  %219 = insertelement <2 x double> %218, double %215, i32 1
  %220 = bitcast <2 x double> %213 to <2 x i64>
  %221 = and <2 x i64> %220, <i64 -134217728, i64 -134217728>
  %222 = bitcast <2 x i64> %221 to <2 x double>
  %223 = fsub <2 x double> %213, %222
  %224 = fmul <2 x double> %213, %120
  %225 = fmul <2 x double> %137, %222
  %226 = bitcast <2 x double> %224 to <2 x i64>
  %227 = xor <2 x i64> %226, <i64 -9223372036854775808, i64 -9223372036854775808>
  %228 = bitcast <2 x i64> %227 to <2 x double>
  %229 = fmul <2 x double> %223, %137
  %230 = fmul <2 x double> %138, %222
  %231 = fmul <2 x double> %138, %223
  %232 = fmul <2 x double> %219, %120
  %233 = fadd <2 x double> %225, %228
  %234 = fadd <2 x double> %229, %233
  %235 = fadd <2 x double> %230, %234
  %236 = fadd <2 x double> %231, %235
  %237 = fadd <2 x double> %232, %236
  %238 = fadd <2 x double> %224, %205
  %239 = fsub <2 x double> %238, %205
  %240 = fsub <2 x double> %238, %239
  %241 = fsub <2 x double> %205, %240
  %242 = fsub <2 x double> %224, %239
  %243 = fadd <2 x double> %242, %241
  %244 = fadd <2 x double> %207, %237
  %245 = fadd <2 x double> %244, %243
  %246 = fadd <2 x double> %238, %245
  %247 = fsub <2 x double> %238, %246
  %248 = fadd <2 x double> %245, %247
  %249 = bitcast <2 x double> %246 to <2 x i64>
  %250 = and <2 x i64> %249, <i64 -134217728, i64 -134217728>
  %251 = bitcast <2 x i64> %250 to <2 x double>
  %252 = fsub <2 x double> %246, %251
  %253 = fmul <2 x double> %246, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %254 = fmul <2 x double> %251, <double 0x401921FB50000000, double 0x401921FB50000000>
  %255 = bitcast <2 x double> %253 to <2 x i64>
  %256 = xor <2 x i64> %255, <i64 -9223372036854775808, i64 -9223372036854775808>
  %257 = bitcast <2 x i64> %256 to <2 x double>
  %258 = fmul <2 x double> %252, <double 0x401921FB50000000, double 0x401921FB50000000>
  %259 = fmul <2 x double> %251, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %260 = fmul <2 x double> %252, <double 0x3E7110B460000000, double 0x3E7110B460000000>
  %261 = fmul <2 x double> %246, <double 0x3CB1A62633145C07, double 0x3CB1A62633145C07>
  %262 = fmul <2 x double> %248, <double 0x401921FB54442D18, double 0x401921FB54442D18>
  %263 = fadd <2 x double> %254, %257
  %264 = fadd <2 x double> %258, %263
  %265 = fadd <2 x double> %259, %264
  %266 = fadd <2 x double> %260, %265
  %267 = fadd <2 x double> %261, %266
  %268 = fadd <2 x double> %262, %267
  %269 = and <2 x i64> %135, <i64 9223372036854775807, i64 9223372036854775807>
  %270 = bitcast <2 x i64> %269 to <2 x double>
  %271 = fcmp olt <2 x double> %270, <double 0x3FE6666666666666, double 0x3FE6666666666666>
  %272 = sext <2 x i1> %271 to <2 x i64>
  %273 = bitcast <2 x i64> %272 to <2 x double>
  %274 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %253, <2 x double> %120, <2 x double> %273) #6
  %275 = bitcast <2 x double> %268 to <2 x i64>
  %276 = xor <2 x i64> %272, <i64 -1, i64 -1>
  %277 = and <2 x i64> %275, %276
  %278 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %279 = fcmp uno <2 x double> %0, zeroinitializer
  %280 = or <2 x i1> %278, %279
  %281 = sext <2 x i1> %280 to <2 x i64>
  %282 = bitcast <2 x double> %274 to <2 x i64>
  %283 = or <2 x i64> %282, %281
  %284 = bitcast <2 x i64> %283 to <2 x double>
  %285 = or <2 x i64> %277, %281
  br label %286

; <label>:286:                                    ; preds = %27, %108, %10
  %287 = phi <2 x double> [ %284, %108 ], [ %103, %27 ], [ %17, %10 ]
  %288 = phi <2 x i64> [ %285, %108 ], [ %107, %27 ], [ %20, %10 ]
  %289 = phi <4 x i32> [ %204, %108 ], [ %62, %27 ], [ %13, %10 ]
  %290 = bitcast <2 x i64> %288 to <2 x double>
  %291 = fmul <2 x double> %287, <double 5.000000e-01, double 5.000000e-01>
  %292 = fmul <2 x double> %290, <double 5.000000e-01, double 5.000000e-01>
  %293 = bitcast <2 x double> %291 to <2 x i64>
  %294 = and <2 x i64> %293, <i64 -134217728, i64 -134217728>
  %295 = bitcast <2 x i64> %294 to <2 x double>
  %296 = fsub <2 x double> %291, %295
  %297 = fmul <2 x double> %291, %291
  %298 = fmul <2 x double> %295, %295
  %299 = bitcast <2 x double> %297 to <2 x i64>
  %300 = xor <2 x i64> %299, <i64 -9223372036854775808, i64 -9223372036854775808>
  %301 = bitcast <2 x i64> %300 to <2 x double>
  %302 = fadd <2 x double> %295, %295
  %303 = fmul <2 x double> %302, %296
  %304 = fmul <2 x double> %296, %296
  %305 = fadd <2 x double> %292, %292
  %306 = fmul <2 x double> %291, %305
  %307 = fadd <2 x double> %298, %301
  %308 = fadd <2 x double> %307, %303
  %309 = fadd <2 x double> %304, %308
  %310 = fadd <2 x double> %306, %309
  %311 = fmul <2 x double> %297, %297
  %312 = fmul <2 x double> %311, %311
  %313 = fmul <2 x double> %297, <double 0x3F35445F555134ED, double 0x3F35445F555134ED>
  %314 = fadd <2 x double> %313, <double 0x3F4269BE400DE3AF, double 0x3F4269BE400DE3AF>
  %315 = fmul <2 x double> %297, <double 0x3F57EEF631E20B93, double 0x3F57EEF631E20B93>
  %316 = fadd <2 x double> %315, <double 0x3F6D6C27C371C959, double 0x3F6D6C27C371C959>
  %317 = fmul <2 x double> %311, %314
  %318 = fadd <2 x double> %316, %317
  %319 = fmul <2 x double> %297, <double 0x3F8226E7BFA35090, double 0x3F8226E7BFA35090>
  %320 = fadd <2 x double> %319, <double 0x3F9664F4729F98E5, double 0x3F9664F4729F98E5>
  %321 = fmul <2 x double> %297, <double 0x3FABA1BA1BDCEC06, double 0x3FABA1BA1BDCEC06>
  %322 = fadd <2 x double> %321, <double 0x3FC111111110E933, double 0x3FC111111110E933>
  %323 = fmul <2 x double> %311, %320
  %324 = fadd <2 x double> %322, %323
  %325 = fmul <2 x double> %312, %318
  %326 = fadd <2 x double> %324, %325
  %327 = fmul <2 x double> %297, %326
  %328 = fadd <2 x double> %327, <double 0x3FD5555555555568, double 0x3FD5555555555568>
  %329 = and <2 x i64> %299, <i64 -134217728, i64 -134217728>
  %330 = bitcast <2 x i64> %329 to <2 x double>
  %331 = fsub <2 x double> %297, %330
  %332 = fmul <2 x double> %291, %297
  %333 = fmul <2 x double> %295, %330
  %334 = bitcast <2 x double> %332 to <2 x i64>
  %335 = xor <2 x i64> %334, <i64 -9223372036854775808, i64 -9223372036854775808>
  %336 = bitcast <2 x i64> %335 to <2 x double>
  %337 = fmul <2 x double> %331, %295
  %338 = fmul <2 x double> %296, %330
  %339 = fmul <2 x double> %296, %331
  %340 = fmul <2 x double> %297, %292
  %341 = fmul <2 x double> %291, %310
  %342 = fadd <2 x double> %333, %336
  %343 = fadd <2 x double> %337, %342
  %344 = fadd <2 x double> %338, %343
  %345 = fadd <2 x double> %339, %344
  %346 = fadd <2 x double> %340, %345
  %347 = fadd <2 x double> %341, %346
  %348 = and <2 x i64> %334, <i64 -134217728, i64 -134217728>
  %349 = bitcast <2 x i64> %348 to <2 x double>
  %350 = fsub <2 x double> %332, %349
  %351 = bitcast <2 x double> %328 to <2 x i64>
  %352 = and <2 x i64> %351, <i64 -134217728, i64 -134217728>
  %353 = bitcast <2 x i64> %352 to <2 x double>
  %354 = fsub <2 x double> %328, %353
  %355 = fmul <2 x double> %332, %328
  %356 = fmul <2 x double> %349, %353
  %357 = bitcast <2 x double> %355 to <2 x i64>
  %358 = xor <2 x i64> %357, <i64 -9223372036854775808, i64 -9223372036854775808>
  %359 = bitcast <2 x i64> %358 to <2 x double>
  %360 = fmul <2 x double> %350, %353
  %361 = fmul <2 x double> %354, %349
  %362 = fmul <2 x double> %350, %354
  %363 = fmul <2 x double> %328, %347
  %364 = fadd <2 x double> %356, %359
  %365 = fadd <2 x double> %360, %364
  %366 = fadd <2 x double> %361, %365
  %367 = fadd <2 x double> %362, %366
  %368 = fadd <2 x double> %363, %367
  %369 = fadd <2 x double> %291, %355
  %370 = fsub <2 x double> %291, %369
  %371 = fadd <2 x double> %355, %370
  %372 = fadd <2 x double> %292, %371
  %373 = fadd <2 x double> %372, %368
  %374 = bitcast <2 x double> %369 to <2 x i64>
  %375 = and <2 x i64> %374, <i64 -134217728, i64 -134217728>
  %376 = bitcast <2 x i64> %375 to <2 x double>
  %377 = fsub <2 x double> %369, %376
  %378 = fmul <2 x double> %369, %369
  %379 = fmul <2 x double> %376, %376
  %380 = bitcast <2 x double> %378 to <2 x i64>
  %381 = xor <2 x i64> %380, <i64 -9223372036854775808, i64 -9223372036854775808>
  %382 = bitcast <2 x i64> %381 to <2 x double>
  %383 = fadd <2 x double> %376, %376
  %384 = fmul <2 x double> %383, %377
  %385 = fmul <2 x double> %377, %377
  %386 = fadd <2 x double> %373, %373
  %387 = fmul <2 x double> %369, %386
  %388 = fadd <2 x double> %379, %382
  %389 = fadd <2 x double> %388, %384
  %390 = fadd <2 x double> %385, %389
  %391 = fadd <2 x double> %390, %387
  %392 = fadd <2 x double> %378, <double -1.000000e+00, double -1.000000e+00>
  %393 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %392
  %394 = fadd <2 x double> %378, %393
  %395 = fadd <2 x double> %394, %391
  %396 = fmul <2 x double> %369, <double -2.000000e+00, double -2.000000e+00>
  %397 = fmul <2 x double> %373, <double -2.000000e+00, double -2.000000e+00>
  %398 = and <4 x i32> %289, <i32 1, i32 1, i32 0, i32 0>
  %399 = icmp eq <4 x i32> %398, <i32 1, i32 1, i32 0, i32 0>
  %400 = sext <4 x i1> %399 to <4 x i32>
  %401 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %402 = bitcast <2 x double> %392 to <2 x i64>
  %403 = xor <2 x i64> %402, <i64 -9223372036854775808, i64 -9223372036854775808>
  %404 = bitcast <2 x double> %395 to <2 x i64>
  %405 = xor <2 x i64> %404, <i64 -9223372036854775808, i64 -9223372036854775808>
  %406 = bitcast <2 x i64> %403 to <2 x double>
  %407 = bitcast <2 x i64> %405 to <2 x double>
  %408 = bitcast <4 x i32> %401 to <2 x double>
  %409 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %396, <2 x double> %406, <2 x double> %408) #6
  %410 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %397, <2 x double> %407, <2 x double> %408) #6
  %411 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %392, <2 x double> %396, <2 x double> %408) #6
  %412 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %395, <2 x double> %397, <2 x double> %408) #6
  %413 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %411
  %414 = bitcast <2 x double> %411 to <2 x i64>
  %415 = and <2 x i64> %414, <i64 -134217728, i64 -134217728>
  %416 = bitcast <2 x i64> %415 to <2 x double>
  %417 = fsub <2 x double> %411, %416
  %418 = bitcast <2 x double> %413 to <2 x i64>
  %419 = and <2 x i64> %418, <i64 -134217728, i64 -134217728>
  %420 = bitcast <2 x i64> %419 to <2 x double>
  %421 = fsub <2 x double> %413, %420
  %422 = bitcast <2 x double> %409 to <2 x i64>
  %423 = and <2 x i64> %422, <i64 -134217728, i64 -134217728>
  %424 = bitcast <2 x i64> %423 to <2 x double>
  %425 = fsub <2 x double> %409, %424
  %426 = fmul <2 x double> %409, %413
  %427 = fmul <2 x double> %424, %420
  %428 = fsub <2 x double> %427, %426
  %429 = fmul <2 x double> %421, %424
  %430 = fmul <2 x double> %425, %420
  %431 = fmul <2 x double> %425, %421
  %432 = fmul <2 x double> %416, %420
  %433 = fmul <2 x double> %421, %416
  %434 = fmul <2 x double> %417, %420
  %435 = fmul <2 x double> %417, %421
  %436 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %432
  %437 = fsub <2 x double> %436, %433
  %438 = fsub <2 x double> %437, %434
  %439 = fsub <2 x double> %438, %435
  %440 = fmul <2 x double> %426, %439
  %441 = fadd <2 x double> %428, %429
  %442 = fadd <2 x double> %430, %441
  %443 = fadd <2 x double> %431, %442
  %444 = fadd <2 x double> %443, %440
  %445 = fmul <2 x double> %412, %426
  %446 = fsub <2 x double> %410, %445
  %447 = fmul <2 x double> %413, %446
  %448 = fadd <2 x double> %447, %444
  %449 = fadd <2 x double> %426, %448
  %450 = fcmp oeq <2 x double> %0, zeroinitializer
  %451 = sext <2 x i1> %450 to <2 x i64>
  %452 = bitcast <2 x i64> %451 to <2 x double>
  %453 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %449, <2 x double> %0, <2 x double> %452) #6
  ret <2 x double> %453
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u35sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = ashr <2 x i64> %6, <i64 63, i64 63>
  %8 = bitcast <2 x i64> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -4294967298, i64 0>
  %12 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = add <4 x i32> %14, <i32 1, i32 1, i32 0, i32 0>
  %16 = fcmp olt <2 x double> %13, %5
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = bitcast <2 x i64> %11 to <16 x i8>
  %21 = bitcast <4 x i32> %15 to <16 x i8>
  %22 = bitcast <4 x i32> %19 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %20, <16 x i8> %21, <16 x i8> %22) #6
  %24 = or <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = bitcast <2 x i64> %17 to <2 x double>
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %25, <2 x double> %26) #6
  %28 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %13, <2 x double> %5) #6
  %29 = fdiv <2 x double> %27, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, %30
  %32 = fmul <2 x double> %31, %31
  %33 = fmul <2 x double> %32, %32
  %34 = fmul <2 x double> %33, %33
  %35 = fmul <2 x double> %30, <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>
  %36 = fadd <2 x double> %35, <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>
  %37 = fmul <2 x double> %31, <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>
  %38 = fadd <2 x double> %37, %36
  %39 = fmul <2 x double> %30, <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>
  %40 = fadd <2 x double> %39, <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>
  %41 = fmul <2 x double> %30, <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>
  %42 = fadd <2 x double> %41, <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>
  %43 = fmul <2 x double> %31, %40
  %44 = fadd <2 x double> %42, %43
  %45 = fmul <2 x double> %30, <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>
  %46 = fadd <2 x double> %45, <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>
  %47 = fmul <2 x double> %30, <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>
  %48 = fadd <2 x double> %47, <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>
  %49 = fmul <2 x double> %31, %46
  %50 = fadd <2 x double> %48, %49
  %51 = fmul <2 x double> %32, %44
  %52 = fadd <2 x double> %50, %51
  %53 = fmul <2 x double> %30, <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>
  %54 = fadd <2 x double> %53, <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>
  %55 = fmul <2 x double> %30, <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>
  %56 = fadd <2 x double> %55, <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>
  %57 = fmul <2 x double> %31, %54
  %58 = fadd <2 x double> %56, %57
  %59 = fmul <2 x double> %30, <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>
  %60 = fadd <2 x double> %59, <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>
  %61 = fmul <2 x double> %30, <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>
  %62 = fadd <2 x double> %61, <double 0xBFD55555555553C5, double 0xBFD55555555553C5>
  %63 = fmul <2 x double> %31, %60
  %64 = fadd <2 x double> %62, %63
  %65 = fmul <2 x double> %32, %58
  %66 = fadd <2 x double> %64, %65
  %67 = fmul <2 x double> %33, %52
  %68 = fadd <2 x double> %66, %67
  %69 = fmul <2 x double> %38, %34
  %70 = fadd <2 x double> %69, %68
  %71 = fmul <2 x double> %30, %70
  %72 = fmul <2 x double> %29, %71
  %73 = fadd <2 x double> %29, %72
  %74 = bitcast <16 x i8> %23 to <4 x i32>
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %76 = sitofp <2 x i32> %75 to <2 x double>
  %77 = fmul <2 x double> %76, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %78 = fadd <2 x double> %77, %73
  %79 = bitcast <2 x double> %78 to <2 x i64>
  %80 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = xor <2 x i64> %80, %79
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %84 = fcmp oeq <2 x double> %1, zeroinitializer
  %85 = or <2 x i1> %83, %84
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = or <2 x i64> %80, <i64 4609753056924675352, i64 4609753056924675352>
  %88 = bitcast <2 x i64> %87 to <2 x double>
  %89 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %88
  %90 = select <2 x i1> %83, <2 x double> %89, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %91 = bitcast <2 x i64> %86 to <2 x double>
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %82, <2 x double> %90, <2 x double> %91) #6
  %93 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %94 = sext <2 x i1> %93 to <2 x i64>
  %95 = or <2 x i64> %80, <i64 4605249457297304856, i64 4605249457297304856>
  %96 = bitcast <2 x i64> %95 to <2 x double>
  %97 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %96
  %98 = select <2 x i1> %83, <2 x double> %97, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %99 = bitcast <2 x i64> %94 to <2 x double>
  %100 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %92, <2 x double> %98, <2 x double> %99) #6
  %101 = fcmp oeq <2 x double> %0, zeroinitializer
  %102 = sext <2 x i1> %101 to <2 x i64>
  %103 = and <2 x i64> %7, <i64 4614256656552045848, i64 4614256656552045848>
  %104 = bitcast <2 x i64> %103 to <2 x double>
  %105 = bitcast <2 x i64> %102 to <2 x double>
  %106 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %100, <2 x double> %104, <2 x double> %105) #6
  %107 = fcmp uno <2 x double> %0, %1
  %108 = bitcast <2 x double> %106 to <2 x i64>
  %109 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %110 = xor <2 x i64> %109, %108
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = select <2 x i1> %107, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %111
  ret <2 x double> %112
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atan2d2_u10sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 0x4000000000001, double 0x4000000000001>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %1, <double 0x4340000000000000, double 0x4340000000000000>
  %9 = bitcast <2 x i64> %7 to <2 x double>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %8, <2 x double> %9) #6
  %11 = fmul <2 x double> %0, <double 0x4340000000000000, double 0x4340000000000000>
  %12 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %11, <2 x double> %9) #6
  %13 = bitcast <2 x double> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = bitcast <2 x double> %10 to <2 x i64>
  %17 = ashr <2 x i64> %16, <i64 63, i64 63>
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -4294967298, i64 0>
  %22 = fcmp olt <2 x double> %10, zeroinitializer
  %23 = select <2 x i1> %22, <2 x i64> <i64 -9223372036854775808, i64 -9223372036854775808>, <2 x i64> zeroinitializer
  %24 = xor <2 x i64> %23, %16
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = bitcast <2 x i64> %23 to <2 x double>
  %27 = bitcast <2 x i64> %21 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 0, i32 0>
  %29 = fcmp olt <2 x double> %25, %15
  %30 = sext <2 x i1> %29 to <2 x i64>
  %31 = bitcast <2 x i64> %30 to <4 x i32>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %33 = bitcast <2 x i64> %21 to <16 x i8>
  %34 = bitcast <4 x i32> %28 to <16 x i8>
  %35 = bitcast <4 x i32> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %33, <16 x i8> %34, <16 x i8> %35) #6
  %37 = xor <2 x i64> %24, <i64 -9223372036854775808, i64 -9223372036854775808>
  %38 = xor <2 x i64> %23, <i64 -9223372036854775808, i64 -9223372036854775808>
  %39 = bitcast <2 x i64> %37 to <2 x double>
  %40 = bitcast <2 x i64> %38 to <2 x double>
  %41 = bitcast <2 x i64> %30 to <2 x double>
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %39, <2 x double> %41) #6
  %43 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %40, <2 x double> %41) #6
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %15, <2 x double> %41) #6
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %26, <2 x double> zeroinitializer, <2 x double> %41) #6
  %46 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %44
  %47 = bitcast <2 x double> %44 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -134217728, i64 -134217728>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fsub <2 x double> %44, %49
  %51 = bitcast <2 x double> %46 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -134217728, i64 -134217728>
  %53 = bitcast <2 x i64> %52 to <2 x double>
  %54 = fsub <2 x double> %46, %53
  %55 = bitcast <2 x double> %42 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -134217728, i64 -134217728>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fsub <2 x double> %42, %57
  %59 = fmul <2 x double> %42, %46
  %60 = fmul <2 x double> %57, %53
  %61 = fsub <2 x double> %60, %59
  %62 = fmul <2 x double> %54, %57
  %63 = fmul <2 x double> %58, %53
  %64 = fmul <2 x double> %58, %54
  %65 = fmul <2 x double> %49, %53
  %66 = fmul <2 x double> %54, %49
  %67 = fmul <2 x double> %50, %53
  %68 = fmul <2 x double> %50, %54
  %69 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %65
  %70 = fsub <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %67
  %72 = fsub <2 x double> %71, %68
  %73 = fmul <2 x double> %59, %72
  %74 = fadd <2 x double> %61, %62
  %75 = fadd <2 x double> %63, %74
  %76 = fadd <2 x double> %64, %75
  %77 = fadd <2 x double> %76, %73
  %78 = fmul <2 x double> %45, %59
  %79 = fsub <2 x double> %43, %78
  %80 = fmul <2 x double> %46, %79
  %81 = fadd <2 x double> %80, %77
  %82 = bitcast <2 x double> %59 to <2 x i64>
  %83 = and <2 x i64> %82, <i64 -134217728, i64 -134217728>
  %84 = bitcast <2 x i64> %83 to <2 x double>
  %85 = fsub <2 x double> %59, %84
  %86 = fmul <2 x double> %59, %59
  %87 = fmul <2 x double> %84, %84
  %88 = bitcast <2 x double> %86 to <2 x i64>
  %89 = xor <2 x i64> %88, <i64 -9223372036854775808, i64 -9223372036854775808>
  %90 = bitcast <2 x i64> %89 to <2 x double>
  %91 = fadd <2 x double> %84, %84
  %92 = fmul <2 x double> %91, %85
  %93 = fmul <2 x double> %85, %85
  %94 = fadd <2 x double> %81, %81
  %95 = fmul <2 x double> %59, %94
  %96 = fadd <2 x double> %87, %90
  %97 = fadd <2 x double> %96, %92
  %98 = fadd <2 x double> %93, %97
  %99 = fadd <2 x double> %98, %95
  %100 = fadd <2 x double> %86, %99
  %101 = fsub <2 x double> %86, %100
  %102 = fadd <2 x double> %99, %101
  %103 = fmul <2 x double> %100, %100
  %104 = fmul <2 x double> %103, %103
  %105 = fmul <2 x double> %104, %104
  %106 = fmul <2 x double> %100, <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>
  %107 = fadd <2 x double> %106, <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>
  %108 = fmul <2 x double> %100, <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>
  %109 = fadd <2 x double> %108, <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>
  %110 = fmul <2 x double> %103, %107
  %111 = fadd <2 x double> %109, %110
  %112 = fmul <2 x double> %100, <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>
  %113 = fadd <2 x double> %112, <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>
  %114 = fmul <2 x double> %100, <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>
  %115 = fadd <2 x double> %114, <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>
  %116 = fmul <2 x double> %103, %113
  %117 = fadd <2 x double> %115, %116
  %118 = fmul <2 x double> %104, %111
  %119 = fadd <2 x double> %117, %118
  %120 = fmul <2 x double> %100, <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>
  %121 = fadd <2 x double> %120, <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>
  %122 = fmul <2 x double> %100, <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>
  %123 = fadd <2 x double> %122, <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>
  %124 = fmul <2 x double> %103, %121
  %125 = fadd <2 x double> %123, %124
  %126 = fmul <2 x double> %100, <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>
  %127 = fadd <2 x double> %126, <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>
  %128 = fmul <2 x double> %100, <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>
  %129 = fadd <2 x double> %128, <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>
  %130 = fmul <2 x double> %103, %127
  %131 = fadd <2 x double> %129, %130
  %132 = fmul <2 x double> %104, %125
  %133 = fadd <2 x double> %131, %132
  %134 = fmul <2 x double> %105, %119
  %135 = fadd <2 x double> %133, %134
  %136 = fmul <2 x double> %100, %135
  %137 = fadd <2 x double> %136, <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>
  %138 = fmul <2 x double> %100, %137
  %139 = fadd <2 x double> %138, <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>
  %140 = fmul <2 x double> %100, %139
  %141 = fadd <2 x double> %140, <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>
  %142 = fmul <2 x double> %100, %141
  %143 = fadd <2 x double> %142, <double 0xBFD555555555543A, double 0xBFD555555555543A>
  %144 = bitcast <2 x double> %100 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %100, %146
  %148 = fmul <2 x double> %59, %100
  %149 = fmul <2 x double> %84, %146
  %150 = bitcast <2 x double> %148 to <2 x i64>
  %151 = xor <2 x i64> %150, <i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fmul <2 x double> %85, %146
  %154 = fmul <2 x double> %147, %84
  %155 = fmul <2 x double> %85, %147
  %156 = fmul <2 x double> %59, %102
  %157 = fmul <2 x double> %81, %100
  %158 = fadd <2 x double> %149, %152
  %159 = fadd <2 x double> %153, %158
  %160 = fadd <2 x double> %154, %159
  %161 = fadd <2 x double> %155, %160
  %162 = fadd <2 x double> %156, %161
  %163 = fadd <2 x double> %157, %162
  %164 = and <2 x i64> %150, <i64 -134217728, i64 -134217728>
  %165 = bitcast <2 x i64> %164 to <2 x double>
  %166 = fsub <2 x double> %148, %165
  %167 = bitcast <2 x double> %143 to <2 x i64>
  %168 = and <2 x i64> %167, <i64 -134217728, i64 -134217728>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = fsub <2 x double> %143, %169
  %171 = fmul <2 x double> %148, %143
  %172 = fmul <2 x double> %165, %169
  %173 = bitcast <2 x double> %171 to <2 x i64>
  %174 = xor <2 x i64> %173, <i64 -9223372036854775808, i64 -9223372036854775808>
  %175 = bitcast <2 x i64> %174 to <2 x double>
  %176 = fmul <2 x double> %166, %169
  %177 = fmul <2 x double> %170, %165
  %178 = fmul <2 x double> %166, %170
  %179 = fmul <2 x double> %163, %143
  %180 = fadd <2 x double> %172, %175
  %181 = fadd <2 x double> %176, %180
  %182 = fadd <2 x double> %177, %181
  %183 = fadd <2 x double> %178, %182
  %184 = fadd <2 x double> %179, %183
  %185 = fadd <2 x double> %59, %171
  %186 = fsub <2 x double> %59, %185
  %187 = fadd <2 x double> %171, %186
  %188 = fadd <2 x double> %81, %187
  %189 = fadd <2 x double> %188, %184
  %190 = bitcast <16 x i8> %36 to <4 x i32>
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %192 = sitofp <2 x i32> %191 to <2 x double>
  %193 = bitcast <2 x double> %192 to <2 x i64>
  %194 = and <2 x i64> %193, <i64 -134217728, i64 -134217728>
  %195 = bitcast <2 x i64> %194 to <2 x double>
  %196 = fsub <2 x double> %192, %195
  %197 = fmul <2 x double> %192, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %198 = fmul <2 x double> %195, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %199 = bitcast <2 x double> %197 to <2 x i64>
  %200 = xor <2 x i64> %199, <i64 -9223372036854775808, i64 -9223372036854775808>
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fmul <2 x double> %195, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %203 = fmul <2 x double> %196, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %204 = fmul <2 x double> %196, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %205 = fmul <2 x double> %192, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %206 = fadd <2 x double> %198, %201
  %207 = fadd <2 x double> %202, %206
  %208 = fadd <2 x double> %203, %207
  %209 = fadd <2 x double> %204, %208
  %210 = fadd <2 x double> %205, %209
  %211 = fadd <2 x double> %197, %185
  %212 = fsub <2 x double> %197, %211
  %213 = fadd <2 x double> %185, %212
  %214 = fadd <2 x double> %210, %213
  %215 = fadd <2 x double> %214, %189
  %216 = fadd <2 x double> %211, %215
  %217 = bitcast <2 x double> %216 to <2 x i64>
  %218 = and <2 x i64> %16, <i64 -9223372036854775808, i64 -9223372036854775808>
  %219 = xor <2 x i64> %218, %217
  %220 = bitcast <2 x i64> %219 to <2 x double>
  %221 = and <2 x i64> %16, <i64 9223372036854775807, i64 9223372036854775807>
  %222 = bitcast <2 x i64> %221 to <2 x double>
  %223 = fcmp oeq <2 x double> %222, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %224 = fcmp oeq <2 x double> %10, zeroinitializer
  %225 = or <2 x i1> %223, %224
  %226 = sext <2 x i1> %225 to <2 x i64>
  %227 = or <2 x i64> %218, <i64 4609753056924675352, i64 4609753056924675352>
  %228 = bitcast <2 x i64> %227 to <2 x double>
  %229 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %228
  %230 = select <2 x i1> %223, <2 x double> %229, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %231 = bitcast <2 x i64> %226 to <2 x double>
  %232 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %220, <2 x double> %230, <2 x double> %231) #6
  %233 = fcmp oeq <2 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %234 = sext <2 x i1> %233 to <2 x i64>
  %235 = or <2 x i64> %218, <i64 4605249457297304856, i64 4605249457297304856>
  %236 = bitcast <2 x i64> %235 to <2 x double>
  %237 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %236
  %238 = select <2 x i1> %223, <2 x double> %237, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %239 = bitcast <2 x i64> %234 to <2 x double>
  %240 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %232, <2 x double> %238, <2 x double> %239) #6
  %241 = fcmp oeq <2 x double> %12, zeroinitializer
  %242 = sext <2 x i1> %241 to <2 x i64>
  %243 = and <2 x i64> %17, <i64 4614256656552045848, i64 4614256656552045848>
  %244 = bitcast <2 x i64> %243 to <2 x double>
  %245 = bitcast <2 x i64> %242 to <2 x double>
  %246 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %240, <2 x double> %244, <2 x double> %245) #6
  %247 = fcmp uno <2 x double> %12, %10
  %248 = bitcast <2 x double> %246 to <2 x i64>
  %249 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %250 = xor <2 x i64> %249, %248
  %251 = bitcast <2 x i64> %250 to <2 x double>
  %252 = select <2 x i1> %247, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %251
  ret <2 x double> %252
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x i64> %6 to <2 x double>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %10) #6
  %12 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %11) #6
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %4, <2 x double> %10) #6
  %14 = fmul <2 x double> %11, %11
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %15, %15
  %17 = fmul <2 x double> %11, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %18 = fadd <2 x double> %17, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %19 = fmul <2 x double> %11, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %20 = fadd <2 x double> %19, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %21 = fmul <2 x double> %14, %18
  %22 = fadd <2 x double> %20, %21
  %23 = fmul <2 x double> %11, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %24 = fadd <2 x double> %23, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %25 = fmul <2 x double> %11, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %26 = fadd <2 x double> %25, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %27 = fmul <2 x double> %14, %24
  %28 = fadd <2 x double> %26, %27
  %29 = fmul <2 x double> %11, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %30 = fadd <2 x double> %29, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %31 = fmul <2 x double> %11, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %32 = fadd <2 x double> %31, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %33 = fmul <2 x double> %14, %30
  %34 = fadd <2 x double> %32, %33
  %35 = fmul <2 x double> %15, %28
  %36 = fadd <2 x double> %34, %35
  %37 = fmul <2 x double> %16, %22
  %38 = fadd <2 x double> %37, %36
  %39 = fmul <2 x double> %11, %13
  %40 = fmul <2 x double> %39, %38
  %41 = fadd <2 x double> %13, %40
  %42 = fmul <2 x double> %41, <double -2.000000e+00, double -2.000000e+00>
  %43 = fadd <2 x double> %42, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %44 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> %41, <2 x double> %10) #6
  %45 = bitcast <2 x double> %44 to <2 x i64>
  %46 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %47 = xor <2 x i64> %46, %45
  %48 = bitcast <2 x i64> %47 to <2 x double>
  ret <2 x double> %48
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asind2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x i64> %6 to <2 x double>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %10) #6
  %12 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %11) #6
  %13 = bitcast <2 x double> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fsub <2 x double> %12, %15
  %17 = fmul <2 x double> %12, %12
  %18 = fmul <2 x double> %15, %15
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = xor <2 x i64> %19, <i64 -9223372036854775808, i64 -9223372036854775808>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = fmul <2 x double> %16, %15
  %23 = fmul <2 x double> %16, %16
  %24 = fadd <2 x double> %18, %21
  %25 = fadd <2 x double> %22, %24
  %26 = fadd <2 x double> %22, %25
  %27 = fadd <2 x double> %23, %26
  %28 = fadd <2 x double> %11, %17
  %29 = fsub <2 x double> %28, %11
  %30 = fsub <2 x double> %28, %29
  %31 = fsub <2 x double> %11, %30
  %32 = fsub <2 x double> %17, %29
  %33 = fadd <2 x double> %32, %31
  %34 = fadd <2 x double> %33, %27
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %12
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %35, %38
  %40 = fmul <2 x double> %15, %38
  %41 = fmul <2 x double> %39, %15
  %42 = fmul <2 x double> %16, %38
  %43 = fmul <2 x double> %16, %39
  %44 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fsub <2 x double> %45, %42
  %47 = fsub <2 x double> %46, %43
  %48 = fmul <2 x double> %35, %47
  %49 = bitcast <2 x double> %28 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -134217728, i64 -134217728>
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fsub <2 x double> %28, %51
  %53 = fmul <2 x double> %35, %28
  %54 = fmul <2 x double> %38, %51
  %55 = bitcast <2 x double> %53 to <2 x i64>
  %56 = xor <2 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fmul <2 x double> %52, %38
  %59 = fmul <2 x double> %39, %51
  %60 = fmul <2 x double> %39, %52
  %61 = fmul <2 x double> %28, %48
  %62 = fmul <2 x double> %35, %34
  %63 = fadd <2 x double> %54, %57
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %59, %64
  %66 = fadd <2 x double> %60, %65
  %67 = fadd <2 x double> %66, %61
  %68 = fadd <2 x double> %62, %67
  %69 = fmul <2 x double> %53, <double 5.000000e-01, double 5.000000e-01>
  %70 = fmul <2 x double> %68, <double 5.000000e-01, double 5.000000e-01>
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> %4, <2 x double> %10) #6
  %72 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %70, <2 x double> zeroinitializer, <2 x double> %10) #6
  %73 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %74 = sext <2 x i1> %73 to <2 x i64>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %71, <2 x double> zeroinitializer, <2 x double> %75) #6
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %72, <2 x double> zeroinitializer, <2 x double> %75) #6
  %78 = fmul <2 x double> %11, %11
  %79 = fmul <2 x double> %78, %78
  %80 = fmul <2 x double> %79, %79
  %81 = fmul <2 x double> %11, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %82 = fadd <2 x double> %81, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %83 = fmul <2 x double> %11, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %84 = fadd <2 x double> %83, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %85 = fmul <2 x double> %78, %82
  %86 = fadd <2 x double> %84, %85
  %87 = fmul <2 x double> %11, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %88 = fadd <2 x double> %87, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %89 = fmul <2 x double> %11, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %90 = fadd <2 x double> %89, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %91 = fmul <2 x double> %78, %88
  %92 = fadd <2 x double> %90, %91
  %93 = fmul <2 x double> %11, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %94 = fadd <2 x double> %93, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %95 = fmul <2 x double> %11, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %96 = fadd <2 x double> %95, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %97 = fmul <2 x double> %78, %94
  %98 = fadd <2 x double> %96, %97
  %99 = fmul <2 x double> %79, %92
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %80, %86
  %102 = fadd <2 x double> %101, %100
  %103 = fmul <2 x double> %11, %76
  %104 = fmul <2 x double> %103, %102
  %105 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %76
  %106 = fsub <2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, %105
  %107 = fsub <2 x double> %106, %76
  %108 = fadd <2 x double> %107, <double 0x3C81A62633145C07, double 0x3C81A62633145C07>
  %109 = fsub <2 x double> %108, %77
  %110 = fsub <2 x double> %105, %104
  %111 = fsub <2 x double> %105, %110
  %112 = fsub <2 x double> %111, %104
  %113 = fadd <2 x double> %109, %112
  %114 = fadd <2 x double> %76, %104
  %115 = fadd <2 x double> %110, %113
  %116 = fmul <2 x double> %115, <double 2.000000e+00, double 2.000000e+00>
  %117 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %116, <2 x double> %114, <2 x double> %10) #6
  %118 = bitcast <2 x double> %117 to <2 x i64>
  %119 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %120 = xor <2 x i64> %119, %118
  %121 = bitcast <2 x i64> %120 to <2 x double>
  ret <2 x double> %121
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x i64> %6 to <2 x double>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %10) #6
  %12 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %11) #6
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %4, <2 x double> %10) #6
  %14 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %15 = sext <2 x i1> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %15 to <2 x double>
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> zeroinitializer, <2 x double> %16) #6
  %18 = fmul <2 x double> %11, %11
  %19 = fmul <2 x double> %18, %18
  %20 = fmul <2 x double> %19, %19
  %21 = fmul <2 x double> %11, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %22 = fadd <2 x double> %21, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %23 = fmul <2 x double> %11, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %24 = fadd <2 x double> %23, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %25 = fmul <2 x double> %18, %22
  %26 = fadd <2 x double> %24, %25
  %27 = fmul <2 x double> %11, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %28 = fadd <2 x double> %27, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %29 = fmul <2 x double> %11, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %30 = fadd <2 x double> %29, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %31 = fmul <2 x double> %18, %28
  %32 = fadd <2 x double> %30, %31
  %33 = fmul <2 x double> %11, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %34 = fadd <2 x double> %33, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %35 = fmul <2 x double> %11, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %36 = fadd <2 x double> %35, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %37 = fmul <2 x double> %18, %34
  %38 = fadd <2 x double> %36, %37
  %39 = fmul <2 x double> %19, %32
  %40 = fadd <2 x double> %38, %39
  %41 = fmul <2 x double> %20, %26
  %42 = fadd <2 x double> %41, %40
  %43 = fmul <2 x double> %11, %17
  %44 = fmul <2 x double> %43, %42
  %45 = bitcast <2 x double> %17 to <2 x i64>
  %46 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %47 = xor <2 x i64> %46, %45
  %48 = bitcast <2 x i64> %47 to <2 x double>
  %49 = bitcast <2 x double> %44 to <2 x i64>
  %50 = xor <2 x i64> %46, %49
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fadd <2 x double> %48, %51
  %53 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %52
  %54 = fadd <2 x double> %17, %44
  %55 = fmul <2 x double> %54, <double 2.000000e+00, double 2.000000e+00>
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %55, <2 x double> %53, <2 x double> %10) #6
  %57 = fcmp olt <2 x double> %0, zeroinitializer
  %58 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %59 = bitcast <2 x double> %56 to <2 x i64>
  %60 = xor <2 x i64> %59, <i64 -9223372036854775808, i64 -9223372036854775808>
  %61 = bitcast <2 x i64> %60 to <2 x double>
  %62 = fadd <2 x double> %61, <double 0x400921FB54442D18, double 0x400921FB54442D18>
  %63 = bitcast <2 x i64> %58 to <2 x double>
  %64 = select <2 x i1> %57, <2 x double> %63, <2 x double> zeroinitializer
  %65 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %56, <2 x double> %62, <2 x double> %64) #6
  ret <2 x double> %65
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acosd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 5.000000e-01, double 5.000000e-01>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, %0
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %9 = fmul <2 x double> %8, <double 5.000000e-01, double 5.000000e-01>
  %10 = bitcast <2 x i64> %6 to <2 x double>
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %7, <2 x double> %10) #6
  %12 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %11) #6
  %13 = bitcast <2 x double> %12 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 -134217728, i64 -134217728>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fsub <2 x double> %12, %15
  %17 = fmul <2 x double> %12, %12
  %18 = fmul <2 x double> %15, %15
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = xor <2 x i64> %19, <i64 -9223372036854775808, i64 -9223372036854775808>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = fmul <2 x double> %16, %15
  %23 = fmul <2 x double> %16, %16
  %24 = fadd <2 x double> %18, %21
  %25 = fadd <2 x double> %22, %24
  %26 = fadd <2 x double> %22, %25
  %27 = fadd <2 x double> %23, %26
  %28 = fadd <2 x double> %11, %17
  %29 = fsub <2 x double> %28, %11
  %30 = fsub <2 x double> %28, %29
  %31 = fsub <2 x double> %11, %30
  %32 = fsub <2 x double> %17, %29
  %33 = fadd <2 x double> %32, %31
  %34 = fadd <2 x double> %33, %27
  %35 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %12
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 -134217728, i64 -134217728>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fsub <2 x double> %35, %38
  %40 = fmul <2 x double> %15, %38
  %41 = fmul <2 x double> %39, %15
  %42 = fmul <2 x double> %16, %38
  %43 = fmul <2 x double> %16, %39
  %44 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fsub <2 x double> %45, %42
  %47 = fsub <2 x double> %46, %43
  %48 = fmul <2 x double> %35, %47
  %49 = bitcast <2 x double> %28 to <2 x i64>
  %50 = and <2 x i64> %49, <i64 -134217728, i64 -134217728>
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = fsub <2 x double> %28, %51
  %53 = fmul <2 x double> %35, %28
  %54 = fmul <2 x double> %38, %51
  %55 = bitcast <2 x double> %53 to <2 x i64>
  %56 = xor <2 x i64> %55, <i64 -9223372036854775808, i64 -9223372036854775808>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fmul <2 x double> %52, %38
  %59 = fmul <2 x double> %39, %51
  %60 = fmul <2 x double> %39, %52
  %61 = fmul <2 x double> %28, %48
  %62 = fmul <2 x double> %35, %34
  %63 = fadd <2 x double> %54, %57
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %59, %64
  %66 = fadd <2 x double> %60, %65
  %67 = fadd <2 x double> %66, %61
  %68 = fadd <2 x double> %62, %67
  %69 = fmul <2 x double> %53, <double 5.000000e-01, double 5.000000e-01>
  %70 = fmul <2 x double> %68, <double 5.000000e-01, double 5.000000e-01>
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> %4, <2 x double> %10) #6
  %72 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %70, <2 x double> zeroinitializer, <2 x double> %10) #6
  %73 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %74 = sext <2 x i1> %73 to <2 x i64>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %71, <2 x double> zeroinitializer, <2 x double> %75) #6
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %72, <2 x double> zeroinitializer, <2 x double> %75) #6
  %78 = fmul <2 x double> %11, %11
  %79 = fmul <2 x double> %78, %78
  %80 = fmul <2 x double> %79, %79
  %81 = fmul <2 x double> %11, <double 0x3FA02FF4C7428A47, double 0x3FA02FF4C7428A47>
  %82 = fadd <2 x double> %81, <double 0xBF9032E75CCD4AE8, double 0xBF9032E75CCD4AE8>
  %83 = fmul <2 x double> %11, <double 0x3F93C0E0817E9742, double 0x3F93C0E0817E9742>
  %84 = fadd <2 x double> %83, <double 0x3F7B0EF96B727E7E, double 0x3F7B0EF96B727E7E>
  %85 = fmul <2 x double> %78, %82
  %86 = fadd <2 x double> %84, %85
  %87 = fmul <2 x double> %11, <double 0x3F88E3FD48D0FB6F, double 0x3F88E3FD48D0FB6F>
  %88 = fadd <2 x double> %87, <double 0x3F8C70DDF81249FC, double 0x3F8C70DDF81249FC>
  %89 = fmul <2 x double> %11, <double 0x3F91C6B5042EC6B2, double 0x3F91C6B5042EC6B2>
  %90 = fadd <2 x double> %89, <double 0x3F96E89F8578B64E, double 0x3F96E89F8578B64E>
  %91 = fmul <2 x double> %78, %88
  %92 = fadd <2 x double> %90, %91
  %93 = fmul <2 x double> %11, <double 0x3F9F1C72C5FD95BA, double 0x3F9F1C72C5FD95BA>
  %94 = fadd <2 x double> %93, <double 0x3FA6DB6DB407C2B3, double 0x3FA6DB6DB407C2B3>
  %95 = fmul <2 x double> %11, <double 0x3FB3333333375CD0, double 0x3FB3333333375CD0>
  %96 = fadd <2 x double> %95, <double 0x3FC55555555552F4, double 0x3FC55555555552F4>
  %97 = fmul <2 x double> %78, %94
  %98 = fadd <2 x double> %96, %97
  %99 = fmul <2 x double> %79, %92
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %80, %86
  %102 = fadd <2 x double> %101, %100
  %103 = fmul <2 x double> %11, %76
  %104 = fmul <2 x double> %103, %102
  %105 = bitcast <2 x double> %76 to <2 x i64>
  %106 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = xor <2 x i64> %106, %105
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = bitcast <2 x double> %104 to <2 x i64>
  %110 = xor <2 x i64> %106, %109
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fadd <2 x double> %108, %111
  %113 = fsub <2 x double> %108, %112
  %114 = fadd <2 x double> %113, %111
  %115 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %112
  %116 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %115
  %117 = fsub <2 x double> %116, %112
  %118 = fadd <2 x double> %117, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %119 = fsub <2 x double> %118, %114
  %120 = fadd <2 x double> %76, %104
  %121 = fsub <2 x double> %76, %120
  %122 = fadd <2 x double> %104, %121
  %123 = fadd <2 x double> %77, %122
  %124 = fmul <2 x double> %120, <double 2.000000e+00, double 2.000000e+00>
  %125 = fmul <2 x double> %123, <double 2.000000e+00, double 2.000000e+00>
  %126 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %124, <2 x double> %115, <2 x double> %10) #6
  %127 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %125, <2 x double> %119, <2 x double> %10) #6
  %128 = fcmp olt <2 x double> %0, zeroinitializer
  %129 = xor <2 x i64> %6, <i64 -1, i64 -1>
  %130 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %126
  %131 = fsub <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %130
  %132 = fsub <2 x double> %131, %126
  %133 = fadd <2 x double> %132, <double 0x3CA1A62633145C07, double 0x3CA1A62633145C07>
  %134 = fsub <2 x double> %133, %127
  %135 = bitcast <2 x i64> %129 to <2 x double>
  %136 = select <2 x i1> %128, <2 x double> %135, <2 x double> zeroinitializer
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %126, <2 x double> %130, <2 x double> %136) #6
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %127, <2 x double> %134, <2 x double> %136) #6
  %139 = fadd <2 x double> %137, %138
  ret <2 x double> %139
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = bitcast <2 x i64> %6 to <4 x i32>
  %8 = shufflevector <4 x i32> %7, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %9) #6
  %11 = bitcast <2 x i64> %6 to <2 x double>
  %12 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %11) #6
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %11) #6
  %14 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %4, <2 x double> %11) #6
  %15 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %14
  %16 = bitcast <2 x double> %14 to <2 x i64>
  %17 = and <2 x i64> %16, <i64 -134217728, i64 -134217728>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fsub <2 x double> %14, %18
  %20 = bitcast <2 x double> %15 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -134217728, i64 -134217728>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = fsub <2 x double> %15, %22
  %24 = bitcast <2 x double> %12 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fsub <2 x double> %12, %26
  %28 = fmul <2 x double> %12, %15
  %29 = fmul <2 x double> %26, %22
  %30 = fsub <2 x double> %29, %28
  %31 = fmul <2 x double> %23, %26
  %32 = fmul <2 x double> %27, %22
  %33 = fmul <2 x double> %27, %23
  %34 = fmul <2 x double> %18, %22
  %35 = fmul <2 x double> %23, %18
  %36 = fmul <2 x double> %19, %22
  %37 = fmul <2 x double> %19, %23
  %38 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %34
  %39 = fsub <2 x double> %38, %35
  %40 = fsub <2 x double> %39, %36
  %41 = fsub <2 x double> %40, %37
  %42 = fmul <2 x double> %28, %41
  %43 = fadd <2 x double> %30, %31
  %44 = fadd <2 x double> %32, %43
  %45 = fadd <2 x double> %33, %44
  %46 = fadd <2 x double> %45, %42
  %47 = fmul <2 x double> %28, zeroinitializer
  %48 = fsub <2 x double> %13, %47
  %49 = fmul <2 x double> %15, %48
  %50 = fadd <2 x double> %49, %46
  %51 = bitcast <2 x double> %28 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -134217728, i64 -134217728>
  %53 = bitcast <2 x i64> %52 to <2 x double>
  %54 = fsub <2 x double> %28, %53
  %55 = fmul <2 x double> %28, %28
  %56 = fmul <2 x double> %53, %53
  %57 = bitcast <2 x double> %55 to <2 x i64>
  %58 = xor <2 x i64> %57, <i64 -9223372036854775808, i64 -9223372036854775808>
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fadd <2 x double> %53, %53
  %61 = fmul <2 x double> %60, %54
  %62 = fmul <2 x double> %54, %54
  %63 = fadd <2 x double> %50, %50
  %64 = fmul <2 x double> %28, %63
  %65 = fadd <2 x double> %56, %59
  %66 = fadd <2 x double> %65, %61
  %67 = fadd <2 x double> %62, %66
  %68 = fadd <2 x double> %67, %64
  %69 = fadd <2 x double> %55, %68
  %70 = fsub <2 x double> %55, %69
  %71 = fadd <2 x double> %68, %70
  %72 = fmul <2 x double> %69, %69
  %73 = fmul <2 x double> %72, %72
  %74 = fmul <2 x double> %73, %73
  %75 = fmul <2 x double> %69, <double 0x3EE64ADB3E06EE72, double 0x3EE64ADB3E06EE72>
  %76 = fadd <2 x double> %75, <double 0xBF2077212AA7D6CE, double 0xBF2077212AA7D6CE>
  %77 = fmul <2 x double> %69, <double 0x3F471ECE4D9CED98, double 0x3F471ECE4D9CED98>
  %78 = fadd <2 x double> %77, <double 0xBF64A20138B90CEE, double 0xBF64A20138B90CEE>
  %79 = fmul <2 x double> %72, %76
  %80 = fadd <2 x double> %78, %79
  %81 = fmul <2 x double> %69, <double 0x3F7A788EC28E9FB3, double 0x3F7A788EC28E9FB3>
  %82 = fadd <2 x double> %81, <double 0xBF8A45A2EA379DB5, double 0xBF8A45A2EA379DB5>
  %83 = fmul <2 x double> %69, <double 0x3F954D3ECCF8F320, double 0x3F954D3ECCF8F320>
  %84 = fadd <2 x double> %83, <double 0xBF9D9805E7BA23E7, double 0xBF9D9805E7BA23E7>
  %85 = fmul <2 x double> %72, %82
  %86 = fadd <2 x double> %84, %85
  %87 = fmul <2 x double> %73, %80
  %88 = fadd <2 x double> %86, %87
  %89 = fmul <2 x double> %69, <double 0x3FA26BC6260B1BDD, double 0x3FA26BC6260B1BDD>
  %90 = fadd <2 x double> %89, <double 0xBFA56D2D526C0577, double 0xBFA56D2D526C0577>
  %91 = fmul <2 x double> %69, <double 0x3FA81B6EFB51F8A6, double 0x3FA81B6EFB51F8A6>
  %92 = fadd <2 x double> %91, <double 0xBFAAE027D1895F2E, double 0xBFAAE027D1895F2E>
  %93 = fmul <2 x double> %72, %90
  %94 = fadd <2 x double> %92, %93
  %95 = fmul <2 x double> %69, <double 0x3FAE1A556400767B, double 0x3FAE1A556400767B>
  %96 = fadd <2 x double> %95, <double 0xBFB110C441E542D6, double 0xBFB110C441E542D6>
  %97 = fmul <2 x double> %69, <double 0x3FB3B131F3B00D10, double 0x3FB3B131F3B00D10>
  %98 = fadd <2 x double> %97, <double 0xBFB745D0AC14EFEC, double 0xBFB745D0AC14EFEC>
  %99 = fmul <2 x double> %72, %96
  %100 = fadd <2 x double> %98, %99
  %101 = fmul <2 x double> %73, %94
  %102 = fadd <2 x double> %100, %101
  %103 = fmul <2 x double> %74, %88
  %104 = fadd <2 x double> %102, %103
  %105 = fmul <2 x double> %69, %104
  %106 = fadd <2 x double> %105, <double 0x3FBC71C710B37A0B, double 0x3FBC71C710B37A0B>
  %107 = fmul <2 x double> %69, %106
  %108 = fadd <2 x double> %107, <double 0xBFC249249211AFC7, double 0xBFC249249211AFC7>
  %109 = fmul <2 x double> %69, %108
  %110 = fadd <2 x double> %109, <double 0x3FC9999999987CF0, double 0x3FC9999999987CF0>
  %111 = fmul <2 x double> %69, %110
  %112 = fadd <2 x double> %111, <double 0xBFD555555555543A, double 0xBFD555555555543A>
  %113 = bitcast <2 x double> %69 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -134217728, i64 -134217728>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fsub <2 x double> %69, %115
  %117 = fmul <2 x double> %28, %69
  %118 = fmul <2 x double> %53, %115
  %119 = bitcast <2 x double> %117 to <2 x i64>
  %120 = xor <2 x i64> %119, <i64 -9223372036854775808, i64 -9223372036854775808>
  %121 = bitcast <2 x i64> %120 to <2 x double>
  %122 = fmul <2 x double> %54, %115
  %123 = fmul <2 x double> %116, %53
  %124 = fmul <2 x double> %54, %116
  %125 = fmul <2 x double> %28, %71
  %126 = fmul <2 x double> %50, %69
  %127 = fadd <2 x double> %118, %121
  %128 = fadd <2 x double> %122, %127
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %124, %129
  %131 = fadd <2 x double> %125, %130
  %132 = fadd <2 x double> %126, %131
  %133 = and <2 x i64> %119, <i64 -134217728, i64 -134217728>
  %134 = bitcast <2 x i64> %133 to <2 x double>
  %135 = fsub <2 x double> %117, %134
  %136 = bitcast <2 x double> %112 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -134217728, i64 -134217728>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fsub <2 x double> %112, %138
  %140 = fmul <2 x double> %117, %112
  %141 = fmul <2 x double> %134, %138
  %142 = bitcast <2 x double> %140 to <2 x i64>
  %143 = xor <2 x i64> %142, <i64 -9223372036854775808, i64 -9223372036854775808>
  %144 = bitcast <2 x i64> %143 to <2 x double>
  %145 = fmul <2 x double> %135, %138
  %146 = fmul <2 x double> %139, %134
  %147 = fmul <2 x double> %135, %139
  %148 = fmul <2 x double> %132, %112
  %149 = fadd <2 x double> %141, %144
  %150 = fadd <2 x double> %145, %149
  %151 = fadd <2 x double> %146, %150
  %152 = fadd <2 x double> %147, %151
  %153 = fadd <2 x double> %148, %152
  %154 = fadd <2 x double> %28, %140
  %155 = fsub <2 x double> %28, %154
  %156 = fadd <2 x double> %140, %155
  %157 = fadd <2 x double> %50, %156
  %158 = fadd <2 x double> %157, %153
  %159 = bitcast <16 x i8> %10 to <4 x i32>
  %160 = shufflevector <4 x i32> %159, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %161 = sitofp <2 x i32> %160 to <2 x double>
  %162 = bitcast <2 x double> %161 to <2 x i64>
  %163 = and <2 x i64> %162, <i64 -134217728, i64 -134217728>
  %164 = bitcast <2 x i64> %163 to <2 x double>
  %165 = fsub <2 x double> %161, %164
  %166 = fmul <2 x double> %161, <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>
  %167 = fmul <2 x double> %164, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %168 = bitcast <2 x double> %166 to <2 x i64>
  %169 = xor <2 x i64> %168, <i64 -9223372036854775808, i64 -9223372036854775808>
  %170 = bitcast <2 x i64> %169 to <2 x double>
  %171 = fmul <2 x double> %164, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %172 = fmul <2 x double> %165, <double 0x3FF921FB50000000, double 0x3FF921FB50000000>
  %173 = fmul <2 x double> %165, <double 0x3E5110B460000000, double 0x3E5110B460000000>
  %174 = fmul <2 x double> %161, <double 0x3C91A62633145C07, double 0x3C91A62633145C07>
  %175 = fadd <2 x double> %167, %170
  %176 = fadd <2 x double> %171, %175
  %177 = fadd <2 x double> %172, %176
  %178 = fadd <2 x double> %173, %177
  %179 = fadd <2 x double> %174, %178
  %180 = fadd <2 x double> %166, %154
  %181 = fsub <2 x double> %166, %180
  %182 = fadd <2 x double> %154, %181
  %183 = fadd <2 x double> %179, %182
  %184 = fadd <2 x double> %183, %158
  %185 = fadd <2 x double> %180, %184
  %186 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %187 = sext <2 x i1> %186 to <2 x i64>
  %188 = bitcast <2 x i64> %187 to <2 x double>
  %189 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %185, <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, <2 x double> %188) #6
  %190 = bitcast <2 x double> %189 to <2 x i64>
  %191 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %192 = xor <2 x i64> %191, %190
  %193 = bitcast <2 x i64> %192 to <2 x double>
  ret <2 x double> %193
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atand2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = ashr <2 x i64> %2, <i64 63, i64 63>
  %4 = bitcast <2 x i64> %3 to <4 x i32>
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %6 = bitcast <4 x i32> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 8589934594, i64 0>
  %8 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = add <4 x i32> %10, <i32 1, i32 1, i32 0, i32 0>
  %12 = fcmp ogt <2 x double> %9, <double 1.000000e+00, double 1.000000e+00>
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = bitcast <2 x i64> %13 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %16 = bitcast <2 x i64> %7 to <16 x i8>
  %17 = bitcast <4 x i32> %11 to <16 x i8>
  %18 = bitcast <4 x i32> %15 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %16, <16 x i8> %17, <16 x i8> %18) #6
  %20 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %9
  %21 = bitcast <2 x i64> %13 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %20, <2 x double> %21) #6
  %23 = fmul <2 x double> %22, %22
  %24 = fmul <2 x double> %23, %23
  %25 = fmul <2 x double> %24, %24
  %26 = fmul <2 x double> %25, %25
  %27 = fmul <2 x double> %26, %26
  %28 = fmul <2 x double> %23, <double 0x3F2B81666EB938AF, double 0x3F2B81666EB938AF>
  %29 = fadd <2 x double> %28, <double 0xBF521F657F3915DA, double 0xBF521F657F3915DA>
  %30 = fmul <2 x double> %24, <double 0xBEF3CBF44A88555F, double 0xBEF3CBF44A88555F>
  %31 = fadd <2 x double> %30, %29
  %32 = fmul <2 x double> %23, <double 0x3F6E5005F4C78C20, double 0x3F6E5005F4C78C20>
  %33 = fadd <2 x double> %32, <double 0xBF82399E74A75E56, double 0xBF82399E74A75E56>
  %34 = fmul <2 x double> %23, <double 0x3F90FF6A2A0D2286, double 0x3F90FF6A2A0D2286>
  %35 = fadd <2 x double> %34, <double 0xBF9A1006DE22CDAC, double 0xBF9A1006DE22CDAC>
  %36 = fmul <2 x double> %24, %33
  %37 = fadd <2 x double> %35, %36
  %38 = fmul <2 x double> %23, <double 0x3FA14C4D24651F2E, double 0x3FA14C4D24651F2E>
  %39 = fadd <2 x double> %38, <double 0xBFA4DEE09915F638, double 0xBFA4DEE09915F638>
  %40 = fmul <2 x double> %23, <double 0x3FA7E4B31D8A55AE, double 0x3FA7E4B31D8A55AE>
  %41 = fadd <2 x double> %40, <double 0xBFAACFE938E04FCA, double 0xBFAACFE938E04FCA>
  %42 = fmul <2 x double> %24, %39
  %43 = fadd <2 x double> %41, %42
  %44 = fmul <2 x double> %25, %37
  %45 = fadd <2 x double> %43, %44
  %46 = fmul <2 x double> %23, <double 0x3FAE16A933B73622, double 0x3FAE16A933B73622>
  %47 = fadd <2 x double> %46, <double 0xBFB11074E45F93E0, double 0xBFB11074E45F93E0>
  %48 = fmul <2 x double> %23, <double 0x3FB3B1283C0CA0B1, double 0x3FB3B1283C0CA0B1>
  %49 = fadd <2 x double> %48, <double 0xBFB745CFD878FEE8, double 0xBFB745CFD878FEE8>
  %50 = fmul <2 x double> %24, %47
  %51 = fadd <2 x double> %49, %50
  %52 = fmul <2 x double> %23, <double 0x3FBC71C704FB4F9F, double 0x3FBC71C704FB4F9F>
  %53 = fadd <2 x double> %52, <double 0xBFC2492491E100BB, double 0xBFC2492491E100BB>
  %54 = fmul <2 x double> %23, <double 0x3FC999999997B9DD, double 0x3FC999999997B9DD>
  %55 = fadd <2 x double> %54, <double 0xBFD55555555553C5, double 0xBFD55555555553C5>
  %56 = fmul <2 x double> %24, %53
  %57 = fadd <2 x double> %55, %56
  %58 = fmul <2 x double> %25, %51
  %59 = fadd <2 x double> %57, %58
  %60 = fmul <2 x double> %26, %45
  %61 = fadd <2 x double> %59, %60
  %62 = fmul <2 x double> %31, %27
  %63 = fadd <2 x double> %62, %61
  %64 = fmul <2 x double> %23, %63
  %65 = fmul <2 x double> %22, %64
  %66 = fadd <2 x double> %22, %65
  %67 = bitcast <16 x i8> %19 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 1, i32 1, i32 0, i32 0>
  %69 = icmp eq <4 x i32> %68, <i32 1, i32 1, i32 0, i32 0>
  %70 = sext <4 x i1> %69 to <4 x i32>
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %72 = fsub <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %66
  %73 = bitcast <4 x i32> %71 to <2 x double>
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %66, <2 x double> %72, <2 x double> %73) #6
  %75 = and <4 x i32> %67, <i32 2, i32 2, i32 0, i32 0>
  %76 = icmp eq <4 x i32> %75, <i32 2, i32 2, i32 0, i32 0>
  %77 = sext <4 x i1> %76 to <4 x i32>
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = and <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x double> %74 to <2 x i64>
  %82 = xor <2 x i64> %80, %81
  %83 = bitcast <2 x i64> %82 to <2 x double>
  ret <2 x double> %83
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %29 = fdiv <2 x double> %27, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, %30
  %32 = fmul <2 x double> %31, %31
  %33 = fmul <2 x double> %29, %30
  %34 = fmul <2 x double> %30, <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>
  %35 = fadd <2 x double> %34, <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>
  %36 = fmul <2 x double> %31, <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>
  %37 = fadd <2 x double> %36, %35
  %38 = fmul <2 x double> %30, <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>
  %39 = fadd <2 x double> %38, <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>
  %40 = fmul <2 x double> %30, <double 0x3FD99999998C136E, double 0x3FD99999998C136E>
  %41 = fadd <2 x double> %40, <double 0x3FE555555555593F, double 0x3FE555555555593F>
  %42 = fmul <2 x double> %31, %39
  %43 = fadd <2 x double> %41, %42
  %44 = fmul <2 x double> %32, %37
  %45 = fadd <2 x double> %44, %43
  %46 = bitcast <16 x i8> %26 to <4 x i32>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %48 = sitofp <2 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %48, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %50 = fmul <2 x double> %29, <double 2.000000e+00, double 2.000000e+00>
  %51 = fadd <2 x double> %49, %50
  %52 = fmul <2 x double> %33, %45
  %53 = fadd <2 x double> %51, %52
  %54 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %55 = sext <2 x i1> %54 to <2 x i64>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %56) #6
  %58 = fcmp ult <2 x double> %6, zeroinitializer
  %59 = sext <2 x i1> %58 to <2 x i64>
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %60) #6
  %62 = fcmp oeq <2 x double> %6, zeroinitializer
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %64) #6
  ret <2 x double> %65
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #6
  %5 = fmul <2 x double> %3, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %6 = fadd <2 x double> %5, %0
  %7 = fmul <2 x double> %3, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %8 = fadd <2 x double> %7, %6
  %9 = fmul <2 x double> %8, %8
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %8, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %13 = fadd <2 x double> %12, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %14 = fmul <2 x double> %8, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %15 = fadd <2 x double> %14, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %16 = fmul <2 x double> %8, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %17 = fadd <2 x double> %16, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %18 = fmul <2 x double> %9, %15
  %19 = fadd <2 x double> %17, %18
  %20 = fmul <2 x double> %8, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %21 = fadd <2 x double> %20, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %22 = fmul <2 x double> %8, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %23 = fadd <2 x double> %22, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %24 = fmul <2 x double> %9, %21
  %25 = fadd <2 x double> %23, %24
  %26 = fmul <2 x double> %10, %19
  %27 = fadd <2 x double> %25, %26
  %28 = fmul <2 x double> %13, %11
  %29 = fadd <2 x double> %28, %27
  %30 = fmul <2 x double> %8, %29
  %31 = fadd <2 x double> %30, <double 5.000000e-01, double 5.000000e-01>
  %32 = fmul <2 x double> %9, %31
  %33 = fadd <2 x double> %8, %32
  %34 = fadd <2 x double> %33, <double 1.000000e+00, double 1.000000e+00>
  %35 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %36 = add <4 x i32> %35, <i32 1023, i32 1023, i32 undef, i32 0>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %38 = and <4 x i32> %37, <i32 0, i32 -1, i32 0, i32 -1>
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = bitcast <4 x i32> %39 to <2 x double>
  %41 = fmul <2 x double> %34, %40
  %42 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 0>
  %43 = sub <4 x i32> %42, %35
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %45 = and <4 x i32> %44, <i32 0, i32 -1, i32 0, i32 -1>
  %46 = shl <4 x i32> %45, <i32 20, i32 20, i32 20, i32 20>
  %47 = bitcast <4 x i32> %46 to <2 x double>
  %48 = fmul <2 x double> %41, %47
  %49 = fcmp ogt <2 x double> %0, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %50 = sext <2 x i1> %49 to <2 x i64>
  %51 = bitcast <2 x i64> %50 to <2 x double>
  %52 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %48, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %51) #6
  %53 = fcmp uge <2 x double> %0, <double -1.000000e+03, double -1.000000e+03>
  %54 = select <2 x i1> %53, <2 x double> %52, <2 x double> zeroinitializer
  ret <2 x double> %54
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_logd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %79 = fadd <2 x double> %78, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %80 = fmul <2 x double> %76, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %83 = fadd <2 x double> %82, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %84 = fmul <2 x double> %75, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %85 = fadd <2 x double> %84, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %92 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %92, %95
  %97 = fmul <2 x double> %92, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %98 = fmul <2 x double> %95, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %95, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %103 = fmul <2 x double> %96, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %104 = fmul <2 x double> %96, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %105 = fmul <2 x double> %92, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %106 = fadd <2 x double> %98, %101
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fadd <2 x double> %105, %109
  %111 = fmul <2 x double> %52, <double 2.000000e+00, double 2.000000e+00>
  %112 = fmul <2 x double> %74, <double 2.000000e+00, double 2.000000e+00>
  %113 = fadd <2 x double> %97, %111
  %114 = fsub <2 x double> %97, %113
  %115 = fadd <2 x double> %111, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %116, %112
  %118 = fmul <2 x double> %52, %75
  %119 = fmul <2 x double> %118, %89
  %120 = fadd <2 x double> %113, %119
  %121 = fsub <2 x double> %113, %120
  %122 = fadd <2 x double> %119, %121
  %123 = fadd <2 x double> %122, %117
  %124 = fadd <2 x double> %120, %123
  %125 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %126 = sext <2 x i1> %125 to <2 x i64>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %124, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %127) #6
  %129 = fcmp ult <2 x double> %6, zeroinitializer
  %130 = sext <2 x i1> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %131) #6
  %133 = fcmp oeq <2 x double> %6, zeroinitializer
  %134 = sext <2 x i1> %133 to <2 x i64>
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %135) #6
  ret <2 x double> %136
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_powd2_u10sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %1, i32 11) #6
  %4 = fcmp oeq <2 x double> %3, %1
  %5 = sext <2 x i1> %4 to <2 x i64>
  %6 = fmul <2 x double> %1, <double 5.000000e-01, double 5.000000e-01>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 11) #6
  %8 = fcmp une <2 x double> %7, %6
  %9 = and <2 x i1> %8, %4
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = bitcast <2 x double> %0 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 9223372036854775807, i64 9223372036854775807>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fcmp olt <2 x double> %13, <double 0x10000000000000, double 0x10000000000000>
  %15 = sext <2 x i1> %14 to <2 x i64>
  %16 = fmul <2 x double> %13, <double 0x43F0000000000000, double 0x43F0000000000000>
  %17 = bitcast <2 x i64> %15 to <2 x double>
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %16, <2 x double> %17) #6
  %19 = fmul <2 x double> %18, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %20 = bitcast <2 x double> %19 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %22 = lshr <4 x i32> %21, <i32 20, i32 20, i32 20, i32 20>
  %23 = and <4 x i32> %22, <i32 2047, i32 2047, i32 0, i32 0>
  %24 = add nsw <4 x i32> %23, <i32 -1023, i32 -1023, i32 0, i32 0>
  %25 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %23
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %27 = and <4 x i32> %26, <i32 0, i32 -1, i32 0, i32 -1>
  %28 = shl <4 x i32> %27, <i32 20, i32 20, i32 20, i32 20>
  %29 = bitcast <2 x double> %18 to <4 x i32>
  %30 = add <4 x i32> %28, %29
  %31 = bitcast <4 x i32> %30 to <2 x double>
  %32 = bitcast <2 x i64> %15 to <4 x i32>
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %34 = add nsw <4 x i32> %23, <i32 -1087, i32 -1087, i32 0, i32 0>
  %35 = bitcast <4 x i32> %24 to <16 x i8>
  %36 = bitcast <4 x i32> %34 to <16 x i8>
  %37 = bitcast <4 x i32> %33 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #6
  %39 = fadd <2 x double> %31, <double -1.000000e+00, double -1.000000e+00>
  %40 = fadd <2 x double> %39, <double 1.000000e+00, double 1.000000e+00>
  %41 = fsub <2 x double> %39, %40
  %42 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %41
  %43 = fsub <2 x double> %31, %40
  %44 = fadd <2 x double> %43, %42
  %45 = fadd <2 x double> %31, <double 1.000000e+00, double 1.000000e+00>
  %46 = fadd <2 x double> %45, <double -1.000000e+00, double -1.000000e+00>
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %47
  %49 = fsub <2 x double> %31, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %45
  %52 = bitcast <2 x double> %45 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 -134217728, i64 -134217728>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = fsub <2 x double> %45, %54
  %56 = bitcast <2 x double> %51 to <2 x i64>
  %57 = and <2 x i64> %56, <i64 -134217728, i64 -134217728>
  %58 = bitcast <2 x i64> %57 to <2 x double>
  %59 = fsub <2 x double> %51, %58
  %60 = bitcast <2 x double> %39 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %39, %62
  %64 = fmul <2 x double> %39, %51
  %65 = fmul <2 x double> %62, %58
  %66 = fsub <2 x double> %65, %64
  %67 = fmul <2 x double> %59, %62
  %68 = fmul <2 x double> %63, %58
  %69 = fmul <2 x double> %63, %59
  %70 = fmul <2 x double> %54, %58
  %71 = fmul <2 x double> %59, %54
  %72 = fmul <2 x double> %55, %58
  %73 = fmul <2 x double> %55, %59
  %74 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %70
  %75 = fsub <2 x double> %74, %71
  %76 = fsub <2 x double> %75, %72
  %77 = fsub <2 x double> %76, %73
  %78 = fmul <2 x double> %64, %77
  %79 = fadd <2 x double> %66, %67
  %80 = fadd <2 x double> %68, %79
  %81 = fadd <2 x double> %69, %80
  %82 = fadd <2 x double> %81, %78
  %83 = fmul <2 x double> %64, %50
  %84 = fsub <2 x double> %44, %83
  %85 = fmul <2 x double> %51, %84
  %86 = fadd <2 x double> %85, %82
  %87 = bitcast <2 x double> %64 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 -134217728, i64 -134217728>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = fsub <2 x double> %64, %89
  %91 = fmul <2 x double> %64, %64
  %92 = fmul <2 x double> %89, %89
  %93 = bitcast <2 x double> %91 to <2 x i64>
  %94 = xor <2 x i64> %93, <i64 -9223372036854775808, i64 -9223372036854775808>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fadd <2 x double> %89, %89
  %97 = fmul <2 x double> %96, %90
  %98 = fmul <2 x double> %90, %90
  %99 = fadd <2 x double> %86, %86
  %100 = fmul <2 x double> %64, %99
  %101 = fadd <2 x double> %92, %95
  %102 = fadd <2 x double> %101, %97
  %103 = fadd <2 x double> %98, %102
  %104 = fadd <2 x double> %103, %100
  %105 = fmul <2 x double> %91, %91
  %106 = fmul <2 x double> %105, %105
  %107 = fmul <2 x double> %106, %106
  %108 = fmul <2 x double> %91, <double 0x3FBA6DEA6D1E9D11, double 0x3FBA6DEA6D1E9D11>
  %109 = fadd <2 x double> %108, <double 0x3FBE252DDF5F8D0A, double 0x3FBE252DDF5F8D0A>
  %110 = fmul <2 x double> %91, <double 0x3FC110F384A1865C, double 0x3FC110F384A1865C>
  %111 = fadd <2 x double> %110, <double 0x3FC3B13BB108EFD1, double 0x3FC3B13BB108EFD1>
  %112 = fmul <2 x double> %105, %109
  %113 = fadd <2 x double> %111, %112
  %114 = fmul <2 x double> %91, <double 0x3FC745D17248DAF1, double 0x3FC745D17248DAF1>
  %115 = fadd <2 x double> %114, <double 0x3FCC71C71C76197F, double 0x3FCC71C71C76197F>
  %116 = fmul <2 x double> %91, <double 0x3FD2492492492200, double 0x3FD2492492492200>
  %117 = fadd <2 x double> %116, <double 0x3FD999999999999B, double 0x3FD999999999999B>
  %118 = fmul <2 x double> %105, %115
  %119 = fadd <2 x double> %117, %118
  %120 = fmul <2 x double> %106, %113
  %121 = fadd <2 x double> %119, %120
  %122 = fmul <2 x double> %107, <double 0x3FBDC2EC09E714D3, double 0x3FBDC2EC09E714D3>
  %123 = fadd <2 x double> %122, %121
  %124 = bitcast <16 x i8> %38 to <4 x i32>
  %125 = shufflevector <4 x i32> %124, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %126 = sitofp <2 x i32> %125 to <2 x double>
  %127 = bitcast <2 x double> %126 to <2 x i64>
  %128 = and <2 x i64> %127, <i64 -134217728, i64 -134217728>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fsub <2 x double> %126, %129
  %131 = fmul <2 x double> %126, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %132 = fmul <2 x double> %129, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %133 = bitcast <2 x double> %131 to <2 x i64>
  %134 = xor <2 x i64> %133, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = fmul <2 x double> %129, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %137 = fmul <2 x double> %130, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %138 = fmul <2 x double> %130, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %139 = fmul <2 x double> %126, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %140 = fadd <2 x double> %132, %135
  %141 = fadd <2 x double> %136, %140
  %142 = fadd <2 x double> %137, %141
  %143 = fadd <2 x double> %138, %142
  %144 = fadd <2 x double> %139, %143
  %145 = fmul <2 x double> %64, <double 2.000000e+00, double 2.000000e+00>
  %146 = fmul <2 x double> %86, <double 2.000000e+00, double 2.000000e+00>
  %147 = fadd <2 x double> %131, %145
  %148 = fsub <2 x double> %131, %147
  %149 = fadd <2 x double> %145, %148
  %150 = fadd <2 x double> %144, %149
  %151 = fadd <2 x double> %150, %146
  %152 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fsub <2 x double> %91, %153
  %155 = fmul <2 x double> %64, %91
  %156 = fmul <2 x double> %89, %153
  %157 = bitcast <2 x double> %155 to <2 x i64>
  %158 = xor <2 x i64> %157, <i64 -9223372036854775808, i64 -9223372036854775808>
  %159 = bitcast <2 x i64> %158 to <2 x double>
  %160 = fmul <2 x double> %154, %89
  %161 = fmul <2 x double> %90, %153
  %162 = fmul <2 x double> %90, %154
  %163 = fmul <2 x double> %91, %86
  %164 = fmul <2 x double> %64, %104
  %165 = fadd <2 x double> %156, %159
  %166 = fadd <2 x double> %160, %165
  %167 = fadd <2 x double> %161, %166
  %168 = fadd <2 x double> %162, %167
  %169 = fadd <2 x double> %168, %163
  %170 = fadd <2 x double> %169, %164
  %171 = and <2 x i64> %157, <i64 -134217728, i64 -134217728>
  %172 = bitcast <2 x i64> %171 to <2 x double>
  %173 = fsub <2 x double> %155, %172
  %174 = fmul <2 x double> %155, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %175 = fmul <2 x double> %172, <double 0x3FE5555550000000, double 0x3FE5555550000000>
  %176 = bitcast <2 x double> %174 to <2 x i64>
  %177 = xor <2 x i64> %176, <i64 -9223372036854775808, i64 -9223372036854775808>
  %178 = bitcast <2 x i64> %177 to <2 x double>
  %179 = fmul <2 x double> %173, <double 0x3FE5555550000000, double 0x3FE5555550000000>
  %180 = fmul <2 x double> %172, <double 0x3E45555554000000, double 0x3E45555554000000>
  %181 = fmul <2 x double> %173, <double 0x3E45555554000000, double 0x3E45555554000000>
  %182 = fmul <2 x double> %155, <double 0x3C85F00000000000, double 0x3C85F00000000000>
  %183 = fmul <2 x double> %170, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %184 = fadd <2 x double> %175, %178
  %185 = fadd <2 x double> %179, %184
  %186 = fadd <2 x double> %180, %185
  %187 = fadd <2 x double> %181, %186
  %188 = fadd <2 x double> %182, %187
  %189 = fadd <2 x double> %188, %183
  %190 = fadd <2 x double> %147, %174
  %191 = fsub <2 x double> %147, %190
  %192 = fadd <2 x double> %174, %191
  %193 = fadd <2 x double> %192, %151
  %194 = fadd <2 x double> %193, %189
  %195 = fmul <2 x double> %91, %155
  %196 = fmul <2 x double> %153, %172
  %197 = bitcast <2 x double> %195 to <2 x i64>
  %198 = xor <2 x i64> %197, <i64 -9223372036854775808, i64 -9223372036854775808>
  %199 = bitcast <2 x i64> %198 to <2 x double>
  %200 = fmul <2 x double> %154, %172
  %201 = fmul <2 x double> %173, %153
  %202 = fmul <2 x double> %154, %173
  %203 = fmul <2 x double> %91, %170
  %204 = fmul <2 x double> %155, %104
  %205 = fadd <2 x double> %196, %199
  %206 = fadd <2 x double> %200, %205
  %207 = fadd <2 x double> %201, %206
  %208 = fadd <2 x double> %202, %207
  %209 = fadd <2 x double> %208, %203
  %210 = fadd <2 x double> %204, %209
  %211 = and <2 x i64> %197, <i64 -134217728, i64 -134217728>
  %212 = bitcast <2 x i64> %211 to <2 x double>
  %213 = fsub <2 x double> %195, %212
  %214 = bitcast <2 x double> %123 to <2 x i64>
  %215 = and <2 x i64> %214, <i64 -134217728, i64 -134217728>
  %216 = bitcast <2 x i64> %215 to <2 x double>
  %217 = fsub <2 x double> %123, %216
  %218 = fmul <2 x double> %195, %123
  %219 = fmul <2 x double> %212, %216
  %220 = bitcast <2 x double> %218 to <2 x i64>
  %221 = xor <2 x i64> %220, <i64 -9223372036854775808, i64 -9223372036854775808>
  %222 = bitcast <2 x i64> %221 to <2 x double>
  %223 = fmul <2 x double> %213, %216
  %224 = fmul <2 x double> %217, %212
  %225 = fmul <2 x double> %213, %217
  %226 = fmul <2 x double> %123, %210
  %227 = fadd <2 x double> %219, %222
  %228 = fadd <2 x double> %223, %227
  %229 = fadd <2 x double> %224, %228
  %230 = fadd <2 x double> %225, %229
  %231 = fadd <2 x double> %230, %226
  %232 = fadd <2 x double> %190, %218
  %233 = fsub <2 x double> %190, %232
  %234 = fadd <2 x double> %218, %233
  %235 = fadd <2 x double> %234, %194
  %236 = fadd <2 x double> %235, %231
  %237 = bitcast <2 x double> %232 to <2 x i64>
  %238 = and <2 x i64> %237, <i64 -134217728, i64 -134217728>
  %239 = bitcast <2 x i64> %238 to <2 x double>
  %240 = fsub <2 x double> %232, %239
  %241 = bitcast <2 x double> %1 to <2 x i64>
  %242 = and <2 x i64> %241, <i64 -134217728, i64 -134217728>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = fsub <2 x double> %1, %243
  %245 = fmul <2 x double> %232, %1
  %246 = fmul <2 x double> %243, %239
  %247 = bitcast <2 x double> %245 to <2 x i64>
  %248 = xor <2 x i64> %247, <i64 -9223372036854775808, i64 -9223372036854775808>
  %249 = bitcast <2 x i64> %248 to <2 x double>
  %250 = fmul <2 x double> %240, %243
  %251 = fmul <2 x double> %244, %239
  %252 = fmul <2 x double> %244, %240
  %253 = fmul <2 x double> %236, %1
  %254 = fadd <2 x double> %246, %249
  %255 = fadd <2 x double> %250, %254
  %256 = fadd <2 x double> %251, %255
  %257 = fadd <2 x double> %252, %256
  %258 = fadd <2 x double> %257, %253
  %259 = fadd <2 x double> %245, %258
  %260 = fmul <2 x double> %259, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %261 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %260, i32 8) #6
  %262 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %261) #6
  %263 = fmul <2 x double> %261, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %264 = fadd <2 x double> %263, %245
  %265 = fsub <2 x double> %264, %245
  %266 = fsub <2 x double> %264, %265
  %267 = fsub <2 x double> %245, %266
  %268 = fsub <2 x double> %263, %265
  %269 = fadd <2 x double> %268, %267
  %270 = fadd <2 x double> %269, %258
  %271 = fmul <2 x double> %261, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %272 = fadd <2 x double> %271, %264
  %273 = fsub <2 x double> %272, %264
  %274 = fsub <2 x double> %272, %273
  %275 = fsub <2 x double> %264, %274
  %276 = fsub <2 x double> %271, %273
  %277 = fadd <2 x double> %276, %275
  %278 = fadd <2 x double> %277, %270
  %279 = fadd <2 x double> %272, %278
  %280 = fsub <2 x double> %272, %279
  %281 = fadd <2 x double> %278, %280
  %282 = fmul <2 x double> %279, %279
  %283 = fmul <2 x double> %282, %282
  %284 = fmul <2 x double> %283, %283
  %285 = fmul <2 x double> %279, <double 0x3E5AF559D51456B9, double 0x3E5AF559D51456B9>
  %286 = fadd <2 x double> %285, <double 0x3E928A8F696DB5AD, double 0x3E928A8F696DB5AD>
  %287 = fmul <2 x double> %279, <double 0x3EC71DDFD27D265E, double 0x3EC71DDFD27D265E>
  %288 = fadd <2 x double> %287, <double 0x3EFA0199EC6C491B, double 0x3EFA0199EC6C491B>
  %289 = fmul <2 x double> %279, <double 0x3F2A01A01AE0C33D, double 0x3F2A01A01AE0C33D>
  %290 = fadd <2 x double> %289, <double 0x3F56C16C1828EC7B, double 0x3F56C16C1828EC7B>
  %291 = fmul <2 x double> %282, %288
  %292 = fadd <2 x double> %290, %291
  %293 = fmul <2 x double> %279, <double 0x3F8111111110FB68, double 0x3F8111111110FB68>
  %294 = fadd <2 x double> %293, <double 0x3FA5555555550E90, double 0x3FA5555555550E90>
  %295 = fmul <2 x double> %279, <double 0x3FC5555555555558, double 0x3FC5555555555558>
  %296 = fadd <2 x double> %295, <double 0x3FE0000000000009, double 0x3FE0000000000009>
  %297 = fmul <2 x double> %282, %294
  %298 = fadd <2 x double> %296, %297
  %299 = fmul <2 x double> %283, %292
  %300 = fadd <2 x double> %298, %299
  %301 = fmul <2 x double> %286, %284
  %302 = fadd <2 x double> %301, %300
  %303 = fadd <2 x double> %279, <double 1.000000e+00, double 1.000000e+00>
  %304 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %303
  %305 = fadd <2 x double> %279, %304
  %306 = fadd <2 x double> %281, %305
  %307 = bitcast <2 x double> %279 to <2 x i64>
  %308 = and <2 x i64> %307, <i64 -134217728, i64 -134217728>
  %309 = bitcast <2 x i64> %308 to <2 x double>
  %310 = fsub <2 x double> %279, %309
  %311 = fmul <2 x double> %309, %309
  %312 = bitcast <2 x double> %282 to <2 x i64>
  %313 = xor <2 x i64> %312, <i64 -9223372036854775808, i64 -9223372036854775808>
  %314 = bitcast <2 x i64> %313 to <2 x double>
  %315 = fadd <2 x double> %309, %309
  %316 = fmul <2 x double> %315, %310
  %317 = fmul <2 x double> %310, %310
  %318 = fadd <2 x double> %281, %281
  %319 = fmul <2 x double> %279, %318
  %320 = fadd <2 x double> %311, %314
  %321 = fadd <2 x double> %320, %316
  %322 = fadd <2 x double> %317, %321
  %323 = fadd <2 x double> %319, %322
  %324 = and <2 x i64> %312, <i64 -134217728, i64 -134217728>
  %325 = bitcast <2 x i64> %324 to <2 x double>
  %326 = fsub <2 x double> %282, %325
  %327 = bitcast <2 x double> %302 to <2 x i64>
  %328 = and <2 x i64> %327, <i64 -134217728, i64 -134217728>
  %329 = bitcast <2 x i64> %328 to <2 x double>
  %330 = fsub <2 x double> %302, %329
  %331 = fmul <2 x double> %282, %302
  %332 = fmul <2 x double> %325, %329
  %333 = bitcast <2 x double> %331 to <2 x i64>
  %334 = xor <2 x i64> %333, <i64 -9223372036854775808, i64 -9223372036854775808>
  %335 = bitcast <2 x i64> %334 to <2 x double>
  %336 = fmul <2 x double> %326, %329
  %337 = fmul <2 x double> %330, %325
  %338 = fmul <2 x double> %326, %330
  %339 = fmul <2 x double> %302, %323
  %340 = fadd <2 x double> %332, %335
  %341 = fadd <2 x double> %336, %340
  %342 = fadd <2 x double> %337, %341
  %343 = fadd <2 x double> %338, %342
  %344 = fadd <2 x double> %339, %343
  %345 = fadd <2 x double> %303, %331
  %346 = fsub <2 x double> %303, %345
  %347 = fadd <2 x double> %331, %346
  %348 = fadd <2 x double> %306, %347
  %349 = fadd <2 x double> %348, %344
  %350 = fadd <2 x double> %345, %349
  %351 = ashr <4 x i32> %262, <i32 1, i32 1, i32 1, i32 1>
  %352 = add <4 x i32> %351, <i32 1023, i32 1023, i32 undef, i32 0>
  %353 = shufflevector <4 x i32> %352, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %354 = and <4 x i32> %353, <i32 0, i32 -1, i32 0, i32 -1>
  %355 = shl <4 x i32> %354, <i32 20, i32 20, i32 20, i32 20>
  %356 = bitcast <4 x i32> %355 to <2 x double>
  %357 = fmul <2 x double> %350, %356
  %358 = add <4 x i32> %262, <i32 1023, i32 1023, i32 undef, i32 0>
  %359 = sub <4 x i32> %358, %351
  %360 = shufflevector <4 x i32> %359, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %361 = and <4 x i32> %360, <i32 0, i32 -1, i32 0, i32 -1>
  %362 = shl <4 x i32> %361, <i32 20, i32 20, i32 20, i32 20>
  %363 = bitcast <4 x i32> %362 to <2 x double>
  %364 = fmul <2 x double> %357, %363
  %365 = fcmp uge <2 x double> %245, <double -1.000000e+03, double -1.000000e+03>
  %366 = select <2 x i1> %365, <2 x double> %364, <2 x double> zeroinitializer
  %367 = fcmp ogt <2 x double> %245, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %368 = sext <2 x i1> %367 to <2 x i64>
  %369 = bitcast <2 x i64> %368 to <2 x double>
  %370 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %366, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %369) #6
  %371 = fcmp ogt <2 x double> %0, zeroinitializer
  %372 = sext <2 x i1> %371 to <2 x i64>
  %373 = bitcast <2 x i64> %10 to <2 x double>
  %374 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %373) #6
  %375 = bitcast <2 x i64> %5 to <2 x double>
  %376 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %374, <2 x double> %375) #6
  %377 = bitcast <2 x i64> %372 to <2 x double>
  %378 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %376, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %377) #6
  %379 = fmul <2 x double> %370, %378
  %380 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %381 = bitcast <2 x double> %380 to <2 x i64>
  %382 = and <2 x i64> %241, <i64 -9223372036854775808, i64 -9223372036854775808>
  %383 = xor <2 x i64> %382, %381
  %384 = bitcast <2 x i64> %383 to <2 x double>
  %385 = and <2 x i64> %241, <i64 9223372036854775807, i64 9223372036854775807>
  %386 = bitcast <2 x i64> %385 to <2 x double>
  %387 = fcmp oeq <2 x double> %386, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %388 = sext <2 x i1> %387 to <2 x i64>
  %389 = fcmp uge <2 x double> %384, zeroinitializer
  %390 = fcmp oeq <2 x double> %384, zeroinitializer
  %391 = sext <2 x i1> %390 to <2 x i64>
  %392 = bitcast <2 x i64> %391 to <2 x double>
  %393 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %392) #6
  %394 = select <2 x i1> %389, <2 x double> %393, <2 x double> zeroinitializer
  %395 = bitcast <2 x i64> %388 to <2 x double>
  %396 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %379, <2 x double> %394, <2 x double> %395) #6
  %397 = fcmp oeq <2 x double> %13, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %398 = fcmp oeq <2 x double> %0, zeroinitializer
  %399 = sext <2 x i1> %398 to <2 x i64>
  %400 = or <2 x i1> %397, %398
  %401 = sext <2 x i1> %400 to <2 x i64>
  %402 = and <2 x i64> %11, <i64 -9223372036854775808, i64 -9223372036854775808>
  %403 = or <2 x i64> %402, <i64 4607182418800017408, i64 4607182418800017408>
  %404 = bitcast <2 x i64> %403 to <2 x double>
  %405 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %404, <2 x double> %373) #6
  %406 = xor <2 x i64> %241, <i64 -9223372036854775808, i64 -9223372036854775808>
  %407 = bitcast <2 x i64> %406 to <2 x double>
  %408 = bitcast <2 x i64> %399 to <2 x double>
  %409 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %407, <2 x double> %408) #6
  %410 = fcmp uge <2 x double> %409, zeroinitializer
  %411 = select <2 x i1> %410, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> zeroinitializer
  %412 = fmul <2 x double> %405, %411
  %413 = bitcast <2 x i64> %401 to <2 x double>
  %414 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %396, <2 x double> %412, <2 x double> %413) #6
  %415 = fcmp uno <2 x double> %1, %0
  %416 = select <2 x i1> %415, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %414
  %417 = fcmp oeq <2 x double> %1, zeroinitializer
  %418 = fcmp oeq <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %419 = or <2 x i1> %417, %418
  %420 = sext <2 x i1> %419 to <2 x i64>
  %421 = bitcast <2 x i64> %420 to <2 x double>
  %422 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %416, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %421) #6
  ret <2 x double> %422
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #6
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = bitcast <2 x double> %18 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -134217728, i64 -134217728>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fsub <2 x double> %18, %27
  %29 = fmul <2 x double> %18, %18
  %30 = fmul <2 x double> %27, %27
  %31 = bitcast <2 x double> %29 to <2 x i64>
  %32 = xor <2 x i64> %31, <i64 -9223372036854775808, i64 -9223372036854775808>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fadd <2 x double> %27, %27
  %35 = fmul <2 x double> %34, %28
  %36 = fmul <2 x double> %28, %28
  %37 = fadd <2 x double> %24, %24
  %38 = fmul <2 x double> %18, %37
  %39 = fadd <2 x double> %30, %33
  %40 = fadd <2 x double> %39, %35
  %41 = fadd <2 x double> %36, %40
  %42 = fadd <2 x double> %38, %41
  %43 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = fsub <2 x double> %29, %44
  %46 = fmul <2 x double> %29, %29
  %47 = fmul <2 x double> %44, %44
  %48 = bitcast <2 x double> %46 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372036854775808, i64 -9223372036854775808>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fadd <2 x double> %44, %44
  %52 = fmul <2 x double> %51, %45
  %53 = fmul <2 x double> %45, %45
  %54 = fadd <2 x double> %42, %42
  %55 = fmul <2 x double> %29, %54
  %56 = fadd <2 x double> %47, %50
  %57 = fadd <2 x double> %56, %52
  %58 = fadd <2 x double> %53, %57
  %59 = fadd <2 x double> %58, %55
  %60 = fmul <2 x double> %46, %46
  %61 = fmul <2 x double> %18, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %62 = fadd <2 x double> %61, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %63 = fmul <2 x double> %18, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %64 = fadd <2 x double> %63, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %65 = fmul <2 x double> %18, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %66 = fadd <2 x double> %65, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %67 = fmul <2 x double> %29, %64
  %68 = fadd <2 x double> %66, %67
  %69 = fmul <2 x double> %18, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %70 = fadd <2 x double> %69, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %71 = fmul <2 x double> %18, <double 0x3F81111111111119, double 0x3F81111111111119>
  %72 = fadd <2 x double> %71, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %73 = fmul <2 x double> %29, %70
  %74 = fadd <2 x double> %72, %73
  %75 = fmul <2 x double> %46, %68
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %62, %60
  %78 = fadd <2 x double> %77, %76
  %79 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %80 = fmul <2 x double> %27, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %81 = bitcast <2 x double> %79 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %28, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %85 = fmul <2 x double> %27, <double 0x3E25555554000000, double 0x3E25555554000000>
  %86 = fmul <2 x double> %28, <double 0x3E25555554000000, double 0x3E25555554000000>
  %87 = fmul <2 x double> %24, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %88 = fadd <2 x double> %80, %83
  %89 = fadd <2 x double> %84, %88
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %79, <double 5.000000e-01, double 5.000000e-01>
  %94 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %93
  %95 = fadd <2 x double> %79, %94
  %96 = fadd <2 x double> %95, %92
  %97 = bitcast <2 x double> %93 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -134217728, i64 -134217728>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fsub <2 x double> %93, %99
  %101 = fmul <2 x double> %18, %93
  %102 = fmul <2 x double> %27, %99
  %103 = bitcast <2 x double> %101 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -9223372036854775808, i64 -9223372036854775808>
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fmul <2 x double> %100, %27
  %107 = fmul <2 x double> %28, %99
  %108 = fmul <2 x double> %28, %100
  %109 = fmul <2 x double> %93, %24
  %110 = fmul <2 x double> %18, %96
  %111 = fadd <2 x double> %102, %105
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %101, <double 1.000000e+00, double 1.000000e+00>
  %118 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %119 = fadd <2 x double> %101, %118
  %120 = fadd <2 x double> %119, %116
  %121 = bitcast <2 x double> %117 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 -134217728, i64 -134217728>
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fsub <2 x double> %117, %123
  %125 = fmul <2 x double> %18, %117
  %126 = fmul <2 x double> %27, %123
  %127 = bitcast <2 x double> %125 to <2 x i64>
  %128 = xor <2 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fmul <2 x double> %124, %27
  %131 = fmul <2 x double> %28, %123
  %132 = fmul <2 x double> %28, %124
  %133 = fmul <2 x double> %117, %24
  %134 = fmul <2 x double> %18, %120
  %135 = fadd <2 x double> %126, %129
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %131, %136
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %139, %134
  %141 = fadd <2 x double> %125, <double 1.000000e+00, double 1.000000e+00>
  %142 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %141
  %143 = fadd <2 x double> %125, %142
  %144 = fadd <2 x double> %143, %140
  %145 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %46, %146
  %148 = bitcast <2 x double> %78 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %78, %150
  %152 = fmul <2 x double> %46, %78
  %153 = fmul <2 x double> %146, %150
  %154 = bitcast <2 x double> %152 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = bitcast <2 x i64> %155 to <2 x double>
  %157 = fmul <2 x double> %147, %150
  %158 = fmul <2 x double> %151, %146
  %159 = fmul <2 x double> %147, %151
  %160 = fmul <2 x double> %78, %59
  %161 = fadd <2 x double> %153, %156
  %162 = fadd <2 x double> %157, %161
  %163 = fadd <2 x double> %158, %162
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %141, %152
  %167 = fsub <2 x double> %141, %166
  %168 = fadd <2 x double> %152, %167
  %169 = fadd <2 x double> %168, %144
  %170 = fadd <2 x double> %165, %169
  %171 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %172 = add <4 x i32> %171, <i32 1023, i32 1023, i32 undef, i32 0>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %174 = and <4 x i32> %173, <i32 0, i32 -1, i32 0, i32 -1>
  %175 = shl <4 x i32> %174, <i32 20, i32 20, i32 20, i32 20>
  %176 = bitcast <4 x i32> %175 to <2 x double>
  %177 = fmul <2 x double> %166, %176
  %178 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 0>
  %179 = sub <4 x i32> %178, %171
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %181 = and <4 x i32> %180, <i32 0, i32 -1, i32 0, i32 -1>
  %182 = shl <4 x i32> %181, <i32 20, i32 20, i32 20, i32 20>
  %183 = bitcast <4 x i32> %182 to <2 x double>
  %184 = fmul <2 x double> %177, %183
  %185 = fmul <2 x double> %170, %176
  %186 = fmul <2 x double> %185, %183
  %187 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %188 = bitcast <2 x double> %184 to <2 x i64>
  %189 = sext <2 x i1> %187 to <2 x i64>
  %190 = and <2 x i64> %188, %189
  %191 = bitcast <2 x double> %186 to <2 x i64>
  %192 = and <2 x i64> %191, %189
  %193 = bitcast <2 x i64> %190 to <2 x double>
  %194 = bitcast <2 x i64> %192 to <2 x double>
  %195 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %193
  %196 = and <2 x i64> %190, <i64 -134217728, i64 -134217728>
  %197 = bitcast <2 x i64> %196 to <2 x double>
  %198 = fsub <2 x double> %193, %197
  %199 = bitcast <2 x double> %195 to <2 x i64>
  %200 = and <2 x i64> %199, <i64 -134217728, i64 -134217728>
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fsub <2 x double> %195, %201
  %203 = fmul <2 x double> %197, %201
  %204 = fmul <2 x double> %202, %197
  %205 = fmul <2 x double> %198, %201
  %206 = fmul <2 x double> %198, %202
  %207 = fmul <2 x double> %195, %194
  %208 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %203
  %209 = fsub <2 x double> %208, %204
  %210 = fsub <2 x double> %209, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fmul <2 x double> %195, %212
  %214 = fsub <2 x double> %193, %195
  %215 = fsub <2 x double> %193, %214
  %216 = fsub <2 x double> %215, %195
  %217 = fadd <2 x double> %216, %194
  %218 = fsub <2 x double> %217, %213
  %219 = fadd <2 x double> %214, %218
  %220 = fmul <2 x double> %219, <double 5.000000e-01, double 5.000000e-01>
  %221 = fcmp ogt <2 x double> %4, <double 7.100000e+02, double 7.100000e+02>
  %222 = fcmp uno <2 x double> %220, zeroinitializer
  %223 = or <2 x i1> %222, %221
  %224 = sext <2 x i1> %223 to <2 x i64>
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %220, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %225) #6
  %227 = bitcast <2 x double> %226 to <2 x i64>
  %228 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %229 = xor <2 x i64> %228, %227
  %230 = fcmp uno <2 x double> %0, zeroinitializer
  %231 = bitcast <2 x i64> %229 to <2 x double>
  %232 = select <2 x i1> %230, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %231
  ret <2 x double> %232
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #6
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = bitcast <2 x double> %18 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -134217728, i64 -134217728>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fsub <2 x double> %18, %27
  %29 = fmul <2 x double> %18, %18
  %30 = fmul <2 x double> %27, %27
  %31 = bitcast <2 x double> %29 to <2 x i64>
  %32 = xor <2 x i64> %31, <i64 -9223372036854775808, i64 -9223372036854775808>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fadd <2 x double> %27, %27
  %35 = fmul <2 x double> %34, %28
  %36 = fmul <2 x double> %28, %28
  %37 = fadd <2 x double> %24, %24
  %38 = fmul <2 x double> %18, %37
  %39 = fadd <2 x double> %30, %33
  %40 = fadd <2 x double> %39, %35
  %41 = fadd <2 x double> %36, %40
  %42 = fadd <2 x double> %38, %41
  %43 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = fsub <2 x double> %29, %44
  %46 = fmul <2 x double> %29, %29
  %47 = fmul <2 x double> %44, %44
  %48 = bitcast <2 x double> %46 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372036854775808, i64 -9223372036854775808>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fadd <2 x double> %44, %44
  %52 = fmul <2 x double> %51, %45
  %53 = fmul <2 x double> %45, %45
  %54 = fadd <2 x double> %42, %42
  %55 = fmul <2 x double> %29, %54
  %56 = fadd <2 x double> %47, %50
  %57 = fadd <2 x double> %56, %52
  %58 = fadd <2 x double> %53, %57
  %59 = fadd <2 x double> %58, %55
  %60 = fmul <2 x double> %46, %46
  %61 = fmul <2 x double> %18, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %62 = fadd <2 x double> %61, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %63 = fmul <2 x double> %18, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %64 = fadd <2 x double> %63, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %65 = fmul <2 x double> %18, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %66 = fadd <2 x double> %65, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %67 = fmul <2 x double> %29, %64
  %68 = fadd <2 x double> %66, %67
  %69 = fmul <2 x double> %18, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %70 = fadd <2 x double> %69, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %71 = fmul <2 x double> %18, <double 0x3F81111111111119, double 0x3F81111111111119>
  %72 = fadd <2 x double> %71, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %73 = fmul <2 x double> %29, %70
  %74 = fadd <2 x double> %72, %73
  %75 = fmul <2 x double> %46, %68
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %62, %60
  %78 = fadd <2 x double> %77, %76
  %79 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %80 = fmul <2 x double> %27, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %81 = bitcast <2 x double> %79 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %28, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %85 = fmul <2 x double> %27, <double 0x3E25555554000000, double 0x3E25555554000000>
  %86 = fmul <2 x double> %28, <double 0x3E25555554000000, double 0x3E25555554000000>
  %87 = fmul <2 x double> %24, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %88 = fadd <2 x double> %80, %83
  %89 = fadd <2 x double> %84, %88
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %79, <double 5.000000e-01, double 5.000000e-01>
  %94 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %93
  %95 = fadd <2 x double> %79, %94
  %96 = fadd <2 x double> %95, %92
  %97 = bitcast <2 x double> %93 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -134217728, i64 -134217728>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fsub <2 x double> %93, %99
  %101 = fmul <2 x double> %18, %93
  %102 = fmul <2 x double> %27, %99
  %103 = bitcast <2 x double> %101 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -9223372036854775808, i64 -9223372036854775808>
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fmul <2 x double> %100, %27
  %107 = fmul <2 x double> %28, %99
  %108 = fmul <2 x double> %28, %100
  %109 = fmul <2 x double> %93, %24
  %110 = fmul <2 x double> %18, %96
  %111 = fadd <2 x double> %102, %105
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %101, <double 1.000000e+00, double 1.000000e+00>
  %118 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %119 = fadd <2 x double> %101, %118
  %120 = fadd <2 x double> %119, %116
  %121 = bitcast <2 x double> %117 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 -134217728, i64 -134217728>
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fsub <2 x double> %117, %123
  %125 = fmul <2 x double> %18, %117
  %126 = fmul <2 x double> %27, %123
  %127 = bitcast <2 x double> %125 to <2 x i64>
  %128 = xor <2 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fmul <2 x double> %124, %27
  %131 = fmul <2 x double> %28, %123
  %132 = fmul <2 x double> %28, %124
  %133 = fmul <2 x double> %117, %24
  %134 = fmul <2 x double> %18, %120
  %135 = fadd <2 x double> %126, %129
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %131, %136
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %139, %134
  %141 = fadd <2 x double> %125, <double 1.000000e+00, double 1.000000e+00>
  %142 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %141
  %143 = fadd <2 x double> %125, %142
  %144 = fadd <2 x double> %143, %140
  %145 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %46, %146
  %148 = bitcast <2 x double> %78 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %78, %150
  %152 = fmul <2 x double> %46, %78
  %153 = fmul <2 x double> %146, %150
  %154 = bitcast <2 x double> %152 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = bitcast <2 x i64> %155 to <2 x double>
  %157 = fmul <2 x double> %147, %150
  %158 = fmul <2 x double> %151, %146
  %159 = fmul <2 x double> %147, %151
  %160 = fmul <2 x double> %78, %59
  %161 = fadd <2 x double> %153, %156
  %162 = fadd <2 x double> %157, %161
  %163 = fadd <2 x double> %158, %162
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %141, %152
  %167 = fsub <2 x double> %141, %166
  %168 = fadd <2 x double> %152, %167
  %169 = fadd <2 x double> %168, %144
  %170 = fadd <2 x double> %165, %169
  %171 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %172 = add <4 x i32> %171, <i32 1023, i32 1023, i32 undef, i32 0>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %174 = and <4 x i32> %173, <i32 0, i32 -1, i32 0, i32 -1>
  %175 = shl <4 x i32> %174, <i32 20, i32 20, i32 20, i32 20>
  %176 = bitcast <4 x i32> %175 to <2 x double>
  %177 = fmul <2 x double> %166, %176
  %178 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 0>
  %179 = sub <4 x i32> %178, %171
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %181 = and <4 x i32> %180, <i32 0, i32 -1, i32 0, i32 -1>
  %182 = shl <4 x i32> %181, <i32 20, i32 20, i32 20, i32 20>
  %183 = bitcast <4 x i32> %182 to <2 x double>
  %184 = fmul <2 x double> %177, %183
  %185 = fmul <2 x double> %170, %176
  %186 = fmul <2 x double> %185, %183
  %187 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %188 = bitcast <2 x double> %184 to <2 x i64>
  %189 = sext <2 x i1> %187 to <2 x i64>
  %190 = and <2 x i64> %188, %189
  %191 = bitcast <2 x double> %186 to <2 x i64>
  %192 = and <2 x i64> %191, %189
  %193 = bitcast <2 x i64> %190 to <2 x double>
  %194 = bitcast <2 x i64> %192 to <2 x double>
  %195 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %193
  %196 = and <2 x i64> %190, <i64 -134217728, i64 -134217728>
  %197 = bitcast <2 x i64> %196 to <2 x double>
  %198 = fsub <2 x double> %193, %197
  %199 = bitcast <2 x double> %195 to <2 x i64>
  %200 = and <2 x i64> %199, <i64 -134217728, i64 -134217728>
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fsub <2 x double> %195, %201
  %203 = fmul <2 x double> %197, %201
  %204 = fmul <2 x double> %202, %197
  %205 = fmul <2 x double> %198, %201
  %206 = fmul <2 x double> %198, %202
  %207 = fmul <2 x double> %195, %194
  %208 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %203
  %209 = fsub <2 x double> %208, %204
  %210 = fsub <2 x double> %209, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fmul <2 x double> %195, %212
  %214 = fadd <2 x double> %195, %193
  %215 = fsub <2 x double> %193, %214
  %216 = fadd <2 x double> %195, %215
  %217 = fadd <2 x double> %216, %194
  %218 = fadd <2 x double> %217, %213
  %219 = fadd <2 x double> %214, %218
  %220 = fmul <2 x double> %219, <double 5.000000e-01, double 5.000000e-01>
  %221 = fcmp ogt <2 x double> %4, <double 7.100000e+02, double 7.100000e+02>
  %222 = fcmp uno <2 x double> %220, zeroinitializer
  %223 = or <2 x i1> %222, %221
  %224 = sext <2 x i1> %223 to <2 x i64>
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %220, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %225) #6
  %227 = fcmp uno <2 x double> %0, zeroinitializer
  %228 = select <2 x i1> %227, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %226
  ret <2 x double> %228
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, zeroinitializer
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #6
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %9, %4
  %11 = fsub <2 x double> %10, %4
  %12 = fsub <2 x double> %10, %11
  %13 = fsub <2 x double> %4, %12
  %14 = fsub <2 x double> %9, %11
  %15 = fadd <2 x double> %14, %13
  %16 = fadd <2 x double> %15, zeroinitializer
  %17 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %18 = fadd <2 x double> %17, %10
  %19 = fsub <2 x double> %18, %10
  %20 = fsub <2 x double> %18, %19
  %21 = fsub <2 x double> %10, %20
  %22 = fsub <2 x double> %17, %19
  %23 = fadd <2 x double> %22, %21
  %24 = fadd <2 x double> %23, %16
  %25 = bitcast <2 x double> %18 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 -134217728, i64 -134217728>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = fsub <2 x double> %18, %27
  %29 = fmul <2 x double> %18, %18
  %30 = fmul <2 x double> %27, %27
  %31 = bitcast <2 x double> %29 to <2 x i64>
  %32 = xor <2 x i64> %31, <i64 -9223372036854775808, i64 -9223372036854775808>
  %33 = bitcast <2 x i64> %32 to <2 x double>
  %34 = fadd <2 x double> %27, %27
  %35 = fmul <2 x double> %34, %28
  %36 = fmul <2 x double> %28, %28
  %37 = fadd <2 x double> %24, %24
  %38 = fmul <2 x double> %18, %37
  %39 = fadd <2 x double> %30, %33
  %40 = fadd <2 x double> %39, %35
  %41 = fadd <2 x double> %36, %40
  %42 = fadd <2 x double> %38, %41
  %43 = and <2 x i64> %31, <i64 -134217728, i64 -134217728>
  %44 = bitcast <2 x i64> %43 to <2 x double>
  %45 = fsub <2 x double> %29, %44
  %46 = fmul <2 x double> %29, %29
  %47 = fmul <2 x double> %44, %44
  %48 = bitcast <2 x double> %46 to <2 x i64>
  %49 = xor <2 x i64> %48, <i64 -9223372036854775808, i64 -9223372036854775808>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fadd <2 x double> %44, %44
  %52 = fmul <2 x double> %51, %45
  %53 = fmul <2 x double> %45, %45
  %54 = fadd <2 x double> %42, %42
  %55 = fmul <2 x double> %29, %54
  %56 = fadd <2 x double> %47, %50
  %57 = fadd <2 x double> %56, %52
  %58 = fadd <2 x double> %53, %57
  %59 = fadd <2 x double> %58, %55
  %60 = fmul <2 x double> %46, %46
  %61 = fmul <2 x double> %18, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %62 = fadd <2 x double> %61, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %63 = fmul <2 x double> %18, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %64 = fadd <2 x double> %63, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %65 = fmul <2 x double> %18, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %66 = fadd <2 x double> %65, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %67 = fmul <2 x double> %29, %64
  %68 = fadd <2 x double> %66, %67
  %69 = fmul <2 x double> %18, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %70 = fadd <2 x double> %69, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %71 = fmul <2 x double> %18, <double 0x3F81111111111119, double 0x3F81111111111119>
  %72 = fadd <2 x double> %71, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %73 = fmul <2 x double> %29, %70
  %74 = fadd <2 x double> %72, %73
  %75 = fmul <2 x double> %46, %68
  %76 = fadd <2 x double> %74, %75
  %77 = fmul <2 x double> %62, %60
  %78 = fadd <2 x double> %77, %76
  %79 = fmul <2 x double> %18, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %80 = fmul <2 x double> %27, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %81 = bitcast <2 x double> %79 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %28, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %85 = fmul <2 x double> %27, <double 0x3E25555554000000, double 0x3E25555554000000>
  %86 = fmul <2 x double> %28, <double 0x3E25555554000000, double 0x3E25555554000000>
  %87 = fmul <2 x double> %24, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %88 = fadd <2 x double> %80, %83
  %89 = fadd <2 x double> %84, %88
  %90 = fadd <2 x double> %85, %89
  %91 = fadd <2 x double> %86, %90
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %79, <double 5.000000e-01, double 5.000000e-01>
  %94 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %93
  %95 = fadd <2 x double> %79, %94
  %96 = fadd <2 x double> %95, %92
  %97 = bitcast <2 x double> %93 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -134217728, i64 -134217728>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fsub <2 x double> %93, %99
  %101 = fmul <2 x double> %18, %93
  %102 = fmul <2 x double> %27, %99
  %103 = bitcast <2 x double> %101 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -9223372036854775808, i64 -9223372036854775808>
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fmul <2 x double> %100, %27
  %107 = fmul <2 x double> %28, %99
  %108 = fmul <2 x double> %28, %100
  %109 = fmul <2 x double> %93, %24
  %110 = fmul <2 x double> %18, %96
  %111 = fadd <2 x double> %102, %105
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %108, %113
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %101, <double 1.000000e+00, double 1.000000e+00>
  %118 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %117
  %119 = fadd <2 x double> %101, %118
  %120 = fadd <2 x double> %119, %116
  %121 = bitcast <2 x double> %117 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 -134217728, i64 -134217728>
  %123 = bitcast <2 x i64> %122 to <2 x double>
  %124 = fsub <2 x double> %117, %123
  %125 = fmul <2 x double> %18, %117
  %126 = fmul <2 x double> %27, %123
  %127 = bitcast <2 x double> %125 to <2 x i64>
  %128 = xor <2 x i64> %127, <i64 -9223372036854775808, i64 -9223372036854775808>
  %129 = bitcast <2 x i64> %128 to <2 x double>
  %130 = fmul <2 x double> %124, %27
  %131 = fmul <2 x double> %28, %123
  %132 = fmul <2 x double> %28, %124
  %133 = fmul <2 x double> %117, %24
  %134 = fmul <2 x double> %18, %120
  %135 = fadd <2 x double> %126, %129
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %131, %136
  %138 = fadd <2 x double> %132, %137
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %139, %134
  %141 = fadd <2 x double> %125, <double 1.000000e+00, double 1.000000e+00>
  %142 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %141
  %143 = fadd <2 x double> %125, %142
  %144 = fadd <2 x double> %143, %140
  %145 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %46, %146
  %148 = bitcast <2 x double> %78 to <2 x i64>
  %149 = and <2 x i64> %148, <i64 -134217728, i64 -134217728>
  %150 = bitcast <2 x i64> %149 to <2 x double>
  %151 = fsub <2 x double> %78, %150
  %152 = fmul <2 x double> %46, %78
  %153 = fmul <2 x double> %146, %150
  %154 = bitcast <2 x double> %152 to <2 x i64>
  %155 = xor <2 x i64> %154, <i64 -9223372036854775808, i64 -9223372036854775808>
  %156 = bitcast <2 x i64> %155 to <2 x double>
  %157 = fmul <2 x double> %147, %150
  %158 = fmul <2 x double> %151, %146
  %159 = fmul <2 x double> %147, %151
  %160 = fmul <2 x double> %78, %59
  %161 = fadd <2 x double> %153, %156
  %162 = fadd <2 x double> %157, %161
  %163 = fadd <2 x double> %158, %162
  %164 = fadd <2 x double> %159, %163
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %141, %152
  %167 = fsub <2 x double> %141, %166
  %168 = fadd <2 x double> %152, %167
  %169 = fadd <2 x double> %168, %144
  %170 = fadd <2 x double> %165, %169
  %171 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %172 = add <4 x i32> %171, <i32 1023, i32 1023, i32 undef, i32 0>
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %174 = and <4 x i32> %173, <i32 0, i32 -1, i32 0, i32 -1>
  %175 = shl <4 x i32> %174, <i32 20, i32 20, i32 20, i32 20>
  %176 = bitcast <4 x i32> %175 to <2 x double>
  %177 = fmul <2 x double> %166, %176
  %178 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 0>
  %179 = sub <4 x i32> %178, %171
  %180 = shufflevector <4 x i32> %179, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %181 = and <4 x i32> %180, <i32 0, i32 -1, i32 0, i32 -1>
  %182 = shl <4 x i32> %181, <i32 20, i32 20, i32 20, i32 20>
  %183 = bitcast <4 x i32> %182 to <2 x double>
  %184 = fmul <2 x double> %177, %183
  %185 = fmul <2 x double> %170, %176
  %186 = fmul <2 x double> %185, %183
  %187 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %188 = bitcast <2 x double> %184 to <2 x i64>
  %189 = sext <2 x i1> %187 to <2 x i64>
  %190 = and <2 x i64> %188, %189
  %191 = bitcast <2 x double> %186 to <2 x i64>
  %192 = and <2 x i64> %191, %189
  %193 = bitcast <2 x i64> %190 to <2 x double>
  %194 = bitcast <2 x i64> %192 to <2 x double>
  %195 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %193
  %196 = and <2 x i64> %190, <i64 -134217728, i64 -134217728>
  %197 = bitcast <2 x i64> %196 to <2 x double>
  %198 = fsub <2 x double> %193, %197
  %199 = bitcast <2 x double> %195 to <2 x i64>
  %200 = and <2 x i64> %199, <i64 -134217728, i64 -134217728>
  %201 = bitcast <2 x i64> %200 to <2 x double>
  %202 = fsub <2 x double> %195, %201
  %203 = fmul <2 x double> %197, %201
  %204 = fmul <2 x double> %202, %197
  %205 = fmul <2 x double> %198, %201
  %206 = fmul <2 x double> %198, %202
  %207 = fmul <2 x double> %195, %194
  %208 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %203
  %209 = fsub <2 x double> %208, %204
  %210 = fsub <2 x double> %209, %205
  %211 = fsub <2 x double> %210, %206
  %212 = fsub <2 x double> %211, %207
  %213 = fmul <2 x double> %195, %212
  %214 = xor <2 x i64> %199, <i64 -9223372036854775808, i64 -9223372036854775808>
  %215 = bitcast <2 x double> %213 to <2 x i64>
  %216 = xor <2 x i64> %215, <i64 -9223372036854775808, i64 -9223372036854775808>
  %217 = bitcast <2 x i64> %214 to <2 x double>
  %218 = bitcast <2 x i64> %216 to <2 x double>
  %219 = fadd <2 x double> %193, %217
  %220 = fsub <2 x double> %219, %193
  %221 = fsub <2 x double> %219, %220
  %222 = fsub <2 x double> %193, %221
  %223 = fsub <2 x double> %217, %220
  %224 = fadd <2 x double> %223, %222
  %225 = fadd <2 x double> %194, %218
  %226 = fadd <2 x double> %224, %225
  %227 = fadd <2 x double> %195, %193
  %228 = fsub <2 x double> %227, %193
  %229 = fsub <2 x double> %227, %228
  %230 = fsub <2 x double> %193, %229
  %231 = fsub <2 x double> %195, %228
  %232 = fadd <2 x double> %231, %230
  %233 = fadd <2 x double> %213, %194
  %234 = fadd <2 x double> %232, %233
  %235 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %227
  %236 = bitcast <2 x double> %227 to <2 x i64>
  %237 = and <2 x i64> %236, <i64 -134217728, i64 -134217728>
  %238 = bitcast <2 x i64> %237 to <2 x double>
  %239 = fsub <2 x double> %227, %238
  %240 = bitcast <2 x double> %235 to <2 x i64>
  %241 = and <2 x i64> %240, <i64 -134217728, i64 -134217728>
  %242 = bitcast <2 x i64> %241 to <2 x double>
  %243 = fsub <2 x double> %235, %242
  %244 = bitcast <2 x double> %219 to <2 x i64>
  %245 = and <2 x i64> %244, <i64 -134217728, i64 -134217728>
  %246 = bitcast <2 x i64> %245 to <2 x double>
  %247 = fsub <2 x double> %219, %246
  %248 = fmul <2 x double> %235, %219
  %249 = fmul <2 x double> %242, %246
  %250 = fsub <2 x double> %249, %248
  %251 = fmul <2 x double> %243, %246
  %252 = fmul <2 x double> %247, %242
  %253 = fmul <2 x double> %243, %247
  %254 = fmul <2 x double> %238, %242
  %255 = fmul <2 x double> %243, %238
  %256 = fmul <2 x double> %239, %242
  %257 = fmul <2 x double> %239, %243
  %258 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %254
  %259 = fsub <2 x double> %258, %255
  %260 = fsub <2 x double> %259, %256
  %261 = fsub <2 x double> %260, %257
  %262 = fmul <2 x double> %248, %261
  %263 = fadd <2 x double> %251, %250
  %264 = fadd <2 x double> %252, %263
  %265 = fadd <2 x double> %253, %264
  %266 = fadd <2 x double> %262, %265
  %267 = fmul <2 x double> %248, %234
  %268 = fsub <2 x double> %226, %267
  %269 = fmul <2 x double> %235, %268
  %270 = fadd <2 x double> %266, %269
  %271 = fadd <2 x double> %248, %270
  %272 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %273 = fcmp uno <2 x double> %271, zeroinitializer
  %274 = or <2 x i1> %273, %272
  %275 = sext <2 x i1> %274 to <2 x i64>
  %276 = bitcast <2 x i64> %275 to <2 x double>
  %277 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %271, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %276) #6
  %278 = bitcast <2 x double> %277 to <2 x i64>
  %279 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %280 = xor <2 x i64> %279, %278
  %281 = fcmp uno <2 x double> %0, zeroinitializer
  %282 = bitcast <2 x i64> %280 to <2 x double>
  %283 = select <2 x i1> %281, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %282
  ret <2 x double> %283
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sinhd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = fmul <2 x double> %6, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %9 = fadd <2 x double> %8, %4
  %10 = fmul <2 x double> %6, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %11 = fadd <2 x double> %10, %9
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %11, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %16 = fadd <2 x double> %15, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %17 = fmul <2 x double> %11, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %18 = fadd <2 x double> %17, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %19 = fmul <2 x double> %11, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %20 = fadd <2 x double> %19, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %21 = fmul <2 x double> %12, %18
  %22 = fadd <2 x double> %20, %21
  %23 = fmul <2 x double> %11, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %24 = fadd <2 x double> %23, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %25 = fmul <2 x double> %11, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %26 = fadd <2 x double> %25, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %27 = fmul <2 x double> %12, %24
  %28 = fadd <2 x double> %26, %27
  %29 = fmul <2 x double> %13, %22
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %16, %14
  %32 = fadd <2 x double> %31, %30
  %33 = fmul <2 x double> %11, %12
  %34 = fmul <2 x double> %33, %32
  %35 = fmul <2 x double> %12, <double 5.000000e-01, double 5.000000e-01>
  %36 = fadd <2 x double> %35, %34
  %37 = fadd <2 x double> %11, %36
  %38 = icmp eq <4 x i32> %7, zeroinitializer
  %39 = sext <4 x i1> %38 to <4 x i32>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %41 = fadd <2 x double> %37, <double 1.000000e+00, double 1.000000e+00>
  %42 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %43 = add <4 x i32> %42, <i32 1023, i32 1023, i32 undef, i32 0>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %45 = and <4 x i32> %44, <i32 0, i32 -1, i32 0, i32 -1>
  %46 = shl <4 x i32> %45, <i32 20, i32 20, i32 20, i32 20>
  %47 = bitcast <4 x i32> %46 to <2 x double>
  %48 = fmul <2 x double> %41, %47
  %49 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 0>
  %50 = sub <4 x i32> %49, %42
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %52 = and <4 x i32> %51, <i32 0, i32 -1, i32 0, i32 -1>
  %53 = shl <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <4 x i32> %53 to <2 x double>
  %55 = fmul <2 x double> %48, %54
  %56 = fadd <2 x double> %55, <double -1.000000e+00, double -1.000000e+00>
  %57 = bitcast <4 x i32> %40 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %56, <2 x double> %37, <2 x double> %57) #6
  %59 = fadd <2 x double> %58, <double 2.000000e+00, double 2.000000e+00>
  %60 = fadd <2 x double> %58, <double 1.000000e+00, double 1.000000e+00>
  %61 = fdiv <2 x double> %59, %60
  %62 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %63 = fmul <2 x double> %62, %61
  %64 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %65 = fcmp uno <2 x double> %63, zeroinitializer
  %66 = or <2 x i1> %65, %64
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %63, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %68) #6
  %70 = bitcast <2 x double> %69 to <2 x i64>
  %71 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %72 = xor <2 x i64> %71, %70
  %73 = fcmp uno <2 x double> %0, zeroinitializer
  %74 = bitcast <2 x i64> %72 to <2 x double>
  %75 = select <2 x i1> %73, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %74
  ret <2 x double> %75
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_coshd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = fmul <2 x double> %6, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %9 = fadd <2 x double> %8, %4
  %10 = fmul <2 x double> %6, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %11 = fadd <2 x double> %10, %9
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %11, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %16 = fadd <2 x double> %15, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %17 = fmul <2 x double> %11, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %18 = fadd <2 x double> %17, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %19 = fmul <2 x double> %11, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %20 = fadd <2 x double> %19, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %21 = fmul <2 x double> %12, %18
  %22 = fadd <2 x double> %20, %21
  %23 = fmul <2 x double> %11, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %24 = fadd <2 x double> %23, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %25 = fmul <2 x double> %11, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %26 = fadd <2 x double> %25, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %27 = fmul <2 x double> %12, %24
  %28 = fadd <2 x double> %26, %27
  %29 = fmul <2 x double> %13, %22
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %16, %14
  %32 = fadd <2 x double> %31, %30
  %33 = fmul <2 x double> %11, %32
  %34 = fadd <2 x double> %33, <double 5.000000e-01, double 5.000000e-01>
  %35 = fmul <2 x double> %12, %34
  %36 = fadd <2 x double> %11, %35
  %37 = fadd <2 x double> %36, <double 1.000000e+00, double 1.000000e+00>
  %38 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %39 = add <4 x i32> %38, <i32 1023, i32 1023, i32 undef, i32 0>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %41 = and <4 x i32> %40, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = fmul <2 x double> %37, %43
  %45 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 0>
  %46 = sub <4 x i32> %45, %38
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %48 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %49 = shl <4 x i32> %48, <i32 20, i32 20, i32 20, i32 20>
  %50 = bitcast <4 x i32> %49 to <2 x double>
  %51 = fmul <2 x double> %44, %50
  %52 = fcmp ogt <2 x double> %4, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %53 = sext <2 x i1> %52 to <2 x i64>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %54) #6
  %56 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %57 = select <2 x i1> %56, <2 x double> %55, <2 x double> zeroinitializer
  %58 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %57
  %59 = fmul <2 x double> %57, <double 5.000000e-01, double 5.000000e-01>
  %60 = fadd <2 x double> %59, %58
  %61 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %62 = fcmp uno <2 x double> %60, zeroinitializer
  %63 = or <2 x i1> %62, %61
  %64 = sext <2 x i1> %63 to <2 x i64>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %65) #6
  %67 = fcmp uno <2 x double> %0, zeroinitializer
  %68 = select <2 x i1> %67, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %66
  ret <2 x double> %68
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_tanhd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #6
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %5, %9
  %11 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %12 = fadd <2 x double> %11, %10
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %12, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %17 = fadd <2 x double> %16, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %18 = fmul <2 x double> %12, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %19 = fadd <2 x double> %18, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %20 = fmul <2 x double> %12, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %21 = fadd <2 x double> %20, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %22 = fmul <2 x double> %13, %19
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %12, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %25 = fadd <2 x double> %24, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %26 = fmul <2 x double> %12, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %27 = fadd <2 x double> %26, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %28 = fmul <2 x double> %13, %25
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %14, %23
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %17, %15
  %33 = fadd <2 x double> %32, %31
  %34 = fmul <2 x double> %12, %13
  %35 = fmul <2 x double> %34, %33
  %36 = fmul <2 x double> %13, <double 5.000000e-01, double 5.000000e-01>
  %37 = fadd <2 x double> %36, %35
  %38 = fadd <2 x double> %12, %37
  %39 = icmp eq <4 x i32> %8, zeroinitializer
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %42 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %43 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %44 = add <4 x i32> %43, <i32 1023, i32 1023, i32 undef, i32 0>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %42, %48
  %50 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 0>
  %51 = sub <4 x i32> %50, %43
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %53 = and <4 x i32> %52, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %54 to <2 x double>
  %56 = fmul <2 x double> %49, %55
  %57 = fadd <2 x double> %56, <double -1.000000e+00, double -1.000000e+00>
  %58 = bitcast <4 x i32> %41 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> %38, <2 x double> %58) #6
  %60 = fadd <2 x double> %59, <double 2.000000e+00, double 2.000000e+00>
  %61 = fdiv <2 x double> %59, %60
  %62 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %63 = fcmp uno <2 x double> %61, zeroinitializer
  %64 = or <2 x i1> %63, %62
  %65 = sext <2 x i1> %64 to <2 x i64>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %66) #6
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = xor <2 x i64> %69, %68
  %71 = fcmp uno <2 x double> %0, zeroinitializer
  %72 = bitcast <2 x i64> %70 to <2 x double>
  %73 = select <2 x i1> %71, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %72
  ret <2 x double> %73
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_asinhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %0
  %8 = and <2 x i64> %2, <i64 -134217728, i64 -134217728>
  %9 = bitcast <2 x i64> %8 to <2 x double>
  %10 = fsub <2 x double> %0, %9
  %11 = bitcast <2 x double> %7 to <2 x i64>
  %12 = and <2 x i64> %11, <i64 -134217728, i64 -134217728>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = fsub <2 x double> %7, %13
  %15 = fmul <2 x double> %9, %13
  %16 = fmul <2 x double> %14, %9
  %17 = fmul <2 x double> %10, %13
  %18 = fmul <2 x double> %10, %14
  %19 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %20 = fsub <2 x double> %19, %16
  %21 = fsub <2 x double> %20, %17
  %22 = fsub <2 x double> %21, %18
  %23 = fmul <2 x double> %7, %22
  %24 = bitcast <2 x i64> %6 to <2 x double>
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %7, <2 x double> %24) #6
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %23, <2 x double> %24) #6
  %27 = bitcast <2 x double> %25 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %25, %29
  %31 = fmul <2 x double> %25, %25
  %32 = fmul <2 x double> %29, %29
  %33 = bitcast <2 x double> %31 to <2 x i64>
  %34 = xor <2 x i64> %33, <i64 -9223372036854775808, i64 -9223372036854775808>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fadd <2 x double> %29, %29
  %37 = fmul <2 x double> %36, %30
  %38 = fmul <2 x double> %30, %30
  %39 = fadd <2 x double> %26, %26
  %40 = fmul <2 x double> %25, %39
  %41 = fadd <2 x double> %32, %35
  %42 = fadd <2 x double> %41, %37
  %43 = fadd <2 x double> %38, %42
  %44 = fadd <2 x double> %40, %43
  %45 = fadd <2 x double> %31, <double 1.000000e+00, double 1.000000e+00>
  %46 = fsub <2 x double> %45, %31
  %47 = fsub <2 x double> %45, %46
  %48 = fsub <2 x double> %31, %47
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %46
  %50 = fadd <2 x double> %49, %48
  %51 = fadd <2 x double> %50, %44
  %52 = fadd <2 x double> %45, %51
  %53 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %52) #6
  %54 = bitcast <2 x double> %53 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -134217728, i64 -134217728>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fsub <2 x double> %53, %56
  %58 = fmul <2 x double> %53, %53
  %59 = fmul <2 x double> %56, %56
  %60 = bitcast <2 x double> %58 to <2 x i64>
  %61 = xor <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fmul <2 x double> %57, %56
  %64 = fmul <2 x double> %57, %57
  %65 = fadd <2 x double> %59, %62
  %66 = fadd <2 x double> %63, %65
  %67 = fadd <2 x double> %63, %66
  %68 = fadd <2 x double> %64, %67
  %69 = fadd <2 x double> %45, %58
  %70 = fsub <2 x double> %69, %45
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %45, %71
  %73 = fsub <2 x double> %58, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %51, %68
  %76 = fadd <2 x double> %74, %75
  %77 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %53
  %78 = bitcast <2 x double> %77 to <2 x i64>
  %79 = and <2 x i64> %78, <i64 -134217728, i64 -134217728>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = fsub <2 x double> %77, %80
  %82 = fmul <2 x double> %56, %80
  %83 = fmul <2 x double> %81, %56
  %84 = fmul <2 x double> %57, %80
  %85 = fmul <2 x double> %57, %81
  %86 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %82
  %87 = fsub <2 x double> %86, %83
  %88 = fsub <2 x double> %87, %84
  %89 = fsub <2 x double> %88, %85
  %90 = fmul <2 x double> %77, %89
  %91 = bitcast <2 x double> %69 to <2 x i64>
  %92 = and <2 x i64> %91, <i64 -134217728, i64 -134217728>
  %93 = bitcast <2 x i64> %92 to <2 x double>
  %94 = fsub <2 x double> %69, %93
  %95 = fmul <2 x double> %77, %69
  %96 = fmul <2 x double> %80, %93
  %97 = bitcast <2 x double> %95 to <2 x i64>
  %98 = xor <2 x i64> %97, <i64 -9223372036854775808, i64 -9223372036854775808>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fmul <2 x double> %94, %80
  %101 = fmul <2 x double> %81, %93
  %102 = fmul <2 x double> %81, %94
  %103 = fmul <2 x double> %69, %90
  %104 = fmul <2 x double> %77, %76
  %105 = fadd <2 x double> %96, %99
  %106 = fadd <2 x double> %100, %105
  %107 = fadd <2 x double> %101, %106
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %108, %103
  %110 = fadd <2 x double> %104, %109
  %111 = fmul <2 x double> %95, <double 5.000000e-01, double 5.000000e-01>
  %112 = fmul <2 x double> %110, <double 5.000000e-01, double 5.000000e-01>
  %113 = bitcast <2 x double> %111 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 -134217728, i64 -134217728>
  %115 = bitcast <2 x i64> %114 to <2 x double>
  %116 = fsub <2 x double> %111, %115
  %117 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %118 = bitcast <2 x i64> %117 to <2 x double>
  %119 = fsub <2 x double> %4, %118
  %120 = fmul <2 x double> %111, %4
  %121 = fmul <2 x double> %118, %115
  %122 = bitcast <2 x double> %120 to <2 x i64>
  %123 = xor <2 x i64> %122, <i64 -9223372036854775808, i64 -9223372036854775808>
  %124 = bitcast <2 x i64> %123 to <2 x double>
  %125 = fmul <2 x double> %116, %118
  %126 = fmul <2 x double> %119, %115
  %127 = fmul <2 x double> %119, %116
  %128 = fmul <2 x double> %112, %4
  %129 = fadd <2 x double> %121, %124
  %130 = fadd <2 x double> %125, %129
  %131 = fadd <2 x double> %126, %130
  %132 = fadd <2 x double> %127, %131
  %133 = fadd <2 x double> %132, %128
  %134 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %111, <2 x double> %120, <2 x double> %24) #6
  %135 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %112, <2 x double> %133, <2 x double> %24) #6
  %136 = fadd <2 x double> %134, %0
  %137 = fsub <2 x double> %136, %134
  %138 = fsub <2 x double> %136, %137
  %139 = fsub <2 x double> %134, %138
  %140 = fsub <2 x double> %0, %137
  %141 = fadd <2 x double> %140, %139
  %142 = fadd <2 x double> %135, %141
  %143 = fadd <2 x double> %136, %142
  %144 = fsub <2 x double> %136, %143
  %145 = fadd <2 x double> %142, %144
  %146 = fmul <2 x double> %143, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %147 = fcmp olt <2 x double> %146, <double 0x2D30000000000000, double 0x2D30000000000000>
  %148 = sext <2 x i1> %147 to <2 x i64>
  %149 = fmul <2 x double> %146, <double 0x52B0000000000000, double 0x52B0000000000000>
  %150 = bitcast <2 x i64> %148 to <2 x double>
  %151 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %146, <2 x double> %149, <2 x double> %150) #6
  %152 = bitcast <2 x double> %151 to <4 x i32>
  %153 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %154 = and <4 x i32> %153, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %155 = lshr exact <4 x i32> %154, <i32 20, i32 20, i32 20, i32 20>
  %156 = bitcast <2 x i64> %148 to <4 x i32>
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %158 = bitcast <4 x i32> %157 to <16 x i8>
  %159 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %158) #6
  %160 = bitcast <16 x i8> %159 to <4 x i32>
  %161 = sub <4 x i32> %155, %160
  %162 = sub <4 x i32> zeroinitializer, %161
  %163 = ashr <4 x i32> %162, <i32 1, i32 1, i32 1, i32 1>
  %164 = add <4 x i32> %163, <i32 1023, i32 1023, i32 undef, i32 0>
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %166 = and <4 x i32> %165, <i32 0, i32 -1, i32 0, i32 -1>
  %167 = shl <4 x i32> %166, <i32 20, i32 20, i32 20, i32 20>
  %168 = bitcast <4 x i32> %167 to <2 x double>
  %169 = fmul <2 x double> %143, %168
  %170 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %161
  %171 = sub <4 x i32> %170, %163
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %173 = and <4 x i32> %172, <i32 0, i32 -1, i32 0, i32 -1>
  %174 = shl <4 x i32> %173, <i32 20, i32 20, i32 20, i32 20>
  %175 = bitcast <4 x i32> %174 to <2 x double>
  %176 = fmul <2 x double> %169, %175
  %177 = fmul <2 x double> %145, %168
  %178 = fmul <2 x double> %177, %175
  %179 = fadd <2 x double> %176, <double -1.000000e+00, double -1.000000e+00>
  %180 = fsub <2 x double> %179, %176
  %181 = fsub <2 x double> %179, %180
  %182 = fsub <2 x double> %176, %181
  %183 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %180
  %184 = fadd <2 x double> %183, %182
  %185 = fadd <2 x double> %178, %184
  %186 = fadd <2 x double> %176, <double 1.000000e+00, double 1.000000e+00>
  %187 = fsub <2 x double> %186, %176
  %188 = fsub <2 x double> %186, %187
  %189 = fsub <2 x double> %176, %188
  %190 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %187
  %191 = fadd <2 x double> %190, %189
  %192 = fadd <2 x double> %178, %191
  %193 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %186
  %194 = bitcast <2 x double> %186 to <2 x i64>
  %195 = and <2 x i64> %194, <i64 -134217728, i64 -134217728>
  %196 = bitcast <2 x i64> %195 to <2 x double>
  %197 = fsub <2 x double> %186, %196
  %198 = bitcast <2 x double> %193 to <2 x i64>
  %199 = and <2 x i64> %198, <i64 -134217728, i64 -134217728>
  %200 = bitcast <2 x i64> %199 to <2 x double>
  %201 = fsub <2 x double> %193, %200
  %202 = bitcast <2 x double> %179 to <2 x i64>
  %203 = and <2 x i64> %202, <i64 -134217728, i64 -134217728>
  %204 = bitcast <2 x i64> %203 to <2 x double>
  %205 = fsub <2 x double> %179, %204
  %206 = fmul <2 x double> %179, %193
  %207 = fmul <2 x double> %204, %200
  %208 = fsub <2 x double> %207, %206
  %209 = fmul <2 x double> %201, %204
  %210 = fmul <2 x double> %205, %200
  %211 = fmul <2 x double> %205, %201
  %212 = fmul <2 x double> %196, %200
  %213 = fmul <2 x double> %201, %196
  %214 = fmul <2 x double> %197, %200
  %215 = fmul <2 x double> %197, %201
  %216 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %212
  %217 = fsub <2 x double> %216, %213
  %218 = fsub <2 x double> %217, %214
  %219 = fsub <2 x double> %218, %215
  %220 = fmul <2 x double> %206, %219
  %221 = fadd <2 x double> %208, %209
  %222 = fadd <2 x double> %210, %221
  %223 = fadd <2 x double> %211, %222
  %224 = fadd <2 x double> %223, %220
  %225 = fmul <2 x double> %206, %192
  %226 = fsub <2 x double> %185, %225
  %227 = fmul <2 x double> %193, %226
  %228 = fadd <2 x double> %227, %224
  %229 = bitcast <2 x double> %206 to <2 x i64>
  %230 = and <2 x i64> %229, <i64 -134217728, i64 -134217728>
  %231 = bitcast <2 x i64> %230 to <2 x double>
  %232 = fsub <2 x double> %206, %231
  %233 = fmul <2 x double> %206, %206
  %234 = fmul <2 x double> %231, %231
  %235 = bitcast <2 x double> %233 to <2 x i64>
  %236 = xor <2 x i64> %235, <i64 -9223372036854775808, i64 -9223372036854775808>
  %237 = bitcast <2 x i64> %236 to <2 x double>
  %238 = fadd <2 x double> %231, %231
  %239 = fmul <2 x double> %238, %232
  %240 = fmul <2 x double> %232, %232
  %241 = fadd <2 x double> %228, %228
  %242 = fmul <2 x double> %206, %241
  %243 = fadd <2 x double> %234, %237
  %244 = fadd <2 x double> %243, %239
  %245 = fadd <2 x double> %240, %244
  %246 = fadd <2 x double> %245, %242
  %247 = fmul <2 x double> %233, %233
  %248 = fmul <2 x double> %247, %247
  %249 = fmul <2 x double> %233, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %250 = fadd <2 x double> %249, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %251 = fmul <2 x double> %247, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %252 = fadd <2 x double> %251, %250
  %253 = fmul <2 x double> %233, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %254 = fadd <2 x double> %253, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %255 = fmul <2 x double> %233, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %256 = fadd <2 x double> %255, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %257 = fmul <2 x double> %247, %254
  %258 = fadd <2 x double> %256, %257
  %259 = fmul <2 x double> %248, %252
  %260 = fadd <2 x double> %259, %258
  %261 = fmul <2 x double> %233, %260
  %262 = fadd <2 x double> %261, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %263 = shufflevector <4 x i32> %161, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %264 = sitofp <2 x i32> %263 to <2 x double>
  %265 = bitcast <2 x double> %264 to <2 x i64>
  %266 = and <2 x i64> %265, <i64 -134217728, i64 -134217728>
  %267 = bitcast <2 x i64> %266 to <2 x double>
  %268 = fsub <2 x double> %264, %267
  %269 = fmul <2 x double> %264, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %270 = fmul <2 x double> %267, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %271 = bitcast <2 x double> %269 to <2 x i64>
  %272 = xor <2 x i64> %271, <i64 -9223372036854775808, i64 -9223372036854775808>
  %273 = bitcast <2 x i64> %272 to <2 x double>
  %274 = fmul <2 x double> %267, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %275 = fmul <2 x double> %268, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %276 = fmul <2 x double> %268, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %277 = fmul <2 x double> %264, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %278 = fadd <2 x double> %270, %273
  %279 = fadd <2 x double> %274, %278
  %280 = fadd <2 x double> %275, %279
  %281 = fadd <2 x double> %276, %280
  %282 = fadd <2 x double> %277, %281
  %283 = fmul <2 x double> %206, <double 2.000000e+00, double 2.000000e+00>
  %284 = fmul <2 x double> %228, <double 2.000000e+00, double 2.000000e+00>
  %285 = fadd <2 x double> %269, %283
  %286 = fsub <2 x double> %269, %285
  %287 = fadd <2 x double> %283, %286
  %288 = fadd <2 x double> %282, %287
  %289 = fadd <2 x double> %288, %284
  %290 = and <2 x i64> %235, <i64 -134217728, i64 -134217728>
  %291 = bitcast <2 x i64> %290 to <2 x double>
  %292 = fsub <2 x double> %233, %291
  %293 = fmul <2 x double> %206, %233
  %294 = fmul <2 x double> %231, %291
  %295 = bitcast <2 x double> %293 to <2 x i64>
  %296 = xor <2 x i64> %295, <i64 -9223372036854775808, i64 -9223372036854775808>
  %297 = bitcast <2 x i64> %296 to <2 x double>
  %298 = fmul <2 x double> %292, %231
  %299 = fmul <2 x double> %232, %291
  %300 = fmul <2 x double> %232, %292
  %301 = fmul <2 x double> %233, %228
  %302 = fmul <2 x double> %206, %246
  %303 = fadd <2 x double> %294, %297
  %304 = fadd <2 x double> %298, %303
  %305 = fadd <2 x double> %299, %304
  %306 = fadd <2 x double> %300, %305
  %307 = fadd <2 x double> %306, %301
  %308 = fadd <2 x double> %307, %302
  %309 = and <2 x i64> %295, <i64 -134217728, i64 -134217728>
  %310 = bitcast <2 x i64> %309 to <2 x double>
  %311 = fsub <2 x double> %293, %310
  %312 = bitcast <2 x double> %262 to <2 x i64>
  %313 = and <2 x i64> %312, <i64 -134217728, i64 -134217728>
  %314 = bitcast <2 x i64> %313 to <2 x double>
  %315 = fsub <2 x double> %262, %314
  %316 = fmul <2 x double> %293, %262
  %317 = fmul <2 x double> %310, %314
  %318 = bitcast <2 x double> %316 to <2 x i64>
  %319 = xor <2 x i64> %318, <i64 -9223372036854775808, i64 -9223372036854775808>
  %320 = bitcast <2 x i64> %319 to <2 x double>
  %321 = fmul <2 x double> %311, %314
  %322 = fmul <2 x double> %315, %310
  %323 = fmul <2 x double> %311, %315
  %324 = fmul <2 x double> %262, %308
  %325 = fadd <2 x double> %317, %320
  %326 = fadd <2 x double> %321, %325
  %327 = fadd <2 x double> %322, %326
  %328 = fadd <2 x double> %323, %327
  %329 = fadd <2 x double> %324, %328
  %330 = fadd <2 x double> %285, %316
  %331 = fsub <2 x double> %285, %330
  %332 = fadd <2 x double> %316, %331
  %333 = fadd <2 x double> %332, %289
  %334 = fadd <2 x double> %333, %329
  %335 = fadd <2 x double> %330, %334
  %336 = fcmp ogt <2 x double> %4, <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>
  %337 = fcmp uno <2 x double> %335, zeroinitializer
  %338 = or <2 x i1> %337, %336
  %339 = sext <2 x i1> %338 to <2 x i64>
  %340 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %341 = or <2 x i64> %340, <i64 9218868437227405312, i64 9218868437227405312>
  %342 = bitcast <2 x i64> %341 to <2 x double>
  %343 = bitcast <2 x i64> %339 to <2 x double>
  %344 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %335, <2 x double> %342, <2 x double> %343) #6
  %345 = fcmp uno <2 x double> %0, zeroinitializer
  %346 = select <2 x i1> %345, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %344
  %347 = icmp eq <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %348 = sext <2 x i1> %347 to <2 x i64>
  %349 = bitcast <2 x i64> %348 to <2 x double>
  %350 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %346, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %349) #6
  ret <2 x double> %350
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_acoshd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fsub <2 x double> %2, %0
  %4 = fsub <2 x double> %2, %3
  %5 = fsub <2 x double> %0, %4
  %6 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %3
  %7 = fadd <2 x double> %6, %5
  %8 = fadd <2 x double> %2, %7
  %9 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -134217728, i64 -134217728>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fsub <2 x double> %9, %12
  %14 = fmul <2 x double> %9, %9
  %15 = fmul <2 x double> %12, %12
  %16 = bitcast <2 x double> %14 to <2 x i64>
  %17 = xor <2 x i64> %16, <i64 -9223372036854775808, i64 -9223372036854775808>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fmul <2 x double> %13, %12
  %20 = fmul <2 x double> %13, %13
  %21 = fadd <2 x double> %15, %18
  %22 = fadd <2 x double> %19, %21
  %23 = fadd <2 x double> %19, %22
  %24 = fadd <2 x double> %20, %23
  %25 = fadd <2 x double> %2, %14
  %26 = fsub <2 x double> %25, %2
  %27 = fsub <2 x double> %25, %26
  %28 = fsub <2 x double> %2, %27
  %29 = fsub <2 x double> %14, %26
  %30 = fadd <2 x double> %29, %28
  %31 = fadd <2 x double> %7, %24
  %32 = fadd <2 x double> %30, %31
  %33 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %9
  %34 = bitcast <2 x double> %33 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 -134217728, i64 -134217728>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = fsub <2 x double> %33, %36
  %38 = fmul <2 x double> %12, %36
  %39 = fmul <2 x double> %37, %12
  %40 = fmul <2 x double> %13, %36
  %41 = fmul <2 x double> %13, %37
  %42 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fmul <2 x double> %33, %45
  %47 = bitcast <2 x double> %25 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 -134217728, i64 -134217728>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fsub <2 x double> %25, %49
  %51 = fmul <2 x double> %33, %25
  %52 = fmul <2 x double> %36, %49
  %53 = bitcast <2 x double> %51 to <2 x i64>
  %54 = xor <2 x i64> %53, <i64 -9223372036854775808, i64 -9223372036854775808>
  %55 = bitcast <2 x i64> %54 to <2 x double>
  %56 = fmul <2 x double> %50, %36
  %57 = fmul <2 x double> %37, %49
  %58 = fmul <2 x double> %37, %50
  %59 = fmul <2 x double> %25, %46
  %60 = fmul <2 x double> %33, %32
  %61 = fadd <2 x double> %52, %55
  %62 = fadd <2 x double> %56, %61
  %63 = fadd <2 x double> %57, %62
  %64 = fadd <2 x double> %58, %63
  %65 = fadd <2 x double> %64, %59
  %66 = fadd <2 x double> %60, %65
  %67 = fmul <2 x double> %51, <double 5.000000e-01, double 5.000000e-01>
  %68 = fmul <2 x double> %66, <double 5.000000e-01, double 5.000000e-01>
  %69 = fadd <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %70 = fsub <2 x double> %69, %0
  %71 = fsub <2 x double> %69, %70
  %72 = fsub <2 x double> %0, %71
  %73 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %70
  %74 = fadd <2 x double> %73, %72
  %75 = fadd <2 x double> %69, %74
  %76 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %75) #6
  %77 = bitcast <2 x double> %76 to <2 x i64>
  %78 = and <2 x i64> %77, <i64 -134217728, i64 -134217728>
  %79 = bitcast <2 x i64> %78 to <2 x double>
  %80 = fsub <2 x double> %76, %79
  %81 = fmul <2 x double> %76, %76
  %82 = fmul <2 x double> %79, %79
  %83 = bitcast <2 x double> %81 to <2 x i64>
  %84 = xor <2 x i64> %83, <i64 -9223372036854775808, i64 -9223372036854775808>
  %85 = bitcast <2 x i64> %84 to <2 x double>
  %86 = fmul <2 x double> %80, %79
  %87 = fmul <2 x double> %80, %80
  %88 = fadd <2 x double> %82, %85
  %89 = fadd <2 x double> %86, %88
  %90 = fadd <2 x double> %86, %89
  %91 = fadd <2 x double> %87, %90
  %92 = fadd <2 x double> %69, %81
  %93 = fsub <2 x double> %92, %69
  %94 = fsub <2 x double> %92, %93
  %95 = fsub <2 x double> %69, %94
  %96 = fsub <2 x double> %81, %93
  %97 = fadd <2 x double> %96, %95
  %98 = fadd <2 x double> %74, %91
  %99 = fadd <2 x double> %97, %98
  %100 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %76
  %101 = bitcast <2 x double> %100 to <2 x i64>
  %102 = and <2 x i64> %101, <i64 -134217728, i64 -134217728>
  %103 = bitcast <2 x i64> %102 to <2 x double>
  %104 = fsub <2 x double> %100, %103
  %105 = fmul <2 x double> %79, %103
  %106 = fmul <2 x double> %104, %79
  %107 = fmul <2 x double> %80, %103
  %108 = fmul <2 x double> %80, %104
  %109 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %105
  %110 = fsub <2 x double> %109, %106
  %111 = fsub <2 x double> %110, %107
  %112 = fsub <2 x double> %111, %108
  %113 = fmul <2 x double> %100, %112
  %114 = bitcast <2 x double> %92 to <2 x i64>
  %115 = and <2 x i64> %114, <i64 -134217728, i64 -134217728>
  %116 = bitcast <2 x i64> %115 to <2 x double>
  %117 = fsub <2 x double> %92, %116
  %118 = fmul <2 x double> %100, %92
  %119 = fmul <2 x double> %103, %116
  %120 = bitcast <2 x double> %118 to <2 x i64>
  %121 = xor <2 x i64> %120, <i64 -9223372036854775808, i64 -9223372036854775808>
  %122 = bitcast <2 x i64> %121 to <2 x double>
  %123 = fmul <2 x double> %117, %103
  %124 = fmul <2 x double> %104, %116
  %125 = fmul <2 x double> %104, %117
  %126 = fmul <2 x double> %92, %113
  %127 = fmul <2 x double> %100, %99
  %128 = fadd <2 x double> %119, %122
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %124, %129
  %131 = fadd <2 x double> %125, %130
  %132 = fadd <2 x double> %131, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fmul <2 x double> %118, <double 5.000000e-01, double 5.000000e-01>
  %135 = fmul <2 x double> %133, <double 5.000000e-01, double 5.000000e-01>
  %136 = bitcast <2 x double> %67 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -134217728, i64 -134217728>
  %138 = bitcast <2 x i64> %137 to <2 x double>
  %139 = fsub <2 x double> %67, %138
  %140 = bitcast <2 x double> %134 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %134, %142
  %144 = fmul <2 x double> %67, %134
  %145 = fmul <2 x double> %138, %142
  %146 = bitcast <2 x double> %144 to <2 x i64>
  %147 = xor <2 x i64> %146, <i64 -9223372036854775808, i64 -9223372036854775808>
  %148 = bitcast <2 x i64> %147 to <2 x double>
  %149 = fmul <2 x double> %139, %142
  %150 = fmul <2 x double> %143, %138
  %151 = fmul <2 x double> %139, %143
  %152 = fmul <2 x double> %67, %135
  %153 = fmul <2 x double> %134, %68
  %154 = fadd <2 x double> %145, %148
  %155 = fadd <2 x double> %149, %154
  %156 = fadd <2 x double> %150, %155
  %157 = fadd <2 x double> %151, %156
  %158 = fadd <2 x double> %157, %152
  %159 = fadd <2 x double> %153, %158
  %160 = fadd <2 x double> %144, %0
  %161 = fsub <2 x double> %160, %144
  %162 = fsub <2 x double> %160, %161
  %163 = fsub <2 x double> %144, %162
  %164 = fsub <2 x double> %0, %161
  %165 = fadd <2 x double> %164, %163
  %166 = fadd <2 x double> %165, %159
  %167 = fmul <2 x double> %160, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %168 = fcmp olt <2 x double> %167, <double 0x2D30000000000000, double 0x2D30000000000000>
  %169 = sext <2 x i1> %168 to <2 x i64>
  %170 = fmul <2 x double> %167, <double 0x52B0000000000000, double 0x52B0000000000000>
  %171 = bitcast <2 x i64> %169 to <2 x double>
  %172 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %167, <2 x double> %170, <2 x double> %171) #6
  %173 = bitcast <2 x double> %172 to <4 x i32>
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %175 = and <4 x i32> %174, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %176 = lshr exact <4 x i32> %175, <i32 20, i32 20, i32 20, i32 20>
  %177 = bitcast <2 x i64> %169 to <4 x i32>
  %178 = shufflevector <4 x i32> %177, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %179 = bitcast <4 x i32> %178 to <16 x i8>
  %180 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %179) #6
  %181 = bitcast <16 x i8> %180 to <4 x i32>
  %182 = sub <4 x i32> %176, %181
  %183 = sub <4 x i32> zeroinitializer, %182
  %184 = ashr <4 x i32> %183, <i32 1, i32 1, i32 1, i32 1>
  %185 = add <4 x i32> %184, <i32 1023, i32 1023, i32 undef, i32 0>
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %187 = and <4 x i32> %186, <i32 0, i32 -1, i32 0, i32 -1>
  %188 = shl <4 x i32> %187, <i32 20, i32 20, i32 20, i32 20>
  %189 = bitcast <4 x i32> %188 to <2 x double>
  %190 = fmul <2 x double> %160, %189
  %191 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %182
  %192 = sub <4 x i32> %191, %184
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %194 = and <4 x i32> %193, <i32 0, i32 -1, i32 0, i32 -1>
  %195 = shl <4 x i32> %194, <i32 20, i32 20, i32 20, i32 20>
  %196 = bitcast <4 x i32> %195 to <2 x double>
  %197 = fmul <2 x double> %190, %196
  %198 = fmul <2 x double> %166, %189
  %199 = fmul <2 x double> %198, %196
  %200 = fadd <2 x double> %197, <double -1.000000e+00, double -1.000000e+00>
  %201 = fsub <2 x double> %200, %197
  %202 = fsub <2 x double> %200, %201
  %203 = fsub <2 x double> %197, %202
  %204 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %201
  %205 = fadd <2 x double> %204, %203
  %206 = fadd <2 x double> %205, %199
  %207 = fadd <2 x double> %197, <double 1.000000e+00, double 1.000000e+00>
  %208 = fsub <2 x double> %207, %197
  %209 = fsub <2 x double> %207, %208
  %210 = fsub <2 x double> %197, %209
  %211 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %208
  %212 = fadd <2 x double> %211, %210
  %213 = fadd <2 x double> %212, %199
  %214 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %207
  %215 = bitcast <2 x double> %207 to <2 x i64>
  %216 = and <2 x i64> %215, <i64 -134217728, i64 -134217728>
  %217 = bitcast <2 x i64> %216 to <2 x double>
  %218 = fsub <2 x double> %207, %217
  %219 = bitcast <2 x double> %214 to <2 x i64>
  %220 = and <2 x i64> %219, <i64 -134217728, i64 -134217728>
  %221 = bitcast <2 x i64> %220 to <2 x double>
  %222 = fsub <2 x double> %214, %221
  %223 = bitcast <2 x double> %200 to <2 x i64>
  %224 = and <2 x i64> %223, <i64 -134217728, i64 -134217728>
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = fsub <2 x double> %200, %225
  %227 = fmul <2 x double> %200, %214
  %228 = fmul <2 x double> %225, %221
  %229 = fsub <2 x double> %228, %227
  %230 = fmul <2 x double> %222, %225
  %231 = fmul <2 x double> %226, %221
  %232 = fmul <2 x double> %226, %222
  %233 = fmul <2 x double> %217, %221
  %234 = fmul <2 x double> %222, %217
  %235 = fmul <2 x double> %218, %221
  %236 = fmul <2 x double> %218, %222
  %237 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %233
  %238 = fsub <2 x double> %237, %234
  %239 = fsub <2 x double> %238, %235
  %240 = fsub <2 x double> %239, %236
  %241 = fmul <2 x double> %227, %240
  %242 = fadd <2 x double> %229, %230
  %243 = fadd <2 x double> %231, %242
  %244 = fadd <2 x double> %232, %243
  %245 = fadd <2 x double> %244, %241
  %246 = fmul <2 x double> %227, %213
  %247 = fsub <2 x double> %206, %246
  %248 = fmul <2 x double> %214, %247
  %249 = fadd <2 x double> %248, %245
  %250 = bitcast <2 x double> %227 to <2 x i64>
  %251 = and <2 x i64> %250, <i64 -134217728, i64 -134217728>
  %252 = bitcast <2 x i64> %251 to <2 x double>
  %253 = fsub <2 x double> %227, %252
  %254 = fmul <2 x double> %227, %227
  %255 = fmul <2 x double> %252, %252
  %256 = bitcast <2 x double> %254 to <2 x i64>
  %257 = xor <2 x i64> %256, <i64 -9223372036854775808, i64 -9223372036854775808>
  %258 = bitcast <2 x i64> %257 to <2 x double>
  %259 = fadd <2 x double> %252, %252
  %260 = fmul <2 x double> %259, %253
  %261 = fmul <2 x double> %253, %253
  %262 = fadd <2 x double> %249, %249
  %263 = fmul <2 x double> %227, %262
  %264 = fadd <2 x double> %255, %258
  %265 = fadd <2 x double> %264, %260
  %266 = fadd <2 x double> %261, %265
  %267 = fadd <2 x double> %266, %263
  %268 = fmul <2 x double> %254, %254
  %269 = fmul <2 x double> %268, %268
  %270 = fmul <2 x double> %254, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %271 = fadd <2 x double> %270, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %272 = fmul <2 x double> %268, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %273 = fadd <2 x double> %272, %271
  %274 = fmul <2 x double> %254, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %275 = fadd <2 x double> %274, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %276 = fmul <2 x double> %254, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %277 = fadd <2 x double> %276, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %278 = fmul <2 x double> %268, %275
  %279 = fadd <2 x double> %277, %278
  %280 = fmul <2 x double> %269, %273
  %281 = fadd <2 x double> %280, %279
  %282 = fmul <2 x double> %254, %281
  %283 = fadd <2 x double> %282, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %284 = shufflevector <4 x i32> %182, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %285 = sitofp <2 x i32> %284 to <2 x double>
  %286 = bitcast <2 x double> %285 to <2 x i64>
  %287 = and <2 x i64> %286, <i64 -134217728, i64 -134217728>
  %288 = bitcast <2 x i64> %287 to <2 x double>
  %289 = fsub <2 x double> %285, %288
  %290 = fmul <2 x double> %285, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %291 = fmul <2 x double> %288, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %292 = bitcast <2 x double> %290 to <2 x i64>
  %293 = xor <2 x i64> %292, <i64 -9223372036854775808, i64 -9223372036854775808>
  %294 = bitcast <2 x i64> %293 to <2 x double>
  %295 = fmul <2 x double> %288, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %296 = fmul <2 x double> %289, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %297 = fmul <2 x double> %289, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %298 = fmul <2 x double> %285, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %299 = fadd <2 x double> %291, %294
  %300 = fadd <2 x double> %295, %299
  %301 = fadd <2 x double> %296, %300
  %302 = fadd <2 x double> %297, %301
  %303 = fadd <2 x double> %298, %302
  %304 = fmul <2 x double> %227, <double 2.000000e+00, double 2.000000e+00>
  %305 = fmul <2 x double> %249, <double 2.000000e+00, double 2.000000e+00>
  %306 = fadd <2 x double> %290, %304
  %307 = fsub <2 x double> %290, %306
  %308 = fadd <2 x double> %304, %307
  %309 = fadd <2 x double> %303, %308
  %310 = fadd <2 x double> %309, %305
  %311 = and <2 x i64> %256, <i64 -134217728, i64 -134217728>
  %312 = bitcast <2 x i64> %311 to <2 x double>
  %313 = fsub <2 x double> %254, %312
  %314 = fmul <2 x double> %227, %254
  %315 = fmul <2 x double> %252, %312
  %316 = bitcast <2 x double> %314 to <2 x i64>
  %317 = xor <2 x i64> %316, <i64 -9223372036854775808, i64 -9223372036854775808>
  %318 = bitcast <2 x i64> %317 to <2 x double>
  %319 = fmul <2 x double> %313, %252
  %320 = fmul <2 x double> %253, %312
  %321 = fmul <2 x double> %253, %313
  %322 = fmul <2 x double> %254, %249
  %323 = fmul <2 x double> %227, %267
  %324 = fadd <2 x double> %315, %318
  %325 = fadd <2 x double> %319, %324
  %326 = fadd <2 x double> %320, %325
  %327 = fadd <2 x double> %321, %326
  %328 = fadd <2 x double> %327, %322
  %329 = fadd <2 x double> %328, %323
  %330 = and <2 x i64> %316, <i64 -134217728, i64 -134217728>
  %331 = bitcast <2 x i64> %330 to <2 x double>
  %332 = fsub <2 x double> %314, %331
  %333 = bitcast <2 x double> %283 to <2 x i64>
  %334 = and <2 x i64> %333, <i64 -134217728, i64 -134217728>
  %335 = bitcast <2 x i64> %334 to <2 x double>
  %336 = fsub <2 x double> %283, %335
  %337 = fmul <2 x double> %314, %283
  %338 = fmul <2 x double> %331, %335
  %339 = bitcast <2 x double> %337 to <2 x i64>
  %340 = xor <2 x i64> %339, <i64 -9223372036854775808, i64 -9223372036854775808>
  %341 = bitcast <2 x i64> %340 to <2 x double>
  %342 = fmul <2 x double> %332, %335
  %343 = fmul <2 x double> %336, %331
  %344 = fmul <2 x double> %332, %336
  %345 = fmul <2 x double> %283, %329
  %346 = fadd <2 x double> %338, %341
  %347 = fadd <2 x double> %342, %346
  %348 = fadd <2 x double> %343, %347
  %349 = fadd <2 x double> %344, %348
  %350 = fadd <2 x double> %345, %349
  %351 = fadd <2 x double> %306, %337
  %352 = fsub <2 x double> %306, %351
  %353 = fadd <2 x double> %337, %352
  %354 = fadd <2 x double> %353, %310
  %355 = fadd <2 x double> %354, %350
  %356 = fadd <2 x double> %351, %355
  %357 = bitcast <2 x double> %0 to <2 x i64>
  %358 = and <2 x i64> %357, <i64 9223372036854775807, i64 9223372036854775807>
  %359 = bitcast <2 x i64> %358 to <2 x double>
  %360 = fcmp ogt <2 x double> %359, <double 0x5FEFFFFFFFFFFFFF, double 0x5FEFFFFFFFFFFFFF>
  %361 = fcmp uno <2 x double> %356, zeroinitializer
  %362 = or <2 x i1> %361, %360
  %363 = sext <2 x i1> %362 to <2 x i64>
  %364 = bitcast <2 x i64> %363 to <2 x double>
  %365 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %356, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %364) #6
  %366 = fcmp une <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %367 = fcmp olt <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %368 = fcmp uno <2 x double> %0, zeroinitializer
  %369 = or <2 x i1> %368, %367
  %370 = select <2 x i1> %366, <2 x double> %365, <2 x double> zeroinitializer
  %371 = select <2 x i1> %369, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %370
  ret <2 x double> %371
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_atanhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fadd <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = fadd <2 x double> %5, <double -1.000000e+00, double -1.000000e+00>
  %7 = fsub <2 x double> %5, %6
  %8 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %7
  %9 = fsub <2 x double> %4, %6
  %10 = fadd <2 x double> %9, %8
  %11 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = bitcast <2 x i64> %11 to <2 x double>
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = fadd <2 x double> %13, <double -1.000000e+00, double -1.000000e+00>
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %13
  %20 = bitcast <2 x double> %13 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 -134217728, i64 -134217728>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = fsub <2 x double> %13, %22
  %24 = bitcast <2 x double> %19 to <2 x i64>
  %25 = and <2 x i64> %24, <i64 -134217728, i64 -134217728>
  %26 = bitcast <2 x i64> %25 to <2 x double>
  %27 = fsub <2 x double> %19, %26
  %28 = bitcast <2 x double> %5 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %5, %30
  %32 = fmul <2 x double> %5, %19
  %33 = fmul <2 x double> %30, %26
  %34 = fsub <2 x double> %33, %32
  %35 = fmul <2 x double> %27, %30
  %36 = fmul <2 x double> %31, %26
  %37 = fmul <2 x double> %31, %27
  %38 = fmul <2 x double> %22, %26
  %39 = fmul <2 x double> %27, %22
  %40 = fmul <2 x double> %23, %26
  %41 = fmul <2 x double> %23, %27
  %42 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fsub <2 x double> %44, %41
  %46 = fmul <2 x double> %32, %45
  %47 = fadd <2 x double> %34, %35
  %48 = fadd <2 x double> %36, %47
  %49 = fadd <2 x double> %37, %48
  %50 = fadd <2 x double> %49, %46
  %51 = fmul <2 x double> %32, %18
  %52 = fsub <2 x double> %10, %51
  %53 = fmul <2 x double> %19, %52
  %54 = fadd <2 x double> %53, %50
  %55 = fmul <2 x double> %32, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %56 = fcmp olt <2 x double> %55, <double 0x2D30000000000000, double 0x2D30000000000000>
  %57 = sext <2 x i1> %56 to <2 x i64>
  %58 = fmul <2 x double> %55, <double 0x52B0000000000000, double 0x52B0000000000000>
  %59 = bitcast <2 x i64> %57 to <2 x double>
  %60 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %55, <2 x double> %58, <2 x double> %59) #6
  %61 = bitcast <2 x double> %60 to <4 x i32>
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %63 = and <4 x i32> %62, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %64 = lshr exact <4 x i32> %63, <i32 20, i32 20, i32 20, i32 20>
  %65 = bitcast <2 x i64> %57 to <4 x i32>
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %67 = bitcast <4 x i32> %66 to <16 x i8>
  %68 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %67) #6
  %69 = bitcast <16 x i8> %68 to <4 x i32>
  %70 = sub <4 x i32> %64, %69
  %71 = sub <4 x i32> zeroinitializer, %70
  %72 = ashr <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  %73 = add <4 x i32> %72, <i32 1023, i32 1023, i32 undef, i32 0>
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %75 = and <4 x i32> %74, <i32 0, i32 -1, i32 0, i32 -1>
  %76 = shl <4 x i32> %75, <i32 20, i32 20, i32 20, i32 20>
  %77 = bitcast <4 x i32> %76 to <2 x double>
  %78 = fmul <2 x double> %32, %77
  %79 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %70
  %80 = sub <4 x i32> %79, %72
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %82 = and <4 x i32> %81, <i32 0, i32 -1, i32 0, i32 -1>
  %83 = shl <4 x i32> %82, <i32 20, i32 20, i32 20, i32 20>
  %84 = bitcast <4 x i32> %83 to <2 x double>
  %85 = fmul <2 x double> %78, %84
  %86 = fmul <2 x double> %54, %77
  %87 = fmul <2 x double> %86, %84
  %88 = fadd <2 x double> %85, <double -1.000000e+00, double -1.000000e+00>
  %89 = fsub <2 x double> %88, %85
  %90 = fsub <2 x double> %88, %89
  %91 = fsub <2 x double> %85, %90
  %92 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %89
  %93 = fadd <2 x double> %92, %91
  %94 = fadd <2 x double> %87, %93
  %95 = fadd <2 x double> %85, <double 1.000000e+00, double 1.000000e+00>
  %96 = fsub <2 x double> %95, %85
  %97 = fsub <2 x double> %95, %96
  %98 = fsub <2 x double> %85, %97
  %99 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %96
  %100 = fadd <2 x double> %99, %98
  %101 = fadd <2 x double> %87, %100
  %102 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %95
  %103 = bitcast <2 x double> %95 to <2 x i64>
  %104 = and <2 x i64> %103, <i64 -134217728, i64 -134217728>
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fsub <2 x double> %95, %105
  %107 = bitcast <2 x double> %102 to <2 x i64>
  %108 = and <2 x i64> %107, <i64 -134217728, i64 -134217728>
  %109 = bitcast <2 x i64> %108 to <2 x double>
  %110 = fsub <2 x double> %102, %109
  %111 = bitcast <2 x double> %88 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %88, %113
  %115 = fmul <2 x double> %88, %102
  %116 = fmul <2 x double> %113, %109
  %117 = fsub <2 x double> %116, %115
  %118 = fmul <2 x double> %110, %113
  %119 = fmul <2 x double> %114, %109
  %120 = fmul <2 x double> %114, %110
  %121 = fmul <2 x double> %105, %109
  %122 = fmul <2 x double> %110, %105
  %123 = fmul <2 x double> %106, %109
  %124 = fmul <2 x double> %106, %110
  %125 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %121
  %126 = fsub <2 x double> %125, %122
  %127 = fsub <2 x double> %126, %123
  %128 = fsub <2 x double> %127, %124
  %129 = fmul <2 x double> %115, %128
  %130 = fadd <2 x double> %117, %118
  %131 = fadd <2 x double> %119, %130
  %132 = fadd <2 x double> %120, %131
  %133 = fadd <2 x double> %132, %129
  %134 = fmul <2 x double> %115, %101
  %135 = fsub <2 x double> %94, %134
  %136 = fmul <2 x double> %102, %135
  %137 = fadd <2 x double> %136, %133
  %138 = bitcast <2 x double> %115 to <2 x i64>
  %139 = and <2 x i64> %138, <i64 -134217728, i64 -134217728>
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = fsub <2 x double> %115, %140
  %142 = fmul <2 x double> %115, %115
  %143 = fmul <2 x double> %140, %140
  %144 = bitcast <2 x double> %142 to <2 x i64>
  %145 = xor <2 x i64> %144, <i64 -9223372036854775808, i64 -9223372036854775808>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fadd <2 x double> %140, %140
  %148 = fmul <2 x double> %147, %141
  %149 = fmul <2 x double> %141, %141
  %150 = fadd <2 x double> %137, %137
  %151 = fmul <2 x double> %115, %150
  %152 = fadd <2 x double> %143, %146
  %153 = fadd <2 x double> %152, %148
  %154 = fadd <2 x double> %149, %153
  %155 = fadd <2 x double> %154, %151
  %156 = fmul <2 x double> %142, %142
  %157 = fmul <2 x double> %156, %156
  %158 = fmul <2 x double> %142, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %159 = fadd <2 x double> %158, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %160 = fmul <2 x double> %156, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %161 = fadd <2 x double> %160, %159
  %162 = fmul <2 x double> %142, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %163 = fadd <2 x double> %162, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %164 = fmul <2 x double> %142, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %165 = fadd <2 x double> %164, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %166 = fmul <2 x double> %156, %163
  %167 = fadd <2 x double> %165, %166
  %168 = fmul <2 x double> %157, %161
  %169 = fadd <2 x double> %168, %167
  %170 = fmul <2 x double> %142, %169
  %171 = fadd <2 x double> %170, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %172 = shufflevector <4 x i32> %70, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %173 = sitofp <2 x i32> %172 to <2 x double>
  %174 = bitcast <2 x double> %173 to <2 x i64>
  %175 = and <2 x i64> %174, <i64 -134217728, i64 -134217728>
  %176 = bitcast <2 x i64> %175 to <2 x double>
  %177 = fsub <2 x double> %173, %176
  %178 = fmul <2 x double> %173, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %179 = fmul <2 x double> %176, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %180 = bitcast <2 x double> %178 to <2 x i64>
  %181 = xor <2 x i64> %180, <i64 -9223372036854775808, i64 -9223372036854775808>
  %182 = bitcast <2 x i64> %181 to <2 x double>
  %183 = fmul <2 x double> %176, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %184 = fmul <2 x double> %177, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %185 = fmul <2 x double> %177, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %186 = fmul <2 x double> %173, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %187 = fadd <2 x double> %179, %182
  %188 = fadd <2 x double> %183, %187
  %189 = fadd <2 x double> %184, %188
  %190 = fadd <2 x double> %185, %189
  %191 = fadd <2 x double> %186, %190
  %192 = fmul <2 x double> %115, <double 2.000000e+00, double 2.000000e+00>
  %193 = fmul <2 x double> %137, <double 2.000000e+00, double 2.000000e+00>
  %194 = fadd <2 x double> %178, %192
  %195 = fsub <2 x double> %178, %194
  %196 = fadd <2 x double> %192, %195
  %197 = fadd <2 x double> %191, %196
  %198 = fadd <2 x double> %197, %193
  %199 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %200 = bitcast <2 x i64> %199 to <2 x double>
  %201 = fsub <2 x double> %142, %200
  %202 = fmul <2 x double> %115, %142
  %203 = fmul <2 x double> %140, %200
  %204 = bitcast <2 x double> %202 to <2 x i64>
  %205 = xor <2 x i64> %204, <i64 -9223372036854775808, i64 -9223372036854775808>
  %206 = bitcast <2 x i64> %205 to <2 x double>
  %207 = fmul <2 x double> %201, %140
  %208 = fmul <2 x double> %141, %200
  %209 = fmul <2 x double> %141, %201
  %210 = fmul <2 x double> %142, %137
  %211 = fmul <2 x double> %115, %155
  %212 = fadd <2 x double> %203, %206
  %213 = fadd <2 x double> %207, %212
  %214 = fadd <2 x double> %208, %213
  %215 = fadd <2 x double> %209, %214
  %216 = fadd <2 x double> %215, %210
  %217 = fadd <2 x double> %216, %211
  %218 = and <2 x i64> %204, <i64 -134217728, i64 -134217728>
  %219 = bitcast <2 x i64> %218 to <2 x double>
  %220 = fsub <2 x double> %202, %219
  %221 = bitcast <2 x double> %171 to <2 x i64>
  %222 = and <2 x i64> %221, <i64 -134217728, i64 -134217728>
  %223 = bitcast <2 x i64> %222 to <2 x double>
  %224 = fsub <2 x double> %171, %223
  %225 = fmul <2 x double> %202, %171
  %226 = fmul <2 x double> %219, %223
  %227 = bitcast <2 x double> %225 to <2 x i64>
  %228 = xor <2 x i64> %227, <i64 -9223372036854775808, i64 -9223372036854775808>
  %229 = bitcast <2 x i64> %228 to <2 x double>
  %230 = fmul <2 x double> %220, %223
  %231 = fmul <2 x double> %224, %219
  %232 = fmul <2 x double> %220, %224
  %233 = fmul <2 x double> %171, %217
  %234 = fadd <2 x double> %226, %229
  %235 = fadd <2 x double> %230, %234
  %236 = fadd <2 x double> %231, %235
  %237 = fadd <2 x double> %232, %236
  %238 = fadd <2 x double> %233, %237
  %239 = fadd <2 x double> %194, %225
  %240 = fsub <2 x double> %194, %239
  %241 = fadd <2 x double> %225, %240
  %242 = fadd <2 x double> %241, %198
  %243 = fadd <2 x double> %242, %238
  %244 = fcmp ogt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %245 = fcmp oeq <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %246 = sext <2 x i1> %245 to <2 x i64>
  %247 = fadd <2 x double> %239, %243
  %248 = fmul <2 x double> %247, <double 5.000000e-01, double 5.000000e-01>
  %249 = bitcast <2 x i64> %246 to <2 x double>
  %250 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %248, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %249) #6
  %251 = bitcast <2 x double> %250 to <2 x i64>
  %252 = select <2 x i1> %244, <2 x i64> <i64 -1, i64 -1>, <2 x i64> %251
  %253 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %254 = xor <2 x i64> %252, %253
  %255 = bitcast <2 x i64> %254 to <2 x double>
  %256 = fcmp oeq <2 x double> %4, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %257 = fcmp uno <2 x double> %255, zeroinitializer
  %258 = fcmp uno <2 x double> %0, zeroinitializer
  %259 = or <2 x i1> %256, %258
  %260 = or <2 x i1> %259, %257
  %261 = select <2 x i1> %260, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %255
  ret <2 x double> %261
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %12 = and <4 x i32> %11, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %13 = lshr exact <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = bitcast <2 x i64> %6 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %16) #6
  %18 = bitcast <16 x i8> %17 to <4 x i32>
  %19 = sub <4 x i32> %13, %18
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 undef, i32 undef>
  %21 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %19
  %22 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = add <4 x i32> %22, <i32 1023, i32 1023, i32 undef, i32 0>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %26 to <2 x double>
  %28 = fmul <2 x double> %27, %0
  %29 = add <4 x i32> %21, <i32 1023, i32 1023, i32 undef, i32 0>
  %30 = sub <4 x i32> %29, %22
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %28, %34
  %36 = shufflevector <4 x i32> %20, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = fadd <2 x double> %37, <double 6.144000e+03, double 6.144000e+03>
  %39 = fmul <2 x double> %38, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %40 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %39) #6
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %42 = sitofp <2 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %42, <double 3.000000e+00, double 3.000000e+00>
  %44 = fsub <2 x double> %38, %43
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %44) #6
  %46 = icmp eq <4 x i32> %45, <i32 1, i32 1, i32 0, i32 0>
  %47 = sext <4 x i1> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %49 = bitcast <4 x i32> %48 to <2 x double>
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %49) #6
  %51 = icmp eq <4 x i32> %45, <i32 2, i32 2, i32 0, i32 0>
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %54 = bitcast <4 x i32> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %50, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %54) #6
  %56 = add <4 x i32> %40, <i32 -2048, i32 -2048, i32 0, i32 0>
  %57 = ashr <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %58 = add <4 x i32> %57, <i32 1023, i32 1023, i32 undef, i32 0>
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %60 = and <4 x i32> %59, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = bitcast <4 x i32> %61 to <2 x double>
  %63 = fmul <2 x double> %55, %62
  %64 = add <4 x i32> %40, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %65 = sub <4 x i32> %64, %57
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %67 = and <4 x i32> %66, <i32 0, i32 -1, i32 0, i32 -1>
  %68 = shl <4 x i32> %67, <i32 20, i32 20, i32 20, i32 20>
  %69 = bitcast <4 x i32> %68 to <2 x double>
  %70 = fmul <2 x double> %63, %69
  %71 = bitcast <2 x double> %70 to <2 x i64>
  %72 = bitcast <2 x double> %35 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 -9223372036854775808, i64 -9223372036854775808>
  %74 = xor <2 x i64> %73, %71
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = and <2 x i64> %72, <i64 9223372036854775807, i64 9223372036854775807>
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fmul <2 x double> %77, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %79 = fadd <2 x double> %78, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %80 = fmul <2 x double> %79, %77
  %81 = fadd <2 x double> %80, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %82 = fmul <2 x double> %81, %77
  %83 = fadd <2 x double> %82, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %84 = fmul <2 x double> %83, %77
  %85 = fadd <2 x double> %84, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %86 = fmul <2 x double> %85, %77
  %87 = fadd <2 x double> %86, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %88 = fmul <2 x double> %87, %87
  %89 = fmul <2 x double> %88, %88
  %90 = fmul <2 x double> %89, %77
  %91 = fsub <2 x double> %90, %87
  %92 = fmul <2 x double> %91, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %93 = fsub <2 x double> %87, %92
  %94 = fmul <2 x double> %93, %77
  %95 = fmul <2 x double> %93, %94
  %96 = fmul <2 x double> %95, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %97 = fmul <2 x double> %93, %95
  %98 = fadd <2 x double> %97, <double -1.000000e+00, double -1.000000e+00>
  %99 = fmul <2 x double> %96, %98
  %100 = fsub <2 x double> %95, %99
  %101 = fmul <2 x double> %100, %75
  ret <2 x double> %101
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cbrtd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %12 = and <4 x i32> %11, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %13 = lshr exact <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = bitcast <2 x i64> %6 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %16) #6
  %18 = bitcast <16 x i8> %17 to <4 x i32>
  %19 = sub <4 x i32> %13, %18
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 undef, i32 undef>
  %21 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %19
  %22 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = add <4 x i32> %22, <i32 1023, i32 1023, i32 undef, i32 0>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %26 to <2 x double>
  %28 = fmul <2 x double> %27, %0
  %29 = add <4 x i32> %21, <i32 1023, i32 1023, i32 undef, i32 0>
  %30 = sub <4 x i32> %29, %22
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %28, %34
  %36 = shufflevector <4 x i32> %20, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = fadd <2 x double> %37, <double 6.144000e+03, double 6.144000e+03>
  %39 = fmul <2 x double> %38, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %40 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %39) #6
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %42 = sitofp <2 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %42, <double 3.000000e+00, double 3.000000e+00>
  %44 = fsub <2 x double> %38, %43
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %44) #6
  %46 = icmp eq <4 x i32> %45, <i32 1, i32 1, i32 0, i32 0>
  %47 = sext <4 x i1> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %49 = bitcast <4 x i32> %48 to <2 x double>
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %49) #6
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> <double 0xBC7DDC22548EA41E, double 0xBC7DDC22548EA41E>, <2 x double> %49) #6
  %52 = icmp eq <4 x i32> %45, <i32 2, i32 2, i32 0, i32 0>
  %53 = sext <4 x i1> %52 to <4 x i32>
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %55 = bitcast <4 x i32> %54 to <2 x double>
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %50, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %55) #6
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0xBC9F53E999952F09, double 0xBC9F53E999952F09>, <2 x double> %55) #6
  %58 = bitcast <2 x double> %56 to <2 x i64>
  %59 = bitcast <2 x double> %35 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -9223372036854775808, i64 -9223372036854775808>
  %61 = xor <2 x i64> %60, %58
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = bitcast <2 x double> %57 to <2 x i64>
  %64 = xor <2 x i64> %60, %63
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = and <2 x i64> %59, <i64 9223372036854775807, i64 9223372036854775807>
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fmul <2 x double> %67, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %69 = fadd <2 x double> %68, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %70 = fmul <2 x double> %69, %67
  %71 = fadd <2 x double> %70, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %72 = fmul <2 x double> %71, %67
  %73 = fadd <2 x double> %72, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %74 = fmul <2 x double> %73, %67
  %75 = fadd <2 x double> %74, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %76 = fmul <2 x double> %75, %67
  %77 = fadd <2 x double> %76, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %78 = fmul <2 x double> %77, %77
  %79 = fmul <2 x double> %78, %78
  %80 = fmul <2 x double> %79, %67
  %81 = fsub <2 x double> %80, %77
  %82 = fmul <2 x double> %81, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %83 = fsub <2 x double> %77, %82
  %84 = bitcast <2 x double> %83 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 -134217728, i64 -134217728>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fsub <2 x double> %83, %86
  %88 = fmul <2 x double> %83, %83
  %89 = fmul <2 x double> %86, %86
  %90 = bitcast <2 x double> %88 to <2 x i64>
  %91 = xor <2 x i64> %90, <i64 -9223372036854775808, i64 -9223372036854775808>
  %92 = bitcast <2 x i64> %91 to <2 x double>
  %93 = fmul <2 x double> %87, %86
  %94 = fmul <2 x double> %87, %87
  %95 = fadd <2 x double> %89, %92
  %96 = fadd <2 x double> %93, %95
  %97 = fadd <2 x double> %93, %96
  %98 = fadd <2 x double> %94, %97
  %99 = and <2 x i64> %90, <i64 -134217728, i64 -134217728>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = fsub <2 x double> %88, %100
  %102 = fmul <2 x double> %88, %88
  %103 = fmul <2 x double> %100, %100
  %104 = bitcast <2 x double> %102 to <2 x i64>
  %105 = xor <2 x i64> %104, <i64 -9223372036854775808, i64 -9223372036854775808>
  %106 = bitcast <2 x i64> %105 to <2 x double>
  %107 = fmul <2 x double> %101, %100
  %108 = fmul <2 x double> %101, %101
  %109 = fmul <2 x double> %88, %98
  %110 = fadd <2 x double> %103, %106
  %111 = fadd <2 x double> %107, %110
  %112 = fadd <2 x double> %107, %111
  %113 = fadd <2 x double> %108, %112
  %114 = fadd <2 x double> %109, %113
  %115 = fadd <2 x double> %109, %114
  %116 = and <2 x i64> %104, <i64 -134217728, i64 -134217728>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fsub <2 x double> %102, %117
  %119 = and <2 x i64> %59, <i64 9223372036720558080, i64 9223372036720558080>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %67, %120
  %122 = fmul <2 x double> %102, %67
  %123 = fmul <2 x double> %120, %117
  %124 = bitcast <2 x double> %122 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fmul <2 x double> %118, %120
  %128 = fmul <2 x double> %121, %117
  %129 = fmul <2 x double> %121, %118
  %130 = fmul <2 x double> %115, %67
  %131 = fadd <2 x double> %123, %126
  %132 = fadd <2 x double> %127, %131
  %133 = fadd <2 x double> %128, %132
  %134 = fadd <2 x double> %129, %133
  %135 = fadd <2 x double> %134, %130
  %136 = xor <2 x i64> %84, <i64 -9223372036854775808, i64 -9223372036854775808>
  %137 = bitcast <2 x i64> %136 to <2 x double>
  %138 = fadd <2 x double> %122, %137
  %139 = fsub <2 x double> %138, %122
  %140 = fsub <2 x double> %138, %139
  %141 = fsub <2 x double> %122, %140
  %142 = fsub <2 x double> %137, %139
  %143 = fadd <2 x double> %142, %141
  %144 = fadd <2 x double> %143, %135
  %145 = fadd <2 x double> %138, %144
  %146 = fmul <2 x double> %145, <double 0xBFE5555555555555, double 0xBFE5555555555555>
  %147 = fmul <2 x double> %83, %146
  %148 = fadd <2 x double> %88, %147
  %149 = fsub <2 x double> %148, %88
  %150 = fsub <2 x double> %148, %149
  %151 = fsub <2 x double> %88, %150
  %152 = fsub <2 x double> %147, %149
  %153 = fadd <2 x double> %152, %151
  %154 = fadd <2 x double> %98, %153
  %155 = bitcast <2 x double> %148 to <2 x i64>
  %156 = and <2 x i64> %155, <i64 -134217728, i64 -134217728>
  %157 = bitcast <2 x i64> %156 to <2 x double>
  %158 = fsub <2 x double> %148, %157
  %159 = fmul <2 x double> %148, %67
  %160 = fmul <2 x double> %120, %157
  %161 = bitcast <2 x double> %159 to <2 x i64>
  %162 = xor <2 x i64> %161, <i64 -9223372036854775808, i64 -9223372036854775808>
  %163 = bitcast <2 x i64> %162 to <2 x double>
  %164 = fmul <2 x double> %158, %120
  %165 = fmul <2 x double> %121, %157
  %166 = fmul <2 x double> %121, %158
  %167 = fmul <2 x double> %154, %67
  %168 = fadd <2 x double> %160, %163
  %169 = fadd <2 x double> %164, %168
  %170 = fadd <2 x double> %165, %169
  %171 = fadd <2 x double> %166, %170
  %172 = fadd <2 x double> %167, %171
  %173 = and <2 x i64> %161, <i64 -134217728, i64 -134217728>
  %174 = bitcast <2 x i64> %173 to <2 x double>
  %175 = fsub <2 x double> %159, %174
  %176 = and <2 x i64> %61, <i64 -134217728, i64 -134217728>
  %177 = bitcast <2 x i64> %176 to <2 x double>
  %178 = fsub <2 x double> %62, %177
  %179 = fmul <2 x double> %159, %62
  %180 = fmul <2 x double> %177, %174
  %181 = bitcast <2 x double> %179 to <2 x i64>
  %182 = xor <2 x i64> %181, <i64 -9223372036854775808, i64 -9223372036854775808>
  %183 = bitcast <2 x i64> %182 to <2 x double>
  %184 = fmul <2 x double> %175, %177
  %185 = fmul <2 x double> %178, %174
  %186 = fmul <2 x double> %178, %175
  %187 = fmul <2 x double> %159, %65
  %188 = fmul <2 x double> %172, %62
  %189 = fadd <2 x double> %180, %183
  %190 = fadd <2 x double> %184, %189
  %191 = fadd <2 x double> %185, %190
  %192 = fadd <2 x double> %186, %191
  %193 = fadd <2 x double> %187, %192
  %194 = fadd <2 x double> %188, %193
  %195 = fadd <2 x double> %179, %194
  %196 = add <4 x i32> %40, <i32 -2048, i32 -2048, i32 0, i32 0>
  %197 = ashr <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = add <4 x i32> %197, <i32 1023, i32 1023, i32 undef, i32 0>
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %200 = and <4 x i32> %199, <i32 0, i32 -1, i32 0, i32 -1>
  %201 = shl <4 x i32> %200, <i32 20, i32 20, i32 20, i32 20>
  %202 = bitcast <4 x i32> %201 to <2 x double>
  %203 = fmul <2 x double> %195, %202
  %204 = add <4 x i32> %40, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %205 = sub <4 x i32> %204, %197
  %206 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %207 = and <4 x i32> %206, <i32 0, i32 -1, i32 0, i32 -1>
  %208 = shl <4 x i32> %207, <i32 20, i32 20, i32 20, i32 20>
  %209 = bitcast <4 x i32> %208 to <2 x double>
  %210 = fmul <2 x double> %203, %209
  %211 = fcmp oeq <2 x double> %67, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %212 = sext <2 x i1> %211 to <2 x i64>
  %213 = and <2 x i64> %61, <i64 -9223372036854775808, i64 -9223372036854775808>
  %214 = or <2 x i64> %213, <i64 9218868437227405312, i64 9218868437227405312>
  %215 = bitcast <2 x i64> %214 to <2 x double>
  %216 = bitcast <2 x i64> %212 to <2 x double>
  %217 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %210, <2 x double> %215, <2 x double> %216) #6
  %218 = fcmp oeq <2 x double> %67, zeroinitializer
  %219 = sext <2 x i1> %218 to <2 x i64>
  %220 = bitcast <2 x i64> %213 to <2 x double>
  %221 = bitcast <2 x i64> %219 to <2 x double>
  %222 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %217, <2 x double> %220, <2 x double> %221) #6
  ret <2 x double> %222
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #6
  %4 = fsub <2 x double> %0, %2
  %5 = fmul <2 x double> %4, %4
  %6 = fmul <2 x double> %5, %5
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %4, <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>
  %9 = fadd <2 x double> %8, <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>
  %10 = fmul <2 x double> %4, <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>
  %11 = fadd <2 x double> %10, <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>
  %12 = fmul <2 x double> %4, <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>
  %13 = fadd <2 x double> %12, <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>
  %14 = fmul <2 x double> %5, %11
  %15 = fadd <2 x double> %13, %14
  %16 = fmul <2 x double> %4, <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>
  %17 = fadd <2 x double> %16, <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>
  %18 = fmul <2 x double> %4, <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>
  %19 = fadd <2 x double> %18, <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>
  %20 = fmul <2 x double> %5, %17
  %21 = fadd <2 x double> %19, %20
  %22 = fmul <2 x double> %6, %15
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %9, %7
  %25 = fadd <2 x double> %24, %23
  %26 = fmul <2 x double> %4, %25
  %27 = fadd <2 x double> %26, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %28 = bitcast <2 x double> %27 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %27, %30
  %32 = bitcast <2 x double> %4 to <2 x i64>
  %33 = and <2 x i64> %32, <i64 -134217728, i64 -134217728>
  %34 = bitcast <2 x i64> %33 to <2 x double>
  %35 = fsub <2 x double> %4, %34
  %36 = fmul <2 x double> %4, %27
  %37 = fmul <2 x double> %34, %30
  %38 = bitcast <2 x double> %36 to <2 x i64>
  %39 = xor <2 x i64> %38, <i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = bitcast <2 x i64> %39 to <2 x double>
  %41 = fmul <2 x double> %31, %34
  %42 = fmul <2 x double> %35, %30
  %43 = fmul <2 x double> %35, %31
  %44 = fadd <2 x double> %37, %40
  %45 = fadd <2 x double> %41, %44
  %46 = fadd <2 x double> %42, %45
  %47 = fadd <2 x double> %43, %46
  %48 = fadd <2 x double> %36, <double 1.000000e+00, double 1.000000e+00>
  %49 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %48
  %50 = fadd <2 x double> %36, %49
  %51 = fadd <2 x double> %50, %47
  %52 = fadd <2 x double> %48, %51
  %53 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %54 = add <4 x i32> %53, <i32 1023, i32 1023, i32 undef, i32 0>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %56 = and <4 x i32> %55, <i32 0, i32 -1, i32 0, i32 -1>
  %57 = shl <4 x i32> %56, <i32 20, i32 20, i32 20, i32 20>
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = fmul <2 x double> %52, %58
  %60 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 0>
  %61 = sub <4 x i32> %60, %53
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %63 = and <4 x i32> %62, <i32 0, i32 -1, i32 0, i32 -1>
  %64 = shl <4 x i32> %63, <i32 20, i32 20, i32 20, i32 20>
  %65 = bitcast <4 x i32> %64 to <2 x double>
  %66 = fmul <2 x double> %59, %65
  %67 = fcmp oge <2 x double> %0, <double 1.024000e+03, double 1.024000e+03>
  %68 = sext <2 x i1> %67 to <2 x i64>
  %69 = bitcast <2 x i64> %68 to <2 x double>
  %70 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %66, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %69) #6
  %71 = fcmp uge <2 x double> %0, <double -2.000000e+03, double -2.000000e+03>
  %72 = select <2 x i1> %71, <2 x double> %70, <2 x double> zeroinitializer
  ret <2 x double> %72
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp2d2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #6
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %2) #6
  %4 = fsub <2 x double> %0, %2
  %5 = fmul <2 x double> %4, %4
  %6 = fmul <2 x double> %5, %5
  %7 = fmul <2 x double> %6, %6
  %8 = fmul <2 x double> %4, <double 0x3DFE7901CA95E150, double 0x3DFE7901CA95E150>
  %9 = fadd <2 x double> %8, <double 0x3E3E6106D72C1C17, double 0x3E3E6106D72C1C17>
  %10 = fmul <2 x double> %4, <double 0x3E7B5266946BF979, double 0x3E7B5266946BF979>
  %11 = fadd <2 x double> %10, <double 0x3EB62BFCDABCBB81, double 0x3EB62BFCDABCBB81>
  %12 = fmul <2 x double> %4, <double 0x3EEFFCBFBC12CC80, double 0x3EEFFCBFBC12CC80>
  %13 = fadd <2 x double> %12, <double 0x3F24309130CB34EC, double 0x3F24309130CB34EC>
  %14 = fmul <2 x double> %5, %11
  %15 = fadd <2 x double> %13, %14
  %16 = fmul <2 x double> %4, <double 0x3F55D87FE78C5960, double 0x3F55D87FE78C5960>
  %17 = fadd <2 x double> %16, <double 0x3F83B2AB6FBA08F0, double 0x3F83B2AB6FBA08F0>
  %18 = fmul <2 x double> %4, <double 0x3FAC6B08D704A01F, double 0x3FAC6B08D704A01F>
  %19 = fadd <2 x double> %18, <double 0x3FCEBFBDFF82C5A1, double 0x3FCEBFBDFF82C5A1>
  %20 = fmul <2 x double> %5, %17
  %21 = fadd <2 x double> %19, %20
  %22 = fmul <2 x double> %6, %15
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %9, %7
  %25 = fadd <2 x double> %24, %23
  %26 = fmul <2 x double> %4, %25
  %27 = fadd <2 x double> %26, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %28 = fmul <2 x double> %4, %27
  %29 = fadd <2 x double> %28, <double 1.000000e+00, double 1.000000e+00>
  %30 = ashr <4 x i32> %3, <i32 1, i32 1, i32 1, i32 1>
  %31 = add <4 x i32> %30, <i32 1023, i32 1023, i32 undef, i32 0>
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %33 = and <4 x i32> %32, <i32 0, i32 -1, i32 0, i32 -1>
  %34 = shl <4 x i32> %33, <i32 20, i32 20, i32 20, i32 20>
  %35 = bitcast <4 x i32> %34 to <2 x double>
  %36 = fmul <2 x double> %29, %35
  %37 = add <4 x i32> %3, <i32 1023, i32 1023, i32 undef, i32 0>
  %38 = sub <4 x i32> %37, %30
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %40 = and <4 x i32> %39, <i32 0, i32 -1, i32 0, i32 -1>
  %41 = shl <4 x i32> %40, <i32 20, i32 20, i32 20, i32 20>
  %42 = bitcast <4 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %36, %42
  %44 = fcmp oge <2 x double> %0, <double 1.024000e+03, double 1.024000e+03>
  %45 = sext <2 x i1> %44 to <2 x i64>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %43, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %46) #6
  %48 = fcmp uge <2 x double> %0, <double -2.000000e+03, double -2.000000e+03>
  %49 = select <2 x i1> %48, <2 x double> %47, <2 x double> zeroinitializer
  ret <2 x double> %49
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #6
  %5 = fmul <2 x double> %3, <double 0xBFD34413509F7000, double 0xBFD34413509F7000>
  %6 = fadd <2 x double> %5, %0
  %7 = fmul <2 x double> %3, <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>
  %8 = fadd <2 x double> %7, %6
  %9 = fmul <2 x double> %8, <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>
  %10 = fadd <2 x double> %9, <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>
  %11 = fmul <2 x double> %8, %10
  %12 = fadd <2 x double> %11, <double 0x3F748988CFF14706, double 0x3F748988CFF14706>
  %13 = fmul <2 x double> %8, %12
  %14 = fadd <2 x double> %13, <double 0x3F9411663B046154, double 0x3F9411663B046154>
  %15 = fmul <2 x double> %8, %14
  %16 = fadd <2 x double> %15, <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>
  %17 = fmul <2 x double> %8, %16
  %18 = fadd <2 x double> %17, <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>
  %19 = fmul <2 x double> %8, %18
  %20 = fadd <2 x double> %19, <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>
  %21 = fmul <2 x double> %8, %20
  %22 = fadd <2 x double> %21, <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>
  %23 = fmul <2 x double> %8, %22
  %24 = fadd <2 x double> %23, <double 0x4000470591DE2C43, double 0x4000470591DE2C43>
  %25 = fmul <2 x double> %8, %24
  %26 = fadd <2 x double> %25, <double 0x40053524C73CEA78, double 0x40053524C73CEA78>
  %27 = fmul <2 x double> %8, %26
  %28 = fadd <2 x double> %27, <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>
  %29 = bitcast <2 x double> %28 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -134217728, i64 -134217728>
  %31 = bitcast <2 x i64> %30 to <2 x double>
  %32 = fsub <2 x double> %28, %31
  %33 = bitcast <2 x double> %8 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fsub <2 x double> %8, %35
  %37 = fmul <2 x double> %8, %28
  %38 = fmul <2 x double> %35, %31
  %39 = bitcast <2 x double> %37 to <2 x i64>
  %40 = xor <2 x i64> %39, <i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %32, %35
  %43 = fmul <2 x double> %36, %31
  %44 = fmul <2 x double> %36, %32
  %45 = fadd <2 x double> %38, %41
  %46 = fadd <2 x double> %42, %45
  %47 = fadd <2 x double> %43, %46
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %37, <double 1.000000e+00, double 1.000000e+00>
  %50 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %49
  %51 = fadd <2 x double> %37, %50
  %52 = fadd <2 x double> %51, %48
  %53 = fadd <2 x double> %49, %52
  %54 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %55 = add <4 x i32> %54, <i32 1023, i32 1023, i32 undef, i32 0>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %57 = and <4 x i32> %56, <i32 0, i32 -1, i32 0, i32 -1>
  %58 = shl <4 x i32> %57, <i32 20, i32 20, i32 20, i32 20>
  %59 = bitcast <4 x i32> %58 to <2 x double>
  %60 = fmul <2 x double> %53, %59
  %61 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 0>
  %62 = sub <4 x i32> %61, %54
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %64 = and <4 x i32> %63, <i32 0, i32 -1, i32 0, i32 -1>
  %65 = shl <4 x i32> %64, <i32 20, i32 20, i32 20, i32 20>
  %66 = bitcast <4 x i32> %65 to <2 x double>
  %67 = fmul <2 x double> %60, %66
  %68 = fcmp ogt <2 x double> %0, <double 0x40734413509F79FE, double 0x40734413509F79FE>
  %69 = sext <2 x i1> %68 to <2 x i64>
  %70 = bitcast <2 x i64> %69 to <2 x double>
  %71 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %70) #6
  %72 = fcmp uge <2 x double> %0, <double -3.500000e+02, double -3.500000e+02>
  %73 = select <2 x i1> %72, <2 x double> %71, <2 x double> zeroinitializer
  ret <2 x double> %73
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_exp10d2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x400A934F0979A371, double 0x400A934F0979A371>
  %3 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %2, i32 8) #6
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %3) #6
  %5 = fmul <2 x double> %3, <double 0xBFD34413509F7000, double 0xBFD34413509F7000>
  %6 = fadd <2 x double> %5, %0
  %7 = fmul <2 x double> %3, <double 0xBD43FDE623E2566B, double 0xBD43FDE623E2566B>
  %8 = fadd <2 x double> %7, %6
  %9 = fmul <2 x double> %8, %8
  %10 = fmul <2 x double> %9, %9
  %11 = fmul <2 x double> %10, %10
  %12 = fmul <2 x double> %8, <double 0x3F52F6DBB8E3072A, double 0x3F52F6DBB8E3072A>
  %13 = fadd <2 x double> %12, <double 0x3F748988CFF14706, double 0x3F748988CFF14706>
  %14 = fmul <2 x double> %9, <double 0x3F2F9B875F46726F, double 0x3F2F9B875F46726F>
  %15 = fadd <2 x double> %14, %13
  %16 = fmul <2 x double> %8, <double 0x3F9411663B046154, double 0x3F9411663B046154>
  %17 = fadd <2 x double> %16, <double 0x3FB16E4DF78FCA37, double 0x3FB16E4DF78FCA37>
  %18 = fmul <2 x double> %8, <double 0x3FCA7ED709F2107E, double 0x3FCA7ED709F2107E>
  %19 = fadd <2 x double> %18, <double 0x3FE1429FFD1EB6E2, double 0x3FE1429FFD1EB6E2>
  %20 = fmul <2 x double> %9, %17
  %21 = fadd <2 x double> %19, %20
  %22 = fmul <2 x double> %8, <double 0x3FF2BD7609FD573B, double 0x3FF2BD7609FD573B>
  %23 = fadd <2 x double> %22, <double 0x4000470591DE2C43, double 0x4000470591DE2C43>
  %24 = fmul <2 x double> %8, <double 0x40053524C73CEA78, double 0x40053524C73CEA78>
  %25 = fadd <2 x double> %24, <double 0x40026BB1BBB55516, double 0x40026BB1BBB55516>
  %26 = fmul <2 x double> %9, %23
  %27 = fadd <2 x double> %25, %26
  %28 = fmul <2 x double> %10, %21
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %11, %15
  %31 = fadd <2 x double> %30, %29
  %32 = fmul <2 x double> %8, %31
  %33 = fadd <2 x double> %32, <double 1.000000e+00, double 1.000000e+00>
  %34 = ashr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  %35 = add <4 x i32> %34, <i32 1023, i32 1023, i32 undef, i32 0>
  %36 = shufflevector <4 x i32> %35, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %37 = and <4 x i32> %36, <i32 0, i32 -1, i32 0, i32 -1>
  %38 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %39 = bitcast <4 x i32> %38 to <2 x double>
  %40 = fmul <2 x double> %33, %39
  %41 = add <4 x i32> %4, <i32 1023, i32 1023, i32 undef, i32 0>
  %42 = sub <4 x i32> %41, %34
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %44 = and <4 x i32> %43, <i32 0, i32 -1, i32 0, i32 -1>
  %45 = shl <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %46 = bitcast <4 x i32> %45 to <2 x double>
  %47 = fmul <2 x double> %40, %46
  %48 = fcmp ogt <2 x double> %0, <double 0x40734413509F79FE, double 0x40734413509F79FE>
  %49 = sext <2 x i1> %48 to <2 x i64>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %50) #6
  %52 = fcmp uge <2 x double> %0, <double -3.500000e+02, double -3.500000e+02>
  %53 = select <2 x i1> %52, <2 x double> %51, <2 x double> zeroinitializer
  ret <2 x double> %53
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_expm1d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, zeroinitializer
  %3 = fmul <2 x double> %2, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %4 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %3, i32 8) #6
  %5 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %4) #6
  %6 = fmul <2 x double> %4, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %7 = fadd <2 x double> %6, %0
  %8 = fsub <2 x double> %7, %0
  %9 = fsub <2 x double> %7, %8
  %10 = fsub <2 x double> %0, %9
  %11 = fsub <2 x double> %6, %8
  %12 = fadd <2 x double> %11, %10
  %13 = fadd <2 x double> %12, zeroinitializer
  %14 = fmul <2 x double> %4, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %15 = fadd <2 x double> %14, %7
  %16 = fsub <2 x double> %15, %7
  %17 = fsub <2 x double> %15, %16
  %18 = fsub <2 x double> %7, %17
  %19 = fsub <2 x double> %14, %16
  %20 = fadd <2 x double> %19, %18
  %21 = fadd <2 x double> %20, %13
  %22 = bitcast <2 x double> %15 to <2 x i64>
  %23 = and <2 x i64> %22, <i64 -134217728, i64 -134217728>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fsub <2 x double> %15, %24
  %26 = fmul <2 x double> %15, %15
  %27 = fmul <2 x double> %24, %24
  %28 = bitcast <2 x double> %26 to <2 x i64>
  %29 = xor <2 x i64> %28, <i64 -9223372036854775808, i64 -9223372036854775808>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fadd <2 x double> %24, %24
  %32 = fmul <2 x double> %31, %25
  %33 = fmul <2 x double> %25, %25
  %34 = fadd <2 x double> %21, %21
  %35 = fmul <2 x double> %15, %34
  %36 = fadd <2 x double> %27, %30
  %37 = fadd <2 x double> %36, %32
  %38 = fadd <2 x double> %33, %37
  %39 = fadd <2 x double> %35, %38
  %40 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fsub <2 x double> %26, %41
  %43 = fmul <2 x double> %26, %26
  %44 = fmul <2 x double> %41, %41
  %45 = bitcast <2 x double> %43 to <2 x i64>
  %46 = xor <2 x i64> %45, <i64 -9223372036854775808, i64 -9223372036854775808>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fadd <2 x double> %41, %41
  %49 = fmul <2 x double> %48, %42
  %50 = fmul <2 x double> %42, %42
  %51 = fadd <2 x double> %39, %39
  %52 = fmul <2 x double> %26, %51
  %53 = fadd <2 x double> %44, %47
  %54 = fadd <2 x double> %53, %49
  %55 = fadd <2 x double> %50, %54
  %56 = fadd <2 x double> %55, %52
  %57 = fmul <2 x double> %43, %43
  %58 = fmul <2 x double> %15, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %59 = fadd <2 x double> %58, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %60 = fmul <2 x double> %15, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %61 = fadd <2 x double> %60, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %62 = fmul <2 x double> %15, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %63 = fadd <2 x double> %62, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %64 = fmul <2 x double> %26, %61
  %65 = fadd <2 x double> %63, %64
  %66 = fmul <2 x double> %15, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %67 = fadd <2 x double> %66, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %68 = fmul <2 x double> %15, <double 0x3F81111111111119, double 0x3F81111111111119>
  %69 = fadd <2 x double> %68, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %70 = fmul <2 x double> %26, %67
  %71 = fadd <2 x double> %69, %70
  %72 = fmul <2 x double> %43, %65
  %73 = fadd <2 x double> %71, %72
  %74 = fmul <2 x double> %59, %57
  %75 = fadd <2 x double> %74, %73
  %76 = fmul <2 x double> %15, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %77 = fmul <2 x double> %24, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %78 = bitcast <2 x double> %76 to <2 x i64>
  %79 = xor <2 x i64> %78, <i64 -9223372036854775808, i64 -9223372036854775808>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = fmul <2 x double> %25, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %82 = fmul <2 x double> %24, <double 0x3E25555554000000, double 0x3E25555554000000>
  %83 = fmul <2 x double> %25, <double 0x3E25555554000000, double 0x3E25555554000000>
  %84 = fmul <2 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %85 = fadd <2 x double> %77, %80
  %86 = fadd <2 x double> %81, %85
  %87 = fadd <2 x double> %82, %86
  %88 = fadd <2 x double> %83, %87
  %89 = fadd <2 x double> %84, %88
  %90 = fadd <2 x double> %76, <double 5.000000e-01, double 5.000000e-01>
  %91 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %90
  %92 = fadd <2 x double> %76, %91
  %93 = fadd <2 x double> %92, %89
  %94 = bitcast <2 x double> %90 to <2 x i64>
  %95 = and <2 x i64> %94, <i64 -134217728, i64 -134217728>
  %96 = bitcast <2 x i64> %95 to <2 x double>
  %97 = fsub <2 x double> %90, %96
  %98 = fmul <2 x double> %15, %90
  %99 = fmul <2 x double> %24, %96
  %100 = bitcast <2 x double> %98 to <2 x i64>
  %101 = xor <2 x i64> %100, <i64 -9223372036854775808, i64 -9223372036854775808>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fmul <2 x double> %97, %24
  %104 = fmul <2 x double> %25, %96
  %105 = fmul <2 x double> %25, %97
  %106 = fmul <2 x double> %90, %21
  %107 = fmul <2 x double> %15, %93
  %108 = fadd <2 x double> %99, %102
  %109 = fadd <2 x double> %103, %108
  %110 = fadd <2 x double> %104, %109
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %106, %111
  %113 = fadd <2 x double> %107, %112
  %114 = fadd <2 x double> %98, <double 1.000000e+00, double 1.000000e+00>
  %115 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %114
  %116 = fadd <2 x double> %98, %115
  %117 = fadd <2 x double> %116, %113
  %118 = bitcast <2 x double> %114 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -134217728, i64 -134217728>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %114, %120
  %122 = fmul <2 x double> %15, %114
  %123 = fmul <2 x double> %24, %120
  %124 = bitcast <2 x double> %122 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fmul <2 x double> %121, %24
  %128 = fmul <2 x double> %25, %120
  %129 = fmul <2 x double> %25, %121
  %130 = fmul <2 x double> %114, %21
  %131 = fmul <2 x double> %15, %117
  %132 = fadd <2 x double> %123, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %136, %131
  %138 = fadd <2 x double> %122, <double 1.000000e+00, double 1.000000e+00>
  %139 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %138
  %140 = fadd <2 x double> %122, %139
  %141 = fadd <2 x double> %140, %137
  %142 = and <2 x i64> %45, <i64 -134217728, i64 -134217728>
  %143 = bitcast <2 x i64> %142 to <2 x double>
  %144 = fsub <2 x double> %43, %143
  %145 = bitcast <2 x double> %75 to <2 x i64>
  %146 = and <2 x i64> %145, <i64 -134217728, i64 -134217728>
  %147 = bitcast <2 x i64> %146 to <2 x double>
  %148 = fsub <2 x double> %75, %147
  %149 = fmul <2 x double> %43, %75
  %150 = fmul <2 x double> %143, %147
  %151 = bitcast <2 x double> %149 to <2 x i64>
  %152 = xor <2 x i64> %151, <i64 -9223372036854775808, i64 -9223372036854775808>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fmul <2 x double> %144, %147
  %155 = fmul <2 x double> %148, %143
  %156 = fmul <2 x double> %144, %148
  %157 = fmul <2 x double> %75, %56
  %158 = fadd <2 x double> %150, %153
  %159 = fadd <2 x double> %154, %158
  %160 = fadd <2 x double> %155, %159
  %161 = fadd <2 x double> %156, %160
  %162 = fadd <2 x double> %157, %161
  %163 = fadd <2 x double> %138, %149
  %164 = fsub <2 x double> %138, %163
  %165 = fadd <2 x double> %149, %164
  %166 = fadd <2 x double> %165, %141
  %167 = fadd <2 x double> %162, %166
  %168 = ashr <4 x i32> %5, <i32 1, i32 1, i32 1, i32 1>
  %169 = add <4 x i32> %168, <i32 1023, i32 1023, i32 undef, i32 0>
  %170 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %171 = and <4 x i32> %170, <i32 0, i32 -1, i32 0, i32 -1>
  %172 = shl <4 x i32> %171, <i32 20, i32 20, i32 20, i32 20>
  %173 = bitcast <4 x i32> %172 to <2 x double>
  %174 = fmul <2 x double> %163, %173
  %175 = add <4 x i32> %5, <i32 1023, i32 1023, i32 undef, i32 0>
  %176 = sub <4 x i32> %175, %168
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %178 = and <4 x i32> %177, <i32 0, i32 -1, i32 0, i32 -1>
  %179 = shl <4 x i32> %178, <i32 20, i32 20, i32 20, i32 20>
  %180 = bitcast <4 x i32> %179 to <2 x double>
  %181 = fmul <2 x double> %174, %180
  %182 = fmul <2 x double> %167, %173
  %183 = fmul <2 x double> %182, %180
  %184 = fcmp uge <2 x double> %0, <double -1.000000e+03, double -1.000000e+03>
  %185 = bitcast <2 x double> %181 to <2 x i64>
  %186 = sext <2 x i1> %184 to <2 x i64>
  %187 = and <2 x i64> %185, %186
  %188 = bitcast <2 x double> %183 to <2 x i64>
  %189 = and <2 x i64> %188, %186
  %190 = bitcast <2 x i64> %187 to <2 x double>
  %191 = bitcast <2 x i64> %189 to <2 x double>
  %192 = fadd <2 x double> %190, <double -1.000000e+00, double -1.000000e+00>
  %193 = fsub <2 x double> %192, %190
  %194 = fsub <2 x double> %192, %193
  %195 = fsub <2 x double> %190, %194
  %196 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %193
  %197 = fadd <2 x double> %196, %195
  %198 = fadd <2 x double> %197, %191
  %199 = fadd <2 x double> %192, %198
  %200 = fcmp ogt <2 x double> %0, <double 0x40862E42FEFA39EF, double 0x40862E42FEFA39EF>
  %201 = sext <2 x i1> %200 to <2 x i64>
  %202 = bitcast <2 x i64> %201 to <2 x double>
  %203 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %199, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %202) #6
  %204 = fcmp olt <2 x double> %0, <double 0xC0425E4F7B2737FA, double 0xC0425E4F7B2737FA>
  %205 = sext <2 x i1> %204 to <2 x i64>
  %206 = bitcast <2 x i64> %205 to <2 x double>
  %207 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %203, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %206) #6
  %208 = bitcast <2 x double> %0 to <2 x i64>
  %209 = icmp eq <2 x i64> %208, <i64 -9223372036854775808, i64 -9223372036854775808>
  %210 = sext <2 x i1> %209 to <2 x i64>
  %211 = bitcast <2 x i64> %210 to <2 x double>
  %212 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %207, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %211) #6
  ret <2 x double> %212
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log10d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>
  %79 = fadd <2 x double> %78, <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>
  %80 = fmul <2 x double> %76, <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>
  %83 = fadd <2 x double> %82, <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>
  %84 = fmul <2 x double> %75, <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>
  %85 = fadd <2 x double> %84, <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %92 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %92, %95
  %97 = fmul <2 x double> %92, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %98 = fmul <2 x double> %95, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %95, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %103 = fmul <2 x double> %96, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %104 = fmul <2 x double> %96, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %105 = fmul <2 x double> %92, <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>
  %106 = fadd <2 x double> %98, %101
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fadd <2 x double> %105, %109
  %111 = bitcast <2 x double> %52 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %52, %113
  %115 = fmul <2 x double> %52, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %116 = fmul <2 x double> %113, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %117 = bitcast <2 x double> %115 to <2 x i64>
  %118 = xor <2 x i64> %117, <i64 -9223372036854775808, i64 -9223372036854775808>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fmul <2 x double> %114, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %121 = fmul <2 x double> %113, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %122 = fmul <2 x double> %114, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %123 = fmul <2 x double> %52, <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>
  %124 = fmul <2 x double> %74, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %125 = fadd <2 x double> %116, %119
  %126 = fadd <2 x double> %120, %125
  %127 = fadd <2 x double> %121, %126
  %128 = fadd <2 x double> %122, %127
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %129, %124
  %131 = fadd <2 x double> %97, %115
  %132 = fsub <2 x double> %97, %131
  %133 = fadd <2 x double> %115, %132
  %134 = fadd <2 x double> %110, %133
  %135 = fadd <2 x double> %134, %130
  %136 = fmul <2 x double> %52, %75
  %137 = fmul <2 x double> %136, %89
  %138 = fadd <2 x double> %131, %137
  %139 = fsub <2 x double> %131, %138
  %140 = fadd <2 x double> %137, %139
  %141 = fadd <2 x double> %140, %135
  %142 = fadd <2 x double> %138, %141
  %143 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %144 = sext <2 x i1> %143 to <2 x i64>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %142, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %145) #6
  %147 = fcmp ult <2 x double> %6, zeroinitializer
  %148 = sext <2 x i1> %147 to <2 x i64>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %146, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %149) #6
  %151 = fcmp oeq <2 x double> %6, zeroinitializer
  %152 = sext <2 x i1> %151 to <2 x i64>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %150, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %153) #6
  ret <2 x double> %154
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %79 = fadd <2 x double> %78, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %80 = fmul <2 x double> %76, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %83 = fadd <2 x double> %82, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %84 = fmul <2 x double> %75, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %85 = fadd <2 x double> %84, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %52 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %52, %95
  %97 = fmul <2 x double> %52, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %98 = fmul <2 x double> %95, <double 0x4007154760000000, double 0x4007154760000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %96, <double 0x4007154760000000, double 0x4007154760000000>
  %103 = fmul <2 x double> %95, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %104 = fmul <2 x double> %96, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %105 = fmul <2 x double> %52, <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>
  %106 = fmul <2 x double> %74, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %107 = fadd <2 x double> %98, %101
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %103, %108
  %110 = fadd <2 x double> %104, %109
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %111, %106
  %113 = fadd <2 x double> %97, %92
  %114 = fsub <2 x double> %113, %92
  %115 = fsub <2 x double> %113, %114
  %116 = fsub <2 x double> %92, %115
  %117 = fsub <2 x double> %97, %114
  %118 = fadd <2 x double> %117, %116
  %119 = fadd <2 x double> %118, %112
  %120 = fmul <2 x double> %52, %75
  %121 = fmul <2 x double> %120, %89
  %122 = fadd <2 x double> %113, %121
  %123 = fsub <2 x double> %122, %113
  %124 = fsub <2 x double> %122, %123
  %125 = fsub <2 x double> %113, %124
  %126 = fsub <2 x double> %121, %123
  %127 = fadd <2 x double> %126, %125
  %128 = fadd <2 x double> %127, %119
  %129 = fadd <2 x double> %122, %128
  %130 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = sext <2 x i1> %130 to <2 x i64>
  %132 = bitcast <2 x i64> %131 to <2 x double>
  %133 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %129, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %132) #6
  %134 = fcmp ult <2 x double> %6, zeroinitializer
  %135 = sext <2 x i1> %134 to <2 x i64>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %133, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %136) #6
  %138 = fcmp oeq <2 x double> %6, zeroinitializer
  %139 = sext <2 x i1> %138 to <2 x i64>
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %140) #6
  ret <2 x double> %141
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log2d2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %29 = fdiv <2 x double> %27, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %32 = fadd <2 x double> %31, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %33 = fmul <2 x double> %30, %32
  %34 = fadd <2 x double> %33, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %35 = fmul <2 x double> %30, %34
  %36 = fadd <2 x double> %35, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %37 = fmul <2 x double> %30, %36
  %38 = fadd <2 x double> %37, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %39 = fmul <2 x double> %30, %38
  %40 = fadd <2 x double> %39, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %41 = fmul <2 x double> %30, %40
  %42 = fadd <2 x double> %41, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %43 = bitcast <16 x i8> %26 to <4 x i32>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %45 = sitofp <2 x i32> %44 to <2 x double>
  %46 = bitcast <2 x double> %29 to <2 x i64>
  %47 = and <2 x i64> %46, <i64 -134217728, i64 -134217728>
  %48 = bitcast <2 x i64> %47 to <2 x double>
  %49 = fsub <2 x double> %29, %48
  %50 = fmul <2 x double> %29, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %51 = fmul <2 x double> %48, <double 0x4007154760000000, double 0x4007154760000000>
  %52 = bitcast <2 x double> %50 to <2 x i64>
  %53 = xor <2 x i64> %52, <i64 -9223372036854775808, i64 -9223372036854775808>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = fmul <2 x double> %49, <double 0x4007154760000000, double 0x4007154760000000>
  %56 = fmul <2 x double> %48, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %57 = fmul <2 x double> %49, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %58 = fadd <2 x double> %51, %54
  %59 = fadd <2 x double> %55, %58
  %60 = fadd <2 x double> %56, %59
  %61 = fadd <2 x double> %57, %60
  %62 = fadd <2 x double> %50, %45
  %63 = fsub <2 x double> %45, %62
  %64 = fadd <2 x double> %50, %63
  %65 = fadd <2 x double> %64, %61
  %66 = fmul <2 x double> %29, %30
  %67 = fadd <2 x double> %62, %65
  %68 = fmul <2 x double> %66, %42
  %69 = fadd <2 x double> %67, %68
  %70 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %72) #6
  %74 = fcmp ult <2 x double> %6, zeroinitializer
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #6
  %78 = fcmp oeq <2 x double> %6, zeroinitializer
  %79 = sext <2 x i1> %78 to <2 x i64>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %80) #6
  ret <2 x double> %81
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_log1pd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fcmp olt <2 x double> %2, <double 0x10000000000000, double 0x10000000000000>
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %5, <2 x double> %6) #6
  %8 = fmul <2 x double> %7, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 0, i32 0>
  %13 = add nsw <4 x i32> %12, <i32 -1023, i32 -1023, i32 0, i32 0>
  %14 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %12
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %16 = and <4 x i32> %15, <i32 0, i32 -1, i32 0, i32 -1>
  %17 = shl <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = add <4 x i32> %17, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %21 = fmul <2 x double> %19, %0
  %22 = fadd <2 x double> %21, %20
  %23 = bitcast <2 x i64> %4 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %25 = add nsw <4 x i32> %12, <i32 -1087, i32 -1087, i32 0, i32 0>
  %26 = bitcast <4 x i32> %13 to <16 x i8>
  %27 = bitcast <4 x i32> %25 to <16 x i8>
  %28 = bitcast <4 x i32> %24 to <16 x i8>
  %29 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %26, <16 x i8> %27, <16 x i8> %28) #6
  %30 = bitcast <16 x i8> %29 to <4 x i32>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %32 = sitofp <2 x i32> %31 to <2 x double>
  %33 = bitcast <2 x double> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fsub <2 x double> %32, %35
  %37 = fmul <2 x double> %32, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %38 = fmul <2 x double> %35, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %39 = bitcast <2 x double> %37 to <2 x i64>
  %40 = xor <2 x i64> %39, <i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %35, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %43 = fmul <2 x double> %36, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %44 = fmul <2 x double> %36, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %45 = fmul <2 x double> %32, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %46 = fadd <2 x double> %38, %41
  %47 = fadd <2 x double> %42, %46
  %48 = fadd <2 x double> %43, %47
  %49 = fadd <2 x double> %44, %48
  %50 = fadd <2 x double> %45, %49
  %51 = fadd <2 x double> %22, <double 2.000000e+00, double 2.000000e+00>
  %52 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %51
  %53 = fadd <2 x double> %22, %52
  %54 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %51
  %55 = bitcast <2 x double> %51 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -134217728, i64 -134217728>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fsub <2 x double> %51, %57
  %59 = bitcast <2 x double> %54 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -134217728, i64 -134217728>
  %61 = bitcast <2 x i64> %60 to <2 x double>
  %62 = fsub <2 x double> %54, %61
  %63 = bitcast <2 x double> %22 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -134217728, i64 -134217728>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fsub <2 x double> %22, %65
  %67 = fmul <2 x double> %22, %54
  %68 = fmul <2 x double> %65, %61
  %69 = fsub <2 x double> %68, %67
  %70 = fmul <2 x double> %62, %65
  %71 = fmul <2 x double> %66, %61
  %72 = fmul <2 x double> %66, %62
  %73 = fmul <2 x double> %57, %61
  %74 = fmul <2 x double> %62, %57
  %75 = fmul <2 x double> %58, %61
  %76 = fmul <2 x double> %58, %62
  %77 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %73
  %78 = fsub <2 x double> %77, %74
  %79 = fsub <2 x double> %78, %75
  %80 = fsub <2 x double> %79, %76
  %81 = fmul <2 x double> %67, %80
  %82 = fadd <2 x double> %69, %70
  %83 = fadd <2 x double> %71, %82
  %84 = fadd <2 x double> %72, %83
  %85 = fadd <2 x double> %84, %81
  %86 = fmul <2 x double> %67, %53
  %87 = fsub <2 x double> zeroinitializer, %86
  %88 = fmul <2 x double> %54, %87
  %89 = fadd <2 x double> %88, %85
  %90 = fmul <2 x double> %67, %67
  %91 = fmul <2 x double> %90, %90
  %92 = fmul <2 x double> %91, %91
  %93 = fmul <2 x double> %90, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %94 = fadd <2 x double> %93, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %95 = fmul <2 x double> %91, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %96 = fadd <2 x double> %95, %94
  %97 = fmul <2 x double> %90, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %98 = fadd <2 x double> %97, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %99 = fmul <2 x double> %90, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %100 = fadd <2 x double> %99, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %101 = fmul <2 x double> %91, %98
  %102 = fadd <2 x double> %100, %101
  %103 = fmul <2 x double> %92, %96
  %104 = fadd <2 x double> %103, %102
  %105 = fmul <2 x double> %67, <double 2.000000e+00, double 2.000000e+00>
  %106 = fmul <2 x double> %89, <double 2.000000e+00, double 2.000000e+00>
  %107 = fadd <2 x double> %37, %105
  %108 = fsub <2 x double> %37, %107
  %109 = fadd <2 x double> %105, %108
  %110 = fadd <2 x double> %50, %109
  %111 = fadd <2 x double> %110, %106
  %112 = fmul <2 x double> %67, %90
  %113 = fmul <2 x double> %112, %104
  %114 = fadd <2 x double> %107, %113
  %115 = fsub <2 x double> %107, %114
  %116 = fadd <2 x double> %113, %115
  %117 = fadd <2 x double> %116, %111
  %118 = fadd <2 x double> %114, %117
  %119 = fcmp ogt <2 x double> %0, <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>
  %120 = sext <2 x i1> %119 to <2 x i64>
  %121 = bitcast <2 x i64> %120 to <2 x double>
  %122 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %118, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %121) #6
  %123 = fcmp olt <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %124 = fcmp uno <2 x double> %0, zeroinitializer
  %125 = or <2 x i1> %124, %123
  %126 = sext <2 x i1> %125 to <2 x i64>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %127) #6
  %129 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %130 = sext <2 x i1> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %131) #6
  %133 = bitcast <2 x double> %0 to <2 x i64>
  %134 = icmp eq <2 x i64> %133, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = sext <2 x i1> %134 to <2 x i64>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %136) #6
  ret <2 x double> %137
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_fabsd2_sse4(<2 x double>) local_unnamed_addr #3 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_copysignd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmaxd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #6
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #6
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmind2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #6
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #6
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fdimd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = fcmp olt <2 x double> %3, zeroinitializer
  %5 = fcmp oeq <2 x double> %0, %1
  %6 = or <2 x i1> %4, %5
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> zeroinitializer, <2 x double> %8) #6
  ret <2 x double> %9
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_truncd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #6
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_floord2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp olt <2 x double> %11, zeroinitializer
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %14, <2 x double> %15) #6
  %17 = bitcast <2 x double> %0 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 9223372036854775807, i64 9223372036854775807>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %19, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = fcmp oge <2 x double> %19, <double 0x4330000000000000, double 0x4330000000000000>
  %22 = or <2 x i1> %21, %20
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = fsub <2 x double> %0, %16
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = and <2 x i64> %17, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = or <2 x i64> %26, %27
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = bitcast <2 x i64> %23 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %0, <2 x double> %30) #6
  ret <2 x double> %31
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_ceild2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp ole <2 x double> %11, zeroinitializer
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %11, <2 x double> %15) #6
  %17 = bitcast <2 x double> %0 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 9223372036854775807, i64 9223372036854775807>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %19, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = fcmp oge <2 x double> %19, <double 0x4330000000000000, double 0x4330000000000000>
  %22 = or <2 x i1> %21, %20
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = fsub <2 x double> %0, %16
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = and <2 x i64> %17, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = or <2 x i64> %26, %27
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = bitcast <2 x i64> %23 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %0, <2 x double> %30) #6
  ret <2 x double> %31
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_roundd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = fcmp ole <2 x double> %2, zeroinitializer
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = and <2 x i1> %14, %13
  %16 = sext <2 x i1> %15 to <2 x i64>
  %17 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %18 = bitcast <2 x i64> %16 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %17, <2 x double> %18) #6
  %20 = fcmp olt <2 x double> %12, zeroinitializer
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %23 = bitcast <2 x i64> %21 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %22, <2 x double> %23) #6
  %25 = fcmp oeq <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %26 = sext <2 x i1> %25 to <2 x i64>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %27) #6
  %29 = bitcast <2 x double> %0 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807>
  %31 = bitcast <2 x i64> %30 to <2 x double>
  %32 = fcmp oeq <2 x double> %31, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %33 = fcmp oge <2 x double> %31, <double 0x4330000000000000, double 0x4330000000000000>
  %34 = or <2 x i1> %33, %32
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = fsub <2 x double> %28, %24
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 9223372036854775807, i64 9223372036854775807>
  %39 = and <2 x i64> %29, <i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = or <2 x i64> %38, %39
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = bitcast <2 x i64> %35 to <2 x double>
  %43 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %41, <2 x double> %0, <2 x double> %42) #6
  ret <2 x double> %43
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_rintd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #6
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_nextafterd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = bitcast <2 x i64> %4 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = ashr <2 x i64> %10, <i64 63, i64 63>
  %12 = fcmp ole <2 x double> %9, %1
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = xor <2 x i64> %11, %13
  %15 = bitcast <2 x double> %9 to <4 x i32>
  %16 = xor <4 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <4 x i32> %16, <i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <4 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 1, i64 1>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %24 = bitcast <4 x float> %23 to <4 x i32>
  %25 = add <4 x i32> %17, %24
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = bitcast <2 x i64> %14 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %26, <2 x double> %27) #6
  %29 = fcmp une <2 x double> %9, %1
  %30 = sext <2 x i1> %29 to <2 x i64>
  %31 = bitcast <2 x double> %28 to <4 x i32>
  %32 = bitcast <2 x i64> %30 to <4 x i32>
  %33 = and <4 x i32> %32, <i32 1, i32 0, i32 1, i32 0>
  %34 = sub <4 x i32> %31, %33
  %35 = icmp eq <4 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 4294967295, i64 4294967295>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %41 = bitcast <4 x float> %40 to <4 x i32>
  %42 = add <4 x i32> %34, %41
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = bitcast <4 x i32> %34 to <2 x double>
  %45 = bitcast <2 x i64> %30 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %43, <2 x double> %45) #6
  %47 = bitcast <2 x double> %46 to <4 x i32>
  %48 = xor <4 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <4 x i32> %48, <i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 1, i64 1>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = bitcast <4 x float> %55 to <4 x i32>
  %57 = add <4 x i32> %49, %56
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> %58, <2 x double> %27) #6
  %60 = fcmp oeq <2 x double> %59, zeroinitializer
  %61 = fcmp une <2 x double> %9, zeroinitializer
  %62 = and <2 x i1> %60, %61
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = bitcast <2 x i64> %63 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> %65, <2 x double> %66) #6
  %68 = fcmp oeq <2 x double> %9, zeroinitializer
  %69 = fcmp oeq <2 x double> %1, zeroinitializer
  %70 = and <2 x i1> %68, %69
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> %1, <2 x double> %72) #6
  %74 = fcmp uno <2 x double> %9, %1
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #6
  ret <2 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_frfrexpd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -9218868437227405313, i64 -9218868437227405313>
  %12 = or <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = and <2 x i64> %10, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp oeq <2 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <2 x i64> %18, <i64 9218868437227405312, i64 9218868437227405312>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = bitcast <2 x i64> %17 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %20, <2 x double> %21) #6
  %23 = fcmp oeq <2 x double> %9, zeroinitializer
  %24 = sext <2 x i1> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> %9, <2 x double> %25) #6
  ret <2 x double> %26
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_expfrexpd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = bitcast <2 x double> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %13 = lshr <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = and <4 x i32> %13, <i32 2047, i32 2047, i32 0, i32 0>
  %15 = add nsw <4 x i32> %14, <i32 -1022, i32 -1022, i32 0, i32 0>
  %16 = fcmp ueq <2 x double> %9, zeroinitializer
  %17 = and <2 x i64> %10, <i64 9223372036854775807, i64 9223372036854775807>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fcmp oeq <2 x double> %18, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %20 = or <2 x i1> %19, %16
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = bitcast <2 x i64> %21 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %22, <16 x i8> zeroinitializer, <16 x i8> %23) #6
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  ret <2 x i64> %25
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmad2_sse4(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #0 {
  %4 = fmul <2 x double> %0, %1
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 1.000000e-300, double 1.000000e-300>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %0, <double 0x46B0000000000000, double 0x46B0000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %1, <double 0x46B0000000000000, double 0x46B0000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %14, <2 x double> %12) #6
  %16 = fmul <2 x double> %2, <double 0x4D70000000000000, double 0x4D70000000000000>
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %16, <2 x double> %12) #6
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3270000000000000, double 0x3270000000000000>, <2 x double> %12) #6
  %19 = fcmp ogt <2 x double> %8, <double 1.000000e+300, double 1.000000e+300>
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = fmul <2 x double> %13, <double 0x3930000000000000, double 0x3930000000000000>
  %22 = bitcast <2 x i64> %20 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %21, <2 x double> %22) #6
  %24 = fmul <2 x double> %15, <double 0x3930000000000000, double 0x3930000000000000>
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %24, <2 x double> %22) #6
  %26 = fmul <2 x double> %17, <double 0x3270000000000000, double 0x3270000000000000>
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> %26, <2 x double> %22) #6
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0x4D70000000000000, double 0x4D70000000000000>, <2 x double> %22) #6
  %29 = bitcast <2 x double> %23 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -134217728, i64 -134217728>
  %31 = bitcast <2 x i64> %30 to <2 x double>
  %32 = fsub <2 x double> %23, %31
  %33 = bitcast <2 x double> %25 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fsub <2 x double> %25, %35
  %37 = fmul <2 x double> %23, %25
  %38 = fmul <2 x double> %31, %35
  %39 = bitcast <2 x double> %37 to <2 x i64>
  %40 = xor <2 x i64> %39, <i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %32, %35
  %43 = fmul <2 x double> %36, %31
  %44 = fmul <2 x double> %32, %36
  %45 = fadd <2 x double> %38, %41
  %46 = fadd <2 x double> %42, %45
  %47 = fadd <2 x double> %43, %46
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %37, %27
  %50 = fsub <2 x double> %49, %37
  %51 = fsub <2 x double> %49, %50
  %52 = fsub <2 x double> %37, %51
  %53 = fsub <2 x double> %27, %50
  %54 = fadd <2 x double> %53, %52
  %55 = fadd <2 x double> %54, %48
  %56 = fcmp oeq <2 x double> %23, zeroinitializer
  %57 = fcmp oeq <2 x double> %25, zeroinitializer
  %58 = or <2 x i1> %57, %56
  %59 = sext <2 x i1> %58 to <2 x i64>
  %60 = fadd <2 x double> %49, %55
  %61 = bitcast <2 x i64> %59 to <2 x double>
  %62 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> %27, <2 x double> %61) #6
  %63 = bitcast <2 x double> %27 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 9223372036854775807, i64 9223372036854775807>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fcmp oeq <2 x double> %65, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %67 = and <2 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fcmp une <2 x double> %68, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %70 = and <2 x i64> %33, <i64 9223372036854775807, i64 9223372036854775807>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fcmp une <2 x double> %71, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %73 = fcmp ord <2 x double> %25, %23
  %74 = and <2 x i1> %73, %69
  %75 = and <2 x i1> %74, %72
  %76 = and <2 x i1> %75, %66
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %27, <2 x double> %78) #6
  %80 = bitcast <2 x double> %79 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 9223372036854775807, i64 9223372036854775807>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fcmp oeq <2 x double> %82, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %84 = fcmp uno <2 x double> %79, zeroinitializer
  %85 = or <2 x i1> %83, %84
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = fmul <2 x double> %28, %62
  %88 = bitcast <2 x i64> %86 to <2 x double>
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> %79, <2 x double> %88) #6
  ret <2 x double> %89
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u05sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %4) #6
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x i64> %7 to <2 x double>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %8, <2 x double> %9) #6
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double 0x37E0000000000000, double 0x37E0000000000000>, <2 x double> %9) #6
  %12 = fcmp ogt <2 x double> %10, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fmul <2 x double> %10, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #6
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> <double 0x4FE0000000000000, double 0x4FE0000000000000>, <2 x double> %15) #6
  %18 = fadd <2 x double> %16, <double 9.999880e-321, double 9.999880e-321>
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %20
  %22 = bitcast <4 x i32> %21 to <2 x double>
  %23 = fmul <2 x double> %16, <double 5.000000e-01, double 5.000000e-01>
  %24 = fmul <2 x double> %23, %22
  %25 = fmul <2 x double> %24, %22
  %26 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %25
  %27 = fmul <2 x double> %26, %22
  %28 = fmul <2 x double> %23, %27
  %29 = fmul <2 x double> %27, %28
  %30 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %29
  %31 = fmul <2 x double> %27, %30
  %32 = fmul <2 x double> %23, %31
  %33 = fmul <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %33
  %35 = fmul <2 x double> %31, %34
  %36 = fmul <2 x double> %16, %35
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -134217728, i64 -134217728>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fsub <2 x double> %36, %39
  %41 = fmul <2 x double> %36, %36
  %42 = fmul <2 x double> %39, %39
  %43 = bitcast <2 x double> %41 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %40, %39
  %47 = fmul <2 x double> %40, %40
  %48 = fadd <2 x double> %42, %45
  %49 = fadd <2 x double> %46, %48
  %50 = fadd <2 x double> %46, %49
  %51 = fadd <2 x double> %47, %50
  %52 = fadd <2 x double> %16, %41
  %53 = fsub <2 x double> %52, %16
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %16, %54
  %56 = fsub <2 x double> %41, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %57, %51
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %36
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %59, %62
  %64 = fmul <2 x double> %39, %62
  %65 = fmul <2 x double> %63, %39
  %66 = fmul <2 x double> %40, %62
  %67 = fmul <2 x double> %40, %63
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %69 = fsub <2 x double> %68, %65
  %70 = fsub <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %67
  %72 = fmul <2 x double> %59, %71
  %73 = bitcast <2 x double> %52 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %52, %75
  %77 = fmul <2 x double> %59, %52
  %78 = fmul <2 x double> %62, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %62
  %83 = fmul <2 x double> %63, %75
  %84 = fmul <2 x double> %63, %76
  %85 = fmul <2 x double> %52, %72
  %86 = fmul <2 x double> %59, %58
  %87 = fadd <2 x double> %78, %81
  %88 = fadd <2 x double> %82, %87
  %89 = fadd <2 x double> %83, %88
  %90 = fadd <2 x double> %84, %89
  %91 = fadd <2 x double> %90, %85
  %92 = fadd <2 x double> %86, %91
  %93 = fadd <2 x double> %77, %92
  %94 = fmul <2 x double> %17, %93
  %95 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %97) #6
  %99 = fcmp oeq <2 x double> %16, zeroinitializer
  %100 = sext <2 x i1> %99 to <2 x i64>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %98, <2 x double> %16, <2 x double> %101) #6
  ret <2 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %0) #6
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_sqrtd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %4) #6
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x i64> %7 to <2 x double>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %8, <2 x double> %9) #6
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double 0x37E0000000000000, double 0x37E0000000000000>, <2 x double> %9) #6
  %12 = fcmp ogt <2 x double> %10, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fmul <2 x double> %10, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #6
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> <double 0x4FE0000000000000, double 0x4FE0000000000000>, <2 x double> %15) #6
  %18 = fadd <2 x double> %16, <double 9.999880e-321, double 9.999880e-321>
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %20
  %22 = bitcast <4 x i32> %21 to <2 x double>
  %23 = fmul <2 x double> %16, <double 5.000000e-01, double 5.000000e-01>
  %24 = fmul <2 x double> %23, %22
  %25 = fmul <2 x double> %24, %22
  %26 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %25
  %27 = fmul <2 x double> %26, %22
  %28 = fmul <2 x double> %23, %27
  %29 = fmul <2 x double> %27, %28
  %30 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %29
  %31 = fmul <2 x double> %27, %30
  %32 = fmul <2 x double> %23, %31
  %33 = fmul <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %33
  %35 = fmul <2 x double> %31, %34
  %36 = fmul <2 x double> %16, %35
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -134217728, i64 -134217728>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fsub <2 x double> %36, %39
  %41 = fmul <2 x double> %36, %36
  %42 = fmul <2 x double> %39, %39
  %43 = bitcast <2 x double> %41 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %40, %39
  %47 = fmul <2 x double> %40, %40
  %48 = fadd <2 x double> %42, %45
  %49 = fadd <2 x double> %46, %48
  %50 = fadd <2 x double> %46, %49
  %51 = fadd <2 x double> %47, %50
  %52 = fadd <2 x double> %16, %41
  %53 = fsub <2 x double> %52, %16
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %16, %54
  %56 = fsub <2 x double> %41, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %57, %51
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %36
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %59, %62
  %64 = fmul <2 x double> %39, %62
  %65 = fmul <2 x double> %63, %39
  %66 = fmul <2 x double> %40, %62
  %67 = fmul <2 x double> %40, %63
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %69 = fsub <2 x double> %68, %65
  %70 = fsub <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %67
  %72 = fmul <2 x double> %59, %71
  %73 = bitcast <2 x double> %52 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %52, %75
  %77 = fmul <2 x double> %59, %52
  %78 = fmul <2 x double> %62, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %62
  %83 = fmul <2 x double> %63, %75
  %84 = fmul <2 x double> %63, %76
  %85 = fmul <2 x double> %52, %72
  %86 = fmul <2 x double> %59, %58
  %87 = fadd <2 x double> %78, %81
  %88 = fadd <2 x double> %82, %87
  %89 = fadd <2 x double> %83, %88
  %90 = fadd <2 x double> %84, %89
  %91 = fadd <2 x double> %90, %85
  %92 = fadd <2 x double> %86, %91
  %93 = fadd <2 x double> %77, %92
  %94 = fmul <2 x double> %17, %93
  %95 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %97) #6
  %99 = fcmp oeq <2 x double> %16, zeroinitializer
  %100 = sext <2 x i1> %99 to <2 x i64>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %98, <2 x double> %16, <2 x double> %101) #6
  ret <2 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u05sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fcmp olt <2 x double> %10, <double 0x10000000000000, double 0x10000000000000>
  %12 = sext <2 x i1> %11 to <2 x i64>
  %13 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %13, <2 x double> %14) #6
  %16 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %16, <2 x double> %14) #6
  %18 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %17
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -134217728, i64 -134217728>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = fsub <2 x double> %17, %21
  %23 = bitcast <2 x double> %18 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 -134217728, i64 -134217728>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fsub <2 x double> %18, %25
  %27 = bitcast <2 x double> %15 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %15, %29
  %31 = fmul <2 x double> %15, %18
  %32 = fmul <2 x double> %29, %25
  %33 = fsub <2 x double> %32, %31
  %34 = fmul <2 x double> %26, %29
  %35 = fmul <2 x double> %30, %25
  %36 = fmul <2 x double> %30, %26
  %37 = fmul <2 x double> %21, %25
  %38 = fmul <2 x double> %26, %21
  %39 = fmul <2 x double> %22, %25
  %40 = fmul <2 x double> %22, %26
  %41 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %37
  %42 = fsub <2 x double> %41, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fmul <2 x double> %31, %44
  %46 = fadd <2 x double> %33, %34
  %47 = fadd <2 x double> %35, %46
  %48 = fadd <2 x double> %36, %47
  %49 = fadd <2 x double> %48, %45
  %50 = fmul <2 x double> %31, zeroinitializer
  %51 = fsub <2 x double> zeroinitializer, %50
  %52 = fmul <2 x double> %18, %51
  %53 = fadd <2 x double> %52, %49
  %54 = bitcast <2 x double> %31 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -134217728, i64 -134217728>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fsub <2 x double> %31, %56
  %58 = fmul <2 x double> %31, %31
  %59 = fmul <2 x double> %56, %56
  %60 = bitcast <2 x double> %58 to <2 x i64>
  %61 = xor <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fadd <2 x double> %56, %56
  %64 = fmul <2 x double> %63, %57
  %65 = fmul <2 x double> %57, %57
  %66 = fadd <2 x double> %53, %53
  %67 = fmul <2 x double> %31, %66
  %68 = fadd <2 x double> %59, %62
  %69 = fadd <2 x double> %68, %64
  %70 = fadd <2 x double> %65, %69
  %71 = fadd <2 x double> %70, %67
  %72 = fadd <2 x double> %58, <double 1.000000e+00, double 1.000000e+00>
  %73 = fsub <2 x double> %72, %58
  %74 = fsub <2 x double> %72, %73
  %75 = fsub <2 x double> %58, %74
  %76 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %73
  %77 = fadd <2 x double> %76, %75
  %78 = fadd <2 x double> %77, %71
  %79 = fadd <2 x double> %72, %78
  %80 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %79) #6
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -134217728, i64 -134217728>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fsub <2 x double> %80, %83
  %85 = fmul <2 x double> %80, %80
  %86 = fmul <2 x double> %83, %83
  %87 = bitcast <2 x double> %85 to <2 x i64>
  %88 = xor <2 x i64> %87, <i64 -9223372036854775808, i64 -9223372036854775808>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = fmul <2 x double> %84, %83
  %91 = fmul <2 x double> %84, %84
  %92 = fadd <2 x double> %86, %89
  %93 = fadd <2 x double> %90, %92
  %94 = fadd <2 x double> %90, %93
  %95 = fadd <2 x double> %91, %94
  %96 = fadd <2 x double> %85, %72
  %97 = fsub <2 x double> %96, %72
  %98 = fsub <2 x double> %96, %97
  %99 = fsub <2 x double> %72, %98
  %100 = fsub <2 x double> %85, %97
  %101 = fadd <2 x double> %100, %99
  %102 = fadd <2 x double> %95, %78
  %103 = fadd <2 x double> %101, %102
  %104 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %80
  %105 = bitcast <2 x double> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fsub <2 x double> %104, %107
  %109 = fmul <2 x double> %83, %107
  %110 = fmul <2 x double> %108, %83
  %111 = fmul <2 x double> %84, %107
  %112 = fmul <2 x double> %84, %108
  %113 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %109
  %114 = fsub <2 x double> %113, %110
  %115 = fsub <2 x double> %114, %111
  %116 = fsub <2 x double> %115, %112
  %117 = fmul <2 x double> %104, %116
  %118 = bitcast <2 x double> %96 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -134217728, i64 -134217728>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %96, %120
  %122 = fmul <2 x double> %104, %96
  %123 = fmul <2 x double> %107, %120
  %124 = bitcast <2 x double> %122 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fmul <2 x double> %121, %107
  %128 = fmul <2 x double> %108, %120
  %129 = fmul <2 x double> %108, %121
  %130 = fmul <2 x double> %96, %117
  %131 = fmul <2 x double> %104, %103
  %132 = fadd <2 x double> %123, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %136, %131
  %138 = fmul <2 x double> %122, <double 5.000000e-01, double 5.000000e-01>
  %139 = fmul <2 x double> %137, <double 5.000000e-01, double 5.000000e-01>
  %140 = bitcast <2 x double> %138 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %138, %142
  %144 = bitcast <2 x double> %10 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %10, %146
  %148 = fmul <2 x double> %10, %138
  %149 = fmul <2 x double> %146, %142
  %150 = bitcast <2 x double> %148 to <2 x i64>
  %151 = xor <2 x i64> %150, <i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fmul <2 x double> %143, %146
  %154 = fmul <2 x double> %147, %142
  %155 = fmul <2 x double> %147, %143
  %156 = fmul <2 x double> %10, %139
  %157 = fadd <2 x double> %149, %152
  %158 = fadd <2 x double> %153, %157
  %159 = fadd <2 x double> %154, %158
  %160 = fadd <2 x double> %155, %159
  %161 = fadd <2 x double> %160, %156
  %162 = fadd <2 x double> %148, %161
  %163 = fcmp uno <2 x double> %162, zeroinitializer
  %164 = sext <2 x i1> %163 to <2 x i64>
  %165 = bitcast <2 x i64> %164 to <2 x double>
  %166 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %162, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %165) #6
  %167 = fcmp oeq <2 x double> %9, zeroinitializer
  %168 = sext <2 x i1> %167 to <2 x i64>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %166, <2 x double> %10, <2 x double> %169) #6
  %171 = fcmp uno <2 x double> %8, %5
  %172 = sext <2 x i1> %171 to <2 x i64>
  %173 = bitcast <2 x i64> %172 to <2 x double>
  %174 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %170, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %173) #6
  %175 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %176 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = or <2 x i1> %176, %175
  %178 = sext <2 x i1> %177 to <2 x i64>
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %174, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %179) #6
  ret <2 x double> %180
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_hypotd2_u35sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fdiv <2 x double> %9, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %13) #6
  %15 = fmul <2 x double> %10, %14
  %16 = fcmp oeq <2 x double> %9, zeroinitializer
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %10, <2 x double> %18) #6
  %20 = fcmp uno <2 x double> %8, %5
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %22) #6
  %24 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <2 x i1> %25, %24
  %27 = sext <2 x i1> %26 to <2 x i64>
  %28 = bitcast <2 x i64> %27 to <2 x double>
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %23, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %28) #6
  ret <2 x double> %29
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_fmodd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x10000000000000, double 0x10000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %14, <2 x double> %12) #6
  %16 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = bitcast <2 x double> %16 to <2 x i64>
  %18 = add <2 x i64> %17, <i64 -1, i64 -1>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %16, zeroinitializer
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %22) #6
  %24 = fmul <2 x double> %15, <double 3.000000e+00, double 3.000000e+00>
  %25 = fadd <2 x double> %15, %15
  %26 = bitcast <2 x double> %15 to <2 x i64>
  %27 = xor <2 x i64> %26, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = bitcast <2 x i64> %27 to <2 x double>
  %29 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %28, %30
  br label %32

; <label>:32:                                     ; preds = %32, %2
  %33 = phi i32 [ 0, %2 ], [ %91, %32 ]
  %34 = phi <2 x double> [ zeroinitializer, %2 ], [ %85, %32 ]
  %35 = phi <2 x double> [ %13, %2 ], [ %83, %32 ]
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = add <2 x i64> %36, <i64 -1, i64 -1>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fcmp oeq <2 x double> %35, zeroinitializer
  %40 = sext <2 x i1> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %38, <2 x double> zeroinitializer, <2 x double> %41) #6
  %43 = fmul <2 x double> %23, %42
  %44 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %43, i32 11) #6
  %45 = bitcast <2 x double> %44 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -2, i64 -2>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fcmp olt <2 x double> %35, %24
  %49 = fcmp ole <2 x double> %15, %35
  %50 = and <2 x i1> %49, %48
  %51 = sext <2 x i1> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %52) #6
  %54 = fcmp olt <2 x double> %35, %25
  %55 = and <2 x i1> %49, %54
  %56 = sext <2 x i1> %55 to <2 x i64>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %57) #6
  %59 = bitcast <2 x double> %58 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -134217728, i64 -134217728>
  %61 = bitcast <2 x i64> %60 to <2 x double>
  %62 = fsub <2 x double> %58, %61
  %63 = fmul <2 x double> %58, %28
  %64 = fmul <2 x double> %30, %61
  %65 = bitcast <2 x double> %63 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372036854775808, i64 -9223372036854775808>
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fmul <2 x double> %62, %30
  %69 = fmul <2 x double> %31, %61
  %70 = fmul <2 x double> %31, %62
  %71 = fadd <2 x double> %64, %67
  %72 = fadd <2 x double> %68, %71
  %73 = fadd <2 x double> %69, %72
  %74 = fadd <2 x double> %70, %73
  %75 = fadd <2 x double> %35, %63
  %76 = fsub <2 x double> %75, %35
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %35, %77
  %79 = fsub <2 x double> %63, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %34, %74
  %82 = fadd <2 x double> %80, %81
  %83 = fadd <2 x double> %75, %82
  %84 = fsub <2 x double> %75, %83
  %85 = fadd <2 x double> %82, %84
  %86 = fcmp olt <2 x double> %83, %15
  %87 = sext <2 x i1> %86 to <2 x i64>
  %88 = bitcast <2 x i64> %87 to <16 x i8>
  %89 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %88) #6
  %90 = icmp ne i32 %89, 65535
  %91 = add nuw nsw i32 %33, 1
  %92 = icmp ult i32 %91, 21
  %93 = and i1 %90, %92
  br i1 %93, label %32, label %94

; <label>:94:                                     ; preds = %32
  %95 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %12) #6
  %96 = fmul <2 x double> %95, %83
  %97 = fadd <2 x double> %83, %85
  %98 = fcmp oeq <2 x double> %97, %15
  %99 = sext <2 x i1> %98 to <2 x i64>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %96, <2 x double> zeroinitializer, <2 x double> %100) #6
  %102 = bitcast <2 x double> %101 to <2 x i64>
  %103 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = xor <2 x i64> %103, %102
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fcmp olt <2 x double> %13, %15
  %107 = sext <2 x i1> %106 to <2 x i64>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %105, <2 x double> %0, <2 x double> %108) #6
  %110 = fcmp oeq <2 x double> %15, zeroinitializer
  %111 = sext <2 x i1> %110 to <2 x i64>
  %112 = bitcast <2 x i64> %111 to <2 x double>
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %112) #6
  ret <2 x double> %113
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_remainderd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x20000000000000, double 0x20000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %14, <2 x double> %12) #6
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %12) #6
  %17 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %18 = fmul <2 x double> %15, <double 1.500000e+00, double 1.500000e+00>
  %19 = fmul <2 x double> %15, <double 5.000000e-01, double 5.000000e-01>
  %20 = bitcast <2 x double> %15 to <2 x i64>
  %21 = xor <2 x i64> %20, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = and <2 x i64> %21, <i64 -134217728, i64 -134217728>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fsub <2 x double> %22, %24
  br label %26

; <label>:26:                                     ; preds = %2, %55
  %27 = phi i32 [ 0, %2 ], [ %100, %55 ]
  %28 = phi <2 x i64> [ zeroinitializer, %2 ], [ %72, %55 ]
  %29 = phi <2 x double> [ zeroinitializer, %2 ], [ %99, %55 ]
  %30 = phi <2 x double> [ %13, %2 ], [ %97, %55 ]
  %31 = fmul <2 x double> %17, %30
  %32 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %31, i32 8) #6
  %33 = bitcast <2 x double> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -2, i64 -2>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = bitcast <2 x double> %30 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 9223372036854775807, i64 9223372036854775807>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fcmp ogt <2 x double> %18, %38
  %40 = sext <2 x i1> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %41) #6
  %43 = fcmp ogt <2 x double> %19, %38
  %44 = fcmp oeq <2 x double> %19, %38
  %45 = xor <2 x i64> %28, <i64 -1, i64 -1>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = select <2 x i1> %44, <2 x double> %46, <2 x double> zeroinitializer
  %48 = select <2 x i1> %43, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %47
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %42, <2 x double> zeroinitializer, <2 x double> %48) #6
  %50 = fcmp oeq <2 x double> %49, zeroinitializer
  %51 = sext <2 x i1> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %51 to <16 x i8>
  %53 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %52) #6
  %54 = icmp eq i32 %53, 65535
  br i1 %54, label %102, label %55

; <label>:55:                                     ; preds = %26
  %56 = fmul <2 x double> %49, %22
  %57 = bitcast <2 x double> %56 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 9223372036854775807, i64 9223372036854775807>
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fcmp oeq <2 x double> %59, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %61 = sext <2 x i1> %60 to <2 x i64>
  %62 = and <2 x i64> %36, <i64 -9223372036854775808, i64 -9223372036854775808>
  %63 = xor <2 x i64> %62, <i64 -4616189618054758400, i64 -4616189618054758400>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = fadd <2 x double> %49, %64
  %66 = bitcast <2 x i64> %61 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %49, <2 x double> %65, <2 x double> %66) #6
  %68 = fmul <2 x double> %67, <double 5.000000e-01, double 5.000000e-01>
  %69 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %68, i32 11) #6
  %70 = fcmp une <2 x double> %69, %68
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = xor <2 x i64> %28, %71
  %73 = bitcast <2 x double> %67 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %67, %75
  %77 = fmul <2 x double> %67, %22
  %78 = fmul <2 x double> %24, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %24
  %83 = fmul <2 x double> %25, %75
  %84 = fmul <2 x double> %25, %76
  %85 = fadd <2 x double> %78, %81
  %86 = fadd <2 x double> %82, %85
  %87 = fadd <2 x double> %83, %86
  %88 = fadd <2 x double> %84, %87
  %89 = fadd <2 x double> %30, %77
  %90 = fsub <2 x double> %89, %30
  %91 = fsub <2 x double> %89, %90
  %92 = fsub <2 x double> %30, %91
  %93 = fsub <2 x double> %77, %90
  %94 = fadd <2 x double> %93, %92
  %95 = fadd <2 x double> %29, %88
  %96 = fadd <2 x double> %94, %95
  %97 = fadd <2 x double> %89, %96
  %98 = fsub <2 x double> %89, %97
  %99 = fadd <2 x double> %96, %98
  %100 = add nuw nsw i32 %27, 1
  %101 = icmp ult i32 %100, 21
  br i1 %101, label %26, label %102

; <label>:102:                                    ; preds = %26, %55
  %103 = phi <2 x double> [ %30, %26 ], [ %97, %55 ]
  %104 = fmul <2 x double> %16, %103
  %105 = bitcast <2 x double> %104 to <2 x i64>
  %106 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = xor <2 x i64> %106, %105
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %110 = sext <2 x i1> %109 to <2 x i64>
  %111 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %112 = sext <2 x i1> %111 to <2 x i64>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %113) #6
  %115 = bitcast <2 x i64> %110 to <2 x double>
  %116 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %108, <2 x double> %114, <2 x double> %115) #6
  %117 = fcmp oeq <2 x double> %15, zeroinitializer
  %118 = sext <2 x i1> %117 to <2 x i64>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %116, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %119) #6
  ret <2 x double> %120
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_tgammad2_u10sse4(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %5 = load <2 x double>, <2 x double>* %4, align 16
  %6 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %7 = load <2 x double>, <2 x double>* %6, align 16
  %8 = fadd <2 x double> %5, %7
  %9 = fmul <2 x double> %8, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %10 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %9, i32 8) #6
  %11 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %10) #6
  %12 = fmul <2 x double> %10, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %13 = fadd <2 x double> %5, %12
  %14 = fsub <2 x double> %13, %5
  %15 = fsub <2 x double> %13, %14
  %16 = fsub <2 x double> %5, %15
  %17 = fsub <2 x double> %12, %14
  %18 = fadd <2 x double> %17, %16
  %19 = fadd <2 x double> %7, %18
  %20 = fmul <2 x double> %10, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %21 = fadd <2 x double> %20, %13
  %22 = fsub <2 x double> %21, %13
  %23 = fsub <2 x double> %21, %22
  %24 = fsub <2 x double> %13, %23
  %25 = fsub <2 x double> %20, %22
  %26 = fadd <2 x double> %25, %24
  %27 = fadd <2 x double> %26, %19
  %28 = bitcast <2 x double> %21 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %21, %30
  %32 = fmul <2 x double> %21, %21
  %33 = fmul <2 x double> %30, %30
  %34 = bitcast <2 x double> %32 to <2 x i64>
  %35 = xor <2 x i64> %34, <i64 -9223372036854775808, i64 -9223372036854775808>
  %36 = bitcast <2 x i64> %35 to <2 x double>
  %37 = fadd <2 x double> %30, %30
  %38 = fmul <2 x double> %37, %31
  %39 = fmul <2 x double> %31, %31
  %40 = fadd <2 x double> %27, %27
  %41 = fmul <2 x double> %21, %40
  %42 = fadd <2 x double> %33, %36
  %43 = fadd <2 x double> %42, %38
  %44 = fadd <2 x double> %39, %43
  %45 = fadd <2 x double> %41, %44
  %46 = and <2 x i64> %34, <i64 -134217728, i64 -134217728>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fsub <2 x double> %32, %47
  %49 = fmul <2 x double> %32, %32
  %50 = fmul <2 x double> %47, %47
  %51 = bitcast <2 x double> %49 to <2 x i64>
  %52 = xor <2 x i64> %51, <i64 -9223372036854775808, i64 -9223372036854775808>
  %53 = bitcast <2 x i64> %52 to <2 x double>
  %54 = fadd <2 x double> %47, %47
  %55 = fmul <2 x double> %54, %48
  %56 = fmul <2 x double> %48, %48
  %57 = fadd <2 x double> %45, %45
  %58 = fmul <2 x double> %32, %57
  %59 = fadd <2 x double> %50, %53
  %60 = fadd <2 x double> %59, %55
  %61 = fadd <2 x double> %56, %60
  %62 = fadd <2 x double> %61, %58
  %63 = fmul <2 x double> %49, %49
  %64 = fmul <2 x double> %21, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %65 = fadd <2 x double> %64, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %66 = fmul <2 x double> %21, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %67 = fadd <2 x double> %66, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %68 = fmul <2 x double> %21, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %69 = fadd <2 x double> %68, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %70 = fmul <2 x double> %32, %67
  %71 = fadd <2 x double> %69, %70
  %72 = fmul <2 x double> %21, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %73 = fadd <2 x double> %72, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %74 = fmul <2 x double> %21, <double 0x3F81111111111119, double 0x3F81111111111119>
  %75 = fadd <2 x double> %74, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %76 = fmul <2 x double> %32, %73
  %77 = fadd <2 x double> %75, %76
  %78 = fmul <2 x double> %49, %71
  %79 = fadd <2 x double> %77, %78
  %80 = fmul <2 x double> %65, %63
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %21, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %83 = fmul <2 x double> %30, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %84 = bitcast <2 x double> %82 to <2 x i64>
  %85 = xor <2 x i64> %84, <i64 -9223372036854775808, i64 -9223372036854775808>
  %86 = bitcast <2 x i64> %85 to <2 x double>
  %87 = fmul <2 x double> %31, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %88 = fmul <2 x double> %30, <double 0x3E25555554000000, double 0x3E25555554000000>
  %89 = fmul <2 x double> %31, <double 0x3E25555554000000, double 0x3E25555554000000>
  %90 = fmul <2 x double> %27, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %91 = fadd <2 x double> %83, %86
  %92 = fadd <2 x double> %87, %91
  %93 = fadd <2 x double> %88, %92
  %94 = fadd <2 x double> %89, %93
  %95 = fadd <2 x double> %90, %94
  %96 = fadd <2 x double> %82, <double 5.000000e-01, double 5.000000e-01>
  %97 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %96
  %98 = fadd <2 x double> %82, %97
  %99 = fadd <2 x double> %98, %95
  %100 = bitcast <2 x double> %96 to <2 x i64>
  %101 = and <2 x i64> %100, <i64 -134217728, i64 -134217728>
  %102 = bitcast <2 x i64> %101 to <2 x double>
  %103 = fsub <2 x double> %96, %102
  %104 = fmul <2 x double> %21, %96
  %105 = fmul <2 x double> %30, %102
  %106 = bitcast <2 x double> %104 to <2 x i64>
  %107 = xor <2 x i64> %106, <i64 -9223372036854775808, i64 -9223372036854775808>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fmul <2 x double> %103, %30
  %110 = fmul <2 x double> %31, %102
  %111 = fmul <2 x double> %31, %103
  %112 = fmul <2 x double> %96, %27
  %113 = fmul <2 x double> %21, %99
  %114 = fadd <2 x double> %105, %108
  %115 = fadd <2 x double> %109, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %111, %116
  %118 = fadd <2 x double> %112, %117
  %119 = fadd <2 x double> %113, %118
  %120 = fadd <2 x double> %104, <double 1.000000e+00, double 1.000000e+00>
  %121 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %120
  %122 = fadd <2 x double> %104, %121
  %123 = fadd <2 x double> %122, %119
  %124 = bitcast <2 x double> %120 to <2 x i64>
  %125 = and <2 x i64> %124, <i64 -134217728, i64 -134217728>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fsub <2 x double> %120, %126
  %128 = fmul <2 x double> %21, %120
  %129 = fmul <2 x double> %30, %126
  %130 = bitcast <2 x double> %128 to <2 x i64>
  %131 = xor <2 x i64> %130, <i64 -9223372036854775808, i64 -9223372036854775808>
  %132 = bitcast <2 x i64> %131 to <2 x double>
  %133 = fmul <2 x double> %127, %30
  %134 = fmul <2 x double> %31, %126
  %135 = fmul <2 x double> %31, %127
  %136 = fmul <2 x double> %120, %27
  %137 = fmul <2 x double> %21, %123
  %138 = fadd <2 x double> %129, %132
  %139 = fadd <2 x double> %133, %138
  %140 = fadd <2 x double> %134, %139
  %141 = fadd <2 x double> %135, %140
  %142 = fadd <2 x double> %136, %141
  %143 = fadd <2 x double> %142, %137
  %144 = fadd <2 x double> %128, <double 1.000000e+00, double 1.000000e+00>
  %145 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %144
  %146 = fadd <2 x double> %128, %145
  %147 = fadd <2 x double> %146, %143
  %148 = and <2 x i64> %51, <i64 -134217728, i64 -134217728>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fsub <2 x double> %49, %149
  %151 = bitcast <2 x double> %81 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 -134217728, i64 -134217728>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fsub <2 x double> %81, %153
  %155 = fmul <2 x double> %49, %81
  %156 = fmul <2 x double> %149, %153
  %157 = bitcast <2 x double> %155 to <2 x i64>
  %158 = xor <2 x i64> %157, <i64 -9223372036854775808, i64 -9223372036854775808>
  %159 = bitcast <2 x i64> %158 to <2 x double>
  %160 = fmul <2 x double> %150, %153
  %161 = fmul <2 x double> %154, %149
  %162 = fmul <2 x double> %150, %154
  %163 = fmul <2 x double> %81, %62
  %164 = fadd <2 x double> %156, %159
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %163, %167
  %169 = fadd <2 x double> %144, %155
  %170 = fsub <2 x double> %144, %169
  %171 = fadd <2 x double> %155, %170
  %172 = fadd <2 x double> %171, %147
  %173 = fadd <2 x double> %168, %172
  %174 = ashr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %175 = add <4 x i32> %174, <i32 1023, i32 1023, i32 undef, i32 0>
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %177 = and <4 x i32> %176, <i32 0, i32 -1, i32 0, i32 -1>
  %178 = shl <4 x i32> %177, <i32 20, i32 20, i32 20, i32 20>
  %179 = bitcast <4 x i32> %178 to <2 x double>
  %180 = fmul <2 x double> %169, %179
  %181 = add <4 x i32> %11, <i32 1023, i32 1023, i32 undef, i32 0>
  %182 = sub <4 x i32> %181, %174
  %183 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %184 = and <4 x i32> %183, <i32 0, i32 -1, i32 0, i32 -1>
  %185 = shl <4 x i32> %184, <i32 20, i32 20, i32 20, i32 20>
  %186 = bitcast <4 x i32> %185 to <2 x double>
  %187 = fmul <2 x double> %180, %186
  %188 = fmul <2 x double> %173, %179
  %189 = fmul <2 x double> %188, %186
  %190 = fcmp uge <2 x double> %5, <double -1.000000e+03, double -1.000000e+03>
  %191 = bitcast <2 x double> %187 to <2 x i64>
  %192 = sext <2 x i1> %190 to <2 x i64>
  %193 = and <2 x i64> %191, %192
  %194 = bitcast <2 x double> %189 to <2 x i64>
  %195 = and <2 x i64> %194, %192
  %196 = bitcast <2 x i64> %193 to <2 x double>
  %197 = bitcast <2 x i64> %195 to <2 x double>
  %198 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 0
  %199 = load <2 x double>, <2 x double>* %198, align 16
  %200 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %201 = load <2 x double>, <2 x double>* %200, align 16
  %202 = and <2 x i64> %193, <i64 -134217728, i64 -134217728>
  %203 = bitcast <2 x i64> %202 to <2 x double>
  %204 = fsub <2 x double> %196, %203
  %205 = bitcast <2 x double> %199 to <2 x i64>
  %206 = and <2 x i64> %205, <i64 -134217728, i64 -134217728>
  %207 = bitcast <2 x i64> %206 to <2 x double>
  %208 = fsub <2 x double> %199, %207
  %209 = fmul <2 x double> %199, %196
  %210 = fmul <2 x double> %207, %203
  %211 = bitcast <2 x double> %209 to <2 x i64>
  %212 = xor <2 x i64> %211, <i64 -9223372036854775808, i64 -9223372036854775808>
  %213 = bitcast <2 x i64> %212 to <2 x double>
  %214 = fmul <2 x double> %204, %207
  %215 = fmul <2 x double> %208, %203
  %216 = fmul <2 x double> %208, %204
  %217 = fmul <2 x double> %201, %196
  %218 = fmul <2 x double> %199, %197
  %219 = fadd <2 x double> %210, %213
  %220 = fadd <2 x double> %214, %219
  %221 = fadd <2 x double> %215, %220
  %222 = fadd <2 x double> %216, %221
  %223 = fadd <2 x double> %217, %222
  %224 = fadd <2 x double> %223, %218
  %225 = fadd <2 x double> %209, %224
  %226 = fcmp oeq <2 x double> %0, <double 0xFFF0000000000000, double 0xFFF0000000000000>
  %227 = fcmp olt <2 x double> %0, zeroinitializer
  %228 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #6
  %229 = fcmp oeq <2 x double> %228, %0
  %230 = and <2 x i1> %229, %227
  %231 = or <2 x i1> %230, %226
  %232 = bitcast <2 x double> %0 to <2 x i64>
  %233 = and <2 x i64> %232, <i64 9223372036854775807, i64 9223372036854775807>
  %234 = bitcast <2 x i64> %233 to <2 x double>
  %235 = fcmp une <2 x double> %234, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %236 = fcmp ord <2 x double> %0, zeroinitializer
  %237 = and <2 x i1> %235, %236
  %238 = and <2 x i1> %237, %227
  %239 = fcmp uno <2 x double> %225, zeroinitializer
  %240 = and <2 x i1> %238, %239
  %241 = or <2 x i1> %231, %240
  %242 = sext <2 x i1> %241 to <2 x i64>
  %243 = bitcast <2 x i64> %242 to <2 x double>
  %244 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %225, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %243) #6
  %245 = fcmp oeq <2 x double> %0, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %246 = or <2 x i1> %237, %245
  %247 = fcmp oge <2 x double> %0, <double 0x8010000000000000, double 0x8010000000000000>
  %248 = and <2 x i1> %246, %247
  %249 = fcmp oeq <2 x double> %0, zeroinitializer
  %250 = fcmp ogt <2 x double> %0, <double 2.000000e+02, double 2.000000e+02>
  %251 = or <2 x i1> %250, %249
  %252 = fcmp uno <2 x double> %244, zeroinitializer
  %253 = or <2 x i1> %251, %252
  %254 = and <2 x i1> %248, %253
  %255 = sext <2 x i1> %254 to <2 x i64>
  %256 = and <2 x i64> %232, <i64 -9223372036854775808, i64 -9223372036854775808>
  %257 = or <2 x i64> %256, <i64 9218868437227405312, i64 9218868437227405312>
  %258 = bitcast <2 x i64> %257 to <2 x double>
  %259 = bitcast <2 x i64> %255 to <2 x double>
  %260 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %244, <2 x double> %258, <2 x double> %259) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <2 x double> %260
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammak(%struct.dd2* noalias nocapture, <2 x double>) unnamed_addr #2 {
  %3 = bitcast <2 x double> %1 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = fcmp olt <2 x double> %5, <double 1.000000e-306, double 1.000000e-306>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fcmp olt <2 x double> %1, <double 5.000000e-01, double 5.000000e-01>
  %9 = sext <2 x i1> %8 to <2 x i64>
  %10 = xor <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %11 = bitcast <2 x i64> %10 to <2 x double>
  %12 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %13 = fadd <2 x double> %12, <double -1.000000e+00, double -1.000000e+00>
  %14 = fsub <2 x double> %12, %13
  %15 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %14
  %16 = fsub <2 x double> %11, %13
  %17 = fadd <2 x double> %16, %15
  %18 = bitcast <2 x i64> %9 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %12, <2 x double> %18) #6
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %17, <2 x double> %18) #6
  %21 = bitcast <2 x i64> %7 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %21) #6
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %20, <2 x double> zeroinitializer, <2 x double> %21) #6
  %24 = fcmp oge <2 x double> %22, <double 5.000000e-01, double 5.000000e-01>
  %25 = fcmp ole <2 x double> %22, <double 1.100000e+00, double 1.100000e+00>
  %26 = and <2 x i1> %25, %24
  %27 = sext <2 x i1> %26 to <2 x i64>
  %28 = fcmp oge <2 x double> %22, <double 2.300000e+00, double 2.300000e+00>
  %29 = sext <2 x i1> %28 to <2 x i64>
  %30 = fadd <2 x double> %22, <double 1.000000e+00, double 1.000000e+00>
  %31 = fsub <2 x double> %30, %22
  %32 = fsub <2 x double> %30, %31
  %33 = fsub <2 x double> %22, %32
  %34 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %31
  %35 = fadd <2 x double> %34, %33
  %36 = fadd <2 x double> %23, %35
  %37 = bitcast <2 x double> %30 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -134217728, i64 -134217728>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fsub <2 x double> %30, %39
  %41 = bitcast <2 x double> %22 to <2 x i64>
  %42 = and <2 x i64> %41, <i64 -134217728, i64 -134217728>
  %43 = bitcast <2 x i64> %42 to <2 x double>
  %44 = fsub <2 x double> %22, %43
  %45 = fmul <2 x double> %22, %30
  %46 = fmul <2 x double> %43, %39
  %47 = bitcast <2 x double> %45 to <2 x i64>
  %48 = xor <2 x i64> %47, <i64 -9223372036854775808, i64 -9223372036854775808>
  %49 = bitcast <2 x i64> %48 to <2 x double>
  %50 = fmul <2 x double> %40, %43
  %51 = fmul <2 x double> %44, %39
  %52 = fmul <2 x double> %44, %40
  %53 = fmul <2 x double> %30, %23
  %54 = fmul <2 x double> %22, %36
  %55 = fadd <2 x double> %46, %49
  %56 = fadd <2 x double> %50, %55
  %57 = fadd <2 x double> %51, %56
  %58 = fadd <2 x double> %52, %57
  %59 = fadd <2 x double> %53, %58
  %60 = fadd <2 x double> %54, %59
  %61 = fadd <2 x double> %45, %60
  %62 = fsub <2 x double> %45, %61
  %63 = fadd <2 x double> %60, %62
  %64 = fadd <2 x double> %22, <double 2.000000e+00, double 2.000000e+00>
  %65 = fsub <2 x double> %64, %22
  %66 = fsub <2 x double> %64, %65
  %67 = fsub <2 x double> %22, %66
  %68 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %65
  %69 = fadd <2 x double> %68, %67
  %70 = fadd <2 x double> %23, %69
  %71 = bitcast <2 x double> %64 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -134217728, i64 -134217728>
  %73 = bitcast <2 x i64> %72 to <2 x double>
  %74 = fsub <2 x double> %64, %73
  %75 = bitcast <2 x double> %61 to <2 x i64>
  %76 = and <2 x i64> %75, <i64 -134217728, i64 -134217728>
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fsub <2 x double> %61, %77
  %79 = fmul <2 x double> %64, %61
  %80 = fmul <2 x double> %73, %77
  %81 = bitcast <2 x double> %79 to <2 x i64>
  %82 = xor <2 x i64> %81, <i64 -9223372036854775808, i64 -9223372036854775808>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fmul <2 x double> %74, %77
  %85 = fmul <2 x double> %78, %73
  %86 = fmul <2 x double> %74, %78
  %87 = fmul <2 x double> %64, %63
  %88 = fmul <2 x double> %70, %61
  %89 = fadd <2 x double> %80, %83
  %90 = fadd <2 x double> %84, %89
  %91 = fadd <2 x double> %85, %90
  %92 = fadd <2 x double> %86, %91
  %93 = fadd <2 x double> %87, %92
  %94 = fadd <2 x double> %88, %93
  %95 = fadd <2 x double> %79, %94
  %96 = fsub <2 x double> %79, %95
  %97 = fadd <2 x double> %94, %96
  %98 = fadd <2 x double> %22, <double 3.000000e+00, double 3.000000e+00>
  %99 = fsub <2 x double> %98, %22
  %100 = fsub <2 x double> %98, %99
  %101 = fsub <2 x double> %22, %100
  %102 = fsub <2 x double> <double 3.000000e+00, double 3.000000e+00>, %99
  %103 = fadd <2 x double> %102, %101
  %104 = fadd <2 x double> %23, %103
  %105 = bitcast <2 x double> %98 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fsub <2 x double> %98, %107
  %109 = bitcast <2 x double> %95 to <2 x i64>
  %110 = and <2 x i64> %109, <i64 -134217728, i64 -134217728>
  %111 = bitcast <2 x i64> %110 to <2 x double>
  %112 = fsub <2 x double> %95, %111
  %113 = fmul <2 x double> %98, %95
  %114 = fmul <2 x double> %107, %111
  %115 = bitcast <2 x double> %113 to <2 x i64>
  %116 = xor <2 x i64> %115, <i64 -9223372036854775808, i64 -9223372036854775808>
  %117 = bitcast <2 x i64> %116 to <2 x double>
  %118 = fmul <2 x double> %108, %111
  %119 = fmul <2 x double> %112, %107
  %120 = fmul <2 x double> %108, %112
  %121 = fmul <2 x double> %98, %97
  %122 = fmul <2 x double> %104, %95
  %123 = fadd <2 x double> %114, %117
  %124 = fadd <2 x double> %118, %123
  %125 = fadd <2 x double> %119, %124
  %126 = fadd <2 x double> %120, %125
  %127 = fadd <2 x double> %121, %126
  %128 = fadd <2 x double> %122, %127
  %129 = fadd <2 x double> %113, %128
  %130 = fsub <2 x double> %113, %129
  %131 = fadd <2 x double> %128, %130
  %132 = fadd <2 x double> %22, <double 4.000000e+00, double 4.000000e+00>
  %133 = fsub <2 x double> %132, %22
  %134 = fsub <2 x double> %132, %133
  %135 = fsub <2 x double> %22, %134
  %136 = fsub <2 x double> <double 4.000000e+00, double 4.000000e+00>, %133
  %137 = fadd <2 x double> %136, %135
  %138 = fadd <2 x double> %23, %137
  %139 = bitcast <2 x double> %132 to <2 x i64>
  %140 = and <2 x i64> %139, <i64 -134217728, i64 -134217728>
  %141 = bitcast <2 x i64> %140 to <2 x double>
  %142 = fsub <2 x double> %132, %141
  %143 = bitcast <2 x double> %129 to <2 x i64>
  %144 = and <2 x i64> %143, <i64 -134217728, i64 -134217728>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = fsub <2 x double> %129, %145
  %147 = fmul <2 x double> %132, %129
  %148 = fmul <2 x double> %141, %145
  %149 = bitcast <2 x double> %147 to <2 x i64>
  %150 = xor <2 x i64> %149, <i64 -9223372036854775808, i64 -9223372036854775808>
  %151 = bitcast <2 x i64> %150 to <2 x double>
  %152 = fmul <2 x double> %142, %145
  %153 = fmul <2 x double> %146, %141
  %154 = fmul <2 x double> %142, %146
  %155 = fmul <2 x double> %132, %131
  %156 = fmul <2 x double> %138, %129
  %157 = fadd <2 x double> %148, %151
  %158 = fadd <2 x double> %152, %157
  %159 = fadd <2 x double> %153, %158
  %160 = fadd <2 x double> %154, %159
  %161 = fadd <2 x double> %155, %160
  %162 = fadd <2 x double> %156, %161
  %163 = fadd <2 x double> %147, %162
  %164 = fsub <2 x double> %147, %163
  %165 = fadd <2 x double> %162, %164
  %166 = fcmp ole <2 x double> %22, <double 7.000000e+00, double 7.000000e+00>
  %167 = and <2 x i1> %166, %28
  %168 = sext <2 x i1> %167 to <2 x i64>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %163, <2 x double> %169) #6
  %171 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %165, <2 x double> %169) #6
  %172 = fadd <2 x double> %22, <double 5.000000e+00, double 5.000000e+00>
  %173 = fsub <2 x double> %172, %22
  %174 = fsub <2 x double> %172, %173
  %175 = fsub <2 x double> %22, %174
  %176 = fsub <2 x double> <double 5.000000e+00, double 5.000000e+00>, %173
  %177 = fadd <2 x double> %176, %175
  %178 = fadd <2 x double> %23, %177
  %179 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> %172, <2 x double> %169) #6
  %180 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %23, <2 x double> %178, <2 x double> %169) #6
  %181 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %179
  %182 = bitcast <2 x i64> %27 to <2 x double>
  %183 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double -2.000000e+00, double -2.000000e+00>, <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double> %182) #6
  %184 = fadd <2 x double> %179, %183
  %185 = fsub <2 x double> %184, %179
  %186 = fsub <2 x double> %184, %185
  %187 = fsub <2 x double> %179, %186
  %188 = fsub <2 x double> %183, %185
  %189 = fadd <2 x double> %188, %187
  %190 = fadd <2 x double> %180, %189
  %191 = fadd <2 x double> %184, %190
  %192 = bitcast <2 x i64> %29 to <2 x double>
  %193 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %191, <2 x double> %181, <2 x double> %192) #6
  %194 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E72FDC6CB0D558F, double 0x3E72FDC6CB0D558F>, <2 x double> <double 0x403D7AAABC7A3EA1, double 0x403D7AAABC7A3EA1>, <2 x double> %182) #6
  %195 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %194, <2 x double> <double 0xC06399A52C414C0D, double 0xC06399A52C414C0D>, <2 x double> %192) #6
  %196 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E9AE7D44E1AB8F6, double 0x3E9AE7D44E1AB8F6>, <2 x double> <double 0x406004ABC79048B9, double 0x406004ABC79048B9>, <2 x double> %182) #6
  %197 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %196, <2 x double> <double 0x3FF1EED0A9756022, double 0x3FF1EED0A9756022>, <2 x double> %192) #6
  %198 = fmul <2 x double> %193, %195
  %199 = fadd <2 x double> %198, %197
  %200 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB1734224875A66, double 0x3EB1734224875A66>, <2 x double> <double 0x40705C120870277A, double 0x40705C120870277A>, <2 x double> %182) #6
  %201 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %200, <2 x double> <double 0x402ACBC4BFE43E00, double 0x402ACBC4BFE43E00>, <2 x double> %192) #6
  %202 = fmul <2 x double> %193, %199
  %203 = fadd <2 x double> %202, %201
  %204 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB94E4F6E12FEE0, double 0x3EB94E4F6E12FEE0>, <2 x double> <double 0x40748B3C8FCAD7FF, double 0x40748B3C8FCAD7FF>, <2 x double> %182) #6
  %205 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %204, <2 x double> <double 0xBFBDD5FA0E771B94, double 0xBFBDD5FA0E771B94>, <2 x double> %192) #6
  %206 = fmul <2 x double> %193, %203
  %207 = fadd <2 x double> %206, %205
  %208 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB59C884A045AF0, double 0x3EB59C884A045AF0>, <2 x double> <double 0x40719D088C23DF05, double 0x40719D088C23DF05>, <2 x double> %182) #6
  %209 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %208, <2 x double> <double 0xBFF644D13921C967, double 0xBFF644D13921C967>, <2 x double> %192) #6
  %210 = fmul <2 x double> %193, %207
  %211 = fadd <2 x double> %210, %209
  %212 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E9FD66B0AC39DFF, double 0x3E9FD66B0AC39DFF>, <2 x double> <double 0x40659BBECDBF523B, double 0x40659BBECDBF523B>, <2 x double> %182) #6
  %213 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %212, <2 x double> <double 0x3F8ED5BD48E4F389, double 0x3F8ED5BD48E4F389>, <2 x double> %192) #6
  %214 = fmul <2 x double> %193, %211
  %215 = fadd <2 x double> %214, %213
  %216 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE71986F7AC19AC9, double 0xBE71986F7AC19AC9>, <2 x double> <double 0x40535F30DE19A3FA, double 0x40535F30DE19A3FA>, <2 x double> %182) #6
  %217 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %216, <2 x double> <double 0x3FC6FB2BA98C8BC4, double 0x3FC6FB2BA98C8BC4>, <2 x double> %192) #6
  %218 = fmul <2 x double> %193, %215
  %219 = fadd <2 x double> %218, %217
  %220 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE956718120CF4B7, double 0xBE956718120CF4B7>, <2 x double> <double 0x403920E9BAC7B07E, double 0x403920E9BAC7B07E>, <2 x double> %182) #6
  %221 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %220, <2 x double> <double 0xBF645497F334CD1D, double 0xBF645497F334CD1D>, <2 x double> %192) #6
  %222 = fmul <2 x double> %193, %219
  %223 = fadd <2 x double> %222, %221
  %224 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E823D16D999C674, double 0x3E823D16D999C674>, <2 x double> <double 0x40171131F32ACF74, double 0x40171131F32ACF74>, <2 x double> %182) #6
  %225 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %224, <2 x double> <double 0xBF9E3C8E8BED86BB, double 0xBF9E3C8E8BED86BB>, <2 x double> %192) #6
  %226 = fmul <2 x double> %193, %223
  %227 = fadd <2 x double> %226, %225
  %228 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE9D26D12E073976, double 0xBE9D26D12E073976>, <2 x double> <double 0x3FE743CF466BEB1B, double 0x3FE743CF466BEB1B>, <2 x double> %182) #6
  %229 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %228, <2 x double> <double 0x3F41B33B019B3E6F, double 0x3F41B33B019B3E6F>, <2 x double> %192) #6
  %230 = fmul <2 x double> %193, %227
  %231 = fadd <2 x double> %230, %229
  %232 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EB050C384661C46, double 0x3EB050C384661C46>, <2 x double> <double 0x3FB57EDE06D746AF, double 0x3FB57EDE06D746AF>, <2 x double> %182) #6
  %233 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %232, <2 x double> <double 0x3F7A3A699F4A401B, double 0x3F7A3A699F4A401B>, <2 x double> %192) #6
  %234 = fmul <2 x double> %193, %231
  %235 = fadd <2 x double> %234, %233
  %236 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEC1162DF3C28D5A, double 0xBEC1162DF3C28D5A>, <2 x double> <double 0xBFB50586EF5B83AC, double 0xBFB50586EF5B83AC>, <2 x double> %182) #6
  %237 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %236, <2 x double> <double 0xBF254D241144693F, double 0xBF254D241144693F>, <2 x double> %192) #6
  %238 = fmul <2 x double> %193, %235
  %239 = fadd <2 x double> %238, %237
  %240 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3ED257DCE81F6BB4, double 0x3ED257DCE81F6BB4>, <2 x double> <double 0x3FB17B57DDB9E32F, double 0x3FB17B57DDB9E32F>, <2 x double> %182) #6
  %241 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %240, <2 x double> <double 0xBF5F5DBCAF756CDE, double 0xBF5F5DBCAF756CDE>, <2 x double> %192) #6
  %242 = fmul <2 x double> %193, %239
  %243 = fadd <2 x double> %242, %241
  %244 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEE3CC0905ECA8BE, double 0xBEE3CC0905ECA8BE>, <2 x double> <double 0xBFB3BE73A742EECE, double 0xBFB3BE73A742EECE>, <2 x double> %182) #6
  %245 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %244, <2 x double> <double 0x3F12E31F9B7913EA, double 0x3F12E31F9B7913EA>, <2 x double> %192) #6
  %246 = fmul <2 x double> %193, %243
  %247 = fadd <2 x double> %246, %245
  %248 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EF580E0E2726AC9, double 0x3EF580E0E2726AC9>, <2 x double> <double 0x3FB5580F0BB1F8CA, double 0x3FB5580F0BB1F8CA>, <2 x double> %182) #6
  %249 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %248, <2 x double> <double 0x3F4B8239C670E690, double 0x3F4B8239C670E690>, <2 x double> %192) #6
  %250 = fmul <2 x double> %193, %247
  %251 = fadd <2 x double> %250, %249
  %252 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF078DE48A7816D9, double 0xBF078DE48A7816D9>, <2 x double> <double 0xBFB74879E96382CA, double 0xBFB74879E96382CA>, <2 x double> %182) #6
  %253 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %252, <2 x double> <double 0xBF0B1D75D3346711, double 0xBF0B1D75D3346711>, <2 x double> %192) #6
  %254 = fmul <2 x double> %193, %251
  %255 = fadd <2 x double> %254, %253
  %256 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F1A127B0D3DBB7D, double 0x3F1A127B0D3DBB7D>, <2 x double> <double 0x3FB9A0212305C3B9, double 0x3FB9A0212305C3B9>, <2 x double> %182) #6
  %257 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %256, <2 x double> <double 0xBF436773BDB97B48, double 0xBF436773BDB97B48>, <2 x double> %192) #6
  %258 = fmul <2 x double> %193, %255
  %259 = fadd <2 x double> %258, %257
  %260 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF2D3FD4CA9D6B1F, double 0xBF2D3FD4CA9D6B1F>, <2 x double> <double 0xBFBC80675DF4ED19, double 0xBFBC80675DF4ED19>, <2 x double> %182) #6
  %261 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %260, <2 x double> <double 0x3F1247604839C038, double 0x3F1247604839C038>, <2 x double> %192) #6
  %262 = fmul <2 x double> %193, %259
  %263 = fadd <2 x double> %262, %261
  %264 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F40B36AF85EF785, double 0x3F40B36AF85EF785>, <2 x double> <double 0x3FC010B3663D08D8, double 0x3FC010B3663D08D8>, <2 x double> %182) #6
  %265 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %264, <2 x double> <double 0x3F49B0FF6874F2C4, double 0x3F49B0FF6874F2C4>, <2 x double> %192) #6
  %266 = fmul <2 x double> %193, %263
  %267 = fadd <2 x double> %266, %265
  %268 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF538AC5C2BD10CA, double 0xBF538AC5C2BD10CA>, <2 x double> <double 0xBFC2703A1DD72363, double 0xBFC2703A1DD72363>, <2 x double> %182) #6
  %269 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %268, <2 x double> <double 0xBF2E13CE465FA859, double 0xBF2E13CE465FA859>, <2 x double> %192) #6
  %270 = fmul <2 x double> %193, %267
  %271 = fadd <2 x double> %270, %269
  %272 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F67ADD6EADB7260, double 0x3F67ADD6EADB7260>, <2 x double> <double 0x3FC5B40CB1047E2E, double 0x3FC5B40CB1047E2E>, <2 x double> %182) #6
  %273 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %272, <2 x double> <double 0xBF65F7268EDAB4C8, double 0xBF65F7268EDAB4C8>, <2 x double> %192) #6
  %274 = fmul <2 x double> %193, %271
  %275 = fadd <2 x double> %274, %273
  %276 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF7E404FC218F817, double 0xBF7E404FC218F817>, <2 x double> <double 0xBFCA8B9C17AA3C08, double 0xBFCA8B9C17AA3C08>, <2 x double> %182) #6
  %277 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %276, <2 x double> <double 0x3F6C71C71C71C71C, double 0x3F6C71C71C71C71C>, <2 x double> %192) #6
  %278 = fmul <2 x double> %193, %275
  %279 = fadd <2 x double> %278, %277
  %280 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F951322AC7D8485, double 0x3F951322AC7D8485>, <2 x double> <double 0x3FD151322AC7D813, double 0x3FD151322AC7D813>, <2 x double> %182) #6
  %281 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %280, <2 x double> <double 0x3FB5555555555555, double 0x3FB5555555555555>, <2 x double> %192) #6
  %282 = fmul <2 x double> %193, %279
  %283 = fadd <2 x double> %282, %281
  %284 = fadd <2 x double> %179, <double -5.000000e-01, double -5.000000e-01>
  %285 = fsub <2 x double> %284, %179
  %286 = fsub <2 x double> %284, %285
  %287 = fsub <2 x double> %179, %286
  %288 = fsub <2 x double> <double -5.000000e-01, double -5.000000e-01>, %285
  %289 = fadd <2 x double> %288, %287
  %290 = fadd <2 x double> %180, %289
  %291 = fmul <2 x double> %179, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %292 = fcmp olt <2 x double> %291, <double 0x2D30000000000000, double 0x2D30000000000000>
  %293 = sext <2 x i1> %292 to <2 x i64>
  %294 = fmul <2 x double> %291, <double 0x52B0000000000000, double 0x52B0000000000000>
  %295 = bitcast <2 x i64> %293 to <2 x double>
  %296 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %291, <2 x double> %294, <2 x double> %295) #6
  %297 = bitcast <2 x double> %296 to <4 x i32>
  %298 = shufflevector <4 x i32> %297, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %299 = and <4 x i32> %298, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %300 = lshr exact <4 x i32> %299, <i32 20, i32 20, i32 20, i32 20>
  %301 = bitcast <2 x i64> %293 to <4 x i32>
  %302 = shufflevector <4 x i32> %301, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %303 = bitcast <4 x i32> %302 to <16 x i8>
  %304 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %303) #6
  %305 = bitcast <16 x i8> %304 to <4 x i32>
  %306 = sub <4 x i32> %300, %305
  %307 = sub <4 x i32> zeroinitializer, %306
  %308 = ashr <4 x i32> %307, <i32 1, i32 1, i32 1, i32 1>
  %309 = add <4 x i32> %308, <i32 1023, i32 1023, i32 undef, i32 0>
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %311 = and <4 x i32> %310, <i32 0, i32 -1, i32 0, i32 -1>
  %312 = shl <4 x i32> %311, <i32 20, i32 20, i32 20, i32 20>
  %313 = bitcast <4 x i32> %312 to <2 x double>
  %314 = fmul <2 x double> %179, %313
  %315 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %306
  %316 = sub <4 x i32> %315, %308
  %317 = shufflevector <4 x i32> %316, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %318 = and <4 x i32> %317, <i32 0, i32 -1, i32 0, i32 -1>
  %319 = shl <4 x i32> %318, <i32 20, i32 20, i32 20, i32 20>
  %320 = bitcast <4 x i32> %319 to <2 x double>
  %321 = fmul <2 x double> %314, %320
  %322 = fmul <2 x double> %180, %313
  %323 = fmul <2 x double> %322, %320
  %324 = fadd <2 x double> %321, <double -1.000000e+00, double -1.000000e+00>
  %325 = fsub <2 x double> %324, %321
  %326 = fsub <2 x double> %324, %325
  %327 = fsub <2 x double> %321, %326
  %328 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %325
  %329 = fadd <2 x double> %328, %327
  %330 = fadd <2 x double> %323, %329
  %331 = fadd <2 x double> %321, <double 1.000000e+00, double 1.000000e+00>
  %332 = fsub <2 x double> %331, %321
  %333 = fsub <2 x double> %331, %332
  %334 = fsub <2 x double> %321, %333
  %335 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %332
  %336 = fadd <2 x double> %335, %334
  %337 = fadd <2 x double> %323, %336
  %338 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %331
  %339 = bitcast <2 x double> %331 to <2 x i64>
  %340 = and <2 x i64> %339, <i64 -134217728, i64 -134217728>
  %341 = bitcast <2 x i64> %340 to <2 x double>
  %342 = fsub <2 x double> %331, %341
  %343 = bitcast <2 x double> %338 to <2 x i64>
  %344 = and <2 x i64> %343, <i64 -134217728, i64 -134217728>
  %345 = bitcast <2 x i64> %344 to <2 x double>
  %346 = fsub <2 x double> %338, %345
  %347 = bitcast <2 x double> %324 to <2 x i64>
  %348 = and <2 x i64> %347, <i64 -134217728, i64 -134217728>
  %349 = bitcast <2 x i64> %348 to <2 x double>
  %350 = fsub <2 x double> %324, %349
  %351 = fmul <2 x double> %324, %338
  %352 = fmul <2 x double> %349, %345
  %353 = fsub <2 x double> %352, %351
  %354 = fmul <2 x double> %346, %349
  %355 = fmul <2 x double> %350, %345
  %356 = fmul <2 x double> %350, %346
  %357 = fmul <2 x double> %341, %345
  %358 = fmul <2 x double> %346, %341
  %359 = fmul <2 x double> %342, %345
  %360 = fmul <2 x double> %342, %346
  %361 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %357
  %362 = fsub <2 x double> %361, %358
  %363 = fsub <2 x double> %362, %359
  %364 = fsub <2 x double> %363, %360
  %365 = fmul <2 x double> %351, %364
  %366 = fadd <2 x double> %353, %354
  %367 = fadd <2 x double> %355, %366
  %368 = fadd <2 x double> %356, %367
  %369 = fadd <2 x double> %368, %365
  %370 = fmul <2 x double> %351, %337
  %371 = fsub <2 x double> %330, %370
  %372 = fmul <2 x double> %338, %371
  %373 = fadd <2 x double> %372, %369
  %374 = bitcast <2 x double> %351 to <2 x i64>
  %375 = and <2 x i64> %374, <i64 -134217728, i64 -134217728>
  %376 = bitcast <2 x i64> %375 to <2 x double>
  %377 = fsub <2 x double> %351, %376
  %378 = fmul <2 x double> %351, %351
  %379 = fmul <2 x double> %376, %376
  %380 = bitcast <2 x double> %378 to <2 x i64>
  %381 = xor <2 x i64> %380, <i64 -9223372036854775808, i64 -9223372036854775808>
  %382 = bitcast <2 x i64> %381 to <2 x double>
  %383 = fadd <2 x double> %376, %376
  %384 = fmul <2 x double> %383, %377
  %385 = fmul <2 x double> %377, %377
  %386 = fadd <2 x double> %373, %373
  %387 = fmul <2 x double> %351, %386
  %388 = fadd <2 x double> %379, %382
  %389 = fadd <2 x double> %388, %384
  %390 = fadd <2 x double> %385, %389
  %391 = fadd <2 x double> %390, %387
  %392 = fmul <2 x double> %378, %378
  %393 = fmul <2 x double> %392, %392
  %394 = fmul <2 x double> %378, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %395 = fadd <2 x double> %394, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %396 = fmul <2 x double> %392, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %397 = fadd <2 x double> %396, %395
  %398 = fmul <2 x double> %378, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %399 = fadd <2 x double> %398, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %400 = fmul <2 x double> %378, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %401 = fadd <2 x double> %400, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %402 = fmul <2 x double> %392, %399
  %403 = fadd <2 x double> %401, %402
  %404 = fmul <2 x double> %393, %397
  %405 = fadd <2 x double> %404, %403
  %406 = fmul <2 x double> %378, %405
  %407 = fadd <2 x double> %406, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %408 = shufflevector <4 x i32> %306, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %409 = sitofp <2 x i32> %408 to <2 x double>
  %410 = bitcast <2 x double> %409 to <2 x i64>
  %411 = and <2 x i64> %410, <i64 -134217728, i64 -134217728>
  %412 = bitcast <2 x i64> %411 to <2 x double>
  %413 = fsub <2 x double> %409, %412
  %414 = fmul <2 x double> %409, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %415 = fmul <2 x double> %412, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %416 = bitcast <2 x double> %414 to <2 x i64>
  %417 = xor <2 x i64> %416, <i64 -9223372036854775808, i64 -9223372036854775808>
  %418 = bitcast <2 x i64> %417 to <2 x double>
  %419 = fmul <2 x double> %412, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %420 = fmul <2 x double> %413, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %421 = fmul <2 x double> %413, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %422 = fmul <2 x double> %409, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %423 = fadd <2 x double> %415, %418
  %424 = fadd <2 x double> %419, %423
  %425 = fadd <2 x double> %420, %424
  %426 = fadd <2 x double> %421, %425
  %427 = fadd <2 x double> %422, %426
  %428 = fmul <2 x double> %351, <double 2.000000e+00, double 2.000000e+00>
  %429 = fmul <2 x double> %373, <double 2.000000e+00, double 2.000000e+00>
  %430 = fadd <2 x double> %414, %428
  %431 = fsub <2 x double> %414, %430
  %432 = fadd <2 x double> %428, %431
  %433 = fadd <2 x double> %427, %432
  %434 = fadd <2 x double> %433, %429
  %435 = and <2 x i64> %380, <i64 -134217728, i64 -134217728>
  %436 = bitcast <2 x i64> %435 to <2 x double>
  %437 = fsub <2 x double> %378, %436
  %438 = fmul <2 x double> %351, %378
  %439 = fmul <2 x double> %376, %436
  %440 = bitcast <2 x double> %438 to <2 x i64>
  %441 = xor <2 x i64> %440, <i64 -9223372036854775808, i64 -9223372036854775808>
  %442 = bitcast <2 x i64> %441 to <2 x double>
  %443 = fmul <2 x double> %437, %376
  %444 = fmul <2 x double> %377, %436
  %445 = fmul <2 x double> %377, %437
  %446 = fmul <2 x double> %378, %373
  %447 = fmul <2 x double> %351, %391
  %448 = fadd <2 x double> %439, %442
  %449 = fadd <2 x double> %443, %448
  %450 = fadd <2 x double> %444, %449
  %451 = fadd <2 x double> %445, %450
  %452 = fadd <2 x double> %451, %446
  %453 = fadd <2 x double> %452, %447
  %454 = and <2 x i64> %440, <i64 -134217728, i64 -134217728>
  %455 = bitcast <2 x i64> %454 to <2 x double>
  %456 = fsub <2 x double> %438, %455
  %457 = bitcast <2 x double> %407 to <2 x i64>
  %458 = and <2 x i64> %457, <i64 -134217728, i64 -134217728>
  %459 = bitcast <2 x i64> %458 to <2 x double>
  %460 = fsub <2 x double> %407, %459
  %461 = fmul <2 x double> %438, %407
  %462 = fmul <2 x double> %455, %459
  %463 = bitcast <2 x double> %461 to <2 x i64>
  %464 = xor <2 x i64> %463, <i64 -9223372036854775808, i64 -9223372036854775808>
  %465 = bitcast <2 x i64> %464 to <2 x double>
  %466 = fmul <2 x double> %456, %459
  %467 = fmul <2 x double> %460, %455
  %468 = fmul <2 x double> %456, %460
  %469 = fmul <2 x double> %407, %453
  %470 = fadd <2 x double> %462, %465
  %471 = fadd <2 x double> %466, %470
  %472 = fadd <2 x double> %467, %471
  %473 = fadd <2 x double> %468, %472
  %474 = fadd <2 x double> %469, %473
  %475 = fadd <2 x double> %430, %461
  %476 = fsub <2 x double> %430, %475
  %477 = fadd <2 x double> %461, %476
  %478 = fadd <2 x double> %477, %434
  %479 = fadd <2 x double> %478, %474
  %480 = bitcast <2 x double> %284 to <2 x i64>
  %481 = and <2 x i64> %480, <i64 -134217728, i64 -134217728>
  %482 = bitcast <2 x i64> %481 to <2 x double>
  %483 = fsub <2 x double> %284, %482
  %484 = bitcast <2 x double> %475 to <2 x i64>
  %485 = and <2 x i64> %484, <i64 -134217728, i64 -134217728>
  %486 = bitcast <2 x i64> %485 to <2 x double>
  %487 = fsub <2 x double> %475, %486
  %488 = fmul <2 x double> %284, %475
  %489 = fmul <2 x double> %482, %486
  %490 = bitcast <2 x double> %488 to <2 x i64>
  %491 = xor <2 x i64> %490, <i64 -9223372036854775808, i64 -9223372036854775808>
  %492 = bitcast <2 x i64> %491 to <2 x double>
  %493 = fmul <2 x double> %483, %486
  %494 = fmul <2 x double> %487, %482
  %495 = fmul <2 x double> %483, %487
  %496 = fmul <2 x double> %284, %479
  %497 = fmul <2 x double> %290, %475
  %498 = fadd <2 x double> %489, %492
  %499 = fadd <2 x double> %493, %498
  %500 = fadd <2 x double> %494, %499
  %501 = fadd <2 x double> %495, %500
  %502 = fadd <2 x double> %501, %496
  %503 = fadd <2 x double> %497, %502
  %504 = bitcast <2 x double> %179 to <2 x i64>
  %505 = xor <2 x i64> %504, <i64 -9223372036854775808, i64 -9223372036854775808>
  %506 = bitcast <2 x double> %180 to <2 x i64>
  %507 = xor <2 x i64> %506, <i64 -9223372036854775808, i64 -9223372036854775808>
  %508 = bitcast <2 x i64> %505 to <2 x double>
  %509 = bitcast <2 x i64> %507 to <2 x double>
  %510 = fadd <2 x double> %488, %508
  %511 = fsub <2 x double> %510, %488
  %512 = fsub <2 x double> %510, %511
  %513 = fsub <2 x double> %488, %512
  %514 = fsub <2 x double> %508, %511
  %515 = fadd <2 x double> %514, %513
  %516 = fadd <2 x double> %503, %509
  %517 = fadd <2 x double> %515, %516
  %518 = fadd <2 x double> %510, <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>
  %519 = fsub <2 x double> %518, %510
  %520 = fsub <2 x double> %518, %519
  %521 = fsub <2 x double> %510, %520
  %522 = fsub <2 x double> <double 0x3FED67F1C864BEB5, double 0x3FED67F1C864BEB5>, %519
  %523 = fadd <2 x double> %522, %521
  %524 = fadd <2 x double> %517, <double 0xBC865B5A1B7FF5DF, double 0xBC865B5A1B7FF5DF>
  %525 = fadd <2 x double> %523, %524
  %526 = bitcast <2 x double> %283 to <2 x i64>
  %527 = and <2 x i64> %526, <i64 -134217728, i64 -134217728>
  %528 = bitcast <2 x i64> %527 to <2 x double>
  %529 = fsub <2 x double> %283, %528
  %530 = bitcast <2 x double> %193 to <2 x i64>
  %531 = and <2 x i64> %530, <i64 -134217728, i64 -134217728>
  %532 = bitcast <2 x i64> %531 to <2 x double>
  %533 = fsub <2 x double> %193, %532
  %534 = fmul <2 x double> %193, %283
  %535 = fmul <2 x double> %532, %528
  %536 = bitcast <2 x double> %534 to <2 x i64>
  %537 = xor <2 x i64> %536, <i64 -9223372036854775808, i64 -9223372036854775808>
  %538 = bitcast <2 x i64> %537 to <2 x double>
  %539 = fmul <2 x double> %529, %532
  %540 = fmul <2 x double> %533, %528
  %541 = fmul <2 x double> %533, %529
  %542 = fadd <2 x double> %535, %538
  %543 = fadd <2 x double> %539, %542
  %544 = fadd <2 x double> %540, %543
  %545 = fadd <2 x double> %541, %544
  %546 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB13E001A557607, double 0xBFB13E001A557607>, <2 x double> <double 0xBFD9A4D55BEAB2D8, double 0xBFD9A4D55BEAB2D8>, <2 x double> %182) #6
  %547 = fadd <2 x double> %534, %546
  %548 = fsub <2 x double> %547, %534
  %549 = fsub <2 x double> %547, %548
  %550 = fsub <2 x double> %534, %549
  %551 = fsub <2 x double> %546, %548
  %552 = fadd <2 x double> %551, %550
  %553 = fadd <2 x double> %552, %545
  %554 = bitcast <2 x double> %547 to <2 x i64>
  %555 = and <2 x i64> %554, <i64 -134217728, i64 -134217728>
  %556 = bitcast <2 x i64> %555 to <2 x double>
  %557 = fsub <2 x double> %547, %556
  %558 = fmul <2 x double> %193, %547
  %559 = fmul <2 x double> %532, %556
  %560 = bitcast <2 x double> %558 to <2 x i64>
  %561 = xor <2 x i64> %560, <i64 -9223372036854775808, i64 -9223372036854775808>
  %562 = bitcast <2 x i64> %561 to <2 x double>
  %563 = fmul <2 x double> %557, %532
  %564 = fmul <2 x double> %533, %556
  %565 = fmul <2 x double> %533, %557
  %566 = fmul <2 x double> %193, %553
  %567 = fadd <2 x double> %559, %562
  %568 = fadd <2 x double> %563, %567
  %569 = fadd <2 x double> %564, %568
  %570 = fadd <2 x double> %565, %569
  %571 = fadd <2 x double> %566, %570
  %572 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FD4A34CC4A60FA6, double 0x3FD4A34CC4A60FA6>, <2 x double> <double 0x3FEA51A6625307D3, double 0x3FEA51A6625307D3>, <2 x double> %182) #6
  %573 = fadd <2 x double> %572, %558
  %574 = fsub <2 x double> %573, %558
  %575 = fsub <2 x double> %573, %574
  %576 = fsub <2 x double> %558, %575
  %577 = fsub <2 x double> %572, %574
  %578 = fadd <2 x double> %577, %576
  %579 = fadd <2 x double> %578, %571
  %580 = bitcast <2 x double> %573 to <2 x i64>
  %581 = and <2 x i64> %580, <i64 -134217728, i64 -134217728>
  %582 = bitcast <2 x i64> %581 to <2 x double>
  %583 = fsub <2 x double> %573, %582
  %584 = fmul <2 x double> %193, %573
  %585 = fmul <2 x double> %532, %582
  %586 = bitcast <2 x double> %584 to <2 x i64>
  %587 = xor <2 x i64> %586, <i64 -9223372036854775808, i64 -9223372036854775808>
  %588 = bitcast <2 x i64> %587 to <2 x double>
  %589 = fmul <2 x double> %583, %532
  %590 = fmul <2 x double> %533, %582
  %591 = fmul <2 x double> %533, %583
  %592 = fmul <2 x double> %193, %579
  %593 = fadd <2 x double> %585, %588
  %594 = fadd <2 x double> %589, %593
  %595 = fadd <2 x double> %590, %594
  %596 = fadd <2 x double> %591, %595
  %597 = fadd <2 x double> %596, %592
  %598 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FDB0EE6072093CE, double 0x3FDB0EE6072093CE>, <2 x double> <double 0xBFE2788CFC6FB619, double 0xBFE2788CFC6FB619>, <2 x double> %182) #6
  %599 = fadd <2 x double> %598, %584
  %600 = fsub <2 x double> %599, %584
  %601 = fsub <2 x double> %599, %600
  %602 = fsub <2 x double> %584, %601
  %603 = fsub <2 x double> %598, %600
  %604 = fadd <2 x double> %603, %602
  %605 = fadd <2 x double> %604, %597
  %606 = bitcast <2 x double> %599 to <2 x i64>
  %607 = and <2 x i64> %606, <i64 -134217728, i64 -134217728>
  %608 = bitcast <2 x i64> %607 to <2 x double>
  %609 = fsub <2 x double> %599, %608
  %610 = fmul <2 x double> %193, %599
  %611 = fmul <2 x double> %532, %608
  %612 = bitcast <2 x double> %610 to <2 x i64>
  %613 = xor <2 x i64> %612, <i64 -9223372036854775808, i64 -9223372036854775808>
  %614 = bitcast <2 x i64> %613 to <2 x double>
  %615 = fmul <2 x double> %609, %532
  %616 = fmul <2 x double> %533, %608
  %617 = fmul <2 x double> %533, %609
  %618 = fmul <2 x double> %193, %605
  %619 = fadd <2 x double> %611, %614
  %620 = fadd <2 x double> %615, %619
  %621 = fadd <2 x double> %616, %620
  %622 = fadd <2 x double> %617, %621
  %623 = fadd <2 x double> %622, %618
  %624 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %610, <2 x double> %518, <2 x double> %192) #6
  %625 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %623, <2 x double> %525, <2 x double> %192) #6
  %626 = fadd <2 x double> %534, <double 1.000000e+00, double 1.000000e+00>
  %627 = fsub <2 x double> %626, %534
  %628 = fsub <2 x double> %626, %627
  %629 = fsub <2 x double> %534, %628
  %630 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %627
  %631 = fadd <2 x double> %630, %629
  %632 = fadd <2 x double> %631, %545
  %633 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %626, <2 x double> %192) #6
  %634 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %632, <2 x double> %192) #6
  %635 = bitcast <2 x double> %624 to <2 x i64>
  %636 = xor <2 x i64> %635, <i64 -9223372036854775808, i64 -9223372036854775808>
  %637 = bitcast <2 x double> %625 to <2 x i64>
  %638 = xor <2 x i64> %637, <i64 -9223372036854775808, i64 -9223372036854775808>
  %639 = bitcast <2 x i64> %636 to <2 x double>
  %640 = bitcast <2 x i64> %638 to <2 x double>
  %641 = fadd <2 x double> %639, <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>
  %642 = fadd <2 x double> %641, <double 0xBFF250D048E7A1BD, double 0xBFF250D048E7A1BD>
  %643 = fsub <2 x double> %641, %642
  %644 = fsub <2 x double> <double 0x3FF250D048E7A1BD, double 0x3FF250D048E7A1BD>, %643
  %645 = fsub <2 x double> %639, %642
  %646 = fadd <2 x double> %645, %644
  %647 = fadd <2 x double> %640, <double 0x3C67ABF2AD8D5088, double 0x3C67ABF2AD8D5088>
  %648 = fadd <2 x double> %647, %646
  %649 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %624, <2 x double> %641, <2 x double> %18) #6
  %650 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %625, <2 x double> %648, <2 x double> %18) #6
  %651 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %649, <2 x double> <double 0x4054CB5ECF0A9650, double 0x4054CB5ECF0A9650>, <2 x double> %21) #6
  %652 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %650, <2 x double> <double 0x3CF0886A2BC2F41E, double 0x3CF0886A2BC2F41E>, <2 x double> %21) #6
  %653 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %633, <2 x double> %170, <2 x double> %18) #6
  %654 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %634, <2 x double> %171, <2 x double> %18) #6
  %655 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %653, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %21) #6
  %656 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %654, <2 x double> zeroinitializer, <2 x double> %21) #6
  %657 = bitcast <2 x i64> %9 to <16 x i8>
  %658 = xor <16 x i8> %657, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %659 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %658) #6
  %660 = icmp eq i32 %659, 65535
  br i1 %660, label %826, label %661

; <label>:661:                                    ; preds = %2
  %662 = fmul <2 x double> %1, <double 0x3E30000000000000, double 0x3E30000000000000>
  %663 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %662) #6
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %665 = sitofp <2 x i32> %664 to <2 x double>
  %666 = fmul <2 x double> %665, <double 0x41B0000000000000, double 0x41B0000000000000>
  %667 = fsub <2 x double> %1, %666
  %668 = fmul <2 x double> %667, <double 4.000000e+00, double 4.000000e+00>
  %669 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %668) #6
  %670 = lshr <4 x i32> %669, <i32 31, i32 31, i32 31, i32 31>
  %671 = xor <4 x i32> %670, <i32 1, i32 1, i32 0, i32 0>
  %672 = add <4 x i32> %671, %669
  %673 = and <4 x i32> %672, <i32 2, i32 2, i32 0, i32 0>
  %674 = icmp eq <4 x i32> %673, <i32 2, i32 2, i32 0, i32 0>
  %675 = sext <4 x i1> %674 to <4 x i32>
  %676 = shufflevector <4 x i32> %675, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %677 = and <4 x i32> %672, <i32 -2, i32 -2, i32 undef, i32 undef>
  %678 = shufflevector <4 x i32> %677, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %679 = sitofp <2 x i32> %678 to <2 x double>
  %680 = fsub <2 x double> %668, %679
  %681 = fmul <2 x double> %680, %680
  %682 = bitcast <2 x double> %680 to <2 x i64>
  %683 = and <2 x i64> %682, <i64 -134217728, i64 -134217728>
  %684 = bitcast <2 x i64> %683 to <2 x double>
  %685 = fsub <2 x double> %680, %684
  %686 = fmul <2 x double> %684, %684
  %687 = bitcast <2 x double> %681 to <2 x i64>
  %688 = xor <2 x i64> %687, <i64 -9223372036854775808, i64 -9223372036854775808>
  %689 = bitcast <2 x i64> %688 to <2 x double>
  %690 = fmul <2 x double> %685, %684
  %691 = fmul <2 x double> %685, %685
  %692 = fadd <2 x double> %686, %689
  %693 = fadd <2 x double> %690, %692
  %694 = fadd <2 x double> %690, %693
  %695 = fadd <2 x double> %691, %694
  %696 = bitcast <4 x i32> %676 to <2 x double>
  %697 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD16CB8B645A2115, double 0xBD16CB8B645A2115>, <2 x double> <double 0x3CD1EA3B366CF50B, double 0x3CD1EA3B366CF50B>, <2 x double> %696) #6
  %698 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D9E8EFF936BEB38, double 0x3D9E8EFF936BEB38>, <2 x double> <double 0xBD5B6DF1CE46F480, double 0xBD5B6DF1CE46F480>, <2 x double> %696) #6
  %699 = fmul <2 x double> %697, %681
  %700 = fadd <2 x double> %698, %699
  %701 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE1E3074CBC7E020, double 0xBE1E3074CBC7E020>, <2 x double> <double 0x3DDF9D387B282B12, double 0x3DDF9D387B282B12>, <2 x double> %696) #6
  %702 = fmul <2 x double> %681, %700
  %703 = fadd <2 x double> %701, %702
  %704 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E950783486A74C8, double 0x3E950783486A74C8>, <2 x double> <double 0xBE5A6D1F2A0E516D, double 0xBE5A6D1F2A0E516D>, <2 x double> %696) #6
  %705 = fmul <2 x double> %681, %703
  %706 = fadd <2 x double> %704, %705
  %707 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF032D2CCE62B479, double 0xBF032D2CCE62B479>, <2 x double> <double 0x3ECE1F506891B1AB, double 0x3ECE1F506891B1AB>, <2 x double> %696) #6
  %708 = fmul <2 x double> %681, %706
  %709 = fadd <2 x double> %707, %708
  %710 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F6466BC6775AADE, double 0x3F6466BC6775AADE>, <2 x double> <double 0xBF355D3C7E3CBFF8, double 0xBF355D3C7E3CBFF8>, <2 x double> %696) #6
  %711 = fmul <2 x double> %681, %709
  %712 = fadd <2 x double> %710, %711
  %713 = fmul <2 x double> %681, %712
  %714 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFB4ABBCE625BE53, double 0xBFB4ABBCE625BE53>, <2 x double> <double 0x3F903C1F081B5AC4, double 0x3F903C1F081B5AC4>, <2 x double> %696) #6
  %715 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C50B00000000000, double 0x3C50B00000000000>, <2 x double> <double 0xBC33500000000000, double 0xBC33500000000000>, <2 x double> %696) #6
  %716 = fadd <2 x double> %714, %713
  %717 = fsub <2 x double> %716, %713
  %718 = fsub <2 x double> %716, %717
  %719 = fsub <2 x double> %713, %718
  %720 = fsub <2 x double> %714, %717
  %721 = fadd <2 x double> %720, %719
  %722 = fadd <2 x double> %715, %721
  %723 = and <2 x i64> %687, <i64 -134217728, i64 -134217728>
  %724 = bitcast <2 x i64> %723 to <2 x double>
  %725 = fsub <2 x double> %681, %724
  %726 = bitcast <2 x double> %716 to <2 x i64>
  %727 = and <2 x i64> %726, <i64 -134217728, i64 -134217728>
  %728 = bitcast <2 x i64> %727 to <2 x double>
  %729 = fsub <2 x double> %716, %728
  %730 = fmul <2 x double> %681, %716
  %731 = fmul <2 x double> %724, %728
  %732 = bitcast <2 x double> %730 to <2 x i64>
  %733 = xor <2 x i64> %732, <i64 -9223372036854775808, i64 -9223372036854775808>
  %734 = bitcast <2 x i64> %733 to <2 x double>
  %735 = fmul <2 x double> %725, %728
  %736 = fmul <2 x double> %729, %724
  %737 = fmul <2 x double> %725, %729
  %738 = fmul <2 x double> %681, %722
  %739 = fmul <2 x double> %695, %716
  %740 = fadd <2 x double> %731, %734
  %741 = fadd <2 x double> %735, %740
  %742 = fadd <2 x double> %736, %741
  %743 = fadd <2 x double> %737, %742
  %744 = fadd <2 x double> %738, %743
  %745 = fadd <2 x double> %739, %744
  %746 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>, <2 x double> <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>, <2 x double> %696) #6
  %747 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3C81A80000000000, double 0x3C81A80000000000>, <2 x double> <double 0xBC76900000000000, double 0xBC76900000000000>, <2 x double> %696) #6
  %748 = fadd <2 x double> %746, %730
  %749 = fsub <2 x double> %748, %730
  %750 = fsub <2 x double> %748, %749
  %751 = fsub <2 x double> %730, %750
  %752 = fsub <2 x double> %746, %749
  %753 = fadd <2 x double> %752, %751
  %754 = fadd <2 x double> %747, %745
  %755 = fadd <2 x double> %753, %754
  %756 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %680, <2 x double> %681, <2 x double> %696) #6
  %757 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %695, <2 x double> %696) #6
  %758 = bitcast <2 x double> %748 to <2 x i64>
  %759 = and <2 x i64> %758, <i64 -134217728, i64 -134217728>
  %760 = bitcast <2 x i64> %759 to <2 x double>
  %761 = fsub <2 x double> %748, %760
  %762 = bitcast <2 x double> %756 to <2 x i64>
  %763 = and <2 x i64> %762, <i64 -134217728, i64 -134217728>
  %764 = bitcast <2 x i64> %763 to <2 x double>
  %765 = fsub <2 x double> %756, %764
  %766 = fmul <2 x double> %756, %748
  %767 = fmul <2 x double> %764, %760
  %768 = bitcast <2 x double> %766 to <2 x i64>
  %769 = xor <2 x i64> %768, <i64 -9223372036854775808, i64 -9223372036854775808>
  %770 = bitcast <2 x i64> %769 to <2 x double>
  %771 = fmul <2 x double> %761, %764
  %772 = fmul <2 x double> %765, %760
  %773 = fmul <2 x double> %765, %761
  %774 = fmul <2 x double> %757, %748
  %775 = fmul <2 x double> %756, %755
  %776 = fadd <2 x double> %767, %770
  %777 = fadd <2 x double> %771, %776
  %778 = fadd <2 x double> %772, %777
  %779 = fadd <2 x double> %773, %778
  %780 = fadd <2 x double> %774, %779
  %781 = fadd <2 x double> %780, %775
  %782 = fadd <2 x double> %766, <double 1.000000e+00, double 1.000000e+00>
  %783 = fsub <2 x double> %782, %766
  %784 = fsub <2 x double> %782, %783
  %785 = fsub <2 x double> %766, %784
  %786 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %783
  %787 = fadd <2 x double> %786, %785
  %788 = fadd <2 x double> %787, %781
  %789 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %766, <2 x double> %782, <2 x double> %696) #6
  %790 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %781, <2 x double> %788, <2 x double> %696) #6
  %791 = and <4 x i32> %672, <i32 4, i32 4, i32 0, i32 0>
  %792 = icmp eq <4 x i32> %791, <i32 4, i32 4, i32 0, i32 0>
  %793 = sext <4 x i1> %792 to <4 x i32>
  %794 = shufflevector <4 x i32> %793, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %795 = bitcast <4 x i32> %794 to <2 x i64>
  %796 = and <2 x i64> %795, <i64 -9223372036854775808, i64 -9223372036854775808>
  %797 = bitcast <2 x double> %789 to <2 x i64>
  %798 = xor <2 x i64> %796, %797
  %799 = bitcast <2 x double> %790 to <2 x i64>
  %800 = xor <2 x i64> %796, %799
  %801 = bitcast <2 x i64> %798 to <2 x double>
  %802 = bitcast <2 x i64> %800 to <2 x double>
  %803 = bitcast <2 x double> %633 to <2 x i64>
  %804 = and <2 x i64> %803, <i64 -134217728, i64 -134217728>
  %805 = bitcast <2 x i64> %804 to <2 x double>
  %806 = fsub <2 x double> %633, %805
  %807 = and <2 x i64> %798, <i64 -134217728, i64 -134217728>
  %808 = bitcast <2 x i64> %807 to <2 x double>
  %809 = fsub <2 x double> %801, %808
  %810 = fmul <2 x double> %633, %801
  %811 = fmul <2 x double> %805, %808
  %812 = bitcast <2 x double> %810 to <2 x i64>
  %813 = xor <2 x i64> %812, <i64 -9223372036854775808, i64 -9223372036854775808>
  %814 = bitcast <2 x i64> %813 to <2 x double>
  %815 = fmul <2 x double> %806, %808
  %816 = fmul <2 x double> %809, %805
  %817 = fmul <2 x double> %806, %809
  %818 = fmul <2 x double> %633, %802
  %819 = fmul <2 x double> %634, %801
  %820 = fadd <2 x double> %811, %814
  %821 = fadd <2 x double> %815, %820
  %822 = fadd <2 x double> %816, %821
  %823 = fadd <2 x double> %817, %822
  %824 = fadd <2 x double> %818, %823
  %825 = fadd <2 x double> %819, %824
  br label %826

; <label>:826:                                    ; preds = %2, %661
  %827 = phi <2 x double> [ %810, %661 ], [ %179, %2 ]
  %828 = phi <2 x double> [ %825, %661 ], [ %180, %2 ]
  %829 = fmul <2 x double> %1, <double 0x4770000000000000, double 0x4770000000000000>
  %830 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %170, <2 x double> %827, <2 x double> %18) #6
  %831 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %171, <2 x double> %828, <2 x double> %18) #6
  %832 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %830, <2 x double> %829, <2 x double> %21) #6
  %833 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %831, <2 x double> zeroinitializer, <2 x double> %21) #6
  %834 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %832
  %835 = bitcast <2 x double> %832 to <2 x i64>
  %836 = and <2 x i64> %835, <i64 -134217728, i64 -134217728>
  %837 = bitcast <2 x i64> %836 to <2 x double>
  %838 = fsub <2 x double> %832, %837
  %839 = bitcast <2 x double> %834 to <2 x i64>
  %840 = and <2 x i64> %839, <i64 -134217728, i64 -134217728>
  %841 = bitcast <2 x i64> %840 to <2 x double>
  %842 = fsub <2 x double> %834, %841
  %843 = bitcast <2 x double> %655 to <2 x i64>
  %844 = and <2 x i64> %843, <i64 -134217728, i64 -134217728>
  %845 = bitcast <2 x i64> %844 to <2 x double>
  %846 = fsub <2 x double> %655, %845
  %847 = fmul <2 x double> %655, %834
  %848 = fmul <2 x double> %845, %841
  %849 = fsub <2 x double> %848, %847
  %850 = fmul <2 x double> %842, %845
  %851 = fmul <2 x double> %846, %841
  %852 = fmul <2 x double> %846, %842
  %853 = fmul <2 x double> %837, %841
  %854 = fmul <2 x double> %842, %837
  %855 = fmul <2 x double> %838, %841
  %856 = fmul <2 x double> %838, %842
  %857 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %853
  %858 = fsub <2 x double> %857, %854
  %859 = fsub <2 x double> %858, %855
  %860 = fsub <2 x double> %859, %856
  %861 = fmul <2 x double> %847, %860
  %862 = fadd <2 x double> %849, %850
  %863 = fadd <2 x double> %851, %862
  %864 = fadd <2 x double> %852, %863
  %865 = fadd <2 x double> %864, %861
  %866 = fmul <2 x double> %833, %847
  %867 = fsub <2 x double> %656, %866
  %868 = fmul <2 x double> %834, %867
  %869 = fadd <2 x double> %868, %865
  %870 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 0
  store <2 x double> %651, <2 x double>* %870, align 16
  %871 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 0, i32 1
  store <2 x double> %652, <2 x double>* %871, align 16
  %872 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 0
  store <2 x double> %847, <2 x double>* %872, align 16
  %873 = getelementptr inbounds %struct.dd2, %struct.dd2* %0, i64 0, i32 1, i32 1
  store <2 x double> %869, <2 x double>* %873, align 16
  ret void
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_lgammad2_u10sse4(<2 x double>) local_unnamed_addr #2 {
  %2 = alloca %struct.dd2, align 16
  %3 = bitcast %struct.dd2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #6
  call fastcc void @gammak(%struct.dd2* noalias nonnull %2, <2 x double> %0)
  %4 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1
  %5 = bitcast %struct.vdouble2* %4 to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  %7 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <2 x double>* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 16
  %10 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %11 = and <2 x i64> %6, <i64 -9223372036854775808, i64 -9223372036854775808>
  %12 = xor <2 x i64> %11, %9
  %13 = bitcast <2 x i64> %10 to <2 x double>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = fmul <2 x double> %13, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %16 = fcmp olt <2 x double> %15, <double 0x2D30000000000000, double 0x2D30000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = fmul <2 x double> %15, <double 0x52B0000000000000, double 0x52B0000000000000>
  %19 = bitcast <2 x i64> %17 to <2 x double>
  %20 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %18, <2 x double> %19) #6
  %21 = bitcast <2 x double> %20 to <4 x i32>
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %23 = and <4 x i32> %22, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %24 = lshr exact <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %25 = bitcast <2 x i64> %17 to <4 x i32>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %27) #6
  %29 = bitcast <16 x i8> %28 to <4 x i32>
  %30 = sub <4 x i32> %24, %29
  %31 = sub <4 x i32> zeroinitializer, %30
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = add <4 x i32> %32, <i32 1023, i32 1023, i32 undef, i32 0>
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %35 = and <4 x i32> %34, <i32 0, i32 -1, i32 0, i32 -1>
  %36 = shl <4 x i32> %35, <i32 20, i32 20, i32 20, i32 20>
  %37 = bitcast <4 x i32> %36 to <2 x double>
  %38 = fmul <2 x double> %13, %37
  %39 = sub <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %30
  %40 = sub <4 x i32> %39, %32
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %42 = and <4 x i32> %41, <i32 0, i32 -1, i32 0, i32 -1>
  %43 = shl <4 x i32> %42, <i32 20, i32 20, i32 20, i32 20>
  %44 = bitcast <4 x i32> %43 to <2 x double>
  %45 = fmul <2 x double> %38, %44
  %46 = fmul <2 x double> %14, %37
  %47 = fmul <2 x double> %46, %44
  %48 = fadd <2 x double> %45, <double -1.000000e+00, double -1.000000e+00>
  %49 = fsub <2 x double> %48, %45
  %50 = fsub <2 x double> %48, %49
  %51 = fsub <2 x double> %45, %50
  %52 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %49
  %53 = fadd <2 x double> %52, %51
  %54 = fadd <2 x double> %47, %53
  %55 = fadd <2 x double> %45, <double 1.000000e+00, double 1.000000e+00>
  %56 = fsub <2 x double> %55, %45
  %57 = fsub <2 x double> %55, %56
  %58 = fsub <2 x double> %45, %57
  %59 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %56
  %60 = fadd <2 x double> %59, %58
  %61 = fadd <2 x double> %47, %60
  %62 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %55
  %63 = bitcast <2 x double> %55 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -134217728, i64 -134217728>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fsub <2 x double> %55, %65
  %67 = bitcast <2 x double> %62 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 -134217728, i64 -134217728>
  %69 = bitcast <2 x i64> %68 to <2 x double>
  %70 = fsub <2 x double> %62, %69
  %71 = bitcast <2 x double> %48 to <2 x i64>
  %72 = and <2 x i64> %71, <i64 -134217728, i64 -134217728>
  %73 = bitcast <2 x i64> %72 to <2 x double>
  %74 = fsub <2 x double> %48, %73
  %75 = fmul <2 x double> %48, %62
  %76 = fmul <2 x double> %73, %69
  %77 = fsub <2 x double> %76, %75
  %78 = fmul <2 x double> %70, %73
  %79 = fmul <2 x double> %74, %69
  %80 = fmul <2 x double> %74, %70
  %81 = fmul <2 x double> %65, %69
  %82 = fmul <2 x double> %70, %65
  %83 = fmul <2 x double> %66, %69
  %84 = fmul <2 x double> %66, %70
  %85 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %81
  %86 = fsub <2 x double> %85, %82
  %87 = fsub <2 x double> %86, %83
  %88 = fsub <2 x double> %87, %84
  %89 = fmul <2 x double> %75, %88
  %90 = fadd <2 x double> %77, %78
  %91 = fadd <2 x double> %79, %90
  %92 = fadd <2 x double> %80, %91
  %93 = fadd <2 x double> %92, %89
  %94 = fmul <2 x double> %75, %61
  %95 = fsub <2 x double> %54, %94
  %96 = fmul <2 x double> %62, %95
  %97 = fadd <2 x double> %96, %93
  %98 = bitcast <2 x double> %75 to <2 x i64>
  %99 = and <2 x i64> %98, <i64 -134217728, i64 -134217728>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = fsub <2 x double> %75, %100
  %102 = fmul <2 x double> %75, %75
  %103 = fmul <2 x double> %100, %100
  %104 = bitcast <2 x double> %102 to <2 x i64>
  %105 = xor <2 x i64> %104, <i64 -9223372036854775808, i64 -9223372036854775808>
  %106 = bitcast <2 x i64> %105 to <2 x double>
  %107 = fadd <2 x double> %100, %100
  %108 = fmul <2 x double> %107, %101
  %109 = fmul <2 x double> %101, %101
  %110 = fadd <2 x double> %97, %97
  %111 = fmul <2 x double> %75, %110
  %112 = fadd <2 x double> %103, %106
  %113 = fadd <2 x double> %112, %108
  %114 = fadd <2 x double> %109, %113
  %115 = fadd <2 x double> %114, %111
  %116 = fmul <2 x double> %102, %102
  %117 = fmul <2 x double> %116, %116
  %118 = fmul <2 x double> %102, <double 0x3FC0DB8A525B4A6B, double 0x3FC0DB8A525B4A6B>
  %119 = fadd <2 x double> %118, <double 0x3FC3B3759FB81971, double 0x3FC3B3759FB81971>
  %120 = fmul <2 x double> %116, <double 0x3FC1BDC9AD06D760, double 0x3FC1BDC9AD06D760>
  %121 = fadd <2 x double> %120, %119
  %122 = fmul <2 x double> %102, <double 0x3FC745C38C19C82A, double 0x3FC745C38C19C82A>
  %123 = fadd <2 x double> %122, <double 0x3FCC71C750354F90, double 0x3FCC71C750354F90>
  %124 = fmul <2 x double> %102, <double 0x3FD2492492114D0C, double 0x3FD2492492114D0C>
  %125 = fadd <2 x double> %124, <double 0x3FD999999999D9EB, double 0x3FD999999999D9EB>
  %126 = fmul <2 x double> %116, %123
  %127 = fadd <2 x double> %125, %126
  %128 = fmul <2 x double> %117, %121
  %129 = fadd <2 x double> %128, %127
  %130 = fmul <2 x double> %102, %129
  %131 = fadd <2 x double> %130, <double 0x3FE5555555555545, double 0x3FE5555555555545>
  %132 = shufflevector <4 x i32> %30, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %133 = sitofp <2 x i32> %132 to <2 x double>
  %134 = bitcast <2 x double> %133 to <2 x i64>
  %135 = and <2 x i64> %134, <i64 -134217728, i64 -134217728>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = fsub <2 x double> %133, %136
  %138 = fmul <2 x double> %133, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %139 = fmul <2 x double> %136, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %140 = bitcast <2 x double> %138 to <2 x i64>
  %141 = xor <2 x i64> %140, <i64 -9223372036854775808, i64 -9223372036854775808>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fmul <2 x double> %136, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %144 = fmul <2 x double> %137, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %145 = fmul <2 x double> %137, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %146 = fmul <2 x double> %133, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %147 = fadd <2 x double> %139, %142
  %148 = fadd <2 x double> %143, %147
  %149 = fadd <2 x double> %144, %148
  %150 = fadd <2 x double> %145, %149
  %151 = fadd <2 x double> %146, %150
  %152 = fmul <2 x double> %75, <double 2.000000e+00, double 2.000000e+00>
  %153 = fmul <2 x double> %97, <double 2.000000e+00, double 2.000000e+00>
  %154 = fadd <2 x double> %138, %152
  %155 = fsub <2 x double> %138, %154
  %156 = fadd <2 x double> %152, %155
  %157 = fadd <2 x double> %151, %156
  %158 = fadd <2 x double> %157, %153
  %159 = and <2 x i64> %104, <i64 -134217728, i64 -134217728>
  %160 = bitcast <2 x i64> %159 to <2 x double>
  %161 = fsub <2 x double> %102, %160
  %162 = fmul <2 x double> %75, %102
  %163 = fmul <2 x double> %100, %160
  %164 = bitcast <2 x double> %162 to <2 x i64>
  %165 = xor <2 x i64> %164, <i64 -9223372036854775808, i64 -9223372036854775808>
  %166 = bitcast <2 x i64> %165 to <2 x double>
  %167 = fmul <2 x double> %161, %100
  %168 = fmul <2 x double> %101, %160
  %169 = fmul <2 x double> %101, %161
  %170 = fmul <2 x double> %102, %97
  %171 = fmul <2 x double> %75, %115
  %172 = fadd <2 x double> %163, %166
  %173 = fadd <2 x double> %167, %172
  %174 = fadd <2 x double> %168, %173
  %175 = fadd <2 x double> %169, %174
  %176 = fadd <2 x double> %175, %170
  %177 = fadd <2 x double> %176, %171
  %178 = and <2 x i64> %164, <i64 -134217728, i64 -134217728>
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = fsub <2 x double> %162, %179
  %181 = bitcast <2 x double> %131 to <2 x i64>
  %182 = and <2 x i64> %181, <i64 -134217728, i64 -134217728>
  %183 = bitcast <2 x i64> %182 to <2 x double>
  %184 = fsub <2 x double> %131, %183
  %185 = fmul <2 x double> %162, %131
  %186 = fmul <2 x double> %179, %183
  %187 = bitcast <2 x double> %185 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 -9223372036854775808, i64 -9223372036854775808>
  %189 = bitcast <2 x i64> %188 to <2 x double>
  %190 = fmul <2 x double> %180, %183
  %191 = fmul <2 x double> %184, %179
  %192 = fmul <2 x double> %180, %184
  %193 = fmul <2 x double> %131, %177
  %194 = fadd <2 x double> %186, %189
  %195 = fadd <2 x double> %190, %194
  %196 = fadd <2 x double> %191, %195
  %197 = fadd <2 x double> %192, %196
  %198 = fadd <2 x double> %193, %197
  %199 = fadd <2 x double> %154, %185
  %200 = fsub <2 x double> %154, %199
  %201 = fadd <2 x double> %185, %200
  %202 = fadd <2 x double> %201, %158
  %203 = fadd <2 x double> %202, %198
  %204 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 0
  %205 = load <2 x double>, <2 x double>* %204, align 16
  %206 = getelementptr inbounds %struct.dd2, %struct.dd2* %2, i64 0, i32 0, i32 1
  %207 = load <2 x double>, <2 x double>* %206, align 16
  %208 = fadd <2 x double> %205, %199
  %209 = fsub <2 x double> %208, %205
  %210 = fsub <2 x double> %208, %209
  %211 = fsub <2 x double> %205, %210
  %212 = fsub <2 x double> %199, %209
  %213 = fadd <2 x double> %212, %211
  %214 = fadd <2 x double> %207, %203
  %215 = fadd <2 x double> %213, %214
  %216 = fadd <2 x double> %208, %215
  %217 = bitcast <2 x double> %0 to <2 x i64>
  %218 = and <2 x i64> %217, <i64 9223372036854775807, i64 9223372036854775807>
  %219 = bitcast <2 x i64> %218 to <2 x double>
  %220 = fcmp oeq <2 x double> %219, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %221 = fcmp ole <2 x double> %0, zeroinitializer
  %222 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #6
  %223 = fcmp oeq <2 x double> %222, %0
  %224 = and <2 x i1> %223, %221
  %225 = fcmp une <2 x double> %219, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %226 = fcmp ord <2 x double> %0, zeroinitializer
  %227 = and <2 x i1> %225, %226
  %228 = fcmp uno <2 x double> %216, zeroinitializer
  %229 = and <2 x i1> %227, %228
  %230 = or <2 x i1> %224, %220
  %231 = or <2 x i1> %230, %229
  %232 = sext <2 x i1> %231 to <2 x i64>
  %233 = bitcast <2 x i64> %232 to <2 x double>
  %234 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %216, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %233) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #6
  ret <2 x double> %234
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fcmp olt <2 x double> %4, <double 3.700000e+00, double 3.700000e+00>
  %8 = sext <2 x i1> %7 to <2 x i64>
  %9 = fcmp olt <2 x double> %4, <double 6.000000e+00, double 6.000000e+00>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %4, %4
  %12 = bitcast <2 x i64> %6 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %11, <2 x double> %12) #6
  %14 = bitcast <2 x i64> %8 to <2 x double>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC5AF69FE192740F, double 0xBC5AF69FE192740F>, <2 x double> <double 0x3D1FDFABBDFC43F1, double 0x3D1FDFABBDFC43F1>, <2 x double> %14) #6
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> <double 0x3BC00EFEFABE989B, double 0x3BC00EFEFABE989B>, <2 x double> %12) #6
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3CC5E4C21B562709, double 0x3CC5E4C21B562709>, <2 x double> <double 0xBD7A8E25B9CCCB64, double 0xBD7A8E25B9CCCB64>, <2 x double> %14) #6
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> <double 0xBC0FE6EC06B043F5, double 0xBC0FE6EC06B043F5>, <2 x double> %12) #6
  %19 = fmul <2 x double> %13, %16
  %20 = fadd <2 x double> %19, %18
  %21 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBD20EE4A859274F9, double 0xBD20EE4A859274F9>, <2 x double> <double 0x3DC50B3AE48C7164, double 0x3DC50B3AE48C7164>, <2 x double> %14) #6
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %21, <2 x double> <double 0x3C55A7F67BDE0C17, double 0x3C55A7F67BDE0C17>, <2 x double> %12) #6
  %23 = fmul <2 x double> %13, %20
  %24 = fadd <2 x double> %23, %22
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D7095F3964F9BBA, double 0x3D7095F3964F9BBA>, <2 x double> <double 0xBE0518912B895660, double 0xBE0518912B895660>, <2 x double> %14) #6
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> <double 0xBC9A15164BF4F36C, double 0xBC9A15164BF4F36C>, <2 x double> %12) #6
  %27 = fmul <2 x double> %13, %24
  %28 = fadd <2 x double> %27, %26
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBDB7174964833400, double 0xBDB7174964833400>, <2 x double> <double 0x3E3E0083E7FD4B05, double 0x3E3E0083E7FD4B05>, <2 x double> %14) #6
  %30 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> <double 0x3CDD6F95068FEEA8, double 0x3CDD6F95068FEEA8>, <2 x double> %12) #6
  %31 = fmul <2 x double> %13, %28
  %32 = fadd <2 x double> %31, %30
  %33 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3DF84A341FC35F63, double 0x3DF84A341FC35F63>, <2 x double> <double 0xBE70131398DAE973, double 0xBE70131398DAE973>, <2 x double> %14) #6
  %34 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %33, <2 x double> <double 0xBD1F56D9FF51275A, double 0xBD1F56D9FF51275A>, <2 x double> %12) #6
  %35 = fmul <2 x double> %13, %32
  %36 = fadd <2 x double> %35, %34
  %37 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE34092FAEC3CB81, double 0xBE34092FAEC3CB81>, <2 x double> <double 0x3E9AE1C4F259778D, double 0x3E9AE1C4F259778D>, <2 x double> %14) #6
  %38 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %37, <2 x double> <double 0x3D5F6839841402FB, double 0x3D5F6839841402FB>, <2 x double> %12) #6
  %39 = fmul <2 x double> %13, %36
  %40 = fadd <2 x double> %39, %38
  %41 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E6A8ABD2DF8AA98, double 0x3E6A8ABD2DF8AA98>, <2 x double> <double 0xBEC1E2D7E8039AC0, double 0xBEC1E2D7E8039AC0>, <2 x double> %14) #6
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %41, <2 x double> <double 0xBD9D8453B9E7FD7B, double 0xBD9D8453B9E7FD7B>, <2 x double> %12) #6
  %43 = fmul <2 x double> %13, %40
  %44 = fadd <2 x double> %43, %42
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBE9CA9DF1E6D3F55, double 0xBE9CA9DF1E6D3F55>, <2 x double> <double 0x3EE3117A5DB988BA, double 0x3EE3117A5DB988BA>, <2 x double> %14) #6
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %45, <2 x double> <double 0x3DD9E6AD5DAB7034, double 0x3DD9E6AD5DAB7034>, <2 x double> %12) #6
  %47 = fmul <2 x double> %13, %44
  %48 = fadd <2 x double> %47, %46
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EC9739C586B056B, double 0x3EC9739C586B056B>, <2 x double> <double 0xBF0024D0F7EE3723, double 0xBF0024D0F7EE3723>, <2 x double> %14) #6
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %49, <2 x double> <double 0xBE151D7181C08B9D, double 0xBE151D7181C08B9D>, <2 x double> %12) #6
  %51 = fmul <2 x double> %13, %48
  %52 = fadd <2 x double> %51, %50
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBEF2A034D3F36A50, double 0xBEF2A034D3F36A50>, <2 x double> <double 0x3F14E58666D1B46F, double 0x3F14E58666D1B46F>, <2 x double> %14) #6
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> <double 0x3E4FCC5720620921, double 0x3E4FCC5720620921>, <2 x double> %12) #6
  %55 = fmul <2 x double> %13, %52
  %56 = fadd <2 x double> %55, %54
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F1658BA21A7397E, double 0x3F1658BA21A7397E>, <2 x double> <double 0xBF2230DCD58EAD99, double 0xBF2230DCD58EAD99>, <2 x double> %14) #6
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> <double 0xBE85F742EC43E5C7, double 0xBE85F742EC43E5C7>, <2 x double> %12) #6
  %59 = fmul <2 x double> %13, %56
  %60 = fadd <2 x double> %59, %58
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF3590AE9D03C290, double 0xBF3590AE9D03C290>, <2 x double> <double 0x3F10F5BA38B6A6E5, double 0x3F10F5BA38B6A6E5>, <2 x double> %14) #6
  %62 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> <double 0x3EBB9E6C9DC6519C, double 0x3EBB9E6C9DC6519C>, <2 x double> %12) #6
  %63 = fmul <2 x double> %13, %60
  %64 = fadd <2 x double> %63, %62
  %65 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F4FC6679B56D25A, double 0x3F4FC6679B56D25A>, <2 x double> <double 0x3F405F7D6748381E, double 0x3F405F7D6748381E>, <2 x double> %14) #6
  %66 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %65, <2 x double> <double 0xBEEF4D25C3E0C2EA, double 0xBEEF4D25C3E0C2EA>, <2 x double> %12) #6
  %67 = fmul <2 x double> %13, %64
  %68 = fadd <2 x double> %67, %66
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF5DB24AB8ACFC8B, double 0xBF5DB24AB8ACFC8B>, <2 x double> <double 0xBF5A9686E5DE05F7, double 0xBF5A9686E5DE05F7>, <2 x double> %14) #6
  %70 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> <double 0x3F1F9A326F9B89B8, double 0x3F1F9A326F9B89B8>, <2 x double> %12) #6
  %71 = fmul <2 x double> %13, %68
  %72 = fadd <2 x double> %71, %70
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBF3EF7EC1133F0A8, double 0xBF3EF7EC1133F0A8>, <2 x double> <double 0x3F252C1DCB0324BA, double 0x3F252C1DCB0324BA>, <2 x double> %14) #6
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0xBF4C02DB40040B84, double 0xBF4C02DB40040B84>, <2 x double> %12) #6
  %75 = fmul <2 x double> %13, %72
  %76 = fadd <2 x double> %75, %74
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F9567A2F00CE3E5, double 0x3F9567A2F00CE3E5>, <2 x double> <double 0x3F939CBECA106F66, double 0x3F939CBECA106F66>, <2 x double> %14) #6
  %78 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0x3F7565BCD0E6A540, double 0x3F7565BCD0E6A540>, <2 x double> %12) #6
  %79 = fmul <2 x double> %13, %76
  %80 = fadd <2 x double> %79, %78
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFBAEEA974D564EF, double 0xBFBAEEA974D564EF>, <2 x double> <double 0xBFBA4FE8F5D2A23C, double 0xBFBA4FE8F5D2A23C>, <2 x double> %14) #6
  %82 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %81, <2 x double> <double 0xBF9B82CE31288B52, double 0xBF9B82CE31288B52>, <2 x double> %12) #6
  %83 = fmul <2 x double> %13, %80
  %84 = fadd <2 x double> %83, %82
  %85 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE44E1CB940DA9C, double 0xBFE44E1CB940DA9C>, <2 x double> <double 0xBFE45F2B34C61AC0, double 0xBFE45F2B34C61AC0>, <2 x double> %14) #6
  %86 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %85, <2 x double> <double 0x3FBCE2F21A042BE3, double 0x3FBCE2F21A042BE3>, <2 x double> %12) #6
  %87 = fmul <2 x double> %13, %84
  %88 = fadd <2 x double> %87, %86
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFF21232BFB32B5A, double 0xBFF21232BFB32B5A>, <2 x double> <double 0xBFF20DD7C1F4F99A, double 0xBFF20DD7C1F4F99A>, <2 x double> %14) #6
  %90 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %89, <2 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <2 x double> %12) #6
  %91 = fmul <2 x double> %13, %88
  %92 = fadd <2 x double> %91, %90
  %93 = bitcast <2 x double> %92 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %92, %95
  %97 = bitcast <2 x double> %13 to <2 x i64>
  %98 = and <2 x i64> %97, <i64 -134217728, i64 -134217728>
  %99 = bitcast <2 x i64> %98 to <2 x double>
  %100 = fsub <2 x double> %13, %99
  %101 = fmul <2 x double> %13, %92
  %102 = fmul <2 x double> %99, %95
  %103 = bitcast <2 x double> %101 to <2 x i64>
  %104 = xor <2 x i64> %103, <i64 -9223372036854775808, i64 -9223372036854775808>
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fmul <2 x double> %96, %99
  %107 = fmul <2 x double> %100, %95
  %108 = fmul <2 x double> %100, %96
  %109 = fadd <2 x double> %102, %105
  %110 = fadd <2 x double> %106, %109
  %111 = fadd <2 x double> %107, %110
  %112 = fadd <2 x double> %108, %111
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F305C1A38102E9A, double 0x3F305C1A38102E9A>, <2 x double> <double 0x3E6250219DD8BAD1, double 0x3E6250219DD8BAD1>, <2 x double> %14) #6
  %114 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %113, <2 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <2 x double> %12) #6
  %115 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBBB9AC0AFE024E87, double 0xBBB9AC0AFE024E87>, <2 x double> <double 0xBB080EE9AD757828, double 0xBB080EE9AD757828>, <2 x double> %14) #6
  %116 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %115, <2 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <2 x double> %12) #6
  %117 = fadd <2 x double> %101, %114
  %118 = fsub <2 x double> %117, %101
  %119 = fsub <2 x double> %117, %118
  %120 = fsub <2 x double> %101, %119
  %121 = fsub <2 x double> %114, %118
  %122 = fadd <2 x double> %121, %120
  %123 = fadd <2 x double> %116, %112
  %124 = fadd <2 x double> %122, %123
  %125 = bitcast <2 x double> %117 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 -134217728, i64 -134217728>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = fsub <2 x double> %117, %127
  %129 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %130 = bitcast <2 x i64> %129 to <2 x double>
  %131 = fsub <2 x double> %4, %130
  %132 = fmul <2 x double> %117, %4
  %133 = fmul <2 x double> %130, %127
  %134 = bitcast <2 x double> %132 to <2 x i64>
  %135 = xor <2 x i64> %134, <i64 -9223372036854775808, i64 -9223372036854775808>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = fmul <2 x double> %128, %130
  %138 = fmul <2 x double> %131, %127
  %139 = fmul <2 x double> %131, %128
  %140 = fmul <2 x double> %124, %4
  %141 = fadd <2 x double> %133, %136
  %142 = fadd <2 x double> %137, %141
  %143 = fadd <2 x double> %138, %142
  %144 = fadd <2 x double> %139, %143
  %145 = fadd <2 x double> %144, %140
  %146 = fadd <2 x double> %117, %124
  %147 = fmul <2 x double> %146, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %148 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %147, i32 8) #6
  %149 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %148) #6
  %150 = fmul <2 x double> %148, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %151 = fadd <2 x double> %117, %150
  %152 = fsub <2 x double> %151, %117
  %153 = fsub <2 x double> %151, %152
  %154 = fsub <2 x double> %117, %153
  %155 = fsub <2 x double> %150, %152
  %156 = fadd <2 x double> %155, %154
  %157 = fadd <2 x double> %156, %124
  %158 = fmul <2 x double> %148, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %159 = fadd <2 x double> %158, %151
  %160 = fsub <2 x double> %159, %151
  %161 = fsub <2 x double> %159, %160
  %162 = fsub <2 x double> %151, %161
  %163 = fsub <2 x double> %158, %160
  %164 = fadd <2 x double> %163, %162
  %165 = fadd <2 x double> %164, %157
  %166 = bitcast <2 x double> %159 to <2 x i64>
  %167 = and <2 x i64> %166, <i64 -134217728, i64 -134217728>
  %168 = bitcast <2 x i64> %167 to <2 x double>
  %169 = fsub <2 x double> %159, %168
  %170 = fmul <2 x double> %159, %159
  %171 = fmul <2 x double> %168, %168
  %172 = bitcast <2 x double> %170 to <2 x i64>
  %173 = xor <2 x i64> %172, <i64 -9223372036854775808, i64 -9223372036854775808>
  %174 = bitcast <2 x i64> %173 to <2 x double>
  %175 = fadd <2 x double> %168, %168
  %176 = fmul <2 x double> %175, %169
  %177 = fmul <2 x double> %169, %169
  %178 = fadd <2 x double> %165, %165
  %179 = fmul <2 x double> %159, %178
  %180 = fadd <2 x double> %171, %174
  %181 = fadd <2 x double> %180, %176
  %182 = fadd <2 x double> %177, %181
  %183 = fadd <2 x double> %179, %182
  %184 = and <2 x i64> %172, <i64 -134217728, i64 -134217728>
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fsub <2 x double> %170, %185
  %187 = fmul <2 x double> %170, %170
  %188 = fmul <2 x double> %185, %185
  %189 = bitcast <2 x double> %187 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -9223372036854775808, i64 -9223372036854775808>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fadd <2 x double> %185, %185
  %193 = fmul <2 x double> %192, %186
  %194 = fmul <2 x double> %186, %186
  %195 = fadd <2 x double> %183, %183
  %196 = fmul <2 x double> %170, %195
  %197 = fadd <2 x double> %188, %191
  %198 = fadd <2 x double> %197, %193
  %199 = fadd <2 x double> %194, %198
  %200 = fadd <2 x double> %199, %196
  %201 = fmul <2 x double> %187, %187
  %202 = fmul <2 x double> %159, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %203 = fadd <2 x double> %202, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %204 = fmul <2 x double> %159, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %205 = fadd <2 x double> %204, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %206 = fmul <2 x double> %159, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %207 = fadd <2 x double> %206, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %208 = fmul <2 x double> %170, %205
  %209 = fadd <2 x double> %207, %208
  %210 = fmul <2 x double> %159, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %211 = fadd <2 x double> %210, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %212 = fmul <2 x double> %159, <double 0x3F81111111111119, double 0x3F81111111111119>
  %213 = fadd <2 x double> %212, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %214 = fmul <2 x double> %170, %211
  %215 = fadd <2 x double> %213, %214
  %216 = fmul <2 x double> %187, %209
  %217 = fadd <2 x double> %215, %216
  %218 = fmul <2 x double> %203, %201
  %219 = fadd <2 x double> %218, %217
  %220 = fmul <2 x double> %159, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %221 = fmul <2 x double> %168, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %222 = bitcast <2 x double> %220 to <2 x i64>
  %223 = xor <2 x i64> %222, <i64 -9223372036854775808, i64 -9223372036854775808>
  %224 = bitcast <2 x i64> %223 to <2 x double>
  %225 = fmul <2 x double> %169, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %226 = fmul <2 x double> %168, <double 0x3E25555554000000, double 0x3E25555554000000>
  %227 = fmul <2 x double> %169, <double 0x3E25555554000000, double 0x3E25555554000000>
  %228 = fmul <2 x double> %165, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %229 = fadd <2 x double> %221, %224
  %230 = fadd <2 x double> %225, %229
  %231 = fadd <2 x double> %226, %230
  %232 = fadd <2 x double> %227, %231
  %233 = fadd <2 x double> %228, %232
  %234 = fadd <2 x double> %220, <double 5.000000e-01, double 5.000000e-01>
  %235 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %234
  %236 = fadd <2 x double> %220, %235
  %237 = fadd <2 x double> %236, %233
  %238 = bitcast <2 x double> %234 to <2 x i64>
  %239 = and <2 x i64> %238, <i64 -134217728, i64 -134217728>
  %240 = bitcast <2 x i64> %239 to <2 x double>
  %241 = fsub <2 x double> %234, %240
  %242 = fmul <2 x double> %159, %234
  %243 = fmul <2 x double> %168, %240
  %244 = bitcast <2 x double> %242 to <2 x i64>
  %245 = xor <2 x i64> %244, <i64 -9223372036854775808, i64 -9223372036854775808>
  %246 = bitcast <2 x i64> %245 to <2 x double>
  %247 = fmul <2 x double> %241, %168
  %248 = fmul <2 x double> %169, %240
  %249 = fmul <2 x double> %169, %241
  %250 = fmul <2 x double> %234, %165
  %251 = fmul <2 x double> %159, %237
  %252 = fadd <2 x double> %243, %246
  %253 = fadd <2 x double> %247, %252
  %254 = fadd <2 x double> %248, %253
  %255 = fadd <2 x double> %249, %254
  %256 = fadd <2 x double> %250, %255
  %257 = fadd <2 x double> %251, %256
  %258 = fadd <2 x double> %242, <double 1.000000e+00, double 1.000000e+00>
  %259 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %258
  %260 = fadd <2 x double> %242, %259
  %261 = fadd <2 x double> %260, %257
  %262 = bitcast <2 x double> %258 to <2 x i64>
  %263 = and <2 x i64> %262, <i64 -134217728, i64 -134217728>
  %264 = bitcast <2 x i64> %263 to <2 x double>
  %265 = fsub <2 x double> %258, %264
  %266 = fmul <2 x double> %159, %258
  %267 = fmul <2 x double> %168, %264
  %268 = bitcast <2 x double> %266 to <2 x i64>
  %269 = xor <2 x i64> %268, <i64 -9223372036854775808, i64 -9223372036854775808>
  %270 = bitcast <2 x i64> %269 to <2 x double>
  %271 = fmul <2 x double> %265, %168
  %272 = fmul <2 x double> %169, %264
  %273 = fmul <2 x double> %169, %265
  %274 = fmul <2 x double> %258, %165
  %275 = fmul <2 x double> %159, %261
  %276 = fadd <2 x double> %267, %270
  %277 = fadd <2 x double> %271, %276
  %278 = fadd <2 x double> %272, %277
  %279 = fadd <2 x double> %273, %278
  %280 = fadd <2 x double> %274, %279
  %281 = fadd <2 x double> %280, %275
  %282 = fadd <2 x double> %266, <double 1.000000e+00, double 1.000000e+00>
  %283 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %282
  %284 = fadd <2 x double> %266, %283
  %285 = fadd <2 x double> %284, %281
  %286 = and <2 x i64> %189, <i64 -134217728, i64 -134217728>
  %287 = bitcast <2 x i64> %286 to <2 x double>
  %288 = fsub <2 x double> %187, %287
  %289 = bitcast <2 x double> %219 to <2 x i64>
  %290 = and <2 x i64> %289, <i64 -134217728, i64 -134217728>
  %291 = bitcast <2 x i64> %290 to <2 x double>
  %292 = fsub <2 x double> %219, %291
  %293 = fmul <2 x double> %187, %219
  %294 = fmul <2 x double> %287, %291
  %295 = bitcast <2 x double> %293 to <2 x i64>
  %296 = xor <2 x i64> %295, <i64 -9223372036854775808, i64 -9223372036854775808>
  %297 = bitcast <2 x i64> %296 to <2 x double>
  %298 = fmul <2 x double> %288, %291
  %299 = fmul <2 x double> %292, %287
  %300 = fmul <2 x double> %288, %292
  %301 = fmul <2 x double> %219, %200
  %302 = fadd <2 x double> %294, %297
  %303 = fadd <2 x double> %298, %302
  %304 = fadd <2 x double> %299, %303
  %305 = fadd <2 x double> %300, %304
  %306 = fadd <2 x double> %301, %305
  %307 = fadd <2 x double> %282, %293
  %308 = fsub <2 x double> %282, %307
  %309 = fadd <2 x double> %293, %308
  %310 = fadd <2 x double> %309, %285
  %311 = fadd <2 x double> %306, %310
  %312 = ashr <4 x i32> %149, <i32 1, i32 1, i32 1, i32 1>
  %313 = add <4 x i32> %312, <i32 1023, i32 1023, i32 undef, i32 0>
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %315 = and <4 x i32> %314, <i32 0, i32 -1, i32 0, i32 -1>
  %316 = shl <4 x i32> %315, <i32 20, i32 20, i32 20, i32 20>
  %317 = bitcast <4 x i32> %316 to <2 x double>
  %318 = fmul <2 x double> %307, %317
  %319 = add <4 x i32> %149, <i32 1023, i32 1023, i32 undef, i32 0>
  %320 = sub <4 x i32> %319, %312
  %321 = shufflevector <4 x i32> %320, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %322 = and <4 x i32> %321, <i32 0, i32 -1, i32 0, i32 -1>
  %323 = shl <4 x i32> %322, <i32 20, i32 20, i32 20, i32 20>
  %324 = bitcast <4 x i32> %323 to <2 x double>
  %325 = fmul <2 x double> %318, %324
  %326 = fmul <2 x double> %311, %317
  %327 = fmul <2 x double> %326, %324
  %328 = fcmp uge <2 x double> %117, <double -1.000000e+03, double -1.000000e+03>
  %329 = bitcast <2 x double> %325 to <2 x i64>
  %330 = sext <2 x i1> %328 to <2 x i64>
  %331 = and <2 x i64> %329, %330
  %332 = bitcast <2 x double> %327 to <2 x i64>
  %333 = and <2 x i64> %332, %330
  %334 = xor <2 x i64> %331, <i64 -9223372036854775808, i64 -9223372036854775808>
  %335 = xor <2 x i64> %333, <i64 -9223372036854775808, i64 -9223372036854775808>
  %336 = bitcast <2 x i64> %334 to <2 x double>
  %337 = bitcast <2 x i64> %335 to <2 x double>
  %338 = fadd <2 x double> %336, <double 1.000000e+00, double 1.000000e+00>
  %339 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %338
  %340 = fadd <2 x double> %339, %336
  %341 = fadd <2 x double> %340, %337
  %342 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %338, <2 x double> %132, <2 x double> %12) #6
  %343 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %341, <2 x double> %145, <2 x double> %12) #6
  %344 = fadd <2 x double> %342, %343
  %345 = bitcast <2 x i64> %10 to <2 x double>
  %346 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %344, <2 x double> %345) #6
  %347 = bitcast <2 x double> %346 to <2 x i64>
  %348 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %349 = xor <2 x i64> %348, %347
  %350 = bitcast <2 x i64> %349 to <2 x double>
  %351 = fcmp uno <2 x double> %4, zeroinitializer
  %352 = sext <2 x i1> %351 to <2 x i64>
  %353 = bitcast <2 x i64> %352 to <2 x double>
  %354 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %350, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %353) #6
  ret <2 x double> %354
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_erfcd2_u15sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 1.000000e+00, double 1.000000e+00>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fcmp olt <2 x double> %4, <double 2.200000e+00, double 2.200000e+00>
  %8 = sext <2 x i1> %7 to <2 x i64>
  %9 = fcmp olt <2 x double> %4, <double 4.200000e+00, double 4.200000e+00>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fcmp olt <2 x double> %4, <double 2.730000e+01, double 2.730000e+01>
  %12 = sext <2 x i1> %11 to <2 x i64>
  %13 = and <2 x i64> %2, <i64 9223372036720558080, i64 9223372036720558080>
  %14 = bitcast <2 x i64> %13 to <2 x double>
  %15 = fsub <2 x double> %4, %14
  %16 = fmul <2 x double> %4, %4
  %17 = fmul <2 x double> %14, %14
  %18 = bitcast <2 x double> %16 to <2 x i64>
  %19 = xor <2 x i64> %18, <i64 -9223372036854775808, i64 -9223372036854775808>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = fmul <2 x double> %15, %14
  %22 = fmul <2 x double> %15, %15
  %23 = fadd <2 x double> %17, %20
  %24 = fadd <2 x double> %21, %23
  %25 = fadd <2 x double> %21, %24
  %26 = fadd <2 x double> %22, %25
  %27 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %4
  %28 = bitcast <2 x double> %27 to <2 x i64>
  %29 = and <2 x i64> %28, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %27, %30
  %32 = fsub <2 x double> %30, %27
  %33 = fmul <2 x double> %30, zeroinitializer
  %34 = fmul <2 x double> %31, zeroinitializer
  %35 = fmul <2 x double> %14, %30
  %36 = fmul <2 x double> %31, %14
  %37 = fmul <2 x double> %15, %30
  %38 = fmul <2 x double> %15, %31
  %39 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %40 = fsub <2 x double> %39, %36
  %41 = fsub <2 x double> %40, %37
  %42 = fsub <2 x double> %41, %38
  %43 = fmul <2 x double> %27, %42
  %44 = fadd <2 x double> %32, %31
  %45 = fadd <2 x double> %33, %44
  %46 = fadd <2 x double> %34, %45
  %47 = fadd <2 x double> %46, %43
  %48 = fmul <2 x double> %27, zeroinitializer
  %49 = fsub <2 x double> zeroinitializer, %48
  %50 = fmul <2 x double> %27, %49
  %51 = fadd <2 x double> %50, %47
  %52 = bitcast <2 x i64> %8 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %27, <2 x double> %4, <2 x double> %52) #6
  %54 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> zeroinitializer, <2 x double> %52) #6
  %55 = bitcast <2 x i64> %6 to <2 x double>
  %56 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> %16, <2 x double> %55) #6
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %54, <2 x double> %26, <2 x double> %55) #6
  %58 = bitcast <2 x i64> %10 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40D6CB9FD3B439A9, double 0x40D6CB9FD3B439A9>, <2 x double> <double 0xC04CCA024E41FBF2, double 0xC04CCA024E41FBF2>, <2 x double> %58) #6
  %60 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> <double 0x3D58315E6C186224, double 0x3D58315E6C186224>, <2 x double> %52) #6
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> <double 0x3BC00EFEFABE9897, double 0x3BC00EFEFABE9897>, <2 x double> %55) #6
  %62 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0E6ED9388CD091B, double 0xC0E6ED9388CD091B>, <2 x double> <double 0x407D2EDD0AE020CC, double 0x407D2EDD0AE020CC>, <2 x double> %58) #6
  %63 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %62, <2 x double> <double 0xBDAB33CF696F6246, double 0xBDAB33CF696F6246>, <2 x double> %52) #6
  %64 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %63, <2 x double> <double 0xBC0FE6EC06B043F2, double 0xBC0FE6EC06B043F2>, <2 x double> %55) #6
  %65 = fmul <2 x double> %56, %61
  %66 = fadd <2 x double> %65, %64
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40DEFD81FD565E63, double 0x40DEFD81FD565E63>, <2 x double> <double 0xC09C1151CBEBE895, double 0xC09C1151CBEBE895>, <2 x double> %58) #6
  %68 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> <double 0x3DED1C000C3FE200, double 0x3DED1C000C3FE200>, <2 x double> %52) #6
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %68, <2 x double> <double 0x3C55A7F67BDE0C13, double 0x3C55A7F67BDE0C13>, <2 x double> %55) #6
  %70 = fmul <2 x double> %56, %66
  %71 = fadd <2 x double> %70, %69
  %72 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40A955F72FDA349C, double 0x40A955F72FDA349C>, <2 x double> <double 0x40B103E466CE6960, double 0x40B103E466CE6960>, <2 x double> %58) #6
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %72, <2 x double> <double 0xBE23ACFF2B1B8BEC, double 0xBE23ACFF2B1B8BEC>, <2 x double> %52) #6
  %74 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0xBC9A15164BF4F369, double 0xBC9A15164BF4F369>, <2 x double> %55) #6
  %75 = fmul <2 x double> %56, %71
  %76 = fadd <2 x double> %75, %74
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0D3ACCB8514AB13, double 0xC0D3ACCB8514AB13>, <2 x double> <double 0xC0BD20424648FD63, double 0xC0BD20424648FD63>, <2 x double> %58) #6
  %78 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0x3E52C76D37FDB57D, double 0x3E52C76D37FDB57D>, <2 x double> %52) #6
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %78, <2 x double> <double 0x3CDD6F95068FEEA4, double 0x3CDD6F95068FEEA4>, <2 x double> %55) #6
  %80 = fmul <2 x double> %56, %76
  %81 = fadd <2 x double> %80, %79
  %82 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40CE5A08EC3F1AF9, double 0x40CE5A08EC3F1AF9>, <2 x double> <double 0x40C2A8FD1A1289EB, double 0x40C2A8FD1A1289EB>, <2 x double> %58) #6
  %83 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %82, <2 x double> <double 0xBE7ABA200DE4015C, double 0xBE7ABA200DE4015C>, <2 x double> %52) #6
  %84 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %83, <2 x double> <double 0xBD1F56D9FF51274F, double 0xBD1F56D9FF51274F>, <2 x double> %55) #6
  %85 = fmul <2 x double> %56, %81
  %86 = fadd <2 x double> %85, %84
  %87 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC0B806DFCAF3E8F0, double 0xC0B806DFCAF3E8F0>, <2 x double> <double 0xC0C27F028C42F7FD, double 0xC0C27F028C42F7FD>, <2 x double> %58) #6
  %88 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> <double 0x3E9D0EE6A4A80D73, double 0x3E9D0EE6A4A80D73>, <2 x double> %52) #6
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %88, <2 x double> <double 0x3D5F683984140301, double 0x3D5F683984140301>, <2 x double> %55) #6
  %90 = fmul <2 x double> %56, %86
  %91 = fadd <2 x double> %90, %89
  %92 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x40936030E9797DA0, double 0x40936030E9797DA0>, <2 x double> <double 0x40BCDB58257A0C6D, double 0x40BCDB58257A0C6D>, <2 x double> %58) #6
  %93 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %92, <2 x double> <double 0xBEB8137ED27E2624, double 0xBEB8137ED27E2624>, <2 x double> %52) #6
  %94 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %93, <2 x double> <double 0xBD9D8453B9E7FD78, double 0xBD9D8453B9E7FD78>, <2 x double> %55) #6
  %95 = fmul <2 x double> %56, %91
  %96 = fadd <2 x double> %95, %94
  %97 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC054869BB9D7AF08, double 0xC054869BB9D7AF08>, <2 x double> <double 0xC0B1CDB68AB7C4E4, double 0xC0B1CDB68AB7C4E4>, <2 x double> %58) #6
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %97, <2 x double> <double 0x3ECD0697CBB9A376, double 0x3ECD0697CBB9A376>, <2 x double> %52) #6
  %99 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %98, <2 x double> <double 0x3DD9E6AD5DAB7037, double 0x3DD9E6AD5DAB7037>, <2 x double> %55) #6
  %100 = fmul <2 x double> %56, %96
  %101 = fadd <2 x double> %100, %99
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x4040365402C89D37, double 0x4040365402C89D37>, <2 x double> <double 0x40A13FBBE32520BC, double 0x40A13FBBE32520BC>, <2 x double> %58) #6
  %103 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %102, <2 x double> <double 0xBED4ECCCA37D22C1, double 0xBED4ECCCA37D22C1>, <2 x double> %52) #6
  %104 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %103, <2 x double> <double 0xBE151D7181C08BA0, double 0xBE151D7181C08BA0>, <2 x double> %55) #6
  %105 = fmul <2 x double> %56, %101
  %106 = fadd <2 x double> %105, %104
  %107 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xC03D3BF3C95EBAA1, double 0xC03D3BF3C95EBAA1>, <2 x double> <double 0xC089AE616A35F399, double 0xC089AE616A35F399>, <2 x double> %58) #6
  %108 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %107, <2 x double> <double 0xBEB5F5266774B791, double 0xBEB5F5266774B791>, <2 x double> %52) #6
  %109 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %108, <2 x double> <double 0x3E4FCC572062092A, double 0x3E4FCC572062092A>, <2 x double> %55) #6
  %110 = fmul <2 x double> %56, %106
  %111 = fadd <2 x double> %110, %109
  %112 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FD620B48EBD7FD2, double 0x3FD620B48EBD7FD2>, <2 x double> <double 0x406C5BB5D950D59F, double 0x406C5BB5D950D59F>, <2 x double> %58) #6
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %112, <2 x double> <double 0x3EFD9F88B02EA0EC, double 0x3EFD9F88B02EA0EC>, <2 x double> %52) #6
  %114 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %113, <2 x double> <double 0xBE85F742EC43E5BC, double 0xBE85F742EC43E5BC>, <2 x double> %55) #6
  %115 = fmul <2 x double> %56, %111
  %116 = fadd <2 x double> %115, %114
  %117 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x4015F57BD26EB8D7, double 0x4015F57BD26EB8D7>, <2 x double> <double 0xC0472AB3D15A1B99, double 0xC0472AB3D15A1B99>, <2 x double> %58) #6
  %118 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %117, <2 x double> <double 0xBF10C2E202FB0D80, double 0xBF10C2E202FB0D80>, <2 x double> %52) #6
  %119 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %118, <2 x double> <double 0x3EBB9E6C9DC6519D, double 0x3EBB9E6C9DC6519D>, <2 x double> %55) #6
  %120 = fmul <2 x double> %56, %116
  %121 = fadd <2 x double> %120, %119
  %122 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3F598ED6853E65C9, double 0x3F598ED6853E65C9>, <2 x double> <double 0x40231D60ED75C166, double 0x40231D60ED75C166>, <2 x double> %58) #6
  %123 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0xBEFAE939BE608207, double 0xBEFAE939BE608207>, <2 x double> %52) #6
  %124 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %123, <2 x double> <double 0xBEEF4D25C3E0C2E2, double 0xBEEF4D25C3E0C2E2>, <2 x double> %55) #6
  %125 = fmul <2 x double> %56, %121
  %126 = fadd <2 x double> %125, %124
  %127 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFF8AAF93486CD89, double 0xBFF8AAF93486CD89>, <2 x double> <double 0xC007AADCFF61A9EE, double 0xC007AADCFF61A9EE>, <2 x double> %58) #6
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %127, <2 x double> <double 0x3F4351BFC5997AEF, double 0x3F4351BFC5997AEF>, <2 x double> %52) #6
  %129 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0x3F1F9A326F9B89C2, double 0x3F1F9A326F9B89C2>, <2 x double> %55) #6
  %130 = fmul <2 x double> %56, %126
  %131 = fadd <2 x double> %130, %129
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3EC7AEAC5A2C6C34, double 0x3EC7AEAC5A2C6C34>, <2 x double> <double 0x3FC56155F28A44A2, double 0x3FC56155F28A44A2>, <2 x double> %58) #6
  %133 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> <double 0xBF5BC858BD2C3DEE, double 0xBF5BC858BD2C3DEE>, <2 x double> %52) #6
  %134 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %133, <2 x double> <double 0xBF4C02DB40040B83, double 0xBF4C02DB40040B83>, <2 x double> %55) #6
  %135 = fmul <2 x double> %56, %131
  %136 = fadd <2 x double> %135, %134
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3FE3FFFFD433AA8A, double 0x3FE3FFFFD433AA8A>, <2 x double> <double 0x3FE38258FA079AD9, double 0x3FE38258FA079AD9>, <2 x double> %58) #6
  %138 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double 0x3F2B61E95A64E1B4, double 0x3F2B61E95A64E1B4>, <2 x double> %52) #6
  %139 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %138, <2 x double> <double 0x3F7565BCD0E6A53F, double 0x3F7565BCD0E6A53F>, <2 x double> %55) #6
  %140 = fmul <2 x double> %56, %136
  %141 = fadd <2 x double> %140, %139
  %142 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3E1DEC4B817418DD, double 0x3E1DEC4B817418DD>, <2 x double> <double 0x3F515AA8B364E28B, double 0x3F515AA8B364E28B>, <2 x double> %58) #6
  %143 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %142, <2 x double> <double 0x3F93966FE5D12A2E, double 0x3F93966FE5D12A2E>, <2 x double> %52) #6
  %144 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %143, <2 x double> <double 0xBF9B82CE31288B51, double 0xBF9B82CE31288B51>, <2 x double> %55) #6
  %145 = fmul <2 x double> %56, %141
  %146 = fadd <2 x double> %145, %144
  %147 = bitcast <2 x double> %56 to <2 x i64>
  %148 = and <2 x i64> %147, <i64 -134217728, i64 -134217728>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = fsub <2 x double> %56, %149
  %151 = bitcast <2 x double> %146 to <2 x i64>
  %152 = and <2 x i64> %151, <i64 -134217728, i64 -134217728>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = fsub <2 x double> %146, %153
  %155 = fmul <2 x double> %56, %146
  %156 = fmul <2 x double> %149, %153
  %157 = bitcast <2 x double> %155 to <2 x i64>
  %158 = xor <2 x i64> %157, <i64 -9223372036854775808, i64 -9223372036854775808>
  %159 = bitcast <2 x i64> %158 to <2 x double>
  %160 = fmul <2 x double> %150, %153
  %161 = fmul <2 x double> %154, %149
  %162 = fmul <2 x double> %150, %154
  %163 = fmul <2 x double> %57, %146
  %164 = fadd <2 x double> %156, %159
  %165 = fadd <2 x double> %160, %164
  %166 = fadd <2 x double> %161, %165
  %167 = fadd <2 x double> %162, %166
  %168 = fadd <2 x double> %163, %167
  %169 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE0000000038D52, double 0xBFE0000000038D52>, <2 x double> <double 0xBFE0006CA4753FC8, double 0xBFE0006CA4753FC8>, <2 x double> %58) #6
  %170 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %169, <2 x double> <double 0xBFBA4F4EAB8311A0, double 0xBFBA4F4EAB8311A0>, <2 x double> %52) #6
  %171 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %170, <2 x double> <double 0x3FBCE2F21A042BE2, double 0x3FBCE2F21A042BE2>, <2 x double> %55) #6
  %172 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC8719E29ACB2723, double 0xBC8719E29ACB2723>, <2 x double> <double 0x3C7E64BB064EBF0B, double 0x3C7E64BB064EBF0B>, <2 x double> %58) #6
  %173 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %172, <2 x double> <double 0xBC5CBFA8068241AE, double 0xBC5CBFA8068241AE>, <2 x double> %52) #6
  %174 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %173, <2 x double> <double 0xBC52871BC5EF8ED7, double 0xBC52871BC5EF8ED7>, <2 x double> %55) #6
  %175 = fadd <2 x double> %155, %171
  %176 = fsub <2 x double> %175, %155
  %177 = fsub <2 x double> %175, %176
  %178 = fsub <2 x double> %155, %177
  %179 = fsub <2 x double> %171, %176
  %180 = fadd <2 x double> %179, %178
  %181 = fadd <2 x double> %174, %168
  %182 = fadd <2 x double> %180, %181
  %183 = bitcast <2 x double> %175 to <2 x i64>
  %184 = and <2 x i64> %183, <i64 -134217728, i64 -134217728>
  %185 = bitcast <2 x i64> %184 to <2 x double>
  %186 = fsub <2 x double> %175, %185
  %187 = fmul <2 x double> %56, %175
  %188 = fmul <2 x double> %149, %185
  %189 = bitcast <2 x double> %187 to <2 x i64>
  %190 = xor <2 x i64> %189, <i64 -9223372036854775808, i64 -9223372036854775808>
  %191 = bitcast <2 x i64> %190 to <2 x double>
  %192 = fmul <2 x double> %186, %149
  %193 = fmul <2 x double> %150, %185
  %194 = fmul <2 x double> %150, %186
  %195 = fmul <2 x double> %57, %175
  %196 = fmul <2 x double> %56, %182
  %197 = fadd <2 x double> %188, %191
  %198 = fadd <2 x double> %192, %197
  %199 = fadd <2 x double> %193, %198
  %200 = fadd <2 x double> %194, %199
  %201 = fadd <2 x double> %195, %200
  %202 = fadd <2 x double> %196, %201
  %203 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0x3D50B89397C75A64, double 0x3D50B89397C75A64>, <2 x double> <double 0x3EBADCB2F72A1080, double 0x3EBADCB2F72A1080>, <2 x double> %58) #6
  %204 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %203, <2 x double> <double 0xBFE45F306B230D62, double 0xBFE45F306B230D62>, <2 x double> %52) #6
  %205 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %204, <2 x double> <double 0xBFD812746B0379E7, double 0xBFD812746B0379E7>, <2 x double> %55) #6
  %206 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xB9ED96501FDC09B6, double 0xB9ED96501FDC09B6>, <2 x double> <double 0x3B2CF38C548C5245, double 0x3B2CF38C548C5245>, <2 x double> %58) #6
  %207 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %206, <2 x double> <double 0x3C619932A20CE10B, double 0x3C619932A20CE10B>, <2 x double> %52) #6
  %208 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %207, <2 x double> <double 0x3C6EE12E49CAD52E, double 0x3C6EE12E49CAD52E>, <2 x double> %55) #6
  %209 = fadd <2 x double> %187, %205
  %210 = fsub <2 x double> %209, %187
  %211 = fsub <2 x double> %209, %210
  %212 = fsub <2 x double> %187, %211
  %213 = fsub <2 x double> %205, %210
  %214 = fadd <2 x double> %213, %212
  %215 = fadd <2 x double> %208, %202
  %216 = fadd <2 x double> %214, %215
  %217 = bitcast <2 x double> %209 to <2 x i64>
  %218 = and <2 x i64> %217, <i64 -134217728, i64 -134217728>
  %219 = bitcast <2 x i64> %218 to <2 x double>
  %220 = fsub <2 x double> %209, %219
  %221 = fmul <2 x double> %56, %209
  %222 = fmul <2 x double> %149, %219
  %223 = bitcast <2 x double> %221 to <2 x i64>
  %224 = xor <2 x i64> %223, <i64 -9223372036854775808, i64 -9223372036854775808>
  %225 = bitcast <2 x i64> %224 to <2 x double>
  %226 = fmul <2 x double> %220, %149
  %227 = fmul <2 x double> %150, %219
  %228 = fmul <2 x double> %150, %220
  %229 = fmul <2 x double> %57, %209
  %230 = fmul <2 x double> %56, %216
  %231 = fadd <2 x double> %222, %225
  %232 = fadd <2 x double> %226, %231
  %233 = fadd <2 x double> %227, %232
  %234 = fadd <2 x double> %228, %233
  %235 = fadd <2 x double> %229, %234
  %236 = fadd <2 x double> %230, %235
  %237 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBFE250D048E7A1C6, double 0xBFE250D048E7A1C6>, <2 x double> <double 0xBFE250D055891FD0, double 0xBFE250D055891FD0>, <2 x double> %58) #6
  %238 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %237, <2 x double> <double 0xBFF20DD7505C75E8, double 0xBFF20DD7505C75E8>, <2 x double> %52) #6
  %239 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %238, <2 x double> <double 0x3FF20DD750429B6D, double 0x3FF20DD750429B6D>, <2 x double> %55) #6
  %240 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 0xBC7BA6EE6A6AB496, double 0xBC7BA6EE6A6AB496>, <2 x double> <double 0x3C81B3313996DEA7, double 0x3C81B3313996DEA7>, <2 x double> %58) #6
  %241 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %240, <2 x double> <double 0x3C9751223FE9154D, double 0x3C9751223FE9154D>, <2 x double> %52) #6
  %242 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %241, <2 x double> <double 0x3C71AE3A914FED6D, double 0x3C71AE3A914FED6D>, <2 x double> %55) #6
  %243 = fadd <2 x double> %221, %239
  %244 = fsub <2 x double> %243, %221
  %245 = fsub <2 x double> %243, %244
  %246 = fsub <2 x double> %221, %245
  %247 = fsub <2 x double> %239, %244
  %248 = fadd <2 x double> %247, %246
  %249 = fadd <2 x double> %242, %236
  %250 = fadd <2 x double> %248, %249
  %251 = or <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %252 = bitcast <2 x i64> %251 to <2 x double>
  %253 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %252, <2 x double> %243, <2 x double> %52) #6
  %254 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %250, <2 x double> %52) #6
  %255 = bitcast <2 x double> %253 to <2 x i64>
  %256 = and <2 x i64> %255, <i64 -134217728, i64 -134217728>
  %257 = bitcast <2 x i64> %256 to <2 x double>
  %258 = fsub <2 x double> %253, %257
  %259 = fmul <2 x double> %253, %4
  %260 = fmul <2 x double> %14, %257
  %261 = bitcast <2 x double> %259 to <2 x i64>
  %262 = xor <2 x i64> %261, <i64 -9223372036854775808, i64 -9223372036854775808>
  %263 = bitcast <2 x i64> %262 to <2 x double>
  %264 = fmul <2 x double> %258, %14
  %265 = fmul <2 x double> %15, %257
  %266 = fmul <2 x double> %15, %258
  %267 = fmul <2 x double> %254, %4
  %268 = fadd <2 x double> %260, %263
  %269 = fadd <2 x double> %264, %268
  %270 = fadd <2 x double> %265, %269
  %271 = fadd <2 x double> %266, %270
  %272 = fadd <2 x double> %267, %271
  %273 = fadd <2 x double> %243, %259
  %274 = fsub <2 x double> %273, %259
  %275 = fsub <2 x double> %273, %274
  %276 = fsub <2 x double> %259, %275
  %277 = fsub <2 x double> %243, %274
  %278 = fadd <2 x double> %277, %276
  %279 = fadd <2 x double> %250, %272
  %280 = fadd <2 x double> %278, %279
  %281 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %273, <2 x double> %259, <2 x double> %52) #6
  %282 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %280, <2 x double> %272, <2 x double> %52) #6
  %283 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %281
  %284 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %283
  %285 = fsub <2 x double> %284, %281
  %286 = fadd <2 x double> %285, zeroinitializer
  %287 = fsub <2 x double> %286, %282
  %288 = fadd <2 x double> %281, %282
  %289 = fmul <2 x double> %288, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %290 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %289, i32 8) #6
  %291 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %290) #6
  %292 = fmul <2 x double> %290, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %293 = fadd <2 x double> %281, %292
  %294 = fsub <2 x double> %293, %281
  %295 = fsub <2 x double> %293, %294
  %296 = fsub <2 x double> %281, %295
  %297 = fsub <2 x double> %292, %294
  %298 = fadd <2 x double> %297, %296
  %299 = fadd <2 x double> %282, %298
  %300 = fmul <2 x double> %290, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %301 = fadd <2 x double> %300, %293
  %302 = fsub <2 x double> %301, %293
  %303 = fsub <2 x double> %301, %302
  %304 = fsub <2 x double> %293, %303
  %305 = fsub <2 x double> %300, %302
  %306 = fadd <2 x double> %305, %304
  %307 = fadd <2 x double> %306, %299
  %308 = bitcast <2 x double> %301 to <2 x i64>
  %309 = and <2 x i64> %308, <i64 -134217728, i64 -134217728>
  %310 = bitcast <2 x i64> %309 to <2 x double>
  %311 = fsub <2 x double> %301, %310
  %312 = fmul <2 x double> %301, %301
  %313 = fmul <2 x double> %310, %310
  %314 = bitcast <2 x double> %312 to <2 x i64>
  %315 = xor <2 x i64> %314, <i64 -9223372036854775808, i64 -9223372036854775808>
  %316 = bitcast <2 x i64> %315 to <2 x double>
  %317 = fadd <2 x double> %310, %310
  %318 = fmul <2 x double> %317, %311
  %319 = fmul <2 x double> %311, %311
  %320 = fadd <2 x double> %307, %307
  %321 = fmul <2 x double> %301, %320
  %322 = fadd <2 x double> %313, %316
  %323 = fadd <2 x double> %322, %318
  %324 = fadd <2 x double> %319, %323
  %325 = fadd <2 x double> %321, %324
  %326 = and <2 x i64> %314, <i64 -134217728, i64 -134217728>
  %327 = bitcast <2 x i64> %326 to <2 x double>
  %328 = fsub <2 x double> %312, %327
  %329 = fmul <2 x double> %312, %312
  %330 = fmul <2 x double> %327, %327
  %331 = bitcast <2 x double> %329 to <2 x i64>
  %332 = xor <2 x i64> %331, <i64 -9223372036854775808, i64 -9223372036854775808>
  %333 = bitcast <2 x i64> %332 to <2 x double>
  %334 = fadd <2 x double> %327, %327
  %335 = fmul <2 x double> %334, %328
  %336 = fmul <2 x double> %328, %328
  %337 = fadd <2 x double> %325, %325
  %338 = fmul <2 x double> %312, %337
  %339 = fadd <2 x double> %330, %333
  %340 = fadd <2 x double> %339, %335
  %341 = fadd <2 x double> %336, %340
  %342 = fadd <2 x double> %341, %338
  %343 = fmul <2 x double> %329, %329
  %344 = fmul <2 x double> %301, <double 0x3DE60632A887194C, double 0x3DE60632A887194C>
  %345 = fadd <2 x double> %344, <double 0x3E21F8EAF54829DC, double 0x3E21F8EAF54829DC>
  %346 = fmul <2 x double> %301, <double 0x3E5AE652E8103AB6, double 0x3E5AE652E8103AB6>
  %347 = fadd <2 x double> %346, <double 0x3E927E4C95A9765C, double 0x3E927E4C95A9765C>
  %348 = fmul <2 x double> %301, <double 0x3EC71DE3A11D7656, double 0x3EC71DE3A11D7656>
  %349 = fadd <2 x double> %348, <double 0x3EFA01A01AF6F0B7, double 0x3EFA01A01AF6F0B7>
  %350 = fmul <2 x double> %312, %347
  %351 = fadd <2 x double> %349, %350
  %352 = fmul <2 x double> %301, <double 0x3F2A01A01A02D002, double 0x3F2A01A01A02D002>
  %353 = fadd <2 x double> %352, <double 0x3F56C16C16C145CC, double 0x3F56C16C16C145CC>
  %354 = fmul <2 x double> %301, <double 0x3F81111111111119, double 0x3F81111111111119>
  %355 = fadd <2 x double> %354, <double 0x3FA555555555555A, double 0x3FA555555555555A>
  %356 = fmul <2 x double> %312, %353
  %357 = fadd <2 x double> %355, %356
  %358 = fmul <2 x double> %329, %351
  %359 = fadd <2 x double> %357, %358
  %360 = fmul <2 x double> %345, %343
  %361 = fadd <2 x double> %360, %359
  %362 = fmul <2 x double> %301, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %363 = fmul <2 x double> %310, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %364 = bitcast <2 x double> %362 to <2 x i64>
  %365 = xor <2 x i64> %364, <i64 -9223372036854775808, i64 -9223372036854775808>
  %366 = bitcast <2 x i64> %365 to <2 x double>
  %367 = fmul <2 x double> %311, <double 0x3FC5555550000000, double 0x3FC5555550000000>
  %368 = fmul <2 x double> %310, <double 0x3E25555554000000, double 0x3E25555554000000>
  %369 = fmul <2 x double> %311, <double 0x3E25555554000000, double 0x3E25555554000000>
  %370 = fmul <2 x double> %307, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %371 = fadd <2 x double> %363, %366
  %372 = fadd <2 x double> %367, %371
  %373 = fadd <2 x double> %368, %372
  %374 = fadd <2 x double> %369, %373
  %375 = fadd <2 x double> %370, %374
  %376 = fadd <2 x double> %362, <double 5.000000e-01, double 5.000000e-01>
  %377 = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %376
  %378 = fadd <2 x double> %362, %377
  %379 = fadd <2 x double> %378, %375
  %380 = bitcast <2 x double> %376 to <2 x i64>
  %381 = and <2 x i64> %380, <i64 -134217728, i64 -134217728>
  %382 = bitcast <2 x i64> %381 to <2 x double>
  %383 = fsub <2 x double> %376, %382
  %384 = fmul <2 x double> %301, %376
  %385 = fmul <2 x double> %310, %382
  %386 = bitcast <2 x double> %384 to <2 x i64>
  %387 = xor <2 x i64> %386, <i64 -9223372036854775808, i64 -9223372036854775808>
  %388 = bitcast <2 x i64> %387 to <2 x double>
  %389 = fmul <2 x double> %383, %310
  %390 = fmul <2 x double> %311, %382
  %391 = fmul <2 x double> %311, %383
  %392 = fmul <2 x double> %376, %307
  %393 = fmul <2 x double> %301, %379
  %394 = fadd <2 x double> %385, %388
  %395 = fadd <2 x double> %389, %394
  %396 = fadd <2 x double> %390, %395
  %397 = fadd <2 x double> %391, %396
  %398 = fadd <2 x double> %392, %397
  %399 = fadd <2 x double> %393, %398
  %400 = fadd <2 x double> %384, <double 1.000000e+00, double 1.000000e+00>
  %401 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %400
  %402 = fadd <2 x double> %384, %401
  %403 = fadd <2 x double> %402, %399
  %404 = bitcast <2 x double> %400 to <2 x i64>
  %405 = and <2 x i64> %404, <i64 -134217728, i64 -134217728>
  %406 = bitcast <2 x i64> %405 to <2 x double>
  %407 = fsub <2 x double> %400, %406
  %408 = fmul <2 x double> %301, %400
  %409 = fmul <2 x double> %310, %406
  %410 = bitcast <2 x double> %408 to <2 x i64>
  %411 = xor <2 x i64> %410, <i64 -9223372036854775808, i64 -9223372036854775808>
  %412 = bitcast <2 x i64> %411 to <2 x double>
  %413 = fmul <2 x double> %407, %310
  %414 = fmul <2 x double> %311, %406
  %415 = fmul <2 x double> %311, %407
  %416 = fmul <2 x double> %400, %307
  %417 = fmul <2 x double> %301, %403
  %418 = fadd <2 x double> %409, %412
  %419 = fadd <2 x double> %413, %418
  %420 = fadd <2 x double> %414, %419
  %421 = fadd <2 x double> %415, %420
  %422 = fadd <2 x double> %416, %421
  %423 = fadd <2 x double> %422, %417
  %424 = fadd <2 x double> %408, <double 1.000000e+00, double 1.000000e+00>
  %425 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %424
  %426 = fadd <2 x double> %408, %425
  %427 = fadd <2 x double> %426, %423
  %428 = and <2 x i64> %331, <i64 -134217728, i64 -134217728>
  %429 = bitcast <2 x i64> %428 to <2 x double>
  %430 = fsub <2 x double> %329, %429
  %431 = bitcast <2 x double> %361 to <2 x i64>
  %432 = and <2 x i64> %431, <i64 -134217728, i64 -134217728>
  %433 = bitcast <2 x i64> %432 to <2 x double>
  %434 = fsub <2 x double> %361, %433
  %435 = fmul <2 x double> %329, %361
  %436 = fmul <2 x double> %429, %433
  %437 = bitcast <2 x double> %435 to <2 x i64>
  %438 = xor <2 x i64> %437, <i64 -9223372036854775808, i64 -9223372036854775808>
  %439 = bitcast <2 x i64> %438 to <2 x double>
  %440 = fmul <2 x double> %430, %433
  %441 = fmul <2 x double> %434, %429
  %442 = fmul <2 x double> %430, %434
  %443 = fmul <2 x double> %361, %342
  %444 = fadd <2 x double> %436, %439
  %445 = fadd <2 x double> %440, %444
  %446 = fadd <2 x double> %441, %445
  %447 = fadd <2 x double> %442, %446
  %448 = fadd <2 x double> %443, %447
  %449 = fadd <2 x double> %424, %435
  %450 = fsub <2 x double> %424, %449
  %451 = fadd <2 x double> %435, %450
  %452 = fadd <2 x double> %451, %427
  %453 = fadd <2 x double> %448, %452
  %454 = ashr <4 x i32> %291, <i32 1, i32 1, i32 1, i32 1>
  %455 = add <4 x i32> %454, <i32 1023, i32 1023, i32 undef, i32 0>
  %456 = shufflevector <4 x i32> %455, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %457 = and <4 x i32> %456, <i32 0, i32 -1, i32 0, i32 -1>
  %458 = shl <4 x i32> %457, <i32 20, i32 20, i32 20, i32 20>
  %459 = bitcast <4 x i32> %458 to <2 x double>
  %460 = fmul <2 x double> %449, %459
  %461 = add <4 x i32> %291, <i32 1023, i32 1023, i32 undef, i32 0>
  %462 = sub <4 x i32> %461, %454
  %463 = shufflevector <4 x i32> %462, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %464 = and <4 x i32> %463, <i32 0, i32 -1, i32 0, i32 -1>
  %465 = shl <4 x i32> %464, <i32 20, i32 20, i32 20, i32 20>
  %466 = bitcast <4 x i32> %465 to <2 x double>
  %467 = fmul <2 x double> %460, %466
  %468 = fmul <2 x double> %453, %459
  %469 = fmul <2 x double> %468, %466
  %470 = fcmp uge <2 x double> %281, <double -1.000000e+03, double -1.000000e+03>
  %471 = bitcast <2 x double> %467 to <2 x i64>
  %472 = sext <2 x i1> %470 to <2 x i64>
  %473 = and <2 x i64> %471, %472
  %474 = bitcast <2 x double> %469 to <2 x i64>
  %475 = and <2 x i64> %474, %472
  %476 = bitcast <2 x i64> %473 to <2 x double>
  %477 = bitcast <2 x i64> %475 to <2 x double>
  %478 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %476, <2 x double> %283, <2 x double> %55) #6
  %479 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %477, <2 x double> %287, <2 x double> %55) #6
  %480 = bitcast <2 x double> %478 to <2 x i64>
  %481 = and <2 x i64> %480, <i64 -134217728, i64 -134217728>
  %482 = bitcast <2 x i64> %481 to <2 x double>
  %483 = fsub <2 x double> %478, %482
  %484 = fmul <2 x double> %56, %478
  %485 = fmul <2 x double> %149, %482
  %486 = bitcast <2 x double> %484 to <2 x i64>
  %487 = xor <2 x i64> %486, <i64 -9223372036854775808, i64 -9223372036854775808>
  %488 = bitcast <2 x i64> %487 to <2 x double>
  %489 = fmul <2 x double> %483, %149
  %490 = fmul <2 x double> %150, %482
  %491 = fmul <2 x double> %150, %483
  %492 = fmul <2 x double> %57, %478
  %493 = fmul <2 x double> %56, %479
  %494 = fadd <2 x double> %485, %488
  %495 = fadd <2 x double> %489, %494
  %496 = fadd <2 x double> %490, %495
  %497 = fadd <2 x double> %491, %496
  %498 = fadd <2 x double> %492, %497
  %499 = fadd <2 x double> %493, %498
  %500 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %484, <2 x double> %478, <2 x double> %52) #6
  %501 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %499, <2 x double> %479, <2 x double> %52) #6
  %502 = fadd <2 x double> %500, %501
  %503 = bitcast <2 x i64> %12 to <2 x double>
  %504 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> zeroinitializer, <2 x double> %502, <2 x double> %503) #6
  %505 = ashr <2 x i64> %2, <i64 63, i64 63>
  %506 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %504
  %507 = bitcast <2 x i64> %505 to <2 x double>
  %508 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %504, <2 x double> %506, <2 x double> %507) #6
  %509 = fcmp uno <2 x double> %0, zeroinitializer
  %510 = sext <2 x i1> %509 to <2 x i64>
  %511 = bitcast <2 x i64> %510 to <2 x double>
  %512 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %508, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %511) #6
  ret <2 x double> %512
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospid2_u05sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  tail call void @Sleef_sincospid2_u05sse4(%struct.vdouble2* sret %0, <2 x double> %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospid2_u35sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 4.000000e+00, double 4.000000e+00>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = lshr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %6 = xor <4 x i32> %5, <i32 1, i32 1, i32 0, i32 0>
  %7 = add <4 x i32> %6, %4
  %8 = and <4 x i32> %7, <i32 -2, i32 -2, i32 0, i32 0>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %3, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, <double 0x3D9E42E923057D6C, double 0x3D9E42E923057D6C>
  %14 = fadd <2 x double> %13, <double 0xBE1E3011CA3F21B5, double 0xBE1E3011CA3F21B5>
  %15 = fmul <2 x double> %12, %14
  %16 = fadd <2 x double> %15, <double 0x3E9507830918116C, double 0x3E9507830918116C>
  %17 = fmul <2 x double> %12, %16
  %18 = fadd <2 x double> %17, <double 0xBF032D2CCE398CAE, double 0xBF032D2CCE398CAE>
  %19 = fmul <2 x double> %12, %18
  %20 = fadd <2 x double> %19, <double 0x3F6466BC677591C5, double 0x3F6466BC677591C5>
  %21 = fmul <2 x double> %12, %20
  %22 = fadd <2 x double> %21, <double 0xBFB4ABBCE625BE43, double 0xBFB4ABBCE625BE43>
  %23 = fmul <2 x double> %12, %22
  %24 = fadd <2 x double> %23, <double 0x3FE921FB54442D18, double 0x3FE921FB54442D18>
  %25 = fmul <2 x double> %11, %24
  %26 = fmul <2 x double> %12, <double 0xBD5B29CFED2A85B3, double 0xBD5B29CFED2A85B3>
  %27 = fadd <2 x double> %26, <double 0x3DDF9CD01C42C7CD, double 0x3DDF9CD01C42C7CD>
  %28 = fmul <2 x double> %12, %27
  %29 = fadd <2 x double> %28, <double 0xBE5A6D1ED7B66707, double 0xBE5A6D1ED7B66707>
  %30 = fmul <2 x double> %12, %29
  %31 = fadd <2 x double> %30, <double 0x3ECE1F50684AD332, double 0x3ECE1F50684AD332>
  %32 = fmul <2 x double> %12, %31
  %33 = fadd <2 x double> %32, <double 0xBF355D3C7E3C9FCF, double 0xBF355D3C7E3C9FCF>
  %34 = fmul <2 x double> %12, %33
  %35 = fadd <2 x double> %34, <double 0x3F903C1F081B5AAA, double 0x3F903C1F081B5AAA>
  %36 = fmul <2 x double> %12, %35
  %37 = fadd <2 x double> %36, <double 0xBFD3BD3CC9BE45DE, double 0xBFD3BD3CC9BE45DE>
  %38 = fmul <2 x double> %12, %37
  %39 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %40 = and <4 x i32> %7, <i32 2, i32 2, i32 0, i32 0>
  %41 = icmp eq <4 x i32> %40, zeroinitializer
  %42 = sext <4 x i1> %41 to <4 x i32>
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %44 = bitcast <4 x i32> %43 to <2 x double>
  %45 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %39, <2 x double> %25, <2 x double> %44) #6
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %25, <2 x double> %39, <2 x double> %44) #6
  %47 = and <4 x i32> %7, <i32 4, i32 4, i32 0, i32 0>
  %48 = icmp eq <4 x i32> %47, <i32 4, i32 4, i32 0, i32 0>
  %49 = sext <4 x i1> %48 to <4 x i32>
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 -9223372036854775808, i64 -9223372036854775808>
  %53 = bitcast <2 x double> %45 to <2 x i64>
  %54 = xor <2 x i64> %52, %53
  %55 = add <4 x i32> %8, <i32 2, i32 2, i32 0, i32 0>
  %56 = and <4 x i32> %55, <i32 4, i32 4, i32 0, i32 0>
  %57 = icmp eq <4 x i32> %56, <i32 4, i32 4, i32 0, i32 0>
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x double> %46 to <2 x i64>
  %63 = xor <2 x i64> %61, %62
  %64 = bitcast <2 x double> %1 to <2 x i64>
  %65 = and <2 x i64> %64, <i64 9223372036854775807, i64 9223372036854775807>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = fcmp ule <2 x double> %66, <double 2.500000e+08, double 2.500000e+08>
  %68 = sext <2 x i1> %67 to <2 x i64>
  %69 = and <2 x i64> %54, %68
  %70 = and <2 x i64> %63, %68
  %71 = fcmp oeq <2 x double> %66, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %72 = sext <2 x i1> %71 to <2 x i64>
  %73 = or <2 x i64> %69, %72
  %74 = or <2 x i64> %70, %72
  %75 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %75, align 16, !alias.scope !31
  %76 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %77 = bitcast <2 x double>* %76 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 16, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modfd2_sse4(%struct.vdouble2* noalias nocapture sret, <2 x double>) local_unnamed_addr #2 {
  %3 = fmul <2 x double> %1, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %1, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = bitcast <2 x double> %1 to <2 x i64>
  %14 = and <2 x i64> %13, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp ogt <2 x double> %15, <double 0x4330000000000000, double 0x4330000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> zeroinitializer, <2 x double> %18) #6
  %20 = bitcast <2 x double> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 9223372036854775807, i64 9223372036854775807>
  %22 = and <2 x i64> %13, <i64 -9223372036854775808, i64 -9223372036854775808>
  %23 = or <2 x i64> %21, %22
  %24 = fsub <2 x double> %1, %19
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = or <2 x i64> %26, %22
  %28 = bitcast %struct.vdouble2* %0 to <2 x i64>*
  store <2 x i64> %23, <2 x i64>* %28, align 16, !alias.scope !34
  %29 = getelementptr inbounds %struct.vdouble2, %struct.vdouble2* %0, i64 0, i32 1
  %30 = bitcast <2 x double>* %29 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %30, align 16, !alias.scope !34
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_logd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %29 = fdiv <2 x double> %27, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, %30
  %32 = fmul <2 x double> %31, %31
  %33 = fmul <2 x double> %29, %30
  %34 = fmul <2 x double> %30, <double 0x3FC385C5CBC3F50D, double 0x3FC385C5CBC3F50D>
  %35 = fadd <2 x double> %34, <double 0x3FC7474BA672B05F, double 0x3FC7474BA672B05F>
  %36 = fmul <2 x double> %31, <double 0x3FC3A5791D95DB39, double 0x3FC3A5791D95DB39>
  %37 = fadd <2 x double> %36, %35
  %38 = fmul <2 x double> %30, <double 0x3FCC71BFEED5D419, double 0x3FCC71BFEED5D419>
  %39 = fadd <2 x double> %38, <double 0x3FD249249BFBE987, double 0x3FD249249BFBE987>
  %40 = fmul <2 x double> %30, <double 0x3FD99999998C136E, double 0x3FD99999998C136E>
  %41 = fadd <2 x double> %40, <double 0x3FE555555555593F, double 0x3FE555555555593F>
  %42 = fmul <2 x double> %31, %39
  %43 = fadd <2 x double> %41, %42
  %44 = fmul <2 x double> %32, %37
  %45 = fadd <2 x double> %44, %43
  %46 = bitcast <16 x i8> %26 to <4 x i32>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %48 = sitofp <2 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %48, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %50 = fmul <2 x double> %29, <double 2.000000e+00, double 2.000000e+00>
  %51 = fadd <2 x double> %49, %50
  %52 = fmul <2 x double> %33, %45
  %53 = fadd <2 x double> %51, %52
  %54 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %55 = sext <2 x i1> %54 to <2 x i64>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %56) #6
  %58 = fcmp ult <2 x double> %6, zeroinitializer
  %59 = sext <2 x i1> %58 to <2 x i64>
  %60 = bitcast <2 x i64> %59 to <2 x double>
  %61 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %60) #6
  %62 = fcmp oeq <2 x double> %6, zeroinitializer
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %64) #6
  ret <2 x double> %65
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_logd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %79 = fadd <2 x double> %78, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %80 = fmul <2 x double> %76, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %83 = fadd <2 x double> %82, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %84 = fmul <2 x double> %75, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %85 = fadd <2 x double> %84, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %92 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %92, %95
  %97 = fmul <2 x double> %92, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %98 = fmul <2 x double> %95, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %95, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %103 = fmul <2 x double> %96, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %104 = fmul <2 x double> %96, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %105 = fmul <2 x double> %92, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %106 = fadd <2 x double> %98, %101
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fadd <2 x double> %105, %109
  %111 = fmul <2 x double> %52, <double 2.000000e+00, double 2.000000e+00>
  %112 = fmul <2 x double> %74, <double 2.000000e+00, double 2.000000e+00>
  %113 = fadd <2 x double> %97, %111
  %114 = fsub <2 x double> %97, %113
  %115 = fadd <2 x double> %111, %114
  %116 = fadd <2 x double> %110, %115
  %117 = fadd <2 x double> %116, %112
  %118 = fmul <2 x double> %52, %75
  %119 = fmul <2 x double> %118, %89
  %120 = fadd <2 x double> %113, %119
  %121 = fsub <2 x double> %113, %120
  %122 = fadd <2 x double> %119, %121
  %123 = fadd <2 x double> %122, %117
  %124 = fadd <2 x double> %120, %123
  %125 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %126 = sext <2 x i1> %125 to <2 x i64>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %124, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %127) #6
  %129 = fcmp ult <2 x double> %6, zeroinitializer
  %130 = sext <2 x i1> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %131) #6
  %133 = fcmp oeq <2 x double> %6, zeroinitializer
  %134 = sext <2 x i1> %133 to <2 x i64>
  %135 = bitcast <2 x i64> %134 to <2 x double>
  %136 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %135) #6
  ret <2 x double> %136
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_powd2_u10sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = tail call <2 x double> @Sleef_powd2_u10sse4(<2 x double> %0, <2 x double> %1)
  ret <2 x double> %3
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sinhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_sinhd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_coshd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_coshd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_tanhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_tanhd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sinhd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = fmul <2 x double> %6, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %9 = fadd <2 x double> %8, %4
  %10 = fmul <2 x double> %6, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %11 = fadd <2 x double> %10, %9
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %11, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %16 = fadd <2 x double> %15, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %17 = fmul <2 x double> %11, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %18 = fadd <2 x double> %17, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %19 = fmul <2 x double> %11, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %20 = fadd <2 x double> %19, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %21 = fmul <2 x double> %12, %18
  %22 = fadd <2 x double> %20, %21
  %23 = fmul <2 x double> %11, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %24 = fadd <2 x double> %23, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %25 = fmul <2 x double> %11, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %26 = fadd <2 x double> %25, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %27 = fmul <2 x double> %12, %24
  %28 = fadd <2 x double> %26, %27
  %29 = fmul <2 x double> %13, %22
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %16, %14
  %32 = fadd <2 x double> %31, %30
  %33 = fmul <2 x double> %11, %12
  %34 = fmul <2 x double> %33, %32
  %35 = fmul <2 x double> %12, <double 5.000000e-01, double 5.000000e-01>
  %36 = fadd <2 x double> %35, %34
  %37 = fadd <2 x double> %11, %36
  %38 = icmp eq <4 x i32> %7, zeroinitializer
  %39 = sext <4 x i1> %38 to <4 x i32>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %41 = fadd <2 x double> %37, <double 1.000000e+00, double 1.000000e+00>
  %42 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %43 = add <4 x i32> %42, <i32 1023, i32 1023, i32 undef, i32 0>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %45 = and <4 x i32> %44, <i32 0, i32 -1, i32 0, i32 -1>
  %46 = shl <4 x i32> %45, <i32 20, i32 20, i32 20, i32 20>
  %47 = bitcast <4 x i32> %46 to <2 x double>
  %48 = fmul <2 x double> %41, %47
  %49 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 0>
  %50 = sub <4 x i32> %49, %42
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %52 = and <4 x i32> %51, <i32 0, i32 -1, i32 0, i32 -1>
  %53 = shl <4 x i32> %52, <i32 20, i32 20, i32 20, i32 20>
  %54 = bitcast <4 x i32> %53 to <2 x double>
  %55 = fmul <2 x double> %48, %54
  %56 = fadd <2 x double> %55, <double -1.000000e+00, double -1.000000e+00>
  %57 = bitcast <4 x i32> %40 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %56, <2 x double> %37, <2 x double> %57) #6
  %59 = fadd <2 x double> %58, <double 2.000000e+00, double 2.000000e+00>
  %60 = fadd <2 x double> %58, <double 1.000000e+00, double 1.000000e+00>
  %61 = fdiv <2 x double> %59, %60
  %62 = fmul <2 x double> %58, <double 5.000000e-01, double 5.000000e-01>
  %63 = fmul <2 x double> %62, %61
  %64 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %65 = fcmp uno <2 x double> %63, zeroinitializer
  %66 = or <2 x i1> %65, %64
  %67 = sext <2 x i1> %66 to <2 x i64>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %63, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %68) #6
  %70 = bitcast <2 x double> %69 to <2 x i64>
  %71 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %72 = xor <2 x i64> %71, %70
  %73 = fcmp uno <2 x double> %0, zeroinitializer
  %74 = bitcast <2 x i64> %72 to <2 x double>
  %75 = select <2 x i1> %73, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %74
  ret <2 x double> %75
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_coshd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %6 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %5, i32 8) #6
  %7 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %6) #6
  %8 = fmul <2 x double> %6, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %9 = fadd <2 x double> %8, %4
  %10 = fmul <2 x double> %6, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %11 = fadd <2 x double> %10, %9
  %12 = fmul <2 x double> %11, %11
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %11, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %16 = fadd <2 x double> %15, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %17 = fmul <2 x double> %11, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %18 = fadd <2 x double> %17, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %19 = fmul <2 x double> %11, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %20 = fadd <2 x double> %19, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %21 = fmul <2 x double> %12, %18
  %22 = fadd <2 x double> %20, %21
  %23 = fmul <2 x double> %11, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %24 = fadd <2 x double> %23, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %25 = fmul <2 x double> %11, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %26 = fadd <2 x double> %25, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %27 = fmul <2 x double> %12, %24
  %28 = fadd <2 x double> %26, %27
  %29 = fmul <2 x double> %13, %22
  %30 = fadd <2 x double> %28, %29
  %31 = fmul <2 x double> %16, %14
  %32 = fadd <2 x double> %31, %30
  %33 = fmul <2 x double> %11, %32
  %34 = fadd <2 x double> %33, <double 5.000000e-01, double 5.000000e-01>
  %35 = fmul <2 x double> %12, %34
  %36 = fadd <2 x double> %11, %35
  %37 = fadd <2 x double> %36, <double 1.000000e+00, double 1.000000e+00>
  %38 = ashr <4 x i32> %7, <i32 1, i32 1, i32 1, i32 1>
  %39 = add <4 x i32> %38, <i32 1023, i32 1023, i32 undef, i32 0>
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %41 = and <4 x i32> %40, <i32 0, i32 -1, i32 0, i32 -1>
  %42 = shl <4 x i32> %41, <i32 20, i32 20, i32 20, i32 20>
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = fmul <2 x double> %37, %43
  %45 = add <4 x i32> %7, <i32 1023, i32 1023, i32 undef, i32 0>
  %46 = sub <4 x i32> %45, %38
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %48 = and <4 x i32> %47, <i32 0, i32 -1, i32 0, i32 -1>
  %49 = shl <4 x i32> %48, <i32 20, i32 20, i32 20, i32 20>
  %50 = bitcast <4 x i32> %49 to <2 x double>
  %51 = fmul <2 x double> %44, %50
  %52 = fcmp ogt <2 x double> %4, <double 0x40862E42FE102C83, double 0x40862E42FE102C83>
  %53 = sext <2 x i1> %52 to <2 x i64>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %51, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %54) #6
  %56 = fcmp uge <2 x double> %4, <double -1.000000e+03, double -1.000000e+03>
  %57 = select <2 x i1> %56, <2 x double> %55, <2 x double> zeroinitializer
  %58 = fdiv <2 x double> <double 5.000000e-01, double 5.000000e-01>, %57
  %59 = fmul <2 x double> %57, <double 5.000000e-01, double 5.000000e-01>
  %60 = fadd <2 x double> %59, %58
  %61 = fcmp ogt <2 x double> %4, <double 7.090000e+02, double 7.090000e+02>
  %62 = fcmp uno <2 x double> %60, zeroinitializer
  %63 = or <2 x i1> %62, %61
  %64 = sext <2 x i1> %63 to <2 x i64>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %65) #6
  %67 = fcmp uno <2 x double> %0, zeroinitializer
  %68 = select <2 x i1> %67, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %66
  ret <2 x double> %68
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_tanhd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fmul <2 x double> %4, <double 2.000000e+00, double 2.000000e+00>
  %6 = fmul <2 x double> %5, <double 0x3FF71547652B82FE, double 0x3FF71547652B82FE>
  %7 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %6, i32 8) #6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double> %7) #6
  %9 = fmul <2 x double> %7, <double 0xBFE62E42FEFA3000, double 0xBFE62E42FEFA3000>
  %10 = fadd <2 x double> %5, %9
  %11 = fmul <2 x double> %7, <double 0xBD53DE6AF278ECE6, double 0xBD53DE6AF278ECE6>
  %12 = fadd <2 x double> %11, %10
  %13 = fmul <2 x double> %12, %12
  %14 = fmul <2 x double> %13, %13
  %15 = fmul <2 x double> %14, %14
  %16 = fmul <2 x double> %12, <double 0x3E21F0E4C4ECD775, double 0x3E21F0E4C4ECD775>
  %17 = fadd <2 x double> %16, <double 0x3E5AF68A28CC800A, double 0x3E5AF68A28CC800A>
  %18 = fmul <2 x double> %12, <double 0x3E927E52E0FCD573, double 0x3E927E52E0FCD573>
  %19 = fadd <2 x double> %18, <double 0x3EC71DDF1629E6CE, double 0x3EC71DDF1629E6CE>
  %20 = fmul <2 x double> %12, <double 0x3EFA01A01780879E, double 0x3EFA01A01780879E>
  %21 = fadd <2 x double> %20, <double 0x3F2A01A01B3603F5, double 0x3F2A01A01B3603F5>
  %22 = fmul <2 x double> %13, %19
  %23 = fadd <2 x double> %21, %22
  %24 = fmul <2 x double> %12, <double 0x3F56C16C16C20BA0, double 0x3F56C16C16C20BA0>
  %25 = fadd <2 x double> %24, <double 0x3F8111111110EB39, double 0x3F8111111110EB39>
  %26 = fmul <2 x double> %12, <double 0x3FA555555555553E, double 0x3FA555555555553E>
  %27 = fadd <2 x double> %26, <double 0x3FC555555555555C, double 0x3FC555555555555C>
  %28 = fmul <2 x double> %13, %25
  %29 = fadd <2 x double> %27, %28
  %30 = fmul <2 x double> %14, %23
  %31 = fadd <2 x double> %29, %30
  %32 = fmul <2 x double> %17, %15
  %33 = fadd <2 x double> %32, %31
  %34 = fmul <2 x double> %12, %13
  %35 = fmul <2 x double> %34, %33
  %36 = fmul <2 x double> %13, <double 5.000000e-01, double 5.000000e-01>
  %37 = fadd <2 x double> %36, %35
  %38 = fadd <2 x double> %12, %37
  %39 = icmp eq <4 x i32> %8, zeroinitializer
  %40 = sext <4 x i1> %39 to <4 x i32>
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %42 = fadd <2 x double> %38, <double 1.000000e+00, double 1.000000e+00>
  %43 = ashr <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %44 = add <4 x i32> %43, <i32 1023, i32 1023, i32 undef, i32 0>
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %46 = and <4 x i32> %45, <i32 0, i32 -1, i32 0, i32 -1>
  %47 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %48 = bitcast <4 x i32> %47 to <2 x double>
  %49 = fmul <2 x double> %42, %48
  %50 = add <4 x i32> %8, <i32 1023, i32 1023, i32 undef, i32 0>
  %51 = sub <4 x i32> %50, %43
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %53 = and <4 x i32> %52, <i32 0, i32 -1, i32 0, i32 -1>
  %54 = shl <4 x i32> %53, <i32 20, i32 20, i32 20, i32 20>
  %55 = bitcast <4 x i32> %54 to <2 x double>
  %56 = fmul <2 x double> %49, %55
  %57 = fadd <2 x double> %56, <double -1.000000e+00, double -1.000000e+00>
  %58 = bitcast <4 x i32> %41 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %57, <2 x double> %38, <2 x double> %58) #6
  %60 = fadd <2 x double> %59, <double 2.000000e+00, double 2.000000e+00>
  %61 = fdiv <2 x double> %59, %60
  %62 = fcmp ogt <2 x double> %4, <double 0x4032B70887229E90, double 0x4032B70887229E90>
  %63 = fcmp uno <2 x double> %61, zeroinitializer
  %64 = or <2 x i1> %63, %62
  %65 = sext <2 x i1> %64 to <2 x i64>
  %66 = bitcast <2 x i64> %65 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %61, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %66) #6
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = and <2 x i64> %2, <i64 -9223372036854775808, i64 -9223372036854775808>
  %70 = xor <2 x i64> %69, %68
  %71 = fcmp uno <2 x double> %0, zeroinitializer
  %72 = bitcast <2 x i64> %70 to <2 x double>
  %73 = select <2 x i1> %71, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %72
  ret <2 x double> %73
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_asinhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_asinhd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_acoshd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_acoshd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_atanhd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_atanhd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_cbrtd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x2D30000000000000, double 0x2D30000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %4, <double 0x52B0000000000000, double 0x52B0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %4, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <4 x i32>
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %12 = and <4 x i32> %11, <i32 -1048576, i32 -1048576, i32 0, i32 0>
  %13 = lshr exact <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = bitcast <2 x i64> %6 to <4 x i32>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 -1, i8 3, i8 0, i8 0, i8 -1, i8 3, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> <i8 43, i8 5, i8 0, i8 0, i8 43, i8 5, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %16) #6
  %18 = bitcast <16 x i8> %17 to <4 x i32>
  %19 = sub <4 x i32> %13, %18
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 undef, i32 undef>
  %21 = sub <4 x i32> <i32 -1, i32 -1, i32 0, i32 0>, %19
  %22 = ashr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = add <4 x i32> %22, <i32 1023, i32 1023, i32 undef, i32 0>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %25 = and <4 x i32> %24, <i32 0, i32 -1, i32 0, i32 -1>
  %26 = shl <4 x i32> %25, <i32 20, i32 20, i32 20, i32 20>
  %27 = bitcast <4 x i32> %26 to <2 x double>
  %28 = fmul <2 x double> %27, %0
  %29 = add <4 x i32> %21, <i32 1023, i32 1023, i32 undef, i32 0>
  %30 = sub <4 x i32> %29, %22
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %32 = and <4 x i32> %31, <i32 0, i32 -1, i32 0, i32 -1>
  %33 = shl <4 x i32> %32, <i32 20, i32 20, i32 20, i32 20>
  %34 = bitcast <4 x i32> %33 to <2 x double>
  %35 = fmul <2 x double> %28, %34
  %36 = shufflevector <4 x i32> %20, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %37 = sitofp <2 x i32> %36 to <2 x double>
  %38 = fadd <2 x double> %37, <double 6.144000e+03, double 6.144000e+03>
  %39 = fmul <2 x double> %38, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %40 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %39) #6
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %42 = sitofp <2 x i32> %41 to <2 x double>
  %43 = fmul <2 x double> %42, <double 3.000000e+00, double 3.000000e+00>
  %44 = fsub <2 x double> %38, %43
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %44) #6
  %46 = icmp eq <4 x i32> %45, <i32 1, i32 1, i32 0, i32 0>
  %47 = sext <4 x i1> %46 to <4 x i32>
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %49 = bitcast <4 x i32> %48 to <2 x double>
  %50 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3FF428A2F98D728B, double 0x3FF428A2F98D728B>, <2 x double> %49) #6
  %51 = icmp eq <4 x i32> %45, <i32 2, i32 2, i32 0, i32 0>
  %52 = sext <4 x i1> %51 to <4 x i32>
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %54 = bitcast <4 x i32> %53 to <2 x double>
  %55 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %50, <2 x double> <double 0x3FF965FEA53D6E3D, double 0x3FF965FEA53D6E3D>, <2 x double> %54) #6
  %56 = add <4 x i32> %40, <i32 -2048, i32 -2048, i32 0, i32 0>
  %57 = ashr <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %58 = add <4 x i32> %57, <i32 1023, i32 1023, i32 undef, i32 0>
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %60 = and <4 x i32> %59, <i32 0, i32 -1, i32 0, i32 -1>
  %61 = shl <4 x i32> %60, <i32 20, i32 20, i32 20, i32 20>
  %62 = bitcast <4 x i32> %61 to <2 x double>
  %63 = fmul <2 x double> %55, %62
  %64 = add <4 x i32> %40, <i32 -1025, i32 -1025, i32 undef, i32 0>
  %65 = sub <4 x i32> %64, %57
  %66 = shufflevector <4 x i32> %65, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %67 = and <4 x i32> %66, <i32 0, i32 -1, i32 0, i32 -1>
  %68 = shl <4 x i32> %67, <i32 20, i32 20, i32 20, i32 20>
  %69 = bitcast <4 x i32> %68 to <2 x double>
  %70 = fmul <2 x double> %63, %69
  %71 = bitcast <2 x double> %70 to <2 x i64>
  %72 = bitcast <2 x double> %35 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 -9223372036854775808, i64 -9223372036854775808>
  %74 = xor <2 x i64> %73, %71
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = and <2 x i64> %72, <i64 9223372036854775807, i64 9223372036854775807>
  %77 = bitcast <2 x i64> %76 to <2 x double>
  %78 = fmul <2 x double> %77, <double 0xBFE47CE4F76BED42, double 0xBFE47CE4F76BED42>
  %79 = fadd <2 x double> %78, <double 0x4007B141AAA12A9C, double 0x4007B141AAA12A9C>
  %80 = fmul <2 x double> %79, %77
  %81 = fadd <2 x double> %80, <double 0xC016EF22A5E505B3, double 0xC016EF22A5E505B3>
  %82 = fmul <2 x double> %81, %77
  %83 = fadd <2 x double> %82, <double 0x401828DC834C5911, double 0x401828DC834C5911>
  %84 = fmul <2 x double> %83, %77
  %85 = fadd <2 x double> %84, <double 0xC00EDE0AF7836A8B, double 0xC00EDE0AF7836A8B>
  %86 = fmul <2 x double> %85, %77
  %87 = fadd <2 x double> %86, <double 0x4001D887ACE5AC54, double 0x4001D887ACE5AC54>
  %88 = fmul <2 x double> %87, %87
  %89 = fmul <2 x double> %88, %88
  %90 = fmul <2 x double> %89, %77
  %91 = fsub <2 x double> %90, %87
  %92 = fmul <2 x double> %91, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %93 = fsub <2 x double> %87, %92
  %94 = fmul <2 x double> %93, %77
  %95 = fmul <2 x double> %93, %94
  %96 = fmul <2 x double> %95, <double 0x3FE5555555555555, double 0x3FE5555555555555>
  %97 = fmul <2 x double> %93, %95
  %98 = fadd <2 x double> %97, <double -1.000000e+00, double -1.000000e+00>
  %99 = fmul <2 x double> %96, %98
  %100 = fsub <2 x double> %95, %99
  %101 = fmul <2 x double> %100, %75
  ret <2 x double> %101
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_cbrtd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_cbrtd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_expm1d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_expm1d2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log10d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FB0F63BD2A55192, double 0x3FB0F63BD2A55192>
  %79 = fadd <2 x double> %78, <double 0x3FB4381A2BF55D48, double 0x3FB4381A2BF55D48>
  %80 = fmul <2 x double> %76, <double 0x3FB10895F3EA9496, double 0x3FB10895F3EA9496>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FB8B4D992891F74, double 0x3FB8B4D992891F74>
  %83 = fadd <2 x double> %82, <double 0x3FBFC3FA6F6D7821, double 0x3FBFC3FA6F6D7821>
  %84 = fmul <2 x double> %75, <double 0x3FC63C6277499B88, double 0x3FC63C6277499B88>
  %85 = fadd <2 x double> %84, <double 0x3FD287A7636F4570, double 0x3FD287A7636F4570>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %92 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %92, %95
  %97 = fmul <2 x double> %92, <double 0x3FD34413509F79FF, double 0x3FD34413509F79FF>
  %98 = fmul <2 x double> %95, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %95, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %103 = fmul <2 x double> %96, <double 0x3FD3441350000000, double 0x3FD3441350000000>
  %104 = fmul <2 x double> %96, <double 0x3E03EF3FE0000000, double 0x3E03EF3FE0000000>
  %105 = fmul <2 x double> %92, <double 0xBC49DC1DA994FD21, double 0xBC49DC1DA994FD21>
  %106 = fadd <2 x double> %98, %101
  %107 = fadd <2 x double> %102, %106
  %108 = fadd <2 x double> %103, %107
  %109 = fadd <2 x double> %104, %108
  %110 = fadd <2 x double> %105, %109
  %111 = bitcast <2 x double> %52 to <2 x i64>
  %112 = and <2 x i64> %111, <i64 -134217728, i64 -134217728>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = fsub <2 x double> %52, %113
  %115 = fmul <2 x double> %52, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %116 = fmul <2 x double> %113, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %117 = bitcast <2 x double> %115 to <2 x i64>
  %118 = xor <2 x i64> %117, <i64 -9223372036854775808, i64 -9223372036854775808>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = fmul <2 x double> %114, <double 0x3FEBCB7B10000000, double 0x3FEBCB7B10000000>
  %121 = fmul <2 x double> %113, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %122 = fmul <2 x double> %114, <double 0x3E449B9438000000, double 0x3E449B9438000000>
  %123 = fmul <2 x double> %52, <double 0x3C6A5B1DC915F38F, double 0x3C6A5B1DC915F38F>
  %124 = fmul <2 x double> %74, <double 0x3FEBCB7B1526E50E, double 0x3FEBCB7B1526E50E>
  %125 = fadd <2 x double> %116, %119
  %126 = fadd <2 x double> %120, %125
  %127 = fadd <2 x double> %121, %126
  %128 = fadd <2 x double> %122, %127
  %129 = fadd <2 x double> %123, %128
  %130 = fadd <2 x double> %129, %124
  %131 = fadd <2 x double> %97, %115
  %132 = fsub <2 x double> %97, %131
  %133 = fadd <2 x double> %115, %132
  %134 = fadd <2 x double> %110, %133
  %135 = fadd <2 x double> %134, %130
  %136 = fmul <2 x double> %52, %75
  %137 = fmul <2 x double> %136, %89
  %138 = fadd <2 x double> %131, %137
  %139 = fsub <2 x double> %131, %138
  %140 = fadd <2 x double> %137, %139
  %141 = fadd <2 x double> %140, %135
  %142 = fadd <2 x double> %138, %141
  %143 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %144 = sext <2 x i1> %143 to <2 x i64>
  %145 = bitcast <2 x i64> %144 to <2 x double>
  %146 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %142, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %145) #6
  %147 = fcmp ult <2 x double> %6, zeroinitializer
  %148 = sext <2 x i1> %147 to <2 x i64>
  %149 = bitcast <2 x i64> %148 to <2 x double>
  %150 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %146, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %149) #6
  %151 = fcmp oeq <2 x double> %6, zeroinitializer
  %152 = sext <2 x i1> %151 to <2 x i64>
  %153 = bitcast <2 x i64> %152 to <2 x double>
  %154 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %150, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %153) #6
  ret <2 x double> %154
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log2d2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %27, <double 1.000000e+00, double 1.000000e+00>
  %29 = fsub <2 x double> %27, %28
  %30 = fsub <2 x double> <double -1.000000e+00, double -1.000000e+00>, %29
  %31 = fsub <2 x double> %19, %28
  %32 = fadd <2 x double> %31, %30
  %33 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %34 = fadd <2 x double> %33, <double -1.000000e+00, double -1.000000e+00>
  %35 = fsub <2 x double> %33, %34
  %36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %35
  %37 = fsub <2 x double> %19, %34
  %38 = fadd <2 x double> %37, %36
  %39 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %33
  %40 = bitcast <2 x double> %33 to <2 x i64>
  %41 = and <2 x i64> %40, <i64 -134217728, i64 -134217728>
  %42 = bitcast <2 x i64> %41 to <2 x double>
  %43 = fsub <2 x double> %33, %42
  %44 = bitcast <2 x double> %39 to <2 x i64>
  %45 = and <2 x i64> %44, <i64 -134217728, i64 -134217728>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = fsub <2 x double> %39, %46
  %48 = bitcast <2 x double> %27 to <2 x i64>
  %49 = and <2 x i64> %48, <i64 -134217728, i64 -134217728>
  %50 = bitcast <2 x i64> %49 to <2 x double>
  %51 = fsub <2 x double> %27, %50
  %52 = fmul <2 x double> %27, %39
  %53 = fmul <2 x double> %50, %46
  %54 = fsub <2 x double> %53, %52
  %55 = fmul <2 x double> %47, %50
  %56 = fmul <2 x double> %51, %46
  %57 = fmul <2 x double> %51, %47
  %58 = fmul <2 x double> %42, %46
  %59 = fmul <2 x double> %47, %42
  %60 = fmul <2 x double> %43, %46
  %61 = fmul <2 x double> %43, %47
  %62 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %58
  %63 = fsub <2 x double> %62, %59
  %64 = fsub <2 x double> %63, %60
  %65 = fsub <2 x double> %64, %61
  %66 = fmul <2 x double> %52, %65
  %67 = fadd <2 x double> %54, %55
  %68 = fadd <2 x double> %56, %67
  %69 = fadd <2 x double> %57, %68
  %70 = fadd <2 x double> %69, %66
  %71 = fmul <2 x double> %52, %38
  %72 = fsub <2 x double> %32, %71
  %73 = fmul <2 x double> %39, %72
  %74 = fadd <2 x double> %73, %70
  %75 = fmul <2 x double> %52, %52
  %76 = fmul <2 x double> %75, %75
  %77 = fmul <2 x double> %76, %76
  %78 = fmul <2 x double> %75, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %79 = fadd <2 x double> %78, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %80 = fmul <2 x double> %76, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %81 = fadd <2 x double> %80, %79
  %82 = fmul <2 x double> %75, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %83 = fadd <2 x double> %82, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %84 = fmul <2 x double> %75, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %85 = fadd <2 x double> %84, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %86 = fmul <2 x double> %76, %83
  %87 = fadd <2 x double> %85, %86
  %88 = fmul <2 x double> %77, %81
  %89 = fadd <2 x double> %88, %87
  %90 = bitcast <16 x i8> %26 to <4 x i32>
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %92 = sitofp <2 x i32> %91 to <2 x double>
  %93 = bitcast <2 x double> %52 to <2 x i64>
  %94 = and <2 x i64> %93, <i64 -134217728, i64 -134217728>
  %95 = bitcast <2 x i64> %94 to <2 x double>
  %96 = fsub <2 x double> %52, %95
  %97 = fmul <2 x double> %52, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %98 = fmul <2 x double> %95, <double 0x4007154760000000, double 0x4007154760000000>
  %99 = bitcast <2 x double> %97 to <2 x i64>
  %100 = xor <2 x i64> %99, <i64 -9223372036854775808, i64 -9223372036854775808>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = fmul <2 x double> %96, <double 0x4007154760000000, double 0x4007154760000000>
  %103 = fmul <2 x double> %95, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %104 = fmul <2 x double> %96, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %105 = fmul <2 x double> %52, <double 0x3C5BEDDA32EBBCB1, double 0x3C5BEDDA32EBBCB1>
  %106 = fmul <2 x double> %74, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %107 = fadd <2 x double> %98, %101
  %108 = fadd <2 x double> %102, %107
  %109 = fadd <2 x double> %103, %108
  %110 = fadd <2 x double> %104, %109
  %111 = fadd <2 x double> %105, %110
  %112 = fadd <2 x double> %111, %106
  %113 = fadd <2 x double> %97, %92
  %114 = fsub <2 x double> %113, %92
  %115 = fsub <2 x double> %113, %114
  %116 = fsub <2 x double> %92, %115
  %117 = fsub <2 x double> %97, %114
  %118 = fadd <2 x double> %117, %116
  %119 = fadd <2 x double> %118, %112
  %120 = fmul <2 x double> %52, %75
  %121 = fmul <2 x double> %120, %89
  %122 = fadd <2 x double> %113, %121
  %123 = fsub <2 x double> %122, %113
  %124 = fsub <2 x double> %122, %123
  %125 = fsub <2 x double> %113, %124
  %126 = fsub <2 x double> %121, %123
  %127 = fadd <2 x double> %126, %125
  %128 = fadd <2 x double> %127, %119
  %129 = fadd <2 x double> %122, %128
  %130 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %131 = sext <2 x i1> %130 to <2 x i64>
  %132 = bitcast <2 x i64> %131 to <2 x double>
  %133 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %129, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %132) #6
  %134 = fcmp ult <2 x double> %6, zeroinitializer
  %135 = sext <2 x i1> %134 to <2 x i64>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %133, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %136) #6
  %138 = fcmp oeq <2 x double> %6, zeroinitializer
  %139 = sext <2 x i1> %138 to <2 x i64>
  %140 = bitcast <2 x i64> %139 to <2 x double>
  %141 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %137, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %140) #6
  ret <2 x double> %141
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log2d2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, <double 0x10000000000000, double 0x10000000000000>
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = fmul <2 x double> %0, <double 0x43F0000000000000, double 0x43F0000000000000>
  %5 = bitcast <2 x i64> %3 to <2 x double>
  %6 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %4, <2 x double> %5) #6
  %7 = fmul <2 x double> %6, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %8 = bitcast <2 x double> %7 to <4 x i32>
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %10 = lshr <4 x i32> %9, <i32 20, i32 20, i32 20, i32 20>
  %11 = and <4 x i32> %10, <i32 2047, i32 2047, i32 0, i32 0>
  %12 = add nsw <4 x i32> %11, <i32 -1023, i32 -1023, i32 0, i32 0>
  %13 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %11
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %15 = and <4 x i32> %14, <i32 0, i32 -1, i32 0, i32 -1>
  %16 = shl <4 x i32> %15, <i32 20, i32 20, i32 20, i32 20>
  %17 = bitcast <2 x double> %6 to <4 x i32>
  %18 = add <4 x i32> %16, %17
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = bitcast <2 x i64> %3 to <4 x i32>
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %22 = add nsw <4 x i32> %11, <i32 -1087, i32 -1087, i32 0, i32 0>
  %23 = bitcast <4 x i32> %12 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = bitcast <4 x i32> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #6
  %27 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %28 = fadd <2 x double> %19, <double 1.000000e+00, double 1.000000e+00>
  %29 = fdiv <2 x double> %27, %28
  %30 = fmul <2 x double> %29, %29
  %31 = fmul <2 x double> %30, <double 0x3FCC501739F17BA9, double 0x3FCC501739F17BA9>
  %32 = fadd <2 x double> %31, <double 0x3FCC2B7A962850E9, double 0x3FCC2B7A962850E9>
  %33 = fmul <2 x double> %30, %32
  %34 = fadd <2 x double> %33, <double 0x3FD0CAAEEB877481, double 0x3FD0CAAEEB877481>
  %35 = fmul <2 x double> %30, %34
  %36 = fadd <2 x double> %35, <double 0x3FD484AC6A7CB2DD, double 0x3FD484AC6A7CB2DD>
  %37 = fmul <2 x double> %30, %36
  %38 = fadd <2 x double> %37, <double 0x3FDA617636C2C254, double 0x3FDA617636C2C254>
  %39 = fmul <2 x double> %30, %38
  %40 = fadd <2 x double> %39, <double 0x3FE2776C50E7EDE9, double 0x3FE2776C50E7EDE9>
  %41 = fmul <2 x double> %30, %40
  %42 = fadd <2 x double> %41, <double 0x3FEEC709DC3A07B2, double 0x3FEEC709DC3A07B2>
  %43 = bitcast <16 x i8> %26 to <4 x i32>
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %45 = sitofp <2 x i32> %44 to <2 x double>
  %46 = bitcast <2 x double> %29 to <2 x i64>
  %47 = and <2 x i64> %46, <i64 -134217728, i64 -134217728>
  %48 = bitcast <2 x i64> %47 to <2 x double>
  %49 = fsub <2 x double> %29, %48
  %50 = fmul <2 x double> %29, <double 0x40071547652B82FE, double 0x40071547652B82FE>
  %51 = fmul <2 x double> %48, <double 0x4007154760000000, double 0x4007154760000000>
  %52 = bitcast <2 x double> %50 to <2 x i64>
  %53 = xor <2 x i64> %52, <i64 -9223372036854775808, i64 -9223372036854775808>
  %54 = bitcast <2 x i64> %53 to <2 x double>
  %55 = fmul <2 x double> %49, <double 0x4007154760000000, double 0x4007154760000000>
  %56 = fmul <2 x double> %48, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %57 = fmul <2 x double> %49, <double 0x3E64AE0BF8000000, double 0x3E64AE0BF8000000>
  %58 = fadd <2 x double> %51, %54
  %59 = fadd <2 x double> %55, %58
  %60 = fadd <2 x double> %56, %59
  %61 = fadd <2 x double> %57, %60
  %62 = fadd <2 x double> %50, %45
  %63 = fsub <2 x double> %45, %62
  %64 = fadd <2 x double> %50, %63
  %65 = fadd <2 x double> %64, %61
  %66 = fmul <2 x double> %29, %30
  %67 = fadd <2 x double> %62, %65
  %68 = fmul <2 x double> %66, %42
  %69 = fadd <2 x double> %67, %68
  %70 = fcmp oeq <2 x double> %6, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %69, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %72) #6
  %74 = fcmp ult <2 x double> %6, zeroinitializer
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #6
  %78 = fcmp oeq <2 x double> %6, zeroinitializer
  %79 = sext <2 x i1> %78 to <2 x i64>
  %80 = bitcast <2 x i64> %79 to <2 x double>
  %81 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %77, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %80) #6
  ret <2 x double> %81
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_log1pd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 1.000000e+00, double 1.000000e+00>
  %3 = fcmp olt <2 x double> %2, <double 0x10000000000000, double 0x10000000000000>
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = fmul <2 x double> %2, <double 0x43F0000000000000, double 0x43F0000000000000>
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %5, <2 x double> %6) #6
  %8 = fmul <2 x double> %7, <double 0x3FF5555555555555, double 0x3FF5555555555555>
  %9 = bitcast <2 x double> %8 to <4 x i32>
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %11 = lshr <4 x i32> %10, <i32 20, i32 20, i32 20, i32 20>
  %12 = and <4 x i32> %11, <i32 2047, i32 2047, i32 0, i32 0>
  %13 = add nsw <4 x i32> %12, <i32 -1023, i32 -1023, i32 0, i32 0>
  %14 = sub nsw <4 x i32> <i32 1023, i32 1023, i32 undef, i32 0>, %12
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 3, i32 0, i32 3, i32 1>
  %16 = and <4 x i32> %15, <i32 0, i32 -1, i32 0, i32 -1>
  %17 = shl <4 x i32> %16, <i32 20, i32 20, i32 20, i32 20>
  %18 = add <4 x i32> %17, <i32 0, i32 1072693248, i32 0, i32 1072693248>
  %19 = bitcast <4 x i32> %18 to <2 x double>
  %20 = fadd <2 x double> %19, <double -1.000000e+00, double -1.000000e+00>
  %21 = fmul <2 x double> %19, %0
  %22 = fadd <2 x double> %21, %20
  %23 = bitcast <2 x i64> %4 to <4 x i32>
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 0, i32 0>
  %25 = add nsw <4 x i32> %12, <i32 -1087, i32 -1087, i32 0, i32 0>
  %26 = bitcast <4 x i32> %13 to <16 x i8>
  %27 = bitcast <4 x i32> %25 to <16 x i8>
  %28 = bitcast <4 x i32> %24 to <16 x i8>
  %29 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %26, <16 x i8> %27, <16 x i8> %28) #6
  %30 = bitcast <16 x i8> %29 to <4 x i32>
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %32 = sitofp <2 x i32> %31 to <2 x double>
  %33 = bitcast <2 x double> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fsub <2 x double> %32, %35
  %37 = fmul <2 x double> %32, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %38 = fmul <2 x double> %35, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %39 = bitcast <2 x double> %37 to <2 x i64>
  %40 = xor <2 x i64> %39, <i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %35, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %43 = fmul <2 x double> %36, <double 0x3FE62E42F8000000, double 0x3FE62E42F8000000>
  %44 = fmul <2 x double> %36, <double 0x3E4BE8E7BC000000, double 0x3E4BE8E7BC000000>
  %45 = fmul <2 x double> %32, <double 0x3C7ABC9E3B39803F, double 0x3C7ABC9E3B39803F>
  %46 = fadd <2 x double> %38, %41
  %47 = fadd <2 x double> %42, %46
  %48 = fadd <2 x double> %43, %47
  %49 = fadd <2 x double> %44, %48
  %50 = fadd <2 x double> %45, %49
  %51 = fadd <2 x double> %22, <double 2.000000e+00, double 2.000000e+00>
  %52 = fsub <2 x double> <double 2.000000e+00, double 2.000000e+00>, %51
  %53 = fadd <2 x double> %22, %52
  %54 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %51
  %55 = bitcast <2 x double> %51 to <2 x i64>
  %56 = and <2 x i64> %55, <i64 -134217728, i64 -134217728>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = fsub <2 x double> %51, %57
  %59 = bitcast <2 x double> %54 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -134217728, i64 -134217728>
  %61 = bitcast <2 x i64> %60 to <2 x double>
  %62 = fsub <2 x double> %54, %61
  %63 = bitcast <2 x double> %22 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 -134217728, i64 -134217728>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fsub <2 x double> %22, %65
  %67 = fmul <2 x double> %22, %54
  %68 = fmul <2 x double> %65, %61
  %69 = fsub <2 x double> %68, %67
  %70 = fmul <2 x double> %62, %65
  %71 = fmul <2 x double> %66, %61
  %72 = fmul <2 x double> %66, %62
  %73 = fmul <2 x double> %57, %61
  %74 = fmul <2 x double> %62, %57
  %75 = fmul <2 x double> %58, %61
  %76 = fmul <2 x double> %58, %62
  %77 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %73
  %78 = fsub <2 x double> %77, %74
  %79 = fsub <2 x double> %78, %75
  %80 = fsub <2 x double> %79, %76
  %81 = fmul <2 x double> %67, %80
  %82 = fadd <2 x double> %69, %70
  %83 = fadd <2 x double> %71, %82
  %84 = fadd <2 x double> %72, %83
  %85 = fadd <2 x double> %84, %81
  %86 = fmul <2 x double> %67, %53
  %87 = fsub <2 x double> zeroinitializer, %86
  %88 = fmul <2 x double> %54, %87
  %89 = fadd <2 x double> %88, %85
  %90 = fmul <2 x double> %67, %67
  %91 = fmul <2 x double> %90, %90
  %92 = fmul <2 x double> %91, %91
  %93 = fmul <2 x double> %90, <double 0x3FC3872E67FE8E84, double 0x3FC3872E67FE8E84>
  %94 = fadd <2 x double> %93, <double 0x3FC747353A506035, double 0x3FC747353A506035>
  %95 = fmul <2 x double> %91, <double 0x3FC39C4F5407567E, double 0x3FC39C4F5407567E>
  %96 = fadd <2 x double> %95, %94
  %97 = fmul <2 x double> %90, <double 0x3FCC71C0A65ECD8E, double 0x3FCC71C0A65ECD8E>
  %98 = fadd <2 x double> %97, <double 0x3FD249249A68A245, double 0x3FD249249A68A245>
  %99 = fmul <2 x double> %90, <double 0x3FD99999998F92EA, double 0x3FD99999998F92EA>
  %100 = fadd <2 x double> %99, <double 0x3FE55555555557AE, double 0x3FE55555555557AE>
  %101 = fmul <2 x double> %91, %98
  %102 = fadd <2 x double> %100, %101
  %103 = fmul <2 x double> %92, %96
  %104 = fadd <2 x double> %103, %102
  %105 = fmul <2 x double> %67, <double 2.000000e+00, double 2.000000e+00>
  %106 = fmul <2 x double> %89, <double 2.000000e+00, double 2.000000e+00>
  %107 = fadd <2 x double> %37, %105
  %108 = fsub <2 x double> %37, %107
  %109 = fadd <2 x double> %105, %108
  %110 = fadd <2 x double> %50, %109
  %111 = fadd <2 x double> %110, %106
  %112 = fmul <2 x double> %67, %90
  %113 = fmul <2 x double> %112, %104
  %114 = fadd <2 x double> %107, %113
  %115 = fsub <2 x double> %107, %114
  %116 = fadd <2 x double> %113, %115
  %117 = fadd <2 x double> %116, %111
  %118 = fadd <2 x double> %114, %117
  %119 = fcmp ogt <2 x double> %0, <double 0x7FAC7B1F3CAC7433, double 0x7FAC7B1F3CAC7433>
  %120 = sext <2 x i1> %119 to <2 x i64>
  %121 = bitcast <2 x i64> %120 to <2 x double>
  %122 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %118, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %121) #6
  %123 = fcmp olt <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %124 = fcmp uno <2 x double> %0, zeroinitializer
  %125 = or <2 x i1> %124, %123
  %126 = sext <2 x i1> %125 to <2 x i64>
  %127 = bitcast <2 x i64> %126 to <2 x double>
  %128 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %122, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %127) #6
  %129 = fcmp oeq <2 x double> %0, <double -1.000000e+00, double -1.000000e+00>
  %130 = sext <2 x i1> %129 to <2 x i64>
  %131 = bitcast <2 x i64> %130 to <2 x double>
  %132 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %128, <2 x double> <double 0xFFF0000000000000, double 0xFFF0000000000000>, <2 x double> %131) #6
  %133 = bitcast <2 x double> %0 to <2 x i64>
  %134 = icmp eq <2 x i64> %133, <i64 -9223372036854775808, i64 -9223372036854775808>
  %135 = sext <2 x i1> %134 to <2 x i64>
  %136 = bitcast <2 x i64> %135 to <2 x double>
  %137 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %132, <2 x double> <double -0.000000e+00, double -0.000000e+00>, <2 x double> %136) #6
  ret <2 x double> %137
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fabsd2_sse4(<2 x double>) local_unnamed_addr #3 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  ret <2 x double> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <2 x double> @Sleef_cinz_copysignd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #3 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = or <2 x i64> %6, %4
  %8 = bitcast <2 x i64> %7 to <2 x double>
  ret <2 x double> %8
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmaxd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %0, <2 x double> %1) #6
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #6
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmind2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp uno <2 x double> %1, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %0, <2 x double> %1) #6
  %6 = bitcast <2 x i64> %4 to <2 x double>
  %7 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %0, <2 x double> %6) #6
  ret <2 x double> %7
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fdimd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fsub <2 x double> %0, %1
  %4 = fcmp olt <2 x double> %3, zeroinitializer
  %5 = fcmp oeq <2 x double> %0, %1
  %6 = or <2 x i1> %4, %5
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %3, <2 x double> zeroinitializer, <2 x double> %8) #6
  ret <2 x double> %9
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_truncd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 11) #6
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_floord2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp olt <2 x double> %11, zeroinitializer
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fadd <2 x double> %11, <double 1.000000e+00, double 1.000000e+00>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> %14, <2 x double> %15) #6
  %17 = bitcast <2 x double> %0 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 9223372036854775807, i64 9223372036854775807>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %19, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = fcmp oge <2 x double> %19, <double 0x4330000000000000, double 0x4330000000000000>
  %22 = or <2 x i1> %21, %20
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = fsub <2 x double> %0, %16
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = and <2 x i64> %17, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = or <2 x i64> %26, %27
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = bitcast <2 x i64> %23 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %0, <2 x double> %30) #6
  ret <2 x double> %31
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_ceild2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fmul <2 x double> %0, <double 0x3E00000000000000, double 0x3E00000000000000>
  %3 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %2) #6
  %4 = shufflevector <4 x i32> %3, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %5 = sitofp <2 x i32> %4 to <2 x double>
  %6 = fmul <2 x double> %5, <double 0x41E0000000000000, double 0x41E0000000000000>
  %7 = fsub <2 x double> %0, %6
  %8 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %7) #6
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %10 = sitofp <2 x i32> %9 to <2 x double>
  %11 = fsub <2 x double> %7, %10
  %12 = fcmp ole <2 x double> %11, zeroinitializer
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fadd <2 x double> %11, <double -1.000000e+00, double -1.000000e+00>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %14, <2 x double> %11, <2 x double> %15) #6
  %17 = bitcast <2 x double> %0 to <2 x i64>
  %18 = and <2 x i64> %17, <i64 9223372036854775807, i64 9223372036854775807>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %19, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %21 = fcmp oge <2 x double> %19, <double 0x4330000000000000, double 0x4330000000000000>
  %22 = or <2 x i1> %21, %20
  %23 = sext <2 x i1> %22 to <2 x i64>
  %24 = fsub <2 x double> %0, %16
  %25 = bitcast <2 x double> %24 to <2 x i64>
  %26 = and <2 x i64> %25, <i64 9223372036854775807, i64 9223372036854775807>
  %27 = and <2 x i64> %17, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = or <2 x i64> %26, %27
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = bitcast <2 x i64> %23 to <2 x double>
  %31 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %29, <2 x double> %0, <2 x double> %30) #6
  ret <2 x double> %31
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_roundd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fadd <2 x double> %0, <double 5.000000e-01, double 5.000000e-01>
  %3 = fmul <2 x double> %2, <double 0x3E00000000000000, double 0x3E00000000000000>
  %4 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %3) #6
  %5 = shufflevector <4 x i32> %4, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %6 = sitofp <2 x i32> %5 to <2 x double>
  %7 = fmul <2 x double> %6, <double 0x41E0000000000000, double 0x41E0000000000000>
  %8 = fsub <2 x double> %2, %7
  %9 = tail call <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double> %8) #6
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %11 = sitofp <2 x i32> %10 to <2 x double>
  %12 = fsub <2 x double> %8, %11
  %13 = fcmp ole <2 x double> %2, zeroinitializer
  %14 = fcmp oeq <2 x double> %12, zeroinitializer
  %15 = and <2 x i1> %14, %13
  %16 = sext <2 x i1> %15 to <2 x i64>
  %17 = fadd <2 x double> %2, <double -1.000000e+00, double -1.000000e+00>
  %18 = bitcast <2 x i64> %16 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %17, <2 x double> %18) #6
  %20 = fcmp olt <2 x double> %12, zeroinitializer
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %23 = bitcast <2 x i64> %21 to <2 x double>
  %24 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %12, <2 x double> %22, <2 x double> %23) #6
  %25 = fcmp oeq <2 x double> %0, <double 0x3FDFFFFFFFFFFFFF, double 0x3FDFFFFFFFFFFFFF>
  %26 = sext <2 x i1> %25 to <2 x i64>
  %27 = bitcast <2 x i64> %26 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %27) #6
  %29 = bitcast <2 x double> %0 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807>
  %31 = bitcast <2 x i64> %30 to <2 x double>
  %32 = fcmp oeq <2 x double> %31, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %33 = fcmp oge <2 x double> %31, <double 0x4330000000000000, double 0x4330000000000000>
  %34 = or <2 x i1> %33, %32
  %35 = sext <2 x i1> %34 to <2 x i64>
  %36 = fsub <2 x double> %28, %24
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 9223372036854775807, i64 9223372036854775807>
  %39 = and <2 x i64> %29, <i64 -9223372036854775808, i64 -9223372036854775808>
  %40 = or <2 x i64> %38, %39
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = bitcast <2 x i64> %35 to <2 x double>
  %43 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %41, <2 x double> %0, <2 x double> %42) #6
  ret <2 x double> %43
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_rintd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %0, i32 8) #6
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_nextafterd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = fcmp oeq <2 x double> %0, zeroinitializer
  %4 = sext <2 x i1> %3 to <2 x i64>
  %5 = bitcast <2 x double> %1 to <2 x i64>
  %6 = and <2 x i64> %5, <i64 -9223372036854775808, i64 -9223372036854775808>
  %7 = bitcast <2 x i64> %6 to <2 x double>
  %8 = bitcast <2 x i64> %4 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = ashr <2 x i64> %10, <i64 63, i64 63>
  %12 = fcmp ole <2 x double> %9, %1
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = xor <2 x i64> %11, %13
  %15 = bitcast <2 x double> %9 to <4 x i32>
  %16 = xor <4 x i32> %15, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %17 = add <4 x i32> %16, <i32 1, i32 0, i32 1, i32 0>
  %18 = icmp eq <4 x i32> %17, <i32 0, i32 -1, i32 0, i32 -1>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = and <2 x i64> %20, <i64 1, i64 1>
  %22 = bitcast <2 x i64> %21 to <4 x float>
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %24 = bitcast <4 x float> %23 to <4 x i32>
  %25 = add <4 x i32> %17, %24
  %26 = bitcast <4 x i32> %25 to <2 x double>
  %27 = bitcast <2 x i64> %14 to <2 x double>
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %26, <2 x double> %27) #6
  %29 = fcmp une <2 x double> %9, %1
  %30 = sext <2 x i1> %29 to <2 x i64>
  %31 = bitcast <2 x double> %28 to <4 x i32>
  %32 = bitcast <2 x i64> %30 to <4 x i32>
  %33 = and <4 x i32> %32, <i32 1, i32 0, i32 1, i32 0>
  %34 = sub <4 x i32> %31, %33
  %35 = icmp eq <4 x i32> %34, <i32 -1, i32 0, i32 -1, i32 0>
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 4294967295, i64 4294967295>
  %39 = bitcast <2 x i64> %38 to <4 x float>
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %41 = bitcast <4 x float> %40 to <4 x i32>
  %42 = add <4 x i32> %34, %41
  %43 = bitcast <4 x i32> %42 to <2 x double>
  %44 = bitcast <4 x i32> %34 to <2 x double>
  %45 = bitcast <2 x i64> %30 to <2 x double>
  %46 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %44, <2 x double> %43, <2 x double> %45) #6
  %47 = bitcast <2 x double> %46 to <4 x i32>
  %48 = xor <4 x i32> %47, <i32 -1, i32 2147483647, i32 -1, i32 2147483647>
  %49 = add <4 x i32> %48, <i32 1, i32 0, i32 1, i32 0>
  %50 = icmp eq <4 x i32> %49, <i32 0, i32 -1, i32 0, i32 -1>
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x i32> %51 to <2 x i64>
  %53 = and <2 x i64> %52, <i64 1, i64 1>
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = bitcast <4 x float> %55 to <4 x i32>
  %57 = add <4 x i32> %49, %56
  %58 = bitcast <4 x i32> %57 to <2 x double>
  %59 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %46, <2 x double> %58, <2 x double> %27) #6
  %60 = fcmp oeq <2 x double> %59, zeroinitializer
  %61 = fcmp une <2 x double> %9, zeroinitializer
  %62 = and <2 x i1> %60, %61
  %63 = sext <2 x i1> %62 to <2 x i64>
  %64 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = bitcast <2 x i64> %63 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %59, <2 x double> %65, <2 x double> %66) #6
  %68 = fcmp oeq <2 x double> %9, zeroinitializer
  %69 = fcmp oeq <2 x double> %1, zeroinitializer
  %70 = and <2 x i1> %68, %69
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = bitcast <2 x i64> %71 to <2 x double>
  %73 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %67, <2 x double> %1, <2 x double> %72) #6
  %74 = fcmp uno <2 x double> %9, %1
  %75 = sext <2 x i1> %74 to <2 x i64>
  %76 = bitcast <2 x i64> %75 to <2 x double>
  %77 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %73, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %76) #6
  ret <2 x double> %77
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_frfrexpd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = and <2 x i64> %10, <i64 -9218868437227405313, i64 -9218868437227405313>
  %12 = or <2 x i64> %11, <i64 4602678819172646912, i64 4602678819172646912>
  %13 = bitcast <2 x i64> %12 to <2 x double>
  %14 = and <2 x i64> %10, <i64 9223372036854775807, i64 9223372036854775807>
  %15 = bitcast <2 x i64> %14 to <2 x double>
  %16 = fcmp oeq <2 x double> %15, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = and <2 x i64> %10, <i64 -9223372036854775808, i64 -9223372036854775808>
  %19 = or <2 x i64> %18, <i64 9218868437227405312, i64 9218868437227405312>
  %20 = bitcast <2 x i64> %19 to <2 x double>
  %21 = bitcast <2 x i64> %17 to <2 x double>
  %22 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %20, <2 x double> %21) #6
  %23 = fcmp oeq <2 x double> %9, zeroinitializer
  %24 = sext <2 x i1> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %22, <2 x double> %9, <2 x double> %25) #6
  ret <2 x double> %26
}

; Function Attrs: nounwind readnone uwtable
define <2 x i64> @Sleef_cinz_expfrexpd2_sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = bitcast <2 x double> %0 to <2 x i64>
  %3 = and <2 x i64> %2, <i64 9223372036854775807, i64 9223372036854775807>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = fcmp olt <2 x double> %4, <double 0x10000000000000, double 0x10000000000000>
  %6 = sext <2 x i1> %5 to <2 x i64>
  %7 = fmul <2 x double> %0, <double 0x43E0000000000000, double 0x43E0000000000000>
  %8 = bitcast <2 x i64> %6 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %7, <2 x double> %8) #6
  %10 = bitcast <2 x double> %9 to <2 x i64>
  %11 = bitcast <2 x double> %9 to <4 x i32>
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 1, i32 3, i32 0, i32 0>
  %13 = lshr <4 x i32> %12, <i32 20, i32 20, i32 20, i32 20>
  %14 = and <4 x i32> %13, <i32 2047, i32 2047, i32 0, i32 0>
  %15 = add nsw <4 x i32> %14, <i32 -1022, i32 -1022, i32 0, i32 0>
  %16 = fcmp ueq <2 x double> %9, zeroinitializer
  %17 = and <2 x i64> %10, <i64 9223372036854775807, i64 9223372036854775807>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = fcmp oeq <2 x double> %18, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %20 = or <2 x i1> %19, %16
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = bitcast <2 x i64> %21 to <16 x i8>
  %24 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %22, <16 x i8> zeroinitializer, <16 x i8> %23) #6
  %25 = bitcast <16 x i8> %24 to <2 x i64>
  ret <2 x i64> %25
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmad2_sse4(<2 x double>, <2 x double>, <2 x double>) local_unnamed_addr #0 {
  %4 = fmul <2 x double> %0, %1
  %5 = fadd <2 x double> %4, %2
  %6 = bitcast <2 x double> %5 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 1.000000e-300, double 1.000000e-300>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %0, <double 0x46B0000000000000, double 0x46B0000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %1, <double 0x46B0000000000000, double 0x46B0000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %1, <2 x double> %14, <2 x double> %12) #6
  %16 = fmul <2 x double> %2, <double 0x4D70000000000000, double 0x4D70000000000000>
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %2, <2 x double> %16, <2 x double> %12) #6
  %18 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3270000000000000, double 0x3270000000000000>, <2 x double> %12) #6
  %19 = fcmp ogt <2 x double> %8, <double 1.000000e+300, double 1.000000e+300>
  %20 = sext <2 x i1> %19 to <2 x i64>
  %21 = fmul <2 x double> %13, <double 0x3930000000000000, double 0x3930000000000000>
  %22 = bitcast <2 x i64> %20 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %13, <2 x double> %21, <2 x double> %22) #6
  %24 = fmul <2 x double> %15, <double 0x3930000000000000, double 0x3930000000000000>
  %25 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %24, <2 x double> %22) #6
  %26 = fmul <2 x double> %17, <double 0x3270000000000000, double 0x3270000000000000>
  %27 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %17, <2 x double> %26, <2 x double> %22) #6
  %28 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %18, <2 x double> <double 0x4D70000000000000, double 0x4D70000000000000>, <2 x double> %22) #6
  %29 = bitcast <2 x double> %23 to <2 x i64>
  %30 = and <2 x i64> %29, <i64 -134217728, i64 -134217728>
  %31 = bitcast <2 x i64> %30 to <2 x double>
  %32 = fsub <2 x double> %23, %31
  %33 = bitcast <2 x double> %25 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -134217728, i64 -134217728>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = fsub <2 x double> %25, %35
  %37 = fmul <2 x double> %23, %25
  %38 = fmul <2 x double> %31, %35
  %39 = bitcast <2 x double> %37 to <2 x i64>
  %40 = xor <2 x i64> %39, <i64 -9223372036854775808, i64 -9223372036854775808>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = fmul <2 x double> %32, %35
  %43 = fmul <2 x double> %36, %31
  %44 = fmul <2 x double> %32, %36
  %45 = fadd <2 x double> %38, %41
  %46 = fadd <2 x double> %42, %45
  %47 = fadd <2 x double> %43, %46
  %48 = fadd <2 x double> %44, %47
  %49 = fadd <2 x double> %37, %27
  %50 = fsub <2 x double> %49, %37
  %51 = fsub <2 x double> %49, %50
  %52 = fsub <2 x double> %37, %51
  %53 = fsub <2 x double> %27, %50
  %54 = fadd <2 x double> %53, %52
  %55 = fadd <2 x double> %54, %48
  %56 = fcmp oeq <2 x double> %23, zeroinitializer
  %57 = fcmp oeq <2 x double> %25, zeroinitializer
  %58 = or <2 x i1> %57, %56
  %59 = sext <2 x i1> %58 to <2 x i64>
  %60 = fadd <2 x double> %49, %55
  %61 = bitcast <2 x i64> %59 to <2 x double>
  %62 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %60, <2 x double> %27, <2 x double> %61) #6
  %63 = bitcast <2 x double> %27 to <2 x i64>
  %64 = and <2 x i64> %63, <i64 9223372036854775807, i64 9223372036854775807>
  %65 = bitcast <2 x i64> %64 to <2 x double>
  %66 = fcmp oeq <2 x double> %65, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %67 = and <2 x i64> %29, <i64 9223372036854775807, i64 9223372036854775807>
  %68 = bitcast <2 x i64> %67 to <2 x double>
  %69 = fcmp une <2 x double> %68, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %70 = and <2 x i64> %33, <i64 9223372036854775807, i64 9223372036854775807>
  %71 = bitcast <2 x i64> %70 to <2 x double>
  %72 = fcmp une <2 x double> %71, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %73 = fcmp ord <2 x double> %25, %23
  %74 = and <2 x i1> %69, %73
  %75 = and <2 x i1> %74, %72
  %76 = and <2 x i1> %75, %66
  %77 = sext <2 x i1> %76 to <2 x i64>
  %78 = bitcast <2 x i64> %77 to <2 x double>
  %79 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %27, <2 x double> %78) #6
  %80 = bitcast <2 x double> %79 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 9223372036854775807, i64 9223372036854775807>
  %82 = bitcast <2 x i64> %81 to <2 x double>
  %83 = fcmp oeq <2 x double> %82, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %84 = fcmp uno <2 x double> %79, zeroinitializer
  %85 = or <2 x i1> %83, %84
  %86 = sext <2 x i1> %85 to <2 x i64>
  %87 = fmul <2 x double> %28, %62
  %88 = bitcast <2 x i64> %86 to <2 x double>
  %89 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %87, <2 x double> %79, <2 x double> %88) #6
  ret <2 x double> %89
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sqrtd2_u05sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %4) #6
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x i64> %7 to <2 x double>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %8, <2 x double> %9) #6
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double 0x37E0000000000000, double 0x37E0000000000000>, <2 x double> %9) #6
  %12 = fcmp ogt <2 x double> %10, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fmul <2 x double> %10, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #6
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> <double 0x4FE0000000000000, double 0x4FE0000000000000>, <2 x double> %15) #6
  %18 = fadd <2 x double> %16, <double 9.999880e-321, double 9.999880e-321>
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %20
  %22 = bitcast <4 x i32> %21 to <2 x double>
  %23 = fmul <2 x double> %16, <double 5.000000e-01, double 5.000000e-01>
  %24 = fmul <2 x double> %23, %22
  %25 = fmul <2 x double> %24, %22
  %26 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %25
  %27 = fmul <2 x double> %26, %22
  %28 = fmul <2 x double> %23, %27
  %29 = fmul <2 x double> %27, %28
  %30 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %29
  %31 = fmul <2 x double> %27, %30
  %32 = fmul <2 x double> %23, %31
  %33 = fmul <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %33
  %35 = fmul <2 x double> %31, %34
  %36 = fmul <2 x double> %16, %35
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -134217728, i64 -134217728>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fsub <2 x double> %36, %39
  %41 = fmul <2 x double> %36, %36
  %42 = fmul <2 x double> %39, %39
  %43 = bitcast <2 x double> %41 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %40, %39
  %47 = fmul <2 x double> %40, %40
  %48 = fadd <2 x double> %42, %45
  %49 = fadd <2 x double> %46, %48
  %50 = fadd <2 x double> %46, %49
  %51 = fadd <2 x double> %47, %50
  %52 = fadd <2 x double> %16, %41
  %53 = fsub <2 x double> %52, %16
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %16, %54
  %56 = fsub <2 x double> %41, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %57, %51
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %36
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %59, %62
  %64 = fmul <2 x double> %39, %62
  %65 = fmul <2 x double> %63, %39
  %66 = fmul <2 x double> %40, %62
  %67 = fmul <2 x double> %40, %63
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %69 = fsub <2 x double> %68, %65
  %70 = fsub <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %67
  %72 = fmul <2 x double> %59, %71
  %73 = bitcast <2 x double> %52 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %52, %75
  %77 = fmul <2 x double> %59, %52
  %78 = fmul <2 x double> %62, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %62
  %83 = fmul <2 x double> %63, %75
  %84 = fmul <2 x double> %63, %76
  %85 = fmul <2 x double> %52, %72
  %86 = fmul <2 x double> %59, %58
  %87 = fadd <2 x double> %78, %81
  %88 = fadd <2 x double> %82, %87
  %89 = fadd <2 x double> %83, %88
  %90 = fadd <2 x double> %84, %89
  %91 = fadd <2 x double> %90, %85
  %92 = fadd <2 x double> %86, %91
  %93 = fadd <2 x double> %77, %92
  %94 = fmul <2 x double> %17, %93
  %95 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %97) #6
  %99 = fcmp oeq <2 x double> %16, zeroinitializer
  %100 = sext <2 x i1> %99 to <2 x i64>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %98, <2 x double> %16, <2 x double> %101) #6
  ret <2 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_sqrtd2_u35sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = fcmp olt <2 x double> %0, zeroinitializer
  %3 = sext <2 x i1> %2 to <2 x i64>
  %4 = bitcast <2 x i64> %3 to <2 x double>
  %5 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %4) #6
  %6 = fcmp olt <2 x double> %5, <double 0x2FF0000000000000, double 0x2FF0000000000000>
  %7 = sext <2 x i1> %6 to <2 x i64>
  %8 = fmul <2 x double> %5, <double 0x4FF0000000000000, double 0x4FF0000000000000>
  %9 = bitcast <2 x i64> %7 to <2 x double>
  %10 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %8, <2 x double> %9) #6
  %11 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 5.000000e-01, double 5.000000e-01>, <2 x double> <double 0x37E0000000000000, double 0x37E0000000000000>, <2 x double> %9) #6
  %12 = fcmp ogt <2 x double> %10, <double 0x5FF0000000000000, double 0x5FF0000000000000>
  %13 = sext <2 x i1> %12 to <2 x i64>
  %14 = fmul <2 x double> %10, <double 0x1FF0000000000000, double 0x1FF0000000000000>
  %15 = bitcast <2 x i64> %13 to <2 x double>
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %14, <2 x double> %15) #6
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %11, <2 x double> <double 0x4FE0000000000000, double 0x4FE0000000000000>, <2 x double> %15) #6
  %18 = fadd <2 x double> %16, <double 9.999880e-321, double 9.999880e-321>
  %19 = bitcast <2 x double> %18 to <4 x i32>
  %20 = lshr <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw <4 x i32> <i32 0, i32 1608969350, i32 0, i32 1608969350>, %20
  %22 = bitcast <4 x i32> %21 to <2 x double>
  %23 = fmul <2 x double> %16, <double 5.000000e-01, double 5.000000e-01>
  %24 = fmul <2 x double> %23, %22
  %25 = fmul <2 x double> %24, %22
  %26 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %25
  %27 = fmul <2 x double> %26, %22
  %28 = fmul <2 x double> %23, %27
  %29 = fmul <2 x double> %27, %28
  %30 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %29
  %31 = fmul <2 x double> %27, %30
  %32 = fmul <2 x double> %23, %31
  %33 = fmul <2 x double> %31, %32
  %34 = fsub <2 x double> <double 1.500000e+00, double 1.500000e+00>, %33
  %35 = fmul <2 x double> %31, %34
  %36 = fmul <2 x double> %16, %35
  %37 = bitcast <2 x double> %36 to <2 x i64>
  %38 = and <2 x i64> %37, <i64 -134217728, i64 -134217728>
  %39 = bitcast <2 x i64> %38 to <2 x double>
  %40 = fsub <2 x double> %36, %39
  %41 = fmul <2 x double> %36, %36
  %42 = fmul <2 x double> %39, %39
  %43 = bitcast <2 x double> %41 to <2 x i64>
  %44 = xor <2 x i64> %43, <i64 -9223372036854775808, i64 -9223372036854775808>
  %45 = bitcast <2 x i64> %44 to <2 x double>
  %46 = fmul <2 x double> %40, %39
  %47 = fmul <2 x double> %40, %40
  %48 = fadd <2 x double> %42, %45
  %49 = fadd <2 x double> %46, %48
  %50 = fadd <2 x double> %46, %49
  %51 = fadd <2 x double> %47, %50
  %52 = fadd <2 x double> %16, %41
  %53 = fsub <2 x double> %52, %16
  %54 = fsub <2 x double> %52, %53
  %55 = fsub <2 x double> %16, %54
  %56 = fsub <2 x double> %41, %53
  %57 = fadd <2 x double> %56, %55
  %58 = fadd <2 x double> %57, %51
  %59 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %36
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = and <2 x i64> %60, <i64 -134217728, i64 -134217728>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fsub <2 x double> %59, %62
  %64 = fmul <2 x double> %39, %62
  %65 = fmul <2 x double> %63, %39
  %66 = fmul <2 x double> %40, %62
  %67 = fmul <2 x double> %40, %63
  %68 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %64
  %69 = fsub <2 x double> %68, %65
  %70 = fsub <2 x double> %69, %66
  %71 = fsub <2 x double> %70, %67
  %72 = fmul <2 x double> %59, %71
  %73 = bitcast <2 x double> %52 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %52, %75
  %77 = fmul <2 x double> %59, %52
  %78 = fmul <2 x double> %62, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %62
  %83 = fmul <2 x double> %63, %75
  %84 = fmul <2 x double> %63, %76
  %85 = fmul <2 x double> %52, %72
  %86 = fmul <2 x double> %59, %58
  %87 = fadd <2 x double> %78, %81
  %88 = fadd <2 x double> %82, %87
  %89 = fadd <2 x double> %83, %88
  %90 = fadd <2 x double> %84, %89
  %91 = fadd <2 x double> %90, %85
  %92 = fadd <2 x double> %86, %91
  %93 = fadd <2 x double> %77, %92
  %94 = fmul <2 x double> %17, %93
  %95 = fcmp oeq <2 x double> %16, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %96 = sext <2 x i1> %95 to <2 x i64>
  %97 = bitcast <2 x i64> %96 to <2 x double>
  %98 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %94, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %97) #6
  %99 = fcmp oeq <2 x double> %16, zeroinitializer
  %100 = sext <2 x i1> %99 to <2 x i64>
  %101 = bitcast <2 x i64> %100 to <2 x double>
  %102 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %98, <2 x double> %16, <2 x double> %101) #6
  ret <2 x double> %102
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_hypotd2_u05sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fcmp olt <2 x double> %10, <double 0x10000000000000, double 0x10000000000000>
  %12 = sext <2 x i1> %11 to <2 x i64>
  %13 = fmul <2 x double> %9, <double 0x4350000000000000, double 0x4350000000000000>
  %14 = bitcast <2 x i64> %12 to <2 x double>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %9, <2 x double> %13, <2 x double> %14) #6
  %16 = fmul <2 x double> %10, <double 0x4350000000000000, double 0x4350000000000000>
  %17 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %10, <2 x double> %16, <2 x double> %14) #6
  %18 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %17
  %19 = bitcast <2 x double> %17 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 -134217728, i64 -134217728>
  %21 = bitcast <2 x i64> %20 to <2 x double>
  %22 = fsub <2 x double> %17, %21
  %23 = bitcast <2 x double> %18 to <2 x i64>
  %24 = and <2 x i64> %23, <i64 -134217728, i64 -134217728>
  %25 = bitcast <2 x i64> %24 to <2 x double>
  %26 = fsub <2 x double> %18, %25
  %27 = bitcast <2 x double> %15 to <2 x i64>
  %28 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %29 = bitcast <2 x i64> %28 to <2 x double>
  %30 = fsub <2 x double> %15, %29
  %31 = fmul <2 x double> %15, %18
  %32 = fmul <2 x double> %29, %25
  %33 = fsub <2 x double> %32, %31
  %34 = fmul <2 x double> %26, %29
  %35 = fmul <2 x double> %30, %25
  %36 = fmul <2 x double> %30, %26
  %37 = fmul <2 x double> %21, %25
  %38 = fmul <2 x double> %26, %21
  %39 = fmul <2 x double> %22, %25
  %40 = fmul <2 x double> %22, %26
  %41 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %37
  %42 = fsub <2 x double> %41, %38
  %43 = fsub <2 x double> %42, %39
  %44 = fsub <2 x double> %43, %40
  %45 = fmul <2 x double> %31, %44
  %46 = fadd <2 x double> %33, %34
  %47 = fadd <2 x double> %35, %46
  %48 = fadd <2 x double> %36, %47
  %49 = fadd <2 x double> %48, %45
  %50 = fmul <2 x double> %31, zeroinitializer
  %51 = fsub <2 x double> zeroinitializer, %50
  %52 = fmul <2 x double> %18, %51
  %53 = fadd <2 x double> %52, %49
  %54 = bitcast <2 x double> %31 to <2 x i64>
  %55 = and <2 x i64> %54, <i64 -134217728, i64 -134217728>
  %56 = bitcast <2 x i64> %55 to <2 x double>
  %57 = fsub <2 x double> %31, %56
  %58 = fmul <2 x double> %31, %31
  %59 = fmul <2 x double> %56, %56
  %60 = bitcast <2 x double> %58 to <2 x i64>
  %61 = xor <2 x i64> %60, <i64 -9223372036854775808, i64 -9223372036854775808>
  %62 = bitcast <2 x i64> %61 to <2 x double>
  %63 = fadd <2 x double> %56, %56
  %64 = fmul <2 x double> %63, %57
  %65 = fmul <2 x double> %57, %57
  %66 = fadd <2 x double> %53, %53
  %67 = fmul <2 x double> %31, %66
  %68 = fadd <2 x double> %59, %62
  %69 = fadd <2 x double> %68, %64
  %70 = fadd <2 x double> %65, %69
  %71 = fadd <2 x double> %70, %67
  %72 = fadd <2 x double> %58, <double 1.000000e+00, double 1.000000e+00>
  %73 = fsub <2 x double> %72, %58
  %74 = fsub <2 x double> %72, %73
  %75 = fsub <2 x double> %58, %74
  %76 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %73
  %77 = fadd <2 x double> %76, %75
  %78 = fadd <2 x double> %77, %71
  %79 = fadd <2 x double> %72, %78
  %80 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %79) #6
  %81 = bitcast <2 x double> %80 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -134217728, i64 -134217728>
  %83 = bitcast <2 x i64> %82 to <2 x double>
  %84 = fsub <2 x double> %80, %83
  %85 = fmul <2 x double> %80, %80
  %86 = fmul <2 x double> %83, %83
  %87 = bitcast <2 x double> %85 to <2 x i64>
  %88 = xor <2 x i64> %87, <i64 -9223372036854775808, i64 -9223372036854775808>
  %89 = bitcast <2 x i64> %88 to <2 x double>
  %90 = fmul <2 x double> %84, %83
  %91 = fmul <2 x double> %84, %84
  %92 = fadd <2 x double> %86, %89
  %93 = fadd <2 x double> %90, %92
  %94 = fadd <2 x double> %90, %93
  %95 = fadd <2 x double> %91, %94
  %96 = fadd <2 x double> %85, %72
  %97 = fsub <2 x double> %96, %72
  %98 = fsub <2 x double> %96, %97
  %99 = fsub <2 x double> %72, %98
  %100 = fsub <2 x double> %85, %97
  %101 = fadd <2 x double> %100, %99
  %102 = fadd <2 x double> %95, %78
  %103 = fadd <2 x double> %101, %102
  %104 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %80
  %105 = bitcast <2 x double> %104 to <2 x i64>
  %106 = and <2 x i64> %105, <i64 -134217728, i64 -134217728>
  %107 = bitcast <2 x i64> %106 to <2 x double>
  %108 = fsub <2 x double> %104, %107
  %109 = fmul <2 x double> %83, %107
  %110 = fmul <2 x double> %108, %83
  %111 = fmul <2 x double> %84, %107
  %112 = fmul <2 x double> %84, %108
  %113 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %109
  %114 = fsub <2 x double> %113, %110
  %115 = fsub <2 x double> %114, %111
  %116 = fsub <2 x double> %115, %112
  %117 = fmul <2 x double> %104, %116
  %118 = bitcast <2 x double> %96 to <2 x i64>
  %119 = and <2 x i64> %118, <i64 -134217728, i64 -134217728>
  %120 = bitcast <2 x i64> %119 to <2 x double>
  %121 = fsub <2 x double> %96, %120
  %122 = fmul <2 x double> %104, %96
  %123 = fmul <2 x double> %107, %120
  %124 = bitcast <2 x double> %122 to <2 x i64>
  %125 = xor <2 x i64> %124, <i64 -9223372036854775808, i64 -9223372036854775808>
  %126 = bitcast <2 x i64> %125 to <2 x double>
  %127 = fmul <2 x double> %121, %107
  %128 = fmul <2 x double> %108, %120
  %129 = fmul <2 x double> %108, %121
  %130 = fmul <2 x double> %96, %117
  %131 = fmul <2 x double> %104, %103
  %132 = fadd <2 x double> %123, %126
  %133 = fadd <2 x double> %127, %132
  %134 = fadd <2 x double> %128, %133
  %135 = fadd <2 x double> %129, %134
  %136 = fadd <2 x double> %130, %135
  %137 = fadd <2 x double> %136, %131
  %138 = fmul <2 x double> %122, <double 5.000000e-01, double 5.000000e-01>
  %139 = fmul <2 x double> %137, <double 5.000000e-01, double 5.000000e-01>
  %140 = bitcast <2 x double> %138 to <2 x i64>
  %141 = and <2 x i64> %140, <i64 -134217728, i64 -134217728>
  %142 = bitcast <2 x i64> %141 to <2 x double>
  %143 = fsub <2 x double> %138, %142
  %144 = bitcast <2 x double> %10 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 -134217728, i64 -134217728>
  %146 = bitcast <2 x i64> %145 to <2 x double>
  %147 = fsub <2 x double> %10, %146
  %148 = fmul <2 x double> %10, %138
  %149 = fmul <2 x double> %146, %142
  %150 = bitcast <2 x double> %148 to <2 x i64>
  %151 = xor <2 x i64> %150, <i64 -9223372036854775808, i64 -9223372036854775808>
  %152 = bitcast <2 x i64> %151 to <2 x double>
  %153 = fmul <2 x double> %143, %146
  %154 = fmul <2 x double> %147, %142
  %155 = fmul <2 x double> %147, %143
  %156 = fmul <2 x double> %10, %139
  %157 = fadd <2 x double> %149, %152
  %158 = fadd <2 x double> %153, %157
  %159 = fadd <2 x double> %154, %158
  %160 = fadd <2 x double> %155, %159
  %161 = fadd <2 x double> %160, %156
  %162 = fadd <2 x double> %148, %161
  %163 = fcmp uno <2 x double> %162, zeroinitializer
  %164 = sext <2 x i1> %163 to <2 x i64>
  %165 = bitcast <2 x i64> %164 to <2 x double>
  %166 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %162, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %165) #6
  %167 = fcmp oeq <2 x double> %9, zeroinitializer
  %168 = sext <2 x i1> %167 to <2 x i64>
  %169 = bitcast <2 x i64> %168 to <2 x double>
  %170 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %166, <2 x double> %10, <2 x double> %169) #6
  %171 = fcmp uno <2 x double> %8, %5
  %172 = sext <2 x i1> %171 to <2 x i64>
  %173 = bitcast <2 x i64> %172 to <2 x double>
  %174 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %170, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %173) #6
  %175 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %176 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %177 = or <2 x i1> %176, %175
  %178 = sext <2 x i1> %177 to <2 x i64>
  %179 = bitcast <2 x i64> %178 to <2 x double>
  %180 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %174, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %179) #6
  ret <2 x double> %180
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_hypotd2_u35sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = tail call <2 x double> @llvm.x86.sse2.min.pd(<2 x double> %5, <2 x double> %8) #6
  %10 = tail call <2 x double> @llvm.x86.sse2.max.pd(<2 x double> %5, <2 x double> %8) #6
  %11 = fdiv <2 x double> %9, %10
  %12 = fmul <2 x double> %11, %11
  %13 = fadd <2 x double> %12, <double 1.000000e+00, double 1.000000e+00>
  %14 = tail call <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double> %13) #6
  %15 = fmul <2 x double> %10, %14
  %16 = fcmp oeq <2 x double> %9, zeroinitializer
  %17 = sext <2 x i1> %16 to <2 x i64>
  %18 = bitcast <2 x i64> %17 to <2 x double>
  %19 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %15, <2 x double> %10, <2 x double> %18) #6
  %20 = fcmp uno <2 x double> %8, %5
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %22) #6
  %24 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %25 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %26 = or <2 x i1> %25, %24
  %27 = sext <2 x i1> %26 to <2 x i64>
  %28 = bitcast <2 x i64> %27 to <2 x double>
  %29 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %23, <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double> %28) #6
  ret <2 x double> %29
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_fmodd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x10000000000000, double 0x10000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %14, <2 x double> %12) #6
  %16 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %17 = bitcast <2 x double> %16 to <2 x i64>
  %18 = add <2 x i64> %17, <i64 -1, i64 -1>
  %19 = bitcast <2 x i64> %18 to <2 x double>
  %20 = fcmp oeq <2 x double> %16, zeroinitializer
  %21 = sext <2 x i1> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %19, <2 x double> zeroinitializer, <2 x double> %22) #6
  %24 = fmul <2 x double> %15, <double 3.000000e+00, double 3.000000e+00>
  %25 = fadd <2 x double> %15, %15
  %26 = bitcast <2 x double> %15 to <2 x i64>
  %27 = xor <2 x i64> %26, <i64 -9223372036854775808, i64 -9223372036854775808>
  %28 = bitcast <2 x i64> %27 to <2 x double>
  %29 = and <2 x i64> %27, <i64 -134217728, i64 -134217728>
  %30 = bitcast <2 x i64> %29 to <2 x double>
  %31 = fsub <2 x double> %28, %30
  br label %32

; <label>:32:                                     ; preds = %32, %2
  %33 = phi i32 [ 0, %2 ], [ %91, %32 ]
  %34 = phi <2 x double> [ zeroinitializer, %2 ], [ %85, %32 ]
  %35 = phi <2 x double> [ %13, %2 ], [ %83, %32 ]
  %36 = bitcast <2 x double> %35 to <2 x i64>
  %37 = add <2 x i64> %36, <i64 -1, i64 -1>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fcmp oeq <2 x double> %35, zeroinitializer
  %40 = sext <2 x i1> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %38, <2 x double> zeroinitializer, <2 x double> %41) #6
  %43 = fmul <2 x double> %23, %42
  %44 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %43, i32 11) #6
  %45 = bitcast <2 x double> %44 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 -2, i64 -2>
  %47 = bitcast <2 x i64> %46 to <2 x double>
  %48 = fcmp olt <2 x double> %35, %24
  %49 = fcmp ole <2 x double> %15, %35
  %50 = and <2 x i1> %49, %48
  %51 = sext <2 x i1> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %51 to <2 x double>
  %53 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %47, <2 x double> <double 2.000000e+00, double 2.000000e+00>, <2 x double> %52) #6
  %54 = fcmp olt <2 x double> %35, %25
  %55 = and <2 x i1> %49, %54
  %56 = sext <2 x i1> %55 to <2 x i64>
  %57 = bitcast <2 x i64> %56 to <2 x double>
  %58 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %53, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %57) #6
  %59 = bitcast <2 x double> %58 to <2 x i64>
  %60 = and <2 x i64> %59, <i64 -134217728, i64 -134217728>
  %61 = bitcast <2 x i64> %60 to <2 x double>
  %62 = fsub <2 x double> %58, %61
  %63 = fmul <2 x double> %58, %28
  %64 = fmul <2 x double> %30, %61
  %65 = bitcast <2 x double> %63 to <2 x i64>
  %66 = xor <2 x i64> %65, <i64 -9223372036854775808, i64 -9223372036854775808>
  %67 = bitcast <2 x i64> %66 to <2 x double>
  %68 = fmul <2 x double> %62, %30
  %69 = fmul <2 x double> %31, %61
  %70 = fmul <2 x double> %31, %62
  %71 = fadd <2 x double> %64, %67
  %72 = fadd <2 x double> %68, %71
  %73 = fadd <2 x double> %69, %72
  %74 = fadd <2 x double> %70, %73
  %75 = fadd <2 x double> %35, %63
  %76 = fsub <2 x double> %75, %35
  %77 = fsub <2 x double> %75, %76
  %78 = fsub <2 x double> %35, %77
  %79 = fsub <2 x double> %63, %76
  %80 = fadd <2 x double> %79, %78
  %81 = fadd <2 x double> %34, %74
  %82 = fadd <2 x double> %80, %81
  %83 = fadd <2 x double> %75, %82
  %84 = fsub <2 x double> %75, %83
  %85 = fadd <2 x double> %82, %84
  %86 = fcmp olt <2 x double> %83, %15
  %87 = sext <2 x i1> %86 to <2 x i64>
  %88 = bitcast <2 x i64> %87 to <16 x i8>
  %89 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %88) #6
  %90 = icmp ne i32 %89, 65535
  %91 = add nuw nsw i32 %33, 1
  %92 = icmp ult i32 %91, 21
  %93 = and i1 %92, %90
  br i1 %93, label %32, label %94

; <label>:94:                                     ; preds = %32
  %95 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %12) #6
  %96 = fmul <2 x double> %83, %95
  %97 = fadd <2 x double> %83, %85
  %98 = fcmp oeq <2 x double> %97, %15
  %99 = sext <2 x i1> %98 to <2 x i64>
  %100 = bitcast <2 x i64> %99 to <2 x double>
  %101 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %96, <2 x double> zeroinitializer, <2 x double> %100) #6
  %102 = bitcast <2 x double> %101 to <2 x i64>
  %103 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %104 = xor <2 x i64> %103, %102
  %105 = bitcast <2 x i64> %104 to <2 x double>
  %106 = fcmp olt <2 x double> %13, %15
  %107 = sext <2 x i1> %106 to <2 x i64>
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %105, <2 x double> %0, <2 x double> %108) #6
  %110 = fcmp oeq <2 x double> %15, zeroinitializer
  %111 = sext <2 x i1> %110 to <2 x i64>
  %112 = bitcast <2 x i64> %111 to <2 x double>
  %113 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %109, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %112) #6
  ret <2 x double> %113
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_remainderd2_sse4(<2 x double>, <2 x double>) local_unnamed_addr #0 {
  %3 = bitcast <2 x double> %0 to <2 x i64>
  %4 = and <2 x i64> %3, <i64 9223372036854775807, i64 9223372036854775807>
  %5 = bitcast <2 x i64> %4 to <2 x double>
  %6 = bitcast <2 x double> %1 to <2 x i64>
  %7 = and <2 x i64> %6, <i64 9223372036854775807, i64 9223372036854775807>
  %8 = bitcast <2 x i64> %7 to <2 x double>
  %9 = fcmp olt <2 x double> %8, <double 0x20000000000000, double 0x20000000000000>
  %10 = sext <2 x i1> %9 to <2 x i64>
  %11 = fmul <2 x double> %5, <double 0x4350000000000000, double 0x4350000000000000>
  %12 = bitcast <2 x i64> %10 to <2 x double>
  %13 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %5, <2 x double> %11, <2 x double> %12) #6
  %14 = fmul <2 x double> %8, <double 0x4350000000000000, double 0x4350000000000000>
  %15 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %8, <2 x double> %14, <2 x double> %12) #6
  %16 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> <double 0x3C90000000000000, double 0x3C90000000000000>, <2 x double> %12) #6
  %17 = fdiv <2 x double> <double 1.000000e+00, double 1.000000e+00>, %15
  %18 = fmul <2 x double> %15, <double 1.500000e+00, double 1.500000e+00>
  %19 = fmul <2 x double> %15, <double 5.000000e-01, double 5.000000e-01>
  %20 = bitcast <2 x double> %15 to <2 x i64>
  %21 = xor <2 x i64> %20, <i64 -9223372036854775808, i64 -9223372036854775808>
  %22 = bitcast <2 x i64> %21 to <2 x double>
  %23 = and <2 x i64> %21, <i64 -134217728, i64 -134217728>
  %24 = bitcast <2 x i64> %23 to <2 x double>
  %25 = fsub <2 x double> %22, %24
  br label %26

; <label>:26:                                     ; preds = %55, %2
  %27 = phi i32 [ 0, %2 ], [ %100, %55 ]
  %28 = phi <2 x i64> [ zeroinitializer, %2 ], [ %72, %55 ]
  %29 = phi <2 x double> [ zeroinitializer, %2 ], [ %99, %55 ]
  %30 = phi <2 x double> [ %13, %2 ], [ %97, %55 ]
  %31 = fmul <2 x double> %17, %30
  %32 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %31, i32 8) #6
  %33 = bitcast <2 x double> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -2, i64 -2>
  %35 = bitcast <2 x i64> %34 to <2 x double>
  %36 = bitcast <2 x double> %30 to <2 x i64>
  %37 = and <2 x i64> %36, <i64 9223372036854775807, i64 9223372036854775807>
  %38 = bitcast <2 x i64> %37 to <2 x double>
  %39 = fcmp ogt <2 x double> %18, %38
  %40 = sext <2 x i1> %39 to <2 x i64>
  %41 = bitcast <2 x i64> %40 to <2 x double>
  %42 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %35, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> %41) #6
  %43 = fcmp ogt <2 x double> %19, %38
  %44 = fcmp oeq <2 x double> %19, %38
  %45 = xor <2 x i64> %28, <i64 -1, i64 -1>
  %46 = bitcast <2 x i64> %45 to <2 x double>
  %47 = select <2 x i1> %44, <2 x double> %46, <2 x double> zeroinitializer
  %48 = select <2 x i1> %43, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, <2 x double> %47
  %49 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %42, <2 x double> zeroinitializer, <2 x double> %48) #6
  %50 = fcmp oeq <2 x double> %49, zeroinitializer
  %51 = sext <2 x i1> %50 to <2 x i64>
  %52 = bitcast <2 x i64> %51 to <16 x i8>
  %53 = tail call i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8> %52) #6
  %54 = icmp eq i32 %53, 65535
  br i1 %54, label %102, label %55

; <label>:55:                                     ; preds = %26
  %56 = fmul <2 x double> %49, %22
  %57 = bitcast <2 x double> %56 to <2 x i64>
  %58 = and <2 x i64> %57, <i64 9223372036854775807, i64 9223372036854775807>
  %59 = bitcast <2 x i64> %58 to <2 x double>
  %60 = fcmp oeq <2 x double> %59, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %61 = sext <2 x i1> %60 to <2 x i64>
  %62 = and <2 x i64> %36, <i64 -9223372036854775808, i64 -9223372036854775808>
  %63 = xor <2 x i64> %62, <i64 -4616189618054758400, i64 -4616189618054758400>
  %64 = bitcast <2 x i64> %63 to <2 x double>
  %65 = fadd <2 x double> %49, %64
  %66 = bitcast <2 x i64> %61 to <2 x double>
  %67 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %49, <2 x double> %65, <2 x double> %66) #6
  %68 = fmul <2 x double> %67, <double 5.000000e-01, double 5.000000e-01>
  %69 = tail call <2 x double> @llvm.x86.sse41.round.pd(<2 x double> %68, i32 11) #6
  %70 = fcmp une <2 x double> %69, %68
  %71 = sext <2 x i1> %70 to <2 x i64>
  %72 = xor <2 x i64> %28, %71
  %73 = bitcast <2 x double> %67 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 -134217728, i64 -134217728>
  %75 = bitcast <2 x i64> %74 to <2 x double>
  %76 = fsub <2 x double> %67, %75
  %77 = fmul <2 x double> %67, %22
  %78 = fmul <2 x double> %24, %75
  %79 = bitcast <2 x double> %77 to <2 x i64>
  %80 = xor <2 x i64> %79, <i64 -9223372036854775808, i64 -9223372036854775808>
  %81 = bitcast <2 x i64> %80 to <2 x double>
  %82 = fmul <2 x double> %76, %24
  %83 = fmul <2 x double> %25, %75
  %84 = fmul <2 x double> %25, %76
  %85 = fadd <2 x double> %78, %81
  %86 = fadd <2 x double> %82, %85
  %87 = fadd <2 x double> %83, %86
  %88 = fadd <2 x double> %84, %87
  %89 = fadd <2 x double> %30, %77
  %90 = fsub <2 x double> %89, %30
  %91 = fsub <2 x double> %89, %90
  %92 = fsub <2 x double> %30, %91
  %93 = fsub <2 x double> %77, %90
  %94 = fadd <2 x double> %93, %92
  %95 = fadd <2 x double> %29, %88
  %96 = fadd <2 x double> %94, %95
  %97 = fadd <2 x double> %89, %96
  %98 = fsub <2 x double> %89, %97
  %99 = fadd <2 x double> %96, %98
  %100 = add nuw nsw i32 %27, 1
  %101 = icmp ult i32 %100, 21
  br i1 %101, label %26, label %102

; <label>:102:                                    ; preds = %26, %55
  %103 = phi <2 x double> [ %30, %26 ], [ %97, %55 ]
  %104 = fmul <2 x double> %16, %103
  %105 = bitcast <2 x double> %104 to <2 x i64>
  %106 = and <2 x i64> %3, <i64 -9223372036854775808, i64 -9223372036854775808>
  %107 = xor <2 x i64> %106, %105
  %108 = bitcast <2 x i64> %107 to <2 x double>
  %109 = fcmp oeq <2 x double> %8, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %110 = sext <2 x i1> %109 to <2 x i64>
  %111 = fcmp oeq <2 x double> %5, <double 0x7FF0000000000000, double 0x7FF0000000000000>
  %112 = sext <2 x i1> %111 to <2 x i64>
  %113 = bitcast <2 x i64> %112 to <2 x double>
  %114 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %0, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %113) #6
  %115 = bitcast <2 x i64> %110 to <2 x double>
  %116 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %108, <2 x double> %114, <2 x double> %115) #6
  %117 = fcmp oeq <2 x double> %15, zeroinitializer
  %118 = sext <2 x i1> %117 to <2 x i64>
  %119 = bitcast <2 x i64> %118 to <2 x double>
  %120 = tail call <2 x double> @llvm.x86.sse41.blendvpd(<2 x double> %116, <2 x double> <double 0x7FF8000000000000, double 0x7FF8000000000000>, <2 x double> %119) #6
  ret <2 x double> %120
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_cinz_tgammad2_u10sse4(<2 x double>) local_unnamed_addr #2 {
  %2 = tail call <2 x double> @Sleef_tgammad2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind uwtable
define <2 x double> @Sleef_cinz_lgammad2_u10sse4(<2 x double>) local_unnamed_addr #2 {
  %2 = tail call <2 x double> @Sleef_lgammad2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_erfd2_u10sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_erfd2_u10sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind readnone uwtable
define <2 x double> @Sleef_cinz_erfcd2_u15sse4(<2 x double>) local_unnamed_addr #0 {
  %2 = tail call <2 x double> @Sleef_erfcd2_u15sse4(<2 x double> %0)
  ret <2 x double> %2
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntd2_sse4(i32) local_unnamed_addr #2 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %22

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  %9 = load i32, i32* %8, align 4, !tbaa !37
  %10 = and i32 %9, 67108864
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %14 = load i32, i32* %13, align 8, !tbaa !37
  %15 = and i32 %14, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %12
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #6
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #6
  %18 = load i32, i32* %13, align 8, !tbaa !37
  %19 = and i32 %18, 524288
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #6
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 0, i32 3
  br label %22

; <label>:22:                                     ; preds = %17, %12, %5, %1
  %23 = phi i32 [ 0, %1 ], [ 0, %12 ], [ 0, %5 ], [ %21, %17 ]
  ret i32 %23
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrd2_sse4(i32) local_unnamed_addr #3 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse41.blendvpd(<2 x double>, <2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse2.pmovmskb.128(<16 x i8>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse41.round.pd(<2 x double>, i32) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttpd2dq(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.sqrt.pd(<2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.max.pd(<2 x double>, <2 x double>) #4

; Function Attrs: nounwind readnone
declare <2 x double> @llvm.x86.sse2.min.pd(<2 x double>, <2 x double>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #5

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !4, i64 0}
!4 = !{!"double", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempi: argument 0"}
!9 = distinct !{!9, !"rempi"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempi: argument 0"}
!12 = distinct !{!12, !"rempi"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempi: argument 0"}
!15 = distinct !{!15, !"rempi"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempi: argument 0"}
!18 = distinct !{!18, !"rempi"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempi: argument 0"}
!21 = distinct !{!21, !"rempi"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempi: argument 0"}
!24 = distinct !{!24, !"rempi"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempi: argument 0"}
!27 = distinct !{!27, !"rempi"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempi: argument 0"}
!30 = distinct !{!30, !"rempi"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospid2_u35sse4: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospid2_u35sse4"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_modfd2_sse4: argument 0"}
!36 = distinct !{!36, !"Sleef_modfd2_sse4"}
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !5, i64 0}
