; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vint2 = type { <2 x i64>, <2 x i64> }
%struct.vfloat2 = type { <8 x float>, <8 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [4 x i8] c"AVX\00", align 1
@rempitabsp = external local_unnamed_addr constant [0 x float], align 4

; Function Attrs: nounwind uwtable
define void @Sleef_ilogbf8_avx(%struct.vint2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = bitcast <2 x i64> %12 to <4 x i32>
  %16 = lshr <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %17 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = bitcast <2 x i64> %17 to <16 x i8>
  %20 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %19) #8
  %21 = bitcast <2 x i64> %18 to <16 x i8>
  %22 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %21) #8
  %23 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %24 = bitcast <16 x i8> %20 to <4 x i32>
  %25 = sub <4 x i32> %23, %24
  %26 = and <4 x i32> %16, <i32 255, i32 255, i32 255, i32 255>
  %27 = bitcast <16 x i8> %22 to <4 x i32>
  %28 = sub <4 x i32> %26, %27
  %29 = fcmp oeq <8 x float> %1, zeroinitializer
  %30 = sext <8 x i1> %29 to <8 x i32>
  %31 = bitcast <8 x i32> %30 to <4 x i64>
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = bitcast <4 x i32> %25 to <16 x i8>
  %35 = bitcast <2 x i64> %32 to <16 x i8>
  %36 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <16 x i8> %35) #8
  %37 = bitcast <4 x i32> %28 to <16 x i8>
  %38 = bitcast <2 x i64> %33 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <16 x i8> %38) #8
  %40 = fcmp uno <8 x float> %1, zeroinitializer
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %36, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %45) #8
  %47 = bitcast <2 x i64> %44 to <16 x i8>
  %48 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %47) #8
  %49 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %50 = sext <8 x i1> %49 to <8 x i32>
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %54 = bitcast <2 x i64> %52 to <16 x i8>
  %55 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %46, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %54) #8
  %56 = bitcast <2 x i64> %53 to <16 x i8>
  %57 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %48, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <16 x i8> %56) #8
  %58 = bitcast %struct.vint2* %0 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %58, align 16
  %59 = getelementptr inbounds %struct.vint2, %struct.vint2* %0, i64 0, i32 1
  %60 = bitcast <2 x i64>* %59 to <16 x i8>*
  store <16 x i8> %57, <16 x i8>* %60, align 16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly uwtable
define <8 x float> @Sleef_ldexpf8_avx(<8 x float>, %struct.vint2* byval nocapture readonly align 16) local_unnamed_addr #2 {
  %3 = bitcast %struct.vint2* %1 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16
  %5 = getelementptr %struct.vint2, %struct.vint2* %1, i64 0, i32 1
  %6 = bitcast <2 x i64>* %5 to <4 x i32>*
  %7 = load <4 x i32>, <4 x i32>* %6, align 16
  %8 = ashr <4 x i32> %4, <i32 31, i32 31, i32 31, i32 31>
  %9 = ashr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %10 = add <4 x i32> %8, %4
  %11 = add <4 x i32> %9, %7
  %12 = ashr <4 x i32> %10, <i32 6, i32 6, i32 6, i32 6>
  %13 = ashr <4 x i32> %11, <i32 6, i32 6, i32 6, i32 6>
  %14 = sub nsw <4 x i32> %12, %8
  %15 = sub nsw <4 x i32> %13, %9
  %16 = shl nsw <4 x i32> %14, <i32 4, i32 4, i32 4, i32 4>
  %17 = shl nsw <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %18 = shl <4 x i32> %14, <i32 6, i32 6, i32 6, i32 6>
  %19 = shl <4 x i32> %15, <i32 6, i32 6, i32 6, i32 6>
  %20 = sub <4 x i32> %4, %18
  %21 = sub <4 x i32> %7, %19
  %22 = add nsw <4 x i32> %16, <i32 127, i32 127, i32 127, i32 127>
  %23 = add nsw <4 x i32> %17, <i32 127, i32 127, i32 127, i32 127>
  %24 = icmp sgt <4 x i32> %14, <i32 -8, i32 -8, i32 -8, i32 -8>
  %25 = icmp sgt <4 x i32> %15, <i32 -8, i32 -8, i32 -8, i32 -8>
  %26 = select <4 x i1> %24, <4 x i32> %22, <4 x i32> zeroinitializer
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = select <4 x i1> %25, <4 x i32> %23, <4 x i32> zeroinitializer
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = icmp sgt <4 x i32> %26, <i32 255, i32 255, i32 255, i32 255>
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = icmp sgt <4 x i32> %28, <i32 255, i32 255, i32 255, i32 255>
  %33 = sext <4 x i1> %32 to <4 x i32>
  %34 = bitcast <4 x i32> %31 to <2 x i64>
  %35 = bitcast <4 x i32> %33 to <2 x i64>
  %36 = xor <2 x i64> %34, <i64 -1, i64 -1>
  %37 = and <2 x i64> %36, %27
  %38 = xor <2 x i64> %35, <i64 -1, i64 -1>
  %39 = and <2 x i64> %38, %29
  %40 = and <2 x i64> %34, <i64 1095216660735, i64 1095216660735>
  %41 = and <2 x i64> %35, <i64 1095216660735, i64 1095216660735>
  %42 = or <2 x i64> %40, %37
  %43 = or <2 x i64> %41, %39
  %44 = bitcast <2 x i64> %42 to <4 x i32>
  %45 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %46 = bitcast <2 x i64> %43 to <4 x i32>
  %47 = shl <4 x i32> %46, <i32 23, i32 23, i32 23, i32 23>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fmul <8 x float> %53, %0
  %55 = fmul <8 x float> %54, %53
  %56 = fmul <8 x float> %55, %53
  %57 = fmul <8 x float> %56, %53
  %58 = shl <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %61 = add <4 x i32> %60, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %62 = bitcast <4 x i32> %59 to <2 x i64>
  %63 = bitcast <4 x i32> %61 to <2 x i64>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = fmul <8 x float> %57, %67
  ret <8 x float> %68
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %25, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #8
  %15 = bitcast <8 x i32> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #8
  %19 = fmul <8 x float> %18, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %20 = fadd <8 x float> %19, %0
  %21 = fmul <8 x float> %18, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %22 = fadd <8 x float> %21, %20
  %23 = fmul <8 x float> %18, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %24 = fadd <8 x float> %23, %22
  br label %407

; <label>:25:                                     ; preds = %1
  %26 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %27 = bitcast <8 x float> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %29, %28
  %31 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %30, <2 x i64> <i64 -1, i64 -1>) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !2

; <label>:33:                                     ; preds = %25
  %34 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %35 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %34) #8
  %36 = bitcast <8 x i32> %35 to <4 x i64>
  %37 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %35) #8
  %40 = fmul <8 x float> %39, <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>
  %41 = fadd <8 x float> %40, %0
  %42 = fmul <8 x float> %39, <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>
  %43 = fadd <8 x float> %42, %41
  %44 = fmul <8 x float> %39, <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>
  %45 = fadd <8 x float> %44, %43
  %46 = fmul <8 x float> %39, <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>
  %47 = fadd <8 x float> %46, %45
  br label %407

; <label>:48:                                     ; preds = %25
  %49 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %50 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %51 = bitcast <2 x i64> %49 to <4 x i32>
  %52 = lshr <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = bitcast <2 x i64> %50 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 23, i32 23, i32 23, i32 23>
  %55 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %56 = and <4 x i32> %54, <i32 255, i32 255, i32 255, i32 255>
  %57 = add nsw <4 x i32> %55, <i32 -152, i32 -152, i32 -152, i32 -152>
  %58 = add nsw <4 x i32> %56, <i32 -152, i32 -152, i32 -152, i32 -152>
  %59 = icmp ugt <4 x i32> %55, <i32 217, i32 217, i32 217, i32 217>
  %60 = icmp ugt <4 x i32> %56, <i32 217, i32 217, i32 217, i32 217>
  %61 = select <4 x i1> %59, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %62 = select <4 x i1> %60, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %63 = add <4 x i32> %61, %51
  %64 = add <4 x i32> %62, %53
  %65 = bitcast <4 x i32> %63 to <2 x i64>
  %66 = bitcast <4 x i32> %64 to <2 x i64>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = ashr <4 x i32> %57, <i32 31, i32 31, i32 31, i32 31>
  %72 = ashr <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %73 = xor <4 x i32> %71, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %74 = and <4 x i32> %73, %57
  %75 = shl <4 x i32> %74, <i32 2, i32 2, i32 2, i32 2>
  %76 = xor <4 x i32> %72, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %77 = and <4 x i32> %76, %58
  %78 = shl <4 x i32> %77, <i32 2, i32 2, i32 2, i32 2>
  %79 = extractelement <4 x i32> %78, i32 3
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !3, !noalias !7
  %83 = extractelement <4 x i32> %78, i32 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !3, !noalias !7
  %87 = extractelement <4 x i32> %78, i32 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !3, !noalias !7
  %91 = extractelement <4 x i32> %78, i32 0
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !7
  %95 = extractelement <4 x i32> %75, i32 3
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !7
  %99 = extractelement <4 x i32> %75, i32 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !3, !noalias !7
  %103 = extractelement <4 x i32> %75, i32 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !3, !noalias !7
  %107 = extractelement <4 x i32> %75, i32 0
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !3, !noalias !7
  %111 = insertelement <8 x float> undef, float %110, i32 0
  %112 = insertelement <8 x float> %111, float %106, i32 1
  %113 = insertelement <8 x float> %112, float %102, i32 2
  %114 = insertelement <8 x float> %113, float %98, i32 3
  %115 = insertelement <8 x float> %114, float %94, i32 4
  %116 = insertelement <8 x float> %115, float %90, i32 5
  %117 = insertelement <8 x float> %116, float %86, i32 6
  %118 = insertelement <8 x float> %117, float %82, i32 7
  %119 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %120 = and <2 x i64> %66, <i64 -17587891081216, i64 -17587891081216>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = fsub <8 x float> %70, %124
  %126 = bitcast <8 x float> %118 to <4 x i64>
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %128 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = and <2 x i64> %127, <i64 -17587891081216, i64 -17587891081216>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = shufflevector <2 x i64> %129, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <4 x i64> %131, <4 x i64> %132, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = fsub <8 x float> %118, %134
  %136 = fmul <8 x float> %118, %70
  %137 = bitcast <8 x float> %136 to <4 x i64>
  %138 = xor <4 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fmul <8 x float> %124, %134
  %141 = fadd <8 x float> %140, %139
  %142 = fmul <8 x float> %125, %134
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %135, %124
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %125, %135
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %136, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %149 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %148, i32 8) #8
  %150 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %136, i32 8) #8
  %151 = fmul <8 x float> %150, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %152 = fsub <8 x float> %149, %151
  %153 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %152) #8
  %154 = bitcast <8 x i32> %153 to <4 x i64>
  %155 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %156 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %157 = fmul <8 x float> %149, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %158 = fsub <8 x float> %136, %157
  %159 = fadd <8 x float> %158, %147
  %160 = fsub <8 x float> %158, %159
  %161 = fadd <8 x float> %147, %160
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %80
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !7
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %84
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !7
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %88
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !7
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %92
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !7
  %170 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %96
  %171 = load float, float* %170, align 4, !tbaa !3, !noalias !7
  %172 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %100
  %173 = load float, float* %172, align 4, !tbaa !3, !noalias !7
  %174 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %104
  %175 = load float, float* %174, align 4, !tbaa !3, !noalias !7
  %176 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %108
  %177 = load float, float* %176, align 4, !tbaa !3, !noalias !7
  %178 = insertelement <8 x float> undef, float %177, i32 0
  %179 = insertelement <8 x float> %178, float %175, i32 1
  %180 = insertelement <8 x float> %179, float %173, i32 2
  %181 = insertelement <8 x float> %180, float %171, i32 3
  %182 = insertelement <8 x float> %181, float %169, i32 4
  %183 = insertelement <8 x float> %182, float %167, i32 5
  %184 = insertelement <8 x float> %183, float %165, i32 6
  %185 = insertelement <8 x float> %184, float %163, i32 7
  %186 = bitcast <8 x float> %185 to <4 x i64>
  %187 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %189 = and <2 x i64> %187, <i64 -17587891081216, i64 -17587891081216>
  %190 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %191 = shufflevector <2 x i64> %189, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <4 x i64> %191, <4 x i64> %192, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %194 = bitcast <4 x i64> %193 to <8 x float>
  %195 = fsub <8 x float> %185, %194
  %196 = fmul <8 x float> %185, %70
  %197 = bitcast <8 x float> %196 to <4 x i64>
  %198 = xor <4 x i64> %197, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %199 = bitcast <4 x i64> %198 to <8 x float>
  %200 = fmul <8 x float> %124, %194
  %201 = fadd <8 x float> %200, %199
  %202 = fmul <8 x float> %125, %194
  %203 = fadd <8 x float> %202, %201
  %204 = fmul <8 x float> %195, %124
  %205 = fadd <8 x float> %204, %203
  %206 = fmul <8 x float> %125, %195
  %207 = fadd <8 x float> %206, %205
  %208 = fadd <8 x float> %159, %196
  %209 = fsub <8 x float> %208, %159
  %210 = fsub <8 x float> %208, %209
  %211 = fsub <8 x float> %159, %210
  %212 = fsub <8 x float> %196, %209
  %213 = fadd <8 x float> %212, %211
  %214 = fadd <8 x float> %161, %207
  %215 = fadd <8 x float> %213, %214
  %216 = fmul <8 x float> %208, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %217 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %216, i32 8) #8
  %218 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %208, i32 8) #8
  %219 = fmul <8 x float> %218, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %220 = fsub <8 x float> %217, %219
  %221 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %220) #8
  %222 = bitcast <8 x i32> %221 to <4 x i64>
  %223 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %224 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %225 = fmul <8 x float> %217, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %226 = fsub <8 x float> %208, %225
  %227 = bitcast <2 x i64> %155 to <4 x i32>
  %228 = bitcast <2 x i64> %223 to <4 x i32>
  %229 = add <4 x i32> %228, %227
  %230 = bitcast <2 x i64> %156 to <4 x i32>
  %231 = bitcast <2 x i64> %224 to <4 x i32>
  %232 = add <4 x i32> %231, %230
  %233 = fadd <8 x float> %226, %215
  %234 = fsub <8 x float> %226, %233
  %235 = fadd <8 x float> %215, %234
  %236 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %80
  %237 = load float, float* %236, align 4, !tbaa !3, !noalias !7
  %238 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %84
  %239 = load float, float* %238, align 4, !tbaa !3, !noalias !7
  %240 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %88
  %241 = load float, float* %240, align 4, !tbaa !3, !noalias !7
  %242 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %92
  %243 = load float, float* %242, align 4, !tbaa !3, !noalias !7
  %244 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %96
  %245 = load float, float* %244, align 4, !tbaa !3, !noalias !7
  %246 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %100
  %247 = load float, float* %246, align 4, !tbaa !3, !noalias !7
  %248 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %104
  %249 = load float, float* %248, align 4, !tbaa !3, !noalias !7
  %250 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %108
  %251 = load float, float* %250, align 4, !tbaa !3, !noalias !7
  %252 = insertelement <8 x float> undef, float %251, i32 0
  %253 = insertelement <8 x float> %252, float %249, i32 1
  %254 = insertelement <8 x float> %253, float %247, i32 2
  %255 = insertelement <8 x float> %254, float %245, i32 3
  %256 = insertelement <8 x float> %255, float %243, i32 4
  %257 = insertelement <8 x float> %256, float %241, i32 5
  %258 = insertelement <8 x float> %257, float %239, i32 6
  %259 = insertelement <8 x float> %258, float %237, i32 7
  %260 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %80
  %261 = load float, float* %260, align 4, !tbaa !3, !noalias !7
  %262 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %84
  %263 = load float, float* %262, align 4, !tbaa !3, !noalias !7
  %264 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %88
  %265 = load float, float* %264, align 4, !tbaa !3, !noalias !7
  %266 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %92
  %267 = load float, float* %266, align 4, !tbaa !3, !noalias !7
  %268 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %96
  %269 = load float, float* %268, align 4, !tbaa !3, !noalias !7
  %270 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %100
  %271 = load float, float* %270, align 4, !tbaa !3, !noalias !7
  %272 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %104
  %273 = load float, float* %272, align 4, !tbaa !3, !noalias !7
  %274 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %108
  %275 = load float, float* %274, align 4, !tbaa !3, !noalias !7
  %276 = insertelement <8 x float> undef, float %275, i32 0
  %277 = insertelement <8 x float> %276, float %273, i32 1
  %278 = insertelement <8 x float> %277, float %271, i32 2
  %279 = insertelement <8 x float> %278, float %269, i32 3
  %280 = insertelement <8 x float> %279, float %267, i32 4
  %281 = insertelement <8 x float> %280, float %265, i32 5
  %282 = insertelement <8 x float> %281, float %263, i32 6
  %283 = insertelement <8 x float> %282, float %261, i32 7
  %284 = bitcast <8 x float> %259 to <4 x i64>
  %285 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = and <2 x i64> %285, <i64 -17587891081216, i64 -17587891081216>
  %288 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %289 = shufflevector <2 x i64> %287, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <4 x i64> %289, <4 x i64> %290, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %292 = bitcast <4 x i64> %291 to <8 x float>
  %293 = fsub <8 x float> %259, %292
  %294 = fmul <8 x float> %259, %70
  %295 = bitcast <8 x float> %294 to <4 x i64>
  %296 = xor <4 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <4 x i64> %296 to <8 x float>
  %298 = fmul <8 x float> %124, %292
  %299 = fadd <8 x float> %298, %297
  %300 = fmul <8 x float> %293, %124
  %301 = fadd <8 x float> %300, %299
  %302 = fmul <8 x float> %125, %292
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %125, %293
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %283, %70
  %307 = fadd <8 x float> %306, %305
  %308 = fadd <8 x float> %294, %233
  %309 = fsub <8 x float> %308, %233
  %310 = fsub <8 x float> %308, %309
  %311 = fsub <8 x float> %233, %310
  %312 = fsub <8 x float> %294, %309
  %313 = fadd <8 x float> %312, %311
  %314 = fadd <8 x float> %235, %307
  %315 = fadd <8 x float> %313, %314
  %316 = fadd <8 x float> %308, %315
  %317 = fsub <8 x float> %308, %316
  %318 = fadd <8 x float> %315, %317
  %319 = bitcast <8 x float> %316 to <4 x i64>
  %320 = shufflevector <4 x i64> %319, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %321 = shufflevector <4 x i64> %319, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %322 = and <2 x i64> %320, <i64 -17587891081216, i64 -17587891081216>
  %323 = and <2 x i64> %321, <i64 -17587891081216, i64 -17587891081216>
  %324 = shufflevector <2 x i64> %322, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %325 = shufflevector <2 x i64> %323, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %326 = shufflevector <4 x i64> %324, <4 x i64> %325, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %327 = bitcast <4 x i64> %326 to <8 x float>
  %328 = fsub <8 x float> %316, %327
  %329 = fmul <8 x float> %316, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %330 = bitcast <8 x float> %329 to <4 x i64>
  %331 = xor <4 x i64> %330, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %332 = bitcast <4 x i64> %331 to <8 x float>
  %333 = fmul <8 x float> %327, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %334 = fadd <8 x float> %333, %332
  %335 = fmul <8 x float> %328, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %336 = fadd <8 x float> %335, %334
  %337 = fmul <8 x float> %327, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %338 = fadd <8 x float> %337, %336
  %339 = fmul <8 x float> %328, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %340 = fadd <8 x float> %339, %338
  %341 = fmul <8 x float> %316, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %342 = fadd <8 x float> %341, %340
  %343 = fmul <8 x float> %318, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %344 = fadd <8 x float> %343, %342
  %345 = and <4 x i64> %69, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %346 = bitcast <4 x i64> %345 to <8 x float>
  %347 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %346, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %348 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %329, <8 x float> %70, <8 x float> %347) #8
  %349 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %344, <8 x float> zeroinitializer, <8 x float> %347) #8
  %350 = shl <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %351 = and <4 x i32> %350, <i32 6, i32 6, i32 6, i32 6>
  %352 = shl <4 x i32> %232, <i32 1, i32 1, i32 1, i32 1>
  %353 = and <4 x i32> %352, <i32 6, i32 6, i32 6, i32 6>
  %354 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %348, <8 x float> zeroinitializer, i8 30) #8
  %355 = bitcast <8 x float> %354 to <4 x i64>
  %356 = shufflevector <4 x i64> %355, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %357 = shufflevector <4 x i64> %355, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %358 = bitcast <2 x i64> %356 to <16 x i8>
  %359 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %358) #8
  %360 = bitcast <2 x i64> %357 to <16 x i8>
  %361 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %360) #8
  %362 = bitcast <16 x i8> %359 to <4 x i32>
  %363 = add <4 x i32> %351, %362
  %364 = bitcast <16 x i8> %361 to <4 x i32>
  %365 = add <4 x i32> %353, %364
  %366 = ashr <4 x i32> %363, <i32 2, i32 2, i32 2, i32 2>
  %367 = ashr <4 x i32> %365, <i32 2, i32 2, i32 2, i32 2>
  %368 = bitcast <4 x i32> %366 to <2 x i64>
  %369 = bitcast <4 x i32> %367 to <2 x i64>
  %370 = and <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %371 = icmp ne <4 x i32> %370, zeroinitializer
  %372 = sext <4 x i1> %371 to <4 x i32>
  %373 = bitcast <4 x i32> %372 to <2 x i64>
  %374 = and <4 x i32> %232, <i32 1, i32 1, i32 1, i32 1>
  %375 = icmp ne <4 x i32> %374, zeroinitializer
  %376 = sext <4 x i1> %375 to <4 x i32>
  %377 = bitcast <4 x i32> %376 to <2 x i64>
  %378 = shufflevector <2 x i64> %373, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %379 = shufflevector <2 x i64> %377, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %380 = shufflevector <4 x i64> %378, <4 x i64> %379, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %381 = bitcast <8 x float> %348 to <4 x i64>
  %382 = and <4 x i64> %381, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %383 = xor <4 x i64> %382, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %384 = bitcast <4 x i64> %383 to <8 x float>
  %385 = or <4 x i64> %382, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %386 = bitcast <4 x i64> %385 to <8 x float>
  %387 = fadd <8 x float> %348, %384
  %388 = fsub <8 x float> %387, %348
  %389 = fsub <8 x float> %387, %388
  %390 = fsub <8 x float> %348, %389
  %391 = fsub <8 x float> %384, %388
  %392 = fadd <8 x float> %391, %390
  %393 = fadd <8 x float> %349, %386
  %394 = fadd <8 x float> %393, %392
  %395 = bitcast <4 x i64> %380 to <8 x float>
  %396 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %348, <8 x float> %387, <8 x float> %395) #8
  %397 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %349, <8 x float> %394, <8 x float> %395) #8
  %398 = fadd <8 x float> %396, %397
  %399 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %400 = fcmp uno <8 x float> %0, zeroinitializer
  %401 = or <8 x i1> %399, %400
  %402 = sext <8 x i1> %401 to <8 x i32>
  %403 = bitcast <8 x i32> %402 to <4 x i64>
  %404 = bitcast <8 x float> %398 to <4 x i64>
  %405 = or <4 x i64> %404, %403
  %406 = bitcast <4 x i64> %405 to <8 x float>
  br label %407

; <label>:407:                                    ; preds = %33, %48, %12
  %408 = phi <2 x i64> [ %368, %48 ], [ %37, %33 ], [ %16, %12 ]
  %409 = phi <2 x i64> [ %369, %48 ], [ %38, %33 ], [ %17, %12 ]
  %410 = phi <8 x float> [ %406, %48 ], [ %47, %33 ], [ %24, %12 ]
  %411 = fmul <8 x float> %410, %410
  %412 = bitcast <2 x i64> %408 to <4 x i32>
  %413 = and <4 x i32> %412, <i32 1, i32 1, i32 1, i32 1>
  %414 = icmp ne <4 x i32> %413, zeroinitializer
  %415 = sext <4 x i1> %414 to <4 x i32>
  %416 = bitcast <4 x i32> %415 to <2 x i64>
  %417 = bitcast <2 x i64> %409 to <4 x i32>
  %418 = and <4 x i32> %417, <i32 1, i32 1, i32 1, i32 1>
  %419 = icmp ne <4 x i32> %418, zeroinitializer
  %420 = sext <4 x i1> %419 to <4 x i32>
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = shufflevector <2 x i64> %416, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %423 = shufflevector <2 x i64> %421, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %424 = shufflevector <4 x i64> %422, <4 x i64> %423, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %425 = and <4 x i64> %424, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %426 = bitcast <8 x float> %410 to <4 x i64>
  %427 = xor <4 x i64> %425, %426
  %428 = bitcast <4 x i64> %427 to <8 x float>
  %429 = fmul <8 x float> %411, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %430 = fadd <8 x float> %429, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %431 = fmul <8 x float> %411, %430
  %432 = fadd <8 x float> %431, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %433 = fmul <8 x float> %411, %432
  %434 = fadd <8 x float> %433, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %435 = fmul <8 x float> %434, %428
  %436 = fmul <8 x float> %411, %435
  %437 = fadd <8 x float> %436, %428
  %438 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %439 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %440 = bitcast <2 x i64> %438 to <4 x i32>
  %441 = icmp eq <4 x i32> %440, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %442 = sext <4 x i1> %441 to <4 x i32>
  %443 = bitcast <4 x i32> %442 to <2 x i64>
  %444 = bitcast <2 x i64> %439 to <4 x i32>
  %445 = icmp eq <4 x i32> %444, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %446 = sext <4 x i1> %445 to <4 x i32>
  %447 = bitcast <4 x i32> %446 to <2 x i64>
  %448 = shufflevector <2 x i64> %443, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %449 = shufflevector <2 x i64> %447, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %450 = shufflevector <4 x i64> %448, <4 x i64> %449, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %451 = bitcast <4 x i64> %450 to <8 x float>
  %452 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %437, <8 x float> %0, <8 x float> %451) #8
  ret <8 x float> %452
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %38, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = fadd <8 x float> %13, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = bitcast <2 x i64> %17 to <4 x i32>
  %20 = shl <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = shl <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = bitcast <4 x i32> %20 to <2 x i64>
  %24 = or <2 x i64> %23, <i64 4294967297, i64 4294967297>
  %25 = bitcast <4 x i32> %22 to <2 x i64>
  %26 = or <2 x i64> %25, <i64 4294967297, i64 4294967297>
  %27 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = bitcast <4 x i64> %29 to <8 x i32>
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #8
  %32 = fmul <8 x float> %31, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %33 = fadd <8 x float> %32, %0
  %34 = fmul <8 x float> %31, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %35 = fadd <8 x float> %34, %33
  %36 = fmul <8 x float> %31, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %37 = fadd <8 x float> %36, %35
  br label %434

; <label>:38:                                     ; preds = %1
  %39 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = and <2 x i64> %42, %41
  %44 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %43, <2 x i64> <i64 -1, i64 -1>) #8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %74, label %46, !prof !2

; <label>:46:                                     ; preds = %38
  %47 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %48 = fadd <8 x float> %47, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %49 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %48) #8
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %52 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast <2 x i64> %51 to <4 x i32>
  %54 = shl <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = bitcast <2 x i64> %52 to <4 x i32>
  %56 = shl <4 x i32> %55, <i32 1, i32 1, i32 1, i32 1>
  %57 = bitcast <4 x i32> %54 to <2 x i64>
  %58 = or <2 x i64> %57, <i64 4294967297, i64 4294967297>
  %59 = bitcast <4 x i32> %56 to <2 x i64>
  %60 = or <2 x i64> %59, <i64 4294967297, i64 4294967297>
  %61 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %64) #8
  %66 = fmul <8 x float> %65, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %67 = fadd <8 x float> %66, %0
  %68 = fmul <8 x float> %65, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %65, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %65, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %73 = fadd <8 x float> %72, %71
  br label %434

; <label>:74:                                     ; preds = %38
  %75 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %77 = bitcast <2 x i64> %75 to <4 x i32>
  %78 = lshr <4 x i32> %77, <i32 23, i32 23, i32 23, i32 23>
  %79 = bitcast <2 x i64> %76 to <4 x i32>
  %80 = lshr <4 x i32> %79, <i32 23, i32 23, i32 23, i32 23>
  %81 = and <4 x i32> %78, <i32 255, i32 255, i32 255, i32 255>
  %82 = and <4 x i32> %80, <i32 255, i32 255, i32 255, i32 255>
  %83 = add nsw <4 x i32> %81, <i32 -152, i32 -152, i32 -152, i32 -152>
  %84 = add nsw <4 x i32> %82, <i32 -152, i32 -152, i32 -152, i32 -152>
  %85 = icmp ugt <4 x i32> %81, <i32 217, i32 217, i32 217, i32 217>
  %86 = icmp ugt <4 x i32> %82, <i32 217, i32 217, i32 217, i32 217>
  %87 = select <4 x i1> %85, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %88 = select <4 x i1> %86, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %89 = add <4 x i32> %87, %77
  %90 = add <4 x i32> %88, %79
  %91 = bitcast <4 x i32> %89 to <2 x i64>
  %92 = bitcast <4 x i32> %90 to <2 x i64>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <8 x float>
  %97 = ashr <4 x i32> %83, <i32 31, i32 31, i32 31, i32 31>
  %98 = ashr <4 x i32> %84, <i32 31, i32 31, i32 31, i32 31>
  %99 = xor <4 x i32> %97, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %100 = and <4 x i32> %99, %83
  %101 = shl <4 x i32> %100, <i32 2, i32 2, i32 2, i32 2>
  %102 = xor <4 x i32> %98, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %103 = and <4 x i32> %102, %84
  %104 = shl <4 x i32> %103, <i32 2, i32 2, i32 2, i32 2>
  %105 = extractelement <4 x i32> %104, i32 3
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !3, !noalias !10
  %109 = extractelement <4 x i32> %104, i32 2
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %110
  %112 = load float, float* %111, align 4, !tbaa !3, !noalias !10
  %113 = extractelement <4 x i32> %104, i32 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !3, !noalias !10
  %117 = extractelement <4 x i32> %104, i32 0
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !3, !noalias !10
  %121 = extractelement <4 x i32> %101, i32 3
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !3, !noalias !10
  %125 = extractelement <4 x i32> %101, i32 2
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !3, !noalias !10
  %129 = extractelement <4 x i32> %101, i32 1
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %130
  %132 = load float, float* %131, align 4, !tbaa !3, !noalias !10
  %133 = extractelement <4 x i32> %101, i32 0
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !3, !noalias !10
  %137 = insertelement <8 x float> undef, float %136, i32 0
  %138 = insertelement <8 x float> %137, float %132, i32 1
  %139 = insertelement <8 x float> %138, float %128, i32 2
  %140 = insertelement <8 x float> %139, float %124, i32 3
  %141 = insertelement <8 x float> %140, float %120, i32 4
  %142 = insertelement <8 x float> %141, float %116, i32 5
  %143 = insertelement <8 x float> %142, float %112, i32 6
  %144 = insertelement <8 x float> %143, float %108, i32 7
  %145 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %146 = and <2 x i64> %92, <i64 -17587891081216, i64 -17587891081216>
  %147 = shufflevector <2 x i64> %145, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = shufflevector <2 x i64> %146, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %149 = shufflevector <4 x i64> %147, <4 x i64> %148, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %150 = bitcast <4 x i64> %149 to <8 x float>
  %151 = fsub <8 x float> %96, %150
  %152 = bitcast <8 x float> %144 to <4 x i64>
  %153 = shufflevector <4 x i64> %152, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %154 = shufflevector <4 x i64> %152, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %155 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %156 = and <2 x i64> %154, <i64 -17587891081216, i64 -17587891081216>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <2 x i64> %156, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %159 = shufflevector <4 x i64> %157, <4 x i64> %158, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %160 = bitcast <4 x i64> %159 to <8 x float>
  %161 = fsub <8 x float> %144, %160
  %162 = fmul <8 x float> %144, %96
  %163 = bitcast <8 x float> %162 to <4 x i64>
  %164 = xor <4 x i64> %163, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %165 = bitcast <4 x i64> %164 to <8 x float>
  %166 = fmul <8 x float> %150, %160
  %167 = fadd <8 x float> %166, %165
  %168 = fmul <8 x float> %151, %160
  %169 = fadd <8 x float> %168, %167
  %170 = fmul <8 x float> %161, %150
  %171 = fadd <8 x float> %170, %169
  %172 = fmul <8 x float> %151, %161
  %173 = fadd <8 x float> %172, %171
  %174 = fmul <8 x float> %162, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %175 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %174, i32 8) #8
  %176 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %162, i32 8) #8
  %177 = fmul <8 x float> %176, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %178 = fsub <8 x float> %175, %177
  %179 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %178) #8
  %180 = bitcast <8 x i32> %179 to <4 x i64>
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %182 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %183 = fmul <8 x float> %175, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %184 = fsub <8 x float> %162, %183
  %185 = fadd <8 x float> %184, %173
  %186 = fsub <8 x float> %184, %185
  %187 = fadd <8 x float> %173, %186
  %188 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %106
  %189 = load float, float* %188, align 4, !tbaa !3, !noalias !10
  %190 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %110
  %191 = load float, float* %190, align 4, !tbaa !3, !noalias !10
  %192 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %114
  %193 = load float, float* %192, align 4, !tbaa !3, !noalias !10
  %194 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %118
  %195 = load float, float* %194, align 4, !tbaa !3, !noalias !10
  %196 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %122
  %197 = load float, float* %196, align 4, !tbaa !3, !noalias !10
  %198 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %126
  %199 = load float, float* %198, align 4, !tbaa !3, !noalias !10
  %200 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %130
  %201 = load float, float* %200, align 4, !tbaa !3, !noalias !10
  %202 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %134
  %203 = load float, float* %202, align 4, !tbaa !3, !noalias !10
  %204 = insertelement <8 x float> undef, float %203, i32 0
  %205 = insertelement <8 x float> %204, float %201, i32 1
  %206 = insertelement <8 x float> %205, float %199, i32 2
  %207 = insertelement <8 x float> %206, float %197, i32 3
  %208 = insertelement <8 x float> %207, float %195, i32 4
  %209 = insertelement <8 x float> %208, float %193, i32 5
  %210 = insertelement <8 x float> %209, float %191, i32 6
  %211 = insertelement <8 x float> %210, float %189, i32 7
  %212 = bitcast <8 x float> %211 to <4 x i64>
  %213 = shufflevector <4 x i64> %212, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %214 = shufflevector <4 x i64> %212, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %215 = and <2 x i64> %213, <i64 -17587891081216, i64 -17587891081216>
  %216 = and <2 x i64> %214, <i64 -17587891081216, i64 -17587891081216>
  %217 = shufflevector <2 x i64> %215, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %218 = shufflevector <2 x i64> %216, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %219 = shufflevector <4 x i64> %217, <4 x i64> %218, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %220 = bitcast <4 x i64> %219 to <8 x float>
  %221 = fsub <8 x float> %211, %220
  %222 = fmul <8 x float> %211, %96
  %223 = bitcast <8 x float> %222 to <4 x i64>
  %224 = xor <4 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <4 x i64> %224 to <8 x float>
  %226 = fmul <8 x float> %150, %220
  %227 = fadd <8 x float> %226, %225
  %228 = fmul <8 x float> %151, %220
  %229 = fadd <8 x float> %228, %227
  %230 = fmul <8 x float> %221, %150
  %231 = fadd <8 x float> %230, %229
  %232 = fmul <8 x float> %151, %221
  %233 = fadd <8 x float> %232, %231
  %234 = fadd <8 x float> %185, %222
  %235 = fsub <8 x float> %234, %185
  %236 = fsub <8 x float> %234, %235
  %237 = fsub <8 x float> %185, %236
  %238 = fsub <8 x float> %222, %235
  %239 = fadd <8 x float> %238, %237
  %240 = fadd <8 x float> %187, %233
  %241 = fadd <8 x float> %239, %240
  %242 = fmul <8 x float> %234, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %243 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %242, i32 8) #8
  %244 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %234, i32 8) #8
  %245 = fmul <8 x float> %244, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %246 = fsub <8 x float> %243, %245
  %247 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %246) #8
  %248 = bitcast <8 x i32> %247 to <4 x i64>
  %249 = shufflevector <4 x i64> %248, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %250 = shufflevector <4 x i64> %248, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %251 = fmul <8 x float> %243, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %252 = fsub <8 x float> %234, %251
  %253 = bitcast <2 x i64> %181 to <4 x i32>
  %254 = bitcast <2 x i64> %249 to <4 x i32>
  %255 = add <4 x i32> %254, %253
  %256 = bitcast <2 x i64> %182 to <4 x i32>
  %257 = bitcast <2 x i64> %250 to <4 x i32>
  %258 = add <4 x i32> %257, %256
  %259 = fadd <8 x float> %252, %241
  %260 = fsub <8 x float> %252, %259
  %261 = fadd <8 x float> %241, %260
  %262 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %106
  %263 = load float, float* %262, align 4, !tbaa !3, !noalias !10
  %264 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %110
  %265 = load float, float* %264, align 4, !tbaa !3, !noalias !10
  %266 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %114
  %267 = load float, float* %266, align 4, !tbaa !3, !noalias !10
  %268 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %118
  %269 = load float, float* %268, align 4, !tbaa !3, !noalias !10
  %270 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %122
  %271 = load float, float* %270, align 4, !tbaa !3, !noalias !10
  %272 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %126
  %273 = load float, float* %272, align 4, !tbaa !3, !noalias !10
  %274 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %130
  %275 = load float, float* %274, align 4, !tbaa !3, !noalias !10
  %276 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %134
  %277 = load float, float* %276, align 4, !tbaa !3, !noalias !10
  %278 = insertelement <8 x float> undef, float %277, i32 0
  %279 = insertelement <8 x float> %278, float %275, i32 1
  %280 = insertelement <8 x float> %279, float %273, i32 2
  %281 = insertelement <8 x float> %280, float %271, i32 3
  %282 = insertelement <8 x float> %281, float %269, i32 4
  %283 = insertelement <8 x float> %282, float %267, i32 5
  %284 = insertelement <8 x float> %283, float %265, i32 6
  %285 = insertelement <8 x float> %284, float %263, i32 7
  %286 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %106
  %287 = load float, float* %286, align 4, !tbaa !3, !noalias !10
  %288 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %110
  %289 = load float, float* %288, align 4, !tbaa !3, !noalias !10
  %290 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %114
  %291 = load float, float* %290, align 4, !tbaa !3, !noalias !10
  %292 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %118
  %293 = load float, float* %292, align 4, !tbaa !3, !noalias !10
  %294 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %122
  %295 = load float, float* %294, align 4, !tbaa !3, !noalias !10
  %296 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %126
  %297 = load float, float* %296, align 4, !tbaa !3, !noalias !10
  %298 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %130
  %299 = load float, float* %298, align 4, !tbaa !3, !noalias !10
  %300 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %134
  %301 = load float, float* %300, align 4, !tbaa !3, !noalias !10
  %302 = insertelement <8 x float> undef, float %301, i32 0
  %303 = insertelement <8 x float> %302, float %299, i32 1
  %304 = insertelement <8 x float> %303, float %297, i32 2
  %305 = insertelement <8 x float> %304, float %295, i32 3
  %306 = insertelement <8 x float> %305, float %293, i32 4
  %307 = insertelement <8 x float> %306, float %291, i32 5
  %308 = insertelement <8 x float> %307, float %289, i32 6
  %309 = insertelement <8 x float> %308, float %287, i32 7
  %310 = bitcast <8 x float> %285 to <4 x i64>
  %311 = shufflevector <4 x i64> %310, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %312 = shufflevector <4 x i64> %310, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %313 = and <2 x i64> %311, <i64 -17587891081216, i64 -17587891081216>
  %314 = and <2 x i64> %312, <i64 -17587891081216, i64 -17587891081216>
  %315 = shufflevector <2 x i64> %313, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %316 = shufflevector <2 x i64> %314, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %317 = shufflevector <4 x i64> %315, <4 x i64> %316, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = fsub <8 x float> %285, %318
  %320 = fmul <8 x float> %285, %96
  %321 = bitcast <8 x float> %320 to <4 x i64>
  %322 = xor <4 x i64> %321, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %323 = bitcast <4 x i64> %322 to <8 x float>
  %324 = fmul <8 x float> %150, %318
  %325 = fadd <8 x float> %324, %323
  %326 = fmul <8 x float> %319, %150
  %327 = fadd <8 x float> %326, %325
  %328 = fmul <8 x float> %151, %318
  %329 = fadd <8 x float> %328, %327
  %330 = fmul <8 x float> %151, %319
  %331 = fadd <8 x float> %330, %329
  %332 = fmul <8 x float> %309, %96
  %333 = fadd <8 x float> %332, %331
  %334 = fadd <8 x float> %320, %259
  %335 = fsub <8 x float> %334, %259
  %336 = fsub <8 x float> %334, %335
  %337 = fsub <8 x float> %259, %336
  %338 = fsub <8 x float> %320, %335
  %339 = fadd <8 x float> %338, %337
  %340 = fadd <8 x float> %261, %333
  %341 = fadd <8 x float> %339, %340
  %342 = fadd <8 x float> %334, %341
  %343 = fsub <8 x float> %334, %342
  %344 = fadd <8 x float> %341, %343
  %345 = bitcast <8 x float> %342 to <4 x i64>
  %346 = shufflevector <4 x i64> %345, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %347 = shufflevector <4 x i64> %345, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %348 = and <2 x i64> %346, <i64 -17587891081216, i64 -17587891081216>
  %349 = and <2 x i64> %347, <i64 -17587891081216, i64 -17587891081216>
  %350 = shufflevector <2 x i64> %348, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %351 = shufflevector <2 x i64> %349, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %352 = shufflevector <4 x i64> %350, <4 x i64> %351, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %353 = bitcast <4 x i64> %352 to <8 x float>
  %354 = fsub <8 x float> %342, %353
  %355 = fmul <8 x float> %342, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %356 = bitcast <8 x float> %355 to <4 x i64>
  %357 = xor <4 x i64> %356, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %358 = bitcast <4 x i64> %357 to <8 x float>
  %359 = fmul <8 x float> %353, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %360 = fadd <8 x float> %359, %358
  %361 = fmul <8 x float> %354, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %362 = fadd <8 x float> %361, %360
  %363 = fmul <8 x float> %353, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %364 = fadd <8 x float> %363, %362
  %365 = fmul <8 x float> %354, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %366 = fadd <8 x float> %365, %364
  %367 = fmul <8 x float> %342, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %368 = fadd <8 x float> %367, %366
  %369 = fmul <8 x float> %344, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %370 = fadd <8 x float> %369, %368
  %371 = and <4 x i64> %95, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %372 = bitcast <4 x i64> %371 to <8 x float>
  %373 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %372, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %374 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %355, <8 x float> %96, <8 x float> %373) #8
  %375 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %370, <8 x float> zeroinitializer, <8 x float> %373) #8
  %376 = shl <4 x i32> %255, <i32 1, i32 1, i32 1, i32 1>
  %377 = and <4 x i32> %376, <i32 6, i32 6, i32 6, i32 6>
  %378 = shl <4 x i32> %258, <i32 1, i32 1, i32 1, i32 1>
  %379 = and <4 x i32> %378, <i32 6, i32 6, i32 6, i32 6>
  %380 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %374, <8 x float> zeroinitializer, i8 30) #8
  %381 = bitcast <8 x float> %380 to <4 x i64>
  %382 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %383 = shufflevector <4 x i64> %381, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %384 = bitcast <2 x i64> %382 to <16 x i8>
  %385 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %384) #8
  %386 = bitcast <2 x i64> %383 to <16 x i8>
  %387 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %386) #8
  %388 = bitcast <16 x i8> %385 to <4 x i32>
  %389 = add <4 x i32> %377, %388
  %390 = bitcast <16 x i8> %387 to <4 x i32>
  %391 = add <4 x i32> %379, %390
  %392 = ashr <4 x i32> %389, <i32 1, i32 1, i32 1, i32 1>
  %393 = ashr <4 x i32> %391, <i32 1, i32 1, i32 1, i32 1>
  %394 = bitcast <4 x i32> %392 to <2 x i64>
  %395 = bitcast <4 x i32> %393 to <2 x i64>
  %396 = and <4 x i32> %255, <i32 1, i32 1, i32 1, i32 1>
  %397 = icmp eq <4 x i32> %396, zeroinitializer
  %398 = sext <4 x i1> %397 to <4 x i32>
  %399 = bitcast <4 x i32> %398 to <2 x i64>
  %400 = and <4 x i32> %258, <i32 1, i32 1, i32 1, i32 1>
  %401 = icmp eq <4 x i32> %400, zeroinitializer
  %402 = sext <4 x i1> %401 to <4 x i32>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = shufflevector <2 x i64> %399, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %405 = shufflevector <2 x i64> %403, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %406 = shufflevector <4 x i64> %404, <4 x i64> %405, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %407 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %380) #8
  %408 = bitcast <8 x float> %407 to <4 x i64>
  %409 = and <4 x i64> %408, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %410 = xor <4 x i64> %409, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %411 = bitcast <4 x i64> %410 to <8 x float>
  %412 = or <4 x i64> %409, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %413 = bitcast <4 x i64> %412 to <8 x float>
  %414 = fadd <8 x float> %374, %411
  %415 = fsub <8 x float> %414, %374
  %416 = fsub <8 x float> %414, %415
  %417 = fsub <8 x float> %374, %416
  %418 = fsub <8 x float> %411, %415
  %419 = fadd <8 x float> %418, %417
  %420 = fadd <8 x float> %375, %413
  %421 = fadd <8 x float> %420, %419
  %422 = bitcast <4 x i64> %406 to <8 x float>
  %423 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %374, <8 x float> %414, <8 x float> %422) #8
  %424 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %375, <8 x float> %421, <8 x float> %422) #8
  %425 = fadd <8 x float> %423, %424
  %426 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %427 = fcmp uno <8 x float> %0, zeroinitializer
  %428 = or <8 x i1> %426, %427
  %429 = sext <8 x i1> %428 to <8 x i32>
  %430 = bitcast <8 x i32> %429 to <4 x i64>
  %431 = bitcast <8 x float> %425 to <4 x i64>
  %432 = or <4 x i64> %431, %430
  %433 = bitcast <4 x i64> %432 to <8 x float>
  br label %434

; <label>:434:                                    ; preds = %46, %74, %12
  %435 = phi <2 x i64> [ %394, %74 ], [ %58, %46 ], [ %24, %12 ]
  %436 = phi <2 x i64> [ %395, %74 ], [ %60, %46 ], [ %26, %12 ]
  %437 = phi <8 x float> [ %433, %74 ], [ %73, %46 ], [ %37, %12 ]
  %438 = fmul <8 x float> %437, %437
  %439 = bitcast <2 x i64> %435 to <4 x i32>
  %440 = and <4 x i32> %439, <i32 2, i32 2, i32 2, i32 2>
  %441 = icmp eq <4 x i32> %440, zeroinitializer
  %442 = sext <4 x i1> %441 to <4 x i32>
  %443 = bitcast <4 x i32> %442 to <2 x i64>
  %444 = bitcast <2 x i64> %436 to <4 x i32>
  %445 = and <4 x i32> %444, <i32 2, i32 2, i32 2, i32 2>
  %446 = icmp eq <4 x i32> %445, zeroinitializer
  %447 = sext <4 x i1> %446 to <4 x i32>
  %448 = bitcast <4 x i32> %447 to <2 x i64>
  %449 = shufflevector <2 x i64> %443, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %450 = shufflevector <2 x i64> %448, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %451 = shufflevector <4 x i64> %449, <4 x i64> %450, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %452 = and <4 x i64> %451, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %453 = bitcast <8 x float> %437 to <4 x i64>
  %454 = xor <4 x i64> %452, %453
  %455 = bitcast <4 x i64> %454 to <8 x float>
  %456 = fmul <8 x float> %438, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %457 = fadd <8 x float> %456, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %458 = fmul <8 x float> %438, %457
  %459 = fadd <8 x float> %458, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %460 = fmul <8 x float> %438, %459
  %461 = fadd <8 x float> %460, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %462 = fmul <8 x float> %461, %455
  %463 = fmul <8 x float> %438, %462
  %464 = fadd <8 x float> %463, %455
  ret <8 x float> %464
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %25, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #8
  %15 = bitcast <8 x i32> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #8
  %19 = fmul <8 x float> %18, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %20 = fadd <8 x float> %19, %0
  %21 = fmul <8 x float> %18, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %22 = fadd <8 x float> %21, %20
  %23 = fmul <8 x float> %18, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %24 = fadd <8 x float> %23, %22
  br label %372

; <label>:25:                                     ; preds = %1
  %26 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %27 = bitcast <8 x float> %26 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %29, %28
  %31 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %30, <2 x i64> <i64 -1, i64 -1>) #8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %48, label %33, !prof !2

; <label>:33:                                     ; preds = %25
  %34 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %35 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %34) #8
  %36 = bitcast <8 x i32> %35 to <4 x i64>
  %37 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %36, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %35) #8
  %40 = fmul <8 x float> %39, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %41 = fadd <8 x float> %40, %0
  %42 = fmul <8 x float> %39, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %43 = fadd <8 x float> %42, %41
  %44 = fmul <8 x float> %39, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %45 = fadd <8 x float> %44, %43
  %46 = fmul <8 x float> %39, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %47 = fadd <8 x float> %46, %45
  br label %372

; <label>:48:                                     ; preds = %25
  %49 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %50 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %51 = bitcast <2 x i64> %49 to <4 x i32>
  %52 = lshr <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %53 = bitcast <2 x i64> %50 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 23, i32 23, i32 23, i32 23>
  %55 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %56 = and <4 x i32> %54, <i32 255, i32 255, i32 255, i32 255>
  %57 = add nsw <4 x i32> %55, <i32 -152, i32 -152, i32 -152, i32 -152>
  %58 = add nsw <4 x i32> %56, <i32 -152, i32 -152, i32 -152, i32 -152>
  %59 = icmp ugt <4 x i32> %55, <i32 217, i32 217, i32 217, i32 217>
  %60 = icmp ugt <4 x i32> %56, <i32 217, i32 217, i32 217, i32 217>
  %61 = select <4 x i1> %59, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %62 = select <4 x i1> %60, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %63 = add <4 x i32> %61, %51
  %64 = add <4 x i32> %62, %53
  %65 = bitcast <4 x i32> %63 to <2 x i64>
  %66 = bitcast <4 x i32> %64 to <2 x i64>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = ashr <4 x i32> %57, <i32 31, i32 31, i32 31, i32 31>
  %72 = ashr <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %73 = xor <4 x i32> %71, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %74 = and <4 x i32> %73, %57
  %75 = shl <4 x i32> %74, <i32 2, i32 2, i32 2, i32 2>
  %76 = xor <4 x i32> %72, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %77 = and <4 x i32> %76, %58
  %78 = shl <4 x i32> %77, <i32 2, i32 2, i32 2, i32 2>
  %79 = extractelement <4 x i32> %78, i32 3
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !3, !noalias !13
  %83 = extractelement <4 x i32> %78, i32 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !3, !noalias !13
  %87 = extractelement <4 x i32> %78, i32 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !3, !noalias !13
  %91 = extractelement <4 x i32> %78, i32 0
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !3, !noalias !13
  %95 = extractelement <4 x i32> %75, i32 3
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !3, !noalias !13
  %99 = extractelement <4 x i32> %75, i32 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !3, !noalias !13
  %103 = extractelement <4 x i32> %75, i32 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !3, !noalias !13
  %107 = extractelement <4 x i32> %75, i32 0
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !3, !noalias !13
  %111 = insertelement <8 x float> undef, float %110, i32 0
  %112 = insertelement <8 x float> %111, float %106, i32 1
  %113 = insertelement <8 x float> %112, float %102, i32 2
  %114 = insertelement <8 x float> %113, float %98, i32 3
  %115 = insertelement <8 x float> %114, float %94, i32 4
  %116 = insertelement <8 x float> %115, float %90, i32 5
  %117 = insertelement <8 x float> %116, float %86, i32 6
  %118 = insertelement <8 x float> %117, float %82, i32 7
  %119 = and <2 x i64> %65, <i64 -17587891081216, i64 -17587891081216>
  %120 = and <2 x i64> %66, <i64 -17587891081216, i64 -17587891081216>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = fsub <8 x float> %70, %124
  %126 = bitcast <8 x float> %118 to <4 x i64>
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %128 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = and <2 x i64> %127, <i64 -17587891081216, i64 -17587891081216>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = shufflevector <2 x i64> %129, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <4 x i64> %131, <4 x i64> %132, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = fsub <8 x float> %118, %134
  %136 = fmul <8 x float> %118, %70
  %137 = bitcast <8 x float> %136 to <4 x i64>
  %138 = xor <4 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fmul <8 x float> %124, %134
  %141 = fadd <8 x float> %140, %139
  %142 = fmul <8 x float> %125, %134
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %135, %124
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %125, %135
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %136, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %149 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %148, i32 8) #8
  %150 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %136, i32 8) #8
  %151 = fmul <8 x float> %150, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %152 = fsub <8 x float> %149, %151
  %153 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %152) #8
  %154 = bitcast <8 x i32> %153 to <4 x i64>
  %155 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %156 = shufflevector <4 x i64> %154, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %157 = fmul <8 x float> %149, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %158 = fsub <8 x float> %136, %157
  %159 = fadd <8 x float> %158, %147
  %160 = fsub <8 x float> %158, %159
  %161 = fadd <8 x float> %147, %160
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %80
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !13
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %84
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !13
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %88
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !13
  %168 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %92
  %169 = load float, float* %168, align 4, !tbaa !3, !noalias !13
  %170 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %96
  %171 = load float, float* %170, align 4, !tbaa !3, !noalias !13
  %172 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %100
  %173 = load float, float* %172, align 4, !tbaa !3, !noalias !13
  %174 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %104
  %175 = load float, float* %174, align 4, !tbaa !3, !noalias !13
  %176 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %108
  %177 = load float, float* %176, align 4, !tbaa !3, !noalias !13
  %178 = insertelement <8 x float> undef, float %177, i32 0
  %179 = insertelement <8 x float> %178, float %175, i32 1
  %180 = insertelement <8 x float> %179, float %173, i32 2
  %181 = insertelement <8 x float> %180, float %171, i32 3
  %182 = insertelement <8 x float> %181, float %169, i32 4
  %183 = insertelement <8 x float> %182, float %167, i32 5
  %184 = insertelement <8 x float> %183, float %165, i32 6
  %185 = insertelement <8 x float> %184, float %163, i32 7
  %186 = bitcast <8 x float> %185 to <4 x i64>
  %187 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %189 = and <2 x i64> %187, <i64 -17587891081216, i64 -17587891081216>
  %190 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %191 = shufflevector <2 x i64> %189, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <4 x i64> %191, <4 x i64> %192, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %194 = bitcast <4 x i64> %193 to <8 x float>
  %195 = fsub <8 x float> %185, %194
  %196 = fmul <8 x float> %185, %70
  %197 = bitcast <8 x float> %196 to <4 x i64>
  %198 = xor <4 x i64> %197, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %199 = bitcast <4 x i64> %198 to <8 x float>
  %200 = fmul <8 x float> %124, %194
  %201 = fadd <8 x float> %200, %199
  %202 = fmul <8 x float> %125, %194
  %203 = fadd <8 x float> %202, %201
  %204 = fmul <8 x float> %195, %124
  %205 = fadd <8 x float> %204, %203
  %206 = fmul <8 x float> %125, %195
  %207 = fadd <8 x float> %206, %205
  %208 = fadd <8 x float> %159, %196
  %209 = fsub <8 x float> %208, %159
  %210 = fsub <8 x float> %208, %209
  %211 = fsub <8 x float> %159, %210
  %212 = fsub <8 x float> %196, %209
  %213 = fadd <8 x float> %212, %211
  %214 = fadd <8 x float> %161, %207
  %215 = fadd <8 x float> %213, %214
  %216 = fmul <8 x float> %208, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %217 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %216, i32 8) #8
  %218 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %208, i32 8) #8
  %219 = fmul <8 x float> %218, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %220 = fsub <8 x float> %217, %219
  %221 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %220) #8
  %222 = bitcast <8 x i32> %221 to <4 x i64>
  %223 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %224 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %225 = fmul <8 x float> %217, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %226 = fsub <8 x float> %208, %225
  %227 = bitcast <2 x i64> %155 to <4 x i32>
  %228 = bitcast <2 x i64> %223 to <4 x i32>
  %229 = add <4 x i32> %228, %227
  %230 = bitcast <2 x i64> %156 to <4 x i32>
  %231 = bitcast <2 x i64> %224 to <4 x i32>
  %232 = add <4 x i32> %231, %230
  %233 = fadd <8 x float> %226, %215
  %234 = fsub <8 x float> %226, %233
  %235 = fadd <8 x float> %215, %234
  %236 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %80
  %237 = load float, float* %236, align 4, !tbaa !3, !noalias !13
  %238 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %84
  %239 = load float, float* %238, align 4, !tbaa !3, !noalias !13
  %240 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %88
  %241 = load float, float* %240, align 4, !tbaa !3, !noalias !13
  %242 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %92
  %243 = load float, float* %242, align 4, !tbaa !3, !noalias !13
  %244 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %96
  %245 = load float, float* %244, align 4, !tbaa !3, !noalias !13
  %246 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %100
  %247 = load float, float* %246, align 4, !tbaa !3, !noalias !13
  %248 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %104
  %249 = load float, float* %248, align 4, !tbaa !3, !noalias !13
  %250 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %108
  %251 = load float, float* %250, align 4, !tbaa !3, !noalias !13
  %252 = insertelement <8 x float> undef, float %251, i32 0
  %253 = insertelement <8 x float> %252, float %249, i32 1
  %254 = insertelement <8 x float> %253, float %247, i32 2
  %255 = insertelement <8 x float> %254, float %245, i32 3
  %256 = insertelement <8 x float> %255, float %243, i32 4
  %257 = insertelement <8 x float> %256, float %241, i32 5
  %258 = insertelement <8 x float> %257, float %239, i32 6
  %259 = insertelement <8 x float> %258, float %237, i32 7
  %260 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %80
  %261 = load float, float* %260, align 4, !tbaa !3, !noalias !13
  %262 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %84
  %263 = load float, float* %262, align 4, !tbaa !3, !noalias !13
  %264 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %88
  %265 = load float, float* %264, align 4, !tbaa !3, !noalias !13
  %266 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %92
  %267 = load float, float* %266, align 4, !tbaa !3, !noalias !13
  %268 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %96
  %269 = load float, float* %268, align 4, !tbaa !3, !noalias !13
  %270 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %100
  %271 = load float, float* %270, align 4, !tbaa !3, !noalias !13
  %272 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %104
  %273 = load float, float* %272, align 4, !tbaa !3, !noalias !13
  %274 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %108
  %275 = load float, float* %274, align 4, !tbaa !3, !noalias !13
  %276 = insertelement <8 x float> undef, float %275, i32 0
  %277 = insertelement <8 x float> %276, float %273, i32 1
  %278 = insertelement <8 x float> %277, float %271, i32 2
  %279 = insertelement <8 x float> %278, float %269, i32 3
  %280 = insertelement <8 x float> %279, float %267, i32 4
  %281 = insertelement <8 x float> %280, float %265, i32 5
  %282 = insertelement <8 x float> %281, float %263, i32 6
  %283 = insertelement <8 x float> %282, float %261, i32 7
  %284 = bitcast <8 x float> %259 to <4 x i64>
  %285 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = and <2 x i64> %285, <i64 -17587891081216, i64 -17587891081216>
  %288 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %289 = shufflevector <2 x i64> %287, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <4 x i64> %289, <4 x i64> %290, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %292 = bitcast <4 x i64> %291 to <8 x float>
  %293 = fsub <8 x float> %259, %292
  %294 = fmul <8 x float> %259, %70
  %295 = bitcast <8 x float> %294 to <4 x i64>
  %296 = xor <4 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <4 x i64> %296 to <8 x float>
  %298 = fmul <8 x float> %124, %292
  %299 = fadd <8 x float> %298, %297
  %300 = fmul <8 x float> %293, %124
  %301 = fadd <8 x float> %300, %299
  %302 = fmul <8 x float> %125, %292
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %125, %293
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %283, %70
  %307 = fadd <8 x float> %306, %305
  %308 = fadd <8 x float> %294, %233
  %309 = fsub <8 x float> %308, %233
  %310 = fsub <8 x float> %308, %309
  %311 = fsub <8 x float> %233, %310
  %312 = fsub <8 x float> %294, %309
  %313 = fadd <8 x float> %312, %311
  %314 = fadd <8 x float> %235, %307
  %315 = fadd <8 x float> %313, %314
  %316 = fadd <8 x float> %308, %315
  %317 = fsub <8 x float> %308, %316
  %318 = fadd <8 x float> %315, %317
  %319 = bitcast <8 x float> %316 to <4 x i64>
  %320 = shufflevector <4 x i64> %319, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %321 = shufflevector <4 x i64> %319, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %322 = and <2 x i64> %320, <i64 -17587891081216, i64 -17587891081216>
  %323 = and <2 x i64> %321, <i64 -17587891081216, i64 -17587891081216>
  %324 = shufflevector <2 x i64> %322, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %325 = shufflevector <2 x i64> %323, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %326 = shufflevector <4 x i64> %324, <4 x i64> %325, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %327 = bitcast <4 x i64> %326 to <8 x float>
  %328 = fsub <8 x float> %316, %327
  %329 = fmul <8 x float> %316, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %330 = bitcast <8 x float> %329 to <4 x i64>
  %331 = xor <4 x i64> %330, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %332 = bitcast <4 x i64> %331 to <8 x float>
  %333 = fmul <8 x float> %327, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %334 = fadd <8 x float> %333, %332
  %335 = fmul <8 x float> %328, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %336 = fadd <8 x float> %335, %334
  %337 = fmul <8 x float> %327, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %338 = fadd <8 x float> %337, %336
  %339 = fmul <8 x float> %328, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %340 = fadd <8 x float> %339, %338
  %341 = fmul <8 x float> %316, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %342 = fadd <8 x float> %341, %340
  %343 = fmul <8 x float> %318, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %344 = fadd <8 x float> %343, %342
  %345 = and <4 x i64> %69, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %346 = bitcast <4 x i64> %345 to <8 x float>
  %347 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %346, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %348 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %329, <8 x float> %70, <8 x float> %347) #8
  %349 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %344, <8 x float> zeroinitializer, <8 x float> %347) #8
  %350 = bitcast <4 x i32> %229 to <2 x i64>
  %351 = bitcast <4 x i32> %232 to <2 x i64>
  %352 = fadd <8 x float> %348, %349
  %353 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %354 = fcmp uno <8 x float> %0, zeroinitializer
  %355 = or <8 x i1> %353, %354
  %356 = sext <8 x i1> %355 to <8 x i32>
  %357 = bitcast <8 x i32> %356 to <4 x i64>
  %358 = bitcast <8 x float> %352 to <4 x i64>
  %359 = or <4 x i64> %358, %357
  %360 = bitcast <4 x i64> %359 to <8 x float>
  %361 = icmp eq <4 x i32> %51, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %362 = sext <4 x i1> %361 to <4 x i32>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = icmp eq <4 x i32> %53, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %365 = sext <4 x i1> %364 to <4 x i32>
  %366 = bitcast <4 x i32> %365 to <2 x i64>
  %367 = shufflevector <2 x i64> %363, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %368 = shufflevector <2 x i64> %366, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %369 = shufflevector <4 x i64> %367, <4 x i64> %368, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %370 = bitcast <4 x i64> %369 to <8 x float>
  %371 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %360, <8 x float> %0, <8 x float> %370) #8
  br label %372

; <label>:372:                                    ; preds = %33, %48, %12
  %373 = phi <2 x i64> [ %350, %48 ], [ %37, %33 ], [ %16, %12 ]
  %374 = phi <2 x i64> [ %351, %48 ], [ %38, %33 ], [ %17, %12 ]
  %375 = phi <8 x float> [ %371, %48 ], [ %47, %33 ], [ %24, %12 ]
  %376 = fmul <8 x float> %375, %375
  %377 = bitcast <2 x i64> %373 to <4 x i32>
  %378 = and <4 x i32> %377, <i32 1, i32 1, i32 1, i32 1>
  %379 = icmp ne <4 x i32> %378, zeroinitializer
  %380 = sext <4 x i1> %379 to <4 x i32>
  %381 = bitcast <4 x i32> %380 to <2 x i64>
  %382 = bitcast <2 x i64> %374 to <4 x i32>
  %383 = and <4 x i32> %382, <i32 1, i32 1, i32 1, i32 1>
  %384 = icmp ne <4 x i32> %383, zeroinitializer
  %385 = sext <4 x i1> %384 to <4 x i32>
  %386 = bitcast <4 x i32> %385 to <2 x i64>
  %387 = shufflevector <2 x i64> %381, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %388 = shufflevector <2 x i64> %386, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %389 = shufflevector <4 x i64> %387, <4 x i64> %388, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %390 = and <4 x i64> %389, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %391 = bitcast <8 x float> %375 to <4 x i64>
  %392 = xor <4 x i64> %390, %391
  %393 = bitcast <4 x i64> %392 to <8 x float>
  %394 = fmul <8 x float> %376, %376
  %395 = fmul <8 x float> %394, %394
  %396 = fmul <8 x float> %376, <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>
  %397 = fadd <8 x float> %396, <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>
  %398 = fmul <8 x float> %376, <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>
  %399 = fadd <8 x float> %398, <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>
  %400 = fmul <8 x float> %376, <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>
  %401 = fadd <8 x float> %400, <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>
  %402 = fmul <8 x float> %394, %399
  %403 = fadd <8 x float> %401, %402
  %404 = fmul <8 x float> %395, %397
  %405 = fadd <8 x float> %404, %403
  %406 = fmul <8 x float> %405, %393
  %407 = fmul <8 x float> %376, %406
  %408 = fadd <8 x float> %407, %393
  %409 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %408
  %410 = bitcast <4 x i64> %389 to <8 x float>
  %411 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %408, <8 x float> %409, <8 x float> %410) #8
  ret <8 x float> %411
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %37, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #8
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = fmul <8 x float> %14, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %20 = fadd <8 x float> %19, %0
  %21 = fmul <8 x float> %14, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %22 = fadd <8 x float> %21, %20
  %23 = fsub <8 x float> %22, %20
  %24 = fsub <8 x float> %22, %23
  %25 = fsub <8 x float> %20, %24
  %26 = fsub <8 x float> %21, %23
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %14, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %29 = fadd <8 x float> %28, %22
  %30 = fsub <8 x float> %22, %29
  %31 = fadd <8 x float> %28, %30
  %32 = fadd <8 x float> %31, %27
  %33 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <2 x i64> %33 to <4 x i32>
  %36 = bitcast <2 x i64> %34 to <4 x i32>
  br label %398

; <label>:37:                                     ; preds = %1
  %38 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = bitcast <2 x i64> %38 to <4 x i32>
  %41 = lshr <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = bitcast <2 x i64> %39 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %44 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %45 = and <4 x i32> %43, <i32 255, i32 255, i32 255, i32 255>
  %46 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %47 = add nsw <4 x i32> %45, <i32 -152, i32 -152, i32 -152, i32 -152>
  %48 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %49 = icmp ugt <4 x i32> %45, <i32 217, i32 217, i32 217, i32 217>
  %50 = select <4 x i1> %48, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %52 = add <4 x i32> %50, %40
  %53 = add <4 x i32> %51, %42
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %61 = ashr <4 x i32> %47, <i32 31, i32 31, i32 31, i32 31>
  %62 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %63 = and <4 x i32> %62, %46
  %64 = shl <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = xor <4 x i32> %61, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %66 = and <4 x i32> %65, %47
  %67 = shl <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %68 = extractelement <4 x i32> %67, i32 3
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !3, !noalias !16
  %72 = extractelement <4 x i32> %67, i32 2
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3, !noalias !16
  %76 = extractelement <4 x i32> %67, i32 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !16
  %80 = extractelement <4 x i32> %67, i32 0
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !16
  %84 = extractelement <4 x i32> %64, i32 3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !16
  %88 = extractelement <4 x i32> %64, i32 2
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !16
  %92 = extractelement <4 x i32> %64, i32 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !16
  %96 = extractelement <4 x i32> %64, i32 0
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !16
  %100 = insertelement <8 x float> undef, float %99, i32 0
  %101 = insertelement <8 x float> %100, float %95, i32 1
  %102 = insertelement <8 x float> %101, float %91, i32 2
  %103 = insertelement <8 x float> %102, float %87, i32 3
  %104 = insertelement <8 x float> %103, float %83, i32 4
  %105 = insertelement <8 x float> %104, float %79, i32 5
  %106 = insertelement <8 x float> %105, float %75, i32 6
  %107 = insertelement <8 x float> %106, float %71, i32 7
  %108 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %109 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %110 = shufflevector <2 x i64> %108, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = shufflevector <2 x i64> %109, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = shufflevector <4 x i64> %110, <4 x i64> %111, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fsub <8 x float> %59, %113
  %115 = bitcast <8 x float> %107 to <4 x i64>
  %116 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %117 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %118 = and <2 x i64> %116, <i64 -17587891081216, i64 -17587891081216>
  %119 = and <2 x i64> %117, <i64 -17587891081216, i64 -17587891081216>
  %120 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <4 x i64> %120, <4 x i64> %121, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fsub <8 x float> %107, %123
  %125 = fmul <8 x float> %107, %59
  %126 = bitcast <8 x float> %125 to <4 x i64>
  %127 = xor <4 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = bitcast <4 x i64> %127 to <8 x float>
  %129 = fmul <8 x float> %113, %123
  %130 = fadd <8 x float> %129, %128
  %131 = fmul <8 x float> %114, %123
  %132 = fadd <8 x float> %131, %130
  %133 = fmul <8 x float> %124, %113
  %134 = fadd <8 x float> %133, %132
  %135 = fmul <8 x float> %114, %124
  %136 = fadd <8 x float> %135, %134
  %137 = fmul <8 x float> %125, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %138 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %137, i32 8) #8
  %139 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %125, i32 8) #8
  %140 = fmul <8 x float> %139, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %141 = fsub <8 x float> %138, %140
  %142 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %141) #8
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %145 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %146 = fmul <8 x float> %138, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %147 = fsub <8 x float> %125, %146
  %148 = fadd <8 x float> %147, %136
  %149 = fsub <8 x float> %147, %148
  %150 = fadd <8 x float> %136, %149
  %151 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %69
  %152 = load float, float* %151, align 4, !tbaa !3, !noalias !16
  %153 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %73
  %154 = load float, float* %153, align 4, !tbaa !3, !noalias !16
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !16
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !16
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !16
  %161 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %162 = load float, float* %161, align 4, !tbaa !3, !noalias !16
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !16
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !16
  %167 = insertelement <8 x float> undef, float %166, i32 0
  %168 = insertelement <8 x float> %167, float %164, i32 1
  %169 = insertelement <8 x float> %168, float %162, i32 2
  %170 = insertelement <8 x float> %169, float %160, i32 3
  %171 = insertelement <8 x float> %170, float %158, i32 4
  %172 = insertelement <8 x float> %171, float %156, i32 5
  %173 = insertelement <8 x float> %172, float %154, i32 6
  %174 = insertelement <8 x float> %173, float %152, i32 7
  %175 = bitcast <8 x float> %174 to <4 x i64>
  %176 = shufflevector <4 x i64> %175, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %177 = shufflevector <4 x i64> %175, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %178 = and <2 x i64> %176, <i64 -17587891081216, i64 -17587891081216>
  %179 = and <2 x i64> %177, <i64 -17587891081216, i64 -17587891081216>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <2 x i64> %179, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %182 = shufflevector <4 x i64> %180, <4 x i64> %181, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %183 = bitcast <4 x i64> %182 to <8 x float>
  %184 = fsub <8 x float> %174, %183
  %185 = fmul <8 x float> %174, %59
  %186 = bitcast <8 x float> %185 to <4 x i64>
  %187 = xor <4 x i64> %186, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %188 = bitcast <4 x i64> %187 to <8 x float>
  %189 = fmul <8 x float> %113, %183
  %190 = fadd <8 x float> %189, %188
  %191 = fmul <8 x float> %114, %183
  %192 = fadd <8 x float> %191, %190
  %193 = fmul <8 x float> %184, %113
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %114, %184
  %196 = fadd <8 x float> %195, %194
  %197 = fadd <8 x float> %148, %185
  %198 = fsub <8 x float> %197, %148
  %199 = fsub <8 x float> %197, %198
  %200 = fsub <8 x float> %148, %199
  %201 = fsub <8 x float> %185, %198
  %202 = fadd <8 x float> %201, %200
  %203 = fadd <8 x float> %150, %196
  %204 = fadd <8 x float> %202, %203
  %205 = fmul <8 x float> %197, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %206 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %205, i32 8) #8
  %207 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %197, i32 8) #8
  %208 = fmul <8 x float> %207, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %209 = fsub <8 x float> %206, %208
  %210 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %209) #8
  %211 = bitcast <8 x i32> %210 to <4 x i64>
  %212 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %214 = fmul <8 x float> %206, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %215 = fsub <8 x float> %197, %214
  %216 = bitcast <2 x i64> %144 to <4 x i32>
  %217 = bitcast <2 x i64> %212 to <4 x i32>
  %218 = add <4 x i32> %217, %216
  %219 = bitcast <2 x i64> %145 to <4 x i32>
  %220 = bitcast <2 x i64> %213 to <4 x i32>
  %221 = add <4 x i32> %220, %219
  %222 = fadd <8 x float> %215, %204
  %223 = fsub <8 x float> %215, %222
  %224 = fadd <8 x float> %204, %223
  %225 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %69
  %226 = load float, float* %225, align 4, !tbaa !3, !noalias !16
  %227 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %73
  %228 = load float, float* %227, align 4, !tbaa !3, !noalias !16
  %229 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %230 = load float, float* %229, align 4, !tbaa !3, !noalias !16
  %231 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %232 = load float, float* %231, align 4, !tbaa !3, !noalias !16
  %233 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %234 = load float, float* %233, align 4, !tbaa !3, !noalias !16
  %235 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %236 = load float, float* %235, align 4, !tbaa !3, !noalias !16
  %237 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %238 = load float, float* %237, align 4, !tbaa !3, !noalias !16
  %239 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %240 = load float, float* %239, align 4, !tbaa !3, !noalias !16
  %241 = insertelement <8 x float> undef, float %240, i32 0
  %242 = insertelement <8 x float> %241, float %238, i32 1
  %243 = insertelement <8 x float> %242, float %236, i32 2
  %244 = insertelement <8 x float> %243, float %234, i32 3
  %245 = insertelement <8 x float> %244, float %232, i32 4
  %246 = insertelement <8 x float> %245, float %230, i32 5
  %247 = insertelement <8 x float> %246, float %228, i32 6
  %248 = insertelement <8 x float> %247, float %226, i32 7
  %249 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %69
  %250 = load float, float* %249, align 4, !tbaa !3, !noalias !16
  %251 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %73
  %252 = load float, float* %251, align 4, !tbaa !3, !noalias !16
  %253 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %254 = load float, float* %253, align 4, !tbaa !3, !noalias !16
  %255 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %256 = load float, float* %255, align 4, !tbaa !3, !noalias !16
  %257 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %258 = load float, float* %257, align 4, !tbaa !3, !noalias !16
  %259 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %260 = load float, float* %259, align 4, !tbaa !3, !noalias !16
  %261 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %262 = load float, float* %261, align 4, !tbaa !3, !noalias !16
  %263 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %264 = load float, float* %263, align 4, !tbaa !3, !noalias !16
  %265 = insertelement <8 x float> undef, float %264, i32 0
  %266 = insertelement <8 x float> %265, float %262, i32 1
  %267 = insertelement <8 x float> %266, float %260, i32 2
  %268 = insertelement <8 x float> %267, float %258, i32 3
  %269 = insertelement <8 x float> %268, float %256, i32 4
  %270 = insertelement <8 x float> %269, float %254, i32 5
  %271 = insertelement <8 x float> %270, float %252, i32 6
  %272 = insertelement <8 x float> %271, float %250, i32 7
  %273 = bitcast <8 x float> %248 to <4 x i64>
  %274 = shufflevector <4 x i64> %273, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %275 = shufflevector <4 x i64> %273, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %276 = and <2 x i64> %274, <i64 -17587891081216, i64 -17587891081216>
  %277 = and <2 x i64> %275, <i64 -17587891081216, i64 -17587891081216>
  %278 = shufflevector <2 x i64> %276, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %279 = shufflevector <2 x i64> %277, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %280 = shufflevector <4 x i64> %278, <4 x i64> %279, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %281 = bitcast <4 x i64> %280 to <8 x float>
  %282 = fsub <8 x float> %248, %281
  %283 = fmul <8 x float> %248, %59
  %284 = bitcast <8 x float> %283 to <4 x i64>
  %285 = xor <4 x i64> %284, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %286 = bitcast <4 x i64> %285 to <8 x float>
  %287 = fmul <8 x float> %113, %281
  %288 = fadd <8 x float> %287, %286
  %289 = fmul <8 x float> %282, %113
  %290 = fadd <8 x float> %289, %288
  %291 = fmul <8 x float> %114, %281
  %292 = fadd <8 x float> %291, %290
  %293 = fmul <8 x float> %114, %282
  %294 = fadd <8 x float> %293, %292
  %295 = fmul <8 x float> %272, %59
  %296 = fadd <8 x float> %295, %294
  %297 = fadd <8 x float> %283, %222
  %298 = fsub <8 x float> %297, %222
  %299 = fsub <8 x float> %297, %298
  %300 = fsub <8 x float> %222, %299
  %301 = fsub <8 x float> %283, %298
  %302 = fadd <8 x float> %301, %300
  %303 = fadd <8 x float> %224, %296
  %304 = fadd <8 x float> %302, %303
  %305 = fadd <8 x float> %297, %304
  %306 = fsub <8 x float> %297, %305
  %307 = fadd <8 x float> %304, %306
  %308 = bitcast <8 x float> %305 to <4 x i64>
  %309 = shufflevector <4 x i64> %308, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %310 = shufflevector <4 x i64> %308, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %311 = and <2 x i64> %309, <i64 -17587891081216, i64 -17587891081216>
  %312 = and <2 x i64> %310, <i64 -17587891081216, i64 -17587891081216>
  %313 = shufflevector <2 x i64> %311, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %314 = shufflevector <2 x i64> %312, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %315 = shufflevector <4 x i64> %313, <4 x i64> %314, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %316 = bitcast <4 x i64> %315 to <8 x float>
  %317 = fsub <8 x float> %305, %316
  %318 = fmul <8 x float> %305, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %319 = bitcast <8 x float> %318 to <4 x i64>
  %320 = xor <4 x i64> %319, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %321 = bitcast <4 x i64> %320 to <8 x float>
  %322 = fmul <8 x float> %316, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %323 = fadd <8 x float> %322, %321
  %324 = fmul <8 x float> %317, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %325 = fadd <8 x float> %324, %323
  %326 = fmul <8 x float> %316, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %327 = fadd <8 x float> %326, %325
  %328 = fmul <8 x float> %317, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %329 = fadd <8 x float> %328, %327
  %330 = fmul <8 x float> %305, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %331 = fadd <8 x float> %330, %329
  %332 = fmul <8 x float> %307, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %333 = fadd <8 x float> %332, %331
  %334 = and <4 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %335 = bitcast <4 x i64> %334 to <8 x float>
  %336 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %335, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %337 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %318, <8 x float> %59, <8 x float> %336) #8
  %338 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %333, <8 x float> zeroinitializer, <8 x float> %336) #8
  %339 = shl <4 x i32> %218, <i32 1, i32 1, i32 1, i32 1>
  %340 = and <4 x i32> %339, <i32 6, i32 6, i32 6, i32 6>
  %341 = shl <4 x i32> %221, <i32 1, i32 1, i32 1, i32 1>
  %342 = and <4 x i32> %341, <i32 6, i32 6, i32 6, i32 6>
  %343 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %337, <8 x float> zeroinitializer, i8 30) #8
  %344 = bitcast <8 x float> %343 to <4 x i64>
  %345 = shufflevector <4 x i64> %344, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %346 = shufflevector <4 x i64> %344, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %347 = bitcast <2 x i64> %345 to <16 x i8>
  %348 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %347) #8
  %349 = bitcast <2 x i64> %346 to <16 x i8>
  %350 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <16 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <16 x i8> %349) #8
  %351 = bitcast <16 x i8> %348 to <4 x i32>
  %352 = add <4 x i32> %340, %351
  %353 = bitcast <16 x i8> %350 to <4 x i32>
  %354 = add <4 x i32> %342, %353
  %355 = ashr <4 x i32> %352, <i32 2, i32 2, i32 2, i32 2>
  %356 = ashr <4 x i32> %354, <i32 2, i32 2, i32 2, i32 2>
  %357 = bitcast <4 x i32> %355 to <2 x i64>
  %358 = bitcast <4 x i32> %356 to <2 x i64>
  %359 = and <4 x i32> %218, <i32 1, i32 1, i32 1, i32 1>
  %360 = icmp ne <4 x i32> %359, zeroinitializer
  %361 = sext <4 x i1> %360 to <4 x i32>
  %362 = bitcast <4 x i32> %361 to <2 x i64>
  %363 = and <4 x i32> %221, <i32 1, i32 1, i32 1, i32 1>
  %364 = icmp ne <4 x i32> %363, zeroinitializer
  %365 = sext <4 x i1> %364 to <4 x i32>
  %366 = bitcast <4 x i32> %365 to <2 x i64>
  %367 = shufflevector <2 x i64> %362, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %368 = shufflevector <2 x i64> %366, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %369 = shufflevector <4 x i64> %367, <4 x i64> %368, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %370 = bitcast <8 x float> %337 to <4 x i64>
  %371 = and <4 x i64> %370, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %372 = xor <4 x i64> %371, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %373 = bitcast <4 x i64> %372 to <8 x float>
  %374 = or <4 x i64> %371, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %375 = bitcast <4 x i64> %374 to <8 x float>
  %376 = fadd <8 x float> %337, %373
  %377 = fsub <8 x float> %376, %337
  %378 = fsub <8 x float> %376, %377
  %379 = fsub <8 x float> %337, %378
  %380 = fsub <8 x float> %373, %377
  %381 = fadd <8 x float> %380, %379
  %382 = fadd <8 x float> %338, %375
  %383 = fadd <8 x float> %382, %381
  %384 = bitcast <4 x i64> %369 to <8 x float>
  %385 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %337, <8 x float> %376, <8 x float> %384) #8
  %386 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %338, <8 x float> %383, <8 x float> %384) #8
  %387 = fadd <8 x float> %385, %386
  %388 = fsub <8 x float> %385, %387
  %389 = fadd <8 x float> %386, %388
  %390 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %391 = fcmp uno <8 x float> %0, zeroinitializer
  %392 = or <8 x i1> %390, %391
  %393 = sext <8 x i1> %392 to <8 x i32>
  %394 = bitcast <8 x i32> %393 to <4 x i64>
  %395 = bitcast <8 x float> %387 to <4 x i64>
  %396 = or <4 x i64> %395, %394
  %397 = bitcast <4 x i64> %396 to <8 x float>
  br label %398

; <label>:398:                                    ; preds = %37, %12
  %399 = phi <4 x i32> [ %42, %37 ], [ %36, %12 ]
  %400 = phi <4 x i32> [ %40, %37 ], [ %35, %12 ]
  %401 = phi <8 x float> [ %397, %37 ], [ %29, %12 ]
  %402 = phi <8 x float> [ %389, %37 ], [ %32, %12 ]
  %403 = phi <2 x i64> [ %357, %37 ], [ %17, %12 ]
  %404 = phi <2 x i64> [ %358, %37 ], [ %18, %12 ]
  %405 = bitcast <8 x float> %401 to <4 x i64>
  %406 = shufflevector <4 x i64> %405, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %407 = shufflevector <4 x i64> %405, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %408 = and <2 x i64> %406, <i64 -17587891081216, i64 -17587891081216>
  %409 = and <2 x i64> %407, <i64 -17587891081216, i64 -17587891081216>
  %410 = shufflevector <2 x i64> %408, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %411 = shufflevector <2 x i64> %409, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %412 = shufflevector <4 x i64> %410, <4 x i64> %411, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %413 = bitcast <4 x i64> %412 to <8 x float>
  %414 = fsub <8 x float> %401, %413
  %415 = fmul <8 x float> %401, %401
  %416 = bitcast <8 x float> %415 to <4 x i64>
  %417 = xor <4 x i64> %416, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %418 = bitcast <4 x i64> %417 to <8 x float>
  %419 = fmul <8 x float> %413, %413
  %420 = fadd <8 x float> %419, %418
  %421 = fadd <8 x float> %413, %413
  %422 = fmul <8 x float> %421, %414
  %423 = fadd <8 x float> %422, %420
  %424 = fmul <8 x float> %414, %414
  %425 = fadd <8 x float> %424, %423
  %426 = fadd <8 x float> %402, %402
  %427 = fmul <8 x float> %401, %426
  %428 = fadd <8 x float> %427, %425
  %429 = fmul <8 x float> %415, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %430 = fadd <8 x float> %429, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %431 = fmul <8 x float> %415, %430
  %432 = fadd <8 x float> %431, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %433 = fmul <8 x float> %415, %432
  %434 = fadd <8 x float> %433, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %435 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %434
  %436 = fadd <8 x float> %433, %435
  %437 = bitcast <8 x float> %434 to <4 x i64>
  %438 = shufflevector <4 x i64> %437, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %439 = shufflevector <4 x i64> %437, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %440 = and <2 x i64> %438, <i64 -17587891081216, i64 -17587891081216>
  %441 = and <2 x i64> %439, <i64 -17587891081216, i64 -17587891081216>
  %442 = shufflevector <2 x i64> %440, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %443 = shufflevector <2 x i64> %441, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %444 = shufflevector <4 x i64> %442, <4 x i64> %443, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %445 = bitcast <4 x i64> %444 to <8 x float>
  %446 = fsub <8 x float> %434, %445
  %447 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %448 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %449 = and <2 x i64> %447, <i64 -17587891081216, i64 -17587891081216>
  %450 = and <2 x i64> %448, <i64 -17587891081216, i64 -17587891081216>
  %451 = shufflevector <2 x i64> %449, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %452 = shufflevector <2 x i64> %450, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %453 = shufflevector <4 x i64> %451, <4 x i64> %452, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %454 = bitcast <4 x i64> %453 to <8 x float>
  %455 = fsub <8 x float> %415, %454
  %456 = fmul <8 x float> %415, %434
  %457 = bitcast <8 x float> %456 to <4 x i64>
  %458 = xor <4 x i64> %457, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %459 = bitcast <4 x i64> %458 to <8 x float>
  %460 = fmul <8 x float> %454, %445
  %461 = fadd <8 x float> %460, %459
  %462 = fmul <8 x float> %446, %454
  %463 = fadd <8 x float> %462, %461
  %464 = fmul <8 x float> %455, %445
  %465 = fadd <8 x float> %464, %463
  %466 = fmul <8 x float> %455, %446
  %467 = fadd <8 x float> %466, %465
  %468 = fmul <8 x float> %434, %428
  %469 = fadd <8 x float> %468, %467
  %470 = fmul <8 x float> %415, %436
  %471 = fadd <8 x float> %470, %469
  %472 = fadd <8 x float> %456, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %473 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %472
  %474 = fadd <8 x float> %456, %473
  %475 = fadd <8 x float> %474, %471
  %476 = bitcast <8 x float> %472 to <4 x i64>
  %477 = shufflevector <4 x i64> %476, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %478 = shufflevector <4 x i64> %476, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %479 = and <2 x i64> %477, <i64 -17587891081216, i64 -17587891081216>
  %480 = and <2 x i64> %478, <i64 -17587891081216, i64 -17587891081216>
  %481 = shufflevector <2 x i64> %479, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %482 = shufflevector <2 x i64> %480, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %483 = shufflevector <4 x i64> %481, <4 x i64> %482, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %484 = bitcast <4 x i64> %483 to <8 x float>
  %485 = fsub <8 x float> %472, %484
  %486 = fmul <8 x float> %402, %484
  %487 = fmul <8 x float> %475, %413
  %488 = fmul <8 x float> %414, %485
  %489 = fmul <8 x float> %485, %413
  %490 = fmul <8 x float> %414, %484
  %491 = fmul <8 x float> %413, %484
  %492 = fadd <8 x float> %486, %487
  %493 = fadd <8 x float> %488, %492
  %494 = fadd <8 x float> %489, %493
  %495 = fadd <8 x float> %490, %494
  %496 = fadd <8 x float> %491, %495
  %497 = bitcast <2 x i64> %403 to <4 x i32>
  %498 = and <4 x i32> %497, <i32 1, i32 1, i32 1, i32 1>
  %499 = icmp ne <4 x i32> %498, zeroinitializer
  %500 = sext <4 x i1> %499 to <4 x i32>
  %501 = bitcast <4 x i32> %500 to <2 x i64>
  %502 = bitcast <2 x i64> %404 to <4 x i32>
  %503 = and <4 x i32> %502, <i32 1, i32 1, i32 1, i32 1>
  %504 = icmp ne <4 x i32> %503, zeroinitializer
  %505 = sext <4 x i1> %504 to <4 x i32>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = shufflevector <2 x i64> %501, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %508 = shufflevector <2 x i64> %506, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %509 = shufflevector <4 x i64> %507, <4 x i64> %508, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %510 = and <4 x i64> %509, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %511 = bitcast <8 x float> %496 to <4 x i64>
  %512 = xor <4 x i64> %510, %511
  %513 = bitcast <4 x i64> %512 to <8 x float>
  %514 = icmp eq <4 x i32> %400, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %515 = sext <4 x i1> %514 to <4 x i32>
  %516 = bitcast <4 x i32> %515 to <2 x i64>
  %517 = icmp eq <4 x i32> %399, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %518 = sext <4 x i1> %517 to <4 x i32>
  %519 = bitcast <4 x i32> %518 to <2 x i64>
  %520 = shufflevector <2 x i64> %516, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %521 = shufflevector <2 x i64> %519, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %522 = shufflevector <4 x i64> %520, <4 x i64> %521, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %523 = bitcast <4 x i64> %522 to <8 x float>
  %524 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %513, <8 x float> %0, <8 x float> %523) #8
  ret <8 x float> %524
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %45, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = fadd <8 x float> %13, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %15 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %14, i32 8) #8
  %16 = fmul <8 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %17 = fadd <8 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %17) #8
  %19 = bitcast <8 x i32> %18 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %22 = fmul <8 x float> %17, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %23 = fadd <8 x float> %22, %0
  %24 = fsub <8 x float> %23, %0
  %25 = fsub <8 x float> %23, %24
  %26 = fsub <8 x float> %0, %25
  %27 = fsub <8 x float> %22, %24
  %28 = fadd <8 x float> %27, %26
  %29 = fmul <8 x float> %17, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %30 = fadd <8 x float> %29, %23
  %31 = fsub <8 x float> %30, %23
  %32 = fsub <8 x float> %30, %31
  %33 = fsub <8 x float> %23, %32
  %34 = fsub <8 x float> %29, %31
  %35 = fadd <8 x float> %34, %33
  %36 = fadd <8 x float> %28, %35
  %37 = fmul <8 x float> %17, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %38 = fadd <8 x float> %37, %30
  %39 = fsub <8 x float> %38, %30
  %40 = fsub <8 x float> %38, %39
  %41 = fsub <8 x float> %30, %40
  %42 = fsub <8 x float> %37, %39
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %43, %36
  br label %407

; <label>:45:                                     ; preds = %1
  %46 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <2 x i64> %46 to <4 x i32>
  %49 = lshr <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %50 = bitcast <2 x i64> %47 to <4 x i32>
  %51 = lshr <4 x i32> %50, <i32 23, i32 23, i32 23, i32 23>
  %52 = and <4 x i32> %49, <i32 255, i32 255, i32 255, i32 255>
  %53 = and <4 x i32> %51, <i32 255, i32 255, i32 255, i32 255>
  %54 = add nsw <4 x i32> %52, <i32 -152, i32 -152, i32 -152, i32 -152>
  %55 = add nsw <4 x i32> %53, <i32 -152, i32 -152, i32 -152, i32 -152>
  %56 = icmp ugt <4 x i32> %52, <i32 217, i32 217, i32 217, i32 217>
  %57 = icmp ugt <4 x i32> %53, <i32 217, i32 217, i32 217, i32 217>
  %58 = select <4 x i1> %56, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %59 = select <4 x i1> %57, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %60 = add <4 x i32> %58, %48
  %61 = add <4 x i32> %59, %50
  %62 = bitcast <4 x i32> %60 to <2 x i64>
  %63 = bitcast <4 x i32> %61 to <2 x i64>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = ashr <4 x i32> %54, <i32 31, i32 31, i32 31, i32 31>
  %69 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %70 = xor <4 x i32> %68, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %71 = and <4 x i32> %70, %54
  %72 = shl <4 x i32> %71, <i32 2, i32 2, i32 2, i32 2>
  %73 = xor <4 x i32> %69, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %74 = and <4 x i32> %73, %55
  %75 = shl <4 x i32> %74, <i32 2, i32 2, i32 2, i32 2>
  %76 = extractelement <4 x i32> %75, i32 3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !19
  %80 = extractelement <4 x i32> %75, i32 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !19
  %84 = extractelement <4 x i32> %75, i32 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !19
  %88 = extractelement <4 x i32> %75, i32 0
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !19
  %92 = extractelement <4 x i32> %72, i32 3
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !19
  %96 = extractelement <4 x i32> %72, i32 2
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !19
  %100 = extractelement <4 x i32> %72, i32 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !19
  %104 = extractelement <4 x i32> %72, i32 0
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %105
  %107 = load float, float* %106, align 4, !tbaa !3, !noalias !19
  %108 = insertelement <8 x float> undef, float %107, i32 0
  %109 = insertelement <8 x float> %108, float %103, i32 1
  %110 = insertelement <8 x float> %109, float %99, i32 2
  %111 = insertelement <8 x float> %110, float %95, i32 3
  %112 = insertelement <8 x float> %111, float %91, i32 4
  %113 = insertelement <8 x float> %112, float %87, i32 5
  %114 = insertelement <8 x float> %113, float %83, i32 6
  %115 = insertelement <8 x float> %114, float %79, i32 7
  %116 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %117 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %118 = shufflevector <2 x i64> %116, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %119 = shufflevector <2 x i64> %117, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %120 = shufflevector <4 x i64> %118, <4 x i64> %119, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %121 = bitcast <4 x i64> %120 to <8 x float>
  %122 = fsub <8 x float> %67, %121
  %123 = bitcast <8 x float> %115 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %126 = and <2 x i64> %124, <i64 -17587891081216, i64 -17587891081216>
  %127 = and <2 x i64> %125, <i64 -17587891081216, i64 -17587891081216>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <2 x i64> %127, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = shufflevector <4 x i64> %128, <4 x i64> %129, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = fsub <8 x float> %115, %131
  %133 = fmul <8 x float> %115, %67
  %134 = bitcast <8 x float> %133 to <4 x i64>
  %135 = xor <4 x i64> %134, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = fmul <8 x float> %121, %131
  %138 = fadd <8 x float> %137, %136
  %139 = fmul <8 x float> %122, %131
  %140 = fadd <8 x float> %139, %138
  %141 = fmul <8 x float> %132, %121
  %142 = fadd <8 x float> %141, %140
  %143 = fmul <8 x float> %122, %132
  %144 = fadd <8 x float> %143, %142
  %145 = fmul <8 x float> %133, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %146 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %145, i32 8) #8
  %147 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %133, i32 8) #8
  %148 = fmul <8 x float> %147, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %149 = fsub <8 x float> %146, %148
  %150 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %149) #8
  %151 = bitcast <8 x i32> %150 to <4 x i64>
  %152 = shufflevector <4 x i64> %151, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %153 = shufflevector <4 x i64> %151, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %154 = fmul <8 x float> %146, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %155 = fsub <8 x float> %133, %154
  %156 = fadd <8 x float> %155, %144
  %157 = fsub <8 x float> %155, %156
  %158 = fadd <8 x float> %144, %157
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !19
  %161 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %162 = load float, float* %161, align 4, !tbaa !3, !noalias !19
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !19
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !19
  %167 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %168 = load float, float* %167, align 4, !tbaa !3, !noalias !19
  %169 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %170 = load float, float* %169, align 4, !tbaa !3, !noalias !19
  %171 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %101
  %172 = load float, float* %171, align 4, !tbaa !3, !noalias !19
  %173 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %105
  %174 = load float, float* %173, align 4, !tbaa !3, !noalias !19
  %175 = insertelement <8 x float> undef, float %174, i32 0
  %176 = insertelement <8 x float> %175, float %172, i32 1
  %177 = insertelement <8 x float> %176, float %170, i32 2
  %178 = insertelement <8 x float> %177, float %168, i32 3
  %179 = insertelement <8 x float> %178, float %166, i32 4
  %180 = insertelement <8 x float> %179, float %164, i32 5
  %181 = insertelement <8 x float> %180, float %162, i32 6
  %182 = insertelement <8 x float> %181, float %160, i32 7
  %183 = bitcast <8 x float> %182 to <4 x i64>
  %184 = shufflevector <4 x i64> %183, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %185 = shufflevector <4 x i64> %183, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %186 = and <2 x i64> %184, <i64 -17587891081216, i64 -17587891081216>
  %187 = and <2 x i64> %185, <i64 -17587891081216, i64 -17587891081216>
  %188 = shufflevector <2 x i64> %186, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <2 x i64> %187, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %190 = shufflevector <4 x i64> %188, <4 x i64> %189, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %191 = bitcast <4 x i64> %190 to <8 x float>
  %192 = fsub <8 x float> %182, %191
  %193 = fmul <8 x float> %182, %67
  %194 = bitcast <8 x float> %193 to <4 x i64>
  %195 = xor <4 x i64> %194, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %196 = bitcast <4 x i64> %195 to <8 x float>
  %197 = fmul <8 x float> %121, %191
  %198 = fadd <8 x float> %197, %196
  %199 = fmul <8 x float> %122, %191
  %200 = fadd <8 x float> %199, %198
  %201 = fmul <8 x float> %192, %121
  %202 = fadd <8 x float> %201, %200
  %203 = fmul <8 x float> %122, %192
  %204 = fadd <8 x float> %203, %202
  %205 = fadd <8 x float> %156, %193
  %206 = fsub <8 x float> %205, %156
  %207 = fsub <8 x float> %205, %206
  %208 = fsub <8 x float> %156, %207
  %209 = fsub <8 x float> %193, %206
  %210 = fadd <8 x float> %209, %208
  %211 = fadd <8 x float> %158, %204
  %212 = fadd <8 x float> %210, %211
  %213 = fmul <8 x float> %205, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %214 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %213, i32 8) #8
  %215 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %205, i32 8) #8
  %216 = fmul <8 x float> %215, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %217 = fsub <8 x float> %214, %216
  %218 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %217) #8
  %219 = bitcast <8 x i32> %218 to <4 x i64>
  %220 = shufflevector <4 x i64> %219, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %221 = shufflevector <4 x i64> %219, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %222 = fmul <8 x float> %214, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %223 = fsub <8 x float> %205, %222
  %224 = bitcast <2 x i64> %152 to <4 x i32>
  %225 = bitcast <2 x i64> %220 to <4 x i32>
  %226 = add <4 x i32> %225, %224
  %227 = bitcast <2 x i64> %153 to <4 x i32>
  %228 = bitcast <2 x i64> %221 to <4 x i32>
  %229 = add <4 x i32> %228, %227
  %230 = fadd <8 x float> %223, %212
  %231 = fsub <8 x float> %223, %230
  %232 = fadd <8 x float> %212, %231
  %233 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %234 = load float, float* %233, align 4, !tbaa !3, !noalias !19
  %235 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %236 = load float, float* %235, align 4, !tbaa !3, !noalias !19
  %237 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %238 = load float, float* %237, align 4, !tbaa !3, !noalias !19
  %239 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %240 = load float, float* %239, align 4, !tbaa !3, !noalias !19
  %241 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %242 = load float, float* %241, align 4, !tbaa !3, !noalias !19
  %243 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %244 = load float, float* %243, align 4, !tbaa !3, !noalias !19
  %245 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %101
  %246 = load float, float* %245, align 4, !tbaa !3, !noalias !19
  %247 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %105
  %248 = load float, float* %247, align 4, !tbaa !3, !noalias !19
  %249 = insertelement <8 x float> undef, float %248, i32 0
  %250 = insertelement <8 x float> %249, float %246, i32 1
  %251 = insertelement <8 x float> %250, float %244, i32 2
  %252 = insertelement <8 x float> %251, float %242, i32 3
  %253 = insertelement <8 x float> %252, float %240, i32 4
  %254 = insertelement <8 x float> %253, float %238, i32 5
  %255 = insertelement <8 x float> %254, float %236, i32 6
  %256 = insertelement <8 x float> %255, float %234, i32 7
  %257 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %258 = load float, float* %257, align 4, !tbaa !3, !noalias !19
  %259 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %260 = load float, float* %259, align 4, !tbaa !3, !noalias !19
  %261 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %262 = load float, float* %261, align 4, !tbaa !3, !noalias !19
  %263 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %264 = load float, float* %263, align 4, !tbaa !3, !noalias !19
  %265 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %266 = load float, float* %265, align 4, !tbaa !3, !noalias !19
  %267 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %268 = load float, float* %267, align 4, !tbaa !3, !noalias !19
  %269 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %101
  %270 = load float, float* %269, align 4, !tbaa !3, !noalias !19
  %271 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %105
  %272 = load float, float* %271, align 4, !tbaa !3, !noalias !19
  %273 = insertelement <8 x float> undef, float %272, i32 0
  %274 = insertelement <8 x float> %273, float %270, i32 1
  %275 = insertelement <8 x float> %274, float %268, i32 2
  %276 = insertelement <8 x float> %275, float %266, i32 3
  %277 = insertelement <8 x float> %276, float %264, i32 4
  %278 = insertelement <8 x float> %277, float %262, i32 5
  %279 = insertelement <8 x float> %278, float %260, i32 6
  %280 = insertelement <8 x float> %279, float %258, i32 7
  %281 = bitcast <8 x float> %256 to <4 x i64>
  %282 = shufflevector <4 x i64> %281, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %283 = shufflevector <4 x i64> %281, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %284 = and <2 x i64> %282, <i64 -17587891081216, i64 -17587891081216>
  %285 = and <2 x i64> %283, <i64 -17587891081216, i64 -17587891081216>
  %286 = shufflevector <2 x i64> %284, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %287 = shufflevector <2 x i64> %285, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <4 x i64> %286, <4 x i64> %287, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %289 = bitcast <4 x i64> %288 to <8 x float>
  %290 = fsub <8 x float> %256, %289
  %291 = fmul <8 x float> %256, %67
  %292 = bitcast <8 x float> %291 to <4 x i64>
  %293 = xor <4 x i64> %292, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %294 = bitcast <4 x i64> %293 to <8 x float>
  %295 = fmul <8 x float> %121, %289
  %296 = fadd <8 x float> %295, %294
  %297 = fmul <8 x float> %290, %121
  %298 = fadd <8 x float> %297, %296
  %299 = fmul <8 x float> %122, %289
  %300 = fadd <8 x float> %299, %298
  %301 = fmul <8 x float> %122, %290
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %280, %67
  %304 = fadd <8 x float> %303, %302
  %305 = fadd <8 x float> %291, %230
  %306 = fsub <8 x float> %305, %230
  %307 = fsub <8 x float> %305, %306
  %308 = fsub <8 x float> %230, %307
  %309 = fsub <8 x float> %291, %306
  %310 = fadd <8 x float> %309, %308
  %311 = fadd <8 x float> %232, %304
  %312 = fadd <8 x float> %310, %311
  %313 = fadd <8 x float> %305, %312
  %314 = fsub <8 x float> %305, %313
  %315 = fadd <8 x float> %312, %314
  %316 = bitcast <8 x float> %313 to <4 x i64>
  %317 = shufflevector <4 x i64> %316, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %318 = shufflevector <4 x i64> %316, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %319 = and <2 x i64> %317, <i64 -17587891081216, i64 -17587891081216>
  %320 = and <2 x i64> %318, <i64 -17587891081216, i64 -17587891081216>
  %321 = shufflevector <2 x i64> %319, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %322 = shufflevector <2 x i64> %320, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %323 = shufflevector <4 x i64> %321, <4 x i64> %322, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %324 = bitcast <4 x i64> %323 to <8 x float>
  %325 = fsub <8 x float> %313, %324
  %326 = fmul <8 x float> %313, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %327 = bitcast <8 x float> %326 to <4 x i64>
  %328 = xor <4 x i64> %327, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %329 = bitcast <4 x i64> %328 to <8 x float>
  %330 = fmul <8 x float> %324, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %331 = fadd <8 x float> %330, %329
  %332 = fmul <8 x float> %325, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %333 = fadd <8 x float> %332, %331
  %334 = fmul <8 x float> %324, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %335 = fadd <8 x float> %334, %333
  %336 = fmul <8 x float> %325, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %337 = fadd <8 x float> %336, %335
  %338 = fmul <8 x float> %313, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %339 = fadd <8 x float> %338, %337
  %340 = fmul <8 x float> %315, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %341 = fadd <8 x float> %340, %339
  %342 = and <4 x i64> %66, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %343 = bitcast <4 x i64> %342 to <8 x float>
  %344 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %343, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %345 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %326, <8 x float> %67, <8 x float> %344) #8
  %346 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %341, <8 x float> zeroinitializer, <8 x float> %344) #8
  %347 = shl <4 x i32> %226, <i32 1, i32 1, i32 1, i32 1>
  %348 = and <4 x i32> %347, <i32 6, i32 6, i32 6, i32 6>
  %349 = shl <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %350 = and <4 x i32> %349, <i32 6, i32 6, i32 6, i32 6>
  %351 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %345, <8 x float> zeroinitializer, i8 30) #8
  %352 = bitcast <8 x float> %351 to <4 x i64>
  %353 = shufflevector <4 x i64> %352, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %354 = shufflevector <4 x i64> %352, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %355 = bitcast <2 x i64> %353 to <16 x i8>
  %356 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %355) #8
  %357 = bitcast <2 x i64> %354 to <16 x i8>
  %358 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <16 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <16 x i8> %357) #8
  %359 = bitcast <16 x i8> %356 to <4 x i32>
  %360 = add <4 x i32> %348, %359
  %361 = bitcast <16 x i8> %358 to <4 x i32>
  %362 = add <4 x i32> %350, %361
  %363 = ashr <4 x i32> %360, <i32 1, i32 1, i32 1, i32 1>
  %364 = ashr <4 x i32> %362, <i32 1, i32 1, i32 1, i32 1>
  %365 = bitcast <4 x i32> %363 to <2 x i64>
  %366 = bitcast <4 x i32> %364 to <2 x i64>
  %367 = and <4 x i32> %226, <i32 1, i32 1, i32 1, i32 1>
  %368 = icmp eq <4 x i32> %367, zeroinitializer
  %369 = sext <4 x i1> %368 to <4 x i32>
  %370 = bitcast <4 x i32> %369 to <2 x i64>
  %371 = and <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %372 = icmp eq <4 x i32> %371, zeroinitializer
  %373 = sext <4 x i1> %372 to <4 x i32>
  %374 = bitcast <4 x i32> %373 to <2 x i64>
  %375 = shufflevector <2 x i64> %370, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %376 = shufflevector <2 x i64> %374, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %377 = shufflevector <4 x i64> %375, <4 x i64> %376, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %378 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %351) #8
  %379 = bitcast <8 x float> %378 to <4 x i64>
  %380 = and <4 x i64> %379, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %381 = xor <4 x i64> %380, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %382 = bitcast <4 x i64> %381 to <8 x float>
  %383 = or <4 x i64> %380, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %384 = bitcast <4 x i64> %383 to <8 x float>
  %385 = fadd <8 x float> %345, %382
  %386 = fsub <8 x float> %385, %345
  %387 = fsub <8 x float> %385, %386
  %388 = fsub <8 x float> %345, %387
  %389 = fsub <8 x float> %382, %386
  %390 = fadd <8 x float> %389, %388
  %391 = fadd <8 x float> %346, %384
  %392 = fadd <8 x float> %391, %390
  %393 = bitcast <4 x i64> %377 to <8 x float>
  %394 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %345, <8 x float> %385, <8 x float> %393) #8
  %395 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %346, <8 x float> %392, <8 x float> %393) #8
  %396 = fadd <8 x float> %394, %395
  %397 = fsub <8 x float> %394, %396
  %398 = fadd <8 x float> %395, %397
  %399 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %400 = fcmp uno <8 x float> %0, zeroinitializer
  %401 = or <8 x i1> %399, %400
  %402 = sext <8 x i1> %401 to <8 x i32>
  %403 = bitcast <8 x i32> %402 to <4 x i64>
  %404 = bitcast <8 x float> %396 to <4 x i64>
  %405 = or <4 x i64> %404, %403
  %406 = bitcast <4 x i64> %405 to <8 x float>
  br label %407

; <label>:407:                                    ; preds = %45, %12
  %408 = phi <8 x float> [ %406, %45 ], [ %38, %12 ]
  %409 = phi <8 x float> [ %398, %45 ], [ %44, %12 ]
  %410 = phi <2 x i64> [ %365, %45 ], [ %20, %12 ]
  %411 = phi <2 x i64> [ %366, %45 ], [ %21, %12 ]
  %412 = bitcast <8 x float> %408 to <4 x i64>
  %413 = shufflevector <4 x i64> %412, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %414 = shufflevector <4 x i64> %412, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %415 = and <2 x i64> %413, <i64 -17587891081216, i64 -17587891081216>
  %416 = and <2 x i64> %414, <i64 -17587891081216, i64 -17587891081216>
  %417 = shufflevector <2 x i64> %415, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %418 = shufflevector <2 x i64> %416, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %419 = shufflevector <4 x i64> %417, <4 x i64> %418, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %420 = bitcast <4 x i64> %419 to <8 x float>
  %421 = fsub <8 x float> %408, %420
  %422 = fmul <8 x float> %408, %408
  %423 = bitcast <8 x float> %422 to <4 x i64>
  %424 = xor <4 x i64> %423, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %425 = bitcast <4 x i64> %424 to <8 x float>
  %426 = fmul <8 x float> %420, %420
  %427 = fadd <8 x float> %426, %425
  %428 = fadd <8 x float> %420, %420
  %429 = fmul <8 x float> %428, %421
  %430 = fadd <8 x float> %429, %427
  %431 = fmul <8 x float> %421, %421
  %432 = fadd <8 x float> %431, %430
  %433 = fadd <8 x float> %409, %409
  %434 = fmul <8 x float> %408, %433
  %435 = fadd <8 x float> %434, %432
  %436 = fmul <8 x float> %422, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %437 = fadd <8 x float> %436, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %438 = fmul <8 x float> %422, %437
  %439 = fadd <8 x float> %438, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %440 = fmul <8 x float> %422, %439
  %441 = fadd <8 x float> %440, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %442 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %441
  %443 = fadd <8 x float> %440, %442
  %444 = bitcast <8 x float> %441 to <4 x i64>
  %445 = shufflevector <4 x i64> %444, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %446 = shufflevector <4 x i64> %444, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %447 = and <2 x i64> %445, <i64 -17587891081216, i64 -17587891081216>
  %448 = and <2 x i64> %446, <i64 -17587891081216, i64 -17587891081216>
  %449 = shufflevector <2 x i64> %447, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %450 = shufflevector <2 x i64> %448, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %451 = shufflevector <4 x i64> %449, <4 x i64> %450, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %452 = bitcast <4 x i64> %451 to <8 x float>
  %453 = fsub <8 x float> %441, %452
  %454 = shufflevector <4 x i64> %423, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %455 = shufflevector <4 x i64> %423, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %456 = and <2 x i64> %454, <i64 -17587891081216, i64 -17587891081216>
  %457 = and <2 x i64> %455, <i64 -17587891081216, i64 -17587891081216>
  %458 = shufflevector <2 x i64> %456, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %459 = shufflevector <2 x i64> %457, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %460 = shufflevector <4 x i64> %458, <4 x i64> %459, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %461 = bitcast <4 x i64> %460 to <8 x float>
  %462 = fsub <8 x float> %422, %461
  %463 = fmul <8 x float> %422, %441
  %464 = bitcast <8 x float> %463 to <4 x i64>
  %465 = xor <4 x i64> %464, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %466 = bitcast <4 x i64> %465 to <8 x float>
  %467 = fmul <8 x float> %461, %452
  %468 = fadd <8 x float> %467, %466
  %469 = fmul <8 x float> %453, %461
  %470 = fadd <8 x float> %469, %468
  %471 = fmul <8 x float> %462, %452
  %472 = fadd <8 x float> %471, %470
  %473 = fmul <8 x float> %462, %453
  %474 = fadd <8 x float> %473, %472
  %475 = fmul <8 x float> %441, %435
  %476 = fadd <8 x float> %475, %474
  %477 = fmul <8 x float> %422, %443
  %478 = fadd <8 x float> %477, %476
  %479 = fadd <8 x float> %463, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %480 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %479
  %481 = fadd <8 x float> %463, %480
  %482 = fadd <8 x float> %481, %478
  %483 = bitcast <8 x float> %479 to <4 x i64>
  %484 = shufflevector <4 x i64> %483, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %485 = shufflevector <4 x i64> %483, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %486 = and <2 x i64> %484, <i64 -17587891081216, i64 -17587891081216>
  %487 = and <2 x i64> %485, <i64 -17587891081216, i64 -17587891081216>
  %488 = shufflevector <2 x i64> %486, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %489 = shufflevector <2 x i64> %487, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %490 = shufflevector <4 x i64> %488, <4 x i64> %489, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %491 = bitcast <4 x i64> %490 to <8 x float>
  %492 = fsub <8 x float> %479, %491
  %493 = fmul <8 x float> %409, %491
  %494 = fmul <8 x float> %482, %420
  %495 = fmul <8 x float> %421, %492
  %496 = fmul <8 x float> %492, %420
  %497 = fmul <8 x float> %421, %491
  %498 = fmul <8 x float> %420, %491
  %499 = fadd <8 x float> %493, %494
  %500 = fadd <8 x float> %495, %499
  %501 = fadd <8 x float> %496, %500
  %502 = fadd <8 x float> %497, %501
  %503 = fadd <8 x float> %498, %502
  %504 = bitcast <2 x i64> %410 to <4 x i32>
  %505 = and <4 x i32> %504, <i32 2, i32 2, i32 2, i32 2>
  %506 = icmp eq <4 x i32> %505, zeroinitializer
  %507 = sext <4 x i1> %506 to <4 x i32>
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = bitcast <2 x i64> %411 to <4 x i32>
  %510 = and <4 x i32> %509, <i32 2, i32 2, i32 2, i32 2>
  %511 = icmp eq <4 x i32> %510, zeroinitializer
  %512 = sext <4 x i1> %511 to <4 x i32>
  %513 = bitcast <4 x i32> %512 to <2 x i64>
  %514 = shufflevector <2 x i64> %508, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %515 = shufflevector <2 x i64> %513, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %516 = shufflevector <4 x i64> %514, <4 x i64> %515, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %517 = and <4 x i64> %516, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %518 = bitcast <8 x float> %503 to <4 x i64>
  %519 = xor <4 x i64> %517, %518
  %520 = bitcast <4 x i64> %519 to <8 x float>
  ret <8 x float> %520
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastsinf8_u3500avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fmul <8 x float> %3, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %9, %9
  %11 = fmul <8 x float> %10, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %12 = fadd <8 x float> %11, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %13 = fmul <8 x float> %10, %12
  %14 = fadd <8 x float> %13, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %15 = fmul <8 x float> %9, %10
  %16 = fmul <8 x float> %15, %14
  %17 = fadd <8 x float> %9, %16
  %18 = bitcast <2 x i64> %6 to <4 x i32>
  %19 = and <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = icmp ne <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = bitcast <2 x i64> %7 to <4 x i32>
  %24 = and <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  %25 = icmp ne <4 x i32> %24, zeroinitializer
  %26 = sext <4 x i1> %25 to <4 x i32>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <2 x i64> %27, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %30 = shufflevector <4 x i64> %28, <4 x i64> %29, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %31 = and <4 x i64> %30, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %32 = bitcast <8 x float> %17 to <4 x i64>
  %33 = xor <4 x i64> %31, %32
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = bitcast <8 x float> %0 to <4 x i64>
  %36 = and <4 x i64> %35, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %37 = bitcast <4 x i64> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %37, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #8
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = shufflevector <4 x i64> %39, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %41 = shufflevector <4 x i64> %39, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %42 = and <2 x i64> %41, %40
  %43 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %42, <2 x i64> <i64 -1, i64 -1>) #8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %48, !prof !2

; <label>:45:                                     ; preds = %1
  %46 = tail call <8 x float> @Sleef_sinf8_u35avx(<8 x float> %0)
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %34, <8 x float> %38) #8
  br label %48

; <label>:48:                                     ; preds = %1, %45
  %49 = phi <8 x float> [ %47, %45 ], [ %34, %1 ]
  ret <8 x float> %49
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastcosf8_u3500avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = fadd <8 x float> %2, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %4 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %3, i32 8) #8
  %5 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = fadd <8 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %10 = fmul <8 x float> %4, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %11 = fadd <8 x float> %9, %10
  %12 = fmul <8 x float> %11, %11
  %13 = fmul <8 x float> %12, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %14 = fadd <8 x float> %13, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %15 = fmul <8 x float> %12, %14
  %16 = fadd <8 x float> %15, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %17 = fmul <8 x float> %11, %12
  %18 = fmul <8 x float> %17, %16
  %19 = fadd <8 x float> %11, %18
  %20 = bitcast <2 x i64> %7 to <4 x i32>
  %21 = and <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = icmp eq <4 x i32> %21, zeroinitializer
  %23 = sext <4 x i1> %22 to <4 x i32>
  %24 = bitcast <4 x i32> %23 to <2 x i64>
  %25 = bitcast <2 x i64> %8 to <4 x i32>
  %26 = and <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  %27 = icmp eq <4 x i32> %26, zeroinitializer
  %28 = sext <4 x i1> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = and <4 x i64> %32, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %34 = bitcast <8 x float> %19 to <4 x i64>
  %35 = xor <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <8 x float> %0 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %39, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #8
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = and <2 x i64> %43, %42
  %45 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %44, <2 x i64> <i64 -1, i64 -1>) #8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50, !prof !2

; <label>:47:                                     ; preds = %1
  %48 = tail call <8 x float> @Sleef_cosf8_u35avx(<8 x float> %0)
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %48, <8 x float> %36, <8 x float> %40) #8
  br label %50

; <label>:50:                                     ; preds = %1, %47
  %51 = phi <8 x float> [ %49, %47 ], [ %36, %1 ]
  ret <8 x float> %51
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u35avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #8
  %20 = fmul <8 x float> %19, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %21 = fadd <8 x float> %20, %1
  %22 = fmul <8 x float> %19, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %23 = fadd <8 x float> %22, %21
  %24 = fmul <8 x float> %19, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %25 = fadd <8 x float> %24, %23
  br label %362

; <label>:26:                                     ; preds = %2
  %27 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #8
  %28 = bitcast <8 x float> %27 to <4 x i64>
  %29 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = and <2 x i64> %30, %29
  %32 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %31, <2 x i64> <i64 -1, i64 -1>) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %49, label %34, !prof !2

; <label>:34:                                     ; preds = %26
  %35 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %36 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %35) #8
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %36) #8
  %41 = fmul <8 x float> %40, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %42 = fadd <8 x float> %41, %1
  %43 = fmul <8 x float> %40, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %44 = fadd <8 x float> %43, %42
  %45 = fmul <8 x float> %40, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %46 = fadd <8 x float> %45, %44
  %47 = fmul <8 x float> %40, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %48 = fadd <8 x float> %47, %46
  br label %362

; <label>:49:                                     ; preds = %26
  %50 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %51 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %52 = bitcast <2 x i64> %50 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 23, i32 23, i32 23, i32 23>
  %54 = bitcast <2 x i64> %51 to <4 x i32>
  %55 = lshr <4 x i32> %54, <i32 23, i32 23, i32 23, i32 23>
  %56 = and <4 x i32> %53, <i32 255, i32 255, i32 255, i32 255>
  %57 = and <4 x i32> %55, <i32 255, i32 255, i32 255, i32 255>
  %58 = add nsw <4 x i32> %56, <i32 -152, i32 -152, i32 -152, i32 -152>
  %59 = add nsw <4 x i32> %57, <i32 -152, i32 -152, i32 -152, i32 -152>
  %60 = icmp ugt <4 x i32> %56, <i32 217, i32 217, i32 217, i32 217>
  %61 = icmp ugt <4 x i32> %57, <i32 217, i32 217, i32 217, i32 217>
  %62 = select <4 x i1> %60, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %63 = select <4 x i1> %61, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %64 = add <4 x i32> %62, %52
  %65 = add <4 x i32> %63, %54
  %66 = bitcast <4 x i32> %64 to <2 x i64>
  %67 = bitcast <4 x i32> %65 to <2 x i64>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <2 x i64> %67, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = shufflevector <4 x i64> %68, <4 x i64> %69, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = ashr <4 x i32> %58, <i32 31, i32 31, i32 31, i32 31>
  %73 = ashr <4 x i32> %59, <i32 31, i32 31, i32 31, i32 31>
  %74 = xor <4 x i32> %72, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %75 = and <4 x i32> %74, %58
  %76 = shl <4 x i32> %75, <i32 2, i32 2, i32 2, i32 2>
  %77 = xor <4 x i32> %73, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %78 = and <4 x i32> %77, %59
  %79 = shl <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %80 = extractelement <4 x i32> %79, i32 3
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !22
  %84 = extractelement <4 x i32> %79, i32 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !22
  %88 = extractelement <4 x i32> %79, i32 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !22
  %92 = extractelement <4 x i32> %79, i32 0
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !22
  %96 = extractelement <4 x i32> %76, i32 3
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !22
  %100 = extractelement <4 x i32> %76, i32 2
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3, !noalias !22
  %104 = extractelement <4 x i32> %76, i32 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %105
  %107 = load float, float* %106, align 4, !tbaa !3, !noalias !22
  %108 = extractelement <4 x i32> %76, i32 0
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !3, !noalias !22
  %112 = insertelement <8 x float> undef, float %111, i32 0
  %113 = insertelement <8 x float> %112, float %107, i32 1
  %114 = insertelement <8 x float> %113, float %103, i32 2
  %115 = insertelement <8 x float> %114, float %99, i32 3
  %116 = insertelement <8 x float> %115, float %95, i32 4
  %117 = insertelement <8 x float> %116, float %91, i32 5
  %118 = insertelement <8 x float> %117, float %87, i32 6
  %119 = insertelement <8 x float> %118, float %83, i32 7
  %120 = and <2 x i64> %66, <i64 -17587891081216, i64 -17587891081216>
  %121 = and <2 x i64> %67, <i64 -17587891081216, i64 -17587891081216>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <2 x i64> %121, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %124 = shufflevector <4 x i64> %122, <4 x i64> %123, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %125 = bitcast <4 x i64> %124 to <8 x float>
  %126 = fsub <8 x float> %71, %125
  %127 = bitcast <8 x float> %119 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = and <2 x i64> %129, <i64 -17587891081216, i64 -17587891081216>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <2 x i64> %131, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = shufflevector <4 x i64> %132, <4 x i64> %133, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = fsub <8 x float> %119, %135
  %137 = fmul <8 x float> %119, %71
  %138 = bitcast <8 x float> %137 to <4 x i64>
  %139 = xor <4 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fmul <8 x float> %125, %135
  %142 = fadd <8 x float> %141, %140
  %143 = fmul <8 x float> %126, %135
  %144 = fadd <8 x float> %143, %142
  %145 = fmul <8 x float> %136, %125
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %126, %136
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %137, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %150 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %149, i32 8) #8
  %151 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %137, i32 8) #8
  %152 = fmul <8 x float> %151, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %153 = fsub <8 x float> %150, %152
  %154 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %153) #8
  %155 = bitcast <8 x i32> %154 to <4 x i64>
  %156 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %157 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %158 = fmul <8 x float> %150, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %159 = fsub <8 x float> %137, %158
  %160 = fadd <8 x float> %159, %148
  %161 = fsub <8 x float> %159, %160
  %162 = fadd <8 x float> %148, %161
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !22
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !22
  %167 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %168 = load float, float* %167, align 4, !tbaa !3, !noalias !22
  %169 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %170 = load float, float* %169, align 4, !tbaa !3, !noalias !22
  %171 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %172 = load float, float* %171, align 4, !tbaa !3, !noalias !22
  %173 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %101
  %174 = load float, float* %173, align 4, !tbaa !3, !noalias !22
  %175 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %105
  %176 = load float, float* %175, align 4, !tbaa !3, !noalias !22
  %177 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %109
  %178 = load float, float* %177, align 4, !tbaa !3, !noalias !22
  %179 = insertelement <8 x float> undef, float %178, i32 0
  %180 = insertelement <8 x float> %179, float %176, i32 1
  %181 = insertelement <8 x float> %180, float %174, i32 2
  %182 = insertelement <8 x float> %181, float %172, i32 3
  %183 = insertelement <8 x float> %182, float %170, i32 4
  %184 = insertelement <8 x float> %183, float %168, i32 5
  %185 = insertelement <8 x float> %184, float %166, i32 6
  %186 = insertelement <8 x float> %185, float %164, i32 7
  %187 = bitcast <8 x float> %186 to <4 x i64>
  %188 = shufflevector <4 x i64> %187, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = shufflevector <4 x i64> %187, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %190 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %191 = and <2 x i64> %189, <i64 -17587891081216, i64 -17587891081216>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fsub <8 x float> %186, %195
  %197 = fmul <8 x float> %186, %71
  %198 = bitcast <8 x float> %197 to <4 x i64>
  %199 = xor <4 x i64> %198, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %200 = bitcast <4 x i64> %199 to <8 x float>
  %201 = fmul <8 x float> %125, %195
  %202 = fadd <8 x float> %201, %200
  %203 = fmul <8 x float> %126, %195
  %204 = fadd <8 x float> %203, %202
  %205 = fmul <8 x float> %196, %125
  %206 = fadd <8 x float> %205, %204
  %207 = fmul <8 x float> %126, %196
  %208 = fadd <8 x float> %207, %206
  %209 = fadd <8 x float> %160, %197
  %210 = fsub <8 x float> %209, %160
  %211 = fsub <8 x float> %209, %210
  %212 = fsub <8 x float> %160, %211
  %213 = fsub <8 x float> %197, %210
  %214 = fadd <8 x float> %213, %212
  %215 = fadd <8 x float> %162, %208
  %216 = fadd <8 x float> %214, %215
  %217 = fmul <8 x float> %209, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %218 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %217, i32 8) #8
  %219 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %209, i32 8) #8
  %220 = fmul <8 x float> %219, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %221 = fsub <8 x float> %218, %220
  %222 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %221) #8
  %223 = bitcast <8 x i32> %222 to <4 x i64>
  %224 = shufflevector <4 x i64> %223, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %225 = shufflevector <4 x i64> %223, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %226 = fmul <8 x float> %218, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %227 = fsub <8 x float> %209, %226
  %228 = bitcast <2 x i64> %156 to <4 x i32>
  %229 = bitcast <2 x i64> %224 to <4 x i32>
  %230 = add <4 x i32> %229, %228
  %231 = bitcast <2 x i64> %157 to <4 x i32>
  %232 = bitcast <2 x i64> %225 to <4 x i32>
  %233 = add <4 x i32> %232, %231
  %234 = fadd <8 x float> %227, %216
  %235 = fsub <8 x float> %227, %234
  %236 = fadd <8 x float> %216, %235
  %237 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %238 = load float, float* %237, align 4, !tbaa !3, !noalias !22
  %239 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %240 = load float, float* %239, align 4, !tbaa !3, !noalias !22
  %241 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %242 = load float, float* %241, align 4, !tbaa !3, !noalias !22
  %243 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %244 = load float, float* %243, align 4, !tbaa !3, !noalias !22
  %245 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %246 = load float, float* %245, align 4, !tbaa !3, !noalias !22
  %247 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %101
  %248 = load float, float* %247, align 4, !tbaa !3, !noalias !22
  %249 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %105
  %250 = load float, float* %249, align 4, !tbaa !3, !noalias !22
  %251 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %109
  %252 = load float, float* %251, align 4, !tbaa !3, !noalias !22
  %253 = insertelement <8 x float> undef, float %252, i32 0
  %254 = insertelement <8 x float> %253, float %250, i32 1
  %255 = insertelement <8 x float> %254, float %248, i32 2
  %256 = insertelement <8 x float> %255, float %246, i32 3
  %257 = insertelement <8 x float> %256, float %244, i32 4
  %258 = insertelement <8 x float> %257, float %242, i32 5
  %259 = insertelement <8 x float> %258, float %240, i32 6
  %260 = insertelement <8 x float> %259, float %238, i32 7
  %261 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %262 = load float, float* %261, align 4, !tbaa !3, !noalias !22
  %263 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %264 = load float, float* %263, align 4, !tbaa !3, !noalias !22
  %265 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %266 = load float, float* %265, align 4, !tbaa !3, !noalias !22
  %267 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %268 = load float, float* %267, align 4, !tbaa !3, !noalias !22
  %269 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %270 = load float, float* %269, align 4, !tbaa !3, !noalias !22
  %271 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %101
  %272 = load float, float* %271, align 4, !tbaa !3, !noalias !22
  %273 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %105
  %274 = load float, float* %273, align 4, !tbaa !3, !noalias !22
  %275 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %109
  %276 = load float, float* %275, align 4, !tbaa !3, !noalias !22
  %277 = insertelement <8 x float> undef, float %276, i32 0
  %278 = insertelement <8 x float> %277, float %274, i32 1
  %279 = insertelement <8 x float> %278, float %272, i32 2
  %280 = insertelement <8 x float> %279, float %270, i32 3
  %281 = insertelement <8 x float> %280, float %268, i32 4
  %282 = insertelement <8 x float> %281, float %266, i32 5
  %283 = insertelement <8 x float> %282, float %264, i32 6
  %284 = insertelement <8 x float> %283, float %262, i32 7
  %285 = bitcast <8 x float> %260 to <4 x i64>
  %286 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %287 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %288 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %289 = and <2 x i64> %287, <i64 -17587891081216, i64 -17587891081216>
  %290 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <2 x i64> %289, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %292 = shufflevector <4 x i64> %290, <4 x i64> %291, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %293 = bitcast <4 x i64> %292 to <8 x float>
  %294 = fsub <8 x float> %260, %293
  %295 = fmul <8 x float> %260, %71
  %296 = bitcast <8 x float> %295 to <4 x i64>
  %297 = xor <4 x i64> %296, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %298 = bitcast <4 x i64> %297 to <8 x float>
  %299 = fmul <8 x float> %125, %293
  %300 = fadd <8 x float> %299, %298
  %301 = fmul <8 x float> %294, %125
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %126, %293
  %304 = fadd <8 x float> %303, %302
  %305 = fmul <8 x float> %126, %294
  %306 = fadd <8 x float> %305, %304
  %307 = fmul <8 x float> %284, %71
  %308 = fadd <8 x float> %307, %306
  %309 = fadd <8 x float> %295, %234
  %310 = fsub <8 x float> %309, %234
  %311 = fsub <8 x float> %309, %310
  %312 = fsub <8 x float> %234, %311
  %313 = fsub <8 x float> %295, %310
  %314 = fadd <8 x float> %313, %312
  %315 = fadd <8 x float> %236, %308
  %316 = fadd <8 x float> %314, %315
  %317 = fadd <8 x float> %309, %316
  %318 = fsub <8 x float> %309, %317
  %319 = fadd <8 x float> %316, %318
  %320 = bitcast <8 x float> %317 to <4 x i64>
  %321 = shufflevector <4 x i64> %320, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %322 = shufflevector <4 x i64> %320, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %323 = and <2 x i64> %321, <i64 -17587891081216, i64 -17587891081216>
  %324 = and <2 x i64> %322, <i64 -17587891081216, i64 -17587891081216>
  %325 = shufflevector <2 x i64> %323, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %326 = shufflevector <2 x i64> %324, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %327 = shufflevector <4 x i64> %325, <4 x i64> %326, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %328 = bitcast <4 x i64> %327 to <8 x float>
  %329 = fsub <8 x float> %317, %328
  %330 = fmul <8 x float> %317, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %331 = bitcast <8 x float> %330 to <4 x i64>
  %332 = xor <4 x i64> %331, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %333 = bitcast <4 x i64> %332 to <8 x float>
  %334 = fmul <8 x float> %328, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %335 = fadd <8 x float> %334, %333
  %336 = fmul <8 x float> %329, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %337 = fadd <8 x float> %336, %335
  %338 = fmul <8 x float> %328, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %339 = fadd <8 x float> %338, %337
  %340 = fmul <8 x float> %329, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %341 = fadd <8 x float> %340, %339
  %342 = fmul <8 x float> %317, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %343 = fadd <8 x float> %342, %341
  %344 = fmul <8 x float> %319, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %345 = fadd <8 x float> %344, %343
  %346 = and <4 x i64> %70, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %347 = bitcast <4 x i64> %346 to <8 x float>
  %348 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %347, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %349 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %330, <8 x float> %71, <8 x float> %348) #8
  %350 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %345, <8 x float> zeroinitializer, <8 x float> %348) #8
  %351 = bitcast <4 x i32> %230 to <2 x i64>
  %352 = bitcast <4 x i32> %233 to <2 x i64>
  %353 = fadd <8 x float> %349, %350
  %354 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %355 = fcmp uno <8 x float> %1, zeroinitializer
  %356 = or <8 x i1> %354, %355
  %357 = sext <8 x i1> %356 to <8 x i32>
  %358 = bitcast <8 x i32> %357 to <4 x i64>
  %359 = bitcast <8 x float> %353 to <4 x i64>
  %360 = or <4 x i64> %359, %358
  %361 = bitcast <4 x i64> %360 to <8 x float>
  br label %362

; <label>:362:                                    ; preds = %34, %49, %13
  %363 = phi <2 x i64> [ %351, %49 ], [ %38, %34 ], [ %17, %13 ]
  %364 = phi <2 x i64> [ %352, %49 ], [ %39, %34 ], [ %18, %13 ]
  %365 = phi <8 x float> [ %361, %49 ], [ %48, %34 ], [ %25, %13 ]
  %366 = fmul <8 x float> %365, %365
  %367 = fmul <8 x float> %366, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %368 = fadd <8 x float> %367, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %369 = fmul <8 x float> %366, %368
  %370 = fadd <8 x float> %369, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %371 = fmul <8 x float> %366, %370
  %372 = fmul <8 x float> %365, %371
  %373 = fadd <8 x float> %365, %372
  %374 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %375 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %376 = bitcast <2 x i64> %374 to <4 x i32>
  %377 = icmp eq <4 x i32> %376, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %378 = sext <4 x i1> %377 to <4 x i32>
  %379 = bitcast <4 x i32> %378 to <2 x i64>
  %380 = bitcast <2 x i64> %375 to <4 x i32>
  %381 = icmp eq <4 x i32> %380, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %382 = sext <4 x i1> %381 to <4 x i32>
  %383 = bitcast <4 x i32> %382 to <2 x i64>
  %384 = shufflevector <2 x i64> %379, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %385 = shufflevector <2 x i64> %383, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %386 = shufflevector <4 x i64> %384, <4 x i64> %385, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %387 = bitcast <4 x i64> %386 to <8 x float>
  %388 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %373, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %387) #8
  %389 = fmul <8 x float> %366, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %390 = fadd <8 x float> %389, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %391 = fmul <8 x float> %366, %390
  %392 = fadd <8 x float> %391, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %393 = fmul <8 x float> %366, %392
  %394 = fadd <8 x float> %393, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %395 = fmul <8 x float> %366, %394
  %396 = fadd <8 x float> %395, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %397 = fmul <8 x float> %366, %396
  %398 = fadd <8 x float> %397, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %399 = bitcast <2 x i64> %363 to <4 x i32>
  %400 = and <4 x i32> %399, <i32 1, i32 1, i32 1, i32 1>
  %401 = icmp eq <4 x i32> %400, zeroinitializer
  %402 = sext <4 x i1> %401 to <4 x i32>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = bitcast <2 x i64> %364 to <4 x i32>
  %405 = and <4 x i32> %404, <i32 1, i32 1, i32 1, i32 1>
  %406 = icmp eq <4 x i32> %405, zeroinitializer
  %407 = sext <4 x i1> %406 to <4 x i32>
  %408 = bitcast <4 x i32> %407 to <2 x i64>
  %409 = shufflevector <2 x i64> %403, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %410 = shufflevector <2 x i64> %408, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %411 = shufflevector <4 x i64> %409, <4 x i64> %410, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %412 = bitcast <4 x i64> %411 to <8 x float>
  %413 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %398, <8 x float> %388, <8 x float> %412) #8
  %414 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %388, <8 x float> %398, <8 x float> %412) #8
  %415 = and <4 x i32> %399, <i32 2, i32 2, i32 2, i32 2>
  %416 = icmp ne <4 x i32> %415, zeroinitializer
  %417 = sext <4 x i1> %416 to <4 x i32>
  %418 = bitcast <4 x i32> %417 to <2 x i64>
  %419 = and <4 x i32> %404, <i32 2, i32 2, i32 2, i32 2>
  %420 = icmp ne <4 x i32> %419, zeroinitializer
  %421 = sext <4 x i1> %420 to <4 x i32>
  %422 = bitcast <4 x i32> %421 to <2 x i64>
  %423 = shufflevector <2 x i64> %418, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %424 = shufflevector <2 x i64> %422, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %425 = shufflevector <4 x i64> %423, <4 x i64> %424, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %426 = and <4 x i64> %425, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %427 = bitcast <8 x float> %413 to <4 x i64>
  %428 = xor <4 x i64> %426, %427
  %429 = add <4 x i32> %399, <i32 1, i32 1, i32 1, i32 1>
  %430 = add <4 x i32> %404, <i32 1, i32 1, i32 1, i32 1>
  %431 = and <4 x i32> %429, <i32 2, i32 2, i32 2, i32 2>
  %432 = icmp ne <4 x i32> %431, zeroinitializer
  %433 = sext <4 x i1> %432 to <4 x i32>
  %434 = bitcast <4 x i32> %433 to <2 x i64>
  %435 = and <4 x i32> %430, <i32 2, i32 2, i32 2, i32 2>
  %436 = icmp ne <4 x i32> %435, zeroinitializer
  %437 = sext <4 x i1> %436 to <4 x i32>
  %438 = bitcast <4 x i32> %437 to <2 x i64>
  %439 = shufflevector <2 x i64> %434, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %440 = shufflevector <2 x i64> %438, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %441 = shufflevector <4 x i64> %439, <4 x i64> %440, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %442 = and <4 x i64> %441, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %443 = bitcast <8 x float> %414 to <4 x i64>
  %444 = xor <4 x i64> %442, %443
  %445 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %428, <4 x i64>* %445, align 32
  %446 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %447 = bitcast <8 x float>* %446 to <4 x i64>*
  store <4 x i64> %444, <4 x i64>* %447, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u10avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %38, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %14, i32 8) #8
  %16 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %15) #8
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %19 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %20 = fmul <8 x float> %15, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %21 = fadd <8 x float> %20, %1
  %22 = fmul <8 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %23 = fadd <8 x float> %22, %21
  %24 = fsub <8 x float> %23, %21
  %25 = fsub <8 x float> %23, %24
  %26 = fsub <8 x float> %21, %25
  %27 = fsub <8 x float> %22, %24
  %28 = fadd <8 x float> %27, %26
  %29 = fmul <8 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %30 = fadd <8 x float> %29, %23
  %31 = fsub <8 x float> %23, %30
  %32 = fadd <8 x float> %29, %31
  %33 = fadd <8 x float> %32, %28
  %34 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %36 = bitcast <2 x i64> %34 to <4 x i32>
  %37 = bitcast <2 x i64> %35 to <4 x i32>
  br label %350

; <label>:38:                                     ; preds = %2
  %39 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %40 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %41 = bitcast <2 x i64> %39 to <4 x i32>
  %42 = lshr <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %43 = bitcast <2 x i64> %40 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 23, i32 23, i32 23, i32 23>
  %45 = and <4 x i32> %42, <i32 255, i32 255, i32 255, i32 255>
  %46 = and <4 x i32> %44, <i32 255, i32 255, i32 255, i32 255>
  %47 = add nsw <4 x i32> %45, <i32 -152, i32 -152, i32 -152, i32 -152>
  %48 = add nsw <4 x i32> %46, <i32 -152, i32 -152, i32 -152, i32 -152>
  %49 = icmp ugt <4 x i32> %45, <i32 217, i32 217, i32 217, i32 217>
  %50 = icmp ugt <4 x i32> %46, <i32 217, i32 217, i32 217, i32 217>
  %51 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %52 = select <4 x i1> %50, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %53 = add <4 x i32> %51, %41
  %54 = add <4 x i32> %52, %43
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = bitcast <4 x i32> %54 to <2 x i64>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = ashr <4 x i32> %47, <i32 31, i32 31, i32 31, i32 31>
  %62 = ashr <4 x i32> %48, <i32 31, i32 31, i32 31, i32 31>
  %63 = xor <4 x i32> %61, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %64 = and <4 x i32> %63, %47
  %65 = shl <4 x i32> %64, <i32 2, i32 2, i32 2, i32 2>
  %66 = xor <4 x i32> %62, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %67 = and <4 x i32> %66, %48
  %68 = shl <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  %69 = extractelement <4 x i32> %68, i32 3
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !3, !noalias !25
  %73 = extractelement <4 x i32> %68, i32 2
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %74
  %76 = load float, float* %75, align 4, !tbaa !3, !noalias !25
  %77 = extractelement <4 x i32> %68, i32 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !3, !noalias !25
  %81 = extractelement <4 x i32> %68, i32 0
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !3, !noalias !25
  %85 = extractelement <4 x i32> %65, i32 3
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %86
  %88 = load float, float* %87, align 4, !tbaa !3, !noalias !25
  %89 = extractelement <4 x i32> %65, i32 2
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !3, !noalias !25
  %93 = extractelement <4 x i32> %65, i32 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !3, !noalias !25
  %97 = extractelement <4 x i32> %65, i32 0
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !3, !noalias !25
  %101 = insertelement <8 x float> undef, float %100, i32 0
  %102 = insertelement <8 x float> %101, float %96, i32 1
  %103 = insertelement <8 x float> %102, float %92, i32 2
  %104 = insertelement <8 x float> %103, float %88, i32 3
  %105 = insertelement <8 x float> %104, float %84, i32 4
  %106 = insertelement <8 x float> %105, float %80, i32 5
  %107 = insertelement <8 x float> %106, float %76, i32 6
  %108 = insertelement <8 x float> %107, float %72, i32 7
  %109 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %110 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %111 = shufflevector <2 x i64> %109, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = shufflevector <2 x i64> %110, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <4 x i64> %111, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fsub <8 x float> %60, %114
  %116 = bitcast <8 x float> %108 to <4 x i64>
  %117 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %118 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %119 = and <2 x i64> %117, <i64 -17587891081216, i64 -17587891081216>
  %120 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = fsub <8 x float> %108, %124
  %126 = fmul <8 x float> %108, %60
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = xor <4 x i64> %127, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %129 = bitcast <4 x i64> %128 to <8 x float>
  %130 = fmul <8 x float> %114, %124
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %115, %124
  %133 = fadd <8 x float> %132, %131
  %134 = fmul <8 x float> %125, %114
  %135 = fadd <8 x float> %134, %133
  %136 = fmul <8 x float> %115, %125
  %137 = fadd <8 x float> %136, %135
  %138 = fmul <8 x float> %126, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %139 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %138, i32 8) #8
  %140 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %126, i32 8) #8
  %141 = fmul <8 x float> %140, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %142 = fsub <8 x float> %139, %141
  %143 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %142) #8
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = shufflevector <4 x i64> %144, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %146 = shufflevector <4 x i64> %144, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %147 = fmul <8 x float> %139, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %148 = fsub <8 x float> %126, %147
  %149 = fadd <8 x float> %148, %137
  %150 = fsub <8 x float> %148, %149
  %151 = fadd <8 x float> %137, %150
  %152 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %70
  %153 = load float, float* %152, align 4, !tbaa !3, !noalias !25
  %154 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %74
  %155 = load float, float* %154, align 4, !tbaa !3, !noalias !25
  %156 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %78
  %157 = load float, float* %156, align 4, !tbaa !3, !noalias !25
  %158 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %82
  %159 = load float, float* %158, align 4, !tbaa !3, !noalias !25
  %160 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %86
  %161 = load float, float* %160, align 4, !tbaa !3, !noalias !25
  %162 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %90
  %163 = load float, float* %162, align 4, !tbaa !3, !noalias !25
  %164 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %94
  %165 = load float, float* %164, align 4, !tbaa !3, !noalias !25
  %166 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %98
  %167 = load float, float* %166, align 4, !tbaa !3, !noalias !25
  %168 = insertelement <8 x float> undef, float %167, i32 0
  %169 = insertelement <8 x float> %168, float %165, i32 1
  %170 = insertelement <8 x float> %169, float %163, i32 2
  %171 = insertelement <8 x float> %170, float %161, i32 3
  %172 = insertelement <8 x float> %171, float %159, i32 4
  %173 = insertelement <8 x float> %172, float %157, i32 5
  %174 = insertelement <8 x float> %173, float %155, i32 6
  %175 = insertelement <8 x float> %174, float %153, i32 7
  %176 = bitcast <8 x float> %175 to <4 x i64>
  %177 = shufflevector <4 x i64> %176, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %178 = shufflevector <4 x i64> %176, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %179 = and <2 x i64> %177, <i64 -17587891081216, i64 -17587891081216>
  %180 = and <2 x i64> %178, <i64 -17587891081216, i64 -17587891081216>
  %181 = shufflevector <2 x i64> %179, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %182 = shufflevector <2 x i64> %180, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %183 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %184 = bitcast <4 x i64> %183 to <8 x float>
  %185 = fsub <8 x float> %175, %184
  %186 = fmul <8 x float> %175, %60
  %187 = bitcast <8 x float> %186 to <4 x i64>
  %188 = xor <4 x i64> %187, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %189 = bitcast <4 x i64> %188 to <8 x float>
  %190 = fmul <8 x float> %114, %184
  %191 = fadd <8 x float> %190, %189
  %192 = fmul <8 x float> %115, %184
  %193 = fadd <8 x float> %192, %191
  %194 = fmul <8 x float> %185, %114
  %195 = fadd <8 x float> %194, %193
  %196 = fmul <8 x float> %115, %185
  %197 = fadd <8 x float> %196, %195
  %198 = fadd <8 x float> %149, %186
  %199 = fsub <8 x float> %198, %149
  %200 = fsub <8 x float> %198, %199
  %201 = fsub <8 x float> %149, %200
  %202 = fsub <8 x float> %186, %199
  %203 = fadd <8 x float> %202, %201
  %204 = fadd <8 x float> %151, %197
  %205 = fadd <8 x float> %203, %204
  %206 = fmul <8 x float> %198, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %207 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %206, i32 8) #8
  %208 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %198, i32 8) #8
  %209 = fmul <8 x float> %208, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %210 = fsub <8 x float> %207, %209
  %211 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %210) #8
  %212 = bitcast <8 x i32> %211 to <4 x i64>
  %213 = shufflevector <4 x i64> %212, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %214 = shufflevector <4 x i64> %212, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %215 = fmul <8 x float> %207, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %216 = fsub <8 x float> %198, %215
  %217 = bitcast <2 x i64> %145 to <4 x i32>
  %218 = bitcast <2 x i64> %213 to <4 x i32>
  %219 = add <4 x i32> %218, %217
  %220 = bitcast <2 x i64> %146 to <4 x i32>
  %221 = bitcast <2 x i64> %214 to <4 x i32>
  %222 = add <4 x i32> %221, %220
  %223 = fadd <8 x float> %216, %205
  %224 = fsub <8 x float> %216, %223
  %225 = fadd <8 x float> %205, %224
  %226 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %70
  %227 = load float, float* %226, align 4, !tbaa !3, !noalias !25
  %228 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %74
  %229 = load float, float* %228, align 4, !tbaa !3, !noalias !25
  %230 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %78
  %231 = load float, float* %230, align 4, !tbaa !3, !noalias !25
  %232 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %82
  %233 = load float, float* %232, align 4, !tbaa !3, !noalias !25
  %234 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %86
  %235 = load float, float* %234, align 4, !tbaa !3, !noalias !25
  %236 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %90
  %237 = load float, float* %236, align 4, !tbaa !3, !noalias !25
  %238 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %94
  %239 = load float, float* %238, align 4, !tbaa !3, !noalias !25
  %240 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %98
  %241 = load float, float* %240, align 4, !tbaa !3, !noalias !25
  %242 = insertelement <8 x float> undef, float %241, i32 0
  %243 = insertelement <8 x float> %242, float %239, i32 1
  %244 = insertelement <8 x float> %243, float %237, i32 2
  %245 = insertelement <8 x float> %244, float %235, i32 3
  %246 = insertelement <8 x float> %245, float %233, i32 4
  %247 = insertelement <8 x float> %246, float %231, i32 5
  %248 = insertelement <8 x float> %247, float %229, i32 6
  %249 = insertelement <8 x float> %248, float %227, i32 7
  %250 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %70
  %251 = load float, float* %250, align 4, !tbaa !3, !noalias !25
  %252 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %74
  %253 = load float, float* %252, align 4, !tbaa !3, !noalias !25
  %254 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %78
  %255 = load float, float* %254, align 4, !tbaa !3, !noalias !25
  %256 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %82
  %257 = load float, float* %256, align 4, !tbaa !3, !noalias !25
  %258 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %86
  %259 = load float, float* %258, align 4, !tbaa !3, !noalias !25
  %260 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %90
  %261 = load float, float* %260, align 4, !tbaa !3, !noalias !25
  %262 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %94
  %263 = load float, float* %262, align 4, !tbaa !3, !noalias !25
  %264 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %98
  %265 = load float, float* %264, align 4, !tbaa !3, !noalias !25
  %266 = insertelement <8 x float> undef, float %265, i32 0
  %267 = insertelement <8 x float> %266, float %263, i32 1
  %268 = insertelement <8 x float> %267, float %261, i32 2
  %269 = insertelement <8 x float> %268, float %259, i32 3
  %270 = insertelement <8 x float> %269, float %257, i32 4
  %271 = insertelement <8 x float> %270, float %255, i32 5
  %272 = insertelement <8 x float> %271, float %253, i32 6
  %273 = insertelement <8 x float> %272, float %251, i32 7
  %274 = bitcast <8 x float> %249 to <4 x i64>
  %275 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %276 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %277 = and <2 x i64> %275, <i64 -17587891081216, i64 -17587891081216>
  %278 = and <2 x i64> %276, <i64 -17587891081216, i64 -17587891081216>
  %279 = shufflevector <2 x i64> %277, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %280 = shufflevector <2 x i64> %278, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = shufflevector <4 x i64> %279, <4 x i64> %280, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %282 = bitcast <4 x i64> %281 to <8 x float>
  %283 = fsub <8 x float> %249, %282
  %284 = fmul <8 x float> %249, %60
  %285 = bitcast <8 x float> %284 to <4 x i64>
  %286 = xor <4 x i64> %285, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %287 = bitcast <4 x i64> %286 to <8 x float>
  %288 = fmul <8 x float> %114, %282
  %289 = fadd <8 x float> %288, %287
  %290 = fmul <8 x float> %283, %114
  %291 = fadd <8 x float> %290, %289
  %292 = fmul <8 x float> %115, %282
  %293 = fadd <8 x float> %292, %291
  %294 = fmul <8 x float> %115, %283
  %295 = fadd <8 x float> %294, %293
  %296 = fmul <8 x float> %273, %60
  %297 = fadd <8 x float> %296, %295
  %298 = fadd <8 x float> %284, %223
  %299 = fsub <8 x float> %298, %223
  %300 = fsub <8 x float> %298, %299
  %301 = fsub <8 x float> %223, %300
  %302 = fsub <8 x float> %284, %299
  %303 = fadd <8 x float> %302, %301
  %304 = fadd <8 x float> %225, %297
  %305 = fadd <8 x float> %303, %304
  %306 = fadd <8 x float> %298, %305
  %307 = fsub <8 x float> %298, %306
  %308 = fadd <8 x float> %305, %307
  %309 = bitcast <8 x float> %306 to <4 x i64>
  %310 = shufflevector <4 x i64> %309, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %311 = shufflevector <4 x i64> %309, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %312 = and <2 x i64> %310, <i64 -17587891081216, i64 -17587891081216>
  %313 = and <2 x i64> %311, <i64 -17587891081216, i64 -17587891081216>
  %314 = shufflevector <2 x i64> %312, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %315 = shufflevector <2 x i64> %313, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %316 = shufflevector <4 x i64> %314, <4 x i64> %315, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %317 = bitcast <4 x i64> %316 to <8 x float>
  %318 = fsub <8 x float> %306, %317
  %319 = fmul <8 x float> %306, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %320 = bitcast <8 x float> %319 to <4 x i64>
  %321 = xor <4 x i64> %320, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %322 = bitcast <4 x i64> %321 to <8 x float>
  %323 = fmul <8 x float> %317, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %324 = fadd <8 x float> %323, %322
  %325 = fmul <8 x float> %318, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %326 = fadd <8 x float> %325, %324
  %327 = fmul <8 x float> %317, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %328 = fadd <8 x float> %327, %326
  %329 = fmul <8 x float> %318, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %330 = fadd <8 x float> %329, %328
  %331 = fmul <8 x float> %306, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %332 = fadd <8 x float> %331, %330
  %333 = fmul <8 x float> %308, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %334 = fadd <8 x float> %333, %332
  %335 = and <4 x i64> %59, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %336 = bitcast <4 x i64> %335 to <8 x float>
  %337 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %336, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %338 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %319, <8 x float> %60, <8 x float> %337) #8
  %339 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %334, <8 x float> zeroinitializer, <8 x float> %337) #8
  %340 = bitcast <4 x i32> %219 to <2 x i64>
  %341 = bitcast <4 x i32> %222 to <2 x i64>
  %342 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %343 = fcmp uno <8 x float> %1, zeroinitializer
  %344 = or <8 x i1> %342, %343
  %345 = sext <8 x i1> %344 to <8 x i32>
  %346 = bitcast <8 x i32> %345 to <4 x i64>
  %347 = bitcast <8 x float> %338 to <4 x i64>
  %348 = or <4 x i64> %347, %346
  %349 = bitcast <4 x i64> %348 to <8 x float>
  br label %350

; <label>:350:                                    ; preds = %38, %13
  %351 = phi <4 x i32> [ %43, %38 ], [ %37, %13 ]
  %352 = phi <4 x i32> [ %41, %38 ], [ %36, %13 ]
  %353 = phi <8 x float> [ %349, %38 ], [ %30, %13 ]
  %354 = phi <8 x float> [ %339, %38 ], [ %33, %13 ]
  %355 = phi <2 x i64> [ %340, %38 ], [ %18, %13 ]
  %356 = phi <2 x i64> [ %341, %38 ], [ %19, %13 ]
  %357 = bitcast <8 x float> %353 to <4 x i64>
  %358 = shufflevector <4 x i64> %357, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %359 = shufflevector <4 x i64> %357, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %360 = and <2 x i64> %358, <i64 -17587891081216, i64 -17587891081216>
  %361 = and <2 x i64> %359, <i64 -17587891081216, i64 -17587891081216>
  %362 = shufflevector <2 x i64> %360, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %363 = shufflevector <2 x i64> %361, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %364 = shufflevector <4 x i64> %362, <4 x i64> %363, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %365 = bitcast <4 x i64> %364 to <8 x float>
  %366 = fsub <8 x float> %353, %365
  %367 = fmul <8 x float> %354, %365
  %368 = fmul <8 x float> %366, %366
  %369 = fmul <8 x float> %366, %365
  %370 = fadd <8 x float> %369, %369
  %371 = fmul <8 x float> %365, %365
  %372 = fadd <8 x float> %367, %367
  %373 = fadd <8 x float> %372, %368
  %374 = fadd <8 x float> %373, %370
  %375 = fadd <8 x float> %371, %374
  %376 = fmul <8 x float> %375, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %377 = fadd <8 x float> %376, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %378 = fmul <8 x float> %375, %377
  %379 = fadd <8 x float> %378, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %380 = fmul <8 x float> %353, %375
  %381 = fmul <8 x float> %380, %379
  %382 = fadd <8 x float> %353, %381
  %383 = fsub <8 x float> %353, %382
  %384 = fadd <8 x float> %381, %383
  %385 = fadd <8 x float> %354, %384
  %386 = fadd <8 x float> %382, %385
  %387 = icmp eq <4 x i32> %352, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %388 = sext <4 x i1> %387 to <4 x i32>
  %389 = bitcast <4 x i32> %388 to <2 x i64>
  %390 = icmp eq <4 x i32> %351, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %391 = sext <4 x i1> %390 to <4 x i32>
  %392 = bitcast <4 x i32> %391 to <2 x i64>
  %393 = shufflevector <2 x i64> %389, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %394 = shufflevector <2 x i64> %392, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %395 = shufflevector <4 x i64> %393, <4 x i64> %394, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %396 = bitcast <4 x i64> %395 to <8 x float>
  %397 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %386, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %396) #8
  %398 = fmul <8 x float> %375, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %399 = fadd <8 x float> %398, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %400 = fmul <8 x float> %375, %399
  %401 = fadd <8 x float> %400, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %402 = fmul <8 x float> %375, %401
  %403 = fadd <8 x float> %402, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %404 = fmul <8 x float> %375, %403
  %405 = fadd <8 x float> %404, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %406 = bitcast <8 x float> %375 to <4 x i64>
  %407 = shufflevector <4 x i64> %406, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %408 = shufflevector <4 x i64> %406, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %409 = and <2 x i64> %407, <i64 -17587891081216, i64 -17587891081216>
  %410 = and <2 x i64> %408, <i64 -17587891081216, i64 -17587891081216>
  %411 = shufflevector <2 x i64> %409, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %412 = shufflevector <2 x i64> %410, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %413 = shufflevector <4 x i64> %411, <4 x i64> %412, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %414 = bitcast <4 x i64> %413 to <8 x float>
  %415 = fsub <8 x float> %375, %414
  %416 = bitcast <8 x float> %405 to <4 x i64>
  %417 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %418 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %419 = and <2 x i64> %417, <i64 -17587891081216, i64 -17587891081216>
  %420 = and <2 x i64> %418, <i64 -17587891081216, i64 -17587891081216>
  %421 = shufflevector <2 x i64> %419, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %422 = shufflevector <2 x i64> %420, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %423 = shufflevector <4 x i64> %421, <4 x i64> %422, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %424 = bitcast <4 x i64> %423 to <8 x float>
  %425 = fsub <8 x float> %405, %424
  %426 = fmul <8 x float> %375, %405
  %427 = bitcast <8 x float> %426 to <4 x i64>
  %428 = xor <4 x i64> %427, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %429 = bitcast <4 x i64> %428 to <8 x float>
  %430 = fmul <8 x float> %414, %424
  %431 = fadd <8 x float> %430, %429
  %432 = fmul <8 x float> %415, %424
  %433 = fadd <8 x float> %432, %431
  %434 = fmul <8 x float> %425, %414
  %435 = fadd <8 x float> %434, %433
  %436 = fmul <8 x float> %415, %425
  %437 = fadd <8 x float> %436, %435
  %438 = fadd <8 x float> %426, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %439 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %438
  %440 = fadd <8 x float> %426, %439
  %441 = fadd <8 x float> %440, %437
  %442 = fadd <8 x float> %438, %441
  %443 = bitcast <2 x i64> %355 to <4 x i32>
  %444 = and <4 x i32> %443, <i32 1, i32 1, i32 1, i32 1>
  %445 = icmp eq <4 x i32> %444, zeroinitializer
  %446 = sext <4 x i1> %445 to <4 x i32>
  %447 = bitcast <4 x i32> %446 to <2 x i64>
  %448 = bitcast <2 x i64> %356 to <4 x i32>
  %449 = and <4 x i32> %448, <i32 1, i32 1, i32 1, i32 1>
  %450 = icmp eq <4 x i32> %449, zeroinitializer
  %451 = sext <4 x i1> %450 to <4 x i32>
  %452 = bitcast <4 x i32> %451 to <2 x i64>
  %453 = shufflevector <2 x i64> %447, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %454 = shufflevector <2 x i64> %452, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %455 = shufflevector <4 x i64> %453, <4 x i64> %454, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %456 = bitcast <4 x i64> %455 to <8 x float>
  %457 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %442, <8 x float> %397, <8 x float> %456) #8
  %458 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %397, <8 x float> %442, <8 x float> %456) #8
  %459 = and <4 x i32> %443, <i32 2, i32 2, i32 2, i32 2>
  %460 = icmp ne <4 x i32> %459, zeroinitializer
  %461 = sext <4 x i1> %460 to <4 x i32>
  %462 = bitcast <4 x i32> %461 to <2 x i64>
  %463 = and <4 x i32> %448, <i32 2, i32 2, i32 2, i32 2>
  %464 = icmp ne <4 x i32> %463, zeroinitializer
  %465 = sext <4 x i1> %464 to <4 x i32>
  %466 = bitcast <4 x i32> %465 to <2 x i64>
  %467 = shufflevector <2 x i64> %462, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %468 = shufflevector <2 x i64> %466, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %469 = shufflevector <4 x i64> %467, <4 x i64> %468, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %470 = and <4 x i64> %469, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %471 = bitcast <8 x float> %457 to <4 x i64>
  %472 = xor <4 x i64> %470, %471
  %473 = add <4 x i32> %443, <i32 1, i32 1, i32 1, i32 1>
  %474 = add <4 x i32> %448, <i32 1, i32 1, i32 1, i32 1>
  %475 = and <4 x i32> %473, <i32 2, i32 2, i32 2, i32 2>
  %476 = icmp ne <4 x i32> %475, zeroinitializer
  %477 = sext <4 x i1> %476 to <4 x i32>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = and <4 x i32> %474, <i32 2, i32 2, i32 2, i32 2>
  %480 = icmp ne <4 x i32> %479, zeroinitializer
  %481 = sext <4 x i1> %480 to <4 x i32>
  %482 = bitcast <4 x i32> %481 to <2 x i64>
  %483 = shufflevector <2 x i64> %478, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %484 = shufflevector <2 x i64> %482, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %485 = shufflevector <4 x i64> %483, <4 x i64> %484, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %486 = and <4 x i64> %485, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %487 = bitcast <8 x float> %458 to <4 x i64>
  %488 = xor <4 x i64> %486, %487
  %489 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %472, <4 x i64>* %489, align 32
  %490 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %491 = bitcast <8 x float>* %490 to <4 x i64>*
  store <4 x i64> %488, <4 x i64>* %491, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u05avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = bitcast <8 x float> %25 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <4 x i64> %32, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <4 x i64> %34 to <8 x float>
  %36 = fsub <8 x float> %25, %35
  %37 = bitcast <8 x float> %26 to <4 x i64>
  %38 = xor <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = fmul <8 x float> %35, %35
  %41 = fadd <8 x float> %40, %39
  %42 = fmul <8 x float> %36, %35
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %42, %43
  %45 = fmul <8 x float> %36, %36
  %46 = fadd <8 x float> %45, %44
  %47 = fmul <8 x float> %26, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %48 = fadd <8 x float> %47, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %49 = fmul <8 x float> %26, %48
  %50 = fadd <8 x float> %49, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %51 = fmul <8 x float> %26, %50
  %52 = fadd <8 x float> %51, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %53 = fsub <8 x float> %52, %51
  %54 = fsub <8 x float> %52, %53
  %55 = fsub <8 x float> %51, %54
  %56 = fsub <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %53
  %57 = fadd <8 x float> %56, %55
  %58 = fadd <8 x float> %57, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %59 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %60 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %61 = and <2 x i64> %59, <i64 -17587891081216, i64 -17587891081216>
  %62 = and <2 x i64> %60, <i64 -17587891081216, i64 -17587891081216>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = bitcast <4 x i64> %65 to <8 x float>
  %67 = fsub <8 x float> %26, %66
  %68 = bitcast <8 x float> %52 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %72 = and <2 x i64> %70, <i64 -17587891081216, i64 -17587891081216>
  %73 = shufflevector <2 x i64> %71, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <4 x i64> %73, <4 x i64> %74, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %76 = bitcast <4 x i64> %75 to <8 x float>
  %77 = fsub <8 x float> %52, %76
  %78 = fmul <8 x float> %26, %52
  %79 = bitcast <8 x float> %78 to <4 x i64>
  %80 = xor <4 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fmul <8 x float> %66, %76
  %83 = fadd <8 x float> %82, %81
  %84 = fmul <8 x float> %67, %76
  %85 = fadd <8 x float> %84, %83
  %86 = fmul <8 x float> %77, %66
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %67, %77
  %89 = fadd <8 x float> %88, %87
  %90 = fmul <8 x float> %26, %58
  %91 = fadd <8 x float> %90, %89
  %92 = fmul <8 x float> %52, %46
  %93 = fadd <8 x float> %92, %91
  %94 = fadd <8 x float> %78, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %95 = fsub <8 x float> %94, %78
  %96 = fsub <8 x float> %94, %95
  %97 = fsub <8 x float> %78, %96
  %98 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %95
  %99 = fadd <8 x float> %98, %97
  %100 = fadd <8 x float> %93, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %101 = fadd <8 x float> %99, %100
  %102 = bitcast <8 x float> %94 to <4 x i64>
  %103 = shufflevector <4 x i64> %102, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %104 = shufflevector <4 x i64> %102, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %105 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %106 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <4 x i64> %107, <4 x i64> %108, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = fsub <8 x float> %94, %110
  %112 = fmul <8 x float> %25, %94
  %113 = bitcast <8 x float> %112 to <4 x i64>
  %114 = xor <4 x i64> %113, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %115 = bitcast <4 x i64> %114 to <8 x float>
  %116 = fmul <8 x float> %35, %110
  %117 = fadd <8 x float> %116, %115
  %118 = fmul <8 x float> %111, %35
  %119 = fadd <8 x float> %118, %117
  %120 = fmul <8 x float> %36, %110
  %121 = fadd <8 x float> %120, %119
  %122 = fmul <8 x float> %36, %111
  %123 = fadd <8 x float> %122, %121
  %124 = fmul <8 x float> %25, %101
  %125 = fadd <8 x float> %123, %124
  %126 = fadd <8 x float> %112, %125
  %127 = bitcast <8 x float> %1 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = icmp eq <4 x i32> %130, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %132 = sext <4 x i1> %131 to <4 x i32>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = bitcast <2 x i64> %129 to <4 x i32>
  %135 = icmp eq <4 x i32> %134, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %136 = sext <4 x i1> %135 to <4 x i32>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = shufflevector <2 x i64> %137, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %140 = shufflevector <4 x i64> %138, <4 x i64> %139, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %141 = bitcast <4 x i64> %140 to <8 x float>
  %142 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %141) #8
  %143 = fmul <8 x float> %26, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %144 = fadd <8 x float> %143, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %145 = fmul <8 x float> %26, %144
  %146 = fadd <8 x float> %145, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %147 = fmul <8 x float> %26, %146
  %148 = fadd <8 x float> %147, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %149 = fsub <8 x float> %148, %147
  %150 = fsub <8 x float> %148, %149
  %151 = fsub <8 x float> %147, %150
  %152 = fsub <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %149
  %153 = fadd <8 x float> %152, %151
  %154 = fadd <8 x float> %153, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %155 = bitcast <8 x float> %148 to <4 x i64>
  %156 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %157 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %158 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %159 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %160 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = shufflevector <2 x i64> %159, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <4 x i64> %160, <4 x i64> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fsub <8 x float> %148, %163
  %165 = fmul <8 x float> %26, %148
  %166 = bitcast <8 x float> %165 to <4 x i64>
  %167 = xor <4 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <4 x i64> %167 to <8 x float>
  %169 = fmul <8 x float> %66, %163
  %170 = fadd <8 x float> %169, %168
  %171 = fmul <8 x float> %67, %163
  %172 = fadd <8 x float> %171, %170
  %173 = fmul <8 x float> %164, %66
  %174 = fadd <8 x float> %173, %172
  %175 = fmul <8 x float> %67, %164
  %176 = fadd <8 x float> %175, %174
  %177 = fmul <8 x float> %26, %154
  %178 = fadd <8 x float> %177, %176
  %179 = fmul <8 x float> %148, %46
  %180 = fadd <8 x float> %179, %178
  %181 = fadd <8 x float> %165, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %182 = fsub <8 x float> %181, %165
  %183 = fsub <8 x float> %181, %182
  %184 = fsub <8 x float> %165, %183
  %185 = fsub <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %182
  %186 = fadd <8 x float> %185, %184
  %187 = fadd <8 x float> %180, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %188 = fadd <8 x float> %186, %187
  %189 = bitcast <8 x float> %181 to <4 x i64>
  %190 = shufflevector <4 x i64> %189, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %191 = shufflevector <4 x i64> %189, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %192 = and <2 x i64> %190, <i64 -17587891081216, i64 -17587891081216>
  %193 = and <2 x i64> %191, <i64 -17587891081216, i64 -17587891081216>
  %194 = shufflevector <2 x i64> %192, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %195 = shufflevector <2 x i64> %193, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %196 = shufflevector <4 x i64> %194, <4 x i64> %195, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %197 = bitcast <4 x i64> %196 to <8 x float>
  %198 = fsub <8 x float> %181, %197
  %199 = fmul <8 x float> %26, %181
  %200 = bitcast <8 x float> %199 to <4 x i64>
  %201 = xor <4 x i64> %200, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %202 = bitcast <4 x i64> %201 to <8 x float>
  %203 = fmul <8 x float> %66, %197
  %204 = fadd <8 x float> %203, %202
  %205 = fmul <8 x float> %198, %66
  %206 = fadd <8 x float> %205, %204
  %207 = fmul <8 x float> %67, %197
  %208 = fadd <8 x float> %207, %206
  %209 = fmul <8 x float> %67, %198
  %210 = fadd <8 x float> %209, %208
  %211 = fmul <8 x float> %181, %46
  %212 = fadd <8 x float> %211, %210
  %213 = fmul <8 x float> %26, %188
  %214 = fadd <8 x float> %212, %213
  %215 = fadd <8 x float> %199, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %216 = fsub <8 x float> %215, %199
  %217 = fsub <8 x float> %215, %216
  %218 = fsub <8 x float> %199, %217
  %219 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %216
  %220 = fadd <8 x float> %219, %218
  %221 = fadd <8 x float> %220, %214
  %222 = fadd <8 x float> %215, %221
  %223 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %224 = icmp eq <4 x i32> %223, zeroinitializer
  %225 = sext <4 x i1> %224 to <4 x i32>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %228 = icmp eq <4 x i32> %227, zeroinitializer
  %229 = sext <4 x i1> %228 to <4 x i32>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <2 x i64> %226, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <2 x i64> %230, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %233 = shufflevector <4 x i64> %231, <4 x i64> %232, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %234 = bitcast <4 x i64> %233 to <8 x float>
  %235 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %222, <8 x float> %142, <8 x float> %234) #8
  %236 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %142, <8 x float> %222, <8 x float> %234) #8
  %237 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %238 = icmp ne <4 x i32> %237, zeroinitializer
  %239 = sext <4 x i1> %238 to <4 x i32>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %242 = icmp ne <4 x i32> %241, zeroinitializer
  %243 = sext <4 x i1> %242 to <4 x i32>
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = shufflevector <2 x i64> %240, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %246 = shufflevector <2 x i64> %244, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %247 = shufflevector <4 x i64> %245, <4 x i64> %246, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %248 = and <4 x i64> %247, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %249 = bitcast <8 x float> %235 to <4 x i64>
  %250 = xor <4 x i64> %248, %249
  %251 = bitcast <2 x i64> %18 to <4 x i32>
  %252 = add <4 x i32> %251, <i32 2, i32 2, i32 2, i32 2>
  %253 = bitcast <2 x i64> %19 to <4 x i32>
  %254 = add <4 x i32> %253, <i32 2, i32 2, i32 2, i32 2>
  %255 = and <4 x i32> %252, <i32 4, i32 4, i32 4, i32 4>
  %256 = icmp ne <4 x i32> %255, zeroinitializer
  %257 = sext <4 x i1> %256 to <4 x i32>
  %258 = bitcast <4 x i32> %257 to <2 x i64>
  %259 = and <4 x i32> %254, <i32 4, i32 4, i32 4, i32 4>
  %260 = icmp ne <4 x i32> %259, zeroinitializer
  %261 = sext <4 x i1> %260 to <4 x i32>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = shufflevector <2 x i64> %258, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %264 = shufflevector <2 x i64> %262, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %265 = shufflevector <4 x i64> %263, <4 x i64> %264, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %266 = and <4 x i64> %265, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %267 = bitcast <8 x float> %236 to <4 x i64>
  %268 = xor <4 x i64> %266, %267
  %269 = and <4 x i64> %127, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %270 = bitcast <4 x i64> %269 to <8 x float>
  %271 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %270, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %272 = bitcast <8 x float> %271 to <4 x i64>
  %273 = xor <4 x i64> %272, <i64 -1, i64 -1, i64 -1, i64 -1>
  %274 = and <4 x i64> %250, %273
  %275 = and <4 x i64> %268, %273
  %276 = fcmp oeq <8 x float> %270, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %277 = sext <8 x i1> %276 to <8 x i32>
  %278 = bitcast <8 x i32> %277 to <4 x i64>
  %279 = or <4 x i64> %274, %278
  %280 = or <4 x i64> %275, %278
  %281 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %279, <4 x i64>* %281, align 32
  %282 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %283 = bitcast <8 x float>* %282 to <4 x i64>*
  store <4 x i64> %280, <4 x i64>* %283, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u35avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fmul <8 x float> %26, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %28 = fadd <8 x float> %27, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %29 = fmul <8 x float> %26, %28
  %30 = fadd <8 x float> %29, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %33 = fmul <8 x float> %25, %32
  %34 = fmul <8 x float> %26, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %35 = fadd <8 x float> %34, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %36 = fmul <8 x float> %26, %35
  %37 = fadd <8 x float> %36, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %38 = fmul <8 x float> %26, %37
  %39 = fadd <8 x float> %38, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %40 = fmul <8 x float> %26, %39
  %41 = fadd <8 x float> %40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %43 = icmp eq <4 x i32> %42, zeroinitializer
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  %46 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %47 = icmp eq <4 x i32> %46, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> %33, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %41, <8 x float> %53) #8
  %56 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %57 = icmp ne <4 x i32> %56, zeroinitializer
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %61 = icmp ne <4 x i32> %60, zeroinitializer
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = and <4 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <8 x float> %54 to <4 x i64>
  %69 = xor <4 x i64> %67, %68
  %70 = bitcast <2 x i64> %18 to <4 x i32>
  %71 = add <4 x i32> %70, <i32 2, i32 2, i32 2, i32 2>
  %72 = bitcast <2 x i64> %19 to <4 x i32>
  %73 = add <4 x i32> %72, <i32 2, i32 2, i32 2, i32 2>
  %74 = and <4 x i32> %71, <i32 4, i32 4, i32 4, i32 4>
  %75 = icmp ne <4 x i32> %74, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = and <4 x i32> %73, <i32 4, i32 4, i32 4, i32 4>
  %79 = icmp ne <4 x i32> %78, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <4 x i64> %82, <4 x i64> %83, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %85 = and <4 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <8 x float> %55 to <4 x i64>
  %87 = xor <4 x i64> %85, %86
  %88 = bitcast <8 x float> %1 to <4 x i64>
  %89 = and <4 x i64> %88, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %90, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = xor <4 x i64> %92, <i64 -1, i64 -1, i64 -1, i64 -1>
  %94 = and <4 x i64> %69, %93
  %95 = and <4 x i64> %87, %93
  %96 = fcmp oeq <8 x float> %90, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %97 = sext <8 x i1> %96 to <8 x i32>
  %98 = bitcast <8 x i32> %97 to <4 x i64>
  %99 = or <4 x i64> %94, %98
  %100 = or <4 x i64> %95, %98
  %101 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %99, <4 x i64>* %101, align 32
  %102 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %103 = bitcast <8 x float>* %102 to <4 x i64>*
  store <4 x i64> %100, <4 x i64>* %103, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff8_avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %37, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #8
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #8
  %16 = bitcast <8 x i32> %15 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = fmul <8 x float> %14, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %20 = fadd <8 x float> %19, %0
  %21 = fmul <8 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %22 = fadd <8 x float> %21, %20
  %23 = fsub <8 x float> %22, %20
  %24 = fsub <8 x float> %22, %23
  %25 = fsub <8 x float> %20, %24
  %26 = fsub <8 x float> %21, %23
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %29 = fadd <8 x float> %28, %22
  %30 = fsub <8 x float> %22, %29
  %31 = fadd <8 x float> %28, %30
  %32 = fadd <8 x float> %31, %27
  %33 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <2 x i64> %33 to <4 x i32>
  %36 = bitcast <2 x i64> %34 to <4 x i32>
  br label %352

; <label>:37:                                     ; preds = %1
  %38 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = bitcast <2 x i64> %38 to <4 x i32>
  %41 = lshr <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %42 = bitcast <2 x i64> %39 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %44 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %45 = and <4 x i32> %43, <i32 255, i32 255, i32 255, i32 255>
  %46 = add nsw <4 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152>
  %47 = add nsw <4 x i32> %45, <i32 -152, i32 -152, i32 -152, i32 -152>
  %48 = icmp ugt <4 x i32> %44, <i32 217, i32 217, i32 217, i32 217>
  %49 = icmp ugt <4 x i32> %45, <i32 217, i32 217, i32 217, i32 217>
  %50 = select <4 x i1> %48, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %51 = select <4 x i1> %49, <4 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <4 x i32> zeroinitializer
  %52 = add <4 x i32> %50, %40
  %53 = add <4 x i32> %51, %42
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = bitcast <4 x i32> %53 to <2 x i64>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = ashr <4 x i32> %46, <i32 31, i32 31, i32 31, i32 31>
  %61 = ashr <4 x i32> %47, <i32 31, i32 31, i32 31, i32 31>
  %62 = xor <4 x i32> %60, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %63 = and <4 x i32> %62, %46
  %64 = shl <4 x i32> %63, <i32 2, i32 2, i32 2, i32 2>
  %65 = xor <4 x i32> %61, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %66 = and <4 x i32> %65, %47
  %67 = shl <4 x i32> %66, <i32 2, i32 2, i32 2, i32 2>
  %68 = extractelement <4 x i32> %67, i32 3
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %69
  %71 = load float, float* %70, align 4, !tbaa !3, !noalias !28
  %72 = extractelement <4 x i32> %67, i32 2
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !3, !noalias !28
  %76 = extractelement <4 x i32> %67, i32 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %77
  %79 = load float, float* %78, align 4, !tbaa !3, !noalias !28
  %80 = extractelement <4 x i32> %67, i32 0
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !3, !noalias !28
  %84 = extractelement <4 x i32> %64, i32 3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !3, !noalias !28
  %88 = extractelement <4 x i32> %64, i32 2
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %89
  %91 = load float, float* %90, align 4, !tbaa !3, !noalias !28
  %92 = extractelement <4 x i32> %64, i32 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !3, !noalias !28
  %96 = extractelement <4 x i32> %64, i32 0
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [0 x float], [0 x float]* @rempitabsp, i64 0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !3, !noalias !28
  %100 = insertelement <8 x float> undef, float %99, i32 0
  %101 = insertelement <8 x float> %100, float %95, i32 1
  %102 = insertelement <8 x float> %101, float %91, i32 2
  %103 = insertelement <8 x float> %102, float %87, i32 3
  %104 = insertelement <8 x float> %103, float %83, i32 4
  %105 = insertelement <8 x float> %104, float %79, i32 5
  %106 = insertelement <8 x float> %105, float %75, i32 6
  %107 = insertelement <8 x float> %106, float %71, i32 7
  %108 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %109 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %110 = shufflevector <2 x i64> %108, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %111 = shufflevector <2 x i64> %109, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = shufflevector <4 x i64> %110, <4 x i64> %111, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fsub <8 x float> %59, %113
  %115 = bitcast <8 x float> %107 to <4 x i64>
  %116 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %117 = shufflevector <4 x i64> %115, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %118 = and <2 x i64> %116, <i64 -17587891081216, i64 -17587891081216>
  %119 = and <2 x i64> %117, <i64 -17587891081216, i64 -17587891081216>
  %120 = shufflevector <2 x i64> %118, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <4 x i64> %120, <4 x i64> %121, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fsub <8 x float> %107, %123
  %125 = fmul <8 x float> %107, %59
  %126 = bitcast <8 x float> %125 to <4 x i64>
  %127 = xor <4 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = bitcast <4 x i64> %127 to <8 x float>
  %129 = fmul <8 x float> %113, %123
  %130 = fadd <8 x float> %129, %128
  %131 = fmul <8 x float> %114, %123
  %132 = fadd <8 x float> %131, %130
  %133 = fmul <8 x float> %124, %113
  %134 = fadd <8 x float> %133, %132
  %135 = fmul <8 x float> %114, %124
  %136 = fadd <8 x float> %135, %134
  %137 = fmul <8 x float> %125, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %138 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %137, i32 8) #8
  %139 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %125, i32 8) #8
  %140 = fmul <8 x float> %139, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %141 = fsub <8 x float> %138, %140
  %142 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %141) #8
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %145 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %146 = fmul <8 x float> %138, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %147 = fsub <8 x float> %125, %146
  %148 = fadd <8 x float> %147, %136
  %149 = fsub <8 x float> %147, %148
  %150 = fadd <8 x float> %136, %149
  %151 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %69
  %152 = load float, float* %151, align 4, !tbaa !3, !noalias !28
  %153 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %73
  %154 = load float, float* %153, align 4, !tbaa !3, !noalias !28
  %155 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %77
  %156 = load float, float* %155, align 4, !tbaa !3, !noalias !28
  %157 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %81
  %158 = load float, float* %157, align 4, !tbaa !3, !noalias !28
  %159 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %85
  %160 = load float, float* %159, align 4, !tbaa !3, !noalias !28
  %161 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %89
  %162 = load float, float* %161, align 4, !tbaa !3, !noalias !28
  %163 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %93
  %164 = load float, float* %163, align 4, !tbaa !3, !noalias !28
  %165 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1), i64 %97
  %166 = load float, float* %165, align 4, !tbaa !3, !noalias !28
  %167 = insertelement <8 x float> undef, float %166, i32 0
  %168 = insertelement <8 x float> %167, float %164, i32 1
  %169 = insertelement <8 x float> %168, float %162, i32 2
  %170 = insertelement <8 x float> %169, float %160, i32 3
  %171 = insertelement <8 x float> %170, float %158, i32 4
  %172 = insertelement <8 x float> %171, float %156, i32 5
  %173 = insertelement <8 x float> %172, float %154, i32 6
  %174 = insertelement <8 x float> %173, float %152, i32 7
  %175 = bitcast <8 x float> %174 to <4 x i64>
  %176 = shufflevector <4 x i64> %175, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %177 = shufflevector <4 x i64> %175, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %178 = and <2 x i64> %176, <i64 -17587891081216, i64 -17587891081216>
  %179 = and <2 x i64> %177, <i64 -17587891081216, i64 -17587891081216>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <2 x i64> %179, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %182 = shufflevector <4 x i64> %180, <4 x i64> %181, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %183 = bitcast <4 x i64> %182 to <8 x float>
  %184 = fsub <8 x float> %174, %183
  %185 = fmul <8 x float> %174, %59
  %186 = bitcast <8 x float> %185 to <4 x i64>
  %187 = xor <4 x i64> %186, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %188 = bitcast <4 x i64> %187 to <8 x float>
  %189 = fmul <8 x float> %113, %183
  %190 = fadd <8 x float> %189, %188
  %191 = fmul <8 x float> %114, %183
  %192 = fadd <8 x float> %191, %190
  %193 = fmul <8 x float> %184, %113
  %194 = fadd <8 x float> %193, %192
  %195 = fmul <8 x float> %114, %184
  %196 = fadd <8 x float> %195, %194
  %197 = fadd <8 x float> %148, %185
  %198 = fsub <8 x float> %197, %148
  %199 = fsub <8 x float> %197, %198
  %200 = fsub <8 x float> %148, %199
  %201 = fsub <8 x float> %185, %198
  %202 = fadd <8 x float> %201, %200
  %203 = fadd <8 x float> %150, %196
  %204 = fadd <8 x float> %202, %203
  %205 = fmul <8 x float> %197, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %206 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %205, i32 8) #8
  %207 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %197, i32 8) #8
  %208 = fmul <8 x float> %207, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %209 = fsub <8 x float> %206, %208
  %210 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %209) #8
  %211 = bitcast <8 x i32> %210 to <4 x i64>
  %212 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %214 = fmul <8 x float> %206, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %215 = fsub <8 x float> %197, %214
  %216 = bitcast <2 x i64> %144 to <4 x i32>
  %217 = bitcast <2 x i64> %212 to <4 x i32>
  %218 = add <4 x i32> %217, %216
  %219 = bitcast <2 x i64> %145 to <4 x i32>
  %220 = bitcast <2 x i64> %213 to <4 x i32>
  %221 = add <4 x i32> %220, %219
  %222 = fadd <8 x float> %215, %204
  %223 = fsub <8 x float> %215, %222
  %224 = fadd <8 x float> %204, %223
  %225 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %69
  %226 = load float, float* %225, align 4, !tbaa !3, !noalias !28
  %227 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %73
  %228 = load float, float* %227, align 4, !tbaa !3, !noalias !28
  %229 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %77
  %230 = load float, float* %229, align 4, !tbaa !3, !noalias !28
  %231 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %81
  %232 = load float, float* %231, align 4, !tbaa !3, !noalias !28
  %233 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %85
  %234 = load float, float* %233, align 4, !tbaa !3, !noalias !28
  %235 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %89
  %236 = load float, float* %235, align 4, !tbaa !3, !noalias !28
  %237 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %93
  %238 = load float, float* %237, align 4, !tbaa !3, !noalias !28
  %239 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2), i64 %97
  %240 = load float, float* %239, align 4, !tbaa !3, !noalias !28
  %241 = insertelement <8 x float> undef, float %240, i32 0
  %242 = insertelement <8 x float> %241, float %238, i32 1
  %243 = insertelement <8 x float> %242, float %236, i32 2
  %244 = insertelement <8 x float> %243, float %234, i32 3
  %245 = insertelement <8 x float> %244, float %232, i32 4
  %246 = insertelement <8 x float> %245, float %230, i32 5
  %247 = insertelement <8 x float> %246, float %228, i32 6
  %248 = insertelement <8 x float> %247, float %226, i32 7
  %249 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %69
  %250 = load float, float* %249, align 4, !tbaa !3, !noalias !28
  %251 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %73
  %252 = load float, float* %251, align 4, !tbaa !3, !noalias !28
  %253 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %77
  %254 = load float, float* %253, align 4, !tbaa !3, !noalias !28
  %255 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %81
  %256 = load float, float* %255, align 4, !tbaa !3, !noalias !28
  %257 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %85
  %258 = load float, float* %257, align 4, !tbaa !3, !noalias !28
  %259 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %89
  %260 = load float, float* %259, align 4, !tbaa !3, !noalias !28
  %261 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %93
  %262 = load float, float* %261, align 4, !tbaa !3, !noalias !28
  %263 = getelementptr inbounds float, float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3), i64 %97
  %264 = load float, float* %263, align 4, !tbaa !3, !noalias !28
  %265 = insertelement <8 x float> undef, float %264, i32 0
  %266 = insertelement <8 x float> %265, float %262, i32 1
  %267 = insertelement <8 x float> %266, float %260, i32 2
  %268 = insertelement <8 x float> %267, float %258, i32 3
  %269 = insertelement <8 x float> %268, float %256, i32 4
  %270 = insertelement <8 x float> %269, float %254, i32 5
  %271 = insertelement <8 x float> %270, float %252, i32 6
  %272 = insertelement <8 x float> %271, float %250, i32 7
  %273 = bitcast <8 x float> %248 to <4 x i64>
  %274 = shufflevector <4 x i64> %273, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %275 = shufflevector <4 x i64> %273, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %276 = and <2 x i64> %274, <i64 -17587891081216, i64 -17587891081216>
  %277 = and <2 x i64> %275, <i64 -17587891081216, i64 -17587891081216>
  %278 = shufflevector <2 x i64> %276, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %279 = shufflevector <2 x i64> %277, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %280 = shufflevector <4 x i64> %278, <4 x i64> %279, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %281 = bitcast <4 x i64> %280 to <8 x float>
  %282 = fsub <8 x float> %248, %281
  %283 = fmul <8 x float> %248, %59
  %284 = bitcast <8 x float> %283 to <4 x i64>
  %285 = xor <4 x i64> %284, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %286 = bitcast <4 x i64> %285 to <8 x float>
  %287 = fmul <8 x float> %113, %281
  %288 = fadd <8 x float> %287, %286
  %289 = fmul <8 x float> %282, %113
  %290 = fadd <8 x float> %289, %288
  %291 = fmul <8 x float> %114, %281
  %292 = fadd <8 x float> %291, %290
  %293 = fmul <8 x float> %114, %282
  %294 = fadd <8 x float> %293, %292
  %295 = fmul <8 x float> %272, %59
  %296 = fadd <8 x float> %295, %294
  %297 = fadd <8 x float> %283, %222
  %298 = fsub <8 x float> %297, %222
  %299 = fsub <8 x float> %297, %298
  %300 = fsub <8 x float> %222, %299
  %301 = fsub <8 x float> %283, %298
  %302 = fadd <8 x float> %301, %300
  %303 = fadd <8 x float> %224, %296
  %304 = fadd <8 x float> %302, %303
  %305 = fadd <8 x float> %297, %304
  %306 = fsub <8 x float> %297, %305
  %307 = fadd <8 x float> %304, %306
  %308 = bitcast <8 x float> %305 to <4 x i64>
  %309 = shufflevector <4 x i64> %308, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %310 = shufflevector <4 x i64> %308, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %311 = and <2 x i64> %309, <i64 -17587891081216, i64 -17587891081216>
  %312 = and <2 x i64> %310, <i64 -17587891081216, i64 -17587891081216>
  %313 = shufflevector <2 x i64> %311, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %314 = shufflevector <2 x i64> %312, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %315 = shufflevector <4 x i64> %313, <4 x i64> %314, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %316 = bitcast <4 x i64> %315 to <8 x float>
  %317 = fsub <8 x float> %305, %316
  %318 = fmul <8 x float> %305, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %319 = bitcast <8 x float> %318 to <4 x i64>
  %320 = xor <4 x i64> %319, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %321 = bitcast <4 x i64> %320 to <8 x float>
  %322 = fmul <8 x float> %316, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %323 = fadd <8 x float> %322, %321
  %324 = fmul <8 x float> %317, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %325 = fadd <8 x float> %324, %323
  %326 = fmul <8 x float> %316, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %327 = fadd <8 x float> %326, %325
  %328 = fmul <8 x float> %317, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %329 = fadd <8 x float> %328, %327
  %330 = fmul <8 x float> %305, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %331 = fadd <8 x float> %330, %329
  %332 = fmul <8 x float> %307, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %333 = fadd <8 x float> %332, %331
  %334 = and <4 x i64> %58, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %335 = bitcast <4 x i64> %334 to <8 x float>
  %336 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %335, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #8
  %337 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %318, <8 x float> %59, <8 x float> %336) #8
  %338 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %333, <8 x float> zeroinitializer, <8 x float> %336) #8
  %339 = bitcast <4 x i32> %218 to <2 x i64>
  %340 = bitcast <4 x i32> %221 to <2 x i64>
  %341 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %342 = fcmp uno <8 x float> %0, zeroinitializer
  %343 = or <8 x i1> %341, %342
  %344 = sext <8 x i1> %343 to <8 x i32>
  %345 = bitcast <8 x i32> %344 to <4 x i64>
  %346 = bitcast <8 x float> %337 to <4 x i64>
  %347 = or <4 x i64> %346, %345
  %348 = bitcast <4 x i64> %347 to <8 x float>
  %349 = bitcast <8 x float> %338 to <4 x i64>
  %350 = or <4 x i64> %349, %345
  %351 = bitcast <4 x i64> %350 to <8 x float>
  br label %352

; <label>:352:                                    ; preds = %37, %12
  %353 = phi <4 x i32> [ %42, %37 ], [ %36, %12 ]
  %354 = phi <4 x i32> [ %40, %37 ], [ %35, %12 ]
  %355 = phi <8 x float> [ %348, %37 ], [ %29, %12 ]
  %356 = phi <8 x float> [ %351, %37 ], [ %32, %12 ]
  %357 = phi <2 x i64> [ %339, %37 ], [ %17, %12 ]
  %358 = phi <2 x i64> [ %340, %37 ], [ %18, %12 ]
  %359 = bitcast <2 x i64> %357 to <4 x i32>
  %360 = and <4 x i32> %359, <i32 1, i32 1, i32 1, i32 1>
  %361 = icmp ne <4 x i32> %360, zeroinitializer
  %362 = sext <4 x i1> %361 to <4 x i32>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = bitcast <2 x i64> %358 to <4 x i32>
  %365 = and <4 x i32> %364, <i32 1, i32 1, i32 1, i32 1>
  %366 = icmp ne <4 x i32> %365, zeroinitializer
  %367 = sext <4 x i1> %366 to <4 x i32>
  %368 = bitcast <4 x i32> %367 to <2 x i64>
  %369 = shufflevector <2 x i64> %363, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %370 = shufflevector <2 x i64> %368, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %371 = shufflevector <4 x i64> %369, <4 x i64> %370, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %372 = and <4 x i64> %371, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %373 = bitcast <8 x float> %355 to <4 x i64>
  %374 = xor <4 x i64> %372, %373
  %375 = bitcast <4 x i64> %374 to <8 x float>
  %376 = bitcast <8 x float> %356 to <4 x i64>
  %377 = xor <4 x i64> %372, %376
  %378 = bitcast <4 x i64> %377 to <8 x float>
  %379 = shufflevector <4 x i64> %374, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %380 = shufflevector <4 x i64> %374, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %381 = and <2 x i64> %379, <i64 -17587891081216, i64 -17587891081216>
  %382 = and <2 x i64> %380, <i64 -17587891081216, i64 -17587891081216>
  %383 = shufflevector <2 x i64> %381, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %384 = shufflevector <2 x i64> %382, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %385 = shufflevector <4 x i64> %383, <4 x i64> %384, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %386 = bitcast <4 x i64> %385 to <8 x float>
  %387 = fsub <8 x float> %375, %386
  %388 = fmul <8 x float> %375, %375
  %389 = bitcast <8 x float> %388 to <4 x i64>
  %390 = xor <4 x i64> %389, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %391 = bitcast <4 x i64> %390 to <8 x float>
  %392 = fmul <8 x float> %386, %386
  %393 = fadd <8 x float> %392, %391
  %394 = fadd <8 x float> %386, %386
  %395 = fmul <8 x float> %394, %387
  %396 = fadd <8 x float> %395, %393
  %397 = fmul <8 x float> %387, %387
  %398 = fadd <8 x float> %397, %396
  %399 = fadd <8 x float> %378, %378
  %400 = fmul <8 x float> %399, %375
  %401 = fadd <8 x float> %400, %398
  %402 = fadd <8 x float> %388, %401
  %403 = fsub <8 x float> %388, %402
  %404 = fadd <8 x float> %401, %403
  %405 = fmul <8 x float> %402, <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>
  %406 = fadd <8 x float> %405, <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>
  %407 = fmul <8 x float> %402, %406
  %408 = fadd <8 x float> %407, <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>
  %409 = fmul <8 x float> %402, %408
  %410 = fadd <8 x float> %409, <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>
  %411 = fmul <8 x float> %402, %410
  %412 = fadd <8 x float> %411, <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>
  %413 = fmul <8 x float> %402, %412
  %414 = fadd <8 x float> %413, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %415 = fsub <8 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %414
  %416 = fadd <8 x float> %413, %415
  %417 = bitcast <8 x float> %402 to <4 x i64>
  %418 = shufflevector <4 x i64> %417, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %419 = shufflevector <4 x i64> %417, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %420 = and <2 x i64> %418, <i64 -17587891081216, i64 -17587891081216>
  %421 = and <2 x i64> %419, <i64 -17587891081216, i64 -17587891081216>
  %422 = shufflevector <2 x i64> %420, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %423 = shufflevector <2 x i64> %421, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %424 = shufflevector <4 x i64> %422, <4 x i64> %423, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %425 = bitcast <4 x i64> %424 to <8 x float>
  %426 = fsub <8 x float> %402, %425
  %427 = bitcast <8 x float> %414 to <4 x i64>
  %428 = shufflevector <4 x i64> %427, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %429 = shufflevector <4 x i64> %427, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %430 = and <2 x i64> %428, <i64 -17587891081216, i64 -17587891081216>
  %431 = and <2 x i64> %429, <i64 -17587891081216, i64 -17587891081216>
  %432 = shufflevector <2 x i64> %430, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %433 = shufflevector <2 x i64> %431, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %434 = shufflevector <4 x i64> %432, <4 x i64> %433, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %435 = bitcast <4 x i64> %434 to <8 x float>
  %436 = fsub <8 x float> %414, %435
  %437 = fmul <8 x float> %402, %414
  %438 = bitcast <8 x float> %437 to <4 x i64>
  %439 = xor <4 x i64> %438, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %440 = bitcast <4 x i64> %439 to <8 x float>
  %441 = fmul <8 x float> %425, %435
  %442 = fadd <8 x float> %441, %440
  %443 = fmul <8 x float> %426, %435
  %444 = fadd <8 x float> %443, %442
  %445 = fmul <8 x float> %436, %425
  %446 = fadd <8 x float> %445, %444
  %447 = fmul <8 x float> %426, %436
  %448 = fadd <8 x float> %447, %446
  %449 = fmul <8 x float> %402, %416
  %450 = fadd <8 x float> %449, %448
  %451 = fmul <8 x float> %404, %414
  %452 = fadd <8 x float> %451, %450
  %453 = fadd <8 x float> %437, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %454 = fsub <8 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %453
  %455 = fadd <8 x float> %437, %454
  %456 = fadd <8 x float> %455, %452
  %457 = bitcast <8 x float> %453 to <4 x i64>
  %458 = shufflevector <4 x i64> %457, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %459 = shufflevector <4 x i64> %457, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %460 = and <2 x i64> %458, <i64 -17587891081216, i64 -17587891081216>
  %461 = and <2 x i64> %459, <i64 -17587891081216, i64 -17587891081216>
  %462 = shufflevector <2 x i64> %460, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %463 = shufflevector <2 x i64> %461, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %464 = shufflevector <4 x i64> %462, <4 x i64> %463, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %465 = bitcast <4 x i64> %464 to <8 x float>
  %466 = fsub <8 x float> %453, %465
  %467 = fmul <8 x float> %402, %453
  %468 = bitcast <8 x float> %467 to <4 x i64>
  %469 = xor <4 x i64> %468, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %470 = bitcast <4 x i64> %469 to <8 x float>
  %471 = fmul <8 x float> %425, %465
  %472 = fadd <8 x float> %471, %470
  %473 = fmul <8 x float> %466, %425
  %474 = fadd <8 x float> %473, %472
  %475 = fmul <8 x float> %426, %465
  %476 = fadd <8 x float> %475, %474
  %477 = fmul <8 x float> %426, %466
  %478 = fadd <8 x float> %477, %476
  %479 = fmul <8 x float> %404, %453
  %480 = fadd <8 x float> %479, %478
  %481 = fmul <8 x float> %402, %456
  %482 = fadd <8 x float> %480, %481
  %483 = fadd <8 x float> %467, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %484 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %483
  %485 = fadd <8 x float> %467, %484
  %486 = fadd <8 x float> %485, %482
  %487 = bitcast <8 x float> %483 to <4 x i64>
  %488 = shufflevector <4 x i64> %487, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %489 = shufflevector <4 x i64> %487, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %490 = and <2 x i64> %488, <i64 -17587891081216, i64 -17587891081216>
  %491 = and <2 x i64> %489, <i64 -17587891081216, i64 -17587891081216>
  %492 = shufflevector <2 x i64> %490, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %493 = shufflevector <2 x i64> %491, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %494 = shufflevector <4 x i64> %492, <4 x i64> %493, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %495 = bitcast <4 x i64> %494 to <8 x float>
  %496 = fsub <8 x float> %483, %495
  %497 = fmul <8 x float> %483, %375
  %498 = bitcast <8 x float> %497 to <4 x i64>
  %499 = xor <4 x i64> %498, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %500 = bitcast <4 x i64> %499 to <8 x float>
  %501 = fmul <8 x float> %386, %495
  %502 = fadd <8 x float> %501, %500
  %503 = fmul <8 x float> %387, %495
  %504 = fadd <8 x float> %503, %502
  %505 = fmul <8 x float> %496, %386
  %506 = fadd <8 x float> %505, %504
  %507 = fmul <8 x float> %387, %496
  %508 = fadd <8 x float> %507, %506
  %509 = fmul <8 x float> %486, %375
  %510 = fadd <8 x float> %508, %509
  %511 = fmul <8 x float> %483, %378
  %512 = fadd <8 x float> %511, %510
  %513 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %497
  %514 = shufflevector <4 x i64> %498, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %515 = shufflevector <4 x i64> %498, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %516 = and <2 x i64> %514, <i64 -17587891081216, i64 -17587891081216>
  %517 = and <2 x i64> %515, <i64 -17587891081216, i64 -17587891081216>
  %518 = shufflevector <2 x i64> %516, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %519 = shufflevector <2 x i64> %517, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %520 = shufflevector <4 x i64> %518, <4 x i64> %519, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %521 = bitcast <4 x i64> %520 to <8 x float>
  %522 = fsub <8 x float> %497, %521
  %523 = bitcast <8 x float> %513 to <4 x i64>
  %524 = shufflevector <4 x i64> %523, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %525 = shufflevector <4 x i64> %523, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %526 = and <2 x i64> %524, <i64 -17587891081216, i64 -17587891081216>
  %527 = and <2 x i64> %525, <i64 -17587891081216, i64 -17587891081216>
  %528 = shufflevector <2 x i64> %526, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %529 = shufflevector <2 x i64> %527, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %530 = shufflevector <4 x i64> %528, <4 x i64> %529, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %531 = bitcast <4 x i64> %530 to <8 x float>
  %532 = fsub <8 x float> %513, %531
  %533 = fmul <8 x float> %521, %531
  %534 = fadd <8 x float> %533, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %535 = fmul <8 x float> %532, %521
  %536 = fadd <8 x float> %535, %534
  %537 = fmul <8 x float> %522, %531
  %538 = fadd <8 x float> %537, %536
  %539 = fmul <8 x float> %522, %532
  %540 = fadd <8 x float> %539, %538
  %541 = fmul <8 x float> %513, %512
  %542 = fadd <8 x float> %540, %541
  %543 = xor <4 x i64> %523, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %544 = bitcast <4 x i64> %543 to <8 x float>
  %545 = fmul <8 x float> %542, %544
  %546 = bitcast <4 x i64> %371 to <8 x float>
  %547 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %497, <8 x float> %513, <8 x float> %546) #8
  %548 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %512, <8 x float> %545, <8 x float> %546) #8
  %549 = fadd <8 x float> %547, %548
  %550 = icmp eq <4 x i32> %354, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %551 = sext <4 x i1> %550 to <4 x i32>
  %552 = bitcast <4 x i32> %551 to <2 x i64>
  %553 = icmp eq <4 x i32> %353, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %554 = sext <4 x i1> %553 to <4 x i32>
  %555 = bitcast <4 x i32> %554 to <2 x i64>
  %556 = shufflevector <2 x i64> %552, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %557 = shufflevector <2 x i64> %555, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %558 = shufflevector <4 x i64> %556, <4 x i64> %557, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %559 = bitcast <4 x i64> %558 to <8 x float>
  %560 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %549, <8 x float> %0, <8 x float> %559) #8
  ret <8 x float> %560
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5 = bitcast <2 x i64> %3 to <4 x i32>
  %6 = ashr <4 x i32> %5, <i32 31, i32 31, i32 31, i32 31>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %4 to <4 x i32>
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %7, <i64 8589934594, i64 8589934594>
  %12 = and <2 x i64> %10, <i64 8589934594, i64 8589934594>
  %13 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <4 x i64> %13 to <8 x float>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = bitcast <2 x i64> %12 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %14, i8 17) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %16 to <16 x i8>
  %25 = bitcast <2 x i64> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #8
  %27 = bitcast <2 x i64> %12 to <16 x i8>
  %28 = bitcast <4 x i32> %18 to <16 x i8>
  %29 = bitcast <2 x i64> %22 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %31, <8 x float> %19) #8
  %33 = fmul <8 x float> %32, %32
  %34 = fmul <8 x float> %33, %33
  %35 = fmul <8 x float> %34, %34
  %36 = fmul <8 x float> %33, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %37 = fadd <8 x float> %36, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %38 = fmul <8 x float> %33, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %39 = fadd <8 x float> %38, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %40 = fmul <8 x float> %34, %37
  %41 = fadd <8 x float> %39, %40
  %42 = fmul <8 x float> %33, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %43 = fadd <8 x float> %42, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %44 = fmul <8 x float> %33, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %45 = fadd <8 x float> %44, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %46 = fmul <8 x float> %34, %43
  %47 = fadd <8 x float> %45, %46
  %48 = fmul <8 x float> %35, %41
  %49 = fadd <8 x float> %47, %48
  %50 = fmul <8 x float> %33, %49
  %51 = fmul <8 x float> %32, %50
  %52 = fadd <8 x float> %32, %51
  %53 = bitcast <16 x i8> %26 to <4 x i32>
  %54 = and <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = icmp ne <4 x i32> %54, zeroinitializer
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = bitcast <16 x i8> %30 to <4 x i32>
  %59 = and <4 x i32> %58, <i32 1, i32 1, i32 1, i32 1>
  %60 = icmp ne <4 x i32> %59, zeroinitializer
  %61 = sext <4 x i1> %60 to <4 x i32>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %52
  %67 = bitcast <4 x i64> %65 to <8 x float>
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %52, <8 x float> %66, <8 x float> %67) #8
  %69 = and <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %70 = icmp ne <4 x i32> %69, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i32>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = and <4 x i32> %58, <i32 2, i32 2, i32 2, i32 2>
  %74 = icmp ne <4 x i32> %73, zeroinitializer
  %75 = sext <4 x i1> %74 to <4 x i32>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = and <4 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <8 x float> %68 to <4 x i64>
  %82 = xor <4 x i64> %80, %81
  %83 = bitcast <4 x i64> %82 to <8 x float>
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u35avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = ashr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = bitcast <2 x i64> %8 to <4 x i32>
  %13 = ashr <4 x i32> %12, <i32 31, i32 31, i32 31, i32 31>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = and <2 x i64> %11, <i64 -4294967298, i64 -4294967298>
  %16 = and <2 x i64> %14, <i64 -4294967298, i64 -4294967298>
  %17 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <2 x i64> %15 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %16 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %18, <8 x float> %5, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = bitcast <2 x i64> %15 to <16 x i8>
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %25 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %16 to <16 x i8>
  %32 = bitcast <4 x i32> %22 to <16 x i8>
  %33 = bitcast <2 x i64> %26 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <16 x i8> %30 to <2 x i64>
  %36 = bitcast <16 x i8> %34 to <2 x i64>
  %37 = or <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %38, <8 x float> %23) #8
  %40 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %18, <8 x float> %5) #8
  %41 = fdiv <8 x float> %39, %40
  %42 = fmul <8 x float> %41, %41
  %43 = fmul <8 x float> %42, %42
  %44 = fmul <8 x float> %43, %43
  %45 = fmul <8 x float> %42, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %46 = fadd <8 x float> %45, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %47 = fmul <8 x float> %42, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %48 = fadd <8 x float> %47, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %49 = fmul <8 x float> %43, %46
  %50 = fadd <8 x float> %48, %49
  %51 = fmul <8 x float> %42, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %52 = fadd <8 x float> %51, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %53 = fmul <8 x float> %42, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %54 = fadd <8 x float> %53, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %55 = fmul <8 x float> %43, %52
  %56 = fadd <8 x float> %54, %55
  %57 = fmul <8 x float> %44, %50
  %58 = fadd <8 x float> %56, %57
  %59 = fmul <8 x float> %42, %58
  %60 = fmul <8 x float> %41, %59
  %61 = fadd <8 x float> %41, %60
  %62 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x i64> %62, <4 x i64> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %65) #8
  %67 = fmul <8 x float> %66, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %68 = fadd <8 x float> %67, %61
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = xor <4 x i64> %70, %69
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = fcmp oeq <8 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %74 = sext <8 x i1> %73 to <8 x i32>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = fcmp oeq <8 x float> %1, zeroinitializer
  %77 = or <8 x i1> %73, %76
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = or <4 x i64> %70, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %80 = and <4 x i64> %79, %75
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %81
  %83 = bitcast <8 x i32> %78 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %82, <8 x float> %83) #8
  %85 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %86 = sext <8 x i1> %85 to <8 x i32>
  %87 = or <4 x i64> %70, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %88 = and <4 x i64> %87, %75
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %89
  %91 = bitcast <8 x i32> %86 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %84, <8 x float> %90, <8 x float> %91) #8
  %93 = fcmp oeq <8 x float> %0, zeroinitializer
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = shufflevector <2 x i64> %11, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <4 x i64> %95, <4 x i64> %96, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %98 = and <4 x i64> %97, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = bitcast <8 x i32> %94 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %92, <8 x float> %99, <8 x float> %100) #8
  %102 = fcmp uno <8 x float> %0, %1
  %103 = sext <8 x i1> %102 to <8 x i32>
  %104 = bitcast <8 x i32> %103 to <4 x i64>
  %105 = bitcast <8 x float> %101 to <4 x i64>
  %106 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %105
  %108 = or <4 x i64> %107, %104
  %109 = bitcast <4 x i64> %108 to <8 x float>
  ret <8 x float> %109
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #8
  %12 = fmul <8 x float> %9, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %13 = fadd <8 x float> %12, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %14 = fmul <8 x float> %9, %13
  %15 = fadd <8 x float> %14, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %16 = fmul <8 x float> %9, %15
  %17 = fadd <8 x float> %16, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %18 = fmul <8 x float> %9, %17
  %19 = fadd <8 x float> %18, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %20 = fmul <8 x float> %9, %11
  %21 = fmul <8 x float> %20, %19
  %22 = fadd <8 x float> %11, %21
  %23 = fmul <8 x float> %22, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %24 = fadd <8 x float> %23, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %24, <8 x float> %22, <8 x float> %5) #8
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = xor <4 x i64> %27, %26
  %29 = bitcast <4 x i64> %28 to <8 x float>
  ret <8 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #8
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #8
  %17 = fmul <8 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %18 = fadd <8 x float> %17, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %19 = fmul <8 x float> %10, %18
  %20 = fadd <8 x float> %19, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %21 = fmul <8 x float> %10, %20
  %22 = fadd <8 x float> %21, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %23 = fmul <8 x float> %10, %22
  %24 = fadd <8 x float> %23, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %25 = fmul <8 x float> %10, %16
  %26 = fmul <8 x float> %25, %24
  %27 = bitcast <8 x float> %16 to <4 x i64>
  %28 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = xor <4 x i64> %28, %27
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = bitcast <8 x float> %26 to <4 x i64>
  %32 = xor <4 x i64> %28, %31
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fadd <8 x float> %30, %33
  %35 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %34
  %36 = fadd <8 x float> %16, %26
  %37 = fmul <8 x float> %36, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %37, <8 x float> %35, <8 x float> %5) #8
  %39 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %42 = and <4 x i64> %40, %41
  %43 = bitcast <8 x float> %38 to <4 x i64>
  %44 = xor <4 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fadd <8 x float> %45, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %47 = bitcast <4 x i64> %42 to <8 x float>
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> %46, <8 x float> %47) #8
  ret <8 x float> %48
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u10avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i8 17) #8
  %7 = fmul <8 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %7, <8 x float> %6) #8
  %9 = fmul <8 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %9, <8 x float> %6) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> zeroinitializer, i8 17) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %20) #8
  %22 = and <4 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %23 = bitcast <8 x float> %8 to <4 x i64>
  %24 = xor <4 x i64> %22, %23
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = bitcast <4 x i64> %22 to <8 x float>
  %27 = bitcast <16 x i8> %19 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %29 = bitcast <16 x i8> %21 to <4 x i32>
  %30 = add <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %25, <8 x float> %13, i8 17) #8
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %34 = shufflevector <4 x i64> %32, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %35 = bitcast <4 x i32> %28 to <16 x i8>
  %36 = bitcast <2 x i64> %33 to <16 x i8>
  %37 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %19, <16 x i8> %35, <16 x i8> %36) #8
  %38 = bitcast <4 x i32> %30 to <16 x i8>
  %39 = bitcast <2 x i64> %34 to <16 x i8>
  %40 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %21, <16 x i8> %38, <16 x i8> %39) #8
  %41 = bitcast <16 x i8> %37 to <2 x i64>
  %42 = bitcast <16 x i8> %40 to <2 x i64>
  %43 = xor <4 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = xor <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <4 x i64> %43 to <8 x float>
  %46 = bitcast <4 x i64> %44 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %45, <8 x float> %31) #8
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %46, <8 x float> %31) #8
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %25, <8 x float> %13, <8 x float> %31) #8
  %50 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %26, <8 x float> zeroinitializer, <8 x float> %31) #8
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %52 = bitcast <8 x float> %49 to <4 x i64>
  %53 = shufflevector <4 x i64> %52, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %54 = shufflevector <4 x i64> %52, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %55 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %56 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fsub <8 x float> %49, %60
  %62 = bitcast <8 x float> %51 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %51, %70
  %72 = bitcast <8 x float> %47 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %47, %80
  %82 = fmul <8 x float> %47, %51
  %83 = fmul <8 x float> %60, %70
  %84 = fadd <8 x float> %83, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %85 = fmul <8 x float> %71, %60
  %86 = fadd <8 x float> %85, %84
  %87 = fmul <8 x float> %61, %70
  %88 = fadd <8 x float> %87, %86
  %89 = fmul <8 x float> %61, %71
  %90 = fadd <8 x float> %89, %88
  %91 = bitcast <8 x float> %90 to <4 x i64>
  %92 = xor <4 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <4 x i64> %92 to <8 x float>
  %94 = bitcast <8 x float> %82 to <4 x i64>
  %95 = xor <4 x i64> %94, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %96 = bitcast <4 x i64> %95 to <8 x float>
  %97 = fmul <8 x float> %80, %70
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %71, %80
  %100 = fadd <8 x float> %99, %98
  %101 = fmul <8 x float> %81, %70
  %102 = fadd <8 x float> %101, %100
  %103 = fmul <8 x float> %81, %71
  %104 = fadd <8 x float> %103, %102
  %105 = fmul <8 x float> %82, %93
  %106 = fadd <8 x float> %104, %105
  %107 = fmul <8 x float> %50, %82
  %108 = fsub <8 x float> %48, %107
  %109 = fmul <8 x float> %51, %108
  %110 = fadd <8 x float> %109, %106
  %111 = shufflevector <4 x i64> %94, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %112 = shufflevector <4 x i64> %94, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %113 = and <2 x i64> %111, <i64 -17587891081216, i64 -17587891081216>
  %114 = and <2 x i64> %112, <i64 -17587891081216, i64 -17587891081216>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <2 x i64> %114, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <4 x i64> %115, <4 x i64> %116, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %118 = bitcast <4 x i64> %117 to <8 x float>
  %119 = fsub <8 x float> %82, %118
  %120 = fmul <8 x float> %82, %82
  %121 = bitcast <8 x float> %120 to <4 x i64>
  %122 = xor <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fmul <8 x float> %118, %118
  %125 = fadd <8 x float> %124, %123
  %126 = fadd <8 x float> %118, %118
  %127 = fmul <8 x float> %126, %119
  %128 = fadd <8 x float> %127, %125
  %129 = fmul <8 x float> %119, %119
  %130 = fadd <8 x float> %129, %128
  %131 = fadd <8 x float> %110, %110
  %132 = fmul <8 x float> %82, %131
  %133 = fadd <8 x float> %130, %132
  %134 = fadd <8 x float> %120, %133
  %135 = fsub <8 x float> %120, %134
  %136 = fadd <8 x float> %133, %135
  %137 = fmul <8 x float> %134, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %138 = fadd <8 x float> %137, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %139 = fmul <8 x float> %134, %138
  %140 = fadd <8 x float> %139, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %141 = fmul <8 x float> %134, %140
  %142 = fadd <8 x float> %141, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %143 = fmul <8 x float> %134, %142
  %144 = fadd <8 x float> %143, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %145 = fmul <8 x float> %134, %144
  %146 = fadd <8 x float> %145, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %147 = fmul <8 x float> %134, %146
  %148 = fadd <8 x float> %147, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %149 = fmul <8 x float> %134, %148
  %150 = fadd <8 x float> %149, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %151 = fmul <8 x float> %134, %150
  %152 = fadd <8 x float> %151, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %153 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %152
  %154 = fadd <8 x float> %151, %153
  %155 = bitcast <8 x float> %134 to <4 x i64>
  %156 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %157 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %158 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %159 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %160 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = shufflevector <2 x i64> %159, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <4 x i64> %160, <4 x i64> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fsub <8 x float> %134, %163
  %165 = bitcast <8 x float> %152 to <4 x i64>
  %166 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %167 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %168 = and <2 x i64> %166, <i64 -17587891081216, i64 -17587891081216>
  %169 = and <2 x i64> %167, <i64 -17587891081216, i64 -17587891081216>
  %170 = shufflevector <2 x i64> %168, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = shufflevector <2 x i64> %169, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %172 = shufflevector <4 x i64> %170, <4 x i64> %171, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %173 = bitcast <4 x i64> %172 to <8 x float>
  %174 = fsub <8 x float> %152, %173
  %175 = fmul <8 x float> %134, %152
  %176 = bitcast <8 x float> %175 to <4 x i64>
  %177 = xor <4 x i64> %176, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %178 = bitcast <4 x i64> %177 to <8 x float>
  %179 = fmul <8 x float> %163, %173
  %180 = fadd <8 x float> %179, %178
  %181 = fmul <8 x float> %164, %173
  %182 = fadd <8 x float> %181, %180
  %183 = fmul <8 x float> %174, %163
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %164, %174
  %186 = fadd <8 x float> %185, %184
  %187 = fmul <8 x float> %134, %154
  %188 = fadd <8 x float> %187, %186
  %189 = fmul <8 x float> %136, %152
  %190 = fadd <8 x float> %189, %188
  %191 = fadd <8 x float> %175, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %192 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %191
  %193 = fadd <8 x float> %175, %192
  %194 = fadd <8 x float> %193, %190
  %195 = bitcast <8 x float> %191 to <4 x i64>
  %196 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = shufflevector <4 x i64> %195, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %198 = and <2 x i64> %196, <i64 -17587891081216, i64 -17587891081216>
  %199 = and <2 x i64> %197, <i64 -17587891081216, i64 -17587891081216>
  %200 = shufflevector <2 x i64> %198, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %201 = shufflevector <2 x i64> %199, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %202 = shufflevector <4 x i64> %200, <4 x i64> %201, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %203 = bitcast <4 x i64> %202 to <8 x float>
  %204 = fsub <8 x float> %191, %203
  %205 = fmul <8 x float> %82, %191
  %206 = bitcast <8 x float> %205 to <4 x i64>
  %207 = xor <4 x i64> %206, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %208 = bitcast <4 x i64> %207 to <8 x float>
  %209 = fmul <8 x float> %118, %203
  %210 = fadd <8 x float> %209, %208
  %211 = fmul <8 x float> %119, %203
  %212 = fadd <8 x float> %211, %210
  %213 = fmul <8 x float> %204, %118
  %214 = fadd <8 x float> %213, %212
  %215 = fmul <8 x float> %119, %204
  %216 = fadd <8 x float> %215, %214
  %217 = fmul <8 x float> %82, %194
  %218 = fadd <8 x float> %216, %217
  %219 = fmul <8 x float> %110, %191
  %220 = fadd <8 x float> %219, %218
  %221 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %223 = shufflevector <4 x i64> %221, <4 x i64> %222, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %224 = bitcast <4 x i64> %223 to <8 x i32>
  %225 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %224) #8
  %226 = bitcast <8 x float> %225 to <4 x i64>
  %227 = shufflevector <4 x i64> %226, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %228 = shufflevector <4 x i64> %226, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %229 = and <2 x i64> %227, <i64 -17587891081216, i64 -17587891081216>
  %230 = and <2 x i64> %228, <i64 -17587891081216, i64 -17587891081216>
  %231 = shufflevector <2 x i64> %229, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <2 x i64> %230, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %233 = shufflevector <4 x i64> %231, <4 x i64> %232, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %234 = bitcast <4 x i64> %233 to <8 x float>
  %235 = fsub <8 x float> %225, %234
  %236 = fmul <8 x float> %225, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %237 = bitcast <8 x float> %236 to <4 x i64>
  %238 = xor <4 x i64> %237, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %239 = bitcast <4 x i64> %238 to <8 x float>
  %240 = fmul <8 x float> %234, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %241 = fadd <8 x float> %240, %239
  %242 = fmul <8 x float> %234, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %243 = fadd <8 x float> %242, %241
  %244 = fmul <8 x float> %235, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %245 = fadd <8 x float> %244, %243
  %246 = fmul <8 x float> %235, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %225, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %249 = fadd <8 x float> %248, %247
  %250 = fadd <8 x float> %236, %205
  %251 = fsub <8 x float> %236, %250
  %252 = fadd <8 x float> %205, %251
  %253 = fadd <8 x float> %249, %252
  %254 = fadd <8 x float> %253, %220
  %255 = fadd <8 x float> %250, %254
  %256 = bitcast <8 x float> %255 to <4 x i64>
  %257 = and <4 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %258 = xor <4 x i64> %257, %256
  %259 = bitcast <4 x i64> %258 to <8 x float>
  %260 = and <4 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %261 = bitcast <4 x i64> %260 to <8 x float>
  %262 = fcmp oeq <8 x float> %261, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %263 = sext <8 x i1> %262 to <8 x i32>
  %264 = bitcast <8 x i32> %263 to <4 x i64>
  %265 = fcmp oeq <8 x float> %8, zeroinitializer
  %266 = or <8 x i1> %262, %265
  %267 = sext <8 x i1> %266 to <8 x i32>
  %268 = or <4 x i64> %257, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %269 = and <4 x i64> %268, %264
  %270 = bitcast <4 x i64> %269 to <8 x float>
  %271 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %270
  %272 = bitcast <8 x i32> %267 to <8 x float>
  %273 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %259, <8 x float> %271, <8 x float> %272) #8
  %274 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %275 = sext <8 x i1> %274 to <8 x i32>
  %276 = or <4 x i64> %257, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %277 = and <4 x i64> %276, %264
  %278 = bitcast <4 x i64> %277 to <8 x float>
  %279 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %278
  %280 = bitcast <8 x i32> %275 to <8 x float>
  %281 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %273, <8 x float> %279, <8 x float> %280) #8
  %282 = fcmp oeq <8 x float> %10, zeroinitializer
  %283 = sext <8 x i1> %282 to <8 x i32>
  %284 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %285 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %286 = bitcast <2 x i64> %284 to <4 x i32>
  %287 = ashr <4 x i32> %286, <i32 31, i32 31, i32 31, i32 31>
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = bitcast <2 x i64> %285 to <4 x i32>
  %290 = ashr <4 x i32> %289, <i32 31, i32 31, i32 31, i32 31>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %293 = shufflevector <2 x i64> %291, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %294 = shufflevector <4 x i64> %292, <4 x i64> %293, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %295 = and <4 x i64> %294, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %296 = bitcast <4 x i64> %295 to <8 x float>
  %297 = bitcast <8 x i32> %283 to <8 x float>
  %298 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %281, <8 x float> %296, <8 x float> %297) #8
  %299 = fcmp uno <8 x float> %10, %8
  %300 = sext <8 x i1> %299 to <8 x i32>
  %301 = bitcast <8 x i32> %300 to <4 x i64>
  %302 = bitcast <8 x float> %298 to <4 x i64>
  %303 = and <4 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %304 = xor <4 x i64> %303, %302
  %305 = or <4 x i64> %304, %301
  %306 = bitcast <4 x i64> %305 to <8 x float>
  ret <8 x float> %306
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %15 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %16 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %17 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <4 x i64> %16, <4 x i64> %17, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %19 = bitcast <4 x i64> %18 to <8 x float>
  %20 = fsub <8 x float> %10, %19
  %21 = fmul <8 x float> %10, %10
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = xor <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fmul <8 x float> %19, %19
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %20, %19
  %28 = fadd <8 x float> %27, %26
  %29 = fadd <8 x float> %27, %28
  %30 = fmul <8 x float> %20, %20
  %31 = fadd <8 x float> %30, %29
  %32 = fadd <8 x float> %9, %21
  %33 = fsub <8 x float> %32, %9
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %9, %34
  %36 = fsub <8 x float> %21, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %37, %31
  %39 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fsub <8 x float> %39, %48
  %50 = fmul <8 x float> %19, %48
  %51 = fadd <8 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <8 x float> %49, %19
  %53 = fadd <8 x float> %52, %51
  %54 = fmul <8 x float> %20, %48
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %20, %49
  %57 = fadd <8 x float> %56, %55
  %58 = xor <4 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = fmul <8 x float> %57, %59
  %61 = bitcast <8 x float> %32 to <4 x i64>
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %63 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %64 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fsub <8 x float> %32, %69
  %71 = fmul <8 x float> %39, %32
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = xor <4 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = fmul <8 x float> %48, %69
  %76 = fadd <8 x float> %75, %74
  %77 = fmul <8 x float> %70, %48
  %78 = fadd <8 x float> %77, %76
  %79 = fmul <8 x float> %49, %69
  %80 = fadd <8 x float> %79, %78
  %81 = fmul <8 x float> %49, %70
  %82 = fadd <8 x float> %81, %80
  %83 = fmul <8 x float> %32, %60
  %84 = fadd <8 x float> %82, %83
  %85 = fmul <8 x float> %39, %38
  %86 = fadd <8 x float> %85, %84
  %87 = fmul <8 x float> %71, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %88 = fmul <8 x float> %86, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %89 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %87, <8 x float> %4, <8 x float> %5) #8
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> zeroinitializer, <8 x float> %5) #8
  %91 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %89, <8 x float> zeroinitializer, <8 x float> %93) #8
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> zeroinitializer, <8 x float> %93) #8
  %96 = fmul <8 x float> %9, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %97 = fadd <8 x float> %96, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %98 = fmul <8 x float> %9, %97
  %99 = fadd <8 x float> %98, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %100 = fmul <8 x float> %9, %99
  %101 = fadd <8 x float> %100, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %102 = fmul <8 x float> %9, %101
  %103 = fadd <8 x float> %102, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %104 = fmul <8 x float> %9, %94
  %105 = fmul <8 x float> %104, %103
  %106 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %94
  %107 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %106
  %108 = fsub <8 x float> %107, %94
  %109 = fadd <8 x float> %108, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %110 = fsub <8 x float> %109, %95
  %111 = fsub <8 x float> %106, %105
  %112 = fsub <8 x float> %106, %111
  %113 = fsub <8 x float> %112, %105
  %114 = fadd <8 x float> %110, %113
  %115 = fadd <8 x float> %94, %105
  %116 = fadd <8 x float> %111, %114
  %117 = fmul <8 x float> %116, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %117, <8 x float> %115, <8 x float> %5) #8
  %119 = bitcast <8 x float> %118 to <4 x i64>
  %120 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <4 x i64> %120, %119
  %122 = bitcast <4 x i64> %121 to <8 x float>
  ret <8 x float> %122
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = bitcast <8 x float> %11 to <4 x i64>
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %14 = shufflevector <4 x i64> %12, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %15 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %16 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %17 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = shufflevector <4 x i64> %17, <4 x i64> %18, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  %21 = fsub <8 x float> %11, %20
  %22 = fmul <8 x float> %11, %11
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = fmul <8 x float> %20, %20
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %21, %20
  %29 = fadd <8 x float> %28, %27
  %30 = fadd <8 x float> %28, %29
  %31 = fmul <8 x float> %21, %21
  %32 = fadd <8 x float> %31, %30
  %33 = fadd <8 x float> %10, %22
  %34 = fsub <8 x float> %33, %10
  %35 = fsub <8 x float> %33, %34
  %36 = fsub <8 x float> %10, %35
  %37 = fsub <8 x float> %22, %34
  %38 = fadd <8 x float> %37, %36
  %39 = fadd <8 x float> %38, %32
  %40 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = fsub <8 x float> %40, %49
  %51 = fmul <8 x float> %20, %49
  %52 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %53 = fmul <8 x float> %50, %20
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %21, %49
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %21, %50
  %58 = fadd <8 x float> %57, %56
  %59 = xor <4 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fmul <8 x float> %58, %60
  %62 = bitcast <8 x float> %33 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %33, %70
  %72 = fmul <8 x float> %40, %33
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = xor <4 x i64> %73, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = fmul <8 x float> %49, %70
  %77 = fadd <8 x float> %76, %75
  %78 = fmul <8 x float> %71, %49
  %79 = fadd <8 x float> %78, %77
  %80 = fmul <8 x float> %50, %70
  %81 = fadd <8 x float> %80, %79
  %82 = fmul <8 x float> %50, %71
  %83 = fadd <8 x float> %82, %81
  %84 = fmul <8 x float> %33, %61
  %85 = fadd <8 x float> %83, %84
  %86 = fmul <8 x float> %40, %39
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %72, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %89 = fmul <8 x float> %87, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> %4, <8 x float> %5) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %89, <8 x float> zeroinitializer, <8 x float> %5) #8
  %92 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %93 = sext <8 x i1> %92 to <8 x i32>
  %94 = bitcast <8 x i32> %93 to <8 x float>
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> zeroinitializer, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %91, <8 x float> zeroinitializer, <8 x float> %94) #8
  %97 = fmul <8 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %98 = fadd <8 x float> %97, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %99 = fmul <8 x float> %10, %98
  %100 = fadd <8 x float> %99, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %101 = fmul <8 x float> %10, %100
  %102 = fadd <8 x float> %101, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %103 = fmul <8 x float> %10, %102
  %104 = fadd <8 x float> %103, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %105 = fmul <8 x float> %10, %95
  %106 = fmul <8 x float> %105, %104
  %107 = bitcast <8 x float> %95 to <4 x i64>
  %108 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = xor <4 x i64> %108, %107
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = bitcast <8 x float> %106 to <4 x i64>
  %112 = xor <4 x i64> %108, %111
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fadd <8 x float> %110, %113
  %115 = fsub <8 x float> %110, %114
  %116 = fadd <8 x float> %115, %113
  %117 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %114
  %118 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %117
  %119 = fsub <8 x float> %118, %114
  %120 = fadd <8 x float> %119, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %121 = fsub <8 x float> %120, %116
  %122 = fadd <8 x float> %95, %106
  %123 = fsub <8 x float> %95, %122
  %124 = fadd <8 x float> %106, %123
  %125 = fadd <8 x float> %96, %124
  %126 = fmul <8 x float> %122, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %127 = fmul <8 x float> %125, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %128 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> %117, <8 x float> %5) #8
  %129 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> %121, <8 x float> %5) #8
  %130 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %131 = bitcast <8 x float> %130 to <4 x i64>
  %132 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %133 = and <4 x i64> %131, %132
  %134 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %128
  %135 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %134
  %136 = fsub <8 x float> %135, %128
  %137 = fadd <8 x float> %136, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %138 = fsub <8 x float> %137, %129
  %139 = bitcast <4 x i64> %133 to <8 x float>
  %140 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %128, <8 x float> %134, <8 x float> %139) #8
  %141 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %129, <8 x float> %138, <8 x float> %139) #8
  %142 = fadd <8 x float> %140, %141
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %9) #8
  %11 = bitcast <2 x i64> %8 to <16 x i8>
  %12 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> zeroinitializer, <16 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <16 x i8> %11) #8
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %13, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %15 = bitcast <4 x i64> %14 to <8 x float>
  %16 = bitcast <4 x i64> %13 to <8 x float>
  %17 = bitcast <16 x i8> %10 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = bitcast <16 x i8> %12 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> %4, i8 17) #8
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = bitcast <4 x i32> %18 to <16 x i8>
  %26 = bitcast <2 x i64> %23 to <16 x i8>
  %27 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %10, <16 x i8> %25, <16 x i8> %26) #8
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %24 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %12, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <16 x i8> %27 to <2 x i64>
  %32 = bitcast <16 x i8> %30 to <2 x i64>
  %33 = xor <4 x i64> %13, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %34 = xor <4 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <4 x i64> %33 to <8 x float>
  %36 = bitcast <4 x i64> %34 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %35, <8 x float> %21) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %36, <8 x float> %21) #8
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %4, <8 x float> %21) #8
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> zeroinitializer, <8 x float> %21) #8
  %41 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %42 = bitcast <8 x float> %39 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %46 = and <2 x i64> %44, <i64 -17587891081216, i64 -17587891081216>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fsub <8 x float> %39, %50
  %52 = bitcast <8 x float> %41 to <4 x i64>
  %53 = shufflevector <4 x i64> %52, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %54 = shufflevector <4 x i64> %52, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %55 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %56 = and <2 x i64> %54, <i64 -17587891081216, i64 -17587891081216>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <2 x i64> %56, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i64> %57, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fsub <8 x float> %41, %60
  %62 = bitcast <8 x float> %37 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %37, %70
  %72 = fmul <8 x float> %37, %41
  %73 = fmul <8 x float> %50, %60
  %74 = fadd <8 x float> %73, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %75 = fmul <8 x float> %61, %50
  %76 = fadd <8 x float> %75, %74
  %77 = fmul <8 x float> %51, %60
  %78 = fadd <8 x float> %77, %76
  %79 = fmul <8 x float> %51, %61
  %80 = fadd <8 x float> %79, %78
  %81 = bitcast <8 x float> %80 to <4 x i64>
  %82 = xor <4 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = bitcast <8 x float> %72 to <4 x i64>
  %85 = xor <4 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <4 x i64> %85 to <8 x float>
  %87 = fmul <8 x float> %70, %60
  %88 = fadd <8 x float> %87, %86
  %89 = fmul <8 x float> %61, %70
  %90 = fadd <8 x float> %89, %88
  %91 = fmul <8 x float> %71, %60
  %92 = fadd <8 x float> %91, %90
  %93 = fmul <8 x float> %71, %61
  %94 = fadd <8 x float> %93, %92
  %95 = fmul <8 x float> %72, %83
  %96 = fadd <8 x float> %94, %95
  %97 = fmul <8 x float> %40, %72
  %98 = fsub <8 x float> %38, %97
  %99 = fmul <8 x float> %41, %98
  %100 = fadd <8 x float> %99, %96
  %101 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %102 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %103 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %104 = and <2 x i64> %102, <i64 -17587891081216, i64 -17587891081216>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <4 x i64> %105, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = fsub <8 x float> %72, %108
  %110 = fmul <8 x float> %72, %72
  %111 = bitcast <8 x float> %110 to <4 x i64>
  %112 = xor <4 x i64> %111, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fmul <8 x float> %108, %108
  %115 = fadd <8 x float> %114, %113
  %116 = fadd <8 x float> %108, %108
  %117 = fmul <8 x float> %116, %109
  %118 = fadd <8 x float> %117, %115
  %119 = fmul <8 x float> %109, %109
  %120 = fadd <8 x float> %119, %118
  %121 = fadd <8 x float> %100, %100
  %122 = fmul <8 x float> %72, %121
  %123 = fadd <8 x float> %120, %122
  %124 = fadd <8 x float> %110, %123
  %125 = fsub <8 x float> %110, %124
  %126 = fadd <8 x float> %123, %125
  %127 = fmul <8 x float> %124, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %128 = fadd <8 x float> %127, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %129 = fmul <8 x float> %124, %128
  %130 = fadd <8 x float> %129, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %131 = fmul <8 x float> %124, %130
  %132 = fadd <8 x float> %131, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %133 = fmul <8 x float> %124, %132
  %134 = fadd <8 x float> %133, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %135 = fmul <8 x float> %124, %134
  %136 = fadd <8 x float> %135, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %137 = fmul <8 x float> %124, %136
  %138 = fadd <8 x float> %137, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %139 = fmul <8 x float> %124, %138
  %140 = fadd <8 x float> %139, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %141 = fmul <8 x float> %124, %140
  %142 = fadd <8 x float> %141, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %143 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %142
  %144 = fadd <8 x float> %141, %143
  %145 = bitcast <8 x float> %124 to <4 x i64>
  %146 = shufflevector <4 x i64> %145, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %147 = shufflevector <4 x i64> %145, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %148 = and <2 x i64> %146, <i64 -17587891081216, i64 -17587891081216>
  %149 = and <2 x i64> %147, <i64 -17587891081216, i64 -17587891081216>
  %150 = shufflevector <2 x i64> %148, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %151 = shufflevector <2 x i64> %149, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %152 = shufflevector <4 x i64> %150, <4 x i64> %151, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %153 = bitcast <4 x i64> %152 to <8 x float>
  %154 = fsub <8 x float> %124, %153
  %155 = bitcast <8 x float> %142 to <4 x i64>
  %156 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %157 = shufflevector <4 x i64> %155, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %158 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %159 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %160 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = shufflevector <2 x i64> %159, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <4 x i64> %160, <4 x i64> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fsub <8 x float> %142, %163
  %165 = fmul <8 x float> %124, %142
  %166 = bitcast <8 x float> %165 to <4 x i64>
  %167 = xor <4 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <4 x i64> %167 to <8 x float>
  %169 = fmul <8 x float> %153, %163
  %170 = fadd <8 x float> %169, %168
  %171 = fmul <8 x float> %154, %163
  %172 = fadd <8 x float> %171, %170
  %173 = fmul <8 x float> %164, %153
  %174 = fadd <8 x float> %173, %172
  %175 = fmul <8 x float> %154, %164
  %176 = fadd <8 x float> %175, %174
  %177 = fmul <8 x float> %124, %144
  %178 = fadd <8 x float> %177, %176
  %179 = fmul <8 x float> %126, %142
  %180 = fadd <8 x float> %179, %178
  %181 = fadd <8 x float> %165, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %182 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %181
  %183 = fadd <8 x float> %165, %182
  %184 = fadd <8 x float> %183, %180
  %185 = bitcast <8 x float> %181 to <4 x i64>
  %186 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %187 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %188 = and <2 x i64> %186, <i64 -17587891081216, i64 -17587891081216>
  %189 = and <2 x i64> %187, <i64 -17587891081216, i64 -17587891081216>
  %190 = shufflevector <2 x i64> %188, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %191 = shufflevector <2 x i64> %189, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = shufflevector <4 x i64> %190, <4 x i64> %191, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %193 = bitcast <4 x i64> %192 to <8 x float>
  %194 = fsub <8 x float> %181, %193
  %195 = fmul <8 x float> %72, %181
  %196 = bitcast <8 x float> %195 to <4 x i64>
  %197 = xor <4 x i64> %196, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = bitcast <4 x i64> %197 to <8 x float>
  %199 = fmul <8 x float> %108, %193
  %200 = fadd <8 x float> %199, %198
  %201 = fmul <8 x float> %109, %193
  %202 = fadd <8 x float> %201, %200
  %203 = fmul <8 x float> %194, %108
  %204 = fadd <8 x float> %203, %202
  %205 = fmul <8 x float> %109, %194
  %206 = fadd <8 x float> %205, %204
  %207 = fmul <8 x float> %72, %184
  %208 = fadd <8 x float> %206, %207
  %209 = fmul <8 x float> %100, %181
  %210 = fadd <8 x float> %209, %208
  %211 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %212 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %213 = shufflevector <4 x i64> %211, <4 x i64> %212, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %214 = bitcast <4 x i64> %213 to <8 x i32>
  %215 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %214) #8
  %216 = bitcast <8 x float> %215 to <4 x i64>
  %217 = shufflevector <4 x i64> %216, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %218 = shufflevector <4 x i64> %216, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %219 = and <2 x i64> %217, <i64 -17587891081216, i64 -17587891081216>
  %220 = and <2 x i64> %218, <i64 -17587891081216, i64 -17587891081216>
  %221 = shufflevector <2 x i64> %219, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <2 x i64> %220, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %223 = shufflevector <4 x i64> %221, <4 x i64> %222, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %224 = bitcast <4 x i64> %223 to <8 x float>
  %225 = fsub <8 x float> %215, %224
  %226 = fmul <8 x float> %215, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %227 = bitcast <8 x float> %226 to <4 x i64>
  %228 = xor <4 x i64> %227, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %229 = bitcast <4 x i64> %228 to <8 x float>
  %230 = fmul <8 x float> %224, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %231 = fadd <8 x float> %230, %229
  %232 = fmul <8 x float> %224, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %233 = fadd <8 x float> %232, %231
  %234 = fmul <8 x float> %225, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %235 = fadd <8 x float> %234, %233
  %236 = fmul <8 x float> %225, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %237 = fadd <8 x float> %236, %235
  %238 = fmul <8 x float> %215, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %239 = fadd <8 x float> %238, %237
  %240 = fadd <8 x float> %226, %195
  %241 = fsub <8 x float> %226, %240
  %242 = fadd <8 x float> %195, %241
  %243 = fadd <8 x float> %239, %242
  %244 = fadd <8 x float> %243, %210
  %245 = fadd <8 x float> %240, %244
  %246 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %247 = sext <8 x i1> %246 to <8 x i32>
  %248 = bitcast <8 x i32> %247 to <8 x float>
  %249 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %245, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %248) #8
  %250 = bitcast <8 x float> %249 to <4 x i64>
  %251 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %252 = xor <4 x i64> %251, %250
  %253 = bitcast <4 x i64> %252 to <8 x float>
  ret <8 x float> %253
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = fmul <8 x float> %52, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %54 = fadd <8 x float> %53, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %55 = fmul <8 x float> %52, %54
  %56 = fadd <8 x float> %55, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %57 = fmul <8 x float> %52, %56
  %58 = fadd <8 x float> %57, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %59 = fmul <8 x float> %52, %58
  %60 = fadd <8 x float> %59, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %61 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %64) #8
  %66 = fmul <8 x float> %65, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %67 = fmul <8 x float> %51, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %5, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %79) #8
  %81 = fcmp oeq <8 x float> %5, zeroinitializer
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %83) #8
  ret <8 x float> %84
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %8 = fmul <8 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <8 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <8 x float> %11, %11
  %23 = fmul <8 x float> %22, %21
  %24 = fadd <8 x float> %11, %23
  %25 = fadd <8 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = bitcast <2 x i64> %5 to <4 x i32>
  %27 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = bitcast <2 x i64> %6 to <4 x i32>
  %29 = ashr <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %31 to <2 x i64>
  %35 = bitcast <4 x i32> %33 to <2 x i64>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x i64> %36, <4 x i64> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = fmul <8 x float> %25, %39
  %41 = sub <4 x i32> %26, %27
  %42 = sub <4 x i32> %28, %29
  %43 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %46 = add <4 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fmul <8 x float> %40, %52
  %54 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = bitcast <8 x float> %53 to <4 x i64>
  %57 = xor <4 x i64> %55, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %56, %57
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %60) #8
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %96, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %100) #8
  %102 = bitcast <2 x i64> %69 to <4 x i32>
  %103 = add <4 x i32> %102, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %104 = bitcast <2 x i64> %70 to <4 x i32>
  %105 = add <4 x i32> %104, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %106 = ashr <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %107 = ashr <4 x i32> %105, <i32 1, i32 1, i32 1, i32 1>
  %108 = shl <4 x i32> %106, <i32 23, i32 23, i32 23, i32 23>
  %109 = add <4 x i32> %108, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %110 = shl <4 x i32> %107, <i32 23, i32 23, i32 23, i32 23>
  %111 = add <4 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <4 x i32> %109 to <2 x i64>
  %113 = bitcast <4 x i32> %111 to <2 x i64>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <4 x i64> %114, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = fmul <8 x float> %101, %117
  %119 = sub <4 x i32> %103, %106
  %120 = sub <4 x i32> %105, %107
  %121 = shl <4 x i32> %119, <i32 23, i32 23, i32 23, i32 23>
  %122 = add <4 x i32> %121, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %123 = shl <4 x i32> %120, <i32 23, i32 23, i32 23, i32 23>
  %124 = add <4 x i32> %123, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %125 = bitcast <4 x i32> %122 to <2 x i64>
  %126 = bitcast <4 x i32> %124 to <2 x i64>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fmul <8 x float> %118, %130
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = bitcast <8 x float> %59 to <4 x i64>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %132
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = and <4 x i64> %133, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fmul <8 x float> %138, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %140 = fadd <8 x float> %139, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %141 = fmul <8 x float> %140, %138
  %142 = fadd <8 x float> %141, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %143 = fmul <8 x float> %142, %138
  %144 = fadd <8 x float> %143, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %145 = fmul <8 x float> %144, %138
  %146 = fadd <8 x float> %145, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %147 = fmul <8 x float> %146, %138
  %148 = fadd <8 x float> %147, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %149 = fmul <8 x float> %148, %138
  %150 = fmul <8 x float> %148, %149
  %151 = fmul <8 x float> %150, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %152 = fmul <8 x float> %148, %150
  %153 = fadd <8 x float> %152, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %154 = fmul <8 x float> %151, %153
  %155 = fsub <8 x float> %150, %154
  %156 = fmul <8 x float> %155, %136
  ret <8 x float> %156
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <8 x float> %89) #8
  %92 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %93 = sext <4 x i1> %92 to <4 x i32>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %96 = sext <4 x i1> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <2 x i64> %97, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %100 = shufflevector <4 x i64> %98, <4 x i64> %99, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %101 = bitcast <4 x i64> %100 to <8 x float>
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %101) #8
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %91, <8 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <8 x float> %101) #8
  %104 = bitcast <8 x float> %102 to <4 x i64>
  %105 = bitcast <8 x float> %59 to <4 x i64>
  %106 = and <4 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %104
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = bitcast <8 x float> %103 to <4 x i64>
  %110 = xor <4 x i64> %106, %109
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fmul <8 x float> %113, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %115 = fadd <8 x float> %114, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %116 = fmul <8 x float> %115, %113
  %117 = fadd <8 x float> %116, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %118 = fmul <8 x float> %117, %113
  %119 = fadd <8 x float> %118, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %120 = fmul <8 x float> %119, %113
  %121 = fadd <8 x float> %120, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %122 = fmul <8 x float> %121, %113
  %123 = fadd <8 x float> %122, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %124 = fmul <8 x float> %123, %123
  %125 = fmul <8 x float> %124, %124
  %126 = fmul <8 x float> %125, %113
  %127 = fsub <8 x float> %123, %126
  %128 = fmul <8 x float> %127, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %129 = fsub <8 x float> %123, %128
  %130 = bitcast <8 x float> %129 to <4 x i64>
  %131 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x i64> %130, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = and <2 x i64> %131, <i64 -17587891081216, i64 -17587891081216>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <4 x i64> %135, <4 x i64> %136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fsub <8 x float> %129, %138
  %140 = fmul <8 x float> %129, %129
  %141 = bitcast <8 x float> %140 to <4 x i64>
  %142 = xor <4 x i64> %141, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %143 = bitcast <4 x i64> %142 to <8 x float>
  %144 = fmul <8 x float> %138, %138
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %139, %138
  %147 = fadd <8 x float> %146, %145
  %148 = fadd <8 x float> %146, %147
  %149 = fmul <8 x float> %139, %139
  %150 = fadd <8 x float> %149, %148
  %151 = shufflevector <4 x i64> %141, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %152 = shufflevector <4 x i64> %141, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %153 = and <2 x i64> %151, <i64 -17587891081216, i64 -17587891081216>
  %154 = and <2 x i64> %152, <i64 -17587891081216, i64 -17587891081216>
  %155 = shufflevector <2 x i64> %153, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %156 = shufflevector <2 x i64> %154, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <4 x i64> %155, <4 x i64> %156, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %158 = bitcast <4 x i64> %157 to <8 x float>
  %159 = fsub <8 x float> %140, %158
  %160 = fmul <8 x float> %140, %140
  %161 = bitcast <8 x float> %160 to <4 x i64>
  %162 = xor <4 x i64> %161, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fmul <8 x float> %158, %158
  %165 = fadd <8 x float> %164, %163
  %166 = fmul <8 x float> %159, %158
  %167 = fadd <8 x float> %166, %165
  %168 = fadd <8 x float> %166, %167
  %169 = fmul <8 x float> %159, %159
  %170 = fadd <8 x float> %169, %168
  %171 = fmul <8 x float> %140, %150
  %172 = fadd <8 x float> %171, %170
  %173 = fadd <8 x float> %171, %172
  %174 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %175 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %176 = and <2 x i64> %174, <i64 -17587891081216, i64 -17587891081216>
  %177 = and <2 x i64> %175, <i64 -17587891081216, i64 -17587891081216>
  %178 = shufflevector <2 x i64> %176, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <4 x i64> %178, <4 x i64> %179, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %181 = bitcast <4 x i64> %180 to <8 x float>
  %182 = fsub <8 x float> %160, %181
  %183 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %184 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %185 = and <2 x i64> %183, <i64 -17587891081216, i64 -17587891081216>
  %186 = and <2 x i64> %184, <i64 -17587891081216, i64 -17587891081216>
  %187 = shufflevector <2 x i64> %185, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %188 = shufflevector <2 x i64> %186, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %189 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %190 = bitcast <4 x i64> %189 to <8 x float>
  %191 = fsub <8 x float> %113, %190
  %192 = fmul <8 x float> %160, %113
  %193 = bitcast <8 x float> %192 to <4 x i64>
  %194 = xor <4 x i64> %193, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %190, %181
  %197 = fadd <8 x float> %196, %195
  %198 = fmul <8 x float> %182, %190
  %199 = fadd <8 x float> %198, %197
  %200 = fmul <8 x float> %191, %181
  %201 = fadd <8 x float> %200, %199
  %202 = fmul <8 x float> %191, %182
  %203 = fadd <8 x float> %202, %201
  %204 = fmul <8 x float> %173, %113
  %205 = fadd <8 x float> %203, %204
  %206 = xor <4 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %207 = bitcast <4 x i64> %206 to <8 x float>
  %208 = fadd <8 x float> %192, %207
  %209 = fsub <8 x float> %208, %192
  %210 = fsub <8 x float> %208, %209
  %211 = fsub <8 x float> %192, %210
  %212 = fsub <8 x float> %207, %209
  %213 = fadd <8 x float> %212, %211
  %214 = fadd <8 x float> %213, %205
  %215 = fadd <8 x float> %208, %214
  %216 = fmul <8 x float> %215, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %217 = fmul <8 x float> %129, %216
  %218 = fadd <8 x float> %140, %217
  %219 = fsub <8 x float> %218, %140
  %220 = fsub <8 x float> %218, %219
  %221 = fsub <8 x float> %140, %220
  %222 = fsub <8 x float> %217, %219
  %223 = fadd <8 x float> %222, %221
  %224 = fadd <8 x float> %150, %223
  %225 = bitcast <8 x float> %218 to <4 x i64>
  %226 = shufflevector <4 x i64> %225, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %227 = shufflevector <4 x i64> %225, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %228 = and <2 x i64> %226, <i64 -17587891081216, i64 -17587891081216>
  %229 = and <2 x i64> %227, <i64 -17587891081216, i64 -17587891081216>
  %230 = shufflevector <2 x i64> %228, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %231 = shufflevector <2 x i64> %229, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <4 x i64> %230, <4 x i64> %231, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %233 = bitcast <4 x i64> %232 to <8 x float>
  %234 = fsub <8 x float> %218, %233
  %235 = fmul <8 x float> %218, %113
  %236 = bitcast <8 x float> %235 to <4 x i64>
  %237 = xor <4 x i64> %236, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %238 = bitcast <4 x i64> %237 to <8 x float>
  %239 = fmul <8 x float> %190, %233
  %240 = fadd <8 x float> %239, %238
  %241 = fmul <8 x float> %234, %190
  %242 = fadd <8 x float> %241, %240
  %243 = fmul <8 x float> %191, %233
  %244 = fadd <8 x float> %243, %242
  %245 = fmul <8 x float> %191, %234
  %246 = fadd <8 x float> %245, %244
  %247 = fmul <8 x float> %224, %113
  %248 = fadd <8 x float> %247, %246
  %249 = shufflevector <4 x i64> %236, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %250 = shufflevector <4 x i64> %236, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %251 = and <2 x i64> %249, <i64 -17587891081216, i64 -17587891081216>
  %252 = and <2 x i64> %250, <i64 -17587891081216, i64 -17587891081216>
  %253 = shufflevector <2 x i64> %251, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %254 = shufflevector <2 x i64> %252, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %255 = shufflevector <4 x i64> %253, <4 x i64> %254, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %256 = bitcast <4 x i64> %255 to <8 x float>
  %257 = fsub <8 x float> %235, %256
  %258 = shufflevector <4 x i64> %107, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %259 = shufflevector <4 x i64> %107, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %260 = and <2 x i64> %258, <i64 -17587891081216, i64 -17587891081216>
  %261 = and <2 x i64> %259, <i64 -17587891081216, i64 -17587891081216>
  %262 = shufflevector <2 x i64> %260, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %263 = shufflevector <2 x i64> %261, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %264 = shufflevector <4 x i64> %262, <4 x i64> %263, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %265 = bitcast <4 x i64> %264 to <8 x float>
  %266 = fsub <8 x float> %108, %265
  %267 = fmul <8 x float> %235, %108
  %268 = bitcast <8 x float> %267 to <4 x i64>
  %269 = xor <4 x i64> %268, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %270 = bitcast <4 x i64> %269 to <8 x float>
  %271 = fmul <8 x float> %265, %256
  %272 = fadd <8 x float> %271, %270
  %273 = fmul <8 x float> %257, %265
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %266, %256
  %276 = fadd <8 x float> %275, %274
  %277 = fmul <8 x float> %266, %257
  %278 = fadd <8 x float> %277, %276
  %279 = fmul <8 x float> %235, %111
  %280 = fadd <8 x float> %279, %278
  %281 = fmul <8 x float> %248, %108
  %282 = fadd <8 x float> %281, %280
  %283 = fadd <8 x float> %267, %282
  %284 = bitcast <2 x i64> %69 to <4 x i32>
  %285 = add <4 x i32> %284, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %286 = bitcast <2 x i64> %70 to <4 x i32>
  %287 = add <4 x i32> %286, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %288 = ashr <4 x i32> %285, <i32 1, i32 1, i32 1, i32 1>
  %289 = ashr <4 x i32> %287, <i32 1, i32 1, i32 1, i32 1>
  %290 = shl <4 x i32> %288, <i32 23, i32 23, i32 23, i32 23>
  %291 = add <4 x i32> %290, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %292 = shl <4 x i32> %289, <i32 23, i32 23, i32 23, i32 23>
  %293 = add <4 x i32> %292, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %294 = bitcast <4 x i32> %291 to <2 x i64>
  %295 = bitcast <4 x i32> %293 to <2 x i64>
  %296 = shufflevector <2 x i64> %294, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %297 = shufflevector <2 x i64> %295, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %298 = shufflevector <4 x i64> %296, <4 x i64> %297, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %299 = bitcast <4 x i64> %298 to <8 x float>
  %300 = fmul <8 x float> %283, %299
  %301 = sub <4 x i32> %285, %288
  %302 = sub <4 x i32> %287, %289
  %303 = shl <4 x i32> %301, <i32 23, i32 23, i32 23, i32 23>
  %304 = add <4 x i32> %303, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %305 = shl <4 x i32> %302, <i32 23, i32 23, i32 23, i32 23>
  %306 = add <4 x i32> %305, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %307 = bitcast <4 x i32> %304 to <2 x i64>
  %308 = bitcast <4 x i32> %306 to <2 x i64>
  %309 = shufflevector <2 x i64> %307, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %310 = shufflevector <2 x i64> %308, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %311 = shufflevector <4 x i64> %309, <4 x i64> %310, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %312 = bitcast <4 x i64> %311 to <8 x float>
  %313 = fmul <8 x float> %300, %312
  %314 = fcmp oeq <8 x float> %113, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %315 = sext <8 x i1> %314 to <8 x i32>
  %316 = and <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %317 = or <4 x i64> %316, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = bitcast <8 x i32> %315 to <8 x float>
  %320 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %313, <8 x float> %318, <8 x float> %319) #8
  %321 = fcmp oeq <8 x float> %113, zeroinitializer
  %322 = sext <8 x i1> %321 to <8 x i32>
  %323 = bitcast <4 x i64> %316 to <8 x float>
  %324 = bitcast <8 x i32> %322 to <8 x float>
  %325 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %320, <8 x float> %323, <8 x float> %324) #8
  ret <8 x float> %325
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %52) #8
  %54 = bitcast <8 x float> %53 to <4 x i64>
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %56 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %57 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %58 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %59 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> %60, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = fsub <8 x float> %53, %62
  %64 = fmul <8 x float> %53, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %65 = bitcast <8 x float> %64 to <4 x i64>
  %66 = xor <4 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = fmul <8 x float> %62, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %62, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %63, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %73 = fadd <8 x float> %72, %71
  %74 = fmul <8 x float> %63, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %75 = fadd <8 x float> %74, %73
  %76 = fmul <8 x float> %53, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %77 = fadd <8 x float> %76, %75
  %78 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %79 = fadd <8 x float> %78, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %80 = fsub <8 x float> %78, %79
  %81 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %80
  %82 = fsub <8 x float> %34, %79
  %83 = fadd <8 x float> %82, %81
  %84 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = fadd <8 x float> %84, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %86
  %88 = fsub <8 x float> %34, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %84
  %91 = bitcast <8 x float> %84 to <4 x i64>
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %93 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %94 = and <2 x i64> %92, <i64 -17587891081216, i64 -17587891081216>
  %95 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fsub <8 x float> %84, %99
  %101 = bitcast <8 x float> %90 to <4 x i64>
  %102 = shufflevector <4 x i64> %101, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %103 = shufflevector <4 x i64> %101, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %104 = and <2 x i64> %102, <i64 -17587891081216, i64 -17587891081216>
  %105 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = fsub <8 x float> %90, %109
  %111 = bitcast <8 x float> %78 to <4 x i64>
  %112 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %113 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %114 = and <2 x i64> %112, <i64 -17587891081216, i64 -17587891081216>
  %115 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %116 = shufflevector <2 x i64> %114, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <4 x i64> %116, <4 x i64> %117, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = fsub <8 x float> %78, %119
  %121 = fmul <8 x float> %78, %90
  %122 = fmul <8 x float> %99, %109
  %123 = fadd <8 x float> %122, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %124 = fmul <8 x float> %110, %99
  %125 = fadd <8 x float> %124, %123
  %126 = fmul <8 x float> %100, %109
  %127 = fadd <8 x float> %126, %125
  %128 = fmul <8 x float> %100, %110
  %129 = fadd <8 x float> %128, %127
  %130 = bitcast <8 x float> %129 to <4 x i64>
  %131 = xor <4 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <4 x i64> %131 to <8 x float>
  %133 = bitcast <8 x float> %121 to <4 x i64>
  %134 = xor <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = fmul <8 x float> %119, %109
  %137 = fadd <8 x float> %136, %135
  %138 = fmul <8 x float> %110, %119
  %139 = fadd <8 x float> %138, %137
  %140 = fmul <8 x float> %120, %109
  %141 = fadd <8 x float> %140, %139
  %142 = fmul <8 x float> %120, %110
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %121, %132
  %145 = fadd <8 x float> %143, %144
  %146 = fmul <8 x float> %121, %89
  %147 = fsub <8 x float> %83, %146
  %148 = fmul <8 x float> %90, %147
  %149 = fadd <8 x float> %148, %145
  %150 = fmul <8 x float> %121, %121
  %151 = fmul <8 x float> %150, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %152 = fadd <8 x float> %151, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %153 = fmul <8 x float> %150, %152
  %154 = fadd <8 x float> %153, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %155 = fmul <8 x float> %121, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %156 = fmul <8 x float> %149, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %157 = fadd <8 x float> %64, %155
  %158 = fsub <8 x float> %64, %157
  %159 = fadd <8 x float> %155, %158
  %160 = fadd <8 x float> %77, %159
  %161 = fadd <8 x float> %160, %156
  %162 = fmul <8 x float> %121, %150
  %163 = fmul <8 x float> %162, %154
  %164 = fadd <8 x float> %157, %163
  %165 = fsub <8 x float> %157, %164
  %166 = fadd <8 x float> %163, %165
  %167 = fadd <8 x float> %166, %161
  %168 = fadd <8 x float> %164, %167
  %169 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %170 = sext <8 x i1> %169 to <8 x i32>
  %171 = bitcast <8 x i32> %170 to <8 x float>
  %172 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %168, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %171) #8
  %173 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %174 = bitcast <8 x float> %173 to <4 x i64>
  %175 = fcmp uno <8 x float> %5, zeroinitializer
  %176 = sext <8 x i1> %175 to <8 x i32>
  %177 = bitcast <8 x i32> %176 to <4 x i64>
  %178 = or <4 x i64> %174, %177
  %179 = bitcast <4 x i64> %178 to <8 x float>
  %180 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %172, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %179) #8
  %181 = fcmp oeq <8 x float> %5, zeroinitializer
  %182 = sext <8 x i1> %181 to <8 x i32>
  %183 = bitcast <8 x i32> %182 to <8 x float>
  %184 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %180, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %183) #8
  ret <8 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_powf8_u10avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %4 = fcmp oeq <8 x float> %3, %1
  %5 = sext <8 x i1> %4 to <8 x i32>
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = bitcast <8 x float> %1 to <4 x i64>
  %8 = and <4 x i64> %7, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %9 = bitcast <4 x i64> %8 to <8 x float>
  %10 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = or <4 x i64> %6, %11
  %13 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = shufflevector <4 x i64> %14, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %16 = shufflevector <4 x i64> %14, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %17 = bitcast <2 x i64> %15 to <4 x i32>
  %18 = and <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = icmp ne <4 x i32> %18, zeroinitializer
  %20 = sext <4 x i1> %19 to <4 x i32>
  %21 = bitcast <4 x i32> %20 to <2 x i64>
  %22 = bitcast <2 x i64> %16 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %24 = icmp ne <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %31 = bitcast <8 x float> %30 to <4 x i64>
  %32 = and <4 x i64> %12, %31
  %33 = and <4 x i64> %32, %29
  %34 = bitcast <8 x float> %0 to <4 x i64>
  %35 = and <4 x i64> %34, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %36, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %38 = bitcast <8 x float> %37 to <4 x i64>
  %39 = fmul <8 x float> %36, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %40 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %39, <8 x float> %37) #8
  %41 = fmul <8 x float> %40, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %42 = bitcast <8 x float> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = bitcast <2 x i64> %43 to <4 x i32>
  %46 = lshr <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %47 = bitcast <2 x i64> %44 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %49 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %50 = add nsw <4 x i32> %49, <i32 -127, i32 -127, i32 -127, i32 -127>
  %51 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %52 = add nsw <4 x i32> %51, <i32 -127, i32 -127, i32 -127, i32 -127>
  %53 = bitcast <8 x float> %40 to <4 x i64>
  %54 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %55 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %56 = shl nuw nsw <4 x i32> %49, <i32 23, i32 23, i32 23, i32 23>
  %57 = shl nuw nsw <4 x i32> %51, <i32 23, i32 23, i32 23, i32 23>
  %58 = bitcast <2 x i64> %54 to <4 x i32>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = sub <4 x i32> %59, %56
  %61 = bitcast <2 x i64> %55 to <4 x i32>
  %62 = add <4 x i32> %61, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %63 = sub <4 x i32> %62, %57
  %64 = bitcast <4 x i32> %60 to <2 x i64>
  %65 = bitcast <4 x i32> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = add nsw <4 x i32> %49, <i32 -191, i32 -191, i32 -191, i32 -191>
  %71 = add nsw <4 x i32> %51, <i32 -191, i32 -191, i32 -191, i32 -191>
  %72 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = bitcast <4 x i32> %50 to <16 x i8>
  %75 = bitcast <4 x i32> %70 to <16 x i8>
  %76 = bitcast <2 x i64> %72 to <16 x i8>
  %77 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %74, <16 x i8> %75, <16 x i8> %76) #8
  %78 = bitcast <4 x i32> %52 to <16 x i8>
  %79 = bitcast <4 x i32> %71 to <16 x i8>
  %80 = bitcast <2 x i64> %73 to <16 x i8>
  %81 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %78, <16 x i8> %79, <16 x i8> %80) #8
  %82 = bitcast <16 x i8> %77 to <2 x i64>
  %83 = bitcast <16 x i8> %81 to <2 x i64>
  %84 = fadd <8 x float> %69, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %85 = fadd <8 x float> %84, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %86
  %88 = fsub <8 x float> %69, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fadd <8 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %91 = fadd <8 x float> %90, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = fsub <8 x float> %90, %91
  %93 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %94 = fsub <8 x float> %69, %91
  %95 = fadd <8 x float> %94, %93
  %96 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %90
  %97 = bitcast <8 x float> %90 to <4 x i64>
  %98 = shufflevector <4 x i64> %97, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %99 = shufflevector <4 x i64> %97, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %100 = and <2 x i64> %98, <i64 -17587891081216, i64 -17587891081216>
  %101 = and <2 x i64> %99, <i64 -17587891081216, i64 -17587891081216>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <8 x float>
  %106 = fsub <8 x float> %90, %105
  %107 = bitcast <8 x float> %96 to <4 x i64>
  %108 = shufflevector <4 x i64> %107, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %109 = shufflevector <4 x i64> %107, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %110 = and <2 x i64> %108, <i64 -17587891081216, i64 -17587891081216>
  %111 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %112 = shufflevector <2 x i64> %110, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <2 x i64> %111, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = shufflevector <4 x i64> %112, <4 x i64> %113, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %115 = bitcast <4 x i64> %114 to <8 x float>
  %116 = fsub <8 x float> %96, %115
  %117 = bitcast <8 x float> %84 to <4 x i64>
  %118 = shufflevector <4 x i64> %117, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %119 = shufflevector <4 x i64> %117, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %120 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %121 = and <2 x i64> %119, <i64 -17587891081216, i64 -17587891081216>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <2 x i64> %121, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %124 = shufflevector <4 x i64> %122, <4 x i64> %123, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %125 = bitcast <4 x i64> %124 to <8 x float>
  %126 = fsub <8 x float> %84, %125
  %127 = fmul <8 x float> %84, %96
  %128 = fmul <8 x float> %105, %115
  %129 = fadd <8 x float> %128, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %130 = fmul <8 x float> %116, %105
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %106, %115
  %133 = fadd <8 x float> %132, %131
  %134 = fmul <8 x float> %106, %116
  %135 = fadd <8 x float> %134, %133
  %136 = bitcast <8 x float> %135 to <4 x i64>
  %137 = xor <4 x i64> %136, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = bitcast <8 x float> %127 to <4 x i64>
  %140 = xor <4 x i64> %139, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %141 = bitcast <4 x i64> %140 to <8 x float>
  %142 = fmul <8 x float> %125, %115
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %116, %125
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %126, %115
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %126, %116
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %127, %138
  %151 = fadd <8 x float> %149, %150
  %152 = fmul <8 x float> %127, %95
  %153 = fsub <8 x float> %89, %152
  %154 = fmul <8 x float> %96, %153
  %155 = fadd <8 x float> %154, %151
  %156 = shufflevector <4 x i64> %139, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %157 = shufflevector <4 x i64> %139, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %158 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %159 = and <2 x i64> %157, <i64 -17587891081216, i64 -17587891081216>
  %160 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = shufflevector <2 x i64> %159, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = shufflevector <4 x i64> %160, <4 x i64> %161, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fsub <8 x float> %127, %163
  %165 = fmul <8 x float> %127, %127
  %166 = bitcast <8 x float> %165 to <4 x i64>
  %167 = xor <4 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <4 x i64> %167 to <8 x float>
  %169 = fmul <8 x float> %163, %163
  %170 = fadd <8 x float> %169, %168
  %171 = fadd <8 x float> %163, %163
  %172 = fmul <8 x float> %171, %164
  %173 = fadd <8 x float> %172, %170
  %174 = fmul <8 x float> %164, %164
  %175 = fadd <8 x float> %174, %173
  %176 = fadd <8 x float> %155, %155
  %177 = fmul <8 x float> %127, %176
  %178 = fadd <8 x float> %175, %177
  %179 = fmul <8 x float> %165, <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>
  %180 = fadd <8 x float> %179, <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>
  %181 = fmul <8 x float> %165, %180
  %182 = fadd <8 x float> %181, <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>
  %183 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %184 = shufflevector <2 x i64> %83, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %185 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %186 = bitcast <4 x i64> %185 to <8 x i32>
  %187 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %186) #8
  %188 = bitcast <8 x float> %187 to <4 x i64>
  %189 = shufflevector <4 x i64> %188, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %190 = shufflevector <4 x i64> %188, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %191 = and <2 x i64> %189, <i64 -17587891081216, i64 -17587891081216>
  %192 = and <2 x i64> %190, <i64 -17587891081216, i64 -17587891081216>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <2 x i64> %192, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %195 = shufflevector <4 x i64> %193, <4 x i64> %194, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %196 = bitcast <4 x i64> %195 to <8 x float>
  %197 = fsub <8 x float> %187, %196
  %198 = fmul <8 x float> %187, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %199 = bitcast <8 x float> %198 to <4 x i64>
  %200 = xor <4 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %201 = bitcast <4 x i64> %200 to <8 x float>
  %202 = fmul <8 x float> %196, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %203 = fadd <8 x float> %202, %201
  %204 = fmul <8 x float> %196, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %205 = fadd <8 x float> %204, %203
  %206 = fmul <8 x float> %197, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %207 = fadd <8 x float> %206, %205
  %208 = fmul <8 x float> %197, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %209 = fadd <8 x float> %208, %207
  %210 = fmul <8 x float> %187, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %211 = fadd <8 x float> %210, %209
  %212 = fmul <8 x float> %127, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %213 = fmul <8 x float> %155, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %214 = fadd <8 x float> %198, %212
  %215 = fsub <8 x float> %198, %214
  %216 = fadd <8 x float> %212, %215
  %217 = fadd <8 x float> %211, %216
  %218 = fadd <8 x float> %217, %213
  %219 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %220 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = and <2 x i64> %219, <i64 -17587891081216, i64 -17587891081216>
  %222 = and <2 x i64> %220, <i64 -17587891081216, i64 -17587891081216>
  %223 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = shufflevector <2 x i64> %222, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x i64> %223, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x i64> %225 to <8 x float>
  %227 = fsub <8 x float> %165, %226
  %228 = fmul <8 x float> %127, %165
  %229 = bitcast <8 x float> %228 to <4 x i64>
  %230 = xor <4 x i64> %229, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %231 = bitcast <4 x i64> %230 to <8 x float>
  %232 = fmul <8 x float> %163, %226
  %233 = fadd <8 x float> %232, %231
  %234 = fmul <8 x float> %227, %163
  %235 = fadd <8 x float> %234, %233
  %236 = fmul <8 x float> %164, %226
  %237 = fadd <8 x float> %236, %235
  %238 = fmul <8 x float> %164, %227
  %239 = fadd <8 x float> %238, %237
  %240 = fmul <8 x float> %165, %155
  %241 = fadd <8 x float> %239, %240
  %242 = fmul <8 x float> %127, %178
  %243 = fadd <8 x float> %241, %242
  %244 = bitcast <8 x float> %182 to <4 x i64>
  %245 = shufflevector <4 x i64> %244, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %246 = shufflevector <4 x i64> %244, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %247 = and <2 x i64> %245, <i64 -17587891081216, i64 -17587891081216>
  %248 = and <2 x i64> %246, <i64 -17587891081216, i64 -17587891081216>
  %249 = shufflevector <2 x i64> %247, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %250 = shufflevector <2 x i64> %248, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %251 = shufflevector <4 x i64> %249, <4 x i64> %250, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %252 = bitcast <4 x i64> %251 to <8 x float>
  %253 = fsub <8 x float> %182, %252
  %254 = fmul <8 x float> %165, %182
  %255 = bitcast <8 x float> %254 to <4 x i64>
  %256 = xor <4 x i64> %255, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %257 = bitcast <4 x i64> %256 to <8 x float>
  %258 = fmul <8 x float> %226, %252
  %259 = fadd <8 x float> %258, %257
  %260 = fmul <8 x float> %227, %252
  %261 = fadd <8 x float> %260, %259
  %262 = fmul <8 x float> %253, %226
  %263 = fadd <8 x float> %262, %261
  %264 = fmul <8 x float> %227, %253
  %265 = fadd <8 x float> %264, %263
  %266 = fmul <8 x float> %182, %178
  %267 = fadd <8 x float> %265, %266
  %268 = fadd <8 x float> %254, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %269 = fsub <8 x float> %268, %254
  %270 = fsub <8 x float> %268, %269
  %271 = fsub <8 x float> %254, %270
  %272 = fsub <8 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %269
  %273 = fadd <8 x float> %272, %271
  %274 = fadd <8 x float> %267, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %275 = fadd <8 x float> %273, %274
  %276 = shufflevector <4 x i64> %229, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %277 = shufflevector <4 x i64> %229, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %278 = and <2 x i64> %276, <i64 -17587891081216, i64 -17587891081216>
  %279 = and <2 x i64> %277, <i64 -17587891081216, i64 -17587891081216>
  %280 = shufflevector <2 x i64> %278, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = shufflevector <2 x i64> %279, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %282 = shufflevector <4 x i64> %280, <4 x i64> %281, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %283 = bitcast <4 x i64> %282 to <8 x float>
  %284 = fsub <8 x float> %228, %283
  %285 = bitcast <8 x float> %268 to <4 x i64>
  %286 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %287 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %288 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %289 = and <2 x i64> %287, <i64 -17587891081216, i64 -17587891081216>
  %290 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <2 x i64> %289, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %292 = shufflevector <4 x i64> %290, <4 x i64> %291, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %293 = bitcast <4 x i64> %292 to <8 x float>
  %294 = fsub <8 x float> %268, %293
  %295 = fmul <8 x float> %228, %268
  %296 = bitcast <8 x float> %295 to <4 x i64>
  %297 = xor <4 x i64> %296, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %298 = bitcast <4 x i64> %297 to <8 x float>
  %299 = fmul <8 x float> %283, %293
  %300 = fadd <8 x float> %299, %298
  %301 = fmul <8 x float> %284, %293
  %302 = fadd <8 x float> %301, %300
  %303 = fmul <8 x float> %294, %283
  %304 = fadd <8 x float> %303, %302
  %305 = fmul <8 x float> %284, %294
  %306 = fadd <8 x float> %305, %304
  %307 = fmul <8 x float> %228, %275
  %308 = fadd <8 x float> %306, %307
  %309 = fmul <8 x float> %268, %243
  %310 = fadd <8 x float> %309, %308
  %311 = fadd <8 x float> %214, %295
  %312 = fsub <8 x float> %214, %311
  %313 = fadd <8 x float> %295, %312
  %314 = fadd <8 x float> %313, %218
  %315 = fadd <8 x float> %314, %310
  %316 = bitcast <8 x float> %311 to <4 x i64>
  %317 = shufflevector <4 x i64> %316, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %318 = shufflevector <4 x i64> %316, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %319 = and <2 x i64> %317, <i64 -17587891081216, i64 -17587891081216>
  %320 = and <2 x i64> %318, <i64 -17587891081216, i64 -17587891081216>
  %321 = shufflevector <2 x i64> %319, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %322 = shufflevector <2 x i64> %320, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %323 = shufflevector <4 x i64> %321, <4 x i64> %322, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %324 = bitcast <4 x i64> %323 to <8 x float>
  %325 = fsub <8 x float> %311, %324
  %326 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %327 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %328 = and <2 x i64> %326, <i64 -17587891081216, i64 -17587891081216>
  %329 = and <2 x i64> %327, <i64 -17587891081216, i64 -17587891081216>
  %330 = shufflevector <2 x i64> %328, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %331 = shufflevector <2 x i64> %329, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %332 = shufflevector <4 x i64> %330, <4 x i64> %331, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %333 = bitcast <4 x i64> %332 to <8 x float>
  %334 = fsub <8 x float> %1, %333
  %335 = fmul <8 x float> %311, %1
  %336 = bitcast <8 x float> %335 to <4 x i64>
  %337 = xor <4 x i64> %336, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %338 = bitcast <4 x i64> %337 to <8 x float>
  %339 = fmul <8 x float> %333, %324
  %340 = fadd <8 x float> %339, %338
  %341 = fmul <8 x float> %325, %333
  %342 = fadd <8 x float> %341, %340
  %343 = fmul <8 x float> %334, %324
  %344 = fadd <8 x float> %343, %342
  %345 = fmul <8 x float> %334, %325
  %346 = fadd <8 x float> %345, %344
  %347 = fmul <8 x float> %315, %1
  %348 = fadd <8 x float> %346, %347
  %349 = fadd <8 x float> %335, %348
  %350 = fmul <8 x float> %349, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %351 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %350) #8
  %352 = bitcast <8 x i32> %351 to <4 x i64>
  %353 = shufflevector <4 x i64> %352, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %354 = shufflevector <4 x i64> %352, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %355 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %351) #8
  %356 = fmul <8 x float> %355, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %357 = fadd <8 x float> %356, %335
  %358 = fsub <8 x float> %357, %335
  %359 = fsub <8 x float> %357, %358
  %360 = fsub <8 x float> %335, %359
  %361 = fsub <8 x float> %356, %358
  %362 = fadd <8 x float> %361, %360
  %363 = fadd <8 x float> %362, %348
  %364 = fmul <8 x float> %355, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %365 = fadd <8 x float> %364, %357
  %366 = fsub <8 x float> %365, %357
  %367 = fsub <8 x float> %365, %366
  %368 = fsub <8 x float> %357, %367
  %369 = fsub <8 x float> %364, %366
  %370 = fadd <8 x float> %369, %368
  %371 = fadd <8 x float> %370, %363
  %372 = fadd <8 x float> %365, %371
  %373 = fsub <8 x float> %365, %372
  %374 = fadd <8 x float> %371, %373
  %375 = fmul <8 x float> %372, <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>
  %376 = fadd <8 x float> %375, <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>
  %377 = fmul <8 x float> %372, %376
  %378 = fadd <8 x float> %377, <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>
  %379 = fmul <8 x float> %372, %378
  %380 = fadd <8 x float> %379, <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>
  %381 = fmul <8 x float> %372, %380
  %382 = fadd <8 x float> %381, <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>
  %383 = bitcast <8 x float> %372 to <4 x i64>
  %384 = shufflevector <4 x i64> %383, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %385 = shufflevector <4 x i64> %383, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %386 = and <2 x i64> %384, <i64 -17587891081216, i64 -17587891081216>
  %387 = and <2 x i64> %385, <i64 -17587891081216, i64 -17587891081216>
  %388 = shufflevector <2 x i64> %386, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %389 = shufflevector <2 x i64> %387, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %390 = shufflevector <4 x i64> %388, <4 x i64> %389, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %391 = bitcast <4 x i64> %390 to <8 x float>
  %392 = fsub <8 x float> %372, %391
  %393 = fmul <8 x float> %372, %372
  %394 = bitcast <8 x float> %393 to <4 x i64>
  %395 = xor <4 x i64> %394, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %396 = bitcast <4 x i64> %395 to <8 x float>
  %397 = fmul <8 x float> %391, %391
  %398 = fadd <8 x float> %397, %396
  %399 = fadd <8 x float> %391, %391
  %400 = fmul <8 x float> %399, %392
  %401 = fadd <8 x float> %400, %398
  %402 = fmul <8 x float> %392, %392
  %403 = fadd <8 x float> %402, %401
  %404 = fadd <8 x float> %374, %374
  %405 = fmul <8 x float> %372, %404
  %406 = fadd <8 x float> %405, %403
  %407 = shufflevector <4 x i64> %394, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %408 = shufflevector <4 x i64> %394, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %409 = and <2 x i64> %407, <i64 -17587891081216, i64 -17587891081216>
  %410 = and <2 x i64> %408, <i64 -17587891081216, i64 -17587891081216>
  %411 = shufflevector <2 x i64> %409, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %412 = shufflevector <2 x i64> %410, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %413 = shufflevector <4 x i64> %411, <4 x i64> %412, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %414 = bitcast <4 x i64> %413 to <8 x float>
  %415 = fsub <8 x float> %393, %414
  %416 = bitcast <8 x float> %382 to <4 x i64>
  %417 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %418 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %419 = and <2 x i64> %417, <i64 -17587891081216, i64 -17587891081216>
  %420 = and <2 x i64> %418, <i64 -17587891081216, i64 -17587891081216>
  %421 = shufflevector <2 x i64> %419, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %422 = shufflevector <2 x i64> %420, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %423 = shufflevector <4 x i64> %421, <4 x i64> %422, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %424 = bitcast <4 x i64> %423 to <8 x float>
  %425 = fsub <8 x float> %382, %424
  %426 = fmul <8 x float> %393, %382
  %427 = bitcast <8 x float> %426 to <4 x i64>
  %428 = xor <4 x i64> %427, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %429 = bitcast <4 x i64> %428 to <8 x float>
  %430 = fmul <8 x float> %414, %424
  %431 = fadd <8 x float> %430, %429
  %432 = fmul <8 x float> %415, %424
  %433 = fadd <8 x float> %432, %431
  %434 = fmul <8 x float> %425, %414
  %435 = fadd <8 x float> %434, %433
  %436 = fmul <8 x float> %415, %425
  %437 = fadd <8 x float> %436, %435
  %438 = fmul <8 x float> %382, %406
  %439 = fadd <8 x float> %438, %437
  %440 = fadd <8 x float> %372, %426
  %441 = fsub <8 x float> %372, %440
  %442 = fadd <8 x float> %426, %441
  %443 = fadd <8 x float> %374, %442
  %444 = fadd <8 x float> %443, %439
  %445 = fadd <8 x float> %440, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %446 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %445
  %447 = fadd <8 x float> %440, %446
  %448 = fadd <8 x float> %447, %444
  %449 = fadd <8 x float> %445, %448
  %450 = bitcast <2 x i64> %353 to <4 x i32>
  %451 = ashr <4 x i32> %450, <i32 31, i32 31, i32 31, i32 31>
  %452 = bitcast <2 x i64> %354 to <4 x i32>
  %453 = ashr <4 x i32> %452, <i32 31, i32 31, i32 31, i32 31>
  %454 = add <4 x i32> %451, %450
  %455 = add <4 x i32> %453, %452
  %456 = ashr <4 x i32> %454, <i32 6, i32 6, i32 6, i32 6>
  %457 = ashr <4 x i32> %455, <i32 6, i32 6, i32 6, i32 6>
  %458 = sub nsw <4 x i32> %456, %451
  %459 = sub nsw <4 x i32> %457, %453
  %460 = shl nsw <4 x i32> %458, <i32 4, i32 4, i32 4, i32 4>
  %461 = shl nsw <4 x i32> %459, <i32 4, i32 4, i32 4, i32 4>
  %462 = shl <4 x i32> %458, <i32 6, i32 6, i32 6, i32 6>
  %463 = shl <4 x i32> %459, <i32 6, i32 6, i32 6, i32 6>
  %464 = sub <4 x i32> %450, %462
  %465 = sub <4 x i32> %452, %463
  %466 = add nsw <4 x i32> %460, <i32 127, i32 127, i32 127, i32 127>
  %467 = add nsw <4 x i32> %461, <i32 127, i32 127, i32 127, i32 127>
  %468 = icmp sgt <4 x i32> %458, <i32 -8, i32 -8, i32 -8, i32 -8>
  %469 = icmp sgt <4 x i32> %459, <i32 -8, i32 -8, i32 -8, i32 -8>
  %470 = select <4 x i1> %468, <4 x i32> %466, <4 x i32> zeroinitializer
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = select <4 x i1> %469, <4 x i32> %467, <4 x i32> zeroinitializer
  %473 = bitcast <4 x i32> %472 to <2 x i64>
  %474 = icmp sgt <4 x i32> %470, <i32 255, i32 255, i32 255, i32 255>
  %475 = sext <4 x i1> %474 to <4 x i32>
  %476 = icmp sgt <4 x i32> %472, <i32 255, i32 255, i32 255, i32 255>
  %477 = sext <4 x i1> %476 to <4 x i32>
  %478 = bitcast <4 x i32> %475 to <2 x i64>
  %479 = bitcast <4 x i32> %477 to <2 x i64>
  %480 = xor <2 x i64> %478, <i64 -1, i64 -1>
  %481 = and <2 x i64> %480, %471
  %482 = xor <2 x i64> %479, <i64 -1, i64 -1>
  %483 = and <2 x i64> %482, %473
  %484 = and <2 x i64> %478, <i64 1095216660735, i64 1095216660735>
  %485 = and <2 x i64> %479, <i64 1095216660735, i64 1095216660735>
  %486 = or <2 x i64> %484, %481
  %487 = or <2 x i64> %485, %483
  %488 = bitcast <2 x i64> %486 to <4 x i32>
  %489 = shl <4 x i32> %488, <i32 23, i32 23, i32 23, i32 23>
  %490 = bitcast <2 x i64> %487 to <4 x i32>
  %491 = shl <4 x i32> %490, <i32 23, i32 23, i32 23, i32 23>
  %492 = bitcast <4 x i32> %489 to <2 x i64>
  %493 = bitcast <4 x i32> %491 to <2 x i64>
  %494 = shufflevector <2 x i64> %492, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %495 = shufflevector <2 x i64> %493, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %496 = shufflevector <4 x i64> %494, <4 x i64> %495, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %497 = bitcast <4 x i64> %496 to <8 x float>
  %498 = fmul <8 x float> %449, %497
  %499 = fmul <8 x float> %498, %497
  %500 = fmul <8 x float> %499, %497
  %501 = fmul <8 x float> %500, %497
  %502 = shl <4 x i32> %464, <i32 23, i32 23, i32 23, i32 23>
  %503 = add <4 x i32> %502, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %504 = shl <4 x i32> %465, <i32 23, i32 23, i32 23, i32 23>
  %505 = add <4 x i32> %504, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %506 = bitcast <4 x i32> %503 to <2 x i64>
  %507 = bitcast <4 x i32> %505 to <2 x i64>
  %508 = shufflevector <2 x i64> %506, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %509 = shufflevector <2 x i64> %507, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %510 = shufflevector <4 x i64> %508, <4 x i64> %509, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %511 = bitcast <4 x i64> %510 to <8 x float>
  %512 = fmul <8 x float> %501, %511
  %513 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %335, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %514 = bitcast <8 x float> %513 to <4 x i64>
  %515 = bitcast <8 x float> %512 to <4 x i64>
  %516 = xor <4 x i64> %514, <i64 -1, i64 -1, i64 -1, i64 -1>
  %517 = and <4 x i64> %515, %516
  %518 = bitcast <4 x i64> %517 to <8 x float>
  %519 = fcmp uno <8 x float> %518, zeroinitializer
  %520 = sext <8 x i1> %519 to <8 x i32>
  %521 = bitcast <8 x i32> %520 to <8 x float>
  %522 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %518, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %521) #8
  %523 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 30) #8
  %524 = bitcast <4 x i64> %33 to <8 x float>
  %525 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %524) #8
  %526 = bitcast <4 x i64> %12 to <8 x float>
  %527 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %525, <8 x float> %526) #8
  %528 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %527, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %523) #8
  %529 = fmul <8 x float> %522, %528
  %530 = fadd <8 x float> %36, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %531 = bitcast <8 x float> %530 to <4 x i64>
  %532 = and <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %533 = xor <4 x i64> %532, %531
  %534 = bitcast <4 x i64> %533 to <8 x float>
  %535 = fcmp oeq <8 x float> %9, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %536 = sext <8 x i1> %535 to <8 x i32>
  %537 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %534, <8 x float> zeroinitializer, i8 17) #8
  %538 = bitcast <8 x float> %537 to <4 x i64>
  %539 = fcmp oeq <8 x float> %534, zeroinitializer
  %540 = sext <8 x i1> %539 to <8 x i32>
  %541 = bitcast <8 x i32> %540 to <8 x float>
  %542 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %541) #8
  %543 = bitcast <8 x float> %542 to <4 x i64>
  %544 = xor <4 x i64> %538, <i64 -1, i64 -1, i64 -1, i64 -1>
  %545 = and <4 x i64> %543, %544
  %546 = bitcast <4 x i64> %545 to <8 x float>
  %547 = bitcast <8 x i32> %536 to <8 x float>
  %548 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %529, <8 x float> %546, <8 x float> %547) #8
  %549 = fcmp oeq <8 x float> %36, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %550 = fcmp oeq <8 x float> %0, zeroinitializer
  %551 = sext <8 x i1> %550 to <8 x i32>
  %552 = or <8 x i1> %549, %550
  %553 = sext <8 x i1> %552 to <8 x i32>
  %554 = and <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %555 = or <4 x i64> %554, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %556 = bitcast <4 x i64> %555 to <8 x float>
  %557 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %556, <8 x float> %524) #8
  %558 = xor <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %559 = bitcast <4 x i64> %558 to <8 x float>
  %560 = bitcast <8 x i32> %551 to <8 x float>
  %561 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %559, <8 x float> %560) #8
  %562 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %561, <8 x float> zeroinitializer, i8 17) #8
  %563 = bitcast <8 x float> %562 to <4 x i64>
  %564 = and <4 x i64> %563, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %565 = xor <4 x i64> %564, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %566 = bitcast <4 x i64> %565 to <8 x float>
  %567 = fmul <8 x float> %557, %566
  %568 = bitcast <8 x i32> %553 to <8 x float>
  %569 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %548, <8 x float> %567, <8 x float> %568) #8
  %570 = fcmp uno <8 x float> %1, %0
  %571 = sext <8 x i1> %570 to <8 x i32>
  %572 = bitcast <8 x i32> %571 to <4 x i64>
  %573 = bitcast <8 x float> %569 to <4 x i64>
  %574 = or <4 x i64> %573, %572
  %575 = bitcast <4 x i64> %574 to <8 x float>
  %576 = fcmp oeq <8 x float> %1, zeroinitializer
  %577 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %578 = or <8 x i1> %576, %577
  %579 = sext <8 x i1> %578 to <8 x i32>
  %580 = bitcast <8 x i32> %579 to <8 x float>
  %581 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %575, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %580) #8
  ret <8 x float> %581
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastpowf8_u3500avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = fmul <8 x float> %9, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %12 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = bitcast <2 x i64> %13 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %18 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %19 = add nsw <4 x i32> %18, <i32 -127, i32 -127, i32 -127, i32 -127>
  %20 = and <4 x i32> %17, <i32 255, i32 255, i32 255, i32 255>
  %21 = add nsw <4 x i32> %20, <i32 -127, i32 -127, i32 -127, i32 -127>
  %22 = bitcast <8 x float> %9 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shl nuw nsw <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %26 = shl nuw nsw <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %27 = bitcast <2 x i64> %23 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = sub <4 x i32> %28, %25
  %30 = bitcast <2 x i64> %24 to <4 x i32>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = sub <4 x i32> %31, %26
  %33 = bitcast <4 x i32> %29 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = add nsw <4 x i32> %18, <i32 -191, i32 -191, i32 -191, i32 -191>
  %40 = add nsw <4 x i32> %20, <i32 -191, i32 -191, i32 -191, i32 -191>
  %41 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <4 x i32> %19 to <16 x i8>
  %44 = bitcast <4 x i32> %39 to <16 x i8>
  %45 = bitcast <2 x i64> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <4 x i32> %21 to <16 x i8>
  %48 = bitcast <4 x i32> %40 to <16 x i8>
  %49 = bitcast <2 x i64> %42 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %47, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <16 x i8> %46 to <2 x i64>
  %52 = bitcast <16 x i8> %50 to <2 x i64>
  %53 = fadd <8 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fdiv <8 x float> %53, %54
  %56 = fmul <8 x float> %55, %55
  %57 = fmul <8 x float> %56, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %58 = fadd <8 x float> %57, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %59 = fmul <8 x float> %56, %58
  %60 = fadd <8 x float> %59, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %61 = fmul <8 x float> %56, %60
  %62 = fadd <8 x float> %61, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %63 = fmul <8 x float> %56, %62
  %64 = fadd <8 x float> %63, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %65 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %68) #8
  %70 = fmul <8 x float> %69, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %71 = fmul <8 x float> %55, %64
  %72 = fadd <8 x float> %70, %71
  %73 = fmul <8 x float> %72, %1
  %74 = fmul <8 x float> %73, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %75 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %74) #8
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %78 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %79 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %75) #8
  %80 = fmul <8 x float> %79, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %81 = fadd <8 x float> %80, %73
  %82 = fmul <8 x float> %79, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %83 = fadd <8 x float> %82, %81
  %84 = fmul <8 x float> %83, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %85 = fadd <8 x float> %84, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %86 = fmul <8 x float> %83, %85
  %87 = fadd <8 x float> %86, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %88 = fmul <8 x float> %83, %87
  %89 = fadd <8 x float> %88, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %90 = fmul <8 x float> %83, %89
  %91 = fadd <8 x float> %90, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %92 = fmul <8 x float> %83, %91
  %93 = fadd <8 x float> %92, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %94 = fmul <8 x float> %83, %83
  %95 = fadd <8 x float> %83, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %96 = fmul <8 x float> %94, %93
  %97 = fadd <8 x float> %95, %96
  %98 = bitcast <2 x i64> %77 to <4 x i32>
  %99 = ashr <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  %100 = bitcast <2 x i64> %78 to <4 x i32>
  %101 = ashr <4 x i32> %100, <i32 1, i32 1, i32 1, i32 1>
  %102 = shl <4 x i32> %99, <i32 23, i32 23, i32 23, i32 23>
  %103 = add <4 x i32> %102, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %104 = shl <4 x i32> %101, <i32 23, i32 23, i32 23, i32 23>
  %105 = add <4 x i32> %104, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %97, %111
  %113 = sub <4 x i32> %98, %99
  %114 = sub <4 x i32> %100, %101
  %115 = shl <4 x i32> %113, <i32 23, i32 23, i32 23, i32 23>
  %116 = add <4 x i32> %115, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %117 = shl <4 x i32> %114, <i32 23, i32 23, i32 23, i32 23>
  %118 = add <4 x i32> %117, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %119 = bitcast <4 x i32> %116 to <2 x i64>
  %120 = bitcast <4 x i32> %118 to <2 x i64>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = fmul <8 x float> %112, %124
  %126 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %73, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = bitcast <8 x float> %125 to <4 x i64>
  %129 = xor <4 x i64> %127, <i64 -1, i64 -1, i64 -1, i64 -1>
  %130 = and <4 x i64> %128, %129
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %133 = fcmp oeq <8 x float> %132, %1
  %134 = sext <8 x i1> %133 to <8 x i32>
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = bitcast <8 x float> %1 to <4 x i64>
  %137 = and <4 x i64> %136, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %138, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = or <4 x i64> %135, %140
  %142 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %145 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %146 = bitcast <2 x i64> %144 to <4 x i32>
  %147 = and <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %148 = icmp ne <4 x i32> %147, zeroinitializer
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <2 x i64> %145 to <4 x i32>
  %152 = and <4 x i32> %151, <i32 1, i32 1, i32 1, i32 1>
  %153 = icmp ne <4 x i32> %152, zeroinitializer
  %154 = sext <4 x i1> %153 to <4 x i32>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %150, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %138, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %160 = bitcast <8 x float> %159 to <4 x i64>
  %161 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %162 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %163 = bitcast <2 x i64> %161 to <4 x i32>
  %164 = ashr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <2 x i64> %162 to <4 x i32>
  %167 = ashr <4 x i32> %166, <i32 31, i32 31, i32 31, i32 31>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = shufflevector <2 x i64> %165, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %170 = shufflevector <2 x i64> %168, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = shufflevector <4 x i64> %169, <4 x i64> %170, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %172 = and <4 x i64> %141, %171
  %173 = and <4 x i64> %172, %160
  %174 = and <4 x i64> %173, %158
  %175 = xor <4 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %176 = bitcast <4 x i64> %175 to <8 x float>
  %177 = bitcast <4 x i64> %174 to <8 x float>
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %131, <8 x float> %176, <8 x float> %177) #8
  %179 = fcmp oeq <8 x float> %0, zeroinitializer
  %180 = sext <8 x i1> %179 to <8 x i32>
  %181 = bitcast <8 x i32> %180 to <8 x float>
  %182 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %178, <8 x float> zeroinitializer, <8 x float> %181) #8
  %183 = fcmp oeq <8 x float> %1, zeroinitializer
  %184 = sext <8 x i1> %183 to <8 x i32>
  %185 = bitcast <8 x i32> %184 to <8 x float>
  %186 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %182, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %185) #8
  ret <8 x float> %186
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = fmul <8 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <8 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <8 x float> %21, %29
  %31 = fadd <8 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <8 x float> %21, %31
  %33 = fadd <8 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <8 x float> %21 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fsub <8 x float> %21, %42
  %44 = bitcast <8 x float> %33 to <4 x i64>
  %45 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %46 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %47 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %48 = and <2 x i64> %46, <i64 -17587891081216, i64 -17587891081216>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fsub <8 x float> %33, %52
  %54 = fmul <8 x float> %21, %33
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = xor <4 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <4 x i64> %56 to <8 x float>
  %58 = fmul <8 x float> %42, %52
  %59 = fadd <8 x float> %58, %57
  %60 = fmul <8 x float> %43, %52
  %61 = fadd <8 x float> %60, %59
  %62 = fmul <8 x float> %53, %42
  %63 = fadd <8 x float> %62, %61
  %64 = fmul <8 x float> %43, %53
  %65 = fadd <8 x float> %64, %63
  %66 = fmul <8 x float> %27, %33
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %54, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %69 = fsub <8 x float> %68, %54
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %54, %70
  %72 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %73, %67
  %75 = bitcast <8 x float> %68 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <2 x i64> %79, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x i64> %80, <4 x i64> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = fsub <8 x float> %68, %83
  %85 = fmul <8 x float> %21, %68
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = xor <4 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = fmul <8 x float> %42, %83
  %90 = fadd <8 x float> %89, %88
  %91 = fmul <8 x float> %43, %83
  %92 = fadd <8 x float> %91, %90
  %93 = fmul <8 x float> %84, %42
  %94 = fadd <8 x float> %93, %92
  %95 = fmul <8 x float> %43, %84
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %21, %74
  %98 = fadd <8 x float> %96, %97
  %99 = fmul <8 x float> %27, %68
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %85, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %102 = fsub <8 x float> %101, %85
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %85, %103
  %105 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %106, %100
  %108 = fmul <8 x float> %21, %21
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = xor <4 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %42, %42
  %113 = fadd <8 x float> %112, %111
  %114 = fadd <8 x float> %42, %42
  %115 = fmul <8 x float> %114, %43
  %116 = fadd <8 x float> %115, %113
  %117 = fmul <8 x float> %43, %43
  %118 = fadd <8 x float> %117, %116
  %119 = fadd <8 x float> %27, %27
  %120 = fmul <8 x float> %21, %119
  %121 = fadd <8 x float> %120, %118
  %122 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %124 = and <2 x i64> %122, <i64 -17587891081216, i64 -17587891081216>
  %125 = and <2 x i64> %123, <i64 -17587891081216, i64 -17587891081216>
  %126 = shufflevector <2 x i64> %124, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x float>
  %130 = fsub <8 x float> %108, %129
  %131 = bitcast <8 x float> %101 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <4 x i64> %136, <4 x i64> %137, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fsub <8 x float> %101, %139
  %141 = fmul <8 x float> %108, %101
  %142 = bitcast <8 x float> %141 to <4 x i64>
  %143 = xor <4 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <4 x i64> %143 to <8 x float>
  %145 = fmul <8 x float> %129, %139
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %130, %139
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %140, %129
  %150 = fadd <8 x float> %149, %148
  %151 = fmul <8 x float> %130, %140
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %108, %107
  %154 = fadd <8 x float> %152, %153
  %155 = fmul <8 x float> %101, %121
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %21, %141
  %158 = fsub <8 x float> %157, %21
  %159 = fsub <8 x float> %157, %158
  %160 = fsub <8 x float> %21, %159
  %161 = fsub <8 x float> %141, %158
  %162 = fadd <8 x float> %161, %160
  %163 = fadd <8 x float> %27, %156
  %164 = fadd <8 x float> %162, %163
  %165 = fadd <8 x float> %157, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %166 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %165
  %167 = fadd <8 x float> %157, %166
  %168 = fadd <8 x float> %167, %164
  %169 = bitcast <2 x i64> %9 to <4 x i32>
  %170 = ashr <4 x i32> %169, <i32 1, i32 1, i32 1, i32 1>
  %171 = bitcast <2 x i64> %10 to <4 x i32>
  %172 = ashr <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  %173 = shl <4 x i32> %170, <i32 23, i32 23, i32 23, i32 23>
  %174 = add <4 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = shl <4 x i32> %172, <i32 23, i32 23, i32 23, i32 23>
  %176 = add <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = bitcast <4 x i32> %174 to <2 x i64>
  %178 = bitcast <4 x i32> %176 to <2 x i64>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fmul <8 x float> %165, %182
  %184 = sub <4 x i32> %169, %170
  %185 = sub <4 x i32> %171, %172
  %186 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %187 = add <4 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %189 = add <4 x i32> %188, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %190 = bitcast <4 x i32> %187 to <2 x i64>
  %191 = bitcast <4 x i32> %189 to <2 x i64>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %183, %195
  %197 = fmul <8 x float> %168, %182
  %198 = fmul <8 x float> %197, %195
  %199 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %200 = bitcast <8 x float> %199 to <4 x i64>
  %201 = bitcast <8 x float> %196 to <4 x i64>
  %202 = xor <4 x i64> %200, <i64 -1, i64 -1, i64 -1, i64 -1>
  %203 = and <4 x i64> %201, %202
  %204 = bitcast <8 x float> %198 to <4 x i64>
  %205 = and <4 x i64> %204, %202
  %206 = bitcast <4 x i64> %203 to <8 x float>
  %207 = bitcast <4 x i64> %205 to <8 x float>
  %208 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %206
  %209 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %211 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %212 = and <2 x i64> %210, <i64 -17587891081216, i64 -17587891081216>
  %213 = shufflevector <2 x i64> %211, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %214 = shufflevector <2 x i64> %212, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %215 = shufflevector <4 x i64> %213, <4 x i64> %214, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %216 = bitcast <4 x i64> %215 to <8 x float>
  %217 = fsub <8 x float> %206, %216
  %218 = bitcast <8 x float> %208 to <4 x i64>
  %219 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %220 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = and <2 x i64> %219, <i64 -17587891081216, i64 -17587891081216>
  %222 = and <2 x i64> %220, <i64 -17587891081216, i64 -17587891081216>
  %223 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = shufflevector <2 x i64> %222, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x i64> %223, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x i64> %225 to <8 x float>
  %227 = fsub <8 x float> %208, %226
  %228 = fmul <8 x float> %216, %226
  %229 = fadd <8 x float> %228, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %230 = fmul <8 x float> %227, %216
  %231 = fadd <8 x float> %230, %229
  %232 = fmul <8 x float> %217, %226
  %233 = fadd <8 x float> %232, %231
  %234 = fmul <8 x float> %217, %227
  %235 = fadd <8 x float> %234, %233
  %236 = fmul <8 x float> %208, %207
  %237 = fadd <8 x float> %235, %236
  %238 = xor <4 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %239 = bitcast <4 x i64> %238 to <8 x float>
  %240 = fmul <8 x float> %237, %239
  %241 = fsub <8 x float> %206, %208
  %242 = fsub <8 x float> %206, %241
  %243 = fsub <8 x float> %242, %208
  %244 = fadd <8 x float> %243, %207
  %245 = fsub <8 x float> %244, %240
  %246 = fadd <8 x float> %241, %245
  %247 = fmul <8 x float> %246, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %248 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %249 = bitcast <8 x float> %248 to <4 x i64>
  %250 = fcmp uno <8 x float> %247, zeroinitializer
  %251 = sext <8 x i1> %250 to <8 x i32>
  %252 = bitcast <8 x i32> %251 to <4 x i64>
  %253 = or <4 x i64> %252, %249
  %254 = bitcast <4 x i64> %253 to <8 x float>
  %255 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %247, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %254) #8
  %256 = bitcast <8 x float> %255 to <4 x i64>
  %257 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %258 = xor <4 x i64> %257, %256
  %259 = fcmp uno <8 x float> %0, zeroinitializer
  %260 = sext <8 x i1> %259 to <8 x i32>
  %261 = bitcast <8 x i32> %260 to <4 x i64>
  %262 = or <4 x i64> %258, %261
  %263 = bitcast <4 x i64> %262 to <8 x float>
  ret <8 x float> %263
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = fmul <8 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <8 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <8 x float> %21, %29
  %31 = fadd <8 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <8 x float> %21, %31
  %33 = fadd <8 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <8 x float> %21 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fsub <8 x float> %21, %42
  %44 = bitcast <8 x float> %33 to <4 x i64>
  %45 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %46 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %47 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %48 = and <2 x i64> %46, <i64 -17587891081216, i64 -17587891081216>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fsub <8 x float> %33, %52
  %54 = fmul <8 x float> %21, %33
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = xor <4 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <4 x i64> %56 to <8 x float>
  %58 = fmul <8 x float> %42, %52
  %59 = fadd <8 x float> %58, %57
  %60 = fmul <8 x float> %43, %52
  %61 = fadd <8 x float> %60, %59
  %62 = fmul <8 x float> %53, %42
  %63 = fadd <8 x float> %62, %61
  %64 = fmul <8 x float> %43, %53
  %65 = fadd <8 x float> %64, %63
  %66 = fmul <8 x float> %27, %33
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %54, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %69 = fsub <8 x float> %68, %54
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %54, %70
  %72 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %73, %67
  %75 = bitcast <8 x float> %68 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <2 x i64> %79, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x i64> %80, <4 x i64> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = fsub <8 x float> %68, %83
  %85 = fmul <8 x float> %21, %68
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = xor <4 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = fmul <8 x float> %42, %83
  %90 = fadd <8 x float> %89, %88
  %91 = fmul <8 x float> %43, %83
  %92 = fadd <8 x float> %91, %90
  %93 = fmul <8 x float> %84, %42
  %94 = fadd <8 x float> %93, %92
  %95 = fmul <8 x float> %43, %84
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %21, %74
  %98 = fadd <8 x float> %96, %97
  %99 = fmul <8 x float> %27, %68
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %85, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %102 = fsub <8 x float> %101, %85
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %85, %103
  %105 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %106, %100
  %108 = fmul <8 x float> %21, %21
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = xor <4 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %42, %42
  %113 = fadd <8 x float> %112, %111
  %114 = fadd <8 x float> %42, %42
  %115 = fmul <8 x float> %114, %43
  %116 = fadd <8 x float> %115, %113
  %117 = fmul <8 x float> %43, %43
  %118 = fadd <8 x float> %117, %116
  %119 = fadd <8 x float> %27, %27
  %120 = fmul <8 x float> %21, %119
  %121 = fadd <8 x float> %120, %118
  %122 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %124 = and <2 x i64> %122, <i64 -17587891081216, i64 -17587891081216>
  %125 = and <2 x i64> %123, <i64 -17587891081216, i64 -17587891081216>
  %126 = shufflevector <2 x i64> %124, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x float>
  %130 = fsub <8 x float> %108, %129
  %131 = bitcast <8 x float> %101 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <4 x i64> %136, <4 x i64> %137, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fsub <8 x float> %101, %139
  %141 = fmul <8 x float> %108, %101
  %142 = bitcast <8 x float> %141 to <4 x i64>
  %143 = xor <4 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <4 x i64> %143 to <8 x float>
  %145 = fmul <8 x float> %129, %139
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %130, %139
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %140, %129
  %150 = fadd <8 x float> %149, %148
  %151 = fmul <8 x float> %130, %140
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %108, %107
  %154 = fadd <8 x float> %152, %153
  %155 = fmul <8 x float> %101, %121
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %21, %141
  %158 = fsub <8 x float> %157, %21
  %159 = fsub <8 x float> %157, %158
  %160 = fsub <8 x float> %21, %159
  %161 = fsub <8 x float> %141, %158
  %162 = fadd <8 x float> %161, %160
  %163 = fadd <8 x float> %27, %156
  %164 = fadd <8 x float> %162, %163
  %165 = fadd <8 x float> %157, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %166 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %165
  %167 = fadd <8 x float> %157, %166
  %168 = fadd <8 x float> %167, %164
  %169 = bitcast <2 x i64> %9 to <4 x i32>
  %170 = ashr <4 x i32> %169, <i32 1, i32 1, i32 1, i32 1>
  %171 = bitcast <2 x i64> %10 to <4 x i32>
  %172 = ashr <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  %173 = shl <4 x i32> %170, <i32 23, i32 23, i32 23, i32 23>
  %174 = add <4 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = shl <4 x i32> %172, <i32 23, i32 23, i32 23, i32 23>
  %176 = add <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = bitcast <4 x i32> %174 to <2 x i64>
  %178 = bitcast <4 x i32> %176 to <2 x i64>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fmul <8 x float> %165, %182
  %184 = sub <4 x i32> %169, %170
  %185 = sub <4 x i32> %171, %172
  %186 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %187 = add <4 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %189 = add <4 x i32> %188, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %190 = bitcast <4 x i32> %187 to <2 x i64>
  %191 = bitcast <4 x i32> %189 to <2 x i64>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %183, %195
  %197 = fmul <8 x float> %168, %182
  %198 = fmul <8 x float> %197, %195
  %199 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %200 = bitcast <8 x float> %199 to <4 x i64>
  %201 = bitcast <8 x float> %196 to <4 x i64>
  %202 = xor <4 x i64> %200, <i64 -1, i64 -1, i64 -1, i64 -1>
  %203 = and <4 x i64> %201, %202
  %204 = bitcast <8 x float> %198 to <4 x i64>
  %205 = and <4 x i64> %204, %202
  %206 = bitcast <4 x i64> %203 to <8 x float>
  %207 = bitcast <4 x i64> %205 to <8 x float>
  %208 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %206
  %209 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %211 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %212 = and <2 x i64> %210, <i64 -17587891081216, i64 -17587891081216>
  %213 = shufflevector <2 x i64> %211, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %214 = shufflevector <2 x i64> %212, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %215 = shufflevector <4 x i64> %213, <4 x i64> %214, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %216 = bitcast <4 x i64> %215 to <8 x float>
  %217 = fsub <8 x float> %206, %216
  %218 = bitcast <8 x float> %208 to <4 x i64>
  %219 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %220 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = and <2 x i64> %219, <i64 -17587891081216, i64 -17587891081216>
  %222 = and <2 x i64> %220, <i64 -17587891081216, i64 -17587891081216>
  %223 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = shufflevector <2 x i64> %222, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x i64> %223, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x i64> %225 to <8 x float>
  %227 = fsub <8 x float> %208, %226
  %228 = fmul <8 x float> %216, %226
  %229 = fadd <8 x float> %228, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %230 = fmul <8 x float> %227, %216
  %231 = fadd <8 x float> %230, %229
  %232 = fmul <8 x float> %217, %226
  %233 = fadd <8 x float> %232, %231
  %234 = fmul <8 x float> %217, %227
  %235 = fadd <8 x float> %234, %233
  %236 = fmul <8 x float> %208, %207
  %237 = fadd <8 x float> %235, %236
  %238 = xor <4 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %239 = bitcast <4 x i64> %238 to <8 x float>
  %240 = fmul <8 x float> %237, %239
  %241 = fadd <8 x float> %208, %206
  %242 = fsub <8 x float> %206, %241
  %243 = fadd <8 x float> %208, %242
  %244 = fadd <8 x float> %243, %207
  %245 = fadd <8 x float> %244, %240
  %246 = fadd <8 x float> %241, %245
  %247 = fmul <8 x float> %246, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %248 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #8
  %249 = bitcast <8 x float> %248 to <4 x i64>
  %250 = fcmp uno <8 x float> %247, zeroinitializer
  %251 = sext <8 x i1> %250 to <8 x i32>
  %252 = bitcast <8 x i32> %251 to <4 x i64>
  %253 = or <4 x i64> %252, %249
  %254 = bitcast <4 x i64> %253 to <8 x float>
  %255 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %247, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %254) #8
  %256 = fcmp uno <8 x float> %0, zeroinitializer
  %257 = sext <8 x i1> %256 to <8 x i32>
  %258 = bitcast <8 x i32> %257 to <4 x i64>
  %259 = bitcast <8 x float> %255 to <4 x i64>
  %260 = or <4 x i64> %259, %258
  %261 = bitcast <4 x i64> %260 to <8 x float>
  ret <8 x float> %261
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %12, %4
  %14 = fsub <8 x float> %13, %4
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %4, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %18, zeroinitializer
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = fmul <8 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <8 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <8 x float> %21, %29
  %31 = fadd <8 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <8 x float> %21, %31
  %33 = fadd <8 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <8 x float> %21 to <4 x i64>
  %35 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %36 = shufflevector <4 x i64> %34, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %37 = and <2 x i64> %35, <i64 -17587891081216, i64 -17587891081216>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fsub <8 x float> %21, %42
  %44 = bitcast <8 x float> %33 to <4 x i64>
  %45 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %46 = shufflevector <4 x i64> %44, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %47 = and <2 x i64> %45, <i64 -17587891081216, i64 -17587891081216>
  %48 = and <2 x i64> %46, <i64 -17587891081216, i64 -17587891081216>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fsub <8 x float> %33, %52
  %54 = fmul <8 x float> %21, %33
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = xor <4 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <4 x i64> %56 to <8 x float>
  %58 = fmul <8 x float> %42, %52
  %59 = fadd <8 x float> %58, %57
  %60 = fmul <8 x float> %43, %52
  %61 = fadd <8 x float> %60, %59
  %62 = fmul <8 x float> %53, %42
  %63 = fadd <8 x float> %62, %61
  %64 = fmul <8 x float> %43, %53
  %65 = fadd <8 x float> %64, %63
  %66 = fmul <8 x float> %27, %33
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %54, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %69 = fsub <8 x float> %68, %54
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %54, %70
  %72 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %73, %67
  %75 = bitcast <8 x float> %68 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <2 x i64> %79, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x i64> %80, <4 x i64> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = fsub <8 x float> %68, %83
  %85 = fmul <8 x float> %21, %68
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = xor <4 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = fmul <8 x float> %42, %83
  %90 = fadd <8 x float> %89, %88
  %91 = fmul <8 x float> %43, %83
  %92 = fadd <8 x float> %91, %90
  %93 = fmul <8 x float> %84, %42
  %94 = fadd <8 x float> %93, %92
  %95 = fmul <8 x float> %43, %84
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %21, %74
  %98 = fadd <8 x float> %96, %97
  %99 = fmul <8 x float> %27, %68
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %85, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %102 = fsub <8 x float> %101, %85
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> %85, %103
  %105 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %102
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %106, %100
  %108 = fmul <8 x float> %21, %21
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = xor <4 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %42, %42
  %113 = fadd <8 x float> %112, %111
  %114 = fadd <8 x float> %42, %42
  %115 = fmul <8 x float> %114, %43
  %116 = fadd <8 x float> %115, %113
  %117 = fmul <8 x float> %43, %43
  %118 = fadd <8 x float> %117, %116
  %119 = fadd <8 x float> %27, %27
  %120 = fmul <8 x float> %21, %119
  %121 = fadd <8 x float> %120, %118
  %122 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %123 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %124 = and <2 x i64> %122, <i64 -17587891081216, i64 -17587891081216>
  %125 = and <2 x i64> %123, <i64 -17587891081216, i64 -17587891081216>
  %126 = shufflevector <2 x i64> %124, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x float>
  %130 = fsub <8 x float> %108, %129
  %131 = bitcast <8 x float> %101 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <4 x i64> %136, <4 x i64> %137, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fsub <8 x float> %101, %139
  %141 = fmul <8 x float> %108, %101
  %142 = bitcast <8 x float> %141 to <4 x i64>
  %143 = xor <4 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <4 x i64> %143 to <8 x float>
  %145 = fmul <8 x float> %129, %139
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %130, %139
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %140, %129
  %150 = fadd <8 x float> %149, %148
  %151 = fmul <8 x float> %130, %140
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %108, %107
  %154 = fadd <8 x float> %152, %153
  %155 = fmul <8 x float> %101, %121
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %21, %141
  %158 = fsub <8 x float> %157, %21
  %159 = fsub <8 x float> %157, %158
  %160 = fsub <8 x float> %21, %159
  %161 = fsub <8 x float> %141, %158
  %162 = fadd <8 x float> %161, %160
  %163 = fadd <8 x float> %27, %156
  %164 = fadd <8 x float> %162, %163
  %165 = fadd <8 x float> %157, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %166 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %165
  %167 = fadd <8 x float> %157, %166
  %168 = fadd <8 x float> %167, %164
  %169 = bitcast <2 x i64> %9 to <4 x i32>
  %170 = ashr <4 x i32> %169, <i32 1, i32 1, i32 1, i32 1>
  %171 = bitcast <2 x i64> %10 to <4 x i32>
  %172 = ashr <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  %173 = shl <4 x i32> %170, <i32 23, i32 23, i32 23, i32 23>
  %174 = add <4 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = shl <4 x i32> %172, <i32 23, i32 23, i32 23, i32 23>
  %176 = add <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = bitcast <4 x i32> %174 to <2 x i64>
  %178 = bitcast <4 x i32> %176 to <2 x i64>
  %179 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = fmul <8 x float> %165, %182
  %184 = sub <4 x i32> %169, %170
  %185 = sub <4 x i32> %171, %172
  %186 = shl <4 x i32> %184, <i32 23, i32 23, i32 23, i32 23>
  %187 = add <4 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = shl <4 x i32> %185, <i32 23, i32 23, i32 23, i32 23>
  %189 = add <4 x i32> %188, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %190 = bitcast <4 x i32> %187 to <2 x i64>
  %191 = bitcast <4 x i32> %189 to <2 x i64>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fmul <8 x float> %183, %195
  %197 = fmul <8 x float> %168, %182
  %198 = fmul <8 x float> %197, %195
  %199 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %200 = bitcast <8 x float> %199 to <4 x i64>
  %201 = bitcast <8 x float> %196 to <4 x i64>
  %202 = xor <4 x i64> %200, <i64 -1, i64 -1, i64 -1, i64 -1>
  %203 = and <4 x i64> %201, %202
  %204 = bitcast <8 x float> %198 to <4 x i64>
  %205 = and <4 x i64> %204, %202
  %206 = bitcast <4 x i64> %203 to <8 x float>
  %207 = bitcast <4 x i64> %205 to <8 x float>
  %208 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %206
  %209 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %211 = and <2 x i64> %209, <i64 -17587891081216, i64 -17587891081216>
  %212 = and <2 x i64> %210, <i64 -17587891081216, i64 -17587891081216>
  %213 = shufflevector <2 x i64> %211, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %214 = shufflevector <2 x i64> %212, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %215 = shufflevector <4 x i64> %213, <4 x i64> %214, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %216 = bitcast <4 x i64> %215 to <8 x float>
  %217 = fsub <8 x float> %206, %216
  %218 = bitcast <8 x float> %208 to <4 x i64>
  %219 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %220 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %221 = and <2 x i64> %219, <i64 -17587891081216, i64 -17587891081216>
  %222 = and <2 x i64> %220, <i64 -17587891081216, i64 -17587891081216>
  %223 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %224 = shufflevector <2 x i64> %222, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %225 = shufflevector <4 x i64> %223, <4 x i64> %224, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = bitcast <4 x i64> %225 to <8 x float>
  %227 = fsub <8 x float> %208, %226
  %228 = fmul <8 x float> %216, %226
  %229 = fadd <8 x float> %228, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %230 = fmul <8 x float> %227, %216
  %231 = fadd <8 x float> %230, %229
  %232 = fmul <8 x float> %217, %226
  %233 = fadd <8 x float> %232, %231
  %234 = fmul <8 x float> %217, %227
  %235 = fadd <8 x float> %234, %233
  %236 = fmul <8 x float> %208, %207
  %237 = fadd <8 x float> %235, %236
  %238 = xor <4 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %239 = bitcast <4 x i64> %238 to <8 x float>
  %240 = fmul <8 x float> %237, %239
  %241 = bitcast <8 x float> %240 to <4 x i64>
  %242 = xor <4 x i64> %241, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = bitcast <4 x i64> %242 to <8 x float>
  %244 = fadd <8 x float> %206, %239
  %245 = fsub <8 x float> %206, %244
  %246 = fadd <8 x float> %245, %239
  %247 = fadd <8 x float> %246, %207
  %248 = fadd <8 x float> %247, %243
  %249 = fadd <8 x float> %208, %206
  %250 = fsub <8 x float> %206, %249
  %251 = fadd <8 x float> %208, %250
  %252 = fadd <8 x float> %251, %207
  %253 = fadd <8 x float> %252, %240
  %254 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %249
  %255 = bitcast <8 x float> %249 to <4 x i64>
  %256 = shufflevector <4 x i64> %255, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %257 = shufflevector <4 x i64> %255, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %258 = and <2 x i64> %256, <i64 -17587891081216, i64 -17587891081216>
  %259 = and <2 x i64> %257, <i64 -17587891081216, i64 -17587891081216>
  %260 = shufflevector <2 x i64> %258, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %261 = shufflevector <2 x i64> %259, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %262 = shufflevector <4 x i64> %260, <4 x i64> %261, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %263 = bitcast <4 x i64> %262 to <8 x float>
  %264 = fsub <8 x float> %249, %263
  %265 = bitcast <8 x float> %254 to <4 x i64>
  %266 = shufflevector <4 x i64> %265, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %267 = shufflevector <4 x i64> %265, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %268 = and <2 x i64> %266, <i64 -17587891081216, i64 -17587891081216>
  %269 = and <2 x i64> %267, <i64 -17587891081216, i64 -17587891081216>
  %270 = shufflevector <2 x i64> %268, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %271 = shufflevector <2 x i64> %269, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %272 = shufflevector <4 x i64> %270, <4 x i64> %271, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %273 = bitcast <4 x i64> %272 to <8 x float>
  %274 = fsub <8 x float> %254, %273
  %275 = bitcast <8 x float> %244 to <4 x i64>
  %276 = shufflevector <4 x i64> %275, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %277 = shufflevector <4 x i64> %275, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %278 = and <2 x i64> %276, <i64 -17587891081216, i64 -17587891081216>
  %279 = and <2 x i64> %277, <i64 -17587891081216, i64 -17587891081216>
  %280 = shufflevector <2 x i64> %278, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = shufflevector <2 x i64> %279, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %282 = shufflevector <4 x i64> %280, <4 x i64> %281, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %283 = bitcast <4 x i64> %282 to <8 x float>
  %284 = fsub <8 x float> %244, %283
  %285 = fmul <8 x float> %254, %244
  %286 = fmul <8 x float> %263, %273
  %287 = fadd <8 x float> %286, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %288 = fmul <8 x float> %274, %263
  %289 = fadd <8 x float> %288, %287
  %290 = fmul <8 x float> %264, %273
  %291 = fadd <8 x float> %290, %289
  %292 = fmul <8 x float> %264, %274
  %293 = fadd <8 x float> %292, %291
  %294 = bitcast <8 x float> %293 to <4 x i64>
  %295 = xor <4 x i64> %294, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %296 = bitcast <4 x i64> %295 to <8 x float>
  %297 = bitcast <8 x float> %285 to <4 x i64>
  %298 = xor <4 x i64> %297, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %299 = bitcast <4 x i64> %298 to <8 x float>
  %300 = fmul <8 x float> %273, %283
  %301 = fadd <8 x float> %300, %299
  %302 = fmul <8 x float> %274, %283
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %284, %273
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %274, %284
  %307 = fadd <8 x float> %306, %305
  %308 = fmul <8 x float> %285, %296
  %309 = fadd <8 x float> %307, %308
  %310 = fmul <8 x float> %285, %253
  %311 = fsub <8 x float> %248, %310
  %312 = fmul <8 x float> %254, %311
  %313 = fadd <8 x float> %309, %312
  %314 = fadd <8 x float> %285, %313
  %315 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %316 = bitcast <8 x float> %315 to <4 x i64>
  %317 = fcmp uno <8 x float> %314, zeroinitializer
  %318 = sext <8 x i1> %317 to <8 x i32>
  %319 = bitcast <8 x i32> %318 to <4 x i64>
  %320 = or <4 x i64> %319, %316
  %321 = bitcast <4 x i64> %320 to <8 x float>
  %322 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %314, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %321) #8
  %323 = bitcast <8 x float> %322 to <4 x i64>
  %324 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %325 = xor <4 x i64> %324, %323
  %326 = fcmp uno <8 x float> %0, zeroinitializer
  %327 = sext <8 x i1> %326 to <8 x i32>
  %328 = bitcast <8 x i32> %327 to <4 x i64>
  %329 = or <4 x i64> %325, %328
  %330 = bitcast <4 x i64> %329 to <8 x float>
  ret <8 x float> %330
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = fmul <8 x float> %10, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %12 = fadd <8 x float> %11, %4
  %13 = fmul <8 x float> %10, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %14 = fadd <8 x float> %13, %12
  %15 = fmul <8 x float> %14, %14
  %16 = fmul <8 x float> %15, %15
  %17 = fmul <8 x float> %14, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %18 = fadd <8 x float> %17, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %19 = fmul <8 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %20 = fadd <8 x float> %19, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %21 = fmul <8 x float> %14, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %22 = fadd <8 x float> %21, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = fmul <8 x float> %15, %20
  %24 = fadd <8 x float> %22, %23
  %25 = fmul <8 x float> %16, %18
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %15, %26
  %28 = fadd <8 x float> %14, %27
  %29 = bitcast <2 x i64> %8 to <4 x i32>
  %30 = icmp eq <4 x i32> %29, zeroinitializer
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = bitcast <2 x i64> %9 to <4 x i32>
  %34 = icmp eq <4 x i32> %33, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = fadd <8 x float> %28, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %41 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %42 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %43 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %46 = add <4 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fmul <8 x float> %40, %52
  %54 = sub <4 x i32> %29, %41
  %55 = sub <4 x i32> %33, %42
  %56 = shl <4 x i32> %54, <i32 23, i32 23, i32 23, i32 23>
  %57 = add <4 x i32> %56, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %58 = shl <4 x i32> %55, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = bitcast <4 x i32> %57 to <2 x i64>
  %61 = bitcast <4 x i32> %59 to <2 x i64>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x i64> %62, <4 x i64> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = fmul <8 x float> %53, %65
  %67 = fadd <8 x float> %66, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %68 = bitcast <4 x i64> %39 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %28, <8 x float> %68) #8
  %70 = fadd <8 x float> %69, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %71 = fadd <8 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %72 = fdiv <8 x float> %70, %71
  %73 = fmul <8 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %74 = fmul <8 x float> %73, %72
  %75 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %76 = bitcast <8 x float> %75 to <4 x i64>
  %77 = fcmp uno <8 x float> %74, zeroinitializer
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = bitcast <8 x i32> %78 to <4 x i64>
  %80 = or <4 x i64> %79, %76
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %81) #8
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = xor <4 x i64> %84, %83
  %86 = fcmp uno <8 x float> %0, zeroinitializer
  %87 = sext <8 x i1> %86 to <8 x i32>
  %88 = bitcast <8 x i32> %87 to <4 x i64>
  %89 = or <4 x i64> %85, %88
  %90 = bitcast <4 x i64> %89 to <8 x float>
  ret <8 x float> %90
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = fmul <8 x float> %10, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %12 = fadd <8 x float> %11, %4
  %13 = fmul <8 x float> %10, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %14 = fadd <8 x float> %13, %12
  %15 = fmul <8 x float> %14, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <8 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <8 x float> %14, %16
  %18 = fadd <8 x float> %17, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %19 = fmul <8 x float> %14, %18
  %20 = fadd <8 x float> %19, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %21 = fmul <8 x float> %14, %20
  %22 = fadd <8 x float> %21, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %23 = fmul <8 x float> %14, %22
  %24 = fadd <8 x float> %23, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %25 = fmul <8 x float> %14, %14
  %26 = fmul <8 x float> %25, %24
  %27 = fadd <8 x float> %14, %26
  %28 = fadd <8 x float> %27, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = bitcast <2 x i64> %8 to <4 x i32>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = bitcast <2 x i64> %9 to <4 x i32>
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %28, %42
  %44 = sub <4 x i32> %29, %30
  %45 = sub <4 x i32> %31, %32
  %46 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = bitcast <4 x i32> %47 to <2 x i64>
  %51 = bitcast <4 x i32> %49 to <2 x i64>
  %52 = shufflevector <2 x i64> %50, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <4 x i64> %52, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fmul <8 x float> %43, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = bitcast <8 x float> %56 to <4 x i64>
  %60 = xor <4 x i64> %58, <i64 -1, i64 -1, i64 -1, i64 -1>
  %61 = and <4 x i64> %59, %60
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #8
  %64 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %63) #8
  %65 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %64
  %66 = fmul <8 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %67 = fadd <8 x float> %66, %65
  %68 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = fcmp uno <8 x float> %67, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = or <4 x i64> %72, %69
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %74) #8
  %76 = fcmp uno <8 x float> %0, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <4 x i64>
  %79 = bitcast <8 x float> %75 to <4 x i64>
  %80 = or <4 x i64> %79, %78
  %81 = bitcast <4 x i64> %80 to <8 x float>
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %5, %12
  %14 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <8 x float> %14, %13
  %16 = fmul <8 x float> %15, %15
  %17 = fmul <8 x float> %16, %16
  %18 = fmul <8 x float> %15, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %19 = fadd <8 x float> %18, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %20 = fmul <8 x float> %15, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %21 = fadd <8 x float> %20, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %22 = fmul <8 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %23 = fadd <8 x float> %22, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = fmul <8 x float> %16, %21
  %25 = fadd <8 x float> %23, %24
  %26 = fmul <8 x float> %17, %19
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %16, %27
  %29 = fadd <8 x float> %15, %28
  %30 = bitcast <2 x i64> %9 to <4 x i32>
  %31 = icmp eq <4 x i32> %30, zeroinitializer
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = bitcast <2 x i64> %10 to <4 x i32>
  %35 = icmp eq <4 x i32> %34, zeroinitializer
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <4 x i64> %38, <4 x i64> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %41 = fadd <8 x float> %29, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = ashr <4 x i32> %30, <i32 1, i32 1, i32 1, i32 1>
  %43 = ashr <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  %44 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %45 = add <4 x i32> %44, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %46 = shl <4 x i32> %43, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fmul <8 x float> %41, %53
  %55 = sub <4 x i32> %30, %42
  %56 = sub <4 x i32> %34, %43
  %57 = shl <4 x i32> %55, <i32 23, i32 23, i32 23, i32 23>
  %58 = add <4 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = bitcast <4 x i32> %58 to <2 x i64>
  %62 = bitcast <4 x i32> %60 to <2 x i64>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = bitcast <4 x i64> %65 to <8 x float>
  %67 = fmul <8 x float> %54, %66
  %68 = fadd <8 x float> %67, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %69 = bitcast <4 x i64> %40 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %29, <8 x float> %69) #8
  %71 = fadd <8 x float> %70, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %72 = fdiv <8 x float> %70, %71
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %72, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %77, %74
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #8
  %81 = bitcast <8 x float> %80 to <4 x i64>
  %82 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = xor <4 x i64> %82, %81
  %84 = fcmp uno <8 x float> %0, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = or <4 x i64> %83, %86
  %88 = bitcast <4 x i64> %87 to <8 x float>
  ret <8 x float> %88
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #8
  %6 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %7 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %7, <i64 -17587891081216, i64 -17587891081216>
  %10 = and <2 x i64> %8, <i64 -17587891081216, i64 -17587891081216>
  %11 = shufflevector <2 x i64> %9, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %12 = shufflevector <2 x i64> %10, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %13 = shufflevector <4 x i64> %11, <4 x i64> %12, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %14 = bitcast <4 x i64> %13 to <8 x float>
  %15 = fsub <8 x float> %0, %14
  %16 = bitcast <8 x float> %6 to <4 x i64>
  %17 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %18 = shufflevector <4 x i64> %16, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %19 = and <2 x i64> %17, <i64 -17587891081216, i64 -17587891081216>
  %20 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <2 x i64> %20, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <4 x i64> %21, <4 x i64> %22, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fsub <8 x float> %6, %24
  %26 = fmul <8 x float> %14, %24
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fmul <8 x float> %25, %14
  %29 = fadd <8 x float> %28, %27
  %30 = fmul <8 x float> %15, %24
  %31 = fadd <8 x float> %30, %29
  %32 = fmul <8 x float> %15, %25
  %33 = fadd <8 x float> %32, %31
  %34 = xor <4 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <4 x i64> %34 to <8 x float>
  %36 = fmul <8 x float> %33, %35
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %36, <8 x float> %5) #8
  %39 = bitcast <8 x float> %37 to <4 x i64>
  %40 = shufflevector <4 x i64> %39, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %41 = shufflevector <4 x i64> %39, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %42 = and <2 x i64> %40, <i64 -17587891081216, i64 -17587891081216>
  %43 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x i64> %44, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %47 = bitcast <4 x i64> %46 to <8 x float>
  %48 = fsub <8 x float> %37, %47
  %49 = fmul <8 x float> %37, %37
  %50 = bitcast <8 x float> %49 to <4 x i64>
  %51 = xor <4 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fmul <8 x float> %47, %47
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %47, %47
  %56 = fmul <8 x float> %55, %48
  %57 = fadd <8 x float> %56, %54
  %58 = fmul <8 x float> %48, %48
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %38, %38
  %61 = fmul <8 x float> %37, %60
  %62 = fadd <8 x float> %61, %59
  %63 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %64 = fsub <8 x float> %63, %49
  %65 = fsub <8 x float> %63, %64
  %66 = fsub <8 x float> %49, %65
  %67 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %64
  %68 = fadd <8 x float> %67, %66
  %69 = fadd <8 x float> %68, %62
  %70 = fadd <8 x float> %63, %69
  %71 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %70) #8
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %71, %80
  %82 = fmul <8 x float> %71, %71
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = xor <4 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <4 x i64> %84 to <8 x float>
  %86 = fmul <8 x float> %80, %80
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %81, %80
  %89 = fadd <8 x float> %88, %87
  %90 = fadd <8 x float> %88, %89
  %91 = fmul <8 x float> %81, %81
  %92 = fadd <8 x float> %91, %90
  %93 = fadd <8 x float> %63, %82
  %94 = fsub <8 x float> %93, %63
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %63, %95
  %97 = fsub <8 x float> %82, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %69, %92
  %100 = fadd <8 x float> %98, %99
  %101 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %102 = bitcast <8 x float> %101 to <4 x i64>
  %103 = shufflevector <4 x i64> %102, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %104 = shufflevector <4 x i64> %102, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %105 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %106 = and <2 x i64> %104, <i64 -17587891081216, i64 -17587891081216>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <4 x i64> %107, <4 x i64> %108, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = fsub <8 x float> %101, %110
  %112 = fmul <8 x float> %80, %110
  %113 = fadd <8 x float> %112, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %114 = fmul <8 x float> %111, %80
  %115 = fadd <8 x float> %114, %113
  %116 = fmul <8 x float> %81, %110
  %117 = fadd <8 x float> %116, %115
  %118 = fmul <8 x float> %81, %111
  %119 = fadd <8 x float> %118, %117
  %120 = xor <4 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <4 x i64> %120 to <8 x float>
  %122 = fmul <8 x float> %119, %121
  %123 = bitcast <8 x float> %93 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %126 = and <2 x i64> %124, <i64 -17587891081216, i64 -17587891081216>
  %127 = and <2 x i64> %125, <i64 -17587891081216, i64 -17587891081216>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <2 x i64> %127, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = shufflevector <4 x i64> %128, <4 x i64> %129, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = fsub <8 x float> %93, %131
  %133 = fmul <8 x float> %101, %93
  %134 = bitcast <8 x float> %133 to <4 x i64>
  %135 = xor <4 x i64> %134, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = fmul <8 x float> %110, %131
  %138 = fadd <8 x float> %137, %136
  %139 = fmul <8 x float> %132, %110
  %140 = fadd <8 x float> %139, %138
  %141 = fmul <8 x float> %111, %131
  %142 = fadd <8 x float> %141, %140
  %143 = fmul <8 x float> %111, %132
  %144 = fadd <8 x float> %143, %142
  %145 = fmul <8 x float> %93, %122
  %146 = fadd <8 x float> %144, %145
  %147 = fmul <8 x float> %101, %100
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %133, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %150 = fmul <8 x float> %148, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %151 = bitcast <8 x float> %149 to <4 x i64>
  %152 = shufflevector <4 x i64> %151, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %153 = shufflevector <4 x i64> %151, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %154 = and <2 x i64> %152, <i64 -17587891081216, i64 -17587891081216>
  %155 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %156 = shufflevector <2 x i64> %154, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = bitcast <4 x i64> %158 to <8 x float>
  %160 = fsub <8 x float> %149, %159
  %161 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %162 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %163 = and <2 x i64> %161, <i64 -17587891081216, i64 -17587891081216>
  %164 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %165 = shufflevector <2 x i64> %163, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %166 = shufflevector <2 x i64> %164, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %167 = shufflevector <4 x i64> %165, <4 x i64> %166, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %168 = bitcast <4 x i64> %167 to <8 x float>
  %169 = fsub <8 x float> %4, %168
  %170 = fmul <8 x float> %149, %4
  %171 = bitcast <8 x float> %170 to <4 x i64>
  %172 = xor <4 x i64> %171, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %173 = bitcast <4 x i64> %172 to <8 x float>
  %174 = fmul <8 x float> %168, %159
  %175 = fadd <8 x float> %174, %173
  %176 = fmul <8 x float> %160, %168
  %177 = fadd <8 x float> %176, %175
  %178 = fmul <8 x float> %169, %159
  %179 = fadd <8 x float> %178, %177
  %180 = fmul <8 x float> %169, %160
  %181 = fadd <8 x float> %180, %179
  %182 = fmul <8 x float> %150, %4
  %183 = fadd <8 x float> %181, %182
  %184 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %149, <8 x float> %170, <8 x float> %5) #8
  %185 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %150, <8 x float> %183, <8 x float> %5) #8
  %186 = fadd <8 x float> %184, %0
  %187 = fsub <8 x float> %186, %184
  %188 = fsub <8 x float> %186, %187
  %189 = fsub <8 x float> %184, %188
  %190 = fsub <8 x float> %0, %187
  %191 = fadd <8 x float> %190, %189
  %192 = fadd <8 x float> %185, %191
  %193 = fadd <8 x float> %186, %192
  %194 = fsub <8 x float> %186, %193
  %195 = fadd <8 x float> %192, %194
  %196 = fmul <8 x float> %193, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %197 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %196, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %198 = bitcast <8 x float> %197 to <4 x i64>
  %199 = fmul <8 x float> %196, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %200 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %196, <8 x float> %199, <8 x float> %197) #8
  %201 = bitcast <8 x float> %200 to <4 x i64>
  %202 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %203 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %204 = bitcast <2 x i64> %202 to <4 x i32>
  %205 = lshr <4 x i32> %204, <i32 23, i32 23, i32 23, i32 23>
  %206 = bitcast <2 x i64> %203 to <4 x i32>
  %207 = lshr <4 x i32> %206, <i32 23, i32 23, i32 23, i32 23>
  %208 = shufflevector <4 x i64> %198, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %209 = shufflevector <4 x i64> %198, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %210 = bitcast <2 x i64> %208 to <16 x i8>
  %211 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %210) #8
  %212 = bitcast <2 x i64> %209 to <16 x i8>
  %213 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %212) #8
  %214 = and <4 x i32> %205, <i32 255, i32 255, i32 255, i32 255>
  %215 = bitcast <16 x i8> %211 to <4 x i32>
  %216 = sub <4 x i32> %214, %215
  %217 = and <4 x i32> %207, <i32 255, i32 255, i32 255, i32 255>
  %218 = bitcast <16 x i8> %213 to <4 x i32>
  %219 = sub <4 x i32> %217, %218
  %220 = bitcast <4 x i32> %216 to <2 x i64>
  %221 = bitcast <4 x i32> %219 to <2 x i64>
  %222 = shl <4 x i32> %216, <i32 23, i32 23, i32 23, i32 23>
  %223 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %222
  %224 = shl <4 x i32> %219, <i32 23, i32 23, i32 23, i32 23>
  %225 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %224
  %226 = bitcast <4 x i32> %223 to <2 x i64>
  %227 = bitcast <4 x i32> %225 to <2 x i64>
  %228 = shufflevector <2 x i64> %226, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = shufflevector <2 x i64> %227, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = shufflevector <4 x i64> %228, <4 x i64> %229, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %231 = bitcast <4 x i64> %230 to <8 x float>
  %232 = fmul <8 x float> %193, %231
  %233 = fmul <8 x float> %195, %231
  %234 = fadd <8 x float> %232, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %235 = fsub <8 x float> %234, %232
  %236 = fsub <8 x float> %234, %235
  %237 = fsub <8 x float> %232, %236
  %238 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %235
  %239 = fadd <8 x float> %238, %237
  %240 = fadd <8 x float> %233, %239
  %241 = fadd <8 x float> %232, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %242 = fsub <8 x float> %241, %232
  %243 = fsub <8 x float> %241, %242
  %244 = fsub <8 x float> %232, %243
  %245 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %242
  %246 = fadd <8 x float> %245, %244
  %247 = fadd <8 x float> %233, %246
  %248 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %241
  %249 = bitcast <8 x float> %241 to <4 x i64>
  %250 = shufflevector <4 x i64> %249, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %251 = shufflevector <4 x i64> %249, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %252 = and <2 x i64> %250, <i64 -17587891081216, i64 -17587891081216>
  %253 = and <2 x i64> %251, <i64 -17587891081216, i64 -17587891081216>
  %254 = shufflevector <2 x i64> %252, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %255 = shufflevector <2 x i64> %253, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %256 = shufflevector <4 x i64> %254, <4 x i64> %255, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %257 = bitcast <4 x i64> %256 to <8 x float>
  %258 = fsub <8 x float> %241, %257
  %259 = bitcast <8 x float> %248 to <4 x i64>
  %260 = shufflevector <4 x i64> %259, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %261 = shufflevector <4 x i64> %259, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %262 = and <2 x i64> %260, <i64 -17587891081216, i64 -17587891081216>
  %263 = and <2 x i64> %261, <i64 -17587891081216, i64 -17587891081216>
  %264 = shufflevector <2 x i64> %262, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %265 = shufflevector <2 x i64> %263, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %266 = shufflevector <4 x i64> %264, <4 x i64> %265, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %267 = bitcast <4 x i64> %266 to <8 x float>
  %268 = fsub <8 x float> %248, %267
  %269 = bitcast <8 x float> %234 to <4 x i64>
  %270 = shufflevector <4 x i64> %269, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %271 = shufflevector <4 x i64> %269, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %272 = and <2 x i64> %270, <i64 -17587891081216, i64 -17587891081216>
  %273 = and <2 x i64> %271, <i64 -17587891081216, i64 -17587891081216>
  %274 = shufflevector <2 x i64> %272, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %275 = shufflevector <2 x i64> %273, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <4 x i64> %274, <4 x i64> %275, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %277 = bitcast <4 x i64> %276 to <8 x float>
  %278 = fsub <8 x float> %234, %277
  %279 = fmul <8 x float> %234, %248
  %280 = fmul <8 x float> %257, %267
  %281 = fadd <8 x float> %280, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %282 = fmul <8 x float> %268, %257
  %283 = fadd <8 x float> %282, %281
  %284 = fmul <8 x float> %258, %267
  %285 = fadd <8 x float> %284, %283
  %286 = fmul <8 x float> %258, %268
  %287 = fadd <8 x float> %286, %285
  %288 = bitcast <8 x float> %287 to <4 x i64>
  %289 = xor <4 x i64> %288, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %290 = bitcast <4 x i64> %289 to <8 x float>
  %291 = bitcast <8 x float> %279 to <4 x i64>
  %292 = xor <4 x i64> %291, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %293 = bitcast <4 x i64> %292 to <8 x float>
  %294 = fmul <8 x float> %277, %267
  %295 = fadd <8 x float> %294, %293
  %296 = fmul <8 x float> %268, %277
  %297 = fadd <8 x float> %296, %295
  %298 = fmul <8 x float> %278, %267
  %299 = fadd <8 x float> %298, %297
  %300 = fmul <8 x float> %278, %268
  %301 = fadd <8 x float> %300, %299
  %302 = fmul <8 x float> %279, %290
  %303 = fadd <8 x float> %301, %302
  %304 = fmul <8 x float> %279, %247
  %305 = fsub <8 x float> %240, %304
  %306 = fmul <8 x float> %248, %305
  %307 = fadd <8 x float> %306, %303
  %308 = shufflevector <4 x i64> %291, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %309 = shufflevector <4 x i64> %291, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %310 = and <2 x i64> %308, <i64 -17587891081216, i64 -17587891081216>
  %311 = and <2 x i64> %309, <i64 -17587891081216, i64 -17587891081216>
  %312 = shufflevector <2 x i64> %310, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %313 = shufflevector <2 x i64> %311, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %314 = shufflevector <4 x i64> %312, <4 x i64> %313, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %315 = bitcast <4 x i64> %314 to <8 x float>
  %316 = fsub <8 x float> %279, %315
  %317 = fmul <8 x float> %279, %279
  %318 = bitcast <8 x float> %317 to <4 x i64>
  %319 = xor <4 x i64> %318, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %320 = bitcast <4 x i64> %319 to <8 x float>
  %321 = fmul <8 x float> %315, %315
  %322 = fadd <8 x float> %321, %320
  %323 = fadd <8 x float> %315, %315
  %324 = fmul <8 x float> %323, %316
  %325 = fadd <8 x float> %324, %322
  %326 = fmul <8 x float> %316, %316
  %327 = fadd <8 x float> %326, %325
  %328 = fadd <8 x float> %307, %307
  %329 = fmul <8 x float> %279, %328
  %330 = fadd <8 x float> %327, %329
  %331 = fmul <8 x float> %317, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %332 = fadd <8 x float> %331, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %333 = fmul <8 x float> %317, %332
  %334 = fadd <8 x float> %333, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %335 = fmul <8 x float> %317, %334
  %336 = fadd <8 x float> %335, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %337 = shufflevector <2 x i64> %220, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %338 = shufflevector <2 x i64> %221, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %339 = shufflevector <4 x i64> %337, <4 x i64> %338, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %340 = bitcast <4 x i64> %339 to <8 x i32>
  %341 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %340) #8
  %342 = bitcast <8 x float> %341 to <4 x i64>
  %343 = shufflevector <4 x i64> %342, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %344 = shufflevector <4 x i64> %342, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %345 = and <2 x i64> %343, <i64 -17587891081216, i64 -17587891081216>
  %346 = and <2 x i64> %344, <i64 -17587891081216, i64 -17587891081216>
  %347 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %348 = shufflevector <2 x i64> %346, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %349 = shufflevector <4 x i64> %347, <4 x i64> %348, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %350 = bitcast <4 x i64> %349 to <8 x float>
  %351 = fsub <8 x float> %341, %350
  %352 = fmul <8 x float> %341, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %353 = bitcast <8 x float> %352 to <4 x i64>
  %354 = xor <4 x i64> %353, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %355 = bitcast <4 x i64> %354 to <8 x float>
  %356 = fmul <8 x float> %350, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %357 = fadd <8 x float> %356, %355
  %358 = fmul <8 x float> %350, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %359 = fadd <8 x float> %358, %357
  %360 = fmul <8 x float> %351, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %361 = fadd <8 x float> %360, %359
  %362 = fmul <8 x float> %351, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %363 = fadd <8 x float> %362, %361
  %364 = fmul <8 x float> %341, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %365 = fadd <8 x float> %364, %363
  %366 = fmul <8 x float> %279, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %367 = fmul <8 x float> %307, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %368 = fadd <8 x float> %352, %366
  %369 = fsub <8 x float> %352, %368
  %370 = fadd <8 x float> %366, %369
  %371 = fadd <8 x float> %365, %370
  %372 = fadd <8 x float> %371, %367
  %373 = shufflevector <4 x i64> %318, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %374 = shufflevector <4 x i64> %318, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %375 = and <2 x i64> %373, <i64 -17587891081216, i64 -17587891081216>
  %376 = and <2 x i64> %374, <i64 -17587891081216, i64 -17587891081216>
  %377 = shufflevector <2 x i64> %375, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %378 = shufflevector <2 x i64> %376, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %379 = shufflevector <4 x i64> %377, <4 x i64> %378, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %380 = bitcast <4 x i64> %379 to <8 x float>
  %381 = fsub <8 x float> %317, %380
  %382 = fmul <8 x float> %279, %317
  %383 = bitcast <8 x float> %382 to <4 x i64>
  %384 = xor <4 x i64> %383, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %385 = bitcast <4 x i64> %384 to <8 x float>
  %386 = fmul <8 x float> %315, %380
  %387 = fadd <8 x float> %386, %385
  %388 = fmul <8 x float> %381, %315
  %389 = fadd <8 x float> %388, %387
  %390 = fmul <8 x float> %316, %380
  %391 = fadd <8 x float> %390, %389
  %392 = fmul <8 x float> %316, %381
  %393 = fadd <8 x float> %392, %391
  %394 = fmul <8 x float> %317, %307
  %395 = fadd <8 x float> %393, %394
  %396 = fmul <8 x float> %279, %330
  %397 = fadd <8 x float> %395, %396
  %398 = shufflevector <4 x i64> %383, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %399 = shufflevector <4 x i64> %383, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %400 = and <2 x i64> %398, <i64 -17587891081216, i64 -17587891081216>
  %401 = and <2 x i64> %399, <i64 -17587891081216, i64 -17587891081216>
  %402 = shufflevector <2 x i64> %400, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %403 = shufflevector <2 x i64> %401, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %404 = shufflevector <4 x i64> %402, <4 x i64> %403, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %405 = bitcast <4 x i64> %404 to <8 x float>
  %406 = fsub <8 x float> %382, %405
  %407 = bitcast <8 x float> %336 to <4 x i64>
  %408 = shufflevector <4 x i64> %407, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %409 = shufflevector <4 x i64> %407, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %410 = and <2 x i64> %408, <i64 -17587891081216, i64 -17587891081216>
  %411 = and <2 x i64> %409, <i64 -17587891081216, i64 -17587891081216>
  %412 = shufflevector <2 x i64> %410, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %413 = shufflevector <2 x i64> %411, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %414 = shufflevector <4 x i64> %412, <4 x i64> %413, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %415 = bitcast <4 x i64> %414 to <8 x float>
  %416 = fsub <8 x float> %336, %415
  %417 = fmul <8 x float> %382, %336
  %418 = bitcast <8 x float> %417 to <4 x i64>
  %419 = xor <4 x i64> %418, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %420 = bitcast <4 x i64> %419 to <8 x float>
  %421 = fmul <8 x float> %405, %415
  %422 = fadd <8 x float> %421, %420
  %423 = fmul <8 x float> %406, %415
  %424 = fadd <8 x float> %423, %422
  %425 = fmul <8 x float> %416, %405
  %426 = fadd <8 x float> %425, %424
  %427 = fmul <8 x float> %406, %416
  %428 = fadd <8 x float> %427, %426
  %429 = fmul <8 x float> %336, %397
  %430 = fadd <8 x float> %428, %429
  %431 = fadd <8 x float> %368, %417
  %432 = fsub <8 x float> %368, %431
  %433 = fadd <8 x float> %417, %432
  %434 = fadd <8 x float> %433, %372
  %435 = fadd <8 x float> %434, %430
  %436 = fadd <8 x float> %431, %435
  %437 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #8
  %438 = bitcast <8 x float> %437 to <4 x i64>
  %439 = fcmp uno <8 x float> %436, zeroinitializer
  %440 = sext <8 x i1> %439 to <8 x i32>
  %441 = bitcast <8 x i32> %440 to <4 x i64>
  %442 = or <4 x i64> %441, %438
  %443 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %444 = or <4 x i64> %443, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %445 = bitcast <4 x i64> %444 to <8 x float>
  %446 = bitcast <4 x i64> %442 to <8 x float>
  %447 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %436, <8 x float> %445, <8 x float> %446) #8
  %448 = fcmp uno <8 x float> %0, zeroinitializer
  %449 = sext <8 x i1> %448 to <8 x i32>
  %450 = bitcast <8 x i32> %449 to <4 x i64>
  %451 = bitcast <8 x float> %447 to <4 x i64>
  %452 = or <4 x i64> %451, %450
  %453 = bitcast <4 x i64> %452 to <8 x float>
  %454 = bitcast <2 x i64> %7 to <4 x i32>
  %455 = icmp eq <4 x i32> %454, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %456 = sext <4 x i1> %455 to <4 x i32>
  %457 = bitcast <4 x i32> %456 to <2 x i64>
  %458 = bitcast <2 x i64> %8 to <4 x i32>
  %459 = icmp eq <4 x i32> %458, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %460 = sext <4 x i1> %459 to <4 x i32>
  %461 = bitcast <4 x i32> %460 to <2 x i64>
  %462 = shufflevector <2 x i64> %457, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %463 = shufflevector <2 x i64> %461, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %464 = shufflevector <4 x i64> %462, <4 x i64> %463, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %465 = bitcast <4 x i64> %464 to <8 x float>
  %466 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %453, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %465) #8
  ret <8 x float> %466
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acoshf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <8 x float> %2, %0
  %4 = fsub <8 x float> %2, %3
  %5 = fsub <8 x float> %0, %4
  %6 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <8 x float> %6, %5
  %8 = fadd <8 x float> %2, %7
  %9 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %8) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = and <2 x i64> %11, <i64 -17587891081216, i64 -17587891081216>
  %14 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %15 = shufflevector <2 x i64> %13, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %17 = shufflevector <4 x i64> %15, <4 x i64> %16, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = fsub <8 x float> %9, %18
  %20 = fmul <8 x float> %9, %9
  %21 = bitcast <8 x float> %20 to <4 x i64>
  %22 = xor <4 x i64> %21, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %23 = bitcast <4 x i64> %22 to <8 x float>
  %24 = fmul <8 x float> %18, %18
  %25 = fadd <8 x float> %24, %23
  %26 = fmul <8 x float> %19, %18
  %27 = fadd <8 x float> %26, %25
  %28 = fadd <8 x float> %26, %27
  %29 = fmul <8 x float> %19, %19
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %2, %20
  %32 = fsub <8 x float> %31, %2
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %2, %33
  %35 = fsub <8 x float> %20, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %7, %30
  %38 = fadd <8 x float> %36, %37
  %39 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fsub <8 x float> %39, %48
  %50 = fmul <8 x float> %18, %48
  %51 = fadd <8 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <8 x float> %49, %18
  %53 = fadd <8 x float> %52, %51
  %54 = fmul <8 x float> %19, %48
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %19, %49
  %57 = fadd <8 x float> %56, %55
  %58 = xor <4 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = fmul <8 x float> %57, %59
  %61 = bitcast <8 x float> %31 to <4 x i64>
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %63 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %64 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fsub <8 x float> %31, %69
  %71 = fmul <8 x float> %39, %31
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = xor <4 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = fmul <8 x float> %48, %69
  %76 = fadd <8 x float> %75, %74
  %77 = fmul <8 x float> %70, %48
  %78 = fadd <8 x float> %77, %76
  %79 = fmul <8 x float> %49, %69
  %80 = fadd <8 x float> %79, %78
  %81 = fmul <8 x float> %49, %70
  %82 = fadd <8 x float> %81, %80
  %83 = fmul <8 x float> %31, %60
  %84 = fadd <8 x float> %82, %83
  %85 = fmul <8 x float> %39, %38
  %86 = fadd <8 x float> %85, %84
  %87 = fmul <8 x float> %71, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %88 = fmul <8 x float> %86, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %89 = fadd <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %90 = fsub <8 x float> %89, %0
  %91 = fsub <8 x float> %89, %90
  %92 = fsub <8 x float> %0, %91
  %93 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %90
  %94 = fadd <8 x float> %93, %92
  %95 = fadd <8 x float> %89, %94
  %96 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %95) #8
  %97 = bitcast <8 x float> %96 to <4 x i64>
  %98 = shufflevector <4 x i64> %97, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %99 = shufflevector <4 x i64> %97, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %100 = and <2 x i64> %98, <i64 -17587891081216, i64 -17587891081216>
  %101 = and <2 x i64> %99, <i64 -17587891081216, i64 -17587891081216>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <2 x i64> %101, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = shufflevector <4 x i64> %102, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %105 = bitcast <4 x i64> %104 to <8 x float>
  %106 = fsub <8 x float> %96, %105
  %107 = fmul <8 x float> %96, %96
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = xor <4 x i64> %108, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = fmul <8 x float> %105, %105
  %112 = fadd <8 x float> %111, %110
  %113 = fmul <8 x float> %106, %105
  %114 = fadd <8 x float> %113, %112
  %115 = fadd <8 x float> %113, %114
  %116 = fmul <8 x float> %106, %106
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %89, %107
  %119 = fsub <8 x float> %118, %89
  %120 = fsub <8 x float> %118, %119
  %121 = fsub <8 x float> %89, %120
  %122 = fsub <8 x float> %107, %119
  %123 = fadd <8 x float> %122, %121
  %124 = fadd <8 x float> %94, %117
  %125 = fadd <8 x float> %123, %124
  %126 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %96
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = and <2 x i64> %129, <i64 -17587891081216, i64 -17587891081216>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <2 x i64> %131, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = shufflevector <4 x i64> %132, <4 x i64> %133, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = fsub <8 x float> %126, %135
  %137 = fmul <8 x float> %105, %135
  %138 = fadd <8 x float> %137, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %139 = fmul <8 x float> %136, %105
  %140 = fadd <8 x float> %139, %138
  %141 = fmul <8 x float> %106, %135
  %142 = fadd <8 x float> %141, %140
  %143 = fmul <8 x float> %106, %136
  %144 = fadd <8 x float> %143, %142
  %145 = xor <4 x i64> %127, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %146 = bitcast <4 x i64> %145 to <8 x float>
  %147 = fmul <8 x float> %144, %146
  %148 = bitcast <8 x float> %118 to <4 x i64>
  %149 = shufflevector <4 x i64> %148, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %150 = shufflevector <4 x i64> %148, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %151 = and <2 x i64> %149, <i64 -17587891081216, i64 -17587891081216>
  %152 = and <2 x i64> %150, <i64 -17587891081216, i64 -17587891081216>
  %153 = shufflevector <2 x i64> %151, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %154 = shufflevector <2 x i64> %152, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %155 = shufflevector <4 x i64> %153, <4 x i64> %154, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %156 = bitcast <4 x i64> %155 to <8 x float>
  %157 = fsub <8 x float> %118, %156
  %158 = fmul <8 x float> %126, %118
  %159 = bitcast <8 x float> %158 to <4 x i64>
  %160 = xor <4 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = bitcast <4 x i64> %160 to <8 x float>
  %162 = fmul <8 x float> %135, %156
  %163 = fadd <8 x float> %162, %161
  %164 = fmul <8 x float> %157, %135
  %165 = fadd <8 x float> %164, %163
  %166 = fmul <8 x float> %136, %156
  %167 = fadd <8 x float> %166, %165
  %168 = fmul <8 x float> %136, %157
  %169 = fadd <8 x float> %168, %167
  %170 = fmul <8 x float> %118, %147
  %171 = fadd <8 x float> %169, %170
  %172 = fmul <8 x float> %126, %125
  %173 = fadd <8 x float> %172, %171
  %174 = fmul <8 x float> %158, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %175 = fmul <8 x float> %173, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %176 = bitcast <8 x float> %87 to <4 x i64>
  %177 = shufflevector <4 x i64> %176, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %178 = shufflevector <4 x i64> %176, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %179 = and <2 x i64> %177, <i64 -17587891081216, i64 -17587891081216>
  %180 = and <2 x i64> %178, <i64 -17587891081216, i64 -17587891081216>
  %181 = shufflevector <2 x i64> %179, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %182 = shufflevector <2 x i64> %180, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %183 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %184 = bitcast <4 x i64> %183 to <8 x float>
  %185 = fsub <8 x float> %87, %184
  %186 = bitcast <8 x float> %174 to <4 x i64>
  %187 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %189 = and <2 x i64> %187, <i64 -17587891081216, i64 -17587891081216>
  %190 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %191 = shufflevector <2 x i64> %189, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <4 x i64> %191, <4 x i64> %192, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %194 = bitcast <4 x i64> %193 to <8 x float>
  %195 = fsub <8 x float> %174, %194
  %196 = fmul <8 x float> %87, %174
  %197 = bitcast <8 x float> %196 to <4 x i64>
  %198 = xor <4 x i64> %197, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %199 = bitcast <4 x i64> %198 to <8 x float>
  %200 = fmul <8 x float> %184, %194
  %201 = fadd <8 x float> %200, %199
  %202 = fmul <8 x float> %185, %194
  %203 = fadd <8 x float> %202, %201
  %204 = fmul <8 x float> %195, %184
  %205 = fadd <8 x float> %204, %203
  %206 = fmul <8 x float> %185, %195
  %207 = fadd <8 x float> %206, %205
  %208 = fmul <8 x float> %87, %175
  %209 = fadd <8 x float> %207, %208
  %210 = fmul <8 x float> %174, %88
  %211 = fadd <8 x float> %210, %209
  %212 = fadd <8 x float> %196, %0
  %213 = fsub <8 x float> %212, %196
  %214 = fsub <8 x float> %212, %213
  %215 = fsub <8 x float> %196, %214
  %216 = fsub <8 x float> %0, %213
  %217 = fadd <8 x float> %216, %215
  %218 = fadd <8 x float> %217, %211
  %219 = fmul <8 x float> %212, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %220 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %219, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %221 = bitcast <8 x float> %220 to <4 x i64>
  %222 = fmul <8 x float> %219, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %223 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %219, <8 x float> %222, <8 x float> %220) #8
  %224 = bitcast <8 x float> %223 to <4 x i64>
  %225 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %226 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %227 = bitcast <2 x i64> %225 to <4 x i32>
  %228 = lshr <4 x i32> %227, <i32 23, i32 23, i32 23, i32 23>
  %229 = bitcast <2 x i64> %226 to <4 x i32>
  %230 = lshr <4 x i32> %229, <i32 23, i32 23, i32 23, i32 23>
  %231 = shufflevector <4 x i64> %221, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %232 = shufflevector <4 x i64> %221, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %233 = bitcast <2 x i64> %231 to <16 x i8>
  %234 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %233) #8
  %235 = bitcast <2 x i64> %232 to <16 x i8>
  %236 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %235) #8
  %237 = and <4 x i32> %228, <i32 255, i32 255, i32 255, i32 255>
  %238 = bitcast <16 x i8> %234 to <4 x i32>
  %239 = sub <4 x i32> %237, %238
  %240 = and <4 x i32> %230, <i32 255, i32 255, i32 255, i32 255>
  %241 = bitcast <16 x i8> %236 to <4 x i32>
  %242 = sub <4 x i32> %240, %241
  %243 = bitcast <4 x i32> %239 to <2 x i64>
  %244 = bitcast <4 x i32> %242 to <2 x i64>
  %245 = shl <4 x i32> %239, <i32 23, i32 23, i32 23, i32 23>
  %246 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %245
  %247 = shl <4 x i32> %242, <i32 23, i32 23, i32 23, i32 23>
  %248 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %247
  %249 = bitcast <4 x i32> %246 to <2 x i64>
  %250 = bitcast <4 x i32> %248 to <2 x i64>
  %251 = shufflevector <2 x i64> %249, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %252 = shufflevector <2 x i64> %250, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %253 = shufflevector <4 x i64> %251, <4 x i64> %252, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %254 = bitcast <4 x i64> %253 to <8 x float>
  %255 = fmul <8 x float> %212, %254
  %256 = fmul <8 x float> %218, %254
  %257 = fadd <8 x float> %255, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %258 = fsub <8 x float> %257, %255
  %259 = fsub <8 x float> %257, %258
  %260 = fsub <8 x float> %255, %259
  %261 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %258
  %262 = fadd <8 x float> %261, %260
  %263 = fadd <8 x float> %262, %256
  %264 = fadd <8 x float> %255, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %265 = fsub <8 x float> %264, %255
  %266 = fsub <8 x float> %264, %265
  %267 = fsub <8 x float> %255, %266
  %268 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %265
  %269 = fadd <8 x float> %268, %267
  %270 = fadd <8 x float> %269, %256
  %271 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %264
  %272 = bitcast <8 x float> %264 to <4 x i64>
  %273 = shufflevector <4 x i64> %272, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %274 = shufflevector <4 x i64> %272, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %275 = and <2 x i64> %273, <i64 -17587891081216, i64 -17587891081216>
  %276 = and <2 x i64> %274, <i64 -17587891081216, i64 -17587891081216>
  %277 = shufflevector <2 x i64> %275, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %278 = shufflevector <2 x i64> %276, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %279 = shufflevector <4 x i64> %277, <4 x i64> %278, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %280 = bitcast <4 x i64> %279 to <8 x float>
  %281 = fsub <8 x float> %264, %280
  %282 = bitcast <8 x float> %271 to <4 x i64>
  %283 = shufflevector <4 x i64> %282, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %284 = shufflevector <4 x i64> %282, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %285 = and <2 x i64> %283, <i64 -17587891081216, i64 -17587891081216>
  %286 = and <2 x i64> %284, <i64 -17587891081216, i64 -17587891081216>
  %287 = shufflevector <2 x i64> %285, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %288 = shufflevector <2 x i64> %286, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %289 = shufflevector <4 x i64> %287, <4 x i64> %288, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %290 = bitcast <4 x i64> %289 to <8 x float>
  %291 = fsub <8 x float> %271, %290
  %292 = bitcast <8 x float> %257 to <4 x i64>
  %293 = shufflevector <4 x i64> %292, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %294 = shufflevector <4 x i64> %292, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %295 = and <2 x i64> %293, <i64 -17587891081216, i64 -17587891081216>
  %296 = and <2 x i64> %294, <i64 -17587891081216, i64 -17587891081216>
  %297 = shufflevector <2 x i64> %295, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %298 = shufflevector <2 x i64> %296, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %299 = shufflevector <4 x i64> %297, <4 x i64> %298, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %300 = bitcast <4 x i64> %299 to <8 x float>
  %301 = fsub <8 x float> %257, %300
  %302 = fmul <8 x float> %257, %271
  %303 = fmul <8 x float> %280, %290
  %304 = fadd <8 x float> %303, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %305 = fmul <8 x float> %291, %280
  %306 = fadd <8 x float> %305, %304
  %307 = fmul <8 x float> %281, %290
  %308 = fadd <8 x float> %307, %306
  %309 = fmul <8 x float> %281, %291
  %310 = fadd <8 x float> %309, %308
  %311 = bitcast <8 x float> %310 to <4 x i64>
  %312 = xor <4 x i64> %311, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %313 = bitcast <4 x i64> %312 to <8 x float>
  %314 = bitcast <8 x float> %302 to <4 x i64>
  %315 = xor <4 x i64> %314, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %316 = bitcast <4 x i64> %315 to <8 x float>
  %317 = fmul <8 x float> %300, %290
  %318 = fadd <8 x float> %317, %316
  %319 = fmul <8 x float> %291, %300
  %320 = fadd <8 x float> %319, %318
  %321 = fmul <8 x float> %301, %290
  %322 = fadd <8 x float> %321, %320
  %323 = fmul <8 x float> %301, %291
  %324 = fadd <8 x float> %323, %322
  %325 = fmul <8 x float> %302, %313
  %326 = fadd <8 x float> %324, %325
  %327 = fmul <8 x float> %302, %270
  %328 = fsub <8 x float> %263, %327
  %329 = fmul <8 x float> %271, %328
  %330 = fadd <8 x float> %329, %326
  %331 = shufflevector <4 x i64> %314, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %332 = shufflevector <4 x i64> %314, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %333 = and <2 x i64> %331, <i64 -17587891081216, i64 -17587891081216>
  %334 = and <2 x i64> %332, <i64 -17587891081216, i64 -17587891081216>
  %335 = shufflevector <2 x i64> %333, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %336 = shufflevector <2 x i64> %334, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %337 = shufflevector <4 x i64> %335, <4 x i64> %336, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %338 = bitcast <4 x i64> %337 to <8 x float>
  %339 = fsub <8 x float> %302, %338
  %340 = fmul <8 x float> %302, %302
  %341 = bitcast <8 x float> %340 to <4 x i64>
  %342 = xor <4 x i64> %341, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %343 = bitcast <4 x i64> %342 to <8 x float>
  %344 = fmul <8 x float> %338, %338
  %345 = fadd <8 x float> %344, %343
  %346 = fadd <8 x float> %338, %338
  %347 = fmul <8 x float> %346, %339
  %348 = fadd <8 x float> %347, %345
  %349 = fmul <8 x float> %339, %339
  %350 = fadd <8 x float> %349, %348
  %351 = fadd <8 x float> %330, %330
  %352 = fmul <8 x float> %302, %351
  %353 = fadd <8 x float> %350, %352
  %354 = fmul <8 x float> %340, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %355 = fadd <8 x float> %354, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %356 = fmul <8 x float> %340, %355
  %357 = fadd <8 x float> %356, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %358 = fmul <8 x float> %340, %357
  %359 = fadd <8 x float> %358, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %360 = shufflevector <2 x i64> %243, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %361 = shufflevector <2 x i64> %244, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %362 = shufflevector <4 x i64> %360, <4 x i64> %361, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %363 = bitcast <4 x i64> %362 to <8 x i32>
  %364 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %363) #8
  %365 = bitcast <8 x float> %364 to <4 x i64>
  %366 = shufflevector <4 x i64> %365, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %367 = shufflevector <4 x i64> %365, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %368 = and <2 x i64> %366, <i64 -17587891081216, i64 -17587891081216>
  %369 = and <2 x i64> %367, <i64 -17587891081216, i64 -17587891081216>
  %370 = shufflevector <2 x i64> %368, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %371 = shufflevector <2 x i64> %369, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %372 = shufflevector <4 x i64> %370, <4 x i64> %371, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %373 = bitcast <4 x i64> %372 to <8 x float>
  %374 = fsub <8 x float> %364, %373
  %375 = fmul <8 x float> %364, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %376 = bitcast <8 x float> %375 to <4 x i64>
  %377 = xor <4 x i64> %376, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %378 = bitcast <4 x i64> %377 to <8 x float>
  %379 = fmul <8 x float> %373, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %380 = fadd <8 x float> %379, %378
  %381 = fmul <8 x float> %373, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %382 = fadd <8 x float> %381, %380
  %383 = fmul <8 x float> %374, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %384 = fadd <8 x float> %383, %382
  %385 = fmul <8 x float> %374, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %386 = fadd <8 x float> %385, %384
  %387 = fmul <8 x float> %364, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %388 = fadd <8 x float> %387, %386
  %389 = fmul <8 x float> %302, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %390 = fmul <8 x float> %330, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %391 = fadd <8 x float> %375, %389
  %392 = fsub <8 x float> %375, %391
  %393 = fadd <8 x float> %389, %392
  %394 = fadd <8 x float> %388, %393
  %395 = fadd <8 x float> %394, %390
  %396 = shufflevector <4 x i64> %341, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %397 = shufflevector <4 x i64> %341, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %398 = and <2 x i64> %396, <i64 -17587891081216, i64 -17587891081216>
  %399 = and <2 x i64> %397, <i64 -17587891081216, i64 -17587891081216>
  %400 = shufflevector <2 x i64> %398, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %401 = shufflevector <2 x i64> %399, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %402 = shufflevector <4 x i64> %400, <4 x i64> %401, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %403 = bitcast <4 x i64> %402 to <8 x float>
  %404 = fsub <8 x float> %340, %403
  %405 = fmul <8 x float> %302, %340
  %406 = bitcast <8 x float> %405 to <4 x i64>
  %407 = xor <4 x i64> %406, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %408 = bitcast <4 x i64> %407 to <8 x float>
  %409 = fmul <8 x float> %338, %403
  %410 = fadd <8 x float> %409, %408
  %411 = fmul <8 x float> %404, %338
  %412 = fadd <8 x float> %411, %410
  %413 = fmul <8 x float> %339, %403
  %414 = fadd <8 x float> %413, %412
  %415 = fmul <8 x float> %339, %404
  %416 = fadd <8 x float> %415, %414
  %417 = fmul <8 x float> %340, %330
  %418 = fadd <8 x float> %416, %417
  %419 = fmul <8 x float> %302, %353
  %420 = fadd <8 x float> %418, %419
  %421 = shufflevector <4 x i64> %406, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %422 = shufflevector <4 x i64> %406, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %423 = and <2 x i64> %421, <i64 -17587891081216, i64 -17587891081216>
  %424 = and <2 x i64> %422, <i64 -17587891081216, i64 -17587891081216>
  %425 = shufflevector <2 x i64> %423, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %426 = shufflevector <2 x i64> %424, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %427 = shufflevector <4 x i64> %425, <4 x i64> %426, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %428 = bitcast <4 x i64> %427 to <8 x float>
  %429 = fsub <8 x float> %405, %428
  %430 = bitcast <8 x float> %359 to <4 x i64>
  %431 = shufflevector <4 x i64> %430, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %432 = shufflevector <4 x i64> %430, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %433 = and <2 x i64> %431, <i64 -17587891081216, i64 -17587891081216>
  %434 = and <2 x i64> %432, <i64 -17587891081216, i64 -17587891081216>
  %435 = shufflevector <2 x i64> %433, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %436 = shufflevector <2 x i64> %434, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %437 = shufflevector <4 x i64> %435, <4 x i64> %436, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %438 = bitcast <4 x i64> %437 to <8 x float>
  %439 = fsub <8 x float> %359, %438
  %440 = fmul <8 x float> %405, %359
  %441 = bitcast <8 x float> %440 to <4 x i64>
  %442 = xor <4 x i64> %441, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %443 = bitcast <4 x i64> %442 to <8 x float>
  %444 = fmul <8 x float> %428, %438
  %445 = fadd <8 x float> %444, %443
  %446 = fmul <8 x float> %429, %438
  %447 = fadd <8 x float> %446, %445
  %448 = fmul <8 x float> %439, %428
  %449 = fadd <8 x float> %448, %447
  %450 = fmul <8 x float> %429, %439
  %451 = fadd <8 x float> %450, %449
  %452 = fmul <8 x float> %359, %420
  %453 = fadd <8 x float> %451, %452
  %454 = fadd <8 x float> %391, %440
  %455 = fsub <8 x float> %391, %454
  %456 = fadd <8 x float> %440, %455
  %457 = fadd <8 x float> %456, %395
  %458 = fadd <8 x float> %457, %453
  %459 = fadd <8 x float> %454, %458
  %460 = bitcast <8 x float> %0 to <4 x i64>
  %461 = and <4 x i64> %460, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %462 = bitcast <4 x i64> %461 to <8 x float>
  %463 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %462, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #8
  %464 = bitcast <8 x float> %463 to <4 x i64>
  %465 = fcmp uno <8 x float> %459, zeroinitializer
  %466 = sext <8 x i1> %465 to <8 x i32>
  %467 = bitcast <8 x i32> %466 to <4 x i64>
  %468 = or <4 x i64> %467, %464
  %469 = bitcast <4 x i64> %468 to <8 x float>
  %470 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %459, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %469) #8
  %471 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %472 = sext <8 x i1> %471 to <8 x i32>
  %473 = bitcast <8 x i32> %472 to <4 x i64>
  %474 = bitcast <8 x float> %470 to <4 x i64>
  %475 = xor <4 x i64> %473, <i64 -1, i64 -1, i64 -1, i64 -1>
  %476 = and <4 x i64> %474, %475
  %477 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #8
  %478 = bitcast <8 x float> %477 to <4 x i64>
  %479 = fcmp uno <8 x float> %0, zeroinitializer
  %480 = sext <8 x i1> %479 to <8 x i32>
  %481 = bitcast <8 x i32> %480 to <4 x i64>
  %482 = or <4 x i64> %478, %481
  %483 = or <4 x i64> %482, %476
  %484 = bitcast <4 x i64> %483 to <8 x float>
  ret <8 x float> %484
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <8 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <8 x float> %5, %6
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <8 x float> %4, %6
  %10 = fadd <8 x float> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = bitcast <8 x float> %13 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = and <2 x i64> %22, <i64 -17587891081216, i64 -17587891081216>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fsub <8 x float> %13, %28
  %30 = bitcast <8 x float> %19 to <4 x i64>
  %31 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %32 = shufflevector <4 x i64> %30, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %33 = and <2 x i64> %31, <i64 -17587891081216, i64 -17587891081216>
  %34 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = fsub <8 x float> %19, %38
  %40 = bitcast <8 x float> %5 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fsub <8 x float> %5, %48
  %50 = fmul <8 x float> %5, %19
  %51 = fmul <8 x float> %28, %38
  %52 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %53 = fmul <8 x float> %39, %28
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %29, %38
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %29, %39
  %58 = fadd <8 x float> %57, %56
  %59 = bitcast <8 x float> %58 to <4 x i64>
  %60 = xor <4 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <4 x i64> %60 to <8 x float>
  %62 = bitcast <8 x float> %50 to <4 x i64>
  %63 = xor <4 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fmul <8 x float> %48, %38
  %66 = fadd <8 x float> %65, %64
  %67 = fmul <8 x float> %39, %48
  %68 = fadd <8 x float> %67, %66
  %69 = fmul <8 x float> %49, %38
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %49, %39
  %72 = fadd <8 x float> %71, %70
  %73 = fmul <8 x float> %50, %61
  %74 = fadd <8 x float> %72, %73
  %75 = fmul <8 x float> %50, %18
  %76 = fsub <8 x float> %10, %75
  %77 = fmul <8 x float> %19, %76
  %78 = fadd <8 x float> %77, %74
  %79 = fmul <8 x float> %50, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %80 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %79, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %81 = bitcast <8 x float> %80 to <4 x i64>
  %82 = fmul <8 x float> %79, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %79, <8 x float> %82, <8 x float> %80) #8
  %84 = bitcast <8 x float> %83 to <4 x i64>
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %87 = bitcast <2 x i64> %85 to <4 x i32>
  %88 = lshr <4 x i32> %87, <i32 23, i32 23, i32 23, i32 23>
  %89 = bitcast <2 x i64> %86 to <4 x i32>
  %90 = lshr <4 x i32> %89, <i32 23, i32 23, i32 23, i32 23>
  %91 = shufflevector <4 x i64> %81, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %92 = shufflevector <4 x i64> %81, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %93 = bitcast <2 x i64> %91 to <16 x i8>
  %94 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %93) #8
  %95 = bitcast <2 x i64> %92 to <16 x i8>
  %96 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %95) #8
  %97 = and <4 x i32> %88, <i32 255, i32 255, i32 255, i32 255>
  %98 = bitcast <16 x i8> %94 to <4 x i32>
  %99 = sub <4 x i32> %97, %98
  %100 = and <4 x i32> %90, <i32 255, i32 255, i32 255, i32 255>
  %101 = bitcast <16 x i8> %96 to <4 x i32>
  %102 = sub <4 x i32> %100, %101
  %103 = bitcast <4 x i32> %99 to <2 x i64>
  %104 = bitcast <4 x i32> %102 to <2 x i64>
  %105 = shl <4 x i32> %99, <i32 23, i32 23, i32 23, i32 23>
  %106 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %105
  %107 = shl <4 x i32> %102, <i32 23, i32 23, i32 23, i32 23>
  %108 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %107
  %109 = bitcast <4 x i32> %106 to <2 x i64>
  %110 = bitcast <4 x i32> %108 to <2 x i64>
  %111 = shufflevector <2 x i64> %109, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %112 = shufflevector <2 x i64> %110, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = shufflevector <4 x i64> %111, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fmul <8 x float> %50, %114
  %116 = fmul <8 x float> %78, %114
  %117 = fadd <8 x float> %115, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %118 = fsub <8 x float> %117, %115
  %119 = fsub <8 x float> %117, %118
  %120 = fsub <8 x float> %115, %119
  %121 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %118
  %122 = fadd <8 x float> %121, %120
  %123 = fadd <8 x float> %116, %122
  %124 = fadd <8 x float> %115, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %125 = fsub <8 x float> %124, %115
  %126 = fsub <8 x float> %124, %125
  %127 = fsub <8 x float> %115, %126
  %128 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %125
  %129 = fadd <8 x float> %128, %127
  %130 = fadd <8 x float> %116, %129
  %131 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %124
  %132 = bitcast <8 x float> %124 to <4 x i64>
  %133 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = and <2 x i64> %134, <i64 -17587891081216, i64 -17587891081216>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <2 x i64> %136, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = shufflevector <4 x i64> %137, <4 x i64> %138, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fsub <8 x float> %124, %140
  %142 = bitcast <8 x float> %131 to <4 x i64>
  %143 = shufflevector <4 x i64> %142, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %144 = shufflevector <4 x i64> %142, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %145 = and <2 x i64> %143, <i64 -17587891081216, i64 -17587891081216>
  %146 = and <2 x i64> %144, <i64 -17587891081216, i64 -17587891081216>
  %147 = shufflevector <2 x i64> %145, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = shufflevector <2 x i64> %146, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %149 = shufflevector <4 x i64> %147, <4 x i64> %148, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %150 = bitcast <4 x i64> %149 to <8 x float>
  %151 = fsub <8 x float> %131, %150
  %152 = bitcast <8 x float> %117 to <4 x i64>
  %153 = shufflevector <4 x i64> %152, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %154 = shufflevector <4 x i64> %152, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %155 = and <2 x i64> %153, <i64 -17587891081216, i64 -17587891081216>
  %156 = and <2 x i64> %154, <i64 -17587891081216, i64 -17587891081216>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <2 x i64> %156, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %159 = shufflevector <4 x i64> %157, <4 x i64> %158, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %160 = bitcast <4 x i64> %159 to <8 x float>
  %161 = fsub <8 x float> %117, %160
  %162 = fmul <8 x float> %117, %131
  %163 = fmul <8 x float> %140, %150
  %164 = fadd <8 x float> %163, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %165 = fmul <8 x float> %151, %140
  %166 = fadd <8 x float> %165, %164
  %167 = fmul <8 x float> %141, %150
  %168 = fadd <8 x float> %167, %166
  %169 = fmul <8 x float> %141, %151
  %170 = fadd <8 x float> %169, %168
  %171 = bitcast <8 x float> %170 to <4 x i64>
  %172 = xor <4 x i64> %171, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %173 = bitcast <4 x i64> %172 to <8 x float>
  %174 = bitcast <8 x float> %162 to <4 x i64>
  %175 = xor <4 x i64> %174, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %176 = bitcast <4 x i64> %175 to <8 x float>
  %177 = fmul <8 x float> %160, %150
  %178 = fadd <8 x float> %177, %176
  %179 = fmul <8 x float> %151, %160
  %180 = fadd <8 x float> %179, %178
  %181 = fmul <8 x float> %161, %150
  %182 = fadd <8 x float> %181, %180
  %183 = fmul <8 x float> %161, %151
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %162, %173
  %186 = fadd <8 x float> %184, %185
  %187 = fmul <8 x float> %162, %130
  %188 = fsub <8 x float> %123, %187
  %189 = fmul <8 x float> %131, %188
  %190 = fadd <8 x float> %189, %186
  %191 = shufflevector <4 x i64> %174, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %192 = shufflevector <4 x i64> %174, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %193 = and <2 x i64> %191, <i64 -17587891081216, i64 -17587891081216>
  %194 = and <2 x i64> %192, <i64 -17587891081216, i64 -17587891081216>
  %195 = shufflevector <2 x i64> %193, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %196 = shufflevector <2 x i64> %194, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %197 = shufflevector <4 x i64> %195, <4 x i64> %196, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %198 = bitcast <4 x i64> %197 to <8 x float>
  %199 = fsub <8 x float> %162, %198
  %200 = fmul <8 x float> %162, %162
  %201 = bitcast <8 x float> %200 to <4 x i64>
  %202 = xor <4 x i64> %201, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %203 = bitcast <4 x i64> %202 to <8 x float>
  %204 = fmul <8 x float> %198, %198
  %205 = fadd <8 x float> %204, %203
  %206 = fadd <8 x float> %198, %198
  %207 = fmul <8 x float> %206, %199
  %208 = fadd <8 x float> %207, %205
  %209 = fmul <8 x float> %199, %199
  %210 = fadd <8 x float> %209, %208
  %211 = fadd <8 x float> %190, %190
  %212 = fmul <8 x float> %162, %211
  %213 = fadd <8 x float> %210, %212
  %214 = fmul <8 x float> %200, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %215 = fadd <8 x float> %214, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %216 = fmul <8 x float> %200, %215
  %217 = fadd <8 x float> %216, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %218 = fmul <8 x float> %200, %217
  %219 = fadd <8 x float> %218, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %220 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %221 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <4 x i64> %220, <4 x i64> %221, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %223 = bitcast <4 x i64> %222 to <8 x i32>
  %224 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %223) #8
  %225 = bitcast <8 x float> %224 to <4 x i64>
  %226 = shufflevector <4 x i64> %225, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %227 = shufflevector <4 x i64> %225, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %228 = and <2 x i64> %226, <i64 -17587891081216, i64 -17587891081216>
  %229 = and <2 x i64> %227, <i64 -17587891081216, i64 -17587891081216>
  %230 = shufflevector <2 x i64> %228, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %231 = shufflevector <2 x i64> %229, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <4 x i64> %230, <4 x i64> %231, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %233 = bitcast <4 x i64> %232 to <8 x float>
  %234 = fsub <8 x float> %224, %233
  %235 = fmul <8 x float> %224, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %236 = bitcast <8 x float> %235 to <4 x i64>
  %237 = xor <4 x i64> %236, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %238 = bitcast <4 x i64> %237 to <8 x float>
  %239 = fmul <8 x float> %233, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %240 = fadd <8 x float> %239, %238
  %241 = fmul <8 x float> %233, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %242 = fadd <8 x float> %241, %240
  %243 = fmul <8 x float> %234, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %244 = fadd <8 x float> %243, %242
  %245 = fmul <8 x float> %234, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %246 = fadd <8 x float> %245, %244
  %247 = fmul <8 x float> %224, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %248 = fadd <8 x float> %247, %246
  %249 = fmul <8 x float> %162, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %250 = fmul <8 x float> %190, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %251 = fadd <8 x float> %235, %249
  %252 = fsub <8 x float> %235, %251
  %253 = fadd <8 x float> %249, %252
  %254 = fadd <8 x float> %248, %253
  %255 = fadd <8 x float> %254, %250
  %256 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %257 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %258 = and <2 x i64> %256, <i64 -17587891081216, i64 -17587891081216>
  %259 = and <2 x i64> %257, <i64 -17587891081216, i64 -17587891081216>
  %260 = shufflevector <2 x i64> %258, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %261 = shufflevector <2 x i64> %259, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %262 = shufflevector <4 x i64> %260, <4 x i64> %261, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %263 = bitcast <4 x i64> %262 to <8 x float>
  %264 = fsub <8 x float> %200, %263
  %265 = fmul <8 x float> %162, %200
  %266 = bitcast <8 x float> %265 to <4 x i64>
  %267 = xor <4 x i64> %266, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %268 = bitcast <4 x i64> %267 to <8 x float>
  %269 = fmul <8 x float> %198, %263
  %270 = fadd <8 x float> %269, %268
  %271 = fmul <8 x float> %264, %198
  %272 = fadd <8 x float> %271, %270
  %273 = fmul <8 x float> %199, %263
  %274 = fadd <8 x float> %273, %272
  %275 = fmul <8 x float> %199, %264
  %276 = fadd <8 x float> %275, %274
  %277 = fmul <8 x float> %200, %190
  %278 = fadd <8 x float> %276, %277
  %279 = fmul <8 x float> %162, %213
  %280 = fadd <8 x float> %278, %279
  %281 = shufflevector <4 x i64> %266, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %282 = shufflevector <4 x i64> %266, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %283 = and <2 x i64> %281, <i64 -17587891081216, i64 -17587891081216>
  %284 = and <2 x i64> %282, <i64 -17587891081216, i64 -17587891081216>
  %285 = shufflevector <2 x i64> %283, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %286 = shufflevector <2 x i64> %284, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %287 = shufflevector <4 x i64> %285, <4 x i64> %286, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %288 = bitcast <4 x i64> %287 to <8 x float>
  %289 = fsub <8 x float> %265, %288
  %290 = bitcast <8 x float> %219 to <4 x i64>
  %291 = shufflevector <4 x i64> %290, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %292 = shufflevector <4 x i64> %290, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %293 = and <2 x i64> %291, <i64 -17587891081216, i64 -17587891081216>
  %294 = and <2 x i64> %292, <i64 -17587891081216, i64 -17587891081216>
  %295 = shufflevector <2 x i64> %293, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %296 = shufflevector <2 x i64> %294, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %297 = shufflevector <4 x i64> %295, <4 x i64> %296, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %298 = bitcast <4 x i64> %297 to <8 x float>
  %299 = fsub <8 x float> %219, %298
  %300 = fmul <8 x float> %265, %219
  %301 = bitcast <8 x float> %300 to <4 x i64>
  %302 = xor <4 x i64> %301, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %303 = bitcast <4 x i64> %302 to <8 x float>
  %304 = fmul <8 x float> %288, %298
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %289, %298
  %307 = fadd <8 x float> %306, %305
  %308 = fmul <8 x float> %299, %288
  %309 = fadd <8 x float> %308, %307
  %310 = fmul <8 x float> %289, %299
  %311 = fadd <8 x float> %310, %309
  %312 = fmul <8 x float> %219, %280
  %313 = fadd <8 x float> %311, %312
  %314 = fadd <8 x float> %251, %300
  %315 = fsub <8 x float> %251, %314
  %316 = fadd <8 x float> %300, %315
  %317 = fadd <8 x float> %316, %255
  %318 = fadd <8 x float> %317, %313
  %319 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #8
  %320 = bitcast <8 x float> %319 to <4 x i64>
  %321 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %322 = sext <8 x i1> %321 to <8 x i32>
  %323 = fadd <8 x float> %314, %318
  %324 = fmul <8 x float> %323, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %325 = bitcast <8 x i32> %322 to <8 x float>
  %326 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %324, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %325) #8
  %327 = bitcast <8 x float> %326 to <4 x i64>
  %328 = or <4 x i64> %327, %320
  %329 = bitcast <4 x i64> %328 to <8 x float>
  %330 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %331 = fcmp uno <8 x float> %329, zeroinitializer
  %332 = or <8 x i1> %331, %330
  %333 = sext <8 x i1> %332 to <8 x i32>
  %334 = bitcast <8 x i32> %333 to <4 x i64>
  %335 = or <4 x i64> %328, %334
  %336 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %337 = xor <4 x i64> %335, %336
  %338 = fcmp uno <8 x float> %0, zeroinitializer
  %339 = sext <8 x i1> %338 to <8 x i32>
  %340 = bitcast <8 x i32> %339 to <4 x i64>
  %341 = or <4 x i64> %337, %340
  %342 = bitcast <4 x i64> %341 to <8 x float>
  ret <8 x float> %342
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = fmul <8 x float> %7, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %9 = fadd <8 x float> %8, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %10 = fmul <8 x float> %7, %9
  %11 = fadd <8 x float> %10, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %12 = fmul <8 x float> %7, %11
  %13 = fadd <8 x float> %12, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %14 = fmul <8 x float> %7, %13
  %15 = fadd <8 x float> %14, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %16 = fmul <8 x float> %7, %15
  %17 = fadd <8 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %22 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %23 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <4 x i64> %23, <4 x i64> %24, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = fsub <8 x float> %17, %26
  %28 = bitcast <8 x float> %7 to <4 x i64>
  %29 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = and <2 x i64> %30, <i64 -17587891081216, i64 -17587891081216>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = fsub <8 x float> %7, %36
  %38 = fmul <8 x float> %7, %17
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fmul <8 x float> %36, %26
  %43 = fadd <8 x float> %42, %41
  %44 = fmul <8 x float> %27, %36
  %45 = fadd <8 x float> %44, %43
  %46 = fmul <8 x float> %37, %26
  %47 = fadd <8 x float> %46, %45
  %48 = fmul <8 x float> %37, %27
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %50
  %52 = fadd <8 x float> %38, %51
  %53 = fadd <8 x float> %52, %49
  %54 = fadd <8 x float> %50, %53
  %55 = bitcast <2 x i64> %5 to <4 x i32>
  %56 = ashr <4 x i32> %55, <i32 1, i32 1, i32 1, i32 1>
  %57 = bitcast <2 x i64> %6 to <4 x i32>
  %58 = ashr <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>
  %59 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = shl <4 x i32> %58, <i32 23, i32 23, i32 23, i32 23>
  %62 = add <4 x i32> %61, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %63 = bitcast <4 x i32> %60 to <2 x i64>
  %64 = bitcast <4 x i32> %62 to <2 x i64>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <8 x float>
  %69 = fmul <8 x float> %54, %68
  %70 = sub <4 x i32> %55, %56
  %71 = sub <4 x i32> %57, %58
  %72 = shl <4 x i32> %70, <i32 23, i32 23, i32 23, i32 23>
  %73 = add <4 x i32> %72, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %74 = shl <4 x i32> %71, <i32 23, i32 23, i32 23, i32 23>
  %75 = add <4 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <4 x i32> %73 to <2 x i64>
  %77 = bitcast <4 x i32> %75 to <2 x i64>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <4 x i64> %78, <4 x i64> %79, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fmul <8 x float> %69, %81
  %83 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %83) #8
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %84 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <4 x i64> %89 to <8 x float>
  ret <8 x float> %90
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = fmul <8 x float> %7, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %9 = fadd <8 x float> %8, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %10 = fmul <8 x float> %7, %9
  %11 = fadd <8 x float> %10, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %12 = fmul <8 x float> %7, %11
  %13 = fadd <8 x float> %12, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %14 = fmul <8 x float> %7, %13
  %15 = fadd <8 x float> %14, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %16 = fmul <8 x float> %7, %15
  %17 = fadd <8 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %18 = fmul <8 x float> %7, %17
  %19 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %20 = bitcast <2 x i64> %5 to <4 x i32>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = bitcast <2 x i64> %6 to <4 x i32>
  %23 = ashr <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = bitcast <4 x i32> %25 to <2 x i64>
  %29 = bitcast <4 x i32> %27 to <2 x i64>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fmul <8 x float> %19, %33
  %35 = sub <4 x i32> %20, %21
  %36 = sub <4 x i32> %22, %23
  %37 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = shl <4 x i32> %36, <i32 23, i32 23, i32 23, i32 23>
  %40 = add <4 x i32> %39, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %41 = bitcast <4 x i32> %38 to <2 x i64>
  %42 = bitcast <4 x i32> %40 to <2 x i64>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <8 x float>
  %47 = fmul <8 x float> %34, %46
  %48 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %47, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %48) #8
  %50 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %51 = bitcast <8 x float> %50 to <4 x i64>
  %52 = bitcast <8 x float> %49 to <4 x i64>
  %53 = xor <4 x i64> %51, <i64 -1, i64 -1, i64 -1, i64 -1>
  %54 = and <4 x i64> %53, %52
  %55 = bitcast <4 x i64> %54 to <8 x float>
  ret <8 x float> %55
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fmul <8 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %13 = fadd <8 x float> %12, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %22 = fmul <8 x float> %11, %21
  %23 = fadd <8 x float> %22, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %24 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %23
  %25 = fadd <8 x float> %22, %24
  %26 = fadd <8 x float> %25, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %27 = bitcast <8 x float> %23 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <4 x i64> %32, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <4 x i64> %34 to <8 x float>
  %36 = fsub <8 x float> %23, %35
  %37 = bitcast <8 x float> %11 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %11, %45
  %47 = fmul <8 x float> %11, %23
  %48 = bitcast <8 x float> %47 to <4 x i64>
  %49 = xor <4 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %45, %35
  %52 = fadd <8 x float> %51, %50
  %53 = fmul <8 x float> %36, %45
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %46, %35
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %46, %36
  %58 = fadd <8 x float> %57, %56
  %59 = fmul <8 x float> %11, %26
  %60 = fadd <8 x float> %59, %58
  %61 = fadd <8 x float> %47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %62 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %63 = fadd <8 x float> %47, %62
  %64 = fadd <8 x float> %63, %60
  %65 = fadd <8 x float> %61, %64
  %66 = bitcast <2 x i64> %6 to <4 x i32>
  %67 = ashr <4 x i32> %66, <i32 1, i32 1, i32 1, i32 1>
  %68 = bitcast <2 x i64> %7 to <4 x i32>
  %69 = ashr <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %70 = shl <4 x i32> %67, <i32 23, i32 23, i32 23, i32 23>
  %71 = add <4 x i32> %70, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %72 = shl <4 x i32> %69, <i32 23, i32 23, i32 23, i32 23>
  %73 = add <4 x i32> %72, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %74 = bitcast <4 x i32> %71 to <2 x i64>
  %75 = bitcast <4 x i32> %73 to <2 x i64>
  %76 = shufflevector <2 x i64> %74, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x i64> %76, <4 x i64> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = fmul <8 x float> %65, %79
  %81 = sub <4 x i32> %66, %67
  %82 = sub <4 x i32> %68, %69
  %83 = shl <4 x i32> %81, <i32 23, i32 23, i32 23, i32 23>
  %84 = add <4 x i32> %83, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %85 = shl <4 x i32> %82, <i32 23, i32 23, i32 23, i32 23>
  %86 = add <4 x i32> %85, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %87 = bitcast <4 x i32> %84 to <2 x i64>
  %88 = bitcast <4 x i32> %86 to <2 x i64>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fmul <8 x float> %80, %92
  %94 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %93, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %97 = bitcast <8 x float> %96 to <4 x i64>
  %98 = bitcast <8 x float> %95 to <4 x i64>
  %99 = xor <4 x i64> %97, <i64 -1, i64 -1, i64 -1, i64 -1>
  %100 = and <4 x i64> %99, %98
  %101 = bitcast <4 x i64> %100 to <8 x float>
  ret <8 x float> %101
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fmul <8 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %13 = fadd <8 x float> %12, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %22 = fmul <8 x float> %11, %21
  %23 = fadd <8 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = bitcast <2 x i64> %6 to <4 x i32>
  %25 = ashr <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %26 = bitcast <2 x i64> %7 to <4 x i32>
  %27 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = shl <4 x i32> %25, <i32 23, i32 23, i32 23, i32 23>
  %29 = add <4 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %29 to <2 x i64>
  %33 = bitcast <4 x i32> %31 to <2 x i64>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <4 x i64> %34, <4 x i64> %35, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %37 = bitcast <4 x i64> %36 to <8 x float>
  %38 = fmul <8 x float> %23, %37
  %39 = sub <4 x i32> %24, %25
  %40 = sub <4 x i32> %26, %27
  %41 = shl <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %42 = add <4 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = shl <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %38, %50
  %52 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %52) #8
  %54 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = bitcast <8 x float> %53 to <4 x i64>
  %57 = xor <4 x i64> %55, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %57, %56
  %59 = bitcast <4 x i64> %58 to <8 x float>
  ret <8 x float> %59
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expm1f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, zeroinitializer
  %3 = fmul <8 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %4) #8
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %0
  %11 = fsub <8 x float> %10, %0
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %0, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = fmul <8 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <8 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <8 x float> %18, %26
  %28 = fadd <8 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <8 x float> %18, %28
  %30 = fadd <8 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <8 x float> %18 to <4 x i64>
  %32 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %33 = shufflevector <4 x i64> %31, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %34 = and <2 x i64> %32, <i64 -17587891081216, i64 -17587891081216>
  %35 = and <2 x i64> %33, <i64 -17587891081216, i64 -17587891081216>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x i64> %36, <4 x i64> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = fsub <8 x float> %18, %39
  %41 = bitcast <8 x float> %30 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = fsub <8 x float> %30, %49
  %51 = fmul <8 x float> %18, %30
  %52 = bitcast <8 x float> %51 to <4 x i64>
  %53 = xor <4 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = fmul <8 x float> %39, %49
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %40, %49
  %58 = fadd <8 x float> %57, %56
  %59 = fmul <8 x float> %50, %39
  %60 = fadd <8 x float> %59, %58
  %61 = fmul <8 x float> %40, %50
  %62 = fadd <8 x float> %61, %60
  %63 = fmul <8 x float> %24, %30
  %64 = fadd <8 x float> %63, %62
  %65 = fadd <8 x float> %51, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %66 = fsub <8 x float> %65, %51
  %67 = fsub <8 x float> %65, %66
  %68 = fsub <8 x float> %51, %67
  %69 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %66
  %70 = fadd <8 x float> %69, %68
  %71 = fadd <8 x float> %70, %64
  %72 = bitcast <8 x float> %65 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %65, %80
  %82 = fmul <8 x float> %18, %65
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = xor <4 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <4 x i64> %84 to <8 x float>
  %86 = fmul <8 x float> %39, %80
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %40, %80
  %89 = fadd <8 x float> %88, %87
  %90 = fmul <8 x float> %81, %39
  %91 = fadd <8 x float> %90, %89
  %92 = fmul <8 x float> %40, %81
  %93 = fadd <8 x float> %92, %91
  %94 = fmul <8 x float> %18, %71
  %95 = fadd <8 x float> %93, %94
  %96 = fmul <8 x float> %24, %65
  %97 = fadd <8 x float> %96, %95
  %98 = fadd <8 x float> %82, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %99 = fsub <8 x float> %98, %82
  %100 = fsub <8 x float> %98, %99
  %101 = fsub <8 x float> %82, %100
  %102 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %99
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %103, %97
  %105 = fmul <8 x float> %18, %18
  %106 = bitcast <8 x float> %105 to <4 x i64>
  %107 = xor <4 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <4 x i64> %107 to <8 x float>
  %109 = fmul <8 x float> %39, %39
  %110 = fadd <8 x float> %109, %108
  %111 = fadd <8 x float> %39, %39
  %112 = fmul <8 x float> %111, %40
  %113 = fadd <8 x float> %112, %110
  %114 = fmul <8 x float> %40, %40
  %115 = fadd <8 x float> %114, %113
  %116 = fadd <8 x float> %24, %24
  %117 = fmul <8 x float> %18, %116
  %118 = fadd <8 x float> %117, %115
  %119 = shufflevector <4 x i64> %106, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %120 = shufflevector <4 x i64> %106, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %121 = and <2 x i64> %119, <i64 -17587891081216, i64 -17587891081216>
  %122 = and <2 x i64> %120, <i64 -17587891081216, i64 -17587891081216>
  %123 = shufflevector <2 x i64> %121, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %124 = shufflevector <2 x i64> %122, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %125 = shufflevector <4 x i64> %123, <4 x i64> %124, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %126 = bitcast <4 x i64> %125 to <8 x float>
  %127 = fsub <8 x float> %105, %126
  %128 = bitcast <8 x float> %98 to <4 x i64>
  %129 = shufflevector <4 x i64> %128, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = shufflevector <4 x i64> %128, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %131 = and <2 x i64> %129, <i64 -17587891081216, i64 -17587891081216>
  %132 = and <2 x i64> %130, <i64 -17587891081216, i64 -17587891081216>
  %133 = shufflevector <2 x i64> %131, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = shufflevector <2 x i64> %132, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %135 = shufflevector <4 x i64> %133, <4 x i64> %134, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = fsub <8 x float> %98, %136
  %138 = fmul <8 x float> %105, %98
  %139 = bitcast <8 x float> %138 to <4 x i64>
  %140 = xor <4 x i64> %139, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %141 = bitcast <4 x i64> %140 to <8 x float>
  %142 = fmul <8 x float> %126, %136
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %127, %136
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %137, %126
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %127, %137
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %105, %104
  %151 = fadd <8 x float> %149, %150
  %152 = fmul <8 x float> %98, %118
  %153 = fadd <8 x float> %152, %151
  %154 = fadd <8 x float> %18, %138
  %155 = fsub <8 x float> %154, %18
  %156 = fsub <8 x float> %154, %155
  %157 = fsub <8 x float> %18, %156
  %158 = fsub <8 x float> %138, %155
  %159 = fadd <8 x float> %158, %157
  %160 = fadd <8 x float> %24, %153
  %161 = fadd <8 x float> %159, %160
  %162 = fadd <8 x float> %154, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %163 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %162
  %164 = fadd <8 x float> %154, %163
  %165 = fadd <8 x float> %164, %161
  %166 = bitcast <2 x i64> %6 to <4 x i32>
  %167 = ashr <4 x i32> %166, <i32 1, i32 1, i32 1, i32 1>
  %168 = bitcast <2 x i64> %7 to <4 x i32>
  %169 = ashr <4 x i32> %168, <i32 1, i32 1, i32 1, i32 1>
  %170 = shl <4 x i32> %167, <i32 23, i32 23, i32 23, i32 23>
  %171 = add <4 x i32> %170, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %172 = shl <4 x i32> %169, <i32 23, i32 23, i32 23, i32 23>
  %173 = add <4 x i32> %172, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %174 = bitcast <4 x i32> %171 to <2 x i64>
  %175 = bitcast <4 x i32> %173 to <2 x i64>
  %176 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %177 = shufflevector <2 x i64> %175, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %178 = shufflevector <4 x i64> %176, <4 x i64> %177, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %179 = bitcast <4 x i64> %178 to <8 x float>
  %180 = fmul <8 x float> %162, %179
  %181 = sub <4 x i32> %166, %167
  %182 = sub <4 x i32> %168, %169
  %183 = shl <4 x i32> %181, <i32 23, i32 23, i32 23, i32 23>
  %184 = add <4 x i32> %183, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %185 = shl <4 x i32> %182, <i32 23, i32 23, i32 23, i32 23>
  %186 = add <4 x i32> %185, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %187 = bitcast <4 x i32> %184 to <2 x i64>
  %188 = bitcast <4 x i32> %186 to <2 x i64>
  %189 = shufflevector <2 x i64> %187, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %190 = shufflevector <2 x i64> %188, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %191 = shufflevector <4 x i64> %189, <4 x i64> %190, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %192 = bitcast <4 x i64> %191 to <8 x float>
  %193 = fmul <8 x float> %180, %192
  %194 = fmul <8 x float> %165, %179
  %195 = fmul <8 x float> %194, %192
  %196 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %197 = bitcast <8 x float> %196 to <4 x i64>
  %198 = bitcast <8 x float> %193 to <4 x i64>
  %199 = xor <4 x i64> %197, <i64 -1, i64 -1, i64 -1, i64 -1>
  %200 = and <4 x i64> %198, %199
  %201 = bitcast <8 x float> %195 to <4 x i64>
  %202 = and <4 x i64> %201, %199
  %203 = bitcast <4 x i64> %200 to <8 x float>
  %204 = bitcast <4 x i64> %202 to <8 x float>
  %205 = fadd <8 x float> %203, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %206 = fsub <8 x float> %205, %203
  %207 = fsub <8 x float> %205, %206
  %208 = fsub <8 x float> %203, %207
  %209 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %206
  %210 = fadd <8 x float> %209, %208
  %211 = fadd <8 x float> %210, %204
  %212 = fadd <8 x float> %205, %211
  %213 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i8 30) #8
  %214 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %212, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %213) #8
  %215 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i8 17) #8
  %216 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %214, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %215) #8
  %217 = bitcast <8 x float> %0 to <4 x i64>
  %218 = shufflevector <4 x i64> %217, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %219 = shufflevector <4 x i64> %217, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %220 = bitcast <2 x i64> %218 to <4 x i32>
  %221 = icmp eq <4 x i32> %220, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %222 = sext <4 x i1> %221 to <4 x i32>
  %223 = bitcast <4 x i32> %222 to <2 x i64>
  %224 = bitcast <2 x i64> %219 to <4 x i32>
  %225 = icmp eq <4 x i32> %224, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %226 = sext <4 x i1> %225 to <4 x i32>
  %227 = bitcast <4 x i32> %226 to <2 x i64>
  %228 = shufflevector <2 x i64> %223, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %229 = shufflevector <2 x i64> %227, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = shufflevector <4 x i64> %228, <4 x i64> %229, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %231 = bitcast <4 x i64> %230 to <8 x float>
  %232 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %216, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %231) #8
  ret <8 x float> %232
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log10f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = bitcast <8 x float> %55 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %55, %70
  %72 = bitcast <8 x float> %61 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %61, %80
  %82 = bitcast <8 x float> %49 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = and <2 x i64> %84, <i64 -17587891081216, i64 -17587891081216>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fsub <8 x float> %49, %90
  %92 = fmul <8 x float> %49, %61
  %93 = fmul <8 x float> %70, %80
  %94 = fadd <8 x float> %93, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %95 = fmul <8 x float> %81, %70
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %71, %80
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %71, %81
  %100 = fadd <8 x float> %99, %98
  %101 = bitcast <8 x float> %100 to <4 x i64>
  %102 = xor <4 x i64> %101, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %103 = bitcast <4 x i64> %102 to <8 x float>
  %104 = bitcast <8 x float> %92 to <4 x i64>
  %105 = xor <4 x i64> %104, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = fmul <8 x float> %90, %80
  %108 = fadd <8 x float> %107, %106
  %109 = fmul <8 x float> %81, %90
  %110 = fadd <8 x float> %109, %108
  %111 = fmul <8 x float> %91, %80
  %112 = fadd <8 x float> %111, %110
  %113 = fmul <8 x float> %91, %81
  %114 = fadd <8 x float> %113, %112
  %115 = fmul <8 x float> %92, %103
  %116 = fadd <8 x float> %114, %115
  %117 = fmul <8 x float> %92, %60
  %118 = fsub <8 x float> %54, %117
  %119 = fmul <8 x float> %61, %118
  %120 = fadd <8 x float> %119, %116
  %121 = fmul <8 x float> %92, %92
  %122 = fmul <8 x float> %121, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %123 = fadd <8 x float> %122, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %124 = fmul <8 x float> %121, %123
  %125 = fadd <8 x float> %124, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %126 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x i32>
  %130 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %129) #8
  %131 = bitcast <8 x float> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <4 x i64> %136, <4 x i64> %137, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fsub <8 x float> %130, %139
  %141 = fmul <8 x float> %130, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %142 = bitcast <8 x float> %141 to <4 x i64>
  %143 = xor <4 x i64> %142, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %144 = bitcast <4 x i64> %143 to <8 x float>
  %145 = fmul <8 x float> %139, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %139, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %140, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %150 = fadd <8 x float> %149, %148
  %151 = fmul <8 x float> %140, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %152 = fadd <8 x float> %151, %150
  %153 = fmul <8 x float> %130, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %154 = fadd <8 x float> %153, %152
  %155 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %156 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %157 = and <2 x i64> %155, <i64 -17587891081216, i64 -17587891081216>
  %158 = and <2 x i64> %156, <i64 -17587891081216, i64 -17587891081216>
  %159 = shufflevector <2 x i64> %157, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %160 = shufflevector <2 x i64> %158, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %161 = shufflevector <4 x i64> %159, <4 x i64> %160, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %162 = bitcast <4 x i64> %161 to <8 x float>
  %163 = fsub <8 x float> %92, %162
  %164 = fmul <8 x float> %92, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %165 = bitcast <8 x float> %164 to <4 x i64>
  %166 = xor <4 x i64> %165, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %167 = bitcast <4 x i64> %166 to <8 x float>
  %168 = fmul <8 x float> %162, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %169 = fadd <8 x float> %168, %167
  %170 = fmul <8 x float> %163, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %171 = fadd <8 x float> %170, %169
  %172 = fmul <8 x float> %162, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %173 = fadd <8 x float> %172, %171
  %174 = fmul <8 x float> %163, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %175 = fadd <8 x float> %174, %173
  %176 = fmul <8 x float> %92, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %177 = fadd <8 x float> %176, %175
  %178 = fmul <8 x float> %120, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %179 = fadd <8 x float> %177, %178
  %180 = fadd <8 x float> %141, %164
  %181 = fsub <8 x float> %141, %180
  %182 = fadd <8 x float> %164, %181
  %183 = fadd <8 x float> %154, %182
  %184 = fadd <8 x float> %183, %179
  %185 = fmul <8 x float> %92, %121
  %186 = fmul <8 x float> %185, %125
  %187 = fadd <8 x float> %180, %186
  %188 = fsub <8 x float> %180, %187
  %189 = fadd <8 x float> %186, %188
  %190 = fadd <8 x float> %189, %184
  %191 = fadd <8 x float> %187, %190
  %192 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %193 = sext <8 x i1> %192 to <8 x i32>
  %194 = bitcast <8 x i32> %193 to <8 x float>
  %195 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %191, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %194) #8
  %196 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %197 = bitcast <8 x float> %196 to <4 x i64>
  %198 = fcmp uno <8 x float> %5, zeroinitializer
  %199 = sext <8 x i1> %198 to <8 x i32>
  %200 = bitcast <8 x i32> %199 to <4 x i64>
  %201 = or <4 x i64> %197, %200
  %202 = bitcast <4 x i64> %201 to <8 x float>
  %203 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %195, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %202) #8
  %204 = fcmp oeq <8 x float> %5, zeroinitializer
  %205 = sext <8 x i1> %204 to <8 x i32>
  %206 = bitcast <8 x i32> %205 to <8 x float>
  %207 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %203, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %206) #8
  ret <8 x float> %207
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = bitcast <8 x float> %55 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %55, %70
  %72 = bitcast <8 x float> %61 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %61, %80
  %82 = bitcast <8 x float> %49 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = and <2 x i64> %84, <i64 -17587891081216, i64 -17587891081216>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fsub <8 x float> %49, %90
  %92 = fmul <8 x float> %49, %61
  %93 = fmul <8 x float> %70, %80
  %94 = fadd <8 x float> %93, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %95 = fmul <8 x float> %81, %70
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %71, %80
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %71, %81
  %100 = fadd <8 x float> %99, %98
  %101 = bitcast <8 x float> %100 to <4 x i64>
  %102 = xor <4 x i64> %101, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %103 = bitcast <4 x i64> %102 to <8 x float>
  %104 = bitcast <8 x float> %92 to <4 x i64>
  %105 = xor <4 x i64> %104, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = fmul <8 x float> %90, %80
  %108 = fadd <8 x float> %107, %106
  %109 = fmul <8 x float> %81, %90
  %110 = fadd <8 x float> %109, %108
  %111 = fmul <8 x float> %91, %80
  %112 = fadd <8 x float> %111, %110
  %113 = fmul <8 x float> %91, %81
  %114 = fadd <8 x float> %113, %112
  %115 = fmul <8 x float> %92, %103
  %116 = fadd <8 x float> %114, %115
  %117 = fmul <8 x float> %92, %60
  %118 = fsub <8 x float> %54, %117
  %119 = fmul <8 x float> %61, %118
  %120 = fadd <8 x float> %119, %116
  %121 = fmul <8 x float> %92, %92
  %122 = fmul <8 x float> %121, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %123 = fadd <8 x float> %122, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %124 = fmul <8 x float> %121, %123
  %125 = fadd <8 x float> %124, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %126 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x i32>
  %130 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %129) #8
  %131 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = and <2 x i64> %131, <i64 -17587891081216, i64 -17587891081216>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <4 x i64> %135, <4 x i64> %136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fsub <8 x float> %92, %138
  %140 = fmul <8 x float> %92, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %141 = bitcast <8 x float> %140 to <4 x i64>
  %142 = xor <4 x i64> %141, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %143 = bitcast <4 x i64> %142 to <8 x float>
  %144 = fmul <8 x float> %138, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %139, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %138, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %139, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %92, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %120, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %155 = fadd <8 x float> %153, %154
  %156 = fadd <8 x float> %130, %140
  %157 = fsub <8 x float> %156, %130
  %158 = fsub <8 x float> %156, %157
  %159 = fsub <8 x float> %130, %158
  %160 = fsub <8 x float> %140, %157
  %161 = fadd <8 x float> %160, %159
  %162 = fadd <8 x float> %161, %155
  %163 = fmul <8 x float> %92, %121
  %164 = fmul <8 x float> %163, %125
  %165 = fadd <8 x float> %156, %164
  %166 = fsub <8 x float> %165, %156
  %167 = fsub <8 x float> %165, %166
  %168 = fsub <8 x float> %156, %167
  %169 = fsub <8 x float> %164, %166
  %170 = fadd <8 x float> %169, %168
  %171 = fadd <8 x float> %170, %162
  %172 = fadd <8 x float> %165, %171
  %173 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %174 = sext <8 x i1> %173 to <8 x i32>
  %175 = bitcast <8 x i32> %174 to <8 x float>
  %176 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %172, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %175) #8
  %177 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %178 = bitcast <8 x float> %177 to <4 x i64>
  %179 = fcmp uno <8 x float> %5, zeroinitializer
  %180 = sext <8 x i1> %179 to <8 x i32>
  %181 = bitcast <8 x i32> %180 to <4 x i64>
  %182 = or <4 x i64> %178, %181
  %183 = bitcast <4 x i64> %182 to <8 x float>
  %184 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %176, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %183) #8
  %185 = fcmp oeq <8 x float> %5, zeroinitializer
  %186 = sext <8 x i1> %185 to <8 x i32>
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %184, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %187) #8
  ret <8 x float> %188
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = fmul <8 x float> %52, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %54 = fadd <8 x float> %53, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %55 = fmul <8 x float> %52, %54
  %56 = fadd <8 x float> %55, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %57 = fmul <8 x float> %51, %52
  %58 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <4 x i64> %58, <4 x i64> %59, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %61 = bitcast <4 x i64> %60 to <8 x i32>
  %62 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #8
  %63 = fmul <8 x float> %51, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %64 = fadd <8 x float> %62, %63
  %65 = fmul <8 x float> %57, %56
  %66 = fadd <8 x float> %64, %65
  %67 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %69) #8
  %71 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = fcmp uno <8 x float> %5, zeroinitializer
  %74 = sext <8 x i1> %73 to <8 x i32>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = or <4 x i64> %72, %75
  %77 = bitcast <4 x i64> %76 to <8 x float>
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %70, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %77) #8
  %79 = fcmp oeq <8 x float> %5, zeroinitializer
  %80 = sext <8 x i1> %79 to <8 x i32>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %78, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %81) #8
  ret <8 x float> %82
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log1pf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %4 = bitcast <8 x float> %3 to <4 x i64>
  %5 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %5, <8 x float> %3) #8
  %7 = fmul <8 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %16 = add nsw <4 x i32> %15, <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %18 = add nsw <4 x i32> %17, <i32 -127, i32 -127, i32 -127, i32 -127>
  %19 = shl nuw nsw <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %20 = shl nuw nsw <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %19
  %22 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %20
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = bitcast <4 x i32> %22 to <2 x i64>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fadd <8 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fmul <8 x float> %28, %0
  %31 = fadd <8 x float> %30, %29
  %32 = add nsw <4 x i32> %15, <i32 -191, i32 -191, i32 -191, i32 -191>
  %33 = add nsw <4 x i32> %17, <i32 -191, i32 -191, i32 -191, i32 -191>
  %34 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %36 = bitcast <4 x i32> %16 to <16 x i8>
  %37 = bitcast <4 x i32> %32 to <16 x i8>
  %38 = bitcast <2 x i64> %34 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %36, <16 x i8> %37, <16 x i8> %38) #8
  %40 = bitcast <4 x i32> %18 to <16 x i8>
  %41 = bitcast <4 x i32> %33 to <16 x i8>
  %42 = bitcast <2 x i64> %35 to <16 x i8>
  %43 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %40, <16 x i8> %41, <16 x i8> %42) #8
  %44 = bitcast <16 x i8> %39 to <2 x i64>
  %45 = bitcast <16 x i8> %43 to <2 x i64>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <8 x i32>
  %50 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %49) #8
  %51 = bitcast <8 x float> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %54 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %55 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = fsub <8 x float> %50, %59
  %61 = fmul <8 x float> %50, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %62 = bitcast <8 x float> %61 to <4 x i64>
  %63 = xor <4 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fmul <8 x float> %59, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %66 = fadd <8 x float> %65, %64
  %67 = fmul <8 x float> %59, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %68 = fadd <8 x float> %67, %66
  %69 = fmul <8 x float> %60, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %60, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %72 = fadd <8 x float> %71, %70
  %73 = fmul <8 x float> %50, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %74 = fadd <8 x float> %73, %72
  %75 = fadd <8 x float> %31, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %76 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %75
  %77 = fadd <8 x float> %31, %76
  %78 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %79 = bitcast <8 x float> %75 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %82 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %83 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x i64> %83, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x i64> %84, <4 x i64> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %87 = bitcast <4 x i64> %86 to <8 x float>
  %88 = fsub <8 x float> %75, %87
  %89 = bitcast <8 x float> %78 to <4 x i64>
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %91 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %92 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %93 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fsub <8 x float> %78, %97
  %99 = bitcast <8 x float> %31 to <4 x i64>
  %100 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %101 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %102 = and <2 x i64> %100, <i64 -17587891081216, i64 -17587891081216>
  %103 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %104 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <4 x i64> %104, <4 x i64> %105, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %107 = bitcast <4 x i64> %106 to <8 x float>
  %108 = fsub <8 x float> %31, %107
  %109 = fmul <8 x float> %31, %78
  %110 = fmul <8 x float> %87, %97
  %111 = fadd <8 x float> %110, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %112 = fmul <8 x float> %98, %87
  %113 = fadd <8 x float> %112, %111
  %114 = fmul <8 x float> %88, %97
  %115 = fadd <8 x float> %114, %113
  %116 = fmul <8 x float> %88, %98
  %117 = fadd <8 x float> %116, %115
  %118 = bitcast <8 x float> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <4 x i64> %119 to <8 x float>
  %121 = bitcast <8 x float> %109 to <4 x i64>
  %122 = xor <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fmul <8 x float> %107, %97
  %125 = fadd <8 x float> %124, %123
  %126 = fmul <8 x float> %98, %107
  %127 = fadd <8 x float> %126, %125
  %128 = fmul <8 x float> %108, %97
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %108, %98
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %109, %120
  %133 = fadd <8 x float> %131, %132
  %134 = fmul <8 x float> %109, %77
  %135 = fsub <8 x float> zeroinitializer, %134
  %136 = fmul <8 x float> %78, %135
  %137 = fadd <8 x float> %136, %133
  %138 = fmul <8 x float> %109, %109
  %139 = fmul <8 x float> %138, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %140 = fadd <8 x float> %139, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %141 = fmul <8 x float> %138, %140
  %142 = fadd <8 x float> %141, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %143 = fmul <8 x float> %109, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %144 = fmul <8 x float> %137, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %145 = fadd <8 x float> %61, %143
  %146 = fsub <8 x float> %61, %145
  %147 = fadd <8 x float> %143, %146
  %148 = fadd <8 x float> %74, %147
  %149 = fadd <8 x float> %148, %144
  %150 = fmul <8 x float> %109, %138
  %151 = fmul <8 x float> %150, %142
  %152 = fadd <8 x float> %145, %151
  %153 = fsub <8 x float> %145, %152
  %154 = fadd <8 x float> %151, %153
  %155 = fadd <8 x float> %154, %149
  %156 = fadd <8 x float> %152, %155
  %157 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %158 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %156, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %157) #8
  %159 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #8
  %160 = bitcast <8 x float> %159 to <4 x i64>
  %161 = bitcast <8 x float> %158 to <4 x i64>
  %162 = or <4 x i64> %160, %161
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %165 = sext <8 x i1> %164 to <8 x i32>
  %166 = bitcast <8 x i32> %165 to <8 x float>
  %167 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %163, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %166) #8
  %168 = bitcast <8 x float> %0 to <4 x i64>
  %169 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %170 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %171 = bitcast <2 x i64> %169 to <4 x i32>
  %172 = icmp eq <4 x i32> %171, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = bitcast <2 x i64> %170 to <4 x i32>
  %176 = icmp eq <4 x i32> %175, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %177 = sext <4 x i1> %176 to <4 x i32>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %167, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %182) #8
  ret <8 x float> %183
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_fabsf8_avx(<8 x float>) local_unnamed_addr #4 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_copysignf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #4 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaxf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fminf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fdimf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #8
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #8
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_truncf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_floorf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #8
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_ceilf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #8
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_roundf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #8
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #8
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #8
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_rintf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaf8_avx(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #3 {
  %4 = fmul <8 x float> %0, %1
  %5 = fadd <8 x float> %4, %2
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>, i8 17) #8
  %10 = fmul <8 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %12, <8 x float> %9) #8
  %14 = fmul <8 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %14, <8 x float> %9) #8
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <8 x float> %9) #8
  %17 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %18 = fmul <8 x float> %11, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %17) #8
  %20 = fmul <8 x float> %13, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %20, <8 x float> %17) #8
  %22 = fmul <8 x float> %15, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %17) #8
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <8 x float> %17) #8
  %25 = bitcast <8 x float> %19 to <4 x i64>
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %28 = and <2 x i64> %26, <i64 -17587891081216, i64 -17587891081216>
  %29 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fsub <8 x float> %19, %33
  %35 = bitcast <8 x float> %21 to <4 x i64>
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = fsub <8 x float> %21, %43
  %45 = fmul <8 x float> %19, %21
  %46 = bitcast <8 x float> %45 to <4 x i64>
  %47 = xor <4 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fmul <8 x float> %33, %43
  %50 = fadd <8 x float> %49, %48
  %51 = fmul <8 x float> %34, %43
  %52 = fadd <8 x float> %51, %50
  %53 = fmul <8 x float> %44, %33
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %34, %44
  %56 = fadd <8 x float> %55, %54
  %57 = fadd <8 x float> %45, %23
  %58 = fsub <8 x float> %57, %45
  %59 = fsub <8 x float> %57, %58
  %60 = fsub <8 x float> %45, %59
  %61 = fsub <8 x float> %23, %58
  %62 = fadd <8 x float> %61, %60
  %63 = fadd <8 x float> %62, %56
  %64 = fcmp oeq <8 x float> %19, zeroinitializer
  %65 = fcmp oeq <8 x float> %21, zeroinitializer
  %66 = or <8 x i1> %65, %64
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = fadd <8 x float> %57, %63
  %69 = bitcast <8 x i32> %67 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %23, <8 x float> %69) #8
  %71 = bitcast <8 x float> %23 to <4 x i64>
  %72 = and <4 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = fcmp oeq <8 x float> %73, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = and <4 x i64> %25, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = fcmp oeq <8 x float> %78, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = and <4 x i64> %35, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fcmp oeq <8 x float> %81, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %83 = fcmp uno <8 x float> %21, %19
  %84 = or <8 x i1> %83, %79
  %85 = or <8 x i1> %84, %82
  %86 = sext <8 x i1> %85 to <8 x i32>
  %87 = bitcast <8 x i32> %86 to <4 x i64>
  %88 = xor <4 x i64> %87, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %76
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %23, <8 x float> %90) #8
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = and <4 x i64> %92, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %94 = bitcast <4 x i64> %93 to <8 x float>
  %95 = fcmp oeq <8 x float> %94, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %96 = fcmp uno <8 x float> %91, zeroinitializer
  %97 = or <8 x i1> %95, %96
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = fmul <8 x float> %24, %70
  %100 = bitcast <8 x i32> %98 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> %91, <8 x float> %100) #8
  ret <8 x float> %101
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u05avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %3 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>, i8 17) #8
  %5 = fmul <8 x float> %3, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> %5, <8 x float> %4) #8
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> <float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000>, <8 x float> %4) #8
  %8 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %6, <8 x float> <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>, i8 30) #8
  %9 = fmul <8 x float> %6, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %9, <8 x float> %8) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %7, <8 x float> <float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000>, <8 x float> %8) #8
  %12 = fadd <8 x float> %10, <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>
  %13 = bitcast <8 x float> %12 to <4 x i64>
  %14 = shufflevector <4 x i64> %13, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %15 = shufflevector <4 x i64> %13, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %16 = bitcast <2 x i64> %14 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = bitcast <2 x i64> %15 to <4 x i32>
  %19 = lshr <4 x i32> %18, <i32 1, i32 1, i32 1, i32 1>
  %20 = sub nsw <4 x i32> <i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174>, %17
  %21 = sub nsw <4 x i32> <i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174>, %19
  %22 = bitcast <4 x i32> %20 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fmul <8 x float> %10, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %29 = fmul <8 x float> %28, %27
  %30 = fmul <8 x float> %29, %27
  %31 = fsub <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %30
  %32 = fmul <8 x float> %31, %27
  %33 = fmul <8 x float> %28, %32
  %34 = fmul <8 x float> %32, %33
  %35 = fsub <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %34
  %36 = fmul <8 x float> %32, %35
  %37 = fmul <8 x float> %28, %36
  %38 = fmul <8 x float> %36, %37
  %39 = fsub <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %38
  %40 = fmul <8 x float> %36, %39
  %41 = fmul <8 x float> %10, %40
  %42 = bitcast <8 x float> %41 to <4 x i64>
  %43 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %44 = shufflevector <4 x i64> %42, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %45 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %46 = and <2 x i64> %44, <i64 -17587891081216, i64 -17587891081216>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fsub <8 x float> %41, %50
  %52 = fmul <8 x float> %41, %41
  %53 = bitcast <8 x float> %52 to <4 x i64>
  %54 = xor <4 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fmul <8 x float> %50, %50
  %57 = fadd <8 x float> %56, %55
  %58 = fmul <8 x float> %51, %50
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %58, %59
  %61 = fmul <8 x float> %51, %51
  %62 = fadd <8 x float> %61, %60
  %63 = fadd <8 x float> %10, %52
  %64 = fsub <8 x float> %63, %10
  %65 = fsub <8 x float> %63, %64
  %66 = fsub <8 x float> %10, %65
  %67 = fsub <8 x float> %52, %64
  %68 = fadd <8 x float> %67, %66
  %69 = fadd <8 x float> %68, %62
  %70 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %41
  %71 = bitcast <8 x float> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %73 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %74 = and <2 x i64> %72, <i64 -17587891081216, i64 -17587891081216>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = shufflevector <2 x i64> %74, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x i64> %76, <4 x i64> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = fsub <8 x float> %70, %79
  %81 = fmul <8 x float> %50, %79
  %82 = fadd <8 x float> %81, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %83 = fmul <8 x float> %80, %50
  %84 = fadd <8 x float> %83, %82
  %85 = fmul <8 x float> %51, %79
  %86 = fadd <8 x float> %85, %84
  %87 = fmul <8 x float> %51, %80
  %88 = fadd <8 x float> %87, %86
  %89 = xor <4 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fmul <8 x float> %88, %90
  %92 = bitcast <8 x float> %63 to <4 x i64>
  %93 = shufflevector <4 x i64> %92, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %94 = shufflevector <4 x i64> %92, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %95 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %96 = and <2 x i64> %94, <i64 -17587891081216, i64 -17587891081216>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %96, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = fsub <8 x float> %63, %100
  %102 = fmul <8 x float> %70, %63
  %103 = bitcast <8 x float> %102 to <4 x i64>
  %104 = xor <4 x i64> %103, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %105 = bitcast <4 x i64> %104 to <8 x float>
  %106 = fmul <8 x float> %79, %100
  %107 = fadd <8 x float> %106, %105
  %108 = fmul <8 x float> %101, %79
  %109 = fadd <8 x float> %108, %107
  %110 = fmul <8 x float> %80, %100
  %111 = fadd <8 x float> %110, %109
  %112 = fmul <8 x float> %80, %101
  %113 = fadd <8 x float> %112, %111
  %114 = fmul <8 x float> %63, %91
  %115 = fadd <8 x float> %113, %114
  %116 = fmul <8 x float> %70, %69
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %102, %117
  %119 = fmul <8 x float> %11, %118
  %120 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %121 = sext <8 x i1> %120 to <8 x i32>
  %122 = bitcast <8 x i32> %121 to <8 x float>
  %123 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %119, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %122) #8
  %124 = fcmp oeq <8 x float> %10, zeroinitializer
  %125 = sext <8 x i1> %124 to <8 x i32>
  %126 = bitcast <8 x i32> %125 to <8 x float>
  %127 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %123, <8 x float> %10, <8 x float> %126) #8
  ret <8 x float> %127
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u05avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %12 = fmul <8 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %12, <8 x float> %11) #8
  %14 = fmul <8 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %14, <8 x float> %11) #8
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = bitcast <8 x float> %15 to <4 x i64>
  %18 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %19 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %20 = and <2 x i64> %18, <i64 -17587891081216, i64 -17587891081216>
  %21 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %22 = shufflevector <2 x i64> %20, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %23 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = shufflevector <4 x i64> %22, <4 x i64> %23, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = fsub <8 x float> %15, %25
  %27 = bitcast <8 x float> %16 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <4 x i64> %32, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <4 x i64> %34 to <8 x float>
  %36 = fsub <8 x float> %16, %35
  %37 = bitcast <8 x float> %13 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %13, %45
  %47 = fmul <8 x float> %13, %16
  %48 = fmul <8 x float> %25, %35
  %49 = fadd <8 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fmul <8 x float> %36, %25
  %51 = fadd <8 x float> %50, %49
  %52 = fmul <8 x float> %26, %35
  %53 = fadd <8 x float> %52, %51
  %54 = fmul <8 x float> %26, %36
  %55 = fadd <8 x float> %54, %53
  %56 = bitcast <8 x float> %55 to <4 x i64>
  %57 = xor <4 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = bitcast <8 x float> %47 to <4 x i64>
  %60 = xor <4 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <4 x i64> %60 to <8 x float>
  %62 = fmul <8 x float> %45, %35
  %63 = fadd <8 x float> %62, %61
  %64 = fmul <8 x float> %36, %45
  %65 = fadd <8 x float> %64, %63
  %66 = fmul <8 x float> %46, %35
  %67 = fadd <8 x float> %66, %65
  %68 = fmul <8 x float> %46, %36
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %47, %58
  %71 = fadd <8 x float> %69, %70
  %72 = fmul <8 x float> %47, zeroinitializer
  %73 = fsub <8 x float> zeroinitializer, %72
  %74 = fmul <8 x float> %16, %73
  %75 = fadd <8 x float> %74, %71
  %76 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %59, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = and <2 x i64> %77, <i64 -17587891081216, i64 -17587891081216>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <2 x i64> %79, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %82 = shufflevector <4 x i64> %80, <4 x i64> %81, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %83 = bitcast <4 x i64> %82 to <8 x float>
  %84 = fsub <8 x float> %47, %83
  %85 = fmul <8 x float> %47, %47
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = xor <4 x i64> %86, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = fmul <8 x float> %83, %83
  %90 = fadd <8 x float> %89, %88
  %91 = fadd <8 x float> %83, %83
  %92 = fmul <8 x float> %91, %84
  %93 = fadd <8 x float> %92, %90
  %94 = fmul <8 x float> %84, %84
  %95 = fadd <8 x float> %94, %93
  %96 = fadd <8 x float> %75, %75
  %97 = fmul <8 x float> %47, %96
  %98 = fadd <8 x float> %95, %97
  %99 = fadd <8 x float> %85, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %100 = fsub <8 x float> %99, %85
  %101 = fsub <8 x float> %99, %100
  %102 = fsub <8 x float> %85, %101
  %103 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %100
  %104 = fadd <8 x float> %103, %102
  %105 = fadd <8 x float> %104, %98
  %106 = fadd <8 x float> %99, %105
  %107 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %106) #8
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %108, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %110 = shufflevector <4 x i64> %108, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %111 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %112 = and <2 x i64> %110, <i64 -17587891081216, i64 -17587891081216>
  %113 = shufflevector <2 x i64> %111, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <4 x i64> %113, <4 x i64> %114, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = bitcast <4 x i64> %115 to <8 x float>
  %117 = fsub <8 x float> %107, %116
  %118 = fmul <8 x float> %107, %107
  %119 = bitcast <8 x float> %118 to <4 x i64>
  %120 = xor <4 x i64> %119, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <4 x i64> %120 to <8 x float>
  %122 = fmul <8 x float> %116, %116
  %123 = fadd <8 x float> %122, %121
  %124 = fmul <8 x float> %117, %116
  %125 = fadd <8 x float> %124, %123
  %126 = fadd <8 x float> %124, %125
  %127 = fmul <8 x float> %117, %117
  %128 = fadd <8 x float> %127, %126
  %129 = fadd <8 x float> %118, %99
  %130 = fsub <8 x float> %129, %99
  %131 = fsub <8 x float> %129, %130
  %132 = fsub <8 x float> %99, %131
  %133 = fsub <8 x float> %118, %130
  %134 = fadd <8 x float> %133, %132
  %135 = fadd <8 x float> %128, %105
  %136 = fadd <8 x float> %134, %135
  %137 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %107
  %138 = bitcast <8 x float> %137 to <4 x i64>
  %139 = shufflevector <4 x i64> %138, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %140 = shufflevector <4 x i64> %138, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %141 = and <2 x i64> %139, <i64 -17587891081216, i64 -17587891081216>
  %142 = and <2 x i64> %140, <i64 -17587891081216, i64 -17587891081216>
  %143 = shufflevector <2 x i64> %141, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %144 = shufflevector <2 x i64> %142, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %145 = shufflevector <4 x i64> %143, <4 x i64> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %146 = bitcast <4 x i64> %145 to <8 x float>
  %147 = fsub <8 x float> %137, %146
  %148 = fmul <8 x float> %116, %146
  %149 = fadd <8 x float> %148, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %150 = fmul <8 x float> %147, %116
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %117, %146
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %117, %147
  %155 = fadd <8 x float> %154, %153
  %156 = xor <4 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <4 x i64> %156 to <8 x float>
  %158 = fmul <8 x float> %155, %157
  %159 = bitcast <8 x float> %129 to <4 x i64>
  %160 = shufflevector <4 x i64> %159, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %161 = shufflevector <4 x i64> %159, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %162 = and <2 x i64> %160, <i64 -17587891081216, i64 -17587891081216>
  %163 = and <2 x i64> %161, <i64 -17587891081216, i64 -17587891081216>
  %164 = shufflevector <2 x i64> %162, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %165 = shufflevector <2 x i64> %163, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %166 = shufflevector <4 x i64> %164, <4 x i64> %165, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %167 = bitcast <4 x i64> %166 to <8 x float>
  %168 = fsub <8 x float> %129, %167
  %169 = fmul <8 x float> %137, %129
  %170 = bitcast <8 x float> %169 to <4 x i64>
  %171 = xor <4 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <4 x i64> %171 to <8 x float>
  %173 = fmul <8 x float> %146, %167
  %174 = fadd <8 x float> %173, %172
  %175 = fmul <8 x float> %168, %146
  %176 = fadd <8 x float> %175, %174
  %177 = fmul <8 x float> %147, %167
  %178 = fadd <8 x float> %177, %176
  %179 = fmul <8 x float> %147, %168
  %180 = fadd <8 x float> %179, %178
  %181 = fmul <8 x float> %129, %158
  %182 = fadd <8 x float> %181, %180
  %183 = fmul <8 x float> %137, %136
  %184 = fadd <8 x float> %182, %183
  %185 = fmul <8 x float> %169, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fmul <8 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %187 = bitcast <8 x float> %185 to <4 x i64>
  %188 = shufflevector <4 x i64> %187, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = shufflevector <4 x i64> %187, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %190 = and <2 x i64> %188, <i64 -17587891081216, i64 -17587891081216>
  %191 = and <2 x i64> %189, <i64 -17587891081216, i64 -17587891081216>
  %192 = shufflevector <2 x i64> %190, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %193 = shufflevector <2 x i64> %191, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = shufflevector <4 x i64> %192, <4 x i64> %193, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %195 = bitcast <4 x i64> %194 to <8 x float>
  %196 = fsub <8 x float> %185, %195
  %197 = bitcast <8 x float> %10 to <4 x i64>
  %198 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %200 = and <2 x i64> %198, <i64 -17587891081216, i64 -17587891081216>
  %201 = and <2 x i64> %199, <i64 -17587891081216, i64 -17587891081216>
  %202 = shufflevector <2 x i64> %200, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %203 = shufflevector <2 x i64> %201, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %204 = shufflevector <4 x i64> %202, <4 x i64> %203, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %205 = bitcast <4 x i64> %204 to <8 x float>
  %206 = fsub <8 x float> %10, %205
  %207 = fmul <8 x float> %10, %185
  %208 = bitcast <8 x float> %207 to <4 x i64>
  %209 = xor <4 x i64> %208, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %210 = bitcast <4 x i64> %209 to <8 x float>
  %211 = fmul <8 x float> %205, %195
  %212 = fadd <8 x float> %211, %210
  %213 = fmul <8 x float> %196, %205
  %214 = fadd <8 x float> %213, %212
  %215 = fmul <8 x float> %206, %195
  %216 = fadd <8 x float> %215, %214
  %217 = fmul <8 x float> %206, %196
  %218 = fadd <8 x float> %217, %216
  %219 = fmul <8 x float> %10, %186
  %220 = fadd <8 x float> %218, %219
  %221 = fadd <8 x float> %207, %220
  %222 = fcmp uno <8 x float> %221, zeroinitializer
  %223 = sext <8 x i1> %222 to <8 x i32>
  %224 = bitcast <8 x i32> %223 to <8 x float>
  %225 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %221, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %224) #8
  %226 = fcmp oeq <8 x float> %9, zeroinitializer
  %227 = sext <8 x i1> %226 to <8 x i32>
  %228 = bitcast <8 x i32> %227 to <8 x float>
  %229 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %225, <8 x float> %10, <8 x float> %228) #8
  %230 = fcmp uno <8 x float> %8, %5
  %231 = sext <8 x i1> %230 to <8 x i32>
  %232 = bitcast <8 x i32> %231 to <8 x float>
  %233 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %229, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %232) #8
  %234 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %235 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %236 = or <8 x i1> %235, %234
  %237 = sext <8 x i1> %236 to <8 x i32>
  %238 = bitcast <8 x i32> %237 to <8 x float>
  %239 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %233, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %238) #8
  ret <8 x float> %239
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u35avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = fdiv <8 x float> %9, %10
  %12 = fmul <8 x float> %11, %11
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %13) #8
  %15 = fmul <8 x float> %10, %14
  %16 = fcmp oeq <8 x float> %9, zeroinitializer
  %17 = sext <8 x i1> %16 to <8 x i32>
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %10, <8 x float> %18) #8
  %20 = fcmp uno <8 x float> %8, %5
  %21 = sext <8 x i1> %20 to <8 x i32>
  %22 = bitcast <8 x i32> %21 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %22) #8
  %24 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = or <8 x i1> %25, %24
  %27 = sext <8 x i1> %26 to <8 x i32>
  %28 = bitcast <8 x i32> %27 to <8 x float>
  %29 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %23, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %28) #8
  ret <8 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_nextafterf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = ashr <4 x i32> %13, <i32 31, i32 31, i32 31, i32 31>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %12 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 31, i32 31, i32 31, i32 31>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #8
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %21, %23
  %25 = xor <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = sub <4 x i32> zeroinitializer, %25
  %27 = xor <4 x i32> %16, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast <2 x i64> %11 to <16 x i8>
  %32 = bitcast <4 x i32> %26 to <16 x i8>
  %33 = bitcast <2 x i64> %29 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <2 x i64> %12 to <16 x i8>
  %36 = bitcast <4 x i32> %28 to <16 x i8>
  %37 = bitcast <2 x i64> %30 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = fcmp une <8 x float> %9, %1
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = bitcast <16 x i8> %34 to <4 x i32>
  %43 = add <4 x i32> %42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %44 = bitcast <16 x i8> %38 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <4 x i32> %43 to <16 x i8>
  %49 = bitcast <2 x i64> %46 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <4 x i32> %45 to <16 x i8>
  %52 = bitcast <2 x i64> %47 to <16 x i8>
  %53 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %38, <16 x i8> %51, <16 x i8> %52) #8
  %54 = bitcast <16 x i8> %50 to <4 x i32>
  %55 = xor <4 x i32> %54, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %56 = sub <4 x i32> zeroinitializer, %55
  %57 = bitcast <16 x i8> %53 to <4 x i32>
  %58 = xor <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = sub <4 x i32> zeroinitializer, %58
  %60 = bitcast <4 x i32> %56 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %50, <16 x i8> %60, <16 x i8> %33) #8
  %62 = bitcast <4 x i32> %59 to <16 x i8>
  %63 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %53, <16 x i8> %62, <16 x i8> %37) #8
  %64 = bitcast <16 x i8> %61 to <2 x i64>
  %65 = bitcast <16 x i8> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fcmp oeq <8 x float> %69, zeroinitializer
  %71 = fcmp une <8 x float> %9, zeroinitializer
  %72 = and <8 x i1> %70, %71
  %73 = sext <8 x i1> %72 to <8 x i32>
  %74 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = bitcast <8 x i32> %73 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %75, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %9, zeroinitializer
  %79 = fcmp oeq <8 x float> %1, zeroinitializer
  %80 = and <8 x i1> %78, %79
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> %1, <8 x float> %82) #8
  %84 = fcmp uno <8 x float> %9, %1
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %86) #8
  ret <8 x float> %87
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_frfrexpf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #8
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: norecurse nounwind uwtable
define void @Sleef_expfrexpf8_avx(%struct.vint2* noalias nocapture sret, <8 x float>) local_unnamed_addr #5 {
  %3 = bitcast %struct.vint2* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 32, i32 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmodf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <4 x i32>
  %19 = add <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %20 = bitcast <2 x i64> %17 to <4 x i32>
  %21 = add <4 x i32> %20, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fcmp oeq <8 x float> %14, zeroinitializer
  %29 = sext <8 x i1> %28 to <8 x i32>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> zeroinitializer, <8 x float> %30) #8
  %32 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <8 x float> %13 to <4 x i64>
  %35 = xor <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fsub <8 x float> %36, %44
  br label %46

; <label>:46:                                     ; preds = %46, %2
  %47 = phi i32 [ 0, %2 ], [ %122, %46 ]
  %48 = phi <8 x float> [ zeroinitializer, %2 ], [ %114, %46 ]
  %49 = phi <8 x float> [ %11, %2 ], [ %112, %46 ]
  %50 = bitcast <8 x float> %49 to <4 x i64>
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %52 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast <2 x i64> %51 to <4 x i32>
  %54 = add <4 x i32> %53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = bitcast <2 x i64> %52 to <4 x i32>
  %56 = add <4 x i32> %55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = bitcast <4 x i32> %54 to <2 x i64>
  %58 = bitcast <4 x i32> %56 to <2 x i64>
  %59 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> %60, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = fcmp oeq <8 x float> %49, zeroinitializer
  %64 = sext <8 x i1> %63 to <8 x i32>
  %65 = bitcast <8 x i32> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> zeroinitializer, <8 x float> %65) #8
  %67 = fmul <8 x float> %31, %66
  %68 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %67, i32 11) #8
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %32, <8 x float> %49, i8 30) #8
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %49, <8 x float> %13, i8 29) #8
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = and <4 x i64> %72, %70
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %33, <8 x float> %49, i8 30) #8
  %77 = bitcast <8 x float> %76 to <4 x i64>
  %78 = and <4 x i64> %77, %72
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #8
  %81 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %80, i32 11) #8
  %82 = bitcast <8 x float> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = and <2 x i64> %84, <i64 -17587891081216, i64 -17587891081216>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fsub <8 x float> %81, %90
  %92 = fmul <8 x float> %81, %36
  %93 = bitcast <8 x float> %92 to <4 x i64>
  %94 = xor <4 x i64> %93, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = fmul <8 x float> %44, %90
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %91, %44
  %99 = fadd <8 x float> %98, %97
  %100 = fmul <8 x float> %45, %90
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %45, %91
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %49, %92
  %105 = fsub <8 x float> %104, %49
  %106 = fsub <8 x float> %104, %105
  %107 = fsub <8 x float> %49, %106
  %108 = fsub <8 x float> %92, %105
  %109 = fadd <8 x float> %108, %107
  %110 = fadd <8 x float> %48, %103
  %111 = fadd <8 x float> %109, %110
  %112 = fadd <8 x float> %104, %111
  %113 = fsub <8 x float> %104, %112
  %114 = fadd <8 x float> %111, %113
  %115 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %112, <8 x float> %13, i8 17) #8
  %116 = bitcast <8 x float> %115 to <4 x i64>
  %117 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %118 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %119 = and <2 x i64> %118, %117
  %120 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %119, <2 x i64> <i64 -1, i64 -1>) #8
  %121 = icmp eq i32 %120, 0
  %122 = add nuw nsw i32 %47, 1
  %123 = icmp ult i32 %122, 8
  %124 = and i1 %121, %123
  br i1 %124, label %46, label %125

; <label>:125:                                    ; preds = %46
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %127 = fadd <8 x float> %112, %114
  %128 = fmul <8 x float> %126, %127
  %129 = fcmp oeq <8 x float> %127, %13
  %130 = sext <8 x i1> %129 to <8 x i32>
  %131 = bitcast <8 x i32> %130 to <8 x float>
  %132 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %128, <8 x float> zeroinitializer, <8 x float> %131) #8
  %133 = bitcast <8 x float> %132 to <4 x i64>
  %134 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %133
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #8
  %138 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %136, <8 x float> %0, <8 x float> %137) #8
  %139 = fcmp oeq <8 x float> %13, zeroinitializer
  %140 = sext <8 x i1> %139 to <8 x i32>
  %141 = bitcast <8 x i32> %140 to <8 x float>
  %142 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %138, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %141) #8
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_remainderf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = and <2 x i64> %22, <i64 -17587891081216, i64 -17587891081216>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fsub <8 x float> %20, %28
  br label %30

; <label>:30:                                     ; preds = %2, %60
  %31 = phi i32 [ 0, %2 ], [ %129, %60 ]
  %32 = phi <4 x i64> [ zeroinitializer, %2 ], [ %96, %60 ]
  %33 = phi <8 x float> [ zeroinitializer, %2 ], [ %128, %60 ]
  %34 = phi <8 x float> [ %11, %2 ], [ %126, %60 ]
  %35 = fmul <8 x float> %15, %34
  %36 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %35, i32 8) #8
  %37 = bitcast <8 x float> %34 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %39, <8 x float> %16, i8 17) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %39, <8 x float> %17, i8 17) #8
  %43 = bitcast <8 x float> %42 to <4 x i64>
  %44 = fcmp oeq <8 x float> %17, %39
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <4 x i64>
  %47 = xor <4 x i64> %32, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %46, %47
  %49 = or <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> zeroinitializer, <8 x float> %50) #8
  %52 = fcmp oeq <8 x float> %51, zeroinitializer
  %53 = sext <8 x i1> %52 to <8 x i32>
  %54 = bitcast <8 x i32> %53 to <4 x i64>
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %56 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %57 = and <2 x i64> %56, %55
  %58 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %57, <2 x i64> <i64 -1, i64 -1>) #8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %131

; <label>:60:                                     ; preds = %30
  %61 = fmul <8 x float> %51, %20
  %62 = bitcast <8 x float> %61 to <4 x i64>
  %63 = and <4 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fcmp oeq <8 x float> %64, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = and <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = xor <4 x i64> %67, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fadd <8 x float> %51, %69
  %71 = bitcast <8 x i32> %66 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> %70, <8 x float> %71) #8
  %73 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %72) #8
  %74 = bitcast <8 x i32> %73 to <4 x i64>
  %75 = shufflevector <4 x i64> %74, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x i64> %74, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %77 = bitcast <2 x i64> %75 to <4 x i32>
  %78 = and <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %79 = icmp ne <4 x i32> %78, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %76 to <4 x i32>
  %83 = and <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = icmp ne <4 x i32> %83, zeroinitializer
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <8 x float> %72 to <4 x i64>
  %91 = and <4 x i64> %90, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %92, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %94 = bitcast <8 x float> %93 to <4 x i64>
  %95 = and <4 x i64> %89, %94
  %96 = xor <4 x i64> %95, %32
  %97 = shufflevector <4 x i64> %90, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %98 = shufflevector <4 x i64> %90, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %99 = and <2 x i64> %97, <i64 -17587891081216, i64 -17587891081216>
  %100 = and <2 x i64> %98, <i64 -17587891081216, i64 -17587891081216>
  %101 = shufflevector <2 x i64> %99, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <4 x i64> %101, <4 x i64> %102, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %104 = bitcast <4 x i64> %103 to <8 x float>
  %105 = fsub <8 x float> %72, %104
  %106 = fmul <8 x float> %72, %20
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = xor <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = fmul <8 x float> %28, %104
  %111 = fadd <8 x float> %110, %109
  %112 = fmul <8 x float> %105, %28
  %113 = fadd <8 x float> %112, %111
  %114 = fmul <8 x float> %29, %104
  %115 = fadd <8 x float> %114, %113
  %116 = fmul <8 x float> %29, %105
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %34, %106
  %119 = fsub <8 x float> %118, %34
  %120 = fsub <8 x float> %118, %119
  %121 = fsub <8 x float> %34, %120
  %122 = fsub <8 x float> %106, %119
  %123 = fadd <8 x float> %122, %121
  %124 = fadd <8 x float> %33, %117
  %125 = fadd <8 x float> %123, %124
  %126 = fadd <8 x float> %118, %125
  %127 = fsub <8 x float> %118, %126
  %128 = fadd <8 x float> %125, %127
  %129 = add nuw nsw i32 %31, 1
  %130 = icmp ult i32 %129, 8
  br i1 %130, label %30, label %131

; <label>:131:                                    ; preds = %30, %60
  %132 = phi <8 x float> [ %34, %30 ], [ %126, %60 ]
  %133 = phi <8 x float> [ %33, %30 ], [ %128, %60 ]
  %134 = fadd <8 x float> %132, %133
  %135 = fmul <8 x float> %14, %134
  %136 = bitcast <8 x float> %135 to <4 x i64>
  %137 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = xor <4 x i64> %137, %136
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = sext <8 x i1> %140 to <8 x i32>
  %142 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <8 x float>
  %145 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %144) #8
  %146 = bitcast <8 x i32> %141 to <8 x float>
  %147 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %139, <8 x float> %145, <8 x float> %146) #8
  %148 = fcmp oeq <8 x float> %13, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %147, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %150) #8
  ret <8 x float> %151
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinpif8_u05avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp ne <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp ne <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = bitcast <8 x float> %35 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %35, %45
  %47 = bitcast <8 x float> %36 to <4 x i64>
  %48 = xor <4 x i64> %47, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = fmul <8 x float> %45, %45
  %51 = fadd <8 x float> %50, %49
  %52 = fmul <8 x float> %46, %45
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %52, %53
  %55 = fmul <8 x float> %46, %46
  %56 = fadd <8 x float> %55, %54
  %57 = bitcast <4 x i64> %29 to <8 x float>
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %57) #8
  %60 = fmul <8 x float> %58, %36
  %61 = fadd <8 x float> %59, %60
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %57) #8
  %63 = fmul <8 x float> %36, %61
  %64 = fadd <8 x float> %62, %63
  %65 = fmul <8 x float> %36, %64
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %57) #8
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %57) #8
  %68 = fadd <8 x float> %66, %65
  %69 = fsub <8 x float> %68, %65
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %65, %70
  %72 = fsub <8 x float> %66, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %67, %73
  %75 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %77 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = fsub <8 x float> %36, %82
  %84 = bitcast <8 x float> %68 to <4 x i64>
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %87 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %88 = and <2 x i64> %86, <i64 -17587891081216, i64 -17587891081216>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fsub <8 x float> %68, %92
  %94 = fmul <8 x float> %36, %68
  %95 = bitcast <8 x float> %94 to <4 x i64>
  %96 = xor <4 x i64> %95, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fmul <8 x float> %82, %92
  %99 = fadd <8 x float> %98, %97
  %100 = fmul <8 x float> %83, %92
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %93, %82
  %103 = fadd <8 x float> %102, %101
  %104 = fmul <8 x float> %83, %93
  %105 = fadd <8 x float> %104, %103
  %106 = fmul <8 x float> %36, %74
  %107 = fadd <8 x float> %106, %105
  %108 = fmul <8 x float> %68, %56
  %109 = fadd <8 x float> %108, %107
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %57) #8
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %57) #8
  %112 = fadd <8 x float> %110, %94
  %113 = fsub <8 x float> %112, %94
  %114 = fsub <8 x float> %112, %113
  %115 = fsub <8 x float> %94, %114
  %116 = fsub <8 x float> %110, %113
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %111, %109
  %119 = fadd <8 x float> %117, %118
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %57) #8
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %56, <8 x float> %57) #8
  %122 = bitcast <8 x float> %112 to <4 x i64>
  %123 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %124 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %125 = and <2 x i64> %123, <i64 -17587891081216, i64 -17587891081216>
  %126 = and <2 x i64> %124, <i64 -17587891081216, i64 -17587891081216>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fsub <8 x float> %112, %130
  %132 = bitcast <8 x float> %120 to <4 x i64>
  %133 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = and <2 x i64> %134, <i64 -17587891081216, i64 -17587891081216>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <2 x i64> %136, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = shufflevector <4 x i64> %137, <4 x i64> %138, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fsub <8 x float> %120, %140
  %142 = fmul <8 x float> %120, %112
  %143 = bitcast <8 x float> %142 to <4 x i64>
  %144 = xor <4 x i64> %143, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %145 = bitcast <4 x i64> %144 to <8 x float>
  %146 = fmul <8 x float> %140, %130
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %131, %140
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %141, %130
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %141, %131
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %121, %112
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %120, %119
  %157 = fadd <8 x float> %155, %156
  %158 = fadd <8 x float> %142, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %159 = fsub <8 x float> %158, %142
  %160 = fsub <8 x float> %158, %159
  %161 = fsub <8 x float> %142, %160
  %162 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %159
  %163 = fadd <8 x float> %162, %161
  %164 = fadd <8 x float> %163, %157
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %142, <8 x float> %158, <8 x float> %57) #8
  %166 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %157, <8 x float> %164, <8 x float> %57) #8
  %167 = and <4 x i32> %12, <i32 4, i32 4, i32 4, i32 4>
  %168 = icmp ne <4 x i32> %167, zeroinitializer
  %169 = sext <4 x i1> %168 to <4 x i32>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = and <4 x i32> %14, <i32 4, i32 4, i32 4, i32 4>
  %172 = icmp ne <4 x i32> %171, zeroinitializer
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <2 x i64> %170, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %177 = shufflevector <4 x i64> %175, <4 x i64> %176, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %178 = and <4 x i64> %177, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %179 = bitcast <8 x float> %165 to <4 x i64>
  %180 = xor <4 x i64> %178, %179
  %181 = bitcast <8 x float> %166 to <4 x i64>
  %182 = xor <4 x i64> %178, %181
  %183 = bitcast <4 x i64> %180 to <8 x float>
  %184 = bitcast <4 x i64> %182 to <8 x float>
  %185 = fadd <8 x float> %183, %184
  %186 = bitcast <8 x float> %0 to <4 x i64>
  %187 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %189 = bitcast <2 x i64> %187 to <4 x i32>
  %190 = icmp eq <4 x i32> %189, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %191 = sext <4 x i1> %190 to <4 x i32>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = bitcast <2 x i64> %188 to <4 x i32>
  %194 = icmp eq <4 x i32> %193, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %195 = sext <4 x i1> %194 to <4 x i32>
  %196 = bitcast <4 x i32> %195 to <2 x i64>
  %197 = shufflevector <2 x i64> %192, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %198 = shufflevector <2 x i64> %196, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %199 = shufflevector <4 x i64> %197, <4 x i64> %198, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %200 = bitcast <4 x i64> %199 to <8 x float>
  %201 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %185, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %200) #8
  %202 = and <4 x i64> %186, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %203 = bitcast <4 x i64> %202 to <8 x float>
  %204 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %203, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %205 = bitcast <8 x float> %204 to <4 x i64>
  %206 = bitcast <8 x float> %201 to <4 x i64>
  %207 = xor <4 x i64> %205, <i64 -1, i64 -1, i64 -1, i64 -1>
  %208 = and <4 x i64> %207, %206
  %209 = fcmp oeq <8 x float> %203, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %210 = sext <8 x i1> %209 to <8 x i32>
  %211 = bitcast <8 x i32> %210 to <4 x i64>
  %212 = or <4 x i64> %208, %211
  %213 = bitcast <4 x i64> %212 to <8 x float>
  ret <8 x float> %213
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cospif8_u05avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = bitcast <2 x i64> %5 to <4 x i32>
  %8 = lshr <4 x i32> %7, <i32 31, i32 31, i32 31, i32 31>
  %9 = bitcast <2 x i64> %6 to <4 x i32>
  %10 = lshr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = xor <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %12 = add <4 x i32> %11, %7
  %13 = xor <4 x i32> %10, <i32 1, i32 1, i32 1, i32 1>
  %14 = add <4 x i32> %13, %9
  %15 = bitcast <4 x i32> %12 to <2 x i64>
  %16 = bitcast <4 x i32> %14 to <2 x i64>
  %17 = and <2 x i64> %15, <i64 -4294967298, i64 -4294967298>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %20 = icmp eq <4 x i32> %19, zeroinitializer
  %21 = sext <4 x i1> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = and <4 x i32> %14, <i32 2, i32 2, i32 2, i32 2>
  %24 = icmp eq <4 x i32> %23, zeroinitializer
  %25 = sext <4 x i1> %24 to <4 x i32>
  %26 = bitcast <4 x i32> %25 to <2 x i64>
  %27 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = shufflevector <2 x i64> %26, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %29 = shufflevector <4 x i64> %27, <4 x i64> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %30 = shufflevector <2 x i64> %17, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x i32>
  %34 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %33) #8
  %35 = fsub <8 x float> %2, %34
  %36 = fmul <8 x float> %35, %35
  %37 = bitcast <8 x float> %35 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %35, %45
  %47 = bitcast <8 x float> %36 to <4 x i64>
  %48 = xor <4 x i64> %47, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = fmul <8 x float> %45, %45
  %51 = fadd <8 x float> %50, %49
  %52 = fmul <8 x float> %46, %45
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %52, %53
  %55 = fmul <8 x float> %46, %46
  %56 = fadd <8 x float> %55, %54
  %57 = bitcast <4 x i64> %29 to <8 x float>
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %57) #8
  %59 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %57) #8
  %60 = fmul <8 x float> %58, %36
  %61 = fadd <8 x float> %59, %60
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %57) #8
  %63 = fmul <8 x float> %36, %61
  %64 = fadd <8 x float> %62, %63
  %65 = fmul <8 x float> %36, %64
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %57) #8
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %57) #8
  %68 = fadd <8 x float> %66, %65
  %69 = fsub <8 x float> %68, %65
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %65, %70
  %72 = fsub <8 x float> %66, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %67, %73
  %75 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %77 = and <2 x i64> %75, <i64 -17587891081216, i64 -17587891081216>
  %78 = and <2 x i64> %76, <i64 -17587891081216, i64 -17587891081216>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %81 = shufflevector <4 x i64> %79, <4 x i64> %80, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = fsub <8 x float> %36, %82
  %84 = bitcast <8 x float> %68 to <4 x i64>
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %86 = shufflevector <4 x i64> %84, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %87 = and <2 x i64> %85, <i64 -17587891081216, i64 -17587891081216>
  %88 = and <2 x i64> %86, <i64 -17587891081216, i64 -17587891081216>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fsub <8 x float> %68, %92
  %94 = fmul <8 x float> %36, %68
  %95 = bitcast <8 x float> %94 to <4 x i64>
  %96 = xor <4 x i64> %95, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fmul <8 x float> %82, %92
  %99 = fadd <8 x float> %98, %97
  %100 = fmul <8 x float> %83, %92
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %93, %82
  %103 = fadd <8 x float> %102, %101
  %104 = fmul <8 x float> %83, %93
  %105 = fadd <8 x float> %104, %103
  %106 = fmul <8 x float> %36, %74
  %107 = fadd <8 x float> %106, %105
  %108 = fmul <8 x float> %68, %56
  %109 = fadd <8 x float> %108, %107
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %57) #8
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %57) #8
  %112 = fadd <8 x float> %110, %94
  %113 = fsub <8 x float> %112, %94
  %114 = fsub <8 x float> %112, %113
  %115 = fsub <8 x float> %94, %114
  %116 = fsub <8 x float> %110, %113
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %111, %109
  %119 = fadd <8 x float> %117, %118
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %36, <8 x float> %57) #8
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %56, <8 x float> %57) #8
  %122 = bitcast <8 x float> %112 to <4 x i64>
  %123 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %124 = shufflevector <4 x i64> %122, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %125 = and <2 x i64> %123, <i64 -17587891081216, i64 -17587891081216>
  %126 = and <2 x i64> %124, <i64 -17587891081216, i64 -17587891081216>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fsub <8 x float> %112, %130
  %132 = bitcast <8 x float> %120 to <4 x i64>
  %133 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = shufflevector <4 x i64> %132, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %135 = and <2 x i64> %133, <i64 -17587891081216, i64 -17587891081216>
  %136 = and <2 x i64> %134, <i64 -17587891081216, i64 -17587891081216>
  %137 = shufflevector <2 x i64> %135, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %138 = shufflevector <2 x i64> %136, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = shufflevector <4 x i64> %137, <4 x i64> %138, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fsub <8 x float> %120, %140
  %142 = fmul <8 x float> %120, %112
  %143 = bitcast <8 x float> %142 to <4 x i64>
  %144 = xor <4 x i64> %143, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %145 = bitcast <4 x i64> %144 to <8 x float>
  %146 = fmul <8 x float> %140, %130
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %131, %140
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %141, %130
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %141, %131
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %121, %112
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %120, %119
  %157 = fadd <8 x float> %155, %156
  %158 = fadd <8 x float> %142, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %159 = fsub <8 x float> %158, %142
  %160 = fsub <8 x float> %158, %159
  %161 = fsub <8 x float> %142, %160
  %162 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %159
  %163 = fadd <8 x float> %162, %161
  %164 = fadd <8 x float> %163, %157
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %142, <8 x float> %158, <8 x float> %57) #8
  %166 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %157, <8 x float> %164, <8 x float> %57) #8
  %167 = bitcast <2 x i64> %17 to <4 x i32>
  %168 = add <4 x i32> %167, <i32 2, i32 2, i32 2, i32 2>
  %169 = bitcast <2 x i64> %18 to <4 x i32>
  %170 = add <4 x i32> %169, <i32 2, i32 2, i32 2, i32 2>
  %171 = and <4 x i32> %168, <i32 4, i32 4, i32 4, i32 4>
  %172 = icmp ne <4 x i32> %171, zeroinitializer
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = and <4 x i32> %170, <i32 4, i32 4, i32 4, i32 4>
  %176 = icmp ne <4 x i32> %175, zeroinitializer
  %177 = sext <4 x i1> %176 to <4 x i32>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = and <4 x i64> %181, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %183 = bitcast <8 x float> %165 to <4 x i64>
  %184 = xor <4 x i64> %182, %183
  %185 = bitcast <8 x float> %166 to <4 x i64>
  %186 = xor <4 x i64> %182, %185
  %187 = bitcast <4 x i64> %184 to <8 x float>
  %188 = bitcast <4 x i64> %186 to <8 x float>
  %189 = fadd <8 x float> %187, %188
  %190 = bitcast <8 x float> %0 to <4 x i64>
  %191 = and <4 x i64> %190, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %192 = bitcast <4 x i64> %191 to <8 x float>
  %193 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %192, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #8
  %194 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %189, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %193) #8
  %195 = fcmp oeq <8 x float> %192, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %196 = sext <8 x i1> %195 to <8 x i32>
  %197 = bitcast <8 x i32> %196 to <4 x i64>
  %198 = bitcast <8 x float> %194 to <4 x i64>
  %199 = or <4 x i64> %198, %197
  %200 = bitcast <4 x i64> %199 to <8 x float>
  ret <8 x float> %200
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_tgammaf8_u10avx(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <8 x float>, <8 x float>* %6, align 32
  %8 = fadd <8 x float> %5, %7
  %9 = fmul <8 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %9) #8
  %11 = bitcast <8 x i32> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #8
  %15 = fmul <8 x float> %14, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %16 = fadd <8 x float> %5, %15
  %17 = fsub <8 x float> %16, %5
  %18 = fsub <8 x float> %16, %17
  %19 = fsub <8 x float> %5, %18
  %20 = fsub <8 x float> %15, %17
  %21 = fadd <8 x float> %20, %19
  %22 = fadd <8 x float> %7, %21
  %23 = fmul <8 x float> %14, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %24 = fadd <8 x float> %23, %16
  %25 = fsub <8 x float> %24, %16
  %26 = fsub <8 x float> %24, %25
  %27 = fsub <8 x float> %16, %26
  %28 = fsub <8 x float> %23, %25
  %29 = fadd <8 x float> %28, %27
  %30 = fadd <8 x float> %29, %22
  %31 = fmul <8 x float> %24, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %32 = fadd <8 x float> %31, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %33 = fmul <8 x float> %24, %32
  %34 = fadd <8 x float> %33, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %35 = fmul <8 x float> %24, %34
  %36 = fadd <8 x float> %35, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %37 = bitcast <8 x float> %24 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %24, %45
  %47 = bitcast <8 x float> %36 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %50 = and <2 x i64> %48, <i64 -17587891081216, i64 -17587891081216>
  %51 = and <2 x i64> %49, <i64 -17587891081216, i64 -17587891081216>
  %52 = shufflevector <2 x i64> %50, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <4 x i64> %52, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fsub <8 x float> %36, %55
  %57 = fmul <8 x float> %24, %36
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = xor <4 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fmul <8 x float> %45, %55
  %62 = fadd <8 x float> %61, %60
  %63 = fmul <8 x float> %46, %55
  %64 = fadd <8 x float> %63, %62
  %65 = fmul <8 x float> %56, %45
  %66 = fadd <8 x float> %65, %64
  %67 = fmul <8 x float> %46, %56
  %68 = fadd <8 x float> %67, %66
  %69 = fmul <8 x float> %30, %36
  %70 = fadd <8 x float> %69, %68
  %71 = fadd <8 x float> %57, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %72 = fsub <8 x float> %71, %57
  %73 = fsub <8 x float> %71, %72
  %74 = fsub <8 x float> %57, %73
  %75 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %72
  %76 = fadd <8 x float> %75, %74
  %77 = fadd <8 x float> %76, %70
  %78 = bitcast <8 x float> %71 to <4 x i64>
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %80 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %81 = and <2 x i64> %79, <i64 -17587891081216, i64 -17587891081216>
  %82 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <4 x i64> %83, <4 x i64> %84, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %86 = bitcast <4 x i64> %85 to <8 x float>
  %87 = fsub <8 x float> %71, %86
  %88 = fmul <8 x float> %24, %71
  %89 = bitcast <8 x float> %88 to <4 x i64>
  %90 = xor <4 x i64> %89, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %91 = bitcast <4 x i64> %90 to <8 x float>
  %92 = fmul <8 x float> %45, %86
  %93 = fadd <8 x float> %92, %91
  %94 = fmul <8 x float> %46, %86
  %95 = fadd <8 x float> %94, %93
  %96 = fmul <8 x float> %87, %45
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %46, %87
  %99 = fadd <8 x float> %98, %97
  %100 = fmul <8 x float> %24, %77
  %101 = fadd <8 x float> %99, %100
  %102 = fmul <8 x float> %30, %71
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %88, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %105 = fsub <8 x float> %104, %88
  %106 = fsub <8 x float> %104, %105
  %107 = fsub <8 x float> %88, %106
  %108 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %105
  %109 = fadd <8 x float> %108, %107
  %110 = fadd <8 x float> %109, %103
  %111 = fmul <8 x float> %24, %24
  %112 = bitcast <8 x float> %111 to <4 x i64>
  %113 = xor <4 x i64> %112, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fmul <8 x float> %45, %45
  %116 = fadd <8 x float> %115, %114
  %117 = fadd <8 x float> %45, %45
  %118 = fmul <8 x float> %117, %46
  %119 = fadd <8 x float> %118, %116
  %120 = fmul <8 x float> %46, %46
  %121 = fadd <8 x float> %120, %119
  %122 = fadd <8 x float> %30, %30
  %123 = fmul <8 x float> %24, %122
  %124 = fadd <8 x float> %123, %121
  %125 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %126 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %127 = and <2 x i64> %125, <i64 -17587891081216, i64 -17587891081216>
  %128 = and <2 x i64> %126, <i64 -17587891081216, i64 -17587891081216>
  %129 = shufflevector <2 x i64> %127, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = shufflevector <2 x i64> %128, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %131 = shufflevector <4 x i64> %129, <4 x i64> %130, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %132 = bitcast <4 x i64> %131 to <8 x float>
  %133 = fsub <8 x float> %111, %132
  %134 = bitcast <8 x float> %104 to <4 x i64>
  %135 = shufflevector <4 x i64> %134, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %136 = shufflevector <4 x i64> %134, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %137 = and <2 x i64> %135, <i64 -17587891081216, i64 -17587891081216>
  %138 = and <2 x i64> %136, <i64 -17587891081216, i64 -17587891081216>
  %139 = shufflevector <2 x i64> %137, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %140 = shufflevector <2 x i64> %138, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %141 = shufflevector <4 x i64> %139, <4 x i64> %140, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %142 = bitcast <4 x i64> %141 to <8 x float>
  %143 = fsub <8 x float> %104, %142
  %144 = fmul <8 x float> %111, %104
  %145 = bitcast <8 x float> %144 to <4 x i64>
  %146 = xor <4 x i64> %145, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = bitcast <4 x i64> %146 to <8 x float>
  %148 = fmul <8 x float> %132, %142
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %133, %142
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %143, %132
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %133, %143
  %155 = fadd <8 x float> %154, %153
  %156 = fmul <8 x float> %111, %110
  %157 = fadd <8 x float> %155, %156
  %158 = fmul <8 x float> %104, %124
  %159 = fadd <8 x float> %158, %157
  %160 = fadd <8 x float> %24, %144
  %161 = fsub <8 x float> %160, %24
  %162 = fsub <8 x float> %160, %161
  %163 = fsub <8 x float> %24, %162
  %164 = fsub <8 x float> %144, %161
  %165 = fadd <8 x float> %164, %163
  %166 = fadd <8 x float> %30, %159
  %167 = fadd <8 x float> %165, %166
  %168 = fadd <8 x float> %160, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %169 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %168
  %170 = fadd <8 x float> %160, %169
  %171 = fadd <8 x float> %170, %167
  %172 = bitcast <2 x i64> %12 to <4 x i32>
  %173 = ashr <4 x i32> %172, <i32 1, i32 1, i32 1, i32 1>
  %174 = bitcast <2 x i64> %13 to <4 x i32>
  %175 = ashr <4 x i32> %174, <i32 1, i32 1, i32 1, i32 1>
  %176 = shl <4 x i32> %173, <i32 23, i32 23, i32 23, i32 23>
  %177 = add <4 x i32> %176, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %178 = shl <4 x i32> %175, <i32 23, i32 23, i32 23, i32 23>
  %179 = add <4 x i32> %178, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %180 = bitcast <4 x i32> %177 to <2 x i64>
  %181 = bitcast <4 x i32> %179 to <2 x i64>
  %182 = shufflevector <2 x i64> %180, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %183 = shufflevector <2 x i64> %181, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %184 = shufflevector <4 x i64> %182, <4 x i64> %183, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %185 = bitcast <4 x i64> %184 to <8 x float>
  %186 = fmul <8 x float> %168, %185
  %187 = sub <4 x i32> %172, %173
  %188 = sub <4 x i32> %174, %175
  %189 = shl <4 x i32> %187, <i32 23, i32 23, i32 23, i32 23>
  %190 = add <4 x i32> %189, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %191 = shl <4 x i32> %188, <i32 23, i32 23, i32 23, i32 23>
  %192 = add <4 x i32> %191, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %193 = bitcast <4 x i32> %190 to <2 x i64>
  %194 = bitcast <4 x i32> %192 to <2 x i64>
  %195 = shufflevector <2 x i64> %193, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %196 = shufflevector <2 x i64> %194, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %197 = shufflevector <4 x i64> %195, <4 x i64> %196, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %198 = bitcast <4 x i64> %197 to <8 x float>
  %199 = fmul <8 x float> %186, %198
  %200 = fmul <8 x float> %171, %185
  %201 = fmul <8 x float> %200, %198
  %202 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %203 = bitcast <8 x float> %202 to <4 x i64>
  %204 = bitcast <8 x float> %199 to <4 x i64>
  %205 = xor <4 x i64> %203, <i64 -1, i64 -1, i64 -1, i64 -1>
  %206 = and <4 x i64> %204, %205
  %207 = bitcast <8 x float> %201 to <4 x i64>
  %208 = and <4 x i64> %207, %205
  %209 = bitcast <4 x i64> %206 to <8 x float>
  %210 = bitcast <4 x i64> %208 to <8 x float>
  %211 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %212 = load <8 x float>, <8 x float>* %211, align 32
  %213 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %214 = load <8 x float>, <8 x float>* %213, align 32
  %215 = shufflevector <4 x i64> %206, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %216 = shufflevector <4 x i64> %206, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %217 = and <2 x i64> %215, <i64 -17587891081216, i64 -17587891081216>
  %218 = and <2 x i64> %216, <i64 -17587891081216, i64 -17587891081216>
  %219 = shufflevector <2 x i64> %217, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %220 = shufflevector <2 x i64> %218, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %221 = shufflevector <4 x i64> %219, <4 x i64> %220, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %222 = bitcast <4 x i64> %221 to <8 x float>
  %223 = fsub <8 x float> %209, %222
  %224 = bitcast <8 x float> %212 to <4 x i64>
  %225 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %226 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %227 = and <2 x i64> %225, <i64 -17587891081216, i64 -17587891081216>
  %228 = and <2 x i64> %226, <i64 -17587891081216, i64 -17587891081216>
  %229 = shufflevector <2 x i64> %227, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = shufflevector <2 x i64> %228, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %231 = shufflevector <4 x i64> %229, <4 x i64> %230, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %232 = bitcast <4 x i64> %231 to <8 x float>
  %233 = fsub <8 x float> %212, %232
  %234 = fmul <8 x float> %212, %209
  %235 = bitcast <8 x float> %234 to <4 x i64>
  %236 = xor <4 x i64> %235, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %237 = bitcast <4 x i64> %236 to <8 x float>
  %238 = fmul <8 x float> %232, %222
  %239 = fadd <8 x float> %238, %237
  %240 = fmul <8 x float> %223, %232
  %241 = fadd <8 x float> %240, %239
  %242 = fmul <8 x float> %233, %222
  %243 = fadd <8 x float> %242, %241
  %244 = fmul <8 x float> %233, %223
  %245 = fadd <8 x float> %244, %243
  %246 = fmul <8 x float> %214, %209
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %212, %210
  %249 = fadd <8 x float> %247, %248
  %250 = fadd <8 x float> %234, %249
  %251 = fcmp oeq <8 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %252 = sext <8 x i1> %251 to <8 x i32>
  %253 = bitcast <8 x i32> %252 to <4 x i64>
  %254 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %255 = bitcast <8 x float> %254 to <4 x i64>
  %256 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %257 = fcmp oeq <8 x float> %256, %0
  %258 = sext <8 x i1> %257 to <8 x i32>
  %259 = bitcast <8 x i32> %258 to <4 x i64>
  %260 = and <4 x i64> %259, %255
  %261 = or <4 x i64> %260, %253
  %262 = bitcast <8 x float> %0 to <4 x i64>
  %263 = and <4 x i64> %262, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %264 = bitcast <4 x i64> %263 to <8 x float>
  %265 = fcmp oeq <8 x float> %264, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %266 = fcmp uno <8 x float> %0, zeroinitializer
  %267 = or <8 x i1> %265, %266
  %268 = sext <8 x i1> %267 to <8 x i32>
  %269 = bitcast <8 x i32> %268 to <4 x i64>
  %270 = xor <4 x i64> %269, <i64 -1, i64 -1, i64 -1, i64 -1>
  %271 = and <4 x i64> %255, %270
  %272 = fcmp uno <8 x float> %250, zeroinitializer
  %273 = sext <8 x i1> %272 to <8 x i32>
  %274 = bitcast <8 x i32> %273 to <4 x i64>
  %275 = and <4 x i64> %271, %274
  %276 = or <4 x i64> %261, %275
  %277 = bitcast <4 x i64> %276 to <8 x float>
  %278 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %250, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %277) #8
  %279 = fcmp oeq <8 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %280 = sext <8 x i1> %279 to <8 x i32>
  %281 = bitcast <8 x i32> %280 to <4 x i64>
  %282 = or <4 x i64> %270, %281
  %283 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i8 29) #8
  %284 = bitcast <8 x float> %283 to <4 x i64>
  %285 = and <4 x i64> %282, %284
  %286 = fcmp oeq <8 x float> %0, zeroinitializer
  %287 = sext <8 x i1> %286 to <8 x i32>
  %288 = bitcast <8 x i32> %287 to <4 x i64>
  %289 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i8 30) #8
  %290 = bitcast <8 x float> %289 to <4 x i64>
  %291 = or <4 x i64> %290, %288
  %292 = fcmp uno <8 x float> %278, zeroinitializer
  %293 = sext <8 x i1> %292 to <8 x i32>
  %294 = bitcast <8 x i32> %293 to <4 x i64>
  %295 = or <4 x i64> %291, %294
  %296 = and <4 x i64> %285, %295
  %297 = and <4 x i64> %262, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %298 = or <4 x i64> %297, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %299 = bitcast <4 x i64> %298 to <8 x float>
  %300 = bitcast <4 x i64> %296 to <8 x float>
  %301 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %278, <8 x float> %299, <8 x float> %300) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %301
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <8 x float>) unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = xor <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fadd <8 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12 = fadd <8 x float> %11, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = fsub <8 x float> %11, %12
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = fsub <8 x float> %10, %12
  %16 = fadd <8 x float> %15, %14
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %11, <8 x float> %7) #8
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %7) #8
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %17, <8 x float> zeroinitializer, <8 x float> %6) #8
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> zeroinitializer, <8 x float> %6) #8
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %19, i8 18) #8
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>, i8 18) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = and <4 x i64> %24, %22
  %26 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>, <8 x float> %19, i8 18) #8
  %27 = bitcast <8 x float> %26 to <4 x i64>
  %28 = fadd <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fsub <8 x float> %28, %19
  %30 = fsub <8 x float> %28, %29
  %31 = fsub <8 x float> %19, %30
  %32 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29
  %33 = fadd <8 x float> %32, %31
  %34 = fadd <8 x float> %20, %33
  %35 = bitcast <8 x float> %28 to <4 x i64>
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = fsub <8 x float> %28, %43
  %45 = bitcast <8 x float> %19 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = and <2 x i64> %46, <i64 -17587891081216, i64 -17587891081216>
  %49 = and <2 x i64> %47, <i64 -17587891081216, i64 -17587891081216>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fsub <8 x float> %19, %53
  %55 = fmul <8 x float> %19, %28
  %56 = bitcast <8 x float> %55 to <4 x i64>
  %57 = xor <4 x i64> %56, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %53, %43
  %60 = fadd <8 x float> %59, %58
  %61 = fmul <8 x float> %44, %53
  %62 = fadd <8 x float> %61, %60
  %63 = fmul <8 x float> %54, %43
  %64 = fadd <8 x float> %63, %62
  %65 = fmul <8 x float> %54, %44
  %66 = fadd <8 x float> %65, %64
  %67 = fmul <8 x float> %28, %20
  %68 = fadd <8 x float> %67, %66
  %69 = fmul <8 x float> %19, %34
  %70 = fadd <8 x float> %69, %68
  %71 = fadd <8 x float> %55, %70
  %72 = fsub <8 x float> %55, %71
  %73 = fadd <8 x float> %70, %72
  %74 = fadd <8 x float> %19, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %75 = fsub <8 x float> %74, %19
  %76 = fsub <8 x float> %74, %75
  %77 = fsub <8 x float> %19, %76
  %78 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %75
  %79 = fadd <8 x float> %78, %77
  %80 = fadd <8 x float> %20, %79
  %81 = bitcast <8 x float> %74 to <4 x i64>
  %82 = shufflevector <4 x i64> %81, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %83 = shufflevector <4 x i64> %81, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %84 = and <2 x i64> %82, <i64 -17587891081216, i64 -17587891081216>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = shufflevector <2 x i64> %84, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fsub <8 x float> %74, %89
  %91 = bitcast <8 x float> %71 to <4 x i64>
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %93 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %94 = and <2 x i64> %92, <i64 -17587891081216, i64 -17587891081216>
  %95 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fsub <8 x float> %71, %99
  %101 = fmul <8 x float> %74, %71
  %102 = bitcast <8 x float> %101 to <4 x i64>
  %103 = xor <4 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <4 x i64> %103 to <8 x float>
  %105 = fmul <8 x float> %89, %99
  %106 = fadd <8 x float> %105, %104
  %107 = fmul <8 x float> %90, %99
  %108 = fadd <8 x float> %107, %106
  %109 = fmul <8 x float> %100, %89
  %110 = fadd <8 x float> %109, %108
  %111 = fmul <8 x float> %90, %100
  %112 = fadd <8 x float> %111, %110
  %113 = fmul <8 x float> %74, %73
  %114 = fadd <8 x float> %113, %112
  %115 = fmul <8 x float> %80, %71
  %116 = fadd <8 x float> %115, %114
  %117 = fadd <8 x float> %101, %116
  %118 = fsub <8 x float> %101, %117
  %119 = fadd <8 x float> %116, %118
  %120 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>, i8 18) #8
  %121 = bitcast <8 x float> %120 to <4 x i64>
  %122 = and <4 x i64> %121, %27
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %117, <8 x float> %123) #8
  %125 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %119, <8 x float> %123) #8
  %126 = fadd <8 x float> %19, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %127 = fsub <8 x float> %126, %19
  %128 = fsub <8 x float> %126, %127
  %129 = fsub <8 x float> %19, %128
  %130 = fsub <8 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %127
  %131 = fadd <8 x float> %130, %129
  %132 = fadd <8 x float> %20, %131
  %133 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> %126, <8 x float> %123) #8
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %132, <8 x float> %123) #8
  %135 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %133
  %136 = bitcast <4 x i64> %25 to <8 x float>
  %137 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %136) #8
  %138 = fadd <8 x float> %133, %137
  %139 = fsub <8 x float> %138, %133
  %140 = fsub <8 x float> %138, %139
  %141 = fsub <8 x float> %133, %140
  %142 = fsub <8 x float> %137, %139
  %143 = fadd <8 x float> %142, %141
  %144 = fadd <8 x float> %134, %143
  %145 = fadd <8 x float> %138, %144
  %146 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %145, <8 x float> %135, <8 x float> %26) #8
  %147 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000>, <8 x float> <float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000>, <8 x float> %136) #8
  %148 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %147, <8 x float> <float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000>, <8 x float> %26) #8
  %149 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000>, <8 x float> <float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000>, <8 x float> %136) #8
  %150 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %149, <8 x float> <float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000>, <8 x float> %26) #8
  %151 = fmul <8 x float> %146, %148
  %152 = fadd <8 x float> %151, %150
  %153 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000>, <8 x float> <float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000>, <8 x float> %136) #8
  %154 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %153, <8 x float> <float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000>, <8 x float> %26) #8
  %155 = fmul <8 x float> %146, %152
  %156 = fadd <8 x float> %155, %154
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000>, <8 x float> <float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000>, <8 x float> %136) #8
  %158 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %157, <8 x float> <float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000>, <8 x float> %26) #8
  %159 = fmul <8 x float> %146, %156
  %160 = fadd <8 x float> %159, %158
  %161 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000>, <8 x float> <float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000>, <8 x float> %136) #8
  %162 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %161, <8 x float> <float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000>, <8 x float> %26) #8
  %163 = fmul <8 x float> %146, %160
  %164 = fadd <8 x float> %163, %162
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000>, <8 x float> <float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000>, <8 x float> %136) #8
  %166 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %165, <8 x float> <float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000>, <8 x float> %26) #8
  %167 = fmul <8 x float> %146, %164
  %168 = fadd <8 x float> %167, %166
  %169 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000>, <8 x float> <float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000>, <8 x float> %136) #8
  %170 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %169, <8 x float> <float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000>, <8 x float> %26) #8
  %171 = fmul <8 x float> %146, %168
  %172 = fadd <8 x float> %171, %170
  %173 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000>, <8 x float> <float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000>, <8 x float> %136) #8
  %174 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %173, <8 x float> <float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000>, <8 x float> %26) #8
  %175 = fmul <8 x float> %146, %172
  %176 = fadd <8 x float> %175, %174
  %177 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000>, <8 x float> <float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000>, <8 x float> %136) #8
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %177, <8 x float> <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>, <8 x float> %26) #8
  %179 = fmul <8 x float> %146, %176
  %180 = fadd <8 x float> %179, %178
  %181 = fadd <8 x float> %133, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %182 = fsub <8 x float> %181, %133
  %183 = fsub <8 x float> %181, %182
  %184 = fsub <8 x float> %133, %183
  %185 = fsub <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %182
  %186 = fadd <8 x float> %185, %184
  %187 = fadd <8 x float> %134, %186
  %188 = fmul <8 x float> %133, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %189 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %188, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %190 = bitcast <8 x float> %189 to <4 x i64>
  %191 = fmul <8 x float> %188, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %192 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %188, <8 x float> %191, <8 x float> %189) #8
  %193 = bitcast <8 x float> %192 to <4 x i64>
  %194 = shufflevector <4 x i64> %193, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = shufflevector <4 x i64> %193, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %196 = bitcast <2 x i64> %194 to <4 x i32>
  %197 = lshr <4 x i32> %196, <i32 23, i32 23, i32 23, i32 23>
  %198 = bitcast <2 x i64> %195 to <4 x i32>
  %199 = lshr <4 x i32> %198, <i32 23, i32 23, i32 23, i32 23>
  %200 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %201 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %202 = bitcast <2 x i64> %200 to <16 x i8>
  %203 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %202) #8
  %204 = bitcast <2 x i64> %201 to <16 x i8>
  %205 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %204) #8
  %206 = and <4 x i32> %197, <i32 255, i32 255, i32 255, i32 255>
  %207 = bitcast <16 x i8> %203 to <4 x i32>
  %208 = sub <4 x i32> %206, %207
  %209 = and <4 x i32> %199, <i32 255, i32 255, i32 255, i32 255>
  %210 = bitcast <16 x i8> %205 to <4 x i32>
  %211 = sub <4 x i32> %209, %210
  %212 = bitcast <4 x i32> %208 to <2 x i64>
  %213 = bitcast <4 x i32> %211 to <2 x i64>
  %214 = shl <4 x i32> %208, <i32 23, i32 23, i32 23, i32 23>
  %215 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %214
  %216 = shl <4 x i32> %211, <i32 23, i32 23, i32 23, i32 23>
  %217 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %216
  %218 = bitcast <4 x i32> %215 to <2 x i64>
  %219 = bitcast <4 x i32> %217 to <2 x i64>
  %220 = shufflevector <2 x i64> %218, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %221 = shufflevector <2 x i64> %219, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <4 x i64> %220, <4 x i64> %221, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %223 = bitcast <4 x i64> %222 to <8 x float>
  %224 = fmul <8 x float> %133, %223
  %225 = fmul <8 x float> %134, %223
  %226 = fadd <8 x float> %224, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %227 = fsub <8 x float> %226, %224
  %228 = fsub <8 x float> %226, %227
  %229 = fsub <8 x float> %224, %228
  %230 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %227
  %231 = fadd <8 x float> %230, %229
  %232 = fadd <8 x float> %225, %231
  %233 = fadd <8 x float> %224, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %234 = fsub <8 x float> %233, %224
  %235 = fsub <8 x float> %233, %234
  %236 = fsub <8 x float> %224, %235
  %237 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %234
  %238 = fadd <8 x float> %237, %236
  %239 = fadd <8 x float> %225, %238
  %240 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %233
  %241 = bitcast <8 x float> %233 to <4 x i64>
  %242 = shufflevector <4 x i64> %241, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %243 = shufflevector <4 x i64> %241, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %244 = and <2 x i64> %242, <i64 -17587891081216, i64 -17587891081216>
  %245 = and <2 x i64> %243, <i64 -17587891081216, i64 -17587891081216>
  %246 = shufflevector <2 x i64> %244, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %247 = shufflevector <2 x i64> %245, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %248 = shufflevector <4 x i64> %246, <4 x i64> %247, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %249 = bitcast <4 x i64> %248 to <8 x float>
  %250 = fsub <8 x float> %233, %249
  %251 = bitcast <8 x float> %240 to <4 x i64>
  %252 = shufflevector <4 x i64> %251, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %253 = shufflevector <4 x i64> %251, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %254 = and <2 x i64> %252, <i64 -17587891081216, i64 -17587891081216>
  %255 = and <2 x i64> %253, <i64 -17587891081216, i64 -17587891081216>
  %256 = shufflevector <2 x i64> %254, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %257 = shufflevector <2 x i64> %255, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %258 = shufflevector <4 x i64> %256, <4 x i64> %257, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %259 = bitcast <4 x i64> %258 to <8 x float>
  %260 = fsub <8 x float> %240, %259
  %261 = bitcast <8 x float> %226 to <4 x i64>
  %262 = shufflevector <4 x i64> %261, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %263 = shufflevector <4 x i64> %261, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %264 = and <2 x i64> %262, <i64 -17587891081216, i64 -17587891081216>
  %265 = and <2 x i64> %263, <i64 -17587891081216, i64 -17587891081216>
  %266 = shufflevector <2 x i64> %264, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %267 = shufflevector <2 x i64> %265, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %268 = shufflevector <4 x i64> %266, <4 x i64> %267, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %269 = bitcast <4 x i64> %268 to <8 x float>
  %270 = fsub <8 x float> %226, %269
  %271 = fmul <8 x float> %226, %240
  %272 = fmul <8 x float> %249, %259
  %273 = fadd <8 x float> %272, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %274 = fmul <8 x float> %260, %249
  %275 = fadd <8 x float> %274, %273
  %276 = fmul <8 x float> %250, %259
  %277 = fadd <8 x float> %276, %275
  %278 = fmul <8 x float> %250, %260
  %279 = fadd <8 x float> %278, %277
  %280 = bitcast <8 x float> %279 to <4 x i64>
  %281 = xor <4 x i64> %280, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %282 = bitcast <4 x i64> %281 to <8 x float>
  %283 = bitcast <8 x float> %271 to <4 x i64>
  %284 = xor <4 x i64> %283, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %285 = bitcast <4 x i64> %284 to <8 x float>
  %286 = fmul <8 x float> %269, %259
  %287 = fadd <8 x float> %286, %285
  %288 = fmul <8 x float> %260, %269
  %289 = fadd <8 x float> %288, %287
  %290 = fmul <8 x float> %270, %259
  %291 = fadd <8 x float> %290, %289
  %292 = fmul <8 x float> %270, %260
  %293 = fadd <8 x float> %292, %291
  %294 = fmul <8 x float> %271, %282
  %295 = fadd <8 x float> %293, %294
  %296 = fmul <8 x float> %271, %239
  %297 = fsub <8 x float> %232, %296
  %298 = fmul <8 x float> %240, %297
  %299 = fadd <8 x float> %298, %295
  %300 = shufflevector <4 x i64> %283, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %301 = shufflevector <4 x i64> %283, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %302 = and <2 x i64> %300, <i64 -17587891081216, i64 -17587891081216>
  %303 = and <2 x i64> %301, <i64 -17587891081216, i64 -17587891081216>
  %304 = shufflevector <2 x i64> %302, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %305 = shufflevector <2 x i64> %303, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %306 = shufflevector <4 x i64> %304, <4 x i64> %305, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %307 = bitcast <4 x i64> %306 to <8 x float>
  %308 = fsub <8 x float> %271, %307
  %309 = fmul <8 x float> %271, %271
  %310 = bitcast <8 x float> %309 to <4 x i64>
  %311 = xor <4 x i64> %310, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %312 = bitcast <4 x i64> %311 to <8 x float>
  %313 = fmul <8 x float> %307, %307
  %314 = fadd <8 x float> %313, %312
  %315 = fadd <8 x float> %307, %307
  %316 = fmul <8 x float> %315, %308
  %317 = fadd <8 x float> %316, %314
  %318 = fmul <8 x float> %308, %308
  %319 = fadd <8 x float> %318, %317
  %320 = fadd <8 x float> %299, %299
  %321 = fmul <8 x float> %271, %320
  %322 = fadd <8 x float> %319, %321
  %323 = fmul <8 x float> %309, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %324 = fadd <8 x float> %323, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %325 = fmul <8 x float> %309, %324
  %326 = fadd <8 x float> %325, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %327 = fmul <8 x float> %309, %326
  %328 = fadd <8 x float> %327, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %329 = shufflevector <2 x i64> %212, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %330 = shufflevector <2 x i64> %213, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %331 = shufflevector <4 x i64> %329, <4 x i64> %330, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %332 = bitcast <4 x i64> %331 to <8 x i32>
  %333 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %332) #8
  %334 = bitcast <8 x float> %333 to <4 x i64>
  %335 = shufflevector <4 x i64> %334, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %336 = shufflevector <4 x i64> %334, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %337 = and <2 x i64> %335, <i64 -17587891081216, i64 -17587891081216>
  %338 = and <2 x i64> %336, <i64 -17587891081216, i64 -17587891081216>
  %339 = shufflevector <2 x i64> %337, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %340 = shufflevector <2 x i64> %338, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %341 = shufflevector <4 x i64> %339, <4 x i64> %340, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %342 = bitcast <4 x i64> %341 to <8 x float>
  %343 = fsub <8 x float> %333, %342
  %344 = fmul <8 x float> %333, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %345 = bitcast <8 x float> %344 to <4 x i64>
  %346 = xor <4 x i64> %345, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %347 = bitcast <4 x i64> %346 to <8 x float>
  %348 = fmul <8 x float> %342, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %349 = fadd <8 x float> %348, %347
  %350 = fmul <8 x float> %342, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %351 = fadd <8 x float> %350, %349
  %352 = fmul <8 x float> %343, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %353 = fadd <8 x float> %352, %351
  %354 = fmul <8 x float> %343, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %355 = fadd <8 x float> %354, %353
  %356 = fmul <8 x float> %333, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %357 = fadd <8 x float> %356, %355
  %358 = fmul <8 x float> %271, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %359 = fmul <8 x float> %299, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %360 = fadd <8 x float> %344, %358
  %361 = fsub <8 x float> %344, %360
  %362 = fadd <8 x float> %358, %361
  %363 = fadd <8 x float> %357, %362
  %364 = fadd <8 x float> %363, %359
  %365 = shufflevector <4 x i64> %310, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %366 = shufflevector <4 x i64> %310, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %367 = and <2 x i64> %365, <i64 -17587891081216, i64 -17587891081216>
  %368 = and <2 x i64> %366, <i64 -17587891081216, i64 -17587891081216>
  %369 = shufflevector <2 x i64> %367, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %370 = shufflevector <2 x i64> %368, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %371 = shufflevector <4 x i64> %369, <4 x i64> %370, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %372 = bitcast <4 x i64> %371 to <8 x float>
  %373 = fsub <8 x float> %309, %372
  %374 = fmul <8 x float> %271, %309
  %375 = bitcast <8 x float> %374 to <4 x i64>
  %376 = xor <4 x i64> %375, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %377 = bitcast <4 x i64> %376 to <8 x float>
  %378 = fmul <8 x float> %307, %372
  %379 = fadd <8 x float> %378, %377
  %380 = fmul <8 x float> %373, %307
  %381 = fadd <8 x float> %380, %379
  %382 = fmul <8 x float> %308, %372
  %383 = fadd <8 x float> %382, %381
  %384 = fmul <8 x float> %308, %373
  %385 = fadd <8 x float> %384, %383
  %386 = fmul <8 x float> %309, %299
  %387 = fadd <8 x float> %385, %386
  %388 = fmul <8 x float> %271, %322
  %389 = fadd <8 x float> %387, %388
  %390 = shufflevector <4 x i64> %375, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %391 = shufflevector <4 x i64> %375, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %392 = and <2 x i64> %390, <i64 -17587891081216, i64 -17587891081216>
  %393 = and <2 x i64> %391, <i64 -17587891081216, i64 -17587891081216>
  %394 = shufflevector <2 x i64> %392, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %395 = shufflevector <2 x i64> %393, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %396 = shufflevector <4 x i64> %394, <4 x i64> %395, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %397 = bitcast <4 x i64> %396 to <8 x float>
  %398 = fsub <8 x float> %374, %397
  %399 = bitcast <8 x float> %328 to <4 x i64>
  %400 = shufflevector <4 x i64> %399, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %401 = shufflevector <4 x i64> %399, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %402 = and <2 x i64> %400, <i64 -17587891081216, i64 -17587891081216>
  %403 = and <2 x i64> %401, <i64 -17587891081216, i64 -17587891081216>
  %404 = shufflevector <2 x i64> %402, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %405 = shufflevector <2 x i64> %403, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %406 = shufflevector <4 x i64> %404, <4 x i64> %405, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %407 = bitcast <4 x i64> %406 to <8 x float>
  %408 = fsub <8 x float> %328, %407
  %409 = fmul <8 x float> %374, %328
  %410 = bitcast <8 x float> %409 to <4 x i64>
  %411 = xor <4 x i64> %410, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %412 = bitcast <4 x i64> %411 to <8 x float>
  %413 = fmul <8 x float> %397, %407
  %414 = fadd <8 x float> %413, %412
  %415 = fmul <8 x float> %398, %407
  %416 = fadd <8 x float> %415, %414
  %417 = fmul <8 x float> %408, %397
  %418 = fadd <8 x float> %417, %416
  %419 = fmul <8 x float> %398, %408
  %420 = fadd <8 x float> %419, %418
  %421 = fmul <8 x float> %328, %389
  %422 = fadd <8 x float> %420, %421
  %423 = fadd <8 x float> %360, %409
  %424 = fsub <8 x float> %360, %423
  %425 = fadd <8 x float> %409, %424
  %426 = fadd <8 x float> %425, %364
  %427 = fadd <8 x float> %426, %422
  %428 = bitcast <8 x float> %181 to <4 x i64>
  %429 = shufflevector <4 x i64> %428, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %430 = shufflevector <4 x i64> %428, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %431 = and <2 x i64> %429, <i64 -17587891081216, i64 -17587891081216>
  %432 = and <2 x i64> %430, <i64 -17587891081216, i64 -17587891081216>
  %433 = shufflevector <2 x i64> %431, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %434 = shufflevector <2 x i64> %432, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %435 = shufflevector <4 x i64> %433, <4 x i64> %434, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %436 = bitcast <4 x i64> %435 to <8 x float>
  %437 = fsub <8 x float> %181, %436
  %438 = bitcast <8 x float> %423 to <4 x i64>
  %439 = shufflevector <4 x i64> %438, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %440 = shufflevector <4 x i64> %438, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %441 = and <2 x i64> %439, <i64 -17587891081216, i64 -17587891081216>
  %442 = and <2 x i64> %440, <i64 -17587891081216, i64 -17587891081216>
  %443 = shufflevector <2 x i64> %441, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %444 = shufflevector <2 x i64> %442, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %445 = shufflevector <4 x i64> %443, <4 x i64> %444, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %446 = bitcast <4 x i64> %445 to <8 x float>
  %447 = fsub <8 x float> %423, %446
  %448 = fmul <8 x float> %181, %423
  %449 = bitcast <8 x float> %448 to <4 x i64>
  %450 = xor <4 x i64> %449, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %451 = bitcast <4 x i64> %450 to <8 x float>
  %452 = fmul <8 x float> %436, %446
  %453 = fadd <8 x float> %452, %451
  %454 = fmul <8 x float> %437, %446
  %455 = fadd <8 x float> %454, %453
  %456 = fmul <8 x float> %447, %436
  %457 = fadd <8 x float> %456, %455
  %458 = fmul <8 x float> %437, %447
  %459 = fadd <8 x float> %458, %457
  %460 = fmul <8 x float> %181, %427
  %461 = fadd <8 x float> %459, %460
  %462 = fmul <8 x float> %187, %423
  %463 = fadd <8 x float> %462, %461
  %464 = bitcast <8 x float> %133 to <4 x i64>
  %465 = xor <4 x i64> %464, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %466 = bitcast <8 x float> %134 to <4 x i64>
  %467 = xor <4 x i64> %466, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %468 = bitcast <4 x i64> %465 to <8 x float>
  %469 = bitcast <4 x i64> %467 to <8 x float>
  %470 = fadd <8 x float> %448, %468
  %471 = fsub <8 x float> %470, %448
  %472 = fsub <8 x float> %470, %471
  %473 = fsub <8 x float> %448, %472
  %474 = fsub <8 x float> %468, %471
  %475 = fadd <8 x float> %474, %473
  %476 = fadd <8 x float> %463, %469
  %477 = fadd <8 x float> %475, %476
  %478 = fadd <8 x float> %470, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %479 = fsub <8 x float> %478, %470
  %480 = fsub <8 x float> %478, %479
  %481 = fsub <8 x float> %470, %480
  %482 = fsub <8 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %479
  %483 = fadd <8 x float> %482, %481
  %484 = fadd <8 x float> %477, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %485 = fadd <8 x float> %483, %484
  %486 = bitcast <8 x float> %180 to <4 x i64>
  %487 = shufflevector <4 x i64> %486, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %488 = shufflevector <4 x i64> %486, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %489 = and <2 x i64> %487, <i64 -17587891081216, i64 -17587891081216>
  %490 = and <2 x i64> %488, <i64 -17587891081216, i64 -17587891081216>
  %491 = shufflevector <2 x i64> %489, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %492 = shufflevector <2 x i64> %490, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %493 = shufflevector <4 x i64> %491, <4 x i64> %492, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %494 = bitcast <4 x i64> %493 to <8 x float>
  %495 = fsub <8 x float> %180, %494
  %496 = bitcast <8 x float> %146 to <4 x i64>
  %497 = shufflevector <4 x i64> %496, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %498 = shufflevector <4 x i64> %496, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %499 = and <2 x i64> %497, <i64 -17587891081216, i64 -17587891081216>
  %500 = and <2 x i64> %498, <i64 -17587891081216, i64 -17587891081216>
  %501 = shufflevector <2 x i64> %499, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %502 = shufflevector <2 x i64> %500, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %503 = shufflevector <4 x i64> %501, <4 x i64> %502, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %504 = bitcast <4 x i64> %503 to <8 x float>
  %505 = fsub <8 x float> %146, %504
  %506 = fmul <8 x float> %146, %180
  %507 = bitcast <8 x float> %506 to <4 x i64>
  %508 = xor <4 x i64> %507, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %509 = bitcast <4 x i64> %508 to <8 x float>
  %510 = fmul <8 x float> %504, %494
  %511 = fadd <8 x float> %510, %509
  %512 = fmul <8 x float> %495, %504
  %513 = fadd <8 x float> %512, %511
  %514 = fmul <8 x float> %505, %494
  %515 = fadd <8 x float> %514, %513
  %516 = fmul <8 x float> %505, %495
  %517 = fadd <8 x float> %516, %515
  %518 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000>, <8 x float> <float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000>, <8 x float> %136) #8
  %519 = fadd <8 x float> %506, %518
  %520 = fsub <8 x float> %519, %506
  %521 = fsub <8 x float> %519, %520
  %522 = fsub <8 x float> %506, %521
  %523 = fsub <8 x float> %518, %520
  %524 = fadd <8 x float> %523, %522
  %525 = fadd <8 x float> %524, %517
  %526 = bitcast <8 x float> %519 to <4 x i64>
  %527 = shufflevector <4 x i64> %526, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %528 = shufflevector <4 x i64> %526, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %529 = and <2 x i64> %527, <i64 -17587891081216, i64 -17587891081216>
  %530 = and <2 x i64> %528, <i64 -17587891081216, i64 -17587891081216>
  %531 = shufflevector <2 x i64> %529, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %532 = shufflevector <2 x i64> %530, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %533 = shufflevector <4 x i64> %531, <4 x i64> %532, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %534 = bitcast <4 x i64> %533 to <8 x float>
  %535 = fsub <8 x float> %519, %534
  %536 = fmul <8 x float> %146, %519
  %537 = bitcast <8 x float> %536 to <4 x i64>
  %538 = xor <4 x i64> %537, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %539 = bitcast <4 x i64> %538 to <8 x float>
  %540 = fmul <8 x float> %504, %534
  %541 = fadd <8 x float> %540, %539
  %542 = fmul <8 x float> %535, %504
  %543 = fadd <8 x float> %542, %541
  %544 = fmul <8 x float> %505, %534
  %545 = fadd <8 x float> %544, %543
  %546 = fmul <8 x float> %505, %535
  %547 = fadd <8 x float> %546, %545
  %548 = fmul <8 x float> %146, %525
  %549 = fadd <8 x float> %548, %547
  %550 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000>, <8 x float> <float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000>, <8 x float> %136) #8
  %551 = fadd <8 x float> %550, %536
  %552 = fsub <8 x float> %551, %536
  %553 = fsub <8 x float> %551, %552
  %554 = fsub <8 x float> %536, %553
  %555 = fsub <8 x float> %550, %552
  %556 = fadd <8 x float> %555, %554
  %557 = fadd <8 x float> %556, %549
  %558 = bitcast <8 x float> %551 to <4 x i64>
  %559 = shufflevector <4 x i64> %558, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %560 = shufflevector <4 x i64> %558, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %561 = and <2 x i64> %559, <i64 -17587891081216, i64 -17587891081216>
  %562 = and <2 x i64> %560, <i64 -17587891081216, i64 -17587891081216>
  %563 = shufflevector <2 x i64> %561, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %564 = shufflevector <2 x i64> %562, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %565 = shufflevector <4 x i64> %563, <4 x i64> %564, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %566 = bitcast <4 x i64> %565 to <8 x float>
  %567 = fsub <8 x float> %551, %566
  %568 = fmul <8 x float> %146, %551
  %569 = bitcast <8 x float> %568 to <4 x i64>
  %570 = xor <4 x i64> %569, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %571 = bitcast <4 x i64> %570 to <8 x float>
  %572 = fmul <8 x float> %504, %566
  %573 = fadd <8 x float> %572, %571
  %574 = fmul <8 x float> %567, %504
  %575 = fadd <8 x float> %574, %573
  %576 = fmul <8 x float> %505, %566
  %577 = fadd <8 x float> %576, %575
  %578 = fmul <8 x float> %505, %567
  %579 = fadd <8 x float> %578, %577
  %580 = fmul <8 x float> %146, %557
  %581 = fadd <8 x float> %579, %580
  %582 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000>, <8 x float> <float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000>, <8 x float> %136) #8
  %583 = fadd <8 x float> %582, %568
  %584 = fsub <8 x float> %583, %568
  %585 = fsub <8 x float> %583, %584
  %586 = fsub <8 x float> %568, %585
  %587 = fsub <8 x float> %582, %584
  %588 = fadd <8 x float> %587, %586
  %589 = fadd <8 x float> %588, %581
  %590 = bitcast <8 x float> %583 to <4 x i64>
  %591 = shufflevector <4 x i64> %590, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %592 = shufflevector <4 x i64> %590, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %593 = and <2 x i64> %591, <i64 -17587891081216, i64 -17587891081216>
  %594 = and <2 x i64> %592, <i64 -17587891081216, i64 -17587891081216>
  %595 = shufflevector <2 x i64> %593, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %596 = shufflevector <2 x i64> %594, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %597 = shufflevector <4 x i64> %595, <4 x i64> %596, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %598 = bitcast <4 x i64> %597 to <8 x float>
  %599 = fsub <8 x float> %583, %598
  %600 = fmul <8 x float> %146, %583
  %601 = bitcast <8 x float> %600 to <4 x i64>
  %602 = xor <4 x i64> %601, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %603 = bitcast <4 x i64> %602 to <8 x float>
  %604 = fmul <8 x float> %504, %598
  %605 = fadd <8 x float> %604, %603
  %606 = fmul <8 x float> %599, %504
  %607 = fadd <8 x float> %606, %605
  %608 = fmul <8 x float> %505, %598
  %609 = fadd <8 x float> %608, %607
  %610 = fmul <8 x float> %505, %599
  %611 = fadd <8 x float> %610, %609
  %612 = fmul <8 x float> %146, %589
  %613 = fadd <8 x float> %611, %612
  %614 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %600, <8 x float> %478, <8 x float> %26) #8
  %615 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %613, <8 x float> %485, <8 x float> %26) #8
  %616 = fadd <8 x float> %506, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %617 = fsub <8 x float> %616, %506
  %618 = fsub <8 x float> %616, %617
  %619 = fsub <8 x float> %506, %618
  %620 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %617
  %621 = fadd <8 x float> %620, %619
  %622 = fadd <8 x float> %621, %517
  %623 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %616, <8 x float> %26) #8
  %624 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %622, <8 x float> %26) #8
  %625 = bitcast <8 x float> %614 to <4 x i64>
  %626 = xor <4 x i64> %625, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %627 = bitcast <8 x float> %615 to <4 x i64>
  %628 = xor <4 x i64> %627, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %629 = bitcast <4 x i64> %626 to <8 x float>
  %630 = bitcast <4 x i64> %628 to <8 x float>
  %631 = fadd <8 x float> %629, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %632 = fadd <8 x float> %631, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %633 = fsub <8 x float> %631, %632
  %634 = fsub <8 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %633
  %635 = fsub <8 x float> %629, %632
  %636 = fadd <8 x float> %635, %634
  %637 = fadd <8 x float> %630, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %638 = fadd <8 x float> %637, %636
  %639 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %614, <8 x float> %631, <8 x float> %7) #8
  %640 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %615, <8 x float> %638, <8 x float> %7) #8
  %641 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %639, <8 x float> <float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000>, <8 x float> %6) #8
  %642 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %640, <8 x float> <float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000>, <8 x float> %6) #8
  %643 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %623, <8 x float> %124, <8 x float> %7) #8
  %644 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %624, <8 x float> %125, <8 x float> %7) #8
  %645 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %643, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %6) #8
  %646 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %644, <8 x float> zeroinitializer, <8 x float> %6) #8
  %647 = xor <4 x i64> %8, <i64 -1, i64 -1, i64 -1, i64 -1>
  %648 = shufflevector <4 x i64> %647, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %649 = shufflevector <4 x i64> %647, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %650 = and <2 x i64> %649, %648
  %651 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %650, <2 x i64> <i64 -1, i64 -1>) #8
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %653, label %877

; <label>:653:                                    ; preds = %2
  %654 = fmul <8 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %655 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %654) #8
  %656 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %655) #8
  %657 = fmul <8 x float> %656, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %658 = fsub <8 x float> %1, %657
  %659 = fmul <8 x float> %658, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %660 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %659) #8
  %661 = bitcast <8 x i32> %660 to <4 x i64>
  %662 = shufflevector <4 x i64> %661, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %663 = shufflevector <4 x i64> %661, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %664 = bitcast <2 x i64> %662 to <4 x i32>
  %665 = lshr <4 x i32> %664, <i32 31, i32 31, i32 31, i32 31>
  %666 = bitcast <2 x i64> %663 to <4 x i32>
  %667 = lshr <4 x i32> %666, <i32 31, i32 31, i32 31, i32 31>
  %668 = xor <4 x i32> %665, <i32 1, i32 1, i32 1, i32 1>
  %669 = add <4 x i32> %668, %664
  %670 = xor <4 x i32> %667, <i32 1, i32 1, i32 1, i32 1>
  %671 = add <4 x i32> %670, %666
  %672 = bitcast <4 x i32> %669 to <2 x i64>
  %673 = bitcast <4 x i32> %671 to <2 x i64>
  %674 = and <2 x i64> %672, <i64 -4294967298, i64 -4294967298>
  %675 = and <2 x i64> %673, <i64 -4294967298, i64 -4294967298>
  %676 = and <4 x i32> %669, <i32 2, i32 2, i32 2, i32 2>
  %677 = icmp ne <4 x i32> %676, zeroinitializer
  %678 = sext <4 x i1> %677 to <4 x i32>
  %679 = bitcast <4 x i32> %678 to <2 x i64>
  %680 = and <4 x i32> %671, <i32 2, i32 2, i32 2, i32 2>
  %681 = icmp ne <4 x i32> %680, zeroinitializer
  %682 = sext <4 x i1> %681 to <4 x i32>
  %683 = bitcast <4 x i32> %682 to <2 x i64>
  %684 = shufflevector <2 x i64> %679, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %685 = shufflevector <2 x i64> %683, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %686 = shufflevector <4 x i64> %684, <4 x i64> %685, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %687 = shufflevector <2 x i64> %674, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %688 = shufflevector <2 x i64> %675, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %689 = shufflevector <4 x i64> %687, <4 x i64> %688, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %690 = bitcast <4 x i64> %689 to <8 x i32>
  %691 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %690) #8
  %692 = fsub <8 x float> %659, %691
  %693 = fmul <8 x float> %692, %692
  %694 = bitcast <8 x float> %692 to <4 x i64>
  %695 = shufflevector <4 x i64> %694, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %696 = shufflevector <4 x i64> %694, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %697 = and <2 x i64> %695, <i64 -17587891081216, i64 -17587891081216>
  %698 = and <2 x i64> %696, <i64 -17587891081216, i64 -17587891081216>
  %699 = shufflevector <2 x i64> %697, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %700 = shufflevector <2 x i64> %698, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %701 = shufflevector <4 x i64> %699, <4 x i64> %700, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %702 = bitcast <4 x i64> %701 to <8 x float>
  %703 = fsub <8 x float> %692, %702
  %704 = bitcast <8 x float> %693 to <4 x i64>
  %705 = xor <4 x i64> %704, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %706 = bitcast <4 x i64> %705 to <8 x float>
  %707 = fmul <8 x float> %702, %702
  %708 = fadd <8 x float> %707, %706
  %709 = fmul <8 x float> %703, %702
  %710 = fadd <8 x float> %709, %708
  %711 = fadd <8 x float> %709, %710
  %712 = fmul <8 x float> %703, %703
  %713 = fadd <8 x float> %712, %711
  %714 = bitcast <4 x i64> %686 to <8 x float>
  %715 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %714) #8
  %716 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %714) #8
  %717 = fmul <8 x float> %715, %693
  %718 = fadd <8 x float> %716, %717
  %719 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %714) #8
  %720 = fmul <8 x float> %693, %718
  %721 = fadd <8 x float> %719, %720
  %722 = fmul <8 x float> %693, %721
  %723 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %714) #8
  %724 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %714) #8
  %725 = fadd <8 x float> %723, %722
  %726 = fsub <8 x float> %725, %722
  %727 = fsub <8 x float> %725, %726
  %728 = fsub <8 x float> %722, %727
  %729 = fsub <8 x float> %723, %726
  %730 = fadd <8 x float> %729, %728
  %731 = fadd <8 x float> %724, %730
  %732 = shufflevector <4 x i64> %704, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %733 = shufflevector <4 x i64> %704, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %734 = and <2 x i64> %732, <i64 -17587891081216, i64 -17587891081216>
  %735 = and <2 x i64> %733, <i64 -17587891081216, i64 -17587891081216>
  %736 = shufflevector <2 x i64> %734, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %737 = shufflevector <2 x i64> %735, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %738 = shufflevector <4 x i64> %736, <4 x i64> %737, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %739 = bitcast <4 x i64> %738 to <8 x float>
  %740 = fsub <8 x float> %693, %739
  %741 = bitcast <8 x float> %725 to <4 x i64>
  %742 = shufflevector <4 x i64> %741, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %743 = shufflevector <4 x i64> %741, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %744 = and <2 x i64> %742, <i64 -17587891081216, i64 -17587891081216>
  %745 = and <2 x i64> %743, <i64 -17587891081216, i64 -17587891081216>
  %746 = shufflevector <2 x i64> %744, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %747 = shufflevector <2 x i64> %745, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %748 = shufflevector <4 x i64> %746, <4 x i64> %747, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %749 = bitcast <4 x i64> %748 to <8 x float>
  %750 = fsub <8 x float> %725, %749
  %751 = fmul <8 x float> %693, %725
  %752 = bitcast <8 x float> %751 to <4 x i64>
  %753 = xor <4 x i64> %752, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %754 = bitcast <4 x i64> %753 to <8 x float>
  %755 = fmul <8 x float> %739, %749
  %756 = fadd <8 x float> %755, %754
  %757 = fmul <8 x float> %740, %749
  %758 = fadd <8 x float> %757, %756
  %759 = fmul <8 x float> %750, %739
  %760 = fadd <8 x float> %759, %758
  %761 = fmul <8 x float> %740, %750
  %762 = fadd <8 x float> %761, %760
  %763 = fmul <8 x float> %693, %731
  %764 = fadd <8 x float> %763, %762
  %765 = fmul <8 x float> %725, %713
  %766 = fadd <8 x float> %765, %764
  %767 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %714) #8
  %768 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %714) #8
  %769 = fadd <8 x float> %767, %751
  %770 = fsub <8 x float> %769, %751
  %771 = fsub <8 x float> %769, %770
  %772 = fsub <8 x float> %751, %771
  %773 = fsub <8 x float> %767, %770
  %774 = fadd <8 x float> %773, %772
  %775 = fadd <8 x float> %768, %766
  %776 = fadd <8 x float> %774, %775
  %777 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %692, <8 x float> %693, <8 x float> %714) #8
  %778 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %713, <8 x float> %714) #8
  %779 = bitcast <8 x float> %769 to <4 x i64>
  %780 = shufflevector <4 x i64> %779, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %781 = shufflevector <4 x i64> %779, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %782 = and <2 x i64> %780, <i64 -17587891081216, i64 -17587891081216>
  %783 = and <2 x i64> %781, <i64 -17587891081216, i64 -17587891081216>
  %784 = shufflevector <2 x i64> %782, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %785 = shufflevector <2 x i64> %783, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %786 = shufflevector <4 x i64> %784, <4 x i64> %785, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %787 = bitcast <4 x i64> %786 to <8 x float>
  %788 = fsub <8 x float> %769, %787
  %789 = bitcast <8 x float> %777 to <4 x i64>
  %790 = shufflevector <4 x i64> %789, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %791 = shufflevector <4 x i64> %789, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %792 = and <2 x i64> %790, <i64 -17587891081216, i64 -17587891081216>
  %793 = and <2 x i64> %791, <i64 -17587891081216, i64 -17587891081216>
  %794 = shufflevector <2 x i64> %792, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %795 = shufflevector <2 x i64> %793, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %796 = shufflevector <4 x i64> %794, <4 x i64> %795, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %797 = bitcast <4 x i64> %796 to <8 x float>
  %798 = fsub <8 x float> %777, %797
  %799 = fmul <8 x float> %777, %769
  %800 = bitcast <8 x float> %799 to <4 x i64>
  %801 = xor <4 x i64> %800, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %802 = bitcast <4 x i64> %801 to <8 x float>
  %803 = fmul <8 x float> %797, %787
  %804 = fadd <8 x float> %803, %802
  %805 = fmul <8 x float> %788, %797
  %806 = fadd <8 x float> %805, %804
  %807 = fmul <8 x float> %798, %787
  %808 = fadd <8 x float> %807, %806
  %809 = fmul <8 x float> %798, %788
  %810 = fadd <8 x float> %809, %808
  %811 = fmul <8 x float> %778, %769
  %812 = fadd <8 x float> %811, %810
  %813 = fmul <8 x float> %777, %776
  %814 = fadd <8 x float> %812, %813
  %815 = fadd <8 x float> %799, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %816 = fsub <8 x float> %815, %799
  %817 = fsub <8 x float> %815, %816
  %818 = fsub <8 x float> %799, %817
  %819 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %816
  %820 = fadd <8 x float> %819, %818
  %821 = fadd <8 x float> %820, %814
  %822 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %799, <8 x float> %815, <8 x float> %714) #8
  %823 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %814, <8 x float> %821, <8 x float> %714) #8
  %824 = and <4 x i32> %669, <i32 4, i32 4, i32 4, i32 4>
  %825 = icmp ne <4 x i32> %824, zeroinitializer
  %826 = sext <4 x i1> %825 to <4 x i32>
  %827 = bitcast <4 x i32> %826 to <2 x i64>
  %828 = and <4 x i32> %671, <i32 4, i32 4, i32 4, i32 4>
  %829 = icmp ne <4 x i32> %828, zeroinitializer
  %830 = sext <4 x i1> %829 to <4 x i32>
  %831 = bitcast <4 x i32> %830 to <2 x i64>
  %832 = shufflevector <2 x i64> %827, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %833 = shufflevector <2 x i64> %831, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %834 = shufflevector <4 x i64> %832, <4 x i64> %833, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %835 = and <4 x i64> %834, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %836 = bitcast <8 x float> %822 to <4 x i64>
  %837 = xor <4 x i64> %835, %836
  %838 = bitcast <8 x float> %823 to <4 x i64>
  %839 = xor <4 x i64> %835, %838
  %840 = bitcast <4 x i64> %837 to <8 x float>
  %841 = bitcast <4 x i64> %839 to <8 x float>
  %842 = bitcast <8 x float> %623 to <4 x i64>
  %843 = shufflevector <4 x i64> %842, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %844 = shufflevector <4 x i64> %842, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %845 = and <2 x i64> %843, <i64 -17587891081216, i64 -17587891081216>
  %846 = and <2 x i64> %844, <i64 -17587891081216, i64 -17587891081216>
  %847 = shufflevector <2 x i64> %845, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %848 = shufflevector <2 x i64> %846, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %849 = shufflevector <4 x i64> %847, <4 x i64> %848, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %850 = bitcast <4 x i64> %849 to <8 x float>
  %851 = fsub <8 x float> %623, %850
  %852 = shufflevector <4 x i64> %837, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %853 = shufflevector <4 x i64> %837, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %854 = and <2 x i64> %852, <i64 -17587891081216, i64 -17587891081216>
  %855 = and <2 x i64> %853, <i64 -17587891081216, i64 -17587891081216>
  %856 = shufflevector <2 x i64> %854, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %857 = shufflevector <2 x i64> %855, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %858 = shufflevector <4 x i64> %856, <4 x i64> %857, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %859 = bitcast <4 x i64> %858 to <8 x float>
  %860 = fsub <8 x float> %840, %859
  %861 = fmul <8 x float> %623, %840
  %862 = bitcast <8 x float> %861 to <4 x i64>
  %863 = xor <4 x i64> %862, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %864 = bitcast <4 x i64> %863 to <8 x float>
  %865 = fmul <8 x float> %850, %859
  %866 = fadd <8 x float> %865, %864
  %867 = fmul <8 x float> %851, %859
  %868 = fadd <8 x float> %867, %866
  %869 = fmul <8 x float> %860, %850
  %870 = fadd <8 x float> %869, %868
  %871 = fmul <8 x float> %851, %860
  %872 = fadd <8 x float> %871, %870
  %873 = fmul <8 x float> %623, %841
  %874 = fadd <8 x float> %873, %872
  %875 = fmul <8 x float> %624, %840
  %876 = fadd <8 x float> %875, %874
  br label %877

; <label>:877:                                    ; preds = %2, %653
  %878 = phi <8 x float> [ %861, %653 ], [ %133, %2 ]
  %879 = phi <8 x float> [ %876, %653 ], [ %134, %2 ]
  %880 = fmul <8 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %881 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %124, <8 x float> %878, <8 x float> %7) #8
  %882 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %125, <8 x float> %879, <8 x float> %7) #8
  %883 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %881, <8 x float> %880, <8 x float> %6) #8
  %884 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %882, <8 x float> zeroinitializer, <8 x float> %6) #8
  %885 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %883
  %886 = bitcast <8 x float> %883 to <4 x i64>
  %887 = shufflevector <4 x i64> %886, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %888 = shufflevector <4 x i64> %886, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %889 = and <2 x i64> %887, <i64 -17587891081216, i64 -17587891081216>
  %890 = and <2 x i64> %888, <i64 -17587891081216, i64 -17587891081216>
  %891 = shufflevector <2 x i64> %889, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %892 = shufflevector <2 x i64> %890, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %893 = shufflevector <4 x i64> %891, <4 x i64> %892, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %894 = bitcast <4 x i64> %893 to <8 x float>
  %895 = fsub <8 x float> %883, %894
  %896 = bitcast <8 x float> %885 to <4 x i64>
  %897 = shufflevector <4 x i64> %896, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %898 = shufflevector <4 x i64> %896, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %899 = and <2 x i64> %897, <i64 -17587891081216, i64 -17587891081216>
  %900 = and <2 x i64> %898, <i64 -17587891081216, i64 -17587891081216>
  %901 = shufflevector <2 x i64> %899, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %902 = shufflevector <2 x i64> %900, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %903 = shufflevector <4 x i64> %901, <4 x i64> %902, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %904 = bitcast <4 x i64> %903 to <8 x float>
  %905 = fsub <8 x float> %885, %904
  %906 = bitcast <8 x float> %645 to <4 x i64>
  %907 = shufflevector <4 x i64> %906, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %908 = shufflevector <4 x i64> %906, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %909 = and <2 x i64> %907, <i64 -17587891081216, i64 -17587891081216>
  %910 = and <2 x i64> %908, <i64 -17587891081216, i64 -17587891081216>
  %911 = shufflevector <2 x i64> %909, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %912 = shufflevector <2 x i64> %910, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %913 = shufflevector <4 x i64> %911, <4 x i64> %912, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %914 = bitcast <4 x i64> %913 to <8 x float>
  %915 = fsub <8 x float> %645, %914
  %916 = fmul <8 x float> %645, %885
  %917 = fmul <8 x float> %894, %904
  %918 = fadd <8 x float> %917, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %919 = fmul <8 x float> %905, %894
  %920 = fadd <8 x float> %919, %918
  %921 = fmul <8 x float> %895, %904
  %922 = fadd <8 x float> %921, %920
  %923 = fmul <8 x float> %895, %905
  %924 = fadd <8 x float> %923, %922
  %925 = bitcast <8 x float> %924 to <4 x i64>
  %926 = xor <4 x i64> %925, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %927 = bitcast <4 x i64> %926 to <8 x float>
  %928 = bitcast <8 x float> %916 to <4 x i64>
  %929 = xor <4 x i64> %928, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %930 = bitcast <4 x i64> %929 to <8 x float>
  %931 = fmul <8 x float> %914, %904
  %932 = fadd <8 x float> %931, %930
  %933 = fmul <8 x float> %905, %914
  %934 = fadd <8 x float> %933, %932
  %935 = fmul <8 x float> %915, %904
  %936 = fadd <8 x float> %935, %934
  %937 = fmul <8 x float> %915, %905
  %938 = fadd <8 x float> %937, %936
  %939 = fmul <8 x float> %916, %927
  %940 = fadd <8 x float> %938, %939
  %941 = fmul <8 x float> %884, %916
  %942 = fsub <8 x float> %646, %941
  %943 = fmul <8 x float> %885, %942
  %944 = fadd <8 x float> %943, %940
  %945 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 0
  store <8 x float> %641, <8 x float>* %945, align 32
  %946 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  store <8 x float> %642, <8 x float>* %946, align 32
  %947 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <8 x float> %916, <8 x float>* %947, align 32
  %948 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <8 x float> %944, <8 x float>* %948, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_lgammaf8_u10avx(<8 x float>) local_unnamed_addr #0 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #8
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <8 x float>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <8 x float>
  %14 = bitcast <4 x i64> %12 to <8 x float>
  %15 = fmul <8 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %17 = bitcast <8 x float> %16 to <4 x i64>
  %18 = fmul <8 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %18, <8 x float> %16) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %21 to <4 x i32>
  %24 = lshr <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %25 = bitcast <2 x i64> %22 to <4 x i32>
  %26 = lshr <4 x i32> %25, <i32 23, i32 23, i32 23, i32 23>
  %27 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %28 = shufflevector <4 x i64> %17, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %29 = bitcast <2 x i64> %27 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %28 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %31) #8
  %33 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %34 = bitcast <16 x i8> %30 to <4 x i32>
  %35 = sub <4 x i32> %33, %34
  %36 = and <4 x i32> %26, <i32 255, i32 255, i32 255, i32 255>
  %37 = bitcast <16 x i8> %32 to <4 x i32>
  %38 = sub <4 x i32> %36, %37
  %39 = bitcast <4 x i32> %35 to <2 x i64>
  %40 = bitcast <4 x i32> %38 to <2 x i64>
  %41 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %42 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %41
  %43 = shl <4 x i32> %38, <i32 23, i32 23, i32 23, i32 23>
  %44 = sub <4 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %43
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %13, %50
  %52 = fmul <8 x float> %14, %50
  %53 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fsub <8 x float> %53, %51
  %55 = fsub <8 x float> %53, %54
  %56 = fsub <8 x float> %51, %55
  %57 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %54
  %58 = fadd <8 x float> %57, %56
  %59 = fadd <8 x float> %52, %58
  %60 = fadd <8 x float> %51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %61 = fsub <8 x float> %60, %51
  %62 = fsub <8 x float> %60, %61
  %63 = fsub <8 x float> %51, %62
  %64 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %65 = fadd <8 x float> %64, %63
  %66 = fadd <8 x float> %52, %65
  %67 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %60
  %68 = bitcast <8 x float> %60 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = and <2 x i64> %69, <i64 -17587891081216, i64 -17587891081216>
  %72 = and <2 x i64> %70, <i64 -17587891081216, i64 -17587891081216>
  %73 = shufflevector <2 x i64> %71, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %75 = shufflevector <4 x i64> %73, <4 x i64> %74, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %76 = bitcast <4 x i64> %75 to <8 x float>
  %77 = fsub <8 x float> %60, %76
  %78 = bitcast <8 x float> %67 to <4 x i64>
  %79 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %80 = shufflevector <4 x i64> %78, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %81 = and <2 x i64> %79, <i64 -17587891081216, i64 -17587891081216>
  %82 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <4 x i64> %83, <4 x i64> %84, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %86 = bitcast <4 x i64> %85 to <8 x float>
  %87 = fsub <8 x float> %67, %86
  %88 = bitcast <8 x float> %53 to <4 x i64>
  %89 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %90 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %91 = and <2 x i64> %89, <i64 -17587891081216, i64 -17587891081216>
  %92 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %93 = shufflevector <2 x i64> %91, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <4 x i64> %93, <4 x i64> %94, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %96 = bitcast <4 x i64> %95 to <8 x float>
  %97 = fsub <8 x float> %53, %96
  %98 = fmul <8 x float> %53, %67
  %99 = fmul <8 x float> %76, %86
  %100 = fadd <8 x float> %99, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %101 = fmul <8 x float> %87, %76
  %102 = fadd <8 x float> %101, %100
  %103 = fmul <8 x float> %77, %86
  %104 = fadd <8 x float> %103, %102
  %105 = fmul <8 x float> %77, %87
  %106 = fadd <8 x float> %105, %104
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = xor <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = bitcast <8 x float> %98 to <4 x i64>
  %111 = xor <4 x i64> %110, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = fmul <8 x float> %96, %86
  %114 = fadd <8 x float> %113, %112
  %115 = fmul <8 x float> %87, %96
  %116 = fadd <8 x float> %115, %114
  %117 = fmul <8 x float> %97, %86
  %118 = fadd <8 x float> %117, %116
  %119 = fmul <8 x float> %97, %87
  %120 = fadd <8 x float> %119, %118
  %121 = fmul <8 x float> %98, %109
  %122 = fadd <8 x float> %120, %121
  %123 = fmul <8 x float> %98, %66
  %124 = fsub <8 x float> %59, %123
  %125 = fmul <8 x float> %67, %124
  %126 = fadd <8 x float> %125, %122
  %127 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %128 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = and <2 x i64> %127, <i64 -17587891081216, i64 -17587891081216>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = shufflevector <2 x i64> %129, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <4 x i64> %131, <4 x i64> %132, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %134 = bitcast <4 x i64> %133 to <8 x float>
  %135 = fsub <8 x float> %98, %134
  %136 = fmul <8 x float> %98, %98
  %137 = bitcast <8 x float> %136 to <4 x i64>
  %138 = xor <4 x i64> %137, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fmul <8 x float> %134, %134
  %141 = fadd <8 x float> %140, %139
  %142 = fadd <8 x float> %134, %134
  %143 = fmul <8 x float> %142, %135
  %144 = fadd <8 x float> %143, %141
  %145 = fmul <8 x float> %135, %135
  %146 = fadd <8 x float> %145, %144
  %147 = fadd <8 x float> %126, %126
  %148 = fmul <8 x float> %98, %147
  %149 = fadd <8 x float> %146, %148
  %150 = fmul <8 x float> %136, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %151 = fadd <8 x float> %150, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %152 = fmul <8 x float> %136, %151
  %153 = fadd <8 x float> %152, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %154 = fmul <8 x float> %136, %153
  %155 = fadd <8 x float> %154, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %156 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = bitcast <4 x i64> %158 to <8 x i32>
  %160 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %159) #8
  %161 = bitcast <8 x float> %160 to <4 x i64>
  %162 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %163 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %164 = and <2 x i64> %162, <i64 -17587891081216, i64 -17587891081216>
  %165 = and <2 x i64> %163, <i64 -17587891081216, i64 -17587891081216>
  %166 = shufflevector <2 x i64> %164, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %167 = shufflevector <2 x i64> %165, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %168 = shufflevector <4 x i64> %166, <4 x i64> %167, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %169 = bitcast <4 x i64> %168 to <8 x float>
  %170 = fsub <8 x float> %160, %169
  %171 = fmul <8 x float> %160, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %172 = bitcast <8 x float> %171 to <4 x i64>
  %173 = xor <4 x i64> %172, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %174 = bitcast <4 x i64> %173 to <8 x float>
  %175 = fmul <8 x float> %169, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %176 = fadd <8 x float> %175, %174
  %177 = fmul <8 x float> %169, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %178 = fadd <8 x float> %177, %176
  %179 = fmul <8 x float> %170, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %180 = fadd <8 x float> %179, %178
  %181 = fmul <8 x float> %170, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %182 = fadd <8 x float> %181, %180
  %183 = fmul <8 x float> %160, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %98, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %186 = fmul <8 x float> %126, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %187 = fadd <8 x float> %171, %185
  %188 = fsub <8 x float> %171, %187
  %189 = fadd <8 x float> %185, %188
  %190 = fadd <8 x float> %184, %189
  %191 = fadd <8 x float> %190, %186
  %192 = shufflevector <4 x i64> %137, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = shufflevector <4 x i64> %137, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %194 = and <2 x i64> %192, <i64 -17587891081216, i64 -17587891081216>
  %195 = and <2 x i64> %193, <i64 -17587891081216, i64 -17587891081216>
  %196 = shufflevector <2 x i64> %194, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %197 = shufflevector <2 x i64> %195, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %198 = shufflevector <4 x i64> %196, <4 x i64> %197, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %199 = bitcast <4 x i64> %198 to <8 x float>
  %200 = fsub <8 x float> %136, %199
  %201 = fmul <8 x float> %98, %136
  %202 = bitcast <8 x float> %201 to <4 x i64>
  %203 = xor <4 x i64> %202, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %204 = bitcast <4 x i64> %203 to <8 x float>
  %205 = fmul <8 x float> %134, %199
  %206 = fadd <8 x float> %205, %204
  %207 = fmul <8 x float> %200, %134
  %208 = fadd <8 x float> %207, %206
  %209 = fmul <8 x float> %135, %199
  %210 = fadd <8 x float> %209, %208
  %211 = fmul <8 x float> %135, %200
  %212 = fadd <8 x float> %211, %210
  %213 = fmul <8 x float> %136, %126
  %214 = fadd <8 x float> %212, %213
  %215 = fmul <8 x float> %98, %149
  %216 = fadd <8 x float> %214, %215
  %217 = shufflevector <4 x i64> %202, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %218 = shufflevector <4 x i64> %202, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %219 = and <2 x i64> %217, <i64 -17587891081216, i64 -17587891081216>
  %220 = and <2 x i64> %218, <i64 -17587891081216, i64 -17587891081216>
  %221 = shufflevector <2 x i64> %219, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = shufflevector <2 x i64> %220, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %223 = shufflevector <4 x i64> %221, <4 x i64> %222, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %224 = bitcast <4 x i64> %223 to <8 x float>
  %225 = fsub <8 x float> %201, %224
  %226 = bitcast <8 x float> %155 to <4 x i64>
  %227 = shufflevector <4 x i64> %226, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %228 = shufflevector <4 x i64> %226, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %229 = and <2 x i64> %227, <i64 -17587891081216, i64 -17587891081216>
  %230 = and <2 x i64> %228, <i64 -17587891081216, i64 -17587891081216>
  %231 = shufflevector <2 x i64> %229, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %232 = shufflevector <2 x i64> %230, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %233 = shufflevector <4 x i64> %231, <4 x i64> %232, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %234 = bitcast <4 x i64> %233 to <8 x float>
  %235 = fsub <8 x float> %155, %234
  %236 = fmul <8 x float> %201, %155
  %237 = bitcast <8 x float> %236 to <4 x i64>
  %238 = xor <4 x i64> %237, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %239 = bitcast <4 x i64> %238 to <8 x float>
  %240 = fmul <8 x float> %224, %234
  %241 = fadd <8 x float> %240, %239
  %242 = fmul <8 x float> %225, %234
  %243 = fadd <8 x float> %242, %241
  %244 = fmul <8 x float> %235, %224
  %245 = fadd <8 x float> %244, %243
  %246 = fmul <8 x float> %225, %235
  %247 = fadd <8 x float> %246, %245
  %248 = fmul <8 x float> %155, %216
  %249 = fadd <8 x float> %247, %248
  %250 = fadd <8 x float> %187, %236
  %251 = fsub <8 x float> %187, %250
  %252 = fadd <8 x float> %236, %251
  %253 = fadd <8 x float> %252, %191
  %254 = fadd <8 x float> %253, %249
  %255 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %256 = load <8 x float>, <8 x float>* %255, align 32
  %257 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %258 = load <8 x float>, <8 x float>* %257, align 32
  %259 = fadd <8 x float> %256, %250
  %260 = fsub <8 x float> %259, %256
  %261 = fsub <8 x float> %259, %260
  %262 = fsub <8 x float> %256, %261
  %263 = fsub <8 x float> %250, %260
  %264 = fadd <8 x float> %263, %262
  %265 = fadd <8 x float> %258, %254
  %266 = fadd <8 x float> %264, %265
  %267 = fadd <8 x float> %259, %266
  %268 = bitcast <8 x float> %0 to <4 x i64>
  %269 = and <4 x i64> %268, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %270 = bitcast <4 x i64> %269 to <8 x float>
  %271 = fcmp oeq <8 x float> %270, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %272 = sext <8 x i1> %271 to <8 x i32>
  %273 = bitcast <8 x i32> %272 to <4 x i64>
  %274 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 18) #8
  %275 = bitcast <8 x float> %274 to <4 x i64>
  %276 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  %277 = fcmp oeq <8 x float> %276, %0
  %278 = sext <8 x i1> %277 to <8 x i32>
  %279 = bitcast <8 x i32> %278 to <4 x i64>
  %280 = and <4 x i64> %279, %275
  %281 = fcmp uno <8 x float> %0, zeroinitializer
  %282 = or <8 x i1> %271, %281
  %283 = sext <8 x i1> %282 to <8 x i32>
  %284 = bitcast <8 x i32> %283 to <4 x i64>
  %285 = xor <4 x i64> %284, <i64 -1, i64 -1, i64 -1, i64 -1>
  %286 = fcmp uno <8 x float> %267, zeroinitializer
  %287 = sext <8 x i1> %286 to <8 x i32>
  %288 = bitcast <8 x i32> %287 to <4 x i64>
  %289 = and <4 x i64> %288, %285
  %290 = or <4 x i64> %280, %273
  %291 = or <4 x i64> %290, %289
  %292 = bitcast <4 x i64> %291 to <8 x float>
  %293 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %267, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %292) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #8
  ret <8 x float> %293
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erff8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>, i8 17) #8
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i8 17) #8
  %8 = fmul <8 x float> %4, %4
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %8, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>, <8 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <8 x float> %6) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <8 x float> %5) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>, <8 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <8 x float> %6) #8
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <8 x float> %5) #8
  %14 = fmul <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>, <8 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <8 x float> %6) #8
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <8 x float> %5) #8
  %18 = fmul <8 x float> %9, %15
  %19 = fadd <8 x float> %18, %17
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>, <8 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <8 x float> %6) #8
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <8 x float> %5) #8
  %22 = fmul <8 x float> %9, %19
  %23 = fadd <8 x float> %22, %21
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>, <8 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <8 x float> %6) #8
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %24, <8 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <8 x float> %5) #8
  %26 = fmul <8 x float> %9, %23
  %27 = fadd <8 x float> %26, %25
  %28 = bitcast <8 x float> %27 to <4 x i64>
  %29 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = and <2 x i64> %30, <i64 -17587891081216, i64 -17587891081216>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = fsub <8 x float> %27, %36
  %38 = bitcast <8 x float> %9 to <4 x i64>
  %39 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %40 = shufflevector <4 x i64> %38, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = and <2 x i64> %40, <i64 -17587891081216, i64 -17587891081216>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <8 x float>
  %47 = fsub <8 x float> %9, %46
  %48 = fmul <8 x float> %9, %27
  %49 = bitcast <8 x float> %48 to <4 x i64>
  %50 = xor <4 x i64> %49, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %51 = bitcast <4 x i64> %50 to <8 x float>
  %52 = fmul <8 x float> %46, %36
  %53 = fadd <8 x float> %52, %51
  %54 = fmul <8 x float> %37, %46
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %47, %36
  %57 = fadd <8 x float> %56, %55
  %58 = fmul <8 x float> %47, %37
  %59 = fadd <8 x float> %58, %57
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>, <8 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <8 x float> %6) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>, <8 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <8 x float> %6) #8
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %60, <8 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <8 x float> %5) #8
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %61, <8 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <8 x float> %5) #8
  %64 = fadd <8 x float> %48, %62
  %65 = fsub <8 x float> %64, %48
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %48, %66
  %68 = fsub <8 x float> %62, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %63, %59
  %71 = fadd <8 x float> %69, %70
  %72 = bitcast <8 x float> %64 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %64, %80
  %82 = fmul <8 x float> %9, %64
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = xor <4 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <4 x i64> %84 to <8 x float>
  %86 = fmul <8 x float> %46, %80
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %81, %46
  %89 = fadd <8 x float> %88, %87
  %90 = fmul <8 x float> %47, %80
  %91 = fadd <8 x float> %90, %89
  %92 = fmul <8 x float> %47, %81
  %93 = fadd <8 x float> %92, %91
  %94 = fmul <8 x float> %9, %71
  %95 = fadd <8 x float> %94, %93
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>, <8 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <8 x float> %6) #8
  %97 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>, <8 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <8 x float> %6) #8
  %98 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <8 x float> %5) #8
  %99 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %97, <8 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <8 x float> %5) #8
  %100 = fadd <8 x float> %82, %98
  %101 = fsub <8 x float> %100, %82
  %102 = fsub <8 x float> %100, %101
  %103 = fsub <8 x float> %82, %102
  %104 = fsub <8 x float> %98, %101
  %105 = fadd <8 x float> %104, %103
  %106 = fadd <8 x float> %99, %95
  %107 = fadd <8 x float> %105, %106
  %108 = bitcast <8 x float> %100 to <4 x i64>
  %109 = shufflevector <4 x i64> %108, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %110 = shufflevector <4 x i64> %108, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %111 = and <2 x i64> %109, <i64 -17587891081216, i64 -17587891081216>
  %112 = and <2 x i64> %110, <i64 -17587891081216, i64 -17587891081216>
  %113 = shufflevector <2 x i64> %111, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <4 x i64> %113, <4 x i64> %114, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = bitcast <4 x i64> %115 to <8 x float>
  %117 = fsub <8 x float> %100, %116
  %118 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %119 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %120 = and <2 x i64> %118, <i64 -17587891081216, i64 -17587891081216>
  %121 = and <2 x i64> %119, <i64 -17587891081216, i64 -17587891081216>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <2 x i64> %121, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %124 = shufflevector <4 x i64> %122, <4 x i64> %123, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %125 = bitcast <4 x i64> %124 to <8 x float>
  %126 = fsub <8 x float> %4, %125
  %127 = fmul <8 x float> %100, %4
  %128 = bitcast <8 x float> %127 to <4 x i64>
  %129 = xor <4 x i64> %128, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fmul <8 x float> %125, %116
  %132 = fadd <8 x float> %131, %130
  %133 = fmul <8 x float> %117, %125
  %134 = fadd <8 x float> %133, %132
  %135 = fmul <8 x float> %126, %116
  %136 = fadd <8 x float> %135, %134
  %137 = fmul <8 x float> %126, %117
  %138 = fadd <8 x float> %137, %136
  %139 = fmul <8 x float> %107, %4
  %140 = fadd <8 x float> %139, %138
  %141 = fadd <8 x float> %127, %140
  %142 = fmul <8 x float> %141, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %143 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %142) #8
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = shufflevector <4 x i64> %144, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %146 = shufflevector <4 x i64> %144, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %147 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %143) #8
  %148 = fmul <8 x float> %147, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %149 = fadd <8 x float> %127, %148
  %150 = fsub <8 x float> %149, %127
  %151 = fsub <8 x float> %149, %150
  %152 = fsub <8 x float> %127, %151
  %153 = fsub <8 x float> %148, %150
  %154 = fadd <8 x float> %153, %152
  %155 = fadd <8 x float> %154, %140
  %156 = fmul <8 x float> %147, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %157 = fadd <8 x float> %156, %149
  %158 = fsub <8 x float> %157, %149
  %159 = fsub <8 x float> %157, %158
  %160 = fsub <8 x float> %149, %159
  %161 = fsub <8 x float> %156, %158
  %162 = fadd <8 x float> %161, %160
  %163 = fadd <8 x float> %162, %155
  %164 = fmul <8 x float> %157, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %165 = fadd <8 x float> %164, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %166 = fmul <8 x float> %157, %165
  %167 = fadd <8 x float> %166, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %168 = fmul <8 x float> %157, %167
  %169 = fadd <8 x float> %168, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %170 = bitcast <8 x float> %157 to <4 x i64>
  %171 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %172 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %173 = and <2 x i64> %171, <i64 -17587891081216, i64 -17587891081216>
  %174 = and <2 x i64> %172, <i64 -17587891081216, i64 -17587891081216>
  %175 = shufflevector <2 x i64> %173, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %176 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %177 = shufflevector <4 x i64> %175, <4 x i64> %176, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %178 = bitcast <4 x i64> %177 to <8 x float>
  %179 = fsub <8 x float> %157, %178
  %180 = bitcast <8 x float> %169 to <4 x i64>
  %181 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %182 = shufflevector <4 x i64> %180, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %183 = and <2 x i64> %181, <i64 -17587891081216, i64 -17587891081216>
  %184 = and <2 x i64> %182, <i64 -17587891081216, i64 -17587891081216>
  %185 = shufflevector <2 x i64> %183, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %186 = shufflevector <2 x i64> %184, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %187 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %188 = bitcast <4 x i64> %187 to <8 x float>
  %189 = fsub <8 x float> %169, %188
  %190 = fmul <8 x float> %157, %169
  %191 = bitcast <8 x float> %190 to <4 x i64>
  %192 = xor <4 x i64> %191, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %193 = bitcast <4 x i64> %192 to <8 x float>
  %194 = fmul <8 x float> %178, %188
  %195 = fadd <8 x float> %194, %193
  %196 = fmul <8 x float> %179, %188
  %197 = fadd <8 x float> %196, %195
  %198 = fmul <8 x float> %189, %178
  %199 = fadd <8 x float> %198, %197
  %200 = fmul <8 x float> %179, %189
  %201 = fadd <8 x float> %200, %199
  %202 = fmul <8 x float> %169, %163
  %203 = fadd <8 x float> %202, %201
  %204 = fadd <8 x float> %190, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %205 = fsub <8 x float> %204, %190
  %206 = fsub <8 x float> %204, %205
  %207 = fsub <8 x float> %190, %206
  %208 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %205
  %209 = fadd <8 x float> %208, %207
  %210 = fadd <8 x float> %209, %203
  %211 = bitcast <8 x float> %204 to <4 x i64>
  %212 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %214 = and <2 x i64> %212, <i64 -17587891081216, i64 -17587891081216>
  %215 = and <2 x i64> %213, <i64 -17587891081216, i64 -17587891081216>
  %216 = shufflevector <2 x i64> %214, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %217 = shufflevector <2 x i64> %215, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %218 = shufflevector <4 x i64> %216, <4 x i64> %217, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %219 = bitcast <4 x i64> %218 to <8 x float>
  %220 = fsub <8 x float> %204, %219
  %221 = fmul <8 x float> %157, %204
  %222 = bitcast <8 x float> %221 to <4 x i64>
  %223 = xor <4 x i64> %222, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %224 = bitcast <4 x i64> %223 to <8 x float>
  %225 = fmul <8 x float> %178, %219
  %226 = fadd <8 x float> %225, %224
  %227 = fmul <8 x float> %179, %219
  %228 = fadd <8 x float> %227, %226
  %229 = fmul <8 x float> %220, %178
  %230 = fadd <8 x float> %229, %228
  %231 = fmul <8 x float> %179, %220
  %232 = fadd <8 x float> %231, %230
  %233 = fmul <8 x float> %157, %210
  %234 = fadd <8 x float> %232, %233
  %235 = fmul <8 x float> %204, %163
  %236 = fadd <8 x float> %235, %234
  %237 = fadd <8 x float> %221, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %238 = fsub <8 x float> %237, %221
  %239 = fsub <8 x float> %237, %238
  %240 = fsub <8 x float> %221, %239
  %241 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %238
  %242 = fadd <8 x float> %241, %240
  %243 = fadd <8 x float> %242, %236
  %244 = fmul <8 x float> %157, %157
  %245 = bitcast <8 x float> %244 to <4 x i64>
  %246 = xor <4 x i64> %245, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %247 = bitcast <4 x i64> %246 to <8 x float>
  %248 = fmul <8 x float> %178, %178
  %249 = fadd <8 x float> %248, %247
  %250 = fadd <8 x float> %178, %178
  %251 = fmul <8 x float> %250, %179
  %252 = fadd <8 x float> %251, %249
  %253 = fmul <8 x float> %179, %179
  %254 = fadd <8 x float> %253, %252
  %255 = fadd <8 x float> %163, %163
  %256 = fmul <8 x float> %157, %255
  %257 = fadd <8 x float> %254, %256
  %258 = shufflevector <4 x i64> %245, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %259 = shufflevector <4 x i64> %245, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %260 = and <2 x i64> %258, <i64 -17587891081216, i64 -17587891081216>
  %261 = and <2 x i64> %259, <i64 -17587891081216, i64 -17587891081216>
  %262 = shufflevector <2 x i64> %260, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %263 = shufflevector <2 x i64> %261, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %264 = shufflevector <4 x i64> %262, <4 x i64> %263, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %265 = bitcast <4 x i64> %264 to <8 x float>
  %266 = fsub <8 x float> %244, %265
  %267 = bitcast <8 x float> %237 to <4 x i64>
  %268 = shufflevector <4 x i64> %267, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %269 = shufflevector <4 x i64> %267, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %270 = and <2 x i64> %268, <i64 -17587891081216, i64 -17587891081216>
  %271 = and <2 x i64> %269, <i64 -17587891081216, i64 -17587891081216>
  %272 = shufflevector <2 x i64> %270, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %273 = shufflevector <2 x i64> %271, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %274 = shufflevector <4 x i64> %272, <4 x i64> %273, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %275 = bitcast <4 x i64> %274 to <8 x float>
  %276 = fsub <8 x float> %237, %275
  %277 = fmul <8 x float> %244, %237
  %278 = bitcast <8 x float> %277 to <4 x i64>
  %279 = xor <4 x i64> %278, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %280 = bitcast <4 x i64> %279 to <8 x float>
  %281 = fmul <8 x float> %265, %275
  %282 = fadd <8 x float> %281, %280
  %283 = fmul <8 x float> %266, %275
  %284 = fadd <8 x float> %283, %282
  %285 = fmul <8 x float> %276, %265
  %286 = fadd <8 x float> %285, %284
  %287 = fmul <8 x float> %266, %276
  %288 = fadd <8 x float> %287, %286
  %289 = fmul <8 x float> %244, %243
  %290 = fadd <8 x float> %288, %289
  %291 = fmul <8 x float> %237, %257
  %292 = fadd <8 x float> %291, %290
  %293 = fadd <8 x float> %157, %277
  %294 = fsub <8 x float> %293, %157
  %295 = fsub <8 x float> %293, %294
  %296 = fsub <8 x float> %157, %295
  %297 = fsub <8 x float> %277, %294
  %298 = fadd <8 x float> %297, %296
  %299 = fadd <8 x float> %163, %292
  %300 = fadd <8 x float> %298, %299
  %301 = fadd <8 x float> %293, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %302 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %301
  %303 = fadd <8 x float> %293, %302
  %304 = fadd <8 x float> %303, %300
  %305 = bitcast <2 x i64> %145 to <4 x i32>
  %306 = ashr <4 x i32> %305, <i32 1, i32 1, i32 1, i32 1>
  %307 = bitcast <2 x i64> %146 to <4 x i32>
  %308 = ashr <4 x i32> %307, <i32 1, i32 1, i32 1, i32 1>
  %309 = shl <4 x i32> %306, <i32 23, i32 23, i32 23, i32 23>
  %310 = add <4 x i32> %309, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %311 = shl <4 x i32> %308, <i32 23, i32 23, i32 23, i32 23>
  %312 = add <4 x i32> %311, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %313 = bitcast <4 x i32> %310 to <2 x i64>
  %314 = bitcast <4 x i32> %312 to <2 x i64>
  %315 = shufflevector <2 x i64> %313, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %316 = shufflevector <2 x i64> %314, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %317 = shufflevector <4 x i64> %315, <4 x i64> %316, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %318 = bitcast <4 x i64> %317 to <8 x float>
  %319 = fmul <8 x float> %301, %318
  %320 = sub <4 x i32> %305, %306
  %321 = sub <4 x i32> %307, %308
  %322 = shl <4 x i32> %320, <i32 23, i32 23, i32 23, i32 23>
  %323 = add <4 x i32> %322, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %324 = shl <4 x i32> %321, <i32 23, i32 23, i32 23, i32 23>
  %325 = add <4 x i32> %324, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %326 = bitcast <4 x i32> %323 to <2 x i64>
  %327 = bitcast <4 x i32> %325 to <2 x i64>
  %328 = shufflevector <2 x i64> %326, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %329 = shufflevector <2 x i64> %327, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %330 = shufflevector <4 x i64> %328, <4 x i64> %329, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %331 = bitcast <4 x i64> %330 to <8 x float>
  %332 = fmul <8 x float> %319, %331
  %333 = fmul <8 x float> %304, %318
  %334 = fmul <8 x float> %333, %331
  %335 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %127, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %336 = bitcast <8 x float> %335 to <4 x i64>
  %337 = bitcast <8 x float> %332 to <4 x i64>
  %338 = xor <4 x i64> %336, <i64 -1, i64 -1, i64 -1, i64 -1>
  %339 = and <4 x i64> %337, %338
  %340 = bitcast <8 x float> %334 to <4 x i64>
  %341 = and <4 x i64> %340, %338
  %342 = xor <4 x i64> %339, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %343 = xor <4 x i64> %341, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %344 = bitcast <4 x i64> %342 to <8 x float>
  %345 = bitcast <4 x i64> %343 to <8 x float>
  %346 = fadd <8 x float> %344, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %347 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %346
  %348 = fadd <8 x float> %347, %344
  %349 = fadd <8 x float> %348, %345
  %350 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %346, <8 x float> %127, <8 x float> %5) #8
  %351 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %349, <8 x float> %140, <8 x float> %5) #8
  %352 = fadd <8 x float> %350, %351
  %353 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %352, <8 x float> %7) #8
  %354 = bitcast <8 x float> %353 to <4 x i64>
  %355 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %356 = xor <4 x i64> %355, %354
  %357 = bitcast <4 x i64> %356 to <8 x float>
  %358 = fcmp uno <8 x float> %4, zeroinitializer
  %359 = sext <8 x i1> %358 to <8 x i32>
  %360 = bitcast <8 x i32> %359 to <8 x float>
  %361 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %357, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %360) #8
  ret <8 x float> %361
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erfcf8_u15avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #8
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>, i8 17) #8
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>, i8 17) #8
  %8 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>, i8 17) #8
  %9 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = and <2 x i64> %10, <i64 -17587891081216, i64 -17587891081216>
  %13 = and <2 x i64> %11, <i64 -17587891081216, i64 -17587891081216>
  %14 = shufflevector <2 x i64> %12, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %15 = shufflevector <2 x i64> %13, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = shufflevector <4 x i64> %14, <4 x i64> %15, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %17 = bitcast <4 x i64> %16 to <8 x float>
  %18 = fsub <8 x float> %4, %17
  %19 = bitcast <8 x float> %9 to <4 x i64>
  %20 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %22 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fsub <8 x float> %9, %27
  %29 = fmul <8 x float> %17, %27
  %30 = fadd <8 x float> %29, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %31 = fmul <8 x float> %28, %17
  %32 = fadd <8 x float> %31, %30
  %33 = fmul <8 x float> %18, %27
  %34 = fadd <8 x float> %33, %32
  %35 = fmul <8 x float> %18, %28
  %36 = fadd <8 x float> %35, %34
  %37 = bitcast <8 x float> %36 to <4 x i64>
  %38 = xor <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = xor <4 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fadd <8 x float> %41, %27
  %43 = fadd <8 x float> %28, %42
  %44 = fmul <8 x float> %27, zeroinitializer
  %45 = fadd <8 x float> %44, %43
  %46 = fmul <8 x float> %28, zeroinitializer
  %47 = fadd <8 x float> %46, %45
  %48 = fmul <8 x float> %9, %39
  %49 = fadd <8 x float> %47, %48
  %50 = fmul <8 x float> %9, zeroinitializer
  %51 = fsub <8 x float> zeroinitializer, %50
  %52 = fmul <8 x float> %9, %51
  %53 = fadd <8 x float> %52, %49
  %54 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> %6) #8
  %55 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> zeroinitializer, <8 x float> %6) #8
  %56 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000>, <8 x float> <float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000>, <8 x float> %7) #8
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000>, <8 x float> %6) #8
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %57, <8 x float> <float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000>, <8 x float> %5) #8
  %59 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000>, <8 x float> <float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000>, <8 x float> %7) #8
  %60 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> <float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000>, <8 x float> %6) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %60, <8 x float> <float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000>, <8 x float> %5) #8
  %62 = fmul <8 x float> %54, %58
  %63 = fadd <8 x float> %62, %61
  %64 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000>, <8 x float> <float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000>, <8 x float> %7) #8
  %65 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000>, <8 x float> %6) #8
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> <float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000>, <8 x float> %5) #8
  %67 = fmul <8 x float> %54, %63
  %68 = fadd <8 x float> %67, %66
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000>, <8 x float> <float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000>, <8 x float> %7) #8
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> <float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000>, <8 x float> %6) #8
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %70, <8 x float> <float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000>, <8 x float> %5) #8
  %72 = fmul <8 x float> %54, %68
  %73 = fadd <8 x float> %72, %71
  %74 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000>, <8 x float> <float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000>, <8 x float> %7) #8
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000>, <8 x float> %6) #8
  %76 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000>, <8 x float> %5) #8
  %77 = fmul <8 x float> %54, %73
  %78 = fadd <8 x float> %77, %76
  %79 = bitcast <8 x float> %54 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %82 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %83 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x i64> %83, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x i64> %84, <4 x i64> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %87 = bitcast <4 x i64> %86 to <8 x float>
  %88 = fsub <8 x float> %54, %87
  %89 = bitcast <8 x float> %78 to <4 x i64>
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %91 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %92 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %93 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fsub <8 x float> %78, %97
  %99 = fmul <8 x float> %54, %78
  %100 = bitcast <8 x float> %99 to <4 x i64>
  %101 = xor <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <4 x i64> %101 to <8 x float>
  %103 = fmul <8 x float> %87, %97
  %104 = fadd <8 x float> %103, %102
  %105 = fmul <8 x float> %88, %97
  %106 = fadd <8 x float> %105, %104
  %107 = fmul <8 x float> %98, %87
  %108 = fadd <8 x float> %107, %106
  %109 = fmul <8 x float> %88, %98
  %110 = fadd <8 x float> %109, %108
  %111 = fmul <8 x float> %55, %78
  %112 = fadd <8 x float> %111, %110
  %113 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000>, <8 x float> <float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000>, <8 x float> %7) #8
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000>, <8 x float> <float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000>, <8 x float> %7) #8
  %115 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %113, <8 x float> <float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000>, <8 x float> %6) #8
  %116 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %114, <8 x float> <float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000>, <8 x float> %6) #8
  %117 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %115, <8 x float> <float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000>, <8 x float> %5) #8
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %116, <8 x float> <float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000>, <8 x float> %5) #8
  %119 = fadd <8 x float> %99, %117
  %120 = fsub <8 x float> %119, %99
  %121 = fsub <8 x float> %119, %120
  %122 = fsub <8 x float> %99, %121
  %123 = fsub <8 x float> %117, %120
  %124 = fadd <8 x float> %123, %122
  %125 = fadd <8 x float> %118, %112
  %126 = fadd <8 x float> %124, %125
  %127 = bitcast <8 x float> %119 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %130 = and <2 x i64> %128, <i64 -17587891081216, i64 -17587891081216>
  %131 = and <2 x i64> %129, <i64 -17587891081216, i64 -17587891081216>
  %132 = shufflevector <2 x i64> %130, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %133 = shufflevector <2 x i64> %131, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %134 = shufflevector <4 x i64> %132, <4 x i64> %133, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = fsub <8 x float> %119, %135
  %137 = fmul <8 x float> %54, %119
  %138 = bitcast <8 x float> %137 to <4 x i64>
  %139 = xor <4 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <4 x i64> %139 to <8 x float>
  %141 = fmul <8 x float> %87, %135
  %142 = fadd <8 x float> %141, %140
  %143 = fmul <8 x float> %136, %87
  %144 = fadd <8 x float> %143, %142
  %145 = fmul <8 x float> %88, %135
  %146 = fadd <8 x float> %145, %144
  %147 = fmul <8 x float> %88, %136
  %148 = fadd <8 x float> %147, %146
  %149 = fmul <8 x float> %55, %119
  %150 = fadd <8 x float> %149, %148
  %151 = fmul <8 x float> %54, %126
  %152 = fadd <8 x float> %151, %150
  %153 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000>, <8 x float> <float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000>, <8 x float> %7) #8
  %154 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000>, <8 x float> <float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000>, <8 x float> %7) #8
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %153, <8 x float> <float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000>, <8 x float> %6) #8
  %156 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %154, <8 x float> <float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000>, <8 x float> %6) #8
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %155, <8 x float> <float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000>, <8 x float> %5) #8
  %158 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %156, <8 x float> <float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000>, <8 x float> %5) #8
  %159 = fadd <8 x float> %137, %157
  %160 = fsub <8 x float> %159, %137
  %161 = fsub <8 x float> %159, %160
  %162 = fsub <8 x float> %137, %161
  %163 = fsub <8 x float> %157, %160
  %164 = fadd <8 x float> %163, %162
  %165 = fadd <8 x float> %158, %152
  %166 = fadd <8 x float> %164, %165
  %167 = bitcast <8 x float> %159 to <4 x i64>
  %168 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %169 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %170 = and <2 x i64> %168, <i64 -17587891081216, i64 -17587891081216>
  %171 = and <2 x i64> %169, <i64 -17587891081216, i64 -17587891081216>
  %172 = shufflevector <2 x i64> %170, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %173 = shufflevector <2 x i64> %171, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = shufflevector <4 x i64> %172, <4 x i64> %173, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %175 = bitcast <4 x i64> %174 to <8 x float>
  %176 = fsub <8 x float> %159, %175
  %177 = fmul <8 x float> %54, %159
  %178 = bitcast <8 x float> %177 to <4 x i64>
  %179 = xor <4 x i64> %178, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %180 = bitcast <4 x i64> %179 to <8 x float>
  %181 = fmul <8 x float> %87, %175
  %182 = fadd <8 x float> %181, %180
  %183 = fmul <8 x float> %176, %87
  %184 = fadd <8 x float> %183, %182
  %185 = fmul <8 x float> %88, %175
  %186 = fadd <8 x float> %185, %184
  %187 = fmul <8 x float> %88, %176
  %188 = fadd <8 x float> %187, %186
  %189 = fmul <8 x float> %55, %159
  %190 = fadd <8 x float> %189, %188
  %191 = fmul <8 x float> %54, %166
  %192 = fadd <8 x float> %191, %190
  %193 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000>, <8 x float> <float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000>, <8 x float> %7) #8
  %194 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000>, <8 x float> <float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000>, <8 x float> %7) #8
  %195 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %193, <8 x float> <float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000>, <8 x float> %6) #8
  %196 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %194, <8 x float> <float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000>, <8 x float> %6) #8
  %197 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %195, <8 x float> <float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000>, <8 x float> %5) #8
  %198 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %196, <8 x float> <float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000>, <8 x float> %5) #8
  %199 = fadd <8 x float> %177, %197
  %200 = fsub <8 x float> %199, %177
  %201 = fsub <8 x float> %199, %200
  %202 = fsub <8 x float> %177, %201
  %203 = fsub <8 x float> %197, %200
  %204 = fadd <8 x float> %203, %202
  %205 = fadd <8 x float> %198, %192
  %206 = fadd <8 x float> %204, %205
  %207 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %208 = bitcast <4 x i64> %207 to <8 x float>
  %209 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %208, <8 x float> %199, <8 x float> %6) #8
  %210 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %206, <8 x float> %6) #8
  %211 = bitcast <8 x float> %209 to <4 x i64>
  %212 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = shufflevector <4 x i64> %211, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %214 = and <2 x i64> %212, <i64 -17587891081216, i64 -17587891081216>
  %215 = and <2 x i64> %213, <i64 -17587891081216, i64 -17587891081216>
  %216 = shufflevector <2 x i64> %214, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %217 = shufflevector <2 x i64> %215, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %218 = shufflevector <4 x i64> %216, <4 x i64> %217, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %219 = bitcast <4 x i64> %218 to <8 x float>
  %220 = fsub <8 x float> %209, %219
  %221 = fmul <8 x float> %209, %4
  %222 = bitcast <8 x float> %221 to <4 x i64>
  %223 = xor <4 x i64> %222, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %224 = bitcast <4 x i64> %223 to <8 x float>
  %225 = fmul <8 x float> %17, %219
  %226 = fadd <8 x float> %225, %224
  %227 = fmul <8 x float> %220, %17
  %228 = fadd <8 x float> %227, %226
  %229 = fmul <8 x float> %18, %219
  %230 = fadd <8 x float> %229, %228
  %231 = fmul <8 x float> %18, %220
  %232 = fadd <8 x float> %231, %230
  %233 = fmul <8 x float> %210, %4
  %234 = fadd <8 x float> %233, %232
  %235 = fadd <8 x float> %199, %221
  %236 = fsub <8 x float> %235, %221
  %237 = fsub <8 x float> %235, %236
  %238 = fsub <8 x float> %221, %237
  %239 = fsub <8 x float> %199, %236
  %240 = fadd <8 x float> %239, %238
  %241 = fadd <8 x float> %206, %234
  %242 = fadd <8 x float> %240, %241
  %243 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %235, <8 x float> %221, <8 x float> %6) #8
  %244 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %242, <8 x float> %234, <8 x float> %6) #8
  %245 = fadd <8 x float> %243, %244
  %246 = fmul <8 x float> %245, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %247 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %246) #8
  %248 = bitcast <8 x i32> %247 to <4 x i64>
  %249 = shufflevector <4 x i64> %248, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %250 = shufflevector <4 x i64> %248, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %251 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %247) #8
  %252 = fmul <8 x float> %251, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %253 = fadd <8 x float> %243, %252
  %254 = fsub <8 x float> %253, %243
  %255 = fsub <8 x float> %253, %254
  %256 = fsub <8 x float> %243, %255
  %257 = fsub <8 x float> %252, %254
  %258 = fadd <8 x float> %257, %256
  %259 = fadd <8 x float> %244, %258
  %260 = fmul <8 x float> %251, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %261 = fadd <8 x float> %260, %253
  %262 = fsub <8 x float> %261, %253
  %263 = fsub <8 x float> %261, %262
  %264 = fsub <8 x float> %253, %263
  %265 = fsub <8 x float> %260, %262
  %266 = fadd <8 x float> %265, %264
  %267 = fadd <8 x float> %266, %259
  %268 = fmul <8 x float> %261, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %269 = fadd <8 x float> %268, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %270 = fmul <8 x float> %261, %269
  %271 = fadd <8 x float> %270, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %272 = fmul <8 x float> %261, %271
  %273 = fadd <8 x float> %272, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %274 = bitcast <8 x float> %261 to <4 x i64>
  %275 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %276 = shufflevector <4 x i64> %274, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %277 = and <2 x i64> %275, <i64 -17587891081216, i64 -17587891081216>
  %278 = and <2 x i64> %276, <i64 -17587891081216, i64 -17587891081216>
  %279 = shufflevector <2 x i64> %277, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %280 = shufflevector <2 x i64> %278, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %281 = shufflevector <4 x i64> %279, <4 x i64> %280, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %282 = bitcast <4 x i64> %281 to <8 x float>
  %283 = fsub <8 x float> %261, %282
  %284 = bitcast <8 x float> %273 to <4 x i64>
  %285 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = shufflevector <4 x i64> %284, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %287 = and <2 x i64> %285, <i64 -17587891081216, i64 -17587891081216>
  %288 = and <2 x i64> %286, <i64 -17587891081216, i64 -17587891081216>
  %289 = shufflevector <2 x i64> %287, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %291 = shufflevector <4 x i64> %289, <4 x i64> %290, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %292 = bitcast <4 x i64> %291 to <8 x float>
  %293 = fsub <8 x float> %273, %292
  %294 = fmul <8 x float> %261, %273
  %295 = bitcast <8 x float> %294 to <4 x i64>
  %296 = xor <4 x i64> %295, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %297 = bitcast <4 x i64> %296 to <8 x float>
  %298 = fmul <8 x float> %282, %292
  %299 = fadd <8 x float> %298, %297
  %300 = fmul <8 x float> %283, %292
  %301 = fadd <8 x float> %300, %299
  %302 = fmul <8 x float> %293, %282
  %303 = fadd <8 x float> %302, %301
  %304 = fmul <8 x float> %283, %293
  %305 = fadd <8 x float> %304, %303
  %306 = fmul <8 x float> %267, %273
  %307 = fadd <8 x float> %306, %305
  %308 = fadd <8 x float> %294, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %309 = fsub <8 x float> %308, %294
  %310 = fsub <8 x float> %308, %309
  %311 = fsub <8 x float> %294, %310
  %312 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %309
  %313 = fadd <8 x float> %312, %311
  %314 = fadd <8 x float> %313, %307
  %315 = bitcast <8 x float> %308 to <4 x i64>
  %316 = shufflevector <4 x i64> %315, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %317 = shufflevector <4 x i64> %315, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %318 = and <2 x i64> %316, <i64 -17587891081216, i64 -17587891081216>
  %319 = and <2 x i64> %317, <i64 -17587891081216, i64 -17587891081216>
  %320 = shufflevector <2 x i64> %318, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %321 = shufflevector <2 x i64> %319, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %322 = shufflevector <4 x i64> %320, <4 x i64> %321, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %323 = bitcast <4 x i64> %322 to <8 x float>
  %324 = fsub <8 x float> %308, %323
  %325 = fmul <8 x float> %261, %308
  %326 = bitcast <8 x float> %325 to <4 x i64>
  %327 = xor <4 x i64> %326, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %328 = bitcast <4 x i64> %327 to <8 x float>
  %329 = fmul <8 x float> %282, %323
  %330 = fadd <8 x float> %329, %328
  %331 = fmul <8 x float> %283, %323
  %332 = fadd <8 x float> %331, %330
  %333 = fmul <8 x float> %324, %282
  %334 = fadd <8 x float> %333, %332
  %335 = fmul <8 x float> %283, %324
  %336 = fadd <8 x float> %335, %334
  %337 = fmul <8 x float> %261, %314
  %338 = fadd <8 x float> %336, %337
  %339 = fmul <8 x float> %267, %308
  %340 = fadd <8 x float> %339, %338
  %341 = fadd <8 x float> %325, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %342 = fsub <8 x float> %341, %325
  %343 = fsub <8 x float> %341, %342
  %344 = fsub <8 x float> %325, %343
  %345 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %342
  %346 = fadd <8 x float> %345, %344
  %347 = fadd <8 x float> %346, %340
  %348 = fmul <8 x float> %261, %261
  %349 = bitcast <8 x float> %348 to <4 x i64>
  %350 = xor <4 x i64> %349, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %351 = bitcast <4 x i64> %350 to <8 x float>
  %352 = fmul <8 x float> %282, %282
  %353 = fadd <8 x float> %352, %351
  %354 = fadd <8 x float> %282, %282
  %355 = fmul <8 x float> %354, %283
  %356 = fadd <8 x float> %355, %353
  %357 = fmul <8 x float> %283, %283
  %358 = fadd <8 x float> %357, %356
  %359 = fadd <8 x float> %267, %267
  %360 = fmul <8 x float> %261, %359
  %361 = fadd <8 x float> %360, %358
  %362 = shufflevector <4 x i64> %349, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %363 = shufflevector <4 x i64> %349, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %364 = and <2 x i64> %362, <i64 -17587891081216, i64 -17587891081216>
  %365 = and <2 x i64> %363, <i64 -17587891081216, i64 -17587891081216>
  %366 = shufflevector <2 x i64> %364, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %367 = shufflevector <2 x i64> %365, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %368 = shufflevector <4 x i64> %366, <4 x i64> %367, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %369 = bitcast <4 x i64> %368 to <8 x float>
  %370 = fsub <8 x float> %348, %369
  %371 = bitcast <8 x float> %341 to <4 x i64>
  %372 = shufflevector <4 x i64> %371, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %373 = shufflevector <4 x i64> %371, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %374 = and <2 x i64> %372, <i64 -17587891081216, i64 -17587891081216>
  %375 = and <2 x i64> %373, <i64 -17587891081216, i64 -17587891081216>
  %376 = shufflevector <2 x i64> %374, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %377 = shufflevector <2 x i64> %375, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %378 = shufflevector <4 x i64> %376, <4 x i64> %377, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %379 = bitcast <4 x i64> %378 to <8 x float>
  %380 = fsub <8 x float> %341, %379
  %381 = fmul <8 x float> %348, %341
  %382 = bitcast <8 x float> %381 to <4 x i64>
  %383 = xor <4 x i64> %382, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %384 = bitcast <4 x i64> %383 to <8 x float>
  %385 = fmul <8 x float> %369, %379
  %386 = fadd <8 x float> %385, %384
  %387 = fmul <8 x float> %370, %379
  %388 = fadd <8 x float> %387, %386
  %389 = fmul <8 x float> %380, %369
  %390 = fadd <8 x float> %389, %388
  %391 = fmul <8 x float> %370, %380
  %392 = fadd <8 x float> %391, %390
  %393 = fmul <8 x float> %348, %347
  %394 = fadd <8 x float> %392, %393
  %395 = fmul <8 x float> %341, %361
  %396 = fadd <8 x float> %395, %394
  %397 = fadd <8 x float> %261, %381
  %398 = fsub <8 x float> %397, %261
  %399 = fsub <8 x float> %397, %398
  %400 = fsub <8 x float> %261, %399
  %401 = fsub <8 x float> %381, %398
  %402 = fadd <8 x float> %401, %400
  %403 = fadd <8 x float> %267, %396
  %404 = fadd <8 x float> %402, %403
  %405 = fadd <8 x float> %397, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %406 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %405
  %407 = fadd <8 x float> %397, %406
  %408 = fadd <8 x float> %407, %404
  %409 = bitcast <2 x i64> %249 to <4 x i32>
  %410 = ashr <4 x i32> %409, <i32 1, i32 1, i32 1, i32 1>
  %411 = bitcast <2 x i64> %250 to <4 x i32>
  %412 = ashr <4 x i32> %411, <i32 1, i32 1, i32 1, i32 1>
  %413 = shl <4 x i32> %410, <i32 23, i32 23, i32 23, i32 23>
  %414 = add <4 x i32> %413, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %415 = shl <4 x i32> %412, <i32 23, i32 23, i32 23, i32 23>
  %416 = add <4 x i32> %415, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %417 = bitcast <4 x i32> %414 to <2 x i64>
  %418 = bitcast <4 x i32> %416 to <2 x i64>
  %419 = shufflevector <2 x i64> %417, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %420 = shufflevector <2 x i64> %418, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %421 = shufflevector <4 x i64> %419, <4 x i64> %420, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %422 = bitcast <4 x i64> %421 to <8 x float>
  %423 = fmul <8 x float> %405, %422
  %424 = sub <4 x i32> %409, %410
  %425 = sub <4 x i32> %411, %412
  %426 = shl <4 x i32> %424, <i32 23, i32 23, i32 23, i32 23>
  %427 = add <4 x i32> %426, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %428 = shl <4 x i32> %425, <i32 23, i32 23, i32 23, i32 23>
  %429 = add <4 x i32> %428, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %430 = bitcast <4 x i32> %427 to <2 x i64>
  %431 = bitcast <4 x i32> %429 to <2 x i64>
  %432 = shufflevector <2 x i64> %430, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %433 = shufflevector <2 x i64> %431, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %434 = shufflevector <4 x i64> %432, <4 x i64> %433, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %435 = bitcast <4 x i64> %434 to <8 x float>
  %436 = fmul <8 x float> %423, %435
  %437 = fmul <8 x float> %408, %422
  %438 = fmul <8 x float> %437, %435
  %439 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %243, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %440 = bitcast <8 x float> %439 to <4 x i64>
  %441 = bitcast <8 x float> %436 to <4 x i64>
  %442 = xor <4 x i64> %440, <i64 -1, i64 -1, i64 -1, i64 -1>
  %443 = and <4 x i64> %441, %442
  %444 = bitcast <8 x float> %438 to <4 x i64>
  %445 = and <4 x i64> %444, %442
  %446 = bitcast <4 x i64> %443 to <8 x float>
  %447 = bitcast <4 x i64> %445 to <8 x float>
  %448 = shufflevector <4 x i64> %443, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %449 = shufflevector <4 x i64> %443, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %450 = and <2 x i64> %448, <i64 -17587891081216, i64 -17587891081216>
  %451 = and <2 x i64> %449, <i64 -17587891081216, i64 -17587891081216>
  %452 = shufflevector <2 x i64> %450, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %453 = shufflevector <2 x i64> %451, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %454 = shufflevector <4 x i64> %452, <4 x i64> %453, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %455 = bitcast <4 x i64> %454 to <8 x float>
  %456 = fsub <8 x float> %446, %455
  %457 = fmul <8 x float> %54, %446
  %458 = bitcast <8 x float> %457 to <4 x i64>
  %459 = xor <4 x i64> %458, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %460 = bitcast <4 x i64> %459 to <8 x float>
  %461 = fmul <8 x float> %87, %455
  %462 = fadd <8 x float> %461, %460
  %463 = fmul <8 x float> %456, %87
  %464 = fadd <8 x float> %463, %462
  %465 = fmul <8 x float> %88, %455
  %466 = fadd <8 x float> %465, %464
  %467 = fmul <8 x float> %88, %456
  %468 = fadd <8 x float> %467, %466
  %469 = fmul <8 x float> %55, %446
  %470 = fadd <8 x float> %469, %468
  %471 = fmul <8 x float> %54, %447
  %472 = fadd <8 x float> %470, %471
  %473 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %457, <8 x float> %446, <8 x float> %6) #8
  %474 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %472, <8 x float> %447, <8 x float> %6) #8
  %475 = fadd <8 x float> %473, %474
  %476 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %475, <8 x float> %8) #8
  %477 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %478 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %479 = bitcast <2 x i64> %477 to <4 x i32>
  %480 = ashr <4 x i32> %479, <i32 31, i32 31, i32 31, i32 31>
  %481 = bitcast <4 x i32> %480 to <2 x i64>
  %482 = bitcast <2 x i64> %478 to <4 x i32>
  %483 = ashr <4 x i32> %482, <i32 31, i32 31, i32 31, i32 31>
  %484 = bitcast <4 x i32> %483 to <2 x i64>
  %485 = shufflevector <2 x i64> %481, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %486 = shufflevector <2 x i64> %484, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %487 = shufflevector <4 x i64> %485, <4 x i64> %486, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %488 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %476
  %489 = bitcast <4 x i64> %487 to <8 x float>
  %490 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %476, <8 x float> %488, <8 x float> %489) #8
  %491 = fcmp uno <8 x float> %0, zeroinitializer
  %492 = sext <8 x i1> %491 to <8 x i32>
  %493 = bitcast <8 x i32> %492 to <8 x float>
  %494 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %490, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %493) #8
  ret <8 x float> %494
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif8_u05avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  tail call void @Sleef_sincospif8_u05avx(%struct.vfloat2* sret %0, <8 x float> %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif8_u35avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = bitcast <2 x i64> %6 to <4 x i32>
  %9 = lshr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <2 x i64> %7 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 31, i32 31, i32 31, i32 31>
  %12 = xor <4 x i32> %9, <i32 1, i32 1, i32 1, i32 1>
  %13 = add <4 x i32> %12, %8
  %14 = xor <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %15 = add <4 x i32> %14, %10
  %16 = bitcast <4 x i32> %13 to <2 x i64>
  %17 = bitcast <4 x i32> %15 to <2 x i64>
  %18 = and <2 x i64> %16, <i64 -4294967298, i64 -4294967298>
  %19 = and <2 x i64> %17, <i64 -4294967298, i64 -4294967298>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <2 x i64> %19, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = shufflevector <4 x i64> %20, <4 x i64> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = bitcast <4 x i64> %22 to <8 x i32>
  %24 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %23) #8
  %25 = fsub <8 x float> %3, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fmul <8 x float> %26, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %28 = fadd <8 x float> %27, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %29 = fmul <8 x float> %26, %28
  %30 = fadd <8 x float> %29, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %33 = fmul <8 x float> %25, %32
  %34 = fmul <8 x float> %26, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %35 = fadd <8 x float> %34, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %36 = fmul <8 x float> %26, %35
  %37 = fadd <8 x float> %36, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %38 = fmul <8 x float> %26, %37
  %39 = fadd <8 x float> %38, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %40 = fmul <8 x float> %26, %39
  %41 = fadd <8 x float> %40, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = and <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %43 = icmp eq <4 x i32> %42, zeroinitializer
  %44 = sext <4 x i1> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  %46 = and <4 x i32> %15, <i32 2, i32 2, i32 2, i32 2>
  %47 = icmp eq <4 x i32> %46, zeroinitializer
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> %33, <8 x float> %53) #8
  %55 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %41, <8 x float> %53) #8
  %56 = and <4 x i32> %13, <i32 4, i32 4, i32 4, i32 4>
  %57 = icmp ne <4 x i32> %56, zeroinitializer
  %58 = sext <4 x i1> %57 to <4 x i32>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = and <4 x i32> %15, <i32 4, i32 4, i32 4, i32 4>
  %61 = icmp ne <4 x i32> %60, zeroinitializer
  %62 = sext <4 x i1> %61 to <4 x i32>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <2 x i64> %59, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <4 x i64> %64, <4 x i64> %65, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = and <4 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <8 x float> %54 to <4 x i64>
  %69 = xor <4 x i64> %67, %68
  %70 = bitcast <2 x i64> %18 to <4 x i32>
  %71 = add <4 x i32> %70, <i32 2, i32 2, i32 2, i32 2>
  %72 = bitcast <2 x i64> %19 to <4 x i32>
  %73 = add <4 x i32> %72, <i32 2, i32 2, i32 2, i32 2>
  %74 = and <4 x i32> %71, <i32 4, i32 4, i32 4, i32 4>
  %75 = icmp ne <4 x i32> %74, zeroinitializer
  %76 = sext <4 x i1> %75 to <4 x i32>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = and <4 x i32> %73, <i32 4, i32 4, i32 4, i32 4>
  %79 = icmp ne <4 x i32> %78, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %83 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = shufflevector <4 x i64> %82, <4 x i64> %83, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %85 = and <4 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <8 x float> %55 to <4 x i64>
  %87 = xor <4 x i64> %85, %86
  %88 = bitcast <8 x float> %1 to <4 x i64>
  %89 = and <4 x i64> %88, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %90, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #8
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = xor <4 x i64> %92, <i64 -1, i64 -1, i64 -1, i64 -1>
  %94 = and <4 x i64> %69, %93
  %95 = and <4 x i64> %87, %93
  %96 = fcmp oeq <8 x float> %90, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %97 = sext <8 x i1> %96 to <8 x i32>
  %98 = bitcast <8 x i32> %97 to <4 x i64>
  %99 = or <4 x i64> %94, %98
  %100 = or <4 x i64> %95, %98
  %101 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %99, <4 x i64>* %101, align 32, !alias.scope !31
  %102 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %103 = bitcast <8 x float>* %102 to <4 x i64>*
  store <4 x i64> %100, <4 x i64>* %103, align 32, !alias.scope !31
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modff8_avx(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32, !alias.scope !34
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32, !alias.scope !34
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_atanf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %4 = shufflevector <4 x i64> %2, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %5 = bitcast <2 x i64> %3 to <4 x i32>
  %6 = ashr <4 x i32> %5, <i32 31, i32 31, i32 31, i32 31>
  %7 = bitcast <4 x i32> %6 to <2 x i64>
  %8 = bitcast <2 x i64> %4 to <4 x i32>
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = and <2 x i64> %7, <i64 8589934594, i64 8589934594>
  %12 = and <2 x i64> %10, <i64 8589934594, i64 8589934594>
  %13 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <4 x i64> %13 to <8 x float>
  %15 = bitcast <2 x i64> %11 to <4 x i32>
  %16 = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %17 = bitcast <2 x i64> %12 to <4 x i32>
  %18 = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %19 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %14, i8 17) #8
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %20, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = bitcast <2 x i64> %11 to <16 x i8>
  %24 = bitcast <4 x i32> %16 to <16 x i8>
  %25 = bitcast <2 x i64> %21 to <16 x i8>
  %26 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %23, <16 x i8> %24, <16 x i8> %25) #8
  %27 = bitcast <2 x i64> %12 to <16 x i8>
  %28 = bitcast <4 x i32> %18 to <16 x i8>
  %29 = bitcast <2 x i64> %22 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %31, <8 x float> %19) #8
  %33 = fmul <8 x float> %32, %32
  %34 = fmul <8 x float> %33, %33
  %35 = fmul <8 x float> %34, %34
  %36 = fmul <8 x float> %33, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %37 = fadd <8 x float> %36, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %38 = fmul <8 x float> %33, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %39 = fadd <8 x float> %38, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %40 = fmul <8 x float> %34, %37
  %41 = fadd <8 x float> %39, %40
  %42 = fmul <8 x float> %33, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %43 = fadd <8 x float> %42, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %44 = fmul <8 x float> %33, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %45 = fadd <8 x float> %44, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %46 = fmul <8 x float> %34, %43
  %47 = fadd <8 x float> %45, %46
  %48 = fmul <8 x float> %35, %41
  %49 = fadd <8 x float> %47, %48
  %50 = fmul <8 x float> %33, %49
  %51 = fmul <8 x float> %32, %50
  %52 = fadd <8 x float> %32, %51
  %53 = bitcast <16 x i8> %26 to <4 x i32>
  %54 = and <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %55 = icmp ne <4 x i32> %54, zeroinitializer
  %56 = sext <4 x i1> %55 to <4 x i32>
  %57 = bitcast <4 x i32> %56 to <2 x i64>
  %58 = bitcast <16 x i8> %30 to <4 x i32>
  %59 = and <4 x i32> %58, <i32 1, i32 1, i32 1, i32 1>
  %60 = icmp ne <4 x i32> %59, zeroinitializer
  %61 = sext <4 x i1> %60 to <4 x i32>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %52
  %67 = bitcast <4 x i64> %65 to <8 x float>
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %52, <8 x float> %66, <8 x float> %67) #8
  %69 = and <4 x i32> %53, <i32 2, i32 2, i32 2, i32 2>
  %70 = icmp ne <4 x i32> %69, zeroinitializer
  %71 = sext <4 x i1> %70 to <4 x i32>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = and <4 x i32> %58, <i32 2, i32 2, i32 2, i32 2>
  %74 = icmp ne <4 x i32> %73, zeroinitializer
  %75 = sext <4 x i1> %74 to <4 x i32>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = shufflevector <2 x i64> %72, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = and <4 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <8 x float> %68 to <4 x i64>
  %82 = xor <4 x i64> %80, %81
  %83 = bitcast <4 x i64> %82 to <8 x float>
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_atan2f8_u35avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = bitcast <2 x i64> %7 to <4 x i32>
  %10 = ashr <4 x i32> %9, <i32 31, i32 31, i32 31, i32 31>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = bitcast <2 x i64> %8 to <4 x i32>
  %13 = ashr <4 x i32> %12, <i32 31, i32 31, i32 31, i32 31>
  %14 = bitcast <4 x i32> %13 to <2 x i64>
  %15 = and <2 x i64> %11, <i64 -4294967298, i64 -4294967298>
  %16 = and <2 x i64> %14, <i64 -4294967298, i64 -4294967298>
  %17 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <2 x i64> %15 to <4 x i32>
  %20 = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast <2 x i64> %16 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %18, <8 x float> %5, i8 17) #8
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = bitcast <2 x i64> %15 to <16 x i8>
  %28 = bitcast <4 x i32> %20 to <16 x i8>
  %29 = bitcast <2 x i64> %25 to <16 x i8>
  %30 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %27, <16 x i8> %28, <16 x i8> %29) #8
  %31 = bitcast <2 x i64> %16 to <16 x i8>
  %32 = bitcast <4 x i32> %22 to <16 x i8>
  %33 = bitcast <2 x i64> %26 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <16 x i8> %30 to <2 x i64>
  %36 = bitcast <16 x i8> %34 to <2 x i64>
  %37 = or <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %38, <8 x float> %23) #8
  %40 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %18, <8 x float> %5) #8
  %41 = fdiv <8 x float> %39, %40
  %42 = fmul <8 x float> %41, %41
  %43 = fmul <8 x float> %42, %42
  %44 = fmul <8 x float> %43, %43
  %45 = fmul <8 x float> %42, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %46 = fadd <8 x float> %45, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %47 = fmul <8 x float> %42, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %48 = fadd <8 x float> %47, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %49 = fmul <8 x float> %43, %46
  %50 = fadd <8 x float> %48, %49
  %51 = fmul <8 x float> %42, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %52 = fadd <8 x float> %51, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %53 = fmul <8 x float> %42, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %54 = fadd <8 x float> %53, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %55 = fmul <8 x float> %43, %52
  %56 = fadd <8 x float> %54, %55
  %57 = fmul <8 x float> %44, %50
  %58 = fadd <8 x float> %56, %57
  %59 = fmul <8 x float> %42, %58
  %60 = fmul <8 x float> %41, %59
  %61 = fadd <8 x float> %41, %60
  %62 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x i64> %62, <4 x i64> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast <4 x i64> %64 to <8 x i32>
  %66 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %65) #8
  %67 = fmul <8 x float> %66, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %68 = fadd <8 x float> %67, %61
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %71 = xor <4 x i64> %70, %69
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = fcmp oeq <8 x float> %18, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %74 = sext <8 x i1> %73 to <8 x i32>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = fcmp oeq <8 x float> %1, zeroinitializer
  %77 = or <8 x i1> %73, %76
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = or <4 x i64> %70, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %80 = and <4 x i64> %79, %75
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %81
  %83 = bitcast <8 x i32> %78 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> %82, <8 x float> %83) #8
  %85 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %86 = sext <8 x i1> %85 to <8 x i32>
  %87 = or <4 x i64> %70, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %88 = and <4 x i64> %87, %75
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %89
  %91 = bitcast <8 x i32> %86 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %84, <8 x float> %90, <8 x float> %91) #8
  %93 = fcmp oeq <8 x float> %0, zeroinitializer
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = shufflevector <2 x i64> %11, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <4 x i64> %95, <4 x i64> %96, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %98 = and <4 x i64> %97, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = bitcast <8 x i32> %94 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %92, <8 x float> %99, <8 x float> %100) #8
  %102 = fcmp uno <8 x float> %0, %1
  %103 = sext <8 x i1> %102 to <8 x i32>
  %104 = bitcast <8 x i32> %103 to <4 x i64>
  %105 = bitcast <8 x float> %101 to <4 x i64>
  %106 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = xor <4 x i64> %106, %105
  %108 = or <4 x i64> %107, %104
  %109 = bitcast <4 x i64> %108 to <8 x float>
  ret <8 x float> %109
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_asinf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #8
  %12 = fmul <8 x float> %9, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %13 = fadd <8 x float> %12, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %14 = fmul <8 x float> %9, %13
  %15 = fadd <8 x float> %14, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %16 = fmul <8 x float> %9, %15
  %17 = fadd <8 x float> %16, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %18 = fmul <8 x float> %9, %17
  %19 = fadd <8 x float> %18, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %20 = fmul <8 x float> %9, %11
  %21 = fmul <8 x float> %20, %19
  %22 = fadd <8 x float> %11, %21
  %23 = fmul <8 x float> %22, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %24 = fadd <8 x float> %23, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %24, <8 x float> %22, <8 x float> %5) #8
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = xor <4 x i64> %27, %26
  %29 = bitcast <4 x i64> %28 to <8 x float>
  ret <8 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_acosf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #8
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #8
  %17 = fmul <8 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %18 = fadd <8 x float> %17, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %19 = fmul <8 x float> %10, %18
  %20 = fadd <8 x float> %19, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %21 = fmul <8 x float> %10, %20
  %22 = fadd <8 x float> %21, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %23 = fmul <8 x float> %10, %22
  %24 = fadd <8 x float> %23, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %25 = fmul <8 x float> %10, %16
  %26 = fmul <8 x float> %25, %24
  %27 = bitcast <8 x float> %16 to <4 x i64>
  %28 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = xor <4 x i64> %28, %27
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = bitcast <8 x float> %26 to <4 x i64>
  %32 = xor <4 x i64> %28, %31
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fadd <8 x float> %30, %33
  %35 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %34
  %36 = fadd <8 x float> %16, %26
  %37 = fmul <8 x float> %36, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %37, <8 x float> %35, <8 x float> %5) #8
  %39 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %42 = and <4 x i64> %40, %41
  %43 = bitcast <8 x float> %38 to <4 x i64>
  %44 = xor <4 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fadd <8 x float> %45, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %47 = bitcast <4 x i64> %42 to <8 x float>
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> %46, <8 x float> %47) #8
  ret <8 x float> %48
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_atan2f8_u10avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @Sleef_atan2f8_u10avx(<8 x float> %0, <8 x float> %1)
  ret <8 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_asinf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #8
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #8
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = and <2 x i64> %12, <i64 -17587891081216, i64 -17587891081216>
  %15 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %16 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %17 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <4 x i64> %16, <4 x i64> %17, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %19 = bitcast <4 x i64> %18 to <8 x float>
  %20 = fsub <8 x float> %10, %19
  %21 = fmul <8 x float> %10, %10
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = xor <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fmul <8 x float> %19, %19
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %20, %19
  %28 = fadd <8 x float> %27, %26
  %29 = fadd <8 x float> %27, %28
  %30 = fmul <8 x float> %20, %20
  %31 = fadd <8 x float> %30, %29
  %32 = fadd <8 x float> %9, %21
  %33 = fsub <8 x float> %32, %9
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %9, %34
  %36 = fsub <8 x float> %21, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %37, %31
  %39 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %40, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = and <2 x i64> %41, <i64 -17587891081216, i64 -17587891081216>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = shufflevector <2 x i64> %43, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <4 x i64> %45, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fsub <8 x float> %39, %48
  %50 = fmul <8 x float> %19, %48
  %51 = fadd <8 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <8 x float> %49, %19
  %53 = fadd <8 x float> %52, %51
  %54 = fmul <8 x float> %20, %48
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %20, %49
  %57 = fadd <8 x float> %56, %55
  %58 = xor <4 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = fmul <8 x float> %57, %59
  %61 = bitcast <8 x float> %32 to <4 x i64>
  %62 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %63 = shufflevector <4 x i64> %61, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %64 = and <2 x i64> %62, <i64 -17587891081216, i64 -17587891081216>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fsub <8 x float> %32, %69
  %71 = fmul <8 x float> %39, %32
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = xor <4 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = fmul <8 x float> %48, %69
  %76 = fadd <8 x float> %75, %74
  %77 = fmul <8 x float> %70, %48
  %78 = fadd <8 x float> %77, %76
  %79 = fmul <8 x float> %49, %69
  %80 = fadd <8 x float> %79, %78
  %81 = fmul <8 x float> %49, %70
  %82 = fadd <8 x float> %81, %80
  %83 = fmul <8 x float> %32, %60
  %84 = fadd <8 x float> %82, %83
  %85 = fmul <8 x float> %39, %38
  %86 = fadd <8 x float> %85, %84
  %87 = fmul <8 x float> %71, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %88 = fmul <8 x float> %86, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %89 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %87, <8 x float> %4, <8 x float> %5) #8
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> zeroinitializer, <8 x float> %5) #8
  %91 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %89, <8 x float> zeroinitializer, <8 x float> %93) #8
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> zeroinitializer, <8 x float> %93) #8
  %96 = fmul <8 x float> %9, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %97 = fadd <8 x float> %96, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %98 = fmul <8 x float> %9, %97
  %99 = fadd <8 x float> %98, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %100 = fmul <8 x float> %9, %99
  %101 = fadd <8 x float> %100, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %102 = fmul <8 x float> %9, %101
  %103 = fadd <8 x float> %102, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %104 = fmul <8 x float> %9, %94
  %105 = fmul <8 x float> %104, %103
  %106 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %94
  %107 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %106
  %108 = fsub <8 x float> %107, %94
  %109 = fadd <8 x float> %108, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %110 = fsub <8 x float> %109, %95
  %111 = fsub <8 x float> %106, %105
  %112 = fsub <8 x float> %106, %111
  %113 = fsub <8 x float> %112, %105
  %114 = fadd <8 x float> %110, %113
  %115 = fadd <8 x float> %94, %105
  %116 = fadd <8 x float> %111, %114
  %117 = fmul <8 x float> %116, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %117, <8 x float> %115, <8 x float> %5) #8
  %119 = bitcast <8 x float> %118 to <4 x i64>
  %120 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <4 x i64> %120, %119
  %122 = bitcast <4 x i64> %121 to <8 x float>
  ret <8 x float> %122
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_acosf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #8
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #8
  %12 = bitcast <8 x float> %11 to <4 x i64>
  %13 = shufflevector <4 x i64> %12, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %14 = shufflevector <4 x i64> %12, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %15 = and <2 x i64> %13, <i64 -17587891081216, i64 -17587891081216>
  %16 = and <2 x i64> %14, <i64 -17587891081216, i64 -17587891081216>
  %17 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %18 = shufflevector <2 x i64> %16, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %19 = shufflevector <4 x i64> %17, <4 x i64> %18, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  %21 = fsub <8 x float> %11, %20
  %22 = fmul <8 x float> %11, %11
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %23, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = bitcast <4 x i64> %24 to <8 x float>
  %26 = fmul <8 x float> %20, %20
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %21, %20
  %29 = fadd <8 x float> %28, %27
  %30 = fadd <8 x float> %28, %29
  %31 = fmul <8 x float> %21, %21
  %32 = fadd <8 x float> %31, %30
  %33 = fadd <8 x float> %10, %22
  %34 = fsub <8 x float> %33, %10
  %35 = fsub <8 x float> %33, %34
  %36 = fsub <8 x float> %10, %35
  %37 = fsub <8 x float> %22, %34
  %38 = fadd <8 x float> %37, %36
  %39 = fadd <8 x float> %38, %32
  %40 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %43 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %44 = and <2 x i64> %42, <i64 -17587891081216, i64 -17587891081216>
  %45 = and <2 x i64> %43, <i64 -17587891081216, i64 -17587891081216>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = fsub <8 x float> %40, %49
  %51 = fmul <8 x float> %20, %49
  %52 = fadd <8 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %53 = fmul <8 x float> %50, %20
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %21, %49
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %21, %50
  %58 = fadd <8 x float> %57, %56
  %59 = xor <4 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fmul <8 x float> %58, %60
  %62 = bitcast <8 x float> %33 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %33, %70
  %72 = fmul <8 x float> %40, %33
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = xor <4 x i64> %73, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = fmul <8 x float> %49, %70
  %77 = fadd <8 x float> %76, %75
  %78 = fmul <8 x float> %71, %49
  %79 = fadd <8 x float> %78, %77
  %80 = fmul <8 x float> %50, %70
  %81 = fadd <8 x float> %80, %79
  %82 = fmul <8 x float> %50, %71
  %83 = fadd <8 x float> %82, %81
  %84 = fmul <8 x float> %33, %61
  %85 = fadd <8 x float> %83, %84
  %86 = fmul <8 x float> %40, %39
  %87 = fadd <8 x float> %86, %85
  %88 = fmul <8 x float> %72, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %89 = fmul <8 x float> %87, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> %4, <8 x float> %5) #8
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %89, <8 x float> zeroinitializer, <8 x float> %5) #8
  %92 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %93 = sext <8 x i1> %92 to <8 x i32>
  %94 = bitcast <8 x i32> %93 to <8 x float>
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> zeroinitializer, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %91, <8 x float> zeroinitializer, <8 x float> %94) #8
  %97 = fmul <8 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %98 = fadd <8 x float> %97, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %99 = fmul <8 x float> %10, %98
  %100 = fadd <8 x float> %99, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %101 = fmul <8 x float> %10, %100
  %102 = fadd <8 x float> %101, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %103 = fmul <8 x float> %10, %102
  %104 = fadd <8 x float> %103, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %105 = fmul <8 x float> %10, %95
  %106 = fmul <8 x float> %105, %104
  %107 = bitcast <8 x float> %95 to <4 x i64>
  %108 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = xor <4 x i64> %108, %107
  %110 = bitcast <4 x i64> %109 to <8 x float>
  %111 = bitcast <8 x float> %106 to <4 x i64>
  %112 = xor <4 x i64> %108, %111
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fadd <8 x float> %110, %113
  %115 = fsub <8 x float> %110, %114
  %116 = fadd <8 x float> %115, %113
  %117 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %114
  %118 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %117
  %119 = fsub <8 x float> %118, %114
  %120 = fadd <8 x float> %119, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %121 = fsub <8 x float> %120, %116
  %122 = fadd <8 x float> %95, %106
  %123 = fsub <8 x float> %95, %122
  %124 = fadd <8 x float> %106, %123
  %125 = fadd <8 x float> %96, %124
  %126 = fmul <8 x float> %122, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %127 = fmul <8 x float> %125, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %128 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> %117, <8 x float> %5) #8
  %129 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %127, <8 x float> %121, <8 x float> %5) #8
  %130 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #8
  %131 = bitcast <8 x float> %130 to <4 x i64>
  %132 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %133 = and <4 x i64> %131, %132
  %134 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %128
  %135 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %134
  %136 = fsub <8 x float> %135, %128
  %137 = fadd <8 x float> %136, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %138 = fsub <8 x float> %137, %129
  %139 = bitcast <4 x i64> %133 to <8 x float>
  %140 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %128, <8 x float> %134, <8 x float> %139) #8
  %141 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %129, <8 x float> %138, <8 x float> %139) #8
  %142 = fadd <8 x float> %140, %141
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_atanf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_atanf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_logf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = fmul <8 x float> %52, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %54 = fadd <8 x float> %53, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %55 = fmul <8 x float> %52, %54
  %56 = fadd <8 x float> %55, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %57 = fmul <8 x float> %52, %56
  %58 = fadd <8 x float> %57, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %59 = fmul <8 x float> %52, %58
  %60 = fadd <8 x float> %59, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %61 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <4 x i64> %61, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = bitcast <4 x i64> %63 to <8 x i32>
  %65 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %64) #8
  %66 = fmul <8 x float> %65, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %67 = fmul <8 x float> %51, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %71) #8
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %5, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %79) #8
  %81 = fcmp oeq <8 x float> %5, zeroinitializer
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %83) #8
  ret <8 x float> %84
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_expf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %8 = fmul <8 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <8 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <8 x float> %11, %11
  %23 = fmul <8 x float> %22, %21
  %24 = fadd <8 x float> %11, %23
  %25 = fadd <8 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = bitcast <2 x i64> %5 to <4 x i32>
  %27 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = bitcast <2 x i64> %6 to <4 x i32>
  %29 = ashr <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %30 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = shl <4 x i32> %29, <i32 23, i32 23, i32 23, i32 23>
  %33 = add <4 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <4 x i32> %31 to <2 x i64>
  %35 = bitcast <4 x i32> %33 to <2 x i64>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <2 x i64> %35, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <4 x i64> %36, <4 x i64> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = fmul <8 x float> %25, %39
  %41 = sub <4 x i32> %26, %27
  %42 = sub <4 x i32> %28, %29
  %43 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %46 = add <4 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fmul <8 x float> %40, %52
  %54 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = bitcast <8 x float> %53 to <4 x i64>
  %57 = xor <4 x i64> %55, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %56, %57
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #8
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %59, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %60) #8
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_cbrtf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #8
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %7, <8 x float> %5) #8
  %9 = bitcast <8 x float> %8 to <4 x i64>
  %10 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %11 = shufflevector <4 x i64> %9, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %12 = bitcast <2 x i64> %10 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = bitcast <2 x i64> %11 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %18) #8
  %20 = bitcast <2 x i64> %17 to <16 x i8>
  %21 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <16 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <16 x i8> %20) #8
  %22 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %23 = bitcast <16 x i8> %19 to <4 x i32>
  %24 = sub <4 x i32> %22, %23
  %25 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %26 = bitcast <16 x i8> %21 to <4 x i32>
  %27 = sub <4 x i32> %25, %26
  %28 = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %29 = add <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = bitcast <4 x i32> %29 to <2 x i64>
  %32 = xor <4 x i32> %24, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = xor <4 x i32> %27, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = ashr <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %35 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %36 = shl <4 x i32> %34, <i32 23, i32 23, i32 23, i32 23>
  %37 = add <4 x i32> %36, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %38 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %39 = add <4 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <4 x i32> %37 to <2 x i64>
  %41 = bitcast <4 x i32> %39 to <2 x i64>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fmul <8 x float> %45, %0
  %47 = sub <4 x i32> %32, %34
  %48 = sub <4 x i32> %33, %35
  %49 = shl <4 x i32> %47, <i32 23, i32 23, i32 23, i32 23>
  %50 = add <4 x i32> %49, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %51 = shl <4 x i32> %48, <i32 23, i32 23, i32 23, i32 23>
  %52 = add <4 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <4 x i32> %50 to <2 x i64>
  %54 = bitcast <4 x i32> %52 to <2 x i64>
  %55 = shufflevector <2 x i64> %53, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <4 x i64> %55, <4 x i64> %56, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %46, %58
  %60 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %62 = shufflevector <4 x i64> %60, <4 x i64> %61, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %63 = bitcast <4 x i64> %62 to <8 x i32>
  %64 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %63) #8
  %65 = fadd <8 x float> %64, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %66 = fmul <8 x float> %65, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %67 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %66) #8
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %67) #8
  %72 = fmul <8 x float> %71, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %73 = fsub <8 x float> %65, %72
  %74 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %73) #8
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %77 = shufflevector <4 x i64> %75, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %78 = bitcast <2 x i64> %76 to <4 x i32>
  %79 = icmp eq <4 x i32> %78, <i32 1, i32 1, i32 1, i32 1>
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %77 to <4 x i32>
  %83 = icmp eq <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = sext <4 x i1> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <4 x i64> %86, <4 x i64> %87, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %89 = bitcast <4 x i64> %88 to <8 x float>
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %89) #8
  %91 = icmp eq <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %92 = sext <4 x i1> %91 to <4 x i32>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = icmp eq <4 x i32> %82, <i32 2, i32 2, i32 2, i32 2>
  %95 = sext <4 x i1> %94 to <4 x i32>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <2 x i64> %96, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %99 = shufflevector <4 x i64> %97, <4 x i64> %98, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %100) #8
  %102 = bitcast <2 x i64> %69 to <4 x i32>
  %103 = add <4 x i32> %102, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %104 = bitcast <2 x i64> %70 to <4 x i32>
  %105 = add <4 x i32> %104, <i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %106 = ashr <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %107 = ashr <4 x i32> %105, <i32 1, i32 1, i32 1, i32 1>
  %108 = shl <4 x i32> %106, <i32 23, i32 23, i32 23, i32 23>
  %109 = add <4 x i32> %108, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %110 = shl <4 x i32> %107, <i32 23, i32 23, i32 23, i32 23>
  %111 = add <4 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <4 x i32> %109 to <2 x i64>
  %113 = bitcast <4 x i32> %111 to <2 x i64>
  %114 = shufflevector <2 x i64> %112, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %115 = shufflevector <2 x i64> %113, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %116 = shufflevector <4 x i64> %114, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = fmul <8 x float> %101, %117
  %119 = sub <4 x i32> %103, %106
  %120 = sub <4 x i32> %105, %107
  %121 = shl <4 x i32> %119, <i32 23, i32 23, i32 23, i32 23>
  %122 = add <4 x i32> %121, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %123 = shl <4 x i32> %120, <i32 23, i32 23, i32 23, i32 23>
  %124 = add <4 x i32> %123, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %125 = bitcast <4 x i32> %122 to <2 x i64>
  %126 = bitcast <4 x i32> %124 to <2 x i64>
  %127 = shufflevector <2 x i64> %125, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <2 x i64> %126, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %129 = shufflevector <4 x i64> %127, <4 x i64> %128, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %130 = bitcast <4 x i64> %129 to <8 x float>
  %131 = fmul <8 x float> %118, %130
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = bitcast <8 x float> %59 to <4 x i64>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %132
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = and <4 x i64> %133, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fmul <8 x float> %138, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %140 = fadd <8 x float> %139, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %141 = fmul <8 x float> %140, %138
  %142 = fadd <8 x float> %141, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %143 = fmul <8 x float> %142, %138
  %144 = fadd <8 x float> %143, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %145 = fmul <8 x float> %144, %138
  %146 = fadd <8 x float> %145, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %147 = fmul <8 x float> %146, %138
  %148 = fadd <8 x float> %147, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %149 = fmul <8 x float> %148, %138
  %150 = fmul <8 x float> %148, %149
  %151 = fmul <8 x float> %150, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %152 = fmul <8 x float> %148, %150
  %153 = fadd <8 x float> %152, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %154 = fmul <8 x float> %151, %153
  %155 = fsub <8 x float> %150, %154
  %156 = fmul <8 x float> %155, %136
  ret <8 x float> %156
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_cbrtf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_cbrtf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_logf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x i32>
  %53 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %52) #8
  %54 = bitcast <8 x float> %53 to <4 x i64>
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %56 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %57 = and <2 x i64> %55, <i64 -17587891081216, i64 -17587891081216>
  %58 = and <2 x i64> %56, <i64 -17587891081216, i64 -17587891081216>
  %59 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> %60, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = fsub <8 x float> %53, %62
  %64 = fmul <8 x float> %53, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %65 = bitcast <8 x float> %64 to <4 x i64>
  %66 = xor <4 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = fmul <8 x float> %62, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %62, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %71 = fadd <8 x float> %70, %69
  %72 = fmul <8 x float> %63, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %73 = fadd <8 x float> %72, %71
  %74 = fmul <8 x float> %63, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %75 = fadd <8 x float> %74, %73
  %76 = fmul <8 x float> %53, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %77 = fadd <8 x float> %76, %75
  %78 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %79 = fadd <8 x float> %78, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %80 = fsub <8 x float> %78, %79
  %81 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %80
  %82 = fsub <8 x float> %34, %79
  %83 = fadd <8 x float> %82, %81
  %84 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = fadd <8 x float> %84, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %86
  %88 = fsub <8 x float> %34, %85
  %89 = fadd <8 x float> %88, %87
  %90 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %84
  %91 = bitcast <8 x float> %84 to <4 x i64>
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %93 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %94 = and <2 x i64> %92, <i64 -17587891081216, i64 -17587891081216>
  %95 = and <2 x i64> %93, <i64 -17587891081216, i64 -17587891081216>
  %96 = shufflevector <2 x i64> %94, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x i64> %96, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %99 = bitcast <4 x i64> %98 to <8 x float>
  %100 = fsub <8 x float> %84, %99
  %101 = bitcast <8 x float> %90 to <4 x i64>
  %102 = shufflevector <4 x i64> %101, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %103 = shufflevector <4 x i64> %101, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %104 = and <2 x i64> %102, <i64 -17587891081216, i64 -17587891081216>
  %105 = and <2 x i64> %103, <i64 -17587891081216, i64 -17587891081216>
  %106 = shufflevector <2 x i64> %104, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %107 = shufflevector <2 x i64> %105, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %108 = shufflevector <4 x i64> %106, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = fsub <8 x float> %90, %109
  %111 = bitcast <8 x float> %78 to <4 x i64>
  %112 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %113 = shufflevector <4 x i64> %111, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %114 = and <2 x i64> %112, <i64 -17587891081216, i64 -17587891081216>
  %115 = and <2 x i64> %113, <i64 -17587891081216, i64 -17587891081216>
  %116 = shufflevector <2 x i64> %114, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <4 x i64> %116, <4 x i64> %117, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = fsub <8 x float> %78, %119
  %121 = fmul <8 x float> %78, %90
  %122 = fmul <8 x float> %99, %109
  %123 = fadd <8 x float> %122, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %124 = fmul <8 x float> %110, %99
  %125 = fadd <8 x float> %124, %123
  %126 = fmul <8 x float> %100, %109
  %127 = fadd <8 x float> %126, %125
  %128 = fmul <8 x float> %100, %110
  %129 = fadd <8 x float> %128, %127
  %130 = bitcast <8 x float> %129 to <4 x i64>
  %131 = xor <4 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <4 x i64> %131 to <8 x float>
  %133 = bitcast <8 x float> %121 to <4 x i64>
  %134 = xor <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = fmul <8 x float> %119, %109
  %137 = fadd <8 x float> %136, %135
  %138 = fmul <8 x float> %110, %119
  %139 = fadd <8 x float> %138, %137
  %140 = fmul <8 x float> %120, %109
  %141 = fadd <8 x float> %140, %139
  %142 = fmul <8 x float> %120, %110
  %143 = fadd <8 x float> %142, %141
  %144 = fmul <8 x float> %121, %132
  %145 = fadd <8 x float> %143, %144
  %146 = fmul <8 x float> %121, %89
  %147 = fsub <8 x float> %83, %146
  %148 = fmul <8 x float> %90, %147
  %149 = fadd <8 x float> %148, %145
  %150 = fmul <8 x float> %121, %121
  %151 = fmul <8 x float> %150, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %152 = fadd <8 x float> %151, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %153 = fmul <8 x float> %150, %152
  %154 = fadd <8 x float> %153, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %155 = fmul <8 x float> %121, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %156 = fmul <8 x float> %149, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %157 = fadd <8 x float> %64, %155
  %158 = fsub <8 x float> %64, %157
  %159 = fadd <8 x float> %155, %158
  %160 = fadd <8 x float> %77, %159
  %161 = fadd <8 x float> %160, %156
  %162 = fmul <8 x float> %121, %150
  %163 = fmul <8 x float> %162, %154
  %164 = fadd <8 x float> %157, %163
  %165 = fsub <8 x float> %157, %164
  %166 = fadd <8 x float> %163, %165
  %167 = fadd <8 x float> %166, %161
  %168 = fadd <8 x float> %164, %167
  %169 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %170 = sext <8 x i1> %169 to <8 x i32>
  %171 = bitcast <8 x i32> %170 to <8 x float>
  %172 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %168, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %171) #8
  %173 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %174 = bitcast <8 x float> %173 to <4 x i64>
  %175 = fcmp uno <8 x float> %5, zeroinitializer
  %176 = sext <8 x i1> %175 to <8 x i32>
  %177 = bitcast <8 x i32> %176 to <4 x i64>
  %178 = or <4 x i64> %174, %177
  %179 = bitcast <4 x i64> %178 to <8 x float>
  %180 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %172, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %179) #8
  %181 = fcmp oeq <8 x float> %5, zeroinitializer
  %182 = sext <8 x i1> %181 to <8 x i32>
  %183 = bitcast <8 x i32> %182 to <8 x float>
  %184 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %180, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %183) #8
  ret <8 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_powf8_u10avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @Sleef_powf8_u10avx(<8 x float> %0, <8 x float> %1)
  ret <8 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_sinhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_sinhf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_coshf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_coshf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_tanhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_tanhf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_sinhf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = fmul <8 x float> %10, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %12 = fadd <8 x float> %11, %4
  %13 = fmul <8 x float> %10, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %14 = fadd <8 x float> %13, %12
  %15 = fmul <8 x float> %14, %14
  %16 = fmul <8 x float> %15, %15
  %17 = fmul <8 x float> %14, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %18 = fadd <8 x float> %17, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %19 = fmul <8 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %20 = fadd <8 x float> %19, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %21 = fmul <8 x float> %14, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %22 = fadd <8 x float> %21, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = fmul <8 x float> %15, %20
  %24 = fadd <8 x float> %22, %23
  %25 = fmul <8 x float> %16, %18
  %26 = fadd <8 x float> %25, %24
  %27 = fmul <8 x float> %15, %26
  %28 = fadd <8 x float> %14, %27
  %29 = bitcast <2 x i64> %8 to <4 x i32>
  %30 = icmp eq <4 x i32> %29, zeroinitializer
  %31 = sext <4 x i1> %30 to <4 x i32>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = bitcast <2 x i64> %9 to <4 x i32>
  %34 = icmp eq <4 x i32> %33, zeroinitializer
  %35 = sext <4 x i1> %34 to <4 x i32>
  %36 = bitcast <4 x i32> %35 to <2 x i64>
  %37 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = shufflevector <2 x i64> %36, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x i64> %37, <4 x i64> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = fadd <8 x float> %28, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %41 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %42 = ashr <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %43 = shl <4 x i32> %41, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %46 = add <4 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <4 x i32> %44 to <2 x i64>
  %48 = bitcast <4 x i32> %46 to <2 x i64>
  %49 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <4 x i64> %49, <4 x i64> %50, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fmul <8 x float> %40, %52
  %54 = sub <4 x i32> %29, %41
  %55 = sub <4 x i32> %33, %42
  %56 = shl <4 x i32> %54, <i32 23, i32 23, i32 23, i32 23>
  %57 = add <4 x i32> %56, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %58 = shl <4 x i32> %55, <i32 23, i32 23, i32 23, i32 23>
  %59 = add <4 x i32> %58, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %60 = bitcast <4 x i32> %57 to <2 x i64>
  %61 = bitcast <4 x i32> %59 to <2 x i64>
  %62 = shufflevector <2 x i64> %60, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <4 x i64> %62, <4 x i64> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = fmul <8 x float> %53, %65
  %67 = fadd <8 x float> %66, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %68 = bitcast <4 x i64> %39 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %28, <8 x float> %68) #8
  %70 = fadd <8 x float> %69, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %71 = fadd <8 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %72 = fdiv <8 x float> %70, %71
  %73 = fmul <8 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %74 = fmul <8 x float> %73, %72
  %75 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %76 = bitcast <8 x float> %75 to <4 x i64>
  %77 = fcmp uno <8 x float> %74, zeroinitializer
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = bitcast <8 x i32> %78 to <4 x i64>
  %80 = or <4 x i64> %79, %76
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %81) #8
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = xor <4 x i64> %84, %83
  %86 = fcmp uno <8 x float> %0, zeroinitializer
  %87 = sext <8 x i1> %86 to <8 x i32>
  %88 = bitcast <8 x i32> %87 to <4 x i64>
  %89 = or <4 x i64> %85, %88
  %90 = bitcast <4 x i64> %89 to <8 x float>
  ret <8 x float> %90
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_coshf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #8
  %7 = bitcast <8 x i32> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #8
  %11 = fmul <8 x float> %10, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %12 = fadd <8 x float> %11, %4
  %13 = fmul <8 x float> %10, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %14 = fadd <8 x float> %13, %12
  %15 = fmul <8 x float> %14, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <8 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <8 x float> %14, %16
  %18 = fadd <8 x float> %17, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %19 = fmul <8 x float> %14, %18
  %20 = fadd <8 x float> %19, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %21 = fmul <8 x float> %14, %20
  %22 = fadd <8 x float> %21, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %23 = fmul <8 x float> %14, %22
  %24 = fadd <8 x float> %23, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %25 = fmul <8 x float> %14, %14
  %26 = fmul <8 x float> %25, %24
  %27 = fadd <8 x float> %14, %26
  %28 = fadd <8 x float> %27, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = bitcast <2 x i64> %8 to <4 x i32>
  %30 = ashr <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %31 = bitcast <2 x i64> %9 to <4 x i32>
  %32 = ashr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = shl <4 x i32> %30, <i32 23, i32 23, i32 23, i32 23>
  %34 = add <4 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = shl <4 x i32> %32, <i32 23, i32 23, i32 23, i32 23>
  %36 = add <4 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <4 x i32> %34 to <2 x i64>
  %38 = bitcast <4 x i32> %36 to <2 x i64>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <4 x i64> %39, <4 x i64> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = fmul <8 x float> %28, %42
  %44 = sub <4 x i32> %29, %30
  %45 = sub <4 x i32> %31, %32
  %46 = shl <4 x i32> %44, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = shl <4 x i32> %45, <i32 23, i32 23, i32 23, i32 23>
  %49 = add <4 x i32> %48, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %50 = bitcast <4 x i32> %47 to <2 x i64>
  %51 = bitcast <4 x i32> %49 to <2 x i64>
  %52 = shufflevector <2 x i64> %50, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = shufflevector <4 x i64> %52, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fmul <8 x float> %43, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = bitcast <8 x float> %56 to <4 x i64>
  %60 = xor <4 x i64> %58, <i64 -1, i64 -1, i64 -1, i64 -1>
  %61 = and <4 x i64> %59, %60
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #8
  %64 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %63) #8
  %65 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %64
  %66 = fmul <8 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %67 = fadd <8 x float> %66, %65
  %68 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #8
  %69 = bitcast <8 x float> %68 to <4 x i64>
  %70 = fcmp uno <8 x float> %67, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = or <4 x i64> %72, %69
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %74) #8
  %76 = fcmp uno <8 x float> %0, zeroinitializer
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <4 x i64>
  %79 = bitcast <8 x float> %75 to <4 x i64>
  %80 = or <4 x i64> %79, %78
  %81 = bitcast <4 x i64> %80 to <8 x float>
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_tanhf8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #8
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #8
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %5, %12
  %14 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <8 x float> %14, %13
  %16 = fmul <8 x float> %15, %15
  %17 = fmul <8 x float> %16, %16
  %18 = fmul <8 x float> %15, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %19 = fadd <8 x float> %18, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %20 = fmul <8 x float> %15, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %21 = fadd <8 x float> %20, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %22 = fmul <8 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %23 = fadd <8 x float> %22, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = fmul <8 x float> %16, %21
  %25 = fadd <8 x float> %23, %24
  %26 = fmul <8 x float> %17, %19
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %16, %27
  %29 = fadd <8 x float> %15, %28
  %30 = bitcast <2 x i64> %9 to <4 x i32>
  %31 = icmp eq <4 x i32> %30, zeroinitializer
  %32 = sext <4 x i1> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = bitcast <2 x i64> %10 to <4 x i32>
  %35 = icmp eq <4 x i32> %34, zeroinitializer
  %36 = sext <4 x i1> %35 to <4 x i32>
  %37 = bitcast <4 x i32> %36 to <2 x i64>
  %38 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <4 x i64> %38, <4 x i64> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %41 = fadd <8 x float> %29, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = ashr <4 x i32> %30, <i32 1, i32 1, i32 1, i32 1>
  %43 = ashr <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  %44 = shl <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %45 = add <4 x i32> %44, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %46 = shl <4 x i32> %43, <i32 23, i32 23, i32 23, i32 23>
  %47 = add <4 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <4 x i32> %45 to <2 x i64>
  %49 = bitcast <4 x i32> %47 to <2 x i64>
  %50 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = shufflevector <2 x i64> %49, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %50, <4 x i64> %51, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %53 = bitcast <4 x i64> %52 to <8 x float>
  %54 = fmul <8 x float> %41, %53
  %55 = sub <4 x i32> %30, %42
  %56 = sub <4 x i32> %34, %43
  %57 = shl <4 x i32> %55, <i32 23, i32 23, i32 23, i32 23>
  %58 = add <4 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = bitcast <4 x i32> %58 to <2 x i64>
  %62 = bitcast <4 x i32> %60 to <2 x i64>
  %63 = shufflevector <2 x i64> %61, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %64 = shufflevector <2 x i64> %62, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = bitcast <4 x i64> %65 to <8 x float>
  %67 = fmul <8 x float> %54, %66
  %68 = fadd <8 x float> %67, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %69 = bitcast <4 x i64> %40 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %29, <8 x float> %69) #8
  %71 = fadd <8 x float> %70, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %72 = fdiv <8 x float> %70, %71
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #8
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %72, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %77, %74
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #8
  %81 = bitcast <8 x float> %80 to <4 x i64>
  %82 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = xor <4 x i64> %82, %81
  %84 = fcmp uno <8 x float> %0, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = or <4 x i64> %83, %86
  %88 = bitcast <4 x i64> %87 to <8 x float>
  ret <8 x float> %88
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_asinhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_asinhf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_acoshf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_acoshf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_atanhf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_atanhf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_exp2f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = fmul <8 x float> %7, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %9 = fadd <8 x float> %8, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %10 = fmul <8 x float> %7, %9
  %11 = fadd <8 x float> %10, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %12 = fmul <8 x float> %7, %11
  %13 = fadd <8 x float> %12, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %14 = fmul <8 x float> %7, %13
  %15 = fadd <8 x float> %14, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %16 = fmul <8 x float> %7, %15
  %17 = fadd <8 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = and <2 x i64> %19, <i64 -17587891081216, i64 -17587891081216>
  %22 = and <2 x i64> %20, <i64 -17587891081216, i64 -17587891081216>
  %23 = shufflevector <2 x i64> %21, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <4 x i64> %23, <4 x i64> %24, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = fsub <8 x float> %17, %26
  %28 = bitcast <8 x float> %7 to <4 x i64>
  %29 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %28, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = and <2 x i64> %30, <i64 -17587891081216, i64 -17587891081216>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %33, <4 x i64> %34, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = fsub <8 x float> %7, %36
  %38 = fmul <8 x float> %7, %17
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fmul <8 x float> %36, %26
  %43 = fadd <8 x float> %42, %41
  %44 = fmul <8 x float> %27, %36
  %45 = fadd <8 x float> %44, %43
  %46 = fmul <8 x float> %37, %26
  %47 = fadd <8 x float> %46, %45
  %48 = fmul <8 x float> %37, %27
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %50
  %52 = fadd <8 x float> %38, %51
  %53 = fadd <8 x float> %52, %49
  %54 = fadd <8 x float> %50, %53
  %55 = bitcast <2 x i64> %5 to <4 x i32>
  %56 = ashr <4 x i32> %55, <i32 1, i32 1, i32 1, i32 1>
  %57 = bitcast <2 x i64> %6 to <4 x i32>
  %58 = ashr <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>
  %59 = shl <4 x i32> %56, <i32 23, i32 23, i32 23, i32 23>
  %60 = add <4 x i32> %59, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %61 = shl <4 x i32> %58, <i32 23, i32 23, i32 23, i32 23>
  %62 = add <4 x i32> %61, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %63 = bitcast <4 x i32> %60 to <2 x i64>
  %64 = bitcast <4 x i32> %62 to <2 x i64>
  %65 = shufflevector <2 x i64> %63, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <8 x float>
  %69 = fmul <8 x float> %54, %68
  %70 = sub <4 x i32> %55, %56
  %71 = sub <4 x i32> %57, %58
  %72 = shl <4 x i32> %70, <i32 23, i32 23, i32 23, i32 23>
  %73 = add <4 x i32> %72, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %74 = shl <4 x i32> %71, <i32 23, i32 23, i32 23, i32 23>
  %75 = add <4 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <4 x i32> %73 to <2 x i64>
  %77 = bitcast <4 x i32> %75 to <2 x i64>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <2 x i64> %77, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <4 x i64> %78, <4 x i64> %79, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fmul <8 x float> %69, %81
  %83 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %83) #8
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %84 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <4 x i64> %89 to <8 x float>
  ret <8 x float> %90
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_exp2f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #8
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %7 = fsub <8 x float> %0, %2
  %8 = fmul <8 x float> %7, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %9 = fadd <8 x float> %8, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %10 = fmul <8 x float> %7, %9
  %11 = fadd <8 x float> %10, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %12 = fmul <8 x float> %7, %11
  %13 = fadd <8 x float> %12, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %14 = fmul <8 x float> %7, %13
  %15 = fadd <8 x float> %14, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %16 = fmul <8 x float> %7, %15
  %17 = fadd <8 x float> %16, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %18 = fmul <8 x float> %7, %17
  %19 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %20 = bitcast <2 x i64> %5 to <4 x i32>
  %21 = ashr <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %22 = bitcast <2 x i64> %6 to <4 x i32>
  %23 = ashr <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %24 = shl <4 x i32> %21, <i32 23, i32 23, i32 23, i32 23>
  %25 = add <4 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = shl <4 x i32> %23, <i32 23, i32 23, i32 23, i32 23>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = bitcast <4 x i32> %25 to <2 x i64>
  %29 = bitcast <4 x i32> %27 to <2 x i64>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fmul <8 x float> %19, %33
  %35 = sub <4 x i32> %20, %21
  %36 = sub <4 x i32> %22, %23
  %37 = shl <4 x i32> %35, <i32 23, i32 23, i32 23, i32 23>
  %38 = add <4 x i32> %37, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %39 = shl <4 x i32> %36, <i32 23, i32 23, i32 23, i32 23>
  %40 = add <4 x i32> %39, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %41 = bitcast <4 x i32> %38 to <2 x i64>
  %42 = bitcast <4 x i32> %40 to <2 x i64>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = shufflevector <4 x i64> %43, <4 x i64> %44, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %46 = bitcast <4 x i64> %45 to <8 x float>
  %47 = fmul <8 x float> %34, %46
  %48 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #8
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %47, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %48) #8
  %50 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #8
  %51 = bitcast <8 x float> %50 to <4 x i64>
  %52 = bitcast <8 x float> %49 to <4 x i64>
  %53 = xor <4 x i64> %51, <i64 -1, i64 -1, i64 -1, i64 -1>
  %54 = and <4 x i64> %53, %52
  %55 = bitcast <4 x i64> %54 to <8 x float>
  ret <8 x float> %55
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_exp10f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fmul <8 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %13 = fadd <8 x float> %12, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %22 = fmul <8 x float> %11, %21
  %23 = fadd <8 x float> %22, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %24 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %23
  %25 = fadd <8 x float> %22, %24
  %26 = fadd <8 x float> %25, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %27 = bitcast <8 x float> %23 to <4 x i64>
  %28 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %29 = shufflevector <4 x i64> %27, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %30 = and <2 x i64> %28, <i64 -17587891081216, i64 -17587891081216>
  %31 = and <2 x i64> %29, <i64 -17587891081216, i64 -17587891081216>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <2 x i64> %31, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = shufflevector <4 x i64> %32, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <4 x i64> %34 to <8 x float>
  %36 = fsub <8 x float> %23, %35
  %37 = bitcast <8 x float> %11 to <4 x i64>
  %38 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %39 = shufflevector <4 x i64> %37, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = and <2 x i64> %39, <i64 -17587891081216, i64 -17587891081216>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <2 x i64> %41, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %44 = shufflevector <4 x i64> %42, <4 x i64> %43, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = fsub <8 x float> %11, %45
  %47 = fmul <8 x float> %11, %23
  %48 = bitcast <8 x float> %47 to <4 x i64>
  %49 = xor <4 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %45, %35
  %52 = fadd <8 x float> %51, %50
  %53 = fmul <8 x float> %36, %45
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %46, %35
  %56 = fadd <8 x float> %55, %54
  %57 = fmul <8 x float> %46, %36
  %58 = fadd <8 x float> %57, %56
  %59 = fmul <8 x float> %11, %26
  %60 = fadd <8 x float> %59, %58
  %61 = fadd <8 x float> %47, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %62 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %63 = fadd <8 x float> %47, %62
  %64 = fadd <8 x float> %63, %60
  %65 = fadd <8 x float> %61, %64
  %66 = bitcast <2 x i64> %6 to <4 x i32>
  %67 = ashr <4 x i32> %66, <i32 1, i32 1, i32 1, i32 1>
  %68 = bitcast <2 x i64> %7 to <4 x i32>
  %69 = ashr <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %70 = shl <4 x i32> %67, <i32 23, i32 23, i32 23, i32 23>
  %71 = add <4 x i32> %70, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %72 = shl <4 x i32> %69, <i32 23, i32 23, i32 23, i32 23>
  %73 = add <4 x i32> %72, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %74 = bitcast <4 x i32> %71 to <2 x i64>
  %75 = bitcast <4 x i32> %73 to <2 x i64>
  %76 = shufflevector <2 x i64> %74, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <4 x i64> %76, <4 x i64> %77, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = fmul <8 x float> %65, %79
  %81 = sub <4 x i32> %66, %67
  %82 = sub <4 x i32> %68, %69
  %83 = shl <4 x i32> %81, <i32 23, i32 23, i32 23, i32 23>
  %84 = add <4 x i32> %83, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %85 = shl <4 x i32> %82, <i32 23, i32 23, i32 23, i32 23>
  %86 = add <4 x i32> %85, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %87 = bitcast <4 x i32> %84 to <2 x i64>
  %88 = bitcast <4 x i32> %86 to <2 x i64>
  %89 = shufflevector <2 x i64> %87, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = shufflevector <2 x i64> %88, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %91 = shufflevector <4 x i64> %89, <4 x i64> %90, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = fmul <8 x float> %80, %92
  %94 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %95 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %93, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %94) #8
  %96 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %97 = bitcast <8 x float> %96 to <4 x i64>
  %98 = bitcast <8 x float> %95 to <4 x i64>
  %99 = xor <4 x i64> %97, <i64 -1, i64 -1, i64 -1, i64 -1>
  %100 = and <4 x i64> %99, %98
  %101 = bitcast <4 x i64> %100 to <8 x float>
  ret <8 x float> %101
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_exp10f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #8
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #8
  %5 = bitcast <8 x i32> %4 to <4 x i64>
  %6 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %7 = shufflevector <4 x i64> %5, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %8 = fmul <8 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %9 = fadd <8 x float> %8, %0
  %10 = fmul <8 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %11 = fadd <8 x float> %10, %9
  %12 = fmul <8 x float> %11, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %13 = fadd <8 x float> %12, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %14 = fmul <8 x float> %11, %13
  %15 = fadd <8 x float> %14, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %18 = fmul <8 x float> %11, %17
  %19 = fadd <8 x float> %18, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %20 = fmul <8 x float> %11, %19
  %21 = fadd <8 x float> %20, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %22 = fmul <8 x float> %11, %21
  %23 = fadd <8 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %24 = bitcast <2 x i64> %6 to <4 x i32>
  %25 = ashr <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %26 = bitcast <2 x i64> %7 to <4 x i32>
  %27 = ashr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = shl <4 x i32> %25, <i32 23, i32 23, i32 23, i32 23>
  %29 = add <4 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = shl <4 x i32> %27, <i32 23, i32 23, i32 23, i32 23>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <4 x i32> %29 to <2 x i64>
  %33 = bitcast <4 x i32> %31 to <2 x i64>
  %34 = shufflevector <2 x i64> %32, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <4 x i64> %34, <4 x i64> %35, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %37 = bitcast <4 x i64> %36 to <8 x float>
  %38 = fmul <8 x float> %23, %37
  %39 = sub <4 x i32> %24, %25
  %40 = sub <4 x i32> %26, %27
  %41 = shl <4 x i32> %39, <i32 23, i32 23, i32 23, i32 23>
  %42 = add <4 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = shl <4 x i32> %40, <i32 23, i32 23, i32 23, i32 23>
  %44 = add <4 x i32> %43, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %45 = bitcast <4 x i32> %42 to <2 x i64>
  %46 = bitcast <4 x i32> %44 to <2 x i64>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <2 x i64> %46, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i64> %47, <4 x i64> %48, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = fmul <8 x float> %38, %50
  %52 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #8
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %52) #8
  %54 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #8
  %55 = bitcast <8 x float> %54 to <4 x i64>
  %56 = bitcast <8 x float> %53 to <4 x i64>
  %57 = xor <4 x i64> %55, <i64 -1, i64 -1, i64 -1, i64 -1>
  %58 = and <4 x i64> %57, %56
  %59 = bitcast <4 x i64> %58 to <8 x float>
  ret <8 x float> %59
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_expm1f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_expm1f8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_log10f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_log10f8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_log2f8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %51
  %53 = fsub <8 x float> %34, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = fadd <8 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = fsub <8 x float> %55, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %57
  %59 = fsub <8 x float> %34, %56
  %60 = fadd <8 x float> %59, %58
  %61 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %62 = bitcast <8 x float> %55 to <4 x i64>
  %63 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %64 = shufflevector <4 x i64> %62, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %65 = and <2 x i64> %63, <i64 -17587891081216, i64 -17587891081216>
  %66 = and <2 x i64> %64, <i64 -17587891081216, i64 -17587891081216>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <2 x i64> %66, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = shufflevector <4 x i64> %67, <4 x i64> %68, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %70 = bitcast <4 x i64> %69 to <8 x float>
  %71 = fsub <8 x float> %55, %70
  %72 = bitcast <8 x float> %61 to <4 x i64>
  %73 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = shufflevector <4 x i64> %72, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = and <2 x i64> %73, <i64 -17587891081216, i64 -17587891081216>
  %76 = and <2 x i64> %74, <i64 -17587891081216, i64 -17587891081216>
  %77 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = shufflevector <2 x i64> %76, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = shufflevector <4 x i64> %77, <4 x i64> %78, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fsub <8 x float> %61, %80
  %82 = bitcast <8 x float> %49 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = and <2 x i64> %84, <i64 -17587891081216, i64 -17587891081216>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fsub <8 x float> %49, %90
  %92 = fmul <8 x float> %49, %61
  %93 = fmul <8 x float> %70, %80
  %94 = fadd <8 x float> %93, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %95 = fmul <8 x float> %81, %70
  %96 = fadd <8 x float> %95, %94
  %97 = fmul <8 x float> %71, %80
  %98 = fadd <8 x float> %97, %96
  %99 = fmul <8 x float> %71, %81
  %100 = fadd <8 x float> %99, %98
  %101 = bitcast <8 x float> %100 to <4 x i64>
  %102 = xor <4 x i64> %101, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %103 = bitcast <4 x i64> %102 to <8 x float>
  %104 = bitcast <8 x float> %92 to <4 x i64>
  %105 = xor <4 x i64> %104, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = fmul <8 x float> %90, %80
  %108 = fadd <8 x float> %107, %106
  %109 = fmul <8 x float> %81, %90
  %110 = fadd <8 x float> %109, %108
  %111 = fmul <8 x float> %91, %80
  %112 = fadd <8 x float> %111, %110
  %113 = fmul <8 x float> %91, %81
  %114 = fadd <8 x float> %113, %112
  %115 = fmul <8 x float> %92, %103
  %116 = fadd <8 x float> %114, %115
  %117 = fmul <8 x float> %92, %60
  %118 = fsub <8 x float> %54, %117
  %119 = fmul <8 x float> %61, %118
  %120 = fadd <8 x float> %119, %116
  %121 = fmul <8 x float> %92, %92
  %122 = fmul <8 x float> %121, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %123 = fadd <8 x float> %122, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %124 = fmul <8 x float> %121, %123
  %125 = fadd <8 x float> %124, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %126 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %127 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %128 = shufflevector <4 x i64> %126, <4 x i64> %127, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %129 = bitcast <4 x i64> %128 to <8 x i32>
  %130 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %129) #8
  %131 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = shufflevector <4 x i64> %104, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = and <2 x i64> %131, <i64 -17587891081216, i64 -17587891081216>
  %134 = and <2 x i64> %132, <i64 -17587891081216, i64 -17587891081216>
  %135 = shufflevector <2 x i64> %133, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %136 = shufflevector <2 x i64> %134, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %137 = shufflevector <4 x i64> %135, <4 x i64> %136, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fsub <8 x float> %92, %138
  %140 = fmul <8 x float> %92, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %141 = bitcast <8 x float> %140 to <4 x i64>
  %142 = xor <4 x i64> %141, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %143 = bitcast <4 x i64> %142 to <8 x float>
  %144 = fmul <8 x float> %138, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %145 = fadd <8 x float> %144, %143
  %146 = fmul <8 x float> %139, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %147 = fadd <8 x float> %146, %145
  %148 = fmul <8 x float> %138, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %149 = fadd <8 x float> %148, %147
  %150 = fmul <8 x float> %139, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %151 = fadd <8 x float> %150, %149
  %152 = fmul <8 x float> %92, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %153 = fadd <8 x float> %152, %151
  %154 = fmul <8 x float> %120, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %155 = fadd <8 x float> %153, %154
  %156 = fadd <8 x float> %130, %140
  %157 = fsub <8 x float> %156, %130
  %158 = fsub <8 x float> %156, %157
  %159 = fsub <8 x float> %130, %158
  %160 = fsub <8 x float> %140, %157
  %161 = fadd <8 x float> %160, %159
  %162 = fadd <8 x float> %161, %155
  %163 = fmul <8 x float> %92, %121
  %164 = fmul <8 x float> %163, %125
  %165 = fadd <8 x float> %156, %164
  %166 = fsub <8 x float> %165, %156
  %167 = fsub <8 x float> %165, %166
  %168 = fsub <8 x float> %156, %167
  %169 = fsub <8 x float> %164, %166
  %170 = fadd <8 x float> %169, %168
  %171 = fadd <8 x float> %170, %162
  %172 = fadd <8 x float> %165, %171
  %173 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %174 = sext <8 x i1> %173 to <8 x i32>
  %175 = bitcast <8 x i32> %174 to <8 x float>
  %176 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %172, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %175) #8
  %177 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %178 = bitcast <8 x float> %177 to <4 x i64>
  %179 = fcmp uno <8 x float> %5, zeroinitializer
  %180 = sext <8 x i1> %179 to <8 x i32>
  %181 = bitcast <8 x i32> %180 to <4 x i64>
  %182 = or <4 x i64> %178, %181
  %183 = bitcast <4 x i64> %182 to <8 x float>
  %184 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %176, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %183) #8
  %185 = fcmp oeq <8 x float> %5, zeroinitializer
  %186 = sext <8 x i1> %185 to <8 x i32>
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %184, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %187) #8
  ret <8 x float> %188
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_log2f8_u35avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %3 = bitcast <8 x float> %2 to <4 x i64>
  %4 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %4, <8 x float> %2) #8
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = bitcast <2 x i64> %8 to <4 x i32>
  %11 = lshr <4 x i32> %10, <i32 23, i32 23, i32 23, i32 23>
  %12 = bitcast <2 x i64> %9 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %11, <i32 255, i32 255, i32 255, i32 255>
  %15 = add nsw <4 x i32> %14, <i32 -127, i32 -127, i32 -127, i32 -127>
  %16 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = bitcast <8 x float> %5 to <4 x i64>
  %19 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %20 = shufflevector <4 x i64> %18, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %21 = shl nuw nsw <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %22 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %23 = bitcast <2 x i64> %19 to <4 x i32>
  %24 = add <4 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = sub <4 x i32> %24, %21
  %26 = bitcast <2 x i64> %20 to <4 x i32>
  %27 = add <4 x i32> %26, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %28 = sub <4 x i32> %27, %22
  %29 = bitcast <4 x i32> %25 to <2 x i64>
  %30 = bitcast <4 x i32> %28 to <2 x i64>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <2 x i64> %30, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %33 = shufflevector <4 x i64> %31, <4 x i64> %32, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast <4 x i64> %33 to <8 x float>
  %35 = add nsw <4 x i32> %14, <i32 -191, i32 -191, i32 -191, i32 -191>
  %36 = add nsw <4 x i32> %16, <i32 -191, i32 -191, i32 -191, i32 -191>
  %37 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = bitcast <4 x i32> %15 to <16 x i8>
  %40 = bitcast <4 x i32> %35 to <16 x i8>
  %41 = bitcast <2 x i64> %37 to <16 x i8>
  %42 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %39, <16 x i8> %40, <16 x i8> %41) #8
  %43 = bitcast <4 x i32> %17 to <16 x i8>
  %44 = bitcast <4 x i32> %36 to <16 x i8>
  %45 = bitcast <2 x i64> %38 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <16 x i8> %42 to <2 x i64>
  %48 = bitcast <16 x i8> %46 to <2 x i64>
  %49 = fadd <8 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %50 = fadd <8 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = fdiv <8 x float> %49, %50
  %52 = fmul <8 x float> %51, %51
  %53 = fmul <8 x float> %52, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %54 = fadd <8 x float> %53, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %55 = fmul <8 x float> %52, %54
  %56 = fadd <8 x float> %55, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %57 = fmul <8 x float> %51, %52
  %58 = shufflevector <2 x i64> %47, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <2 x i64> %48, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <4 x i64> %58, <4 x i64> %59, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %61 = bitcast <4 x i64> %60 to <8 x i32>
  %62 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #8
  %63 = fmul <8 x float> %51, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %64 = fadd <8 x float> %62, %63
  %65 = fmul <8 x float> %57, %56
  %66 = fadd <8 x float> %64, %65
  %67 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %69) #8
  %71 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = fcmp uno <8 x float> %5, zeroinitializer
  %74 = sext <8 x i1> %73 to <8 x i32>
  %75 = bitcast <8 x i32> %74 to <4 x i64>
  %76 = or <4 x i64> %72, %75
  %77 = bitcast <4 x i64> %76 to <8 x float>
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %70, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %77) #8
  %79 = fcmp oeq <8 x float> %5, zeroinitializer
  %80 = sext <8 x i1> %79 to <8 x i32>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %78, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %81) #8
  ret <8 x float> %82
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_log1pf8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %4 = bitcast <8 x float> %3 to <4 x i64>
  %5 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %5, <8 x float> %3) #8
  %7 = fmul <8 x float> %6, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %10 = shufflevector <4 x i64> %8, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %11 = bitcast <2 x i64> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %13 = bitcast <2 x i64> %10 to <4 x i32>
  %14 = lshr <4 x i32> %13, <i32 23, i32 23, i32 23, i32 23>
  %15 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %16 = add nsw <4 x i32> %15, <i32 -127, i32 -127, i32 -127, i32 -127>
  %17 = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %18 = add nsw <4 x i32> %17, <i32 -127, i32 -127, i32 -127, i32 -127>
  %19 = shl nuw nsw <4 x i32> %15, <i32 23, i32 23, i32 23, i32 23>
  %20 = shl nuw nsw <4 x i32> %17, <i32 23, i32 23, i32 23, i32 23>
  %21 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %19
  %22 = sub nsw <4 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %20
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = bitcast <4 x i32> %22 to <2 x i64>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fadd <8 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = fmul <8 x float> %28, %0
  %31 = fadd <8 x float> %30, %29
  %32 = add nsw <4 x i32> %15, <i32 -191, i32 -191, i32 -191, i32 -191>
  %33 = add nsw <4 x i32> %17, <i32 -191, i32 -191, i32 -191, i32 -191>
  %34 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %35 = shufflevector <4 x i64> %4, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %36 = bitcast <4 x i32> %16 to <16 x i8>
  %37 = bitcast <4 x i32> %32 to <16 x i8>
  %38 = bitcast <2 x i64> %34 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %36, <16 x i8> %37, <16 x i8> %38) #8
  %40 = bitcast <4 x i32> %18 to <16 x i8>
  %41 = bitcast <4 x i32> %33 to <16 x i8>
  %42 = bitcast <2 x i64> %35 to <16 x i8>
  %43 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %40, <16 x i8> %41, <16 x i8> %42) #8
  %44 = bitcast <16 x i8> %39 to <2 x i64>
  %45 = bitcast <16 x i8> %43 to <2 x i64>
  %46 = shufflevector <2 x i64> %44, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = shufflevector <4 x i64> %46, <4 x i64> %47, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %49 = bitcast <4 x i64> %48 to <8 x i32>
  %50 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %49) #8
  %51 = bitcast <8 x float> %50 to <4 x i64>
  %52 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %53 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %54 = and <2 x i64> %52, <i64 -17587891081216, i64 -17587891081216>
  %55 = and <2 x i64> %53, <i64 -17587891081216, i64 -17587891081216>
  %56 = shufflevector <2 x i64> %54, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %57 = shufflevector <2 x i64> %55, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = shufflevector <4 x i64> %56, <4 x i64> %57, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = bitcast <4 x i64> %58 to <8 x float>
  %60 = fsub <8 x float> %50, %59
  %61 = fmul <8 x float> %50, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %62 = bitcast <8 x float> %61 to <4 x i64>
  %63 = xor <4 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fmul <8 x float> %59, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %66 = fadd <8 x float> %65, %64
  %67 = fmul <8 x float> %59, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %68 = fadd <8 x float> %67, %66
  %69 = fmul <8 x float> %60, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %60, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %72 = fadd <8 x float> %71, %70
  %73 = fmul <8 x float> %50, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %74 = fadd <8 x float> %73, %72
  %75 = fadd <8 x float> %31, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %76 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %75
  %77 = fadd <8 x float> %31, %76
  %78 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %75
  %79 = bitcast <8 x float> %75 to <4 x i64>
  %80 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %81 = shufflevector <4 x i64> %79, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %82 = and <2 x i64> %80, <i64 -17587891081216, i64 -17587891081216>
  %83 = and <2 x i64> %81, <i64 -17587891081216, i64 -17587891081216>
  %84 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %85 = shufflevector <2 x i64> %83, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x i64> %84, <4 x i64> %85, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %87 = bitcast <4 x i64> %86 to <8 x float>
  %88 = fsub <8 x float> %75, %87
  %89 = bitcast <8 x float> %78 to <4 x i64>
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %91 = shufflevector <4 x i64> %89, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %92 = and <2 x i64> %90, <i64 -17587891081216, i64 -17587891081216>
  %93 = and <2 x i64> %91, <i64 -17587891081216, i64 -17587891081216>
  %94 = shufflevector <2 x i64> %92, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = shufflevector <2 x i64> %93, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = shufflevector <4 x i64> %94, <4 x i64> %95, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fsub <8 x float> %78, %97
  %99 = bitcast <8 x float> %31 to <4 x i64>
  %100 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %101 = shufflevector <4 x i64> %99, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %102 = and <2 x i64> %100, <i64 -17587891081216, i64 -17587891081216>
  %103 = and <2 x i64> %101, <i64 -17587891081216, i64 -17587891081216>
  %104 = shufflevector <2 x i64> %102, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %105 = shufflevector <2 x i64> %103, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %106 = shufflevector <4 x i64> %104, <4 x i64> %105, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %107 = bitcast <4 x i64> %106 to <8 x float>
  %108 = fsub <8 x float> %31, %107
  %109 = fmul <8 x float> %31, %78
  %110 = fmul <8 x float> %87, %97
  %111 = fadd <8 x float> %110, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %112 = fmul <8 x float> %98, %87
  %113 = fadd <8 x float> %112, %111
  %114 = fmul <8 x float> %88, %97
  %115 = fadd <8 x float> %114, %113
  %116 = fmul <8 x float> %88, %98
  %117 = fadd <8 x float> %116, %115
  %118 = bitcast <8 x float> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %120 = bitcast <4 x i64> %119 to <8 x float>
  %121 = bitcast <8 x float> %109 to <4 x i64>
  %122 = xor <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = fmul <8 x float> %107, %97
  %125 = fadd <8 x float> %124, %123
  %126 = fmul <8 x float> %98, %107
  %127 = fadd <8 x float> %126, %125
  %128 = fmul <8 x float> %108, %97
  %129 = fadd <8 x float> %128, %127
  %130 = fmul <8 x float> %108, %98
  %131 = fadd <8 x float> %130, %129
  %132 = fmul <8 x float> %109, %120
  %133 = fadd <8 x float> %131, %132
  %134 = fmul <8 x float> %109, %77
  %135 = fsub <8 x float> zeroinitializer, %134
  %136 = fmul <8 x float> %78, %135
  %137 = fadd <8 x float> %136, %133
  %138 = fmul <8 x float> %109, %109
  %139 = fmul <8 x float> %138, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %140 = fadd <8 x float> %139, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %141 = fmul <8 x float> %138, %140
  %142 = fadd <8 x float> %141, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %143 = fmul <8 x float> %109, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %144 = fmul <8 x float> %137, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %145 = fadd <8 x float> %61, %143
  %146 = fsub <8 x float> %61, %145
  %147 = fadd <8 x float> %143, %146
  %148 = fadd <8 x float> %74, %147
  %149 = fadd <8 x float> %148, %144
  %150 = fmul <8 x float> %109, %138
  %151 = fmul <8 x float> %150, %142
  %152 = fadd <8 x float> %145, %151
  %153 = fsub <8 x float> %145, %152
  %154 = fadd <8 x float> %151, %153
  %155 = fadd <8 x float> %154, %149
  %156 = fadd <8 x float> %152, %155
  %157 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %158 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %156, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %157) #8
  %159 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #8
  %160 = bitcast <8 x float> %159 to <4 x i64>
  %161 = bitcast <8 x float> %158 to <4 x i64>
  %162 = or <4 x i64> %160, %161
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %165 = sext <8 x i1> %164 to <8 x i32>
  %166 = bitcast <8 x i32> %165 to <8 x float>
  %167 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %163, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %166) #8
  %168 = bitcast <8 x float> %0 to <4 x i64>
  %169 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %170 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %171 = bitcast <2 x i64> %169 to <4 x i32>
  %172 = icmp eq <4 x i32> %171, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %173 = sext <4 x i1> %172 to <4 x i32>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = bitcast <2 x i64> %170 to <4 x i32>
  %176 = icmp eq <4 x i32> %175, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %177 = sext <4 x i1> %176 to <4 x i32>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <2 x i64> %174, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %180 = shufflevector <2 x i64> %178, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %182 = bitcast <4 x i64> %181 to <8 x float>
  %183 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %167, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %182) #8
  ret <8 x float> %183
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fabsf8_avx(<8 x float>) local_unnamed_addr #4 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_cinz_copysignf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #4 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fmaxf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fminf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #8
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #8
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fdimf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #8
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #8
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_truncf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_floorf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #8
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_ceilf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #8
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #8
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #8
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #8
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_roundf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #8
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #8
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #8
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #8
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #8
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #8
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #8
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #8
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_rintf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #8
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fmaf8_avx(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #3 {
  %4 = fmul <8 x float> %0, %1
  %5 = fadd <8 x float> %4, %2
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>, i8 17) #8
  %10 = fmul <8 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %12, <8 x float> %9) #8
  %14 = fmul <8 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %14, <8 x float> %9) #8
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <8 x float> %9) #8
  %17 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #8
  %18 = fmul <8 x float> %11, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %17) #8
  %20 = fmul <8 x float> %13, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %20, <8 x float> %17) #8
  %22 = fmul <8 x float> %15, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %17) #8
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <8 x float> %17) #8
  %25 = bitcast <8 x float> %19 to <4 x i64>
  %26 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %27 = shufflevector <4 x i64> %25, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %28 = and <2 x i64> %26, <i64 -17587891081216, i64 -17587891081216>
  %29 = and <2 x i64> %27, <i64 -17587891081216, i64 -17587891081216>
  %30 = shufflevector <2 x i64> %28, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %31 = shufflevector <2 x i64> %29, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x i64> %30, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = fsub <8 x float> %19, %33
  %35 = bitcast <8 x float> %21 to <4 x i64>
  %36 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %38 = and <2 x i64> %36, <i64 -17587891081216, i64 -17587891081216>
  %39 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %40 = shufflevector <2 x i64> %38, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <4 x i64> %40, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = fsub <8 x float> %21, %43
  %45 = fmul <8 x float> %19, %21
  %46 = bitcast <8 x float> %45 to <4 x i64>
  %47 = xor <4 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <4 x i64> %47 to <8 x float>
  %49 = fmul <8 x float> %33, %43
  %50 = fadd <8 x float> %49, %48
  %51 = fmul <8 x float> %34, %43
  %52 = fadd <8 x float> %51, %50
  %53 = fmul <8 x float> %44, %33
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %34, %44
  %56 = fadd <8 x float> %55, %54
  %57 = fadd <8 x float> %45, %23
  %58 = fsub <8 x float> %57, %45
  %59 = fsub <8 x float> %57, %58
  %60 = fsub <8 x float> %45, %59
  %61 = fsub <8 x float> %23, %58
  %62 = fadd <8 x float> %61, %60
  %63 = fadd <8 x float> %62, %56
  %64 = fcmp oeq <8 x float> %19, zeroinitializer
  %65 = fcmp oeq <8 x float> %21, zeroinitializer
  %66 = or <8 x i1> %65, %64
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = fadd <8 x float> %57, %63
  %69 = bitcast <8 x i32> %67 to <8 x float>
  %70 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %23, <8 x float> %69) #8
  %71 = bitcast <8 x float> %23 to <4 x i64>
  %72 = and <4 x i64> %71, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %73 = bitcast <4 x i64> %72 to <8 x float>
  %74 = fcmp oeq <8 x float> %73, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = and <4 x i64> %25, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = fcmp oeq <8 x float> %78, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = and <4 x i64> %35, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %81 = bitcast <4 x i64> %80 to <8 x float>
  %82 = fcmp oeq <8 x float> %81, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %83 = fcmp uno <8 x float> %21, %19
  %84 = or <8 x i1> %79, %83
  %85 = or <8 x i1> %84, %82
  %86 = sext <8 x i1> %85 to <8 x i32>
  %87 = bitcast <8 x i32> %86 to <4 x i64>
  %88 = xor <4 x i64> %87, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %76
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %23, <8 x float> %90) #8
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = and <4 x i64> %92, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %94 = bitcast <4 x i64> %93 to <8 x float>
  %95 = fcmp oeq <8 x float> %94, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %96 = fcmp uno <8 x float> %91, zeroinitializer
  %97 = or <8 x i1> %95, %96
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = fmul <8 x float> %24, %70
  %100 = bitcast <8 x i32> %98 to <8 x float>
  %101 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> %91, <8 x float> %100) #8
  ret <8 x float> %101
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_hypotf8_u05avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x float> @Sleef_hypotf8_u05avx(<8 x float> %0, <8 x float> %1)
  ret <8 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_hypotf8_u35avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #8
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #8
  %11 = fdiv <8 x float> %9, %10
  %12 = fmul <8 x float> %11, %11
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %13) #8
  %15 = fmul <8 x float> %10, %14
  %16 = fcmp oeq <8 x float> %9, zeroinitializer
  %17 = sext <8 x i1> %16 to <8 x i32>
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %10, <8 x float> %18) #8
  %20 = fcmp uno <8 x float> %8, %5
  %21 = sext <8 x i1> %20 to <8 x i32>
  %22 = bitcast <8 x i32> %21 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %22) #8
  %24 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = or <8 x i1> %25, %24
  %27 = sext <8 x i1> %26 to <8 x i32>
  %28 = bitcast <8 x i32> %27 to <8 x float>
  %29 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %23, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %28) #8
  ret <8 x float> %29
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_nextafterf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #8
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %12 = shufflevector <4 x i64> %10, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %13 = bitcast <2 x i64> %11 to <4 x i32>
  %14 = ashr <4 x i32> %13, <i32 31, i32 31, i32 31, i32 31>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = bitcast <2 x i64> %12 to <4 x i32>
  %17 = ashr <4 x i32> %16, <i32 31, i32 31, i32 31, i32 31>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = shufflevector <2 x i64> %15, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %20 = shufflevector <2 x i64> %18, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %21 = shufflevector <4 x i64> %19, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %22 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #8
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = xor <4 x i64> %21, %23
  %25 = xor <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = sub <4 x i32> zeroinitializer, %25
  %27 = xor <4 x i32> %16, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = sub <4 x i32> zeroinitializer, %27
  %29 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %30 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %31 = bitcast <2 x i64> %11 to <16 x i8>
  %32 = bitcast <4 x i32> %26 to <16 x i8>
  %33 = bitcast <2 x i64> %29 to <16 x i8>
  %34 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %31, <16 x i8> %32, <16 x i8> %33) #8
  %35 = bitcast <2 x i64> %12 to <16 x i8>
  %36 = bitcast <4 x i32> %28 to <16 x i8>
  %37 = bitcast <2 x i64> %30 to <16 x i8>
  %38 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %35, <16 x i8> %36, <16 x i8> %37) #8
  %39 = fcmp une <8 x float> %9, %1
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = bitcast <16 x i8> %34 to <4 x i32>
  %43 = add <4 x i32> %42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %44 = bitcast <16 x i8> %38 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = bitcast <4 x i32> %43 to <16 x i8>
  %49 = bitcast <2 x i64> %46 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %34, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <4 x i32> %45 to <16 x i8>
  %52 = bitcast <2 x i64> %47 to <16 x i8>
  %53 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %38, <16 x i8> %51, <16 x i8> %52) #8
  %54 = bitcast <16 x i8> %50 to <4 x i32>
  %55 = xor <4 x i32> %54, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %56 = sub <4 x i32> zeroinitializer, %55
  %57 = bitcast <16 x i8> %53 to <4 x i32>
  %58 = xor <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = sub <4 x i32> zeroinitializer, %58
  %60 = bitcast <4 x i32> %56 to <16 x i8>
  %61 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %50, <16 x i8> %60, <16 x i8> %33) #8
  %62 = bitcast <4 x i32> %59 to <16 x i8>
  %63 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %53, <16 x i8> %62, <16 x i8> %37) #8
  %64 = bitcast <16 x i8> %61 to <2 x i64>
  %65 = bitcast <16 x i8> %63 to <2 x i64>
  %66 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <2 x i64> %65, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = shufflevector <4 x i64> %66, <4 x i64> %67, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fcmp oeq <8 x float> %69, zeroinitializer
  %71 = fcmp une <8 x float> %9, zeroinitializer
  %72 = and <8 x i1> %70, %71
  %73 = sext <8 x i1> %72 to <8 x i32>
  %74 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = bitcast <8 x i32> %73 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %75, <8 x float> %76) #8
  %78 = fcmp oeq <8 x float> %9, zeroinitializer
  %79 = fcmp oeq <8 x float> %1, zeroinitializer
  %80 = and <8 x i1> %78, %79
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> %1, <8 x float> %82) #8
  %84 = fcmp uno <8 x float> %9, %1
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %86) #8
  ret <8 x float> %87
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_frfrexpf8_avx(<8 x float>) local_unnamed_addr #3 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #8
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #8
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #8
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fmodf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %17 = shufflevector <4 x i64> %15, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %18 = bitcast <2 x i64> %16 to <4 x i32>
  %19 = add <4 x i32> %18, <i32 -1, i32 -1, i32 -1, i32 -1>
  %20 = bitcast <2 x i64> %17 to <4 x i32>
  %21 = add <4 x i32> %20, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = bitcast <4 x i32> %19 to <2 x i64>
  %23 = bitcast <4 x i32> %21 to <2 x i64>
  %24 = shufflevector <2 x i64> %22, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <4 x i64> %24, <4 x i64> %25, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %27 = bitcast <4 x i64> %26 to <8 x float>
  %28 = fcmp oeq <8 x float> %14, zeroinitializer
  %29 = sext <8 x i1> %28 to <8 x i32>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> zeroinitializer, <8 x float> %30) #8
  %32 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = bitcast <8 x float> %13 to <4 x i64>
  %35 = xor <4 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %38 = shufflevector <4 x i64> %35, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %39 = and <2 x i64> %37, <i64 -17587891081216, i64 -17587891081216>
  %40 = and <2 x i64> %38, <i64 -17587891081216, i64 -17587891081216>
  %41 = shufflevector <2 x i64> %39, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %42 = shufflevector <2 x i64> %40, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = shufflevector <4 x i64> %41, <4 x i64> %42, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = fsub <8 x float> %36, %44
  br label %46

; <label>:46:                                     ; preds = %46, %2
  %47 = phi i32 [ 0, %2 ], [ %122, %46 ]
  %48 = phi <8 x float> [ zeroinitializer, %2 ], [ %114, %46 ]
  %49 = phi <8 x float> [ %11, %2 ], [ %112, %46 ]
  %50 = bitcast <8 x float> %49 to <4 x i64>
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %52 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast <2 x i64> %51 to <4 x i32>
  %54 = add <4 x i32> %53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = bitcast <2 x i64> %52 to <4 x i32>
  %56 = add <4 x i32> %55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = bitcast <4 x i32> %54 to <2 x i64>
  %58 = bitcast <4 x i32> %56 to <2 x i64>
  %59 = shufflevector <2 x i64> %57, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = shufflevector <2 x i64> %58, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %61 = shufflevector <4 x i64> %59, <4 x i64> %60, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %62 = bitcast <4 x i64> %61 to <8 x float>
  %63 = fcmp oeq <8 x float> %49, zeroinitializer
  %64 = sext <8 x i1> %63 to <8 x i32>
  %65 = bitcast <8 x i32> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> zeroinitializer, <8 x float> %65) #8
  %67 = fmul <8 x float> %31, %66
  %68 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %67, i32 11) #8
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %32, <8 x float> %49, i8 30) #8
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %49, <8 x float> %13, i8 29) #8
  %72 = bitcast <8 x float> %71 to <4 x i64>
  %73 = and <4 x i64> %72, %70
  %74 = bitcast <4 x i64> %73 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %74) #8
  %76 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %33, <8 x float> %49, i8 30) #8
  %77 = bitcast <8 x float> %76 to <4 x i64>
  %78 = and <4 x i64> %77, %72
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #8
  %81 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %80, i32 11) #8
  %82 = bitcast <8 x float> %81 to <4 x i64>
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %84 = shufflevector <4 x i64> %82, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %85 = and <2 x i64> %83, <i64 -17587891081216, i64 -17587891081216>
  %86 = and <2 x i64> %84, <i64 -17587891081216, i64 -17587891081216>
  %87 = shufflevector <2 x i64> %85, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = fsub <8 x float> %81, %90
  %92 = fmul <8 x float> %81, %36
  %93 = bitcast <8 x float> %92 to <4 x i64>
  %94 = xor <4 x i64> %93, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = fmul <8 x float> %44, %90
  %97 = fadd <8 x float> %96, %95
  %98 = fmul <8 x float> %91, %44
  %99 = fadd <8 x float> %98, %97
  %100 = fmul <8 x float> %45, %90
  %101 = fadd <8 x float> %100, %99
  %102 = fmul <8 x float> %45, %91
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %49, %92
  %105 = fsub <8 x float> %104, %49
  %106 = fsub <8 x float> %104, %105
  %107 = fsub <8 x float> %49, %106
  %108 = fsub <8 x float> %92, %105
  %109 = fadd <8 x float> %108, %107
  %110 = fadd <8 x float> %48, %103
  %111 = fadd <8 x float> %109, %110
  %112 = fadd <8 x float> %104, %111
  %113 = fsub <8 x float> %104, %112
  %114 = fadd <8 x float> %111, %113
  %115 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %112, <8 x float> %13, i8 17) #8
  %116 = bitcast <8 x float> %115 to <4 x i64>
  %117 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %118 = shufflevector <4 x i64> %116, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %119 = and <2 x i64> %118, %117
  %120 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %119, <2 x i64> <i64 -1, i64 -1>) #8
  %121 = icmp eq i32 %120, 0
  %122 = add nuw nsw i32 %47, 1
  %123 = icmp ult i32 %122, 8
  %124 = and i1 %123, %121
  br i1 %124, label %46, label %125

; <label>:125:                                    ; preds = %46
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %127 = fadd <8 x float> %112, %114
  %128 = fmul <8 x float> %127, %126
  %129 = fcmp oeq <8 x float> %127, %13
  %130 = sext <8 x i1> %129 to <8 x i32>
  %131 = bitcast <8 x i32> %130 to <8 x float>
  %132 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %128, <8 x float> zeroinitializer, <8 x float> %131) #8
  %133 = bitcast <8 x float> %132 to <4 x i64>
  %134 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, %133
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #8
  %138 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %136, <8 x float> %0, <8 x float> %137) #8
  %139 = fcmp oeq <8 x float> %13, zeroinitializer
  %140 = sext <8 x i1> %139 to <8 x i32>
  %141 = bitcast <8 x i32> %140 to <8 x float>
  %142 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %138, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %141) #8
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_remainderf8_avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #8
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #8
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #8
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #8
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  %21 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %22 = shufflevector <4 x i64> %19, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %23 = and <2 x i64> %21, <i64 -17587891081216, i64 -17587891081216>
  %24 = and <2 x i64> %22, <i64 -17587891081216, i64 -17587891081216>
  %25 = shufflevector <2 x i64> %23, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = shufflevector <2 x i64> %24, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = shufflevector <4 x i64> %25, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = bitcast <4 x i64> %27 to <8 x float>
  %29 = fsub <8 x float> %20, %28
  br label %30

; <label>:30:                                     ; preds = %60, %2
  %31 = phi i32 [ 0, %2 ], [ %129, %60 ]
  %32 = phi <4 x i64> [ zeroinitializer, %2 ], [ %96, %60 ]
  %33 = phi <8 x float> [ zeroinitializer, %2 ], [ %128, %60 ]
  %34 = phi <8 x float> [ %11, %2 ], [ %126, %60 ]
  %35 = fmul <8 x float> %15, %34
  %36 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %35, i32 8) #8
  %37 = bitcast <8 x float> %34 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %39 = bitcast <4 x i64> %38 to <8 x float>
  %40 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %39, <8 x float> %16, i8 17) #8
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %40) #8
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %39, <8 x float> %17, i8 17) #8
  %43 = bitcast <8 x float> %42 to <4 x i64>
  %44 = fcmp oeq <8 x float> %17, %39
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <4 x i64>
  %47 = xor <4 x i64> %32, <i64 -1, i64 -1, i64 -1, i64 -1>
  %48 = and <4 x i64> %46, %47
  %49 = or <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> zeroinitializer, <8 x float> %50) #8
  %52 = fcmp oeq <8 x float> %51, zeroinitializer
  %53 = sext <8 x i1> %52 to <8 x i32>
  %54 = bitcast <8 x i32> %53 to <4 x i64>
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %56 = shufflevector <4 x i64> %54, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %57 = and <2 x i64> %56, %55
  %58 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %57, <2 x i64> <i64 -1, i64 -1>) #8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %131

; <label>:60:                                     ; preds = %30
  %61 = fmul <8 x float> %51, %20
  %62 = bitcast <8 x float> %61 to <4 x i64>
  %63 = and <4 x i64> %62, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %64 = bitcast <4 x i64> %63 to <8 x float>
  %65 = fcmp oeq <8 x float> %64, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = and <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = xor <4 x i64> %67, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %69 = bitcast <4 x i64> %68 to <8 x float>
  %70 = fadd <8 x float> %51, %69
  %71 = bitcast <8 x i32> %66 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %51, <8 x float> %70, <8 x float> %71) #8
  %73 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %72) #8
  %74 = bitcast <8 x i32> %73 to <4 x i64>
  %75 = shufflevector <4 x i64> %74, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = shufflevector <4 x i64> %74, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %77 = bitcast <2 x i64> %75 to <4 x i32>
  %78 = and <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %79 = icmp ne <4 x i32> %78, zeroinitializer
  %80 = sext <4 x i1> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = bitcast <2 x i64> %76 to <4 x i32>
  %83 = and <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %84 = icmp ne <4 x i32> %83, zeroinitializer
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %81, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = shufflevector <2 x i64> %86, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %89 = shufflevector <4 x i64> %87, <4 x i64> %88, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %90 = bitcast <8 x float> %72 to <4 x i64>
  %91 = and <4 x i64> %90, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %92 = bitcast <4 x i64> %91 to <8 x float>
  %93 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %92, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %94 = bitcast <8 x float> %93 to <4 x i64>
  %95 = and <4 x i64> %89, %94
  %96 = xor <4 x i64> %95, %32
  %97 = shufflevector <4 x i64> %90, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %98 = shufflevector <4 x i64> %90, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %99 = and <2 x i64> %97, <i64 -17587891081216, i64 -17587891081216>
  %100 = and <2 x i64> %98, <i64 -17587891081216, i64 -17587891081216>
  %101 = shufflevector <2 x i64> %99, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %102 = shufflevector <2 x i64> %100, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %103 = shufflevector <4 x i64> %101, <4 x i64> %102, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %104 = bitcast <4 x i64> %103 to <8 x float>
  %105 = fsub <8 x float> %72, %104
  %106 = fmul <8 x float> %72, %20
  %107 = bitcast <8 x float> %106 to <4 x i64>
  %108 = xor <4 x i64> %107, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %109 = bitcast <4 x i64> %108 to <8 x float>
  %110 = fmul <8 x float> %28, %104
  %111 = fadd <8 x float> %110, %109
  %112 = fmul <8 x float> %105, %28
  %113 = fadd <8 x float> %112, %111
  %114 = fmul <8 x float> %29, %104
  %115 = fadd <8 x float> %114, %113
  %116 = fmul <8 x float> %29, %105
  %117 = fadd <8 x float> %116, %115
  %118 = fadd <8 x float> %34, %106
  %119 = fsub <8 x float> %118, %34
  %120 = fsub <8 x float> %118, %119
  %121 = fsub <8 x float> %34, %120
  %122 = fsub <8 x float> %106, %119
  %123 = fadd <8 x float> %122, %121
  %124 = fadd <8 x float> %33, %117
  %125 = fadd <8 x float> %123, %124
  %126 = fadd <8 x float> %118, %125
  %127 = fsub <8 x float> %118, %126
  %128 = fadd <8 x float> %125, %127
  %129 = add nuw nsw i32 %31, 1
  %130 = icmp ult i32 %129, 8
  br i1 %130, label %30, label %131

; <label>:131:                                    ; preds = %30, %60
  %132 = phi <8 x float> [ %34, %30 ], [ %126, %60 ]
  %133 = phi <8 x float> [ %33, %30 ], [ %128, %60 ]
  %134 = fadd <8 x float> %132, %133
  %135 = fmul <8 x float> %14, %134
  %136 = bitcast <8 x float> %135 to <4 x i64>
  %137 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = xor <4 x i64> %137, %136
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %141 = sext <8 x i1> %140 to <8 x i32>
  %142 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <8 x float>
  %145 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %144) #8
  %146 = bitcast <8 x i32> %141 to <8 x float>
  %147 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %139, <8 x float> %145, <8 x float> %146) #8
  %148 = fcmp oeq <8 x float> %13, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %147, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %150) #8
  ret <8 x float> %151
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_sinpif8_u05avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_sinpif8_u05avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_cospif8_u05avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_cospif8_u05avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_cinz_tgammaf8_u10avx(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @Sleef_tgammaf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_cinz_lgammaf8_u10avx(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @Sleef_lgammaf8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_erff8_u10avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_erff8_u10avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_erfcf8_u15avx(<8 x float>) local_unnamed_addr #3 {
  %2 = tail call <8 x float> @Sleef_erfcf8_u15avx(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cinz_fastpowf8_u3500avx(<8 x float>, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #8
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %8, <8 x float> %6) #8
  %10 = fmul <8 x float> %9, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %13 = shufflevector <4 x i64> %11, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %14 = bitcast <2 x i64> %12 to <4 x i32>
  %15 = lshr <4 x i32> %14, <i32 23, i32 23, i32 23, i32 23>
  %16 = bitcast <2 x i64> %13 to <4 x i32>
  %17 = lshr <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %18 = and <4 x i32> %15, <i32 255, i32 255, i32 255, i32 255>
  %19 = add nsw <4 x i32> %18, <i32 -127, i32 -127, i32 -127, i32 -127>
  %20 = and <4 x i32> %17, <i32 255, i32 255, i32 255, i32 255>
  %21 = add nsw <4 x i32> %20, <i32 -127, i32 -127, i32 -127, i32 -127>
  %22 = bitcast <8 x float> %9 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = shl nuw nsw <4 x i32> %18, <i32 23, i32 23, i32 23, i32 23>
  %26 = shl nuw nsw <4 x i32> %20, <i32 23, i32 23, i32 23, i32 23>
  %27 = bitcast <2 x i64> %23 to <4 x i32>
  %28 = add <4 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = sub <4 x i32> %28, %25
  %30 = bitcast <2 x i64> %24 to <4 x i32>
  %31 = add <4 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = sub <4 x i32> %31, %26
  %33 = bitcast <4 x i32> %29 to <2 x i64>
  %34 = bitcast <4 x i32> %32 to <2 x i64>
  %35 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = shufflevector <4 x i64> %35, <4 x i64> %36, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %38 = bitcast <4 x i64> %37 to <8 x float>
  %39 = add nsw <4 x i32> %18, <i32 -191, i32 -191, i32 -191, i32 -191>
  %40 = add nsw <4 x i32> %20, <i32 -191, i32 -191, i32 -191, i32 -191>
  %41 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %42 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %43 = bitcast <4 x i32> %19 to <16 x i8>
  %44 = bitcast <4 x i32> %39 to <16 x i8>
  %45 = bitcast <2 x i64> %41 to <16 x i8>
  %46 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %43, <16 x i8> %44, <16 x i8> %45) #8
  %47 = bitcast <4 x i32> %21 to <16 x i8>
  %48 = bitcast <4 x i32> %40 to <16 x i8>
  %49 = bitcast <2 x i64> %42 to <16 x i8>
  %50 = tail call <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8> %47, <16 x i8> %48, <16 x i8> %49) #8
  %51 = bitcast <16 x i8> %46 to <2 x i64>
  %52 = bitcast <16 x i8> %50 to <2 x i64>
  %53 = fadd <8 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fadd <8 x float> %38, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fdiv <8 x float> %53, %54
  %56 = fmul <8 x float> %55, %55
  %57 = fmul <8 x float> %56, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %58 = fadd <8 x float> %57, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %59 = fmul <8 x float> %56, %58
  %60 = fadd <8 x float> %59, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %61 = fmul <8 x float> %56, %60
  %62 = fadd <8 x float> %61, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %63 = fmul <8 x float> %56, %62
  %64 = fadd <8 x float> %63, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %65 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = shufflevector <2 x i64> %52, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %67 = shufflevector <4 x i64> %65, <4 x i64> %66, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %68 = bitcast <4 x i64> %67 to <8 x i32>
  %69 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %68) #8
  %70 = fmul <8 x float> %69, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %71 = fmul <8 x float> %55, %64
  %72 = fadd <8 x float> %70, %71
  %73 = fmul <8 x float> %72, %1
  %74 = fmul <8 x float> %73, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %75 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %74) #8
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %78 = shufflevector <4 x i64> %76, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %79 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %75) #8
  %80 = fmul <8 x float> %79, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %81 = fadd <8 x float> %80, %73
  %82 = fmul <8 x float> %79, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %83 = fadd <8 x float> %82, %81
  %84 = fmul <8 x float> %83, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %85 = fadd <8 x float> %84, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %86 = fmul <8 x float> %83, %85
  %87 = fadd <8 x float> %86, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %88 = fmul <8 x float> %83, %87
  %89 = fadd <8 x float> %88, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %90 = fmul <8 x float> %83, %89
  %91 = fadd <8 x float> %90, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %92 = fmul <8 x float> %83, %91
  %93 = fadd <8 x float> %92, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %94 = fmul <8 x float> %83, %83
  %95 = fadd <8 x float> %83, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %96 = fmul <8 x float> %94, %93
  %97 = fadd <8 x float> %95, %96
  %98 = bitcast <2 x i64> %77 to <4 x i32>
  %99 = ashr <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  %100 = bitcast <2 x i64> %78 to <4 x i32>
  %101 = ashr <4 x i32> %100, <i32 1, i32 1, i32 1, i32 1>
  %102 = shl <4 x i32> %99, <i32 23, i32 23, i32 23, i32 23>
  %103 = add <4 x i32> %102, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %104 = shl <4 x i32> %101, <i32 23, i32 23, i32 23, i32 23>
  %105 = add <4 x i32> %104, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %106 = bitcast <4 x i32> %103 to <2 x i64>
  %107 = bitcast <4 x i32> %105 to <2 x i64>
  %108 = shufflevector <2 x i64> %106, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = shufflevector <2 x i64> %107, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %110 = shufflevector <4 x i64> %108, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = fmul <8 x float> %97, %111
  %113 = sub <4 x i32> %98, %99
  %114 = sub <4 x i32> %100, %101
  %115 = shl <4 x i32> %113, <i32 23, i32 23, i32 23, i32 23>
  %116 = add <4 x i32> %115, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %117 = shl <4 x i32> %114, <i32 23, i32 23, i32 23, i32 23>
  %118 = add <4 x i32> %117, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %119 = bitcast <4 x i32> %116 to <2 x i64>
  %120 = bitcast <4 x i32> %118 to <2 x i64>
  %121 = shufflevector <2 x i64> %119, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = shufflevector <4 x i64> %121, <4 x i64> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = fmul <8 x float> %112, %124
  %126 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %73, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #8
  %127 = bitcast <8 x float> %126 to <4 x i64>
  %128 = bitcast <8 x float> %125 to <4 x i64>
  %129 = xor <4 x i64> %127, <i64 -1, i64 -1, i64 -1, i64 -1>
  %130 = and <4 x i64> %128, %129
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #8
  %133 = fcmp oeq <8 x float> %132, %1
  %134 = sext <8 x i1> %133 to <8 x i32>
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = bitcast <8 x float> %1 to <4 x i64>
  %137 = and <4 x i64> %136, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %138, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #8
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = or <4 x i64> %135, %140
  %142 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #8
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %145 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %146 = bitcast <2 x i64> %144 to <4 x i32>
  %147 = and <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %148 = icmp ne <4 x i32> %147, zeroinitializer
  %149 = sext <4 x i1> %148 to <4 x i32>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <2 x i64> %145 to <4 x i32>
  %152 = and <4 x i32> %151, <i32 1, i32 1, i32 1, i32 1>
  %153 = icmp ne <4 x i32> %152, zeroinitializer
  %154 = sext <4 x i1> %153 to <4 x i32>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shufflevector <2 x i64> %150, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = shufflevector <2 x i64> %155, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = shufflevector <4 x i64> %156, <4 x i64> %157, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %159 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %138, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #8
  %160 = bitcast <8 x float> %159 to <4 x i64>
  %161 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %162 = shufflevector <4 x i64> %3, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %163 = bitcast <2 x i64> %161 to <4 x i32>
  %164 = ashr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = bitcast <2 x i64> %162 to <4 x i32>
  %167 = ashr <4 x i32> %166, <i32 31, i32 31, i32 31, i32 31>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = shufflevector <2 x i64> %165, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %170 = shufflevector <2 x i64> %168, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %171 = shufflevector <4 x i64> %169, <4 x i64> %170, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %172 = and <4 x i64> %141, %171
  %173 = and <4 x i64> %172, %160
  %174 = and <4 x i64> %173, %158
  %175 = xor <4 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %176 = bitcast <4 x i64> %175 to <8 x float>
  %177 = bitcast <4 x i64> %174 to <8 x float>
  %178 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %131, <8 x float> %176, <8 x float> %177) #8
  %179 = fcmp oeq <8 x float> %0, zeroinitializer
  %180 = sext <8 x i1> %179 to <8 x i32>
  %181 = bitcast <8 x i32> %180 to <8 x float>
  %182 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %178, <8 x float> zeroinitializer, <8 x float> %181) #8
  %183 = fcmp oeq <8 x float> %1, zeroinitializer
  %184 = sext <8 x i1> %183 to <8 x i32>
  %185 = bitcast <8 x i32> %184 to <8 x float>
  %186 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %182, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %185) #8
  ret <8 x float> %186
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf8_avx(i32) local_unnamed_addr #0 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %9 = load i32, i32* %8, align 8, !tbaa !37
  %10 = and i32 %9, 268435456
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 0, i32 3
  br label %13

; <label>:13:                                     ; preds = %1, %5
  %14 = phi i32 [ %12, %5 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf8_avx(i32) local_unnamed_addr #4 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse41.pblendvb(<16 x i8>, <16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float>, <8 x float>, i8) #6

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32) #6

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #6

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #6

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4, !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"rempif: argument 0"}
!9 = distinct !{!9, !"rempif"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"rempif: argument 0"}
!12 = distinct !{!12, !"rempif"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"rempif: argument 0"}
!15 = distinct !{!15, !"rempif"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"rempif: argument 0"}
!18 = distinct !{!18, !"rempif"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"rempif: argument 0"}
!21 = distinct !{!21, !"rempif"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"rempif: argument 0"}
!24 = distinct !{!24, !"rempif"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"rempif: argument 0"}
!27 = distinct !{!27, !"rempif"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"rempif: argument 0"}
!30 = distinct !{!30, !"rempif"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"Sleef_sincospif8_u35avx: argument 0"}
!33 = distinct !{!33, !"Sleef_sincospif8_u35avx"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"Sleef_modff8_avx: argument 0"}
!36 = distinct !{!36, !"Sleef_modff8_avx"}
!37 = !{!38, !38, i64 0}
!38 = !{!"int", !5, i64 0}
