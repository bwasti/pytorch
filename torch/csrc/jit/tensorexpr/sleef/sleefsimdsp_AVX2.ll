; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vfloat2 = type { <8 x float>, <8 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [5 x i8] c"AVX2\00", align 1
@rempitabsp = external constant [0 x float], align 4

; Function Attrs: nounwind readnone uwtable
define <4 x i64> @Sleef_ilogbf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %6 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = bitcast <8 x float> %5 to <32 x i8>
  %11 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %10) #7
  %12 = and <8 x i32> %9, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = bitcast <32 x i8> %11 to <8 x i32>
  %14 = sub <8 x i32> %12, %13
  %15 = fcmp oeq <8 x float> %0, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %14 to <32 x i8>
  %18 = bitcast <8 x i32> %16 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %17, <32 x i8> <i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128, i8 0, i8 0, i8 0, i8 -128>, <32 x i8> %18) #7
  %20 = fcmp uno <8 x float> %0, zeroinitializer
  %21 = sext <8 x i1> %20 to <8 x i32>
  %22 = bitcast <8 x i32> %21 to <32 x i8>
  %23 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %19, <32 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <32 x i8> %22) #7
  %24 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = sext <8 x i1> %24 to <8 x i32>
  %26 = bitcast <8 x i32> %25 to <32 x i8>
  %27 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %23, <32 x i8> <i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127, i8 -1, i8 -1, i8 -1, i8 127>, <32 x i8> %26) #7
  %28 = bitcast <32 x i8> %27 to <4 x i64>
  ret <4 x i64> %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_ldexpf8_avx2(<8 x float>, <4 x i64>) local_unnamed_addr #2 {
  %3 = bitcast <4 x i64> %1 to <8 x i32>
  %4 = ashr <8 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = add <8 x i32> %4, %3
  %6 = ashr <8 x i32> %5, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %7 = sub nsw <8 x i32> %6, %4
  %8 = shl nsw <8 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %9 = shl <8 x i32> %7, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %10 = sub <8 x i32> %3, %9
  %11 = add nsw <8 x i32> %8, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %12 = icmp sgt <8 x i32> %7, <i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8>
  %13 = select <8 x i1> %12, <8 x i32> %11, <8 x i32> zeroinitializer
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = icmp sgt <8 x i32> %13, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = xor <4 x i64> %17, <i64 -1, i64 -1, i64 -1, i64 -1>
  %19 = and <4 x i64> %18, %14
  %20 = and <4 x i64> %17, <i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735>
  %21 = or <4 x i64> %20, %19
  %22 = bitcast <4 x i64> %21 to <8 x i32>
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = bitcast <8 x i32> %23 to <8 x float>
  %25 = fmul <8 x float> %24, %0
  %26 = fmul <8 x float> %25, %24
  %27 = fmul <8 x float> %26, %24
  %28 = fmul <8 x float> %27, %24
  %29 = shl <8 x i32> %10, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <8 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <8 x i32> %30 to <8 x float>
  %32 = fmul <8 x float> %28, %31
  ret <8 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>, <8 x float> %0) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>, <8 x float> %17) #7
  br label %152

; <label>:19:                                     ; preds = %1
  %20 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #7
  %21 = bitcast <8 x float> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %35, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %29 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>, <8 x float> %0) #7
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>, <8 x float> %31) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>, <8 x float> %33) #7
  br label %152

; <label>:35:                                     ; preds = %19
  %36 = bitcast <8 x float> %0 to <8 x i32>
  %37 = lshr <8 x i32> %36, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %38 = and <8 x i32> %37, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = add nsw <8 x i32> %38, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %40 = icmp ugt <8 x i32> %38, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %41 = select <8 x i1> %40, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %42 = add <8 x i32> %41, %36
  %43 = bitcast <8 x i32> %42 to <8 x float>
  %44 = ashr <8 x i32> %39, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %45 = xor <8 x i32> %44, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %46 = and <8 x i32> %45, %39
  %47 = shl <8 x i32> %46, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %48 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !3
  %49 = fmul <8 x float> %48, %43
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %48, <8 x float> %50) #7
  %52 = fmul <8 x float> %49, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %53 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %52, i32 8) #7
  %54 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %49, i32 8) #7
  %55 = fmul <8 x float> %54, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %56 = fsub <8 x float> %53, %55
  %57 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %56) #7
  %58 = fmul <8 x float> %53, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %59 = fsub <8 x float> %49, %58
  %60 = fadd <8 x float> %51, %59
  %61 = fsub <8 x float> %59, %60
  %62 = fadd <8 x float> %51, %61
  %63 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !3
  %64 = fmul <8 x float> %63, %43
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %63, <8 x float> %65) #7
  %67 = fadd <8 x float> %60, %64
  %68 = fsub <8 x float> %67, %60
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %60, %69
  %71 = fsub <8 x float> %64, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %62
  %74 = fadd <8 x float> %73, %72
  %75 = fmul <8 x float> %67, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %76 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %75, i32 8) #7
  %77 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %67, i32 8) #7
  %78 = fmul <8 x float> %77, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %79 = fsub <8 x float> %76, %78
  %80 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %79) #7
  %81 = fmul <8 x float> %76, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %82 = fsub <8 x float> %67, %81
  %83 = add <8 x i32> %80, %57
  %84 = fadd <8 x float> %82, %74
  %85 = fsub <8 x float> %82, %84
  %86 = fadd <8 x float> %74, %85
  %87 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !3
  %88 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !3
  %89 = fmul <8 x float> %87, %43
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %87, <8 x float> %43, <8 x float> %90) #7
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %43, <8 x float> %91) #7
  %93 = fadd <8 x float> %89, %84
  %94 = fsub <8 x float> %93, %84
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %84, %95
  %97 = fsub <8 x float> %89, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %92, %86
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %93, %100
  %102 = fsub <8 x float> %93, %101
  %103 = fadd <8 x float> %100, %102
  %104 = fmul <8 x float> %101, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %105 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %105) #7
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %103, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %107) #7
  %109 = bitcast <8 x i32> %42 to <4 x i64>
  %110 = and <4 x i64> %109, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %111, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %113 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> %43, <8 x float> %112) #7
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> zeroinitializer, <8 x float> %112) #7
  %115 = shl <8 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = and <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %113, <8 x float> zeroinitializer, i8 30) #7
  %118 = bitcast <8 x float> %117 to <32 x i8>
  %119 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <32 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <32 x i8> %118) #7
  %120 = bitcast <32 x i8> %119 to <8 x i32>
  %121 = add <8 x i32> %116, %120
  %122 = ashr <8 x i32> %121, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %123 = and <8 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = icmp ne <8 x i32> %123, zeroinitializer
  %125 = sext <8 x i1> %124 to <8 x i32>
  %126 = bitcast <8 x float> %113 to <4 x i64>
  %127 = and <4 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = xor <4 x i64> %127, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %129 = bitcast <4 x i64> %128 to <8 x float>
  %130 = or <4 x i64> %127, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %131 = bitcast <4 x i64> %130 to <8 x float>
  %132 = fadd <8 x float> %113, %129
  %133 = fsub <8 x float> %132, %113
  %134 = fsub <8 x float> %132, %133
  %135 = fsub <8 x float> %113, %134
  %136 = fsub <8 x float> %129, %133
  %137 = fadd <8 x float> %136, %135
  %138 = fadd <8 x float> %114, %131
  %139 = fadd <8 x float> %138, %137
  %140 = bitcast <8 x i32> %125 to <8 x float>
  %141 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %113, <8 x float> %132, <8 x float> %140) #7
  %142 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %114, <8 x float> %139, <8 x float> %140) #7
  %143 = fadd <8 x float> %141, %142
  %144 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %145 = fcmp uno <8 x float> %0, zeroinitializer
  %146 = or <8 x i1> %144, %145
  %147 = sext <8 x i1> %146 to <8 x i32>
  %148 = bitcast <8 x i32> %147 to <4 x i64>
  %149 = bitcast <8 x float> %143 to <4 x i64>
  %150 = or <4 x i64> %149, %148
  %151 = bitcast <4 x i64> %150 to <8 x float>
  br label %152

; <label>:152:                                    ; preds = %27, %35, %12
  %153 = phi <8 x i32> [ %14, %12 ], [ %29, %27 ], [ %122, %35 ]
  %154 = phi <8 x float> [ %18, %12 ], [ %34, %27 ], [ %151, %35 ]
  %155 = fmul <8 x float> %154, %154
  %156 = and <8 x i32> %153, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %157 = icmp ne <8 x i32> %156, zeroinitializer
  %158 = sext <8 x i1> %157 to <8 x i32>
  %159 = bitcast <8 x i32> %158 to <4 x i64>
  %160 = and <4 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = bitcast <8 x float> %154 to <4 x i64>
  %162 = xor <4 x i64> %160, %161
  %163 = bitcast <4 x i64> %162 to <8 x float>
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %155, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #7
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %164, <8 x float> %155, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #7
  %166 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %165, <8 x float> %155, <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>) #7
  %167 = fmul <8 x float> %166, %163
  %168 = fmul <8 x float> %155, %167
  %169 = fadd <8 x float> %168, %163
  %170 = bitcast <8 x float> %0 to <8 x i32>
  %171 = icmp eq <8 x i32> %170, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %172 = sext <8 x i1> %171 to <8 x i32>
  %173 = bitcast <8 x i32> %172 to <8 x float>
  %174 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %169, <8 x float> %0, <8 x float> %173) #7
  ret <8 x float> %174
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %22, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = fadd <8 x float> %13, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #7
  %16 = shl <8 x i32> %15, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %17 = or <8 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %17) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %19) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %20) #7
  br label %159

; <label>:22:                                     ; preds = %1
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %41, label %30, !prof !2

; <label>:30:                                     ; preds = %22
  %31 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %32 = fadd <8 x float> %31, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %33 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %32) #7
  %34 = shl <8 x i32> %33, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %35 = or <8 x i32> %34, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %36 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %35) #7
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %0) #7
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %39) #7
  br label %159

; <label>:41:                                     ; preds = %22
  %42 = bitcast <8 x float> %0 to <8 x i32>
  %43 = lshr <8 x i32> %42, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %44 = and <8 x i32> %43, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %45 = add nsw <8 x i32> %44, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %46 = icmp ugt <8 x i32> %44, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %47 = select <8 x i1> %46, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %48 = add <8 x i32> %47, %42
  %49 = bitcast <8 x i32> %48 to <8 x float>
  %50 = ashr <8 x i32> %45, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %51 = xor <8 x i32> %50, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %52 = and <8 x i32> %51, %45
  %53 = shl <8 x i32> %52, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %54 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %53, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !6
  %55 = fmul <8 x float> %54, %49
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %54, <8 x float> %56) #7
  %58 = fmul <8 x float> %55, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %59 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %58, i32 8) #7
  %60 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %55, i32 8) #7
  %61 = fmul <8 x float> %60, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %62 = fsub <8 x float> %59, %61
  %63 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %62) #7
  %64 = fmul <8 x float> %59, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %65 = fsub <8 x float> %55, %64
  %66 = fadd <8 x float> %57, %65
  %67 = fsub <8 x float> %65, %66
  %68 = fadd <8 x float> %57, %67
  %69 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %53, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !6
  %70 = fmul <8 x float> %69, %49
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %70
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %69, <8 x float> %71) #7
  %73 = fadd <8 x float> %66, %70
  %74 = fsub <8 x float> %73, %66
  %75 = fsub <8 x float> %73, %74
  %76 = fsub <8 x float> %66, %75
  %77 = fsub <8 x float> %70, %74
  %78 = fadd <8 x float> %77, %76
  %79 = fadd <8 x float> %72, %68
  %80 = fadd <8 x float> %79, %78
  %81 = fmul <8 x float> %73, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %82 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %81, i32 8) #7
  %83 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %73, i32 8) #7
  %84 = fmul <8 x float> %83, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %85 = fsub <8 x float> %82, %84
  %86 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %85) #7
  %87 = fmul <8 x float> %82, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %88 = fsub <8 x float> %73, %87
  %89 = add <8 x i32> %86, %63
  %90 = fadd <8 x float> %88, %80
  %91 = fsub <8 x float> %88, %90
  %92 = fadd <8 x float> %80, %91
  %93 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %53, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !6
  %94 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %53, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !6
  %95 = fmul <8 x float> %93, %49
  %96 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %95
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %93, <8 x float> %49, <8 x float> %96) #7
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %94, <8 x float> %49, <8 x float> %97) #7
  %99 = fadd <8 x float> %95, %90
  %100 = fsub <8 x float> %99, %90
  %101 = fsub <8 x float> %99, %100
  %102 = fsub <8 x float> %90, %101
  %103 = fsub <8 x float> %95, %100
  %104 = fadd <8 x float> %103, %102
  %105 = fadd <8 x float> %98, %92
  %106 = fadd <8 x float> %105, %104
  %107 = fadd <8 x float> %99, %106
  %108 = fsub <8 x float> %99, %107
  %109 = fadd <8 x float> %106, %108
  %110 = fmul <8 x float> %107, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %111 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %110
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %111) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %112) #7
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %113) #7
  %115 = bitcast <8 x i32> %48 to <4 x i64>
  %116 = and <4 x i64> %115, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %117, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %119 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %110, <8 x float> %49, <8 x float> %118) #7
  %120 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %114, <8 x float> zeroinitializer, <8 x float> %118) #7
  %121 = shl <8 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %122 = and <8 x i32> %121, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %123 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %119, <8 x float> zeroinitializer, i8 30) #7
  %124 = bitcast <8 x float> %123 to <32 x i8>
  %125 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <32 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <32 x i8> %124) #7
  %126 = bitcast <32 x i8> %125 to <8 x i32>
  %127 = add <8 x i32> %122, %126
  %128 = ashr <8 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %129 = and <8 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %130 = icmp eq <8 x i32> %129, zeroinitializer
  %131 = sext <8 x i1> %130 to <8 x i32>
  %132 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %123) #7
  %133 = bitcast <8 x float> %132 to <4 x i64>
  %134 = and <4 x i64> %133, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %135 = xor <4 x i64> %134, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = or <4 x i64> %134, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %138 = bitcast <4 x i64> %137 to <8 x float>
  %139 = fadd <8 x float> %119, %136
  %140 = fsub <8 x float> %139, %119
  %141 = fsub <8 x float> %139, %140
  %142 = fsub <8 x float> %119, %141
  %143 = fsub <8 x float> %136, %140
  %144 = fadd <8 x float> %143, %142
  %145 = fadd <8 x float> %120, %138
  %146 = fadd <8 x float> %145, %144
  %147 = bitcast <8 x i32> %131 to <8 x float>
  %148 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %119, <8 x float> %139, <8 x float> %147) #7
  %149 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %120, <8 x float> %146, <8 x float> %147) #7
  %150 = fadd <8 x float> %148, %149
  %151 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %152 = fcmp uno <8 x float> %0, zeroinitializer
  %153 = or <8 x i1> %151, %152
  %154 = sext <8 x i1> %153 to <8 x i32>
  %155 = bitcast <8 x i32> %154 to <4 x i64>
  %156 = bitcast <8 x float> %150 to <4 x i64>
  %157 = or <4 x i64> %156, %155
  %158 = bitcast <4 x i64> %157 to <8 x float>
  br label %159

; <label>:159:                                    ; preds = %30, %41, %12
  %160 = phi <8 x i32> [ %17, %12 ], [ %35, %30 ], [ %128, %41 ]
  %161 = phi <8 x float> [ %21, %12 ], [ %40, %30 ], [ %158, %41 ]
  %162 = fmul <8 x float> %161, %161
  %163 = and <8 x i32> %160, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %164 = icmp eq <8 x i32> %163, zeroinitializer
  %165 = sext <8 x i1> %164 to <8 x i32>
  %166 = bitcast <8 x i32> %165 to <4 x i64>
  %167 = and <4 x i64> %166, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %168 = bitcast <8 x float> %161 to <4 x i64>
  %169 = xor <4 x i64> %167, %168
  %170 = bitcast <4 x i64> %169 to <8 x float>
  %171 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %162, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #7
  %172 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %171, <8 x float> %162, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #7
  %173 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %172, <8 x float> %162, <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>) #7
  %174 = fmul <8 x float> %173, %170
  %175 = fmul <8 x float> %162, %174
  %176 = fadd <8 x float> %175, %170
  ret <8 x float> %176
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %17) #7
  br label %128

; <label>:19:                                     ; preds = %1
  %20 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #7
  %21 = bitcast <8 x float> %20 to <4 x i64>
  %22 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %23 = shufflevector <4 x i64> %21, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %24 = and <2 x i64> %23, %22
  %25 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %24, <2 x i64> <i64 -1, i64 -1>) #7
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %35, label %27, !prof !2

; <label>:27:                                     ; preds = %19
  %28 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %29 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %0) #7
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %31) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %33) #7
  br label %128

; <label>:35:                                     ; preds = %19
  %36 = bitcast <8 x float> %0 to <8 x i32>
  %37 = lshr <8 x i32> %36, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %38 = and <8 x i32> %37, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %39 = add nsw <8 x i32> %38, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %40 = icmp ugt <8 x i32> %38, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %41 = select <8 x i1> %40, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %42 = add <8 x i32> %41, %36
  %43 = bitcast <8 x i32> %42 to <8 x float>
  %44 = ashr <8 x i32> %39, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %45 = xor <8 x i32> %44, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %46 = and <8 x i32> %45, %39
  %47 = shl <8 x i32> %46, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %48 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !9
  %49 = fmul <8 x float> %48, %43
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %48, <8 x float> %50) #7
  %52 = fmul <8 x float> %49, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %53 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %52, i32 8) #7
  %54 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %49, i32 8) #7
  %55 = fmul <8 x float> %54, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %56 = fsub <8 x float> %53, %55
  %57 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %56) #7
  %58 = fmul <8 x float> %53, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %59 = fsub <8 x float> %49, %58
  %60 = fadd <8 x float> %51, %59
  %61 = fsub <8 x float> %59, %60
  %62 = fadd <8 x float> %51, %61
  %63 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !9
  %64 = fmul <8 x float> %63, %43
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %63, <8 x float> %65) #7
  %67 = fadd <8 x float> %60, %64
  %68 = fsub <8 x float> %67, %60
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %60, %69
  %71 = fsub <8 x float> %64, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %62
  %74 = fadd <8 x float> %73, %72
  %75 = fmul <8 x float> %67, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %76 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %75, i32 8) #7
  %77 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %67, i32 8) #7
  %78 = fmul <8 x float> %77, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %79 = fsub <8 x float> %76, %78
  %80 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %79) #7
  %81 = fmul <8 x float> %76, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %82 = fsub <8 x float> %67, %81
  %83 = add <8 x i32> %80, %57
  %84 = fadd <8 x float> %82, %74
  %85 = fsub <8 x float> %82, %84
  %86 = fadd <8 x float> %74, %85
  %87 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !9
  %88 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !9
  %89 = fmul <8 x float> %87, %43
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %87, <8 x float> %43, <8 x float> %90) #7
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %43, <8 x float> %91) #7
  %93 = fadd <8 x float> %89, %84
  %94 = fsub <8 x float> %93, %84
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %84, %95
  %97 = fsub <8 x float> %89, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %92, %86
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %93, %100
  %102 = fsub <8 x float> %93, %101
  %103 = fadd <8 x float> %100, %102
  %104 = fmul <8 x float> %101, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %105 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %105) #7
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %103, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %107) #7
  %109 = bitcast <8 x i32> %42 to <4 x i64>
  %110 = and <4 x i64> %109, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %111 = bitcast <4 x i64> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %111, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %113 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> %43, <8 x float> %112) #7
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> zeroinitializer, <8 x float> %112) #7
  %115 = fadd <8 x float> %113, %114
  %116 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %117 = fcmp uno <8 x float> %0, zeroinitializer
  %118 = or <8 x i1> %116, %117
  %119 = sext <8 x i1> %118 to <8 x i32>
  %120 = bitcast <8 x i32> %119 to <4 x i64>
  %121 = bitcast <8 x float> %115 to <4 x i64>
  %122 = or <4 x i64> %121, %120
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = icmp eq <8 x i32> %36, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %125 = sext <8 x i1> %124 to <8 x i32>
  %126 = bitcast <8 x i32> %125 to <8 x float>
  %127 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %123, <8 x float> %0, <8 x float> %126) #7
  br label %128

; <label>:128:                                    ; preds = %27, %35, %12
  %129 = phi <8 x float> [ %18, %12 ], [ %34, %27 ], [ %127, %35 ]
  %130 = phi <8 x i32> [ %14, %12 ], [ %29, %27 ], [ %83, %35 ]
  %131 = fmul <8 x float> %129, %129
  %132 = and <8 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %133 = icmp ne <8 x i32> %132, zeroinitializer
  %134 = sext <8 x i1> %133 to <8 x i32>
  %135 = bitcast <8 x i32> %134 to <4 x i64>
  %136 = and <4 x i64> %135, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %137 = bitcast <8 x float> %129 to <4 x i64>
  %138 = xor <4 x i64> %136, %137
  %139 = bitcast <4 x i64> %138 to <8 x float>
  %140 = fmul <8 x float> %131, %131
  %141 = fmul <8 x float> %140, %140
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>, <8 x float> <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>) #7
  %143 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>, <8 x float> <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>) #7
  %144 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>, <8 x float> <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>) #7
  %145 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %143, <8 x float> %144) #7
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %142, <8 x float> %145) #7
  %147 = fmul <8 x float> %146, %139
  %148 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %147, <8 x float> %139) #7
  %149 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %148
  %150 = bitcast <8 x i32> %134 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %148, <8 x float> %149, <8 x float> %150) #7
  ret <8 x float> %151
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %30, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #7
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>, <8 x float> %0) #7
  %17 = fmul <8 x float> %14, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %18 = fadd <8 x float> %17, %16
  %19 = fsub <8 x float> %18, %16
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %16, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fmul <8 x float> %14, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %25 = fadd <8 x float> %24, %18
  %26 = fsub <8 x float> %18, %25
  %27 = fadd <8 x float> %24, %26
  %28 = fadd <8 x float> %27, %23
  %29 = bitcast <8 x float> %0 to <8 x i32>
  br label %149

; <label>:30:                                     ; preds = %1
  %31 = bitcast <8 x float> %0 to <8 x i32>
  %32 = lshr <8 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = and <8 x i32> %32, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %34 = add nsw <8 x i32> %33, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %35 = icmp ugt <8 x i32> %33, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %36 = select <8 x i1> %35, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %37 = add <8 x i32> %36, %31
  %38 = bitcast <8 x i32> %37 to <8 x float>
  %39 = ashr <8 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %40 = xor <8 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <8 x i32> %40, %34
  %42 = shl <8 x i32> %41, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %43 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !12
  %44 = fmul <8 x float> %43, %38
  %45 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %44
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %43, <8 x float> %45) #7
  %47 = fmul <8 x float> %44, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %48 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %47, i32 8) #7
  %49 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %44, i32 8) #7
  %50 = fmul <8 x float> %49, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %51 = fsub <8 x float> %48, %50
  %52 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %51) #7
  %53 = fmul <8 x float> %48, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %54 = fsub <8 x float> %44, %53
  %55 = fadd <8 x float> %46, %54
  %56 = fsub <8 x float> %54, %55
  %57 = fadd <8 x float> %46, %56
  %58 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !12
  %59 = fmul <8 x float> %58, %38
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %58, <8 x float> %60) #7
  %62 = fadd <8 x float> %55, %59
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %59, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %61, %57
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %62, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %71 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %70, i32 8) #7
  %72 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %62, i32 8) #7
  %73 = fmul <8 x float> %72, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %74 = fsub <8 x float> %71, %73
  %75 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %74) #7
  %76 = fmul <8 x float> %71, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %77 = fsub <8 x float> %62, %76
  %78 = add <8 x i32> %75, %52
  %79 = fadd <8 x float> %77, %69
  %80 = fsub <8 x float> %77, %79
  %81 = fadd <8 x float> %69, %80
  %82 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !12
  %83 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !12
  %84 = fmul <8 x float> %82, %38
  %85 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %84
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %38, <8 x float> %85) #7
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %38, <8 x float> %86) #7
  %88 = fadd <8 x float> %84, %79
  %89 = fsub <8 x float> %88, %79
  %90 = fsub <8 x float> %88, %89
  %91 = fsub <8 x float> %79, %90
  %92 = fsub <8 x float> %84, %89
  %93 = fadd <8 x float> %92, %91
  %94 = fadd <8 x float> %87, %81
  %95 = fadd <8 x float> %94, %93
  %96 = fadd <8 x float> %88, %95
  %97 = fsub <8 x float> %88, %96
  %98 = fadd <8 x float> %95, %97
  %99 = fmul <8 x float> %96, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %99
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %100) #7
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %101) #7
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %102) #7
  %104 = bitcast <8 x i32> %37 to <4 x i64>
  %105 = and <4 x i64> %104, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %106, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> %38, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %103, <8 x float> zeroinitializer, <8 x float> %107) #7
  %110 = shl <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = and <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %112 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %108, <8 x float> zeroinitializer, i8 30) #7
  %113 = bitcast <8 x float> %112 to <32 x i8>
  %114 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0, i8 1, i8 0, i8 0, i8 0>, <32 x i8> <i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0, i8 2, i8 0, i8 0, i8 0>, <32 x i8> %113) #7
  %115 = bitcast <32 x i8> %114 to <8 x i32>
  %116 = add <8 x i32> %111, %115
  %117 = ashr <8 x i32> %116, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %118 = and <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = icmp ne <8 x i32> %118, zeroinitializer
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = bitcast <8 x float> %108 to <4 x i64>
  %122 = and <4 x i64> %121, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %123 = xor <4 x i64> %122, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = or <4 x i64> %122, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %126 = bitcast <4 x i64> %125 to <8 x float>
  %127 = fadd <8 x float> %108, %124
  %128 = fsub <8 x float> %127, %108
  %129 = fsub <8 x float> %127, %128
  %130 = fsub <8 x float> %108, %129
  %131 = fsub <8 x float> %124, %128
  %132 = fadd <8 x float> %131, %130
  %133 = fadd <8 x float> %109, %126
  %134 = fadd <8 x float> %133, %132
  %135 = bitcast <8 x i32> %120 to <8 x float>
  %136 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> %127, <8 x float> %135) #7
  %137 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %134, <8 x float> %135) #7
  %138 = fadd <8 x float> %136, %137
  %139 = fsub <8 x float> %136, %138
  %140 = fadd <8 x float> %137, %139
  %141 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %142 = fcmp uno <8 x float> %0, zeroinitializer
  %143 = or <8 x i1> %141, %142
  %144 = sext <8 x i1> %143 to <8 x i32>
  %145 = bitcast <8 x i32> %144 to <4 x i64>
  %146 = bitcast <8 x float> %138 to <4 x i64>
  %147 = or <4 x i64> %146, %145
  %148 = bitcast <4 x i64> %147 to <8 x float>
  br label %149

; <label>:149:                                    ; preds = %30, %12
  %150 = phi <8 x i32> [ %31, %30 ], [ %29, %12 ]
  %151 = phi <8 x float> [ %148, %30 ], [ %25, %12 ]
  %152 = phi <8 x float> [ %140, %30 ], [ %28, %12 ]
  %153 = phi <8 x i32> [ %117, %30 ], [ %15, %12 ]
  %154 = fmul <8 x float> %151, %151
  %155 = fadd <8 x float> %151, %151
  %156 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %154
  %157 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %151, <8 x float> %151, <8 x float> %156) #7
  %158 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %155, <8 x float> %152, <8 x float> %157) #7
  %159 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %154, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #7
  %160 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %159, <8 x float> %154, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #7
  %161 = fmul <8 x float> %154, %160
  %162 = fadd <8 x float> %161, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %163 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %162
  %164 = fadd <8 x float> %161, %163
  %165 = fmul <8 x float> %154, %162
  %166 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %165
  %167 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %154, <8 x float> %166) #7
  %168 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %164, <8 x float> %154, <8 x float> %167) #7
  %169 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %158, <8 x float> %168) #7
  %170 = fadd <8 x float> %165, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %171 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %170
  %172 = fadd <8 x float> %165, %171
  %173 = fadd <8 x float> %169, %172
  %174 = fmul <8 x float> %151, %173
  %175 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %152, <8 x float> %170, <8 x float> %174) #7
  %176 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %151, <8 x float> %170, <8 x float> %175) #7
  %177 = and <8 x i32> %153, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %178 = icmp ne <8 x i32> %177, zeroinitializer
  %179 = sext <8 x i1> %178 to <8 x i32>
  %180 = bitcast <8 x i32> %179 to <4 x i64>
  %181 = and <4 x i64> %180, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %182 = bitcast <8 x float> %176 to <4 x i64>
  %183 = xor <4 x i64> %181, %182
  %184 = bitcast <4 x i64> %183 to <8 x float>
  %185 = icmp eq <8 x i32> %150, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %186 = sext <8 x i1> %185 to <8 x i32>
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %184, <8 x float> %0, <8 x float> %187) #7
  ret <8 x float> %188
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cosf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %40, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #7
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %16 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %15) #7
  %17 = fmul <8 x float> %15, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %18 = fadd <8 x float> %17, %0
  %19 = fsub <8 x float> %18, %0
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %0, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fmul <8 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %25 = fadd <8 x float> %24, %18
  %26 = fsub <8 x float> %25, %18
  %27 = fsub <8 x float> %25, %26
  %28 = fsub <8 x float> %18, %27
  %29 = fsub <8 x float> %24, %26
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %23, %30
  %32 = fmul <8 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %33 = fadd <8 x float> %32, %25
  %34 = fsub <8 x float> %33, %25
  %35 = fsub <8 x float> %33, %34
  %36 = fsub <8 x float> %25, %35
  %37 = fsub <8 x float> %32, %34
  %38 = fadd <8 x float> %37, %36
  %39 = fadd <8 x float> %38, %31
  br label %160

; <label>:40:                                     ; preds = %1
  %41 = bitcast <8 x float> %0 to <8 x i32>
  %42 = lshr <8 x i32> %41, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %43 = and <8 x i32> %42, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %44 = add nsw <8 x i32> %43, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %45 = icmp ugt <8 x i32> %43, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %46 = select <8 x i1> %45, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %47 = add <8 x i32> %46, %41
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = ashr <8 x i32> %44, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %50 = xor <8 x i32> %49, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %51 = and <8 x i32> %50, %44
  %52 = shl <8 x i32> %51, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %53 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %52, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !15
  %54 = fmul <8 x float> %53, %48
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %53, <8 x float> %55) #7
  %57 = fmul <8 x float> %54, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %58 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %57, i32 8) #7
  %59 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %54, i32 8) #7
  %60 = fmul <8 x float> %59, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %61 = fsub <8 x float> %58, %60
  %62 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %61) #7
  %63 = fmul <8 x float> %58, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %64 = fsub <8 x float> %54, %63
  %65 = fadd <8 x float> %56, %64
  %66 = fsub <8 x float> %64, %65
  %67 = fadd <8 x float> %56, %66
  %68 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %52, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !15
  %69 = fmul <8 x float> %68, %48
  %70 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %68, <8 x float> %70) #7
  %72 = fadd <8 x float> %65, %69
  %73 = fsub <8 x float> %72, %65
  %74 = fsub <8 x float> %72, %73
  %75 = fsub <8 x float> %65, %74
  %76 = fsub <8 x float> %69, %73
  %77 = fadd <8 x float> %76, %75
  %78 = fadd <8 x float> %71, %67
  %79 = fadd <8 x float> %78, %77
  %80 = fmul <8 x float> %72, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %81 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %80, i32 8) #7
  %82 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %72, i32 8) #7
  %83 = fmul <8 x float> %82, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %84 = fsub <8 x float> %81, %83
  %85 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %84) #7
  %86 = fmul <8 x float> %81, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %87 = fsub <8 x float> %72, %86
  %88 = add <8 x i32> %85, %62
  %89 = fadd <8 x float> %87, %79
  %90 = fsub <8 x float> %87, %89
  %91 = fadd <8 x float> %79, %90
  %92 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %52, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !15
  %93 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %52, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !15
  %94 = fmul <8 x float> %92, %48
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %94
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %92, <8 x float> %48, <8 x float> %95) #7
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %93, <8 x float> %48, <8 x float> %96) #7
  %98 = fadd <8 x float> %94, %89
  %99 = fsub <8 x float> %98, %89
  %100 = fsub <8 x float> %98, %99
  %101 = fsub <8 x float> %89, %100
  %102 = fsub <8 x float> %94, %99
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %97, %91
  %105 = fadd <8 x float> %104, %103
  %106 = fadd <8 x float> %98, %105
  %107 = fsub <8 x float> %98, %106
  %108 = fadd <8 x float> %105, %107
  %109 = fmul <8 x float> %106, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %110 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %109
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %110) #7
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %111) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %112) #7
  %114 = bitcast <8 x i32> %47 to <4 x i64>
  %115 = and <4 x i64> %114, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %116 = bitcast <4 x i64> %115 to <8 x float>
  %117 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %116, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %118 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %48, <8 x float> %117) #7
  %119 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %113, <8 x float> zeroinitializer, <8 x float> %117) #7
  %120 = shl <8 x i32> %88, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = and <8 x i32> %120, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %122 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %118, <8 x float> zeroinitializer, i8 30) #7
  %123 = bitcast <8 x float> %122 to <32 x i8>
  %124 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0, i8 7, i8 0, i8 0, i8 0>, <32 x i8> <i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0, i8 8, i8 0, i8 0, i8 0>, <32 x i8> %123) #7
  %125 = bitcast <32 x i8> %124 to <8 x i32>
  %126 = add <8 x i32> %121, %125
  %127 = ashr <8 x i32> %126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = and <8 x i32> %88, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %129 = icmp eq <8 x i32> %128, zeroinitializer
  %130 = sext <8 x i1> %129 to <8 x i32>
  %131 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> zeroinitializer, <8 x float> %122) #7
  %132 = bitcast <8 x float> %131 to <4 x i64>
  %133 = and <4 x i64> %132, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %134 = xor <4 x i64> %133, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %135 = bitcast <4 x i64> %134 to <8 x float>
  %136 = or <4 x i64> %133, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %137 = bitcast <4 x i64> %136 to <8 x float>
  %138 = fadd <8 x float> %118, %135
  %139 = fsub <8 x float> %138, %118
  %140 = fsub <8 x float> %138, %139
  %141 = fsub <8 x float> %118, %140
  %142 = fsub <8 x float> %135, %139
  %143 = fadd <8 x float> %142, %141
  %144 = fadd <8 x float> %119, %137
  %145 = fadd <8 x float> %144, %143
  %146 = bitcast <8 x i32> %130 to <8 x float>
  %147 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %138, <8 x float> %146) #7
  %148 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %119, <8 x float> %145, <8 x float> %146) #7
  %149 = fadd <8 x float> %147, %148
  %150 = fsub <8 x float> %147, %149
  %151 = fadd <8 x float> %148, %150
  %152 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %153 = fcmp uno <8 x float> %0, zeroinitializer
  %154 = or <8 x i1> %152, %153
  %155 = sext <8 x i1> %154 to <8 x i32>
  %156 = bitcast <8 x i32> %155 to <4 x i64>
  %157 = bitcast <8 x float> %149 to <4 x i64>
  %158 = or <4 x i64> %157, %156
  %159 = bitcast <4 x i64> %158 to <8 x float>
  br label %160

; <label>:160:                                    ; preds = %40, %12
  %161 = phi <8 x float> [ %159, %40 ], [ %33, %12 ]
  %162 = phi <8 x float> [ %151, %40 ], [ %39, %12 ]
  %163 = phi <8 x i32> [ %127, %40 ], [ %16, %12 ]
  %164 = fmul <8 x float> %161, %161
  %165 = fadd <8 x float> %161, %161
  %166 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %164
  %167 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %161, <8 x float> %161, <8 x float> %166) #7
  %168 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %165, <8 x float> %162, <8 x float> %167) #7
  %169 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>, <8 x float> %164, <8 x float> <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>) #7
  %170 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %169, <8 x float> %164, <8 x float> <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>) #7
  %171 = fmul <8 x float> %164, %170
  %172 = fadd <8 x float> %171, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %173 = fsub <8 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %172
  %174 = fadd <8 x float> %171, %173
  %175 = fmul <8 x float> %164, %172
  %176 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %175
  %177 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %172, <8 x float> %164, <8 x float> %176) #7
  %178 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %174, <8 x float> %164, <8 x float> %177) #7
  %179 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %172, <8 x float> %168, <8 x float> %178) #7
  %180 = fadd <8 x float> %175, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %181 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %180
  %182 = fadd <8 x float> %175, %181
  %183 = fadd <8 x float> %179, %182
  %184 = fmul <8 x float> %161, %183
  %185 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %180, <8 x float> %184) #7
  %186 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %161, <8 x float> %180, <8 x float> %185) #7
  %187 = and <8 x i32> %163, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %188 = icmp eq <8 x i32> %187, zeroinitializer
  %189 = sext <8 x i1> %188 to <8 x i32>
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = and <4 x i64> %190, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %192 = bitcast <8 x float> %186 to <4 x i64>
  %193 = xor <4 x i64> %191, %192
  %194 = bitcast <4 x i64> %193 to <8 x float>
  ret <8 x float> %194
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastsinf8_u3500avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>, <8 x float> %0) #7
  %6 = fmul <8 x float> %5, %5
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>, <8 x float> %6, <8 x float> <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>) #7
  %9 = fmul <8 x float> %5, %6
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %8, <8 x float> %5) #7
  %11 = and <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = icmp ne <8 x i32> %11, zeroinitializer
  %13 = sext <8 x i1> %12 to <8 x i32>
  %14 = bitcast <8 x i32> %13 to <4 x i64>
  %15 = and <4 x i64> %14, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %16 = bitcast <8 x float> %10 to <4 x i64>
  %17 = xor <4 x i64> %15, %16
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x float> %0 to <4 x i64>
  %20 = and <4 x i64> %19, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %21, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #7
  %23 = bitcast <8 x float> %22 to <4 x i64>
  %24 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %25 = shufflevector <4 x i64> %23, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %26 = and <2 x i64> %25, %24
  %27 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %26, <2 x i64> <i64 -1, i64 -1>) #7
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %32, !prof !2

; <label>:29:                                     ; preds = %1
  %30 = tail call <8 x float> @Sleef_sinf8_u35avx2(<8 x float> %0)
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %18, <8 x float> %22) #7
  br label %32

; <label>:32:                                     ; preds = %1, %29
  %33 = phi <8 x float> [ %31, %29 ], [ %18, %1 ]
  ret <8 x float> %33
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastcosf8_u3500avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #7
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %5 = fadd <8 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>, <8 x float> %5) #7
  %7 = fmul <8 x float> %6, %6
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>, <8 x float> %7, <8 x float> <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %7, <8 x float> <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>) #7
  %10 = fmul <8 x float> %6, %7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> %6) #7
  %12 = and <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %13 = icmp eq <8 x i32> %12, zeroinitializer
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <4 x i64>
  %16 = and <4 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <8 x float> %11 to <4 x i64>
  %18 = xor <4 x i64> %16, %17
  %19 = bitcast <4 x i64> %18 to <8 x float>
  %20 = bitcast <8 x float> %0 to <4 x i64>
  %21 = and <4 x i64> %20, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %22, <8 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %26 = shufflevector <4 x i64> %24, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %27 = and <2 x i64> %26, %25
  %28 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %27, <2 x i64> <i64 -1, i64 -1>) #7
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33, !prof !2

; <label>:30:                                     ; preds = %1
  %31 = tail call <8 x float> @Sleef_cosf8_u35avx2(<8 x float> %0)
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %19, <8 x float> %23) #7
  br label %33

; <label>:33:                                     ; preds = %1, %30
  %34 = phi <8 x float> [ %32, %30 ], [ %19, %1 ]
  ret <8 x float> %34
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u35avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %20, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %1) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>, <8 x float> %17) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>, <8 x float> %18) #7
  br label %125

; <label>:20:                                     ; preds = %2
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i8 17) #7
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %24 = shufflevector <4 x i64> %22, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %25 = and <2 x i64> %24, %23
  %26 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %25, <2 x i64> <i64 -1, i64 -1>) #7
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %36, label %28, !prof !2

; <label>:28:                                     ; preds = %20
  %29 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #7
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>, <8 x float> %1) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>, <8 x float> %34) #7
  br label %125

; <label>:36:                                     ; preds = %20
  %37 = bitcast <8 x float> %1 to <8 x i32>
  %38 = lshr <8 x i32> %37, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %39 = and <8 x i32> %38, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %40 = add nsw <8 x i32> %39, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %41 = icmp ugt <8 x i32> %39, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %42 = select <8 x i1> %41, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %43 = add <8 x i32> %42, %37
  %44 = bitcast <8 x i32> %43 to <8 x float>
  %45 = ashr <8 x i32> %40, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %46 = xor <8 x i32> %45, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %47 = and <8 x i32> %46, %40
  %48 = shl <8 x i32> %47, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %49 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %48, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !18
  %50 = fmul <8 x float> %49, %44
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %49, <8 x float> %51) #7
  %53 = fmul <8 x float> %50, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %54 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %53, i32 8) #7
  %55 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %50, i32 8) #7
  %56 = fmul <8 x float> %55, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %57 = fsub <8 x float> %54, %56
  %58 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %57) #7
  %59 = fmul <8 x float> %54, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %60 = fsub <8 x float> %50, %59
  %61 = fadd <8 x float> %52, %60
  %62 = fsub <8 x float> %60, %61
  %63 = fadd <8 x float> %52, %62
  %64 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %48, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !18
  %65 = fmul <8 x float> %64, %44
  %66 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %65
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %64, <8 x float> %66) #7
  %68 = fadd <8 x float> %61, %65
  %69 = fsub <8 x float> %68, %61
  %70 = fsub <8 x float> %68, %69
  %71 = fsub <8 x float> %61, %70
  %72 = fsub <8 x float> %65, %69
  %73 = fadd <8 x float> %72, %71
  %74 = fadd <8 x float> %67, %63
  %75 = fadd <8 x float> %74, %73
  %76 = fmul <8 x float> %68, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %77 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %76, i32 8) #7
  %78 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %68, i32 8) #7
  %79 = fmul <8 x float> %78, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %80 = fsub <8 x float> %77, %79
  %81 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %80) #7
  %82 = fmul <8 x float> %77, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %83 = fsub <8 x float> %68, %82
  %84 = add <8 x i32> %81, %58
  %85 = fadd <8 x float> %83, %75
  %86 = fsub <8 x float> %83, %85
  %87 = fadd <8 x float> %75, %86
  %88 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %48, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !18
  %89 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %48, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !18
  %90 = fmul <8 x float> %88, %44
  %91 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %90
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %88, <8 x float> %44, <8 x float> %91) #7
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %44, <8 x float> %92) #7
  %94 = fadd <8 x float> %90, %85
  %95 = fsub <8 x float> %94, %85
  %96 = fsub <8 x float> %94, %95
  %97 = fsub <8 x float> %85, %96
  %98 = fsub <8 x float> %90, %95
  %99 = fadd <8 x float> %98, %97
  %100 = fadd <8 x float> %93, %87
  %101 = fadd <8 x float> %100, %99
  %102 = fadd <8 x float> %94, %101
  %103 = fsub <8 x float> %94, %102
  %104 = fadd <8 x float> %101, %103
  %105 = fmul <8 x float> %102, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %106 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %105
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %102, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %102, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %108) #7
  %110 = bitcast <8 x i32> %43 to <4 x i64>
  %111 = and <4 x i64> %110, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %112 = bitcast <4 x i64> %111 to <8 x float>
  %113 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %112, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %105, <8 x float> %44, <8 x float> %113) #7
  %115 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> zeroinitializer, <8 x float> %113) #7
  %116 = fadd <8 x float> %114, %115
  %117 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %118 = fcmp uno <8 x float> %1, zeroinitializer
  %119 = or <8 x i1> %117, %118
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = bitcast <8 x float> %116 to <4 x i64>
  %123 = or <4 x i64> %122, %121
  %124 = bitcast <4 x i64> %123 to <8 x float>
  br label %125

; <label>:125:                                    ; preds = %28, %36, %13
  %126 = phi <8 x float> [ %19, %13 ], [ %35, %28 ], [ %124, %36 ]
  %127 = phi <8 x i32> [ %15, %13 ], [ %30, %28 ], [ %84, %36 ]
  %128 = fmul <8 x float> %126, %126
  %129 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>, <8 x float> %128, <8 x float> <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>) #7
  %130 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %129, <8 x float> %128, <8 x float> <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>) #7
  %131 = fmul <8 x float> %128, %130
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %126, <8 x float> %126) #7
  %133 = bitcast <8 x float> %1 to <8 x i32>
  %134 = icmp eq <8 x i32> %133, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %135 = sext <8 x i1> %134 to <8 x i32>
  %136 = bitcast <8 x i32> %135 to <8 x float>
  %137 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %132, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %136) #7
  %138 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>, <8 x float> %128, <8 x float> <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>) #7
  %139 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %128, <8 x float> <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>) #7
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %139, <8 x float> %128, <8 x float> <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>) #7
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %128, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #7
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %141, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %143 = and <8 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %144 = icmp eq <8 x i32> %143, zeroinitializer
  %145 = sext <8 x i1> %144 to <8 x i32>
  %146 = bitcast <8 x i32> %145 to <8 x float>
  %147 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %142, <8 x float> %137, <8 x float> %146) #7
  %148 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %137, <8 x float> %142, <8 x float> %146) #7
  %149 = and <8 x i32> %127, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %150 = icmp ne <8 x i32> %149, zeroinitializer
  %151 = sext <8 x i1> %150 to <8 x i32>
  %152 = bitcast <8 x i32> %151 to <4 x i64>
  %153 = and <4 x i64> %152, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %154 = bitcast <8 x float> %147 to <4 x i64>
  %155 = xor <4 x i64> %153, %154
  %156 = add <8 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %157 = and <8 x i32> %156, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %158 = icmp ne <8 x i32> %157, zeroinitializer
  %159 = sext <8 x i1> %158 to <8 x i32>
  %160 = bitcast <8 x i32> %159 to <4 x i64>
  %161 = and <4 x i64> %160, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %162 = bitcast <8 x float> %148 to <4 x i64>
  %163 = xor <4 x i64> %161, %162
  %164 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %155, <4 x i64>* %164, align 32
  %165 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %166 = bitcast <8 x float>* %165 to <4 x i64>*
  store <4 x i64> %163, <4 x i64>* %166, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf8_u10avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %9 = shufflevector <4 x i64> %7, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %10 = and <2 x i64> %9, %8
  %11 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %10, <2 x i64> <i64 -1, i64 -1>) #7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %31, label %13, !prof !2

; <label>:13:                                     ; preds = %2
  %14 = fmul <8 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %15 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %14, i32 8) #7
  %16 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %1) #7
  %18 = fmul <8 x float> %15, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %19 = fadd <8 x float> %18, %17
  %20 = fsub <8 x float> %19, %17
  %21 = fsub <8 x float> %19, %20
  %22 = fsub <8 x float> %17, %21
  %23 = fsub <8 x float> %18, %20
  %24 = fadd <8 x float> %23, %22
  %25 = fmul <8 x float> %15, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %26 = fadd <8 x float> %25, %19
  %27 = fsub <8 x float> %19, %26
  %28 = fadd <8 x float> %25, %27
  %29 = fadd <8 x float> %28, %24
  %30 = bitcast <8 x float> %1 to <8 x i32>
  br label %119

; <label>:31:                                     ; preds = %2
  %32 = bitcast <8 x float> %1 to <8 x i32>
  %33 = lshr <8 x i32> %32, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %34 = and <8 x i32> %33, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %35 = add nsw <8 x i32> %34, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %36 = icmp ugt <8 x i32> %34, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %37 = select <8 x i1> %36, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %38 = add <8 x i32> %37, %32
  %39 = bitcast <8 x i32> %38 to <8 x float>
  %40 = ashr <8 x i32> %35, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %41 = xor <8 x i32> %40, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %42 = and <8 x i32> %41, %35
  %43 = shl <8 x i32> %42, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %44 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %43, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !21
  %45 = fmul <8 x float> %44, %39
  %46 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %45
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %44, <8 x float> %46) #7
  %48 = fmul <8 x float> %45, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %49 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %48, i32 8) #7
  %50 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %45, i32 8) #7
  %51 = fmul <8 x float> %50, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %52 = fsub <8 x float> %49, %51
  %53 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %52) #7
  %54 = fmul <8 x float> %49, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %55 = fsub <8 x float> %45, %54
  %56 = fadd <8 x float> %47, %55
  %57 = fsub <8 x float> %55, %56
  %58 = fadd <8 x float> %47, %57
  %59 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %43, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !21
  %60 = fmul <8 x float> %59, %39
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %59, <8 x float> %61) #7
  %63 = fadd <8 x float> %56, %60
  %64 = fsub <8 x float> %63, %56
  %65 = fsub <8 x float> %63, %64
  %66 = fsub <8 x float> %56, %65
  %67 = fsub <8 x float> %60, %64
  %68 = fadd <8 x float> %67, %66
  %69 = fadd <8 x float> %62, %58
  %70 = fadd <8 x float> %69, %68
  %71 = fmul <8 x float> %63, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %72 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %71, i32 8) #7
  %73 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %63, i32 8) #7
  %74 = fmul <8 x float> %73, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %75 = fsub <8 x float> %72, %74
  %76 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %75) #7
  %77 = fmul <8 x float> %72, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %78 = fsub <8 x float> %63, %77
  %79 = add <8 x i32> %76, %53
  %80 = fadd <8 x float> %78, %70
  %81 = fsub <8 x float> %78, %80
  %82 = fadd <8 x float> %70, %81
  %83 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %43, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !21
  %84 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %43, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !21
  %85 = fmul <8 x float> %83, %39
  %86 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %85
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %39, <8 x float> %86) #7
  %88 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %84, <8 x float> %39, <8 x float> %87) #7
  %89 = fadd <8 x float> %85, %80
  %90 = fsub <8 x float> %89, %80
  %91 = fsub <8 x float> %89, %90
  %92 = fsub <8 x float> %80, %91
  %93 = fsub <8 x float> %85, %90
  %94 = fadd <8 x float> %93, %92
  %95 = fadd <8 x float> %88, %82
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %89, %96
  %98 = fsub <8 x float> %89, %97
  %99 = fadd <8 x float> %96, %98
  %100 = fmul <8 x float> %97, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %101 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %100
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %101) #7
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %99, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %102) #7
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %103) #7
  %105 = bitcast <8 x i32> %38 to <4 x i64>
  %106 = and <4 x i64> %105, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %107 = bitcast <4 x i64> %106 to <8 x float>
  %108 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %107, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> %39, <8 x float> %108) #7
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %104, <8 x float> zeroinitializer, <8 x float> %108) #7
  %111 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %112 = fcmp uno <8 x float> %1, zeroinitializer
  %113 = or <8 x i1> %111, %112
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = bitcast <8 x i32> %114 to <4 x i64>
  %116 = bitcast <8 x float> %109 to <4 x i64>
  %117 = or <4 x i64> %116, %115
  %118 = bitcast <4 x i64> %117 to <8 x float>
  br label %119

; <label>:119:                                    ; preds = %31, %13
  %120 = phi <8 x i32> [ %32, %31 ], [ %30, %13 ]
  %121 = phi <8 x float> [ %118, %31 ], [ %26, %13 ]
  %122 = phi <8 x float> [ %110, %31 ], [ %29, %13 ]
  %123 = phi <8 x i32> [ %79, %31 ], [ %16, %13 ]
  %124 = fmul <8 x float> %121, %122
  %125 = fadd <8 x float> %124, %124
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %121, <8 x float> %121, <8 x float> %125) #7
  %127 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>, <8 x float> %126, <8 x float> <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>) #7
  %128 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %127, <8 x float> %126, <8 x float> <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>) #7
  %129 = fmul <8 x float> %121, %126
  %130 = fmul <8 x float> %129, %128
  %131 = fadd <8 x float> %121, %130
  %132 = fsub <8 x float> %121, %131
  %133 = fadd <8 x float> %130, %132
  %134 = fadd <8 x float> %122, %133
  %135 = fadd <8 x float> %131, %134
  %136 = icmp eq <8 x i32> %120, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %137 = sext <8 x i1> %136 to <8 x i32>
  %138 = bitcast <8 x i32> %137 to <8 x float>
  %139 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %135, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %138) #7
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>, <8 x float> %126, <8 x float> <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>) #7
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %126, <8 x float> <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>) #7
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %126, <8 x float> <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>) #7
  %143 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %126, <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>) #7
  %144 = fmul <8 x float> %126, %143
  %145 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %144
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %126, <8 x float> %143, <8 x float> %145) #7
  %147 = fadd <8 x float> %144, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %148 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %147
  %149 = fadd <8 x float> %144, %148
  %150 = fadd <8 x float> %146, %149
  %151 = fadd <8 x float> %147, %150
  %152 = and <8 x i32> %123, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %153 = icmp eq <8 x i32> %152, zeroinitializer
  %154 = sext <8 x i1> %153 to <8 x i32>
  %155 = bitcast <8 x i32> %154 to <8 x float>
  %156 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %151, <8 x float> %139, <8 x float> %155) #7
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %139, <8 x float> %151, <8 x float> %155) #7
  %158 = and <8 x i32> %123, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %159 = icmp ne <8 x i32> %158, zeroinitializer
  %160 = sext <8 x i1> %159 to <8 x i32>
  %161 = bitcast <8 x i32> %160 to <4 x i64>
  %162 = and <4 x i64> %161, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %163 = bitcast <8 x float> %156 to <4 x i64>
  %164 = xor <4 x i64> %162, %163
  %165 = add <8 x i32> %123, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %166 = and <8 x i32> %165, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %167 = icmp ne <8 x i32> %166, zeroinitializer
  %168 = sext <8 x i1> %167 to <8 x i32>
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = and <4 x i64> %169, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %171 = bitcast <8 x float> %157 to <4 x i64>
  %172 = xor <4 x i64> %170, %171
  %173 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %164, <4 x i64>* %173, align 32
  %174 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %175 = bitcast <8 x float>* %174 to <4 x i64>*
  store <4 x i64> %172, <4 x i64>* %175, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u05avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #7
  %5 = lshr <8 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <8 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <8 x i32> %6, %4
  %8 = and <8 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %8) #7
  %10 = fsub <8 x float> %3, %9
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> %11, <8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %11, <8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>) #7
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %18 = fsub <8 x float> %17, %16
  %19 = fsub <8 x float> %17, %18
  %20 = fsub <8 x float> %16, %19
  %21 = fsub <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %18
  %22 = fadd <8 x float> %21, %20
  %23 = fadd <8 x float> %22, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %24 = fmul <8 x float> %11, %17
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %24
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %17, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %17, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %23, <8 x float> %27) #7
  %29 = fadd <8 x float> %24, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %30 = fsub <8 x float> %29, %24
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %24, %31
  %33 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %36 = fadd <8 x float> %35, %34
  %37 = fmul <8 x float> %10, %29
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %10, <8 x float> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %10, <8 x float> %39) #7
  %41 = fadd <8 x float> %37, %40
  %42 = bitcast <8 x float> %1 to <8 x i32>
  %43 = icmp eq <8 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %45) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %11, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>) #7
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %11, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>) #7
  %49 = fmul <8 x float> %11, %48
  %50 = fadd <8 x float> %49, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %51 = fsub <8 x float> %50, %49
  %52 = fsub <8 x float> %50, %51
  %53 = fsub <8 x float> %49, %52
  %54 = fsub <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %51
  %55 = fadd <8 x float> %54, %53
  %56 = fadd <8 x float> %55, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %57 = fmul <8 x float> %11, %50
  %58 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %57
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %50, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %50, <8 x float> %59) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %56, <8 x float> %60) #7
  %62 = fadd <8 x float> %57, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %63 = fsub <8 x float> %62, %57
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %57, %64
  %66 = fsub <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %61, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %11, %62
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %70
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %11, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %11, <8 x float> %72) #7
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %13, <8 x float> %73) #7
  %75 = fadd <8 x float> %70, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> %75, %70
  %77 = fsub <8 x float> %75, %76
  %78 = fsub <8 x float> %70, %77
  %79 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %76
  %80 = fadd <8 x float> %79, %78
  %81 = fadd <8 x float> %74, %80
  %82 = fadd <8 x float> %75, %81
  %83 = and <8 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %84 = icmp eq <8 x i32> %83, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> %46, <8 x float> %86) #7
  %88 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %82, <8 x float> %86) #7
  %89 = and <8 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %90 = icmp ne <8 x i32> %89, zeroinitializer
  %91 = sext <8 x i1> %90 to <8 x i32>
  %92 = bitcast <8 x i32> %91 to <4 x i64>
  %93 = and <4 x i64> %92, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = bitcast <8 x float> %87 to <4 x i64>
  %95 = xor <4 x i64> %93, %94
  %96 = add <8 x i32> %8, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %97 = and <8 x i32> %96, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %98 = icmp ne <8 x i32> %97, zeroinitializer
  %99 = sext <8 x i1> %98 to <8 x i32>
  %100 = bitcast <8 x i32> %99 to <4 x i64>
  %101 = and <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %88 to <4 x i64>
  %103 = xor <4 x i64> %101, %102
  %104 = bitcast <8 x float> %1 to <4 x i64>
  %105 = and <4 x i64> %104, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %106, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = xor <4 x i64> %108, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %95, %109
  %111 = and <4 x i64> %103, %109
  %112 = fcmp oeq <8 x float> %106, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %113 = sext <8 x i1> %112 to <8 x i32>
  %114 = bitcast <8 x i32> %113 to <4 x i64>
  %115 = or <4 x i64> %110, %114
  %116 = or <4 x i64> %111, %114
  %117 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %115, <4 x i64>* %117, align 32
  %118 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %119 = bitcast <8 x float>* %118 to <4 x i64>*
  store <4 x i64> %116, <4 x i64>* %119, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif8_u35avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #7
  %5 = lshr <8 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <8 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <8 x i32> %6, %4
  %8 = and <8 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %8) #7
  %10 = fsub <8 x float> %3, %9
  %11 = fmul <8 x float> %10, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>, <8 x float> %11, <8 x float> <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %11, <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %11, <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>) #7
  %15 = fmul <8 x float> %10, %14
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>, <8 x float> %11, <8 x float> <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %11, <8 x float> <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %11, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %20 = and <8 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %21 = icmp eq <8 x i32> %20, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> %15, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %19, <8 x float> %23) #7
  %26 = and <8 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %27 = icmp ne <8 x i32> %26, zeroinitializer
  %28 = sext <8 x i1> %27 to <8 x i32>
  %29 = bitcast <8 x i32> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <8 x float> %24 to <4 x i64>
  %32 = xor <4 x i64> %30, %31
  %33 = add <8 x i32> %8, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %34 = and <8 x i32> %33, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <8 x i32> %34, zeroinitializer
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <8 x float> %25 to <4 x i64>
  %40 = xor <4 x i64> %38, %39
  %41 = bitcast <8 x float> %1 to <4 x i64>
  %42 = and <4 x i64> %41, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %43, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #7
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %47 = and <4 x i64> %32, %46
  %48 = and <4 x i64> %40, %46
  %49 = fcmp oeq <8 x float> %43, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %50 = sext <8 x i1> %49 to <8 x i32>
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = or <4 x i64> %47, %51
  %53 = or <4 x i64> %48, %51
  %54 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %52, <4 x i64>* %54, align 32
  %55 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %56 = bitcast <8 x float>* %55 to <4 x i64>*
  store <4 x i64> %53, <4 x i64>* %56, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff8_avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #7
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #7
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %8 = shufflevector <4 x i64> %6, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %9 = and <2 x i64> %8, %7
  %10 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %9, <2 x i64> <i64 -1, i64 -1>) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %30, label %12, !prof !2

; <label>:12:                                     ; preds = %1
  %13 = fmul <8 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %14 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 8) #7
  %15 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>, <8 x float> %0) #7
  %17 = fmul <8 x float> %14, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %18 = fadd <8 x float> %17, %16
  %19 = fsub <8 x float> %18, %16
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %16, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fmul <8 x float> %14, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %25 = fadd <8 x float> %24, %18
  %26 = fsub <8 x float> %18, %25
  %27 = fadd <8 x float> %24, %26
  %28 = fadd <8 x float> %27, %23
  %29 = bitcast <8 x float> %0 to <8 x i32>
  br label %121

; <label>:30:                                     ; preds = %1
  %31 = bitcast <8 x float> %0 to <8 x i32>
  %32 = lshr <8 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = and <8 x i32> %32, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %34 = add nsw <8 x i32> %33, <i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152, i32 -152>
  %35 = icmp ugt <8 x i32> %33, <i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217, i32 217>
  %36 = select <8 x i1> %35, <8 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <8 x i32> zeroinitializer
  %37 = add <8 x i32> %36, %31
  %38 = bitcast <8 x i32> %37 to <8 x float>
  %39 = ashr <8 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %40 = xor <8 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <8 x i32> %40, %34
  %42 = shl <8 x i32> %41, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %43 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !24
  %44 = fmul <8 x float> %43, %38
  %45 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %44
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %43, <8 x float> %45) #7
  %47 = fmul <8 x float> %44, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %48 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %47, i32 8) #7
  %49 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %44, i32 8) #7
  %50 = fmul <8 x float> %49, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %51 = fsub <8 x float> %48, %50
  %52 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %51) #7
  %53 = fmul <8 x float> %48, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %54 = fsub <8 x float> %44, %53
  %55 = fadd <8 x float> %46, %54
  %56 = fsub <8 x float> %54, %55
  %57 = fadd <8 x float> %46, %56
  %58 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !24
  %59 = fmul <8 x float> %58, %38
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %58, <8 x float> %60) #7
  %62 = fadd <8 x float> %55, %59
  %63 = fsub <8 x float> %62, %55
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %55, %64
  %66 = fsub <8 x float> %59, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %61, %57
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %62, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %71 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %70, i32 8) #7
  %72 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %62, i32 8) #7
  %73 = fmul <8 x float> %72, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %74 = fsub <8 x float> %71, %73
  %75 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %74) #7
  %76 = fmul <8 x float> %71, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %77 = fsub <8 x float> %62, %76
  %78 = add <8 x i32> %75, %52
  %79 = fadd <8 x float> %77, %69
  %80 = fsub <8 x float> %77, %79
  %81 = fadd <8 x float> %69, %80
  %82 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !24
  %83 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <8 x i32> %42, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #7, !noalias !24
  %84 = fmul <8 x float> %82, %38
  %85 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %84
  %86 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %82, <8 x float> %38, <8 x float> %85) #7
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %83, <8 x float> %38, <8 x float> %86) #7
  %88 = fadd <8 x float> %84, %79
  %89 = fsub <8 x float> %88, %79
  %90 = fsub <8 x float> %88, %89
  %91 = fsub <8 x float> %79, %90
  %92 = fsub <8 x float> %84, %89
  %93 = fadd <8 x float> %92, %91
  %94 = fadd <8 x float> %87, %81
  %95 = fadd <8 x float> %94, %93
  %96 = fadd <8 x float> %88, %95
  %97 = fsub <8 x float> %88, %96
  %98 = fadd <8 x float> %95, %97
  %99 = fmul <8 x float> %96, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %99
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %100) #7
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>, <8 x float> %101) #7
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>, <8 x float> %102) #7
  %104 = bitcast <8 x i32> %37 to <4 x i64>
  %105 = and <4 x i64> %104, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %106, <8 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i8 17) #7
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> %38, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %103, <8 x float> zeroinitializer, <8 x float> %107) #7
  %110 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %111 = fcmp uno <8 x float> %0, zeroinitializer
  %112 = or <8 x i1> %110, %111
  %113 = sext <8 x i1> %112 to <8 x i32>
  %114 = bitcast <8 x i32> %113 to <4 x i64>
  %115 = bitcast <8 x float> %108 to <4 x i64>
  %116 = or <4 x i64> %115, %114
  %117 = bitcast <4 x i64> %116 to <8 x float>
  %118 = bitcast <8 x float> %109 to <4 x i64>
  %119 = or <4 x i64> %118, %114
  %120 = bitcast <4 x i64> %119 to <8 x float>
  br label %121

; <label>:121:                                    ; preds = %30, %12
  %122 = phi <8 x i32> [ %31, %30 ], [ %29, %12 ]
  %123 = phi <8 x float> [ %117, %30 ], [ %25, %12 ]
  %124 = phi <8 x float> [ %120, %30 ], [ %28, %12 ]
  %125 = phi <8 x i32> [ %78, %30 ], [ %15, %12 ]
  %126 = and <8 x i32> %125, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = icmp ne <8 x i32> %126, zeroinitializer
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = and <4 x i64> %129, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %131 = bitcast <8 x float> %123 to <4 x i64>
  %132 = xor <4 x i64> %130, %131
  %133 = bitcast <4 x i64> %132 to <8 x float>
  %134 = bitcast <8 x float> %124 to <4 x i64>
  %135 = xor <4 x i64> %130, %134
  %136 = bitcast <4 x i64> %135 to <8 x float>
  %137 = fmul <8 x float> %133, %133
  %138 = fadd <8 x float> %133, %133
  %139 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %137
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %133, <8 x float> %133, <8 x float> %139) #7
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %136, <8 x float> %140) #7
  %142 = fadd <8 x float> %141, %137
  %143 = fsub <8 x float> %137, %142
  %144 = fadd <8 x float> %141, %143
  %145 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>, <8 x float> %142, <8 x float> <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>) #7
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %145, <8 x float> %142, <8 x float> <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>) #7
  %147 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %146, <8 x float> %142, <8 x float> <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>) #7
  %148 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %147, <8 x float> %142, <8 x float> <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>) #7
  %149 = fmul <8 x float> %148, %142
  %150 = fadd <8 x float> %149, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %151 = fsub <8 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %150
  %152 = fadd <8 x float> %149, %151
  %153 = fmul <8 x float> %142, %150
  %154 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %153
  %155 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %150, <8 x float> %154) #7
  %156 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %144, <8 x float> %150, <8 x float> %155) #7
  %157 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %142, <8 x float> %152, <8 x float> %156) #7
  %158 = fadd <8 x float> %153, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %159 = fsub <8 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %158
  %160 = fadd <8 x float> %153, %159
  %161 = fadd <8 x float> %157, %160
  %162 = fmul <8 x float> %142, %158
  %163 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %162
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %142, <8 x float> %163) #7
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %161, <8 x float> %142, <8 x float> %164) #7
  %166 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %144, <8 x float> %165) #7
  %167 = fadd <8 x float> %162, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %168 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %167
  %169 = fadd <8 x float> %162, %168
  %170 = fadd <8 x float> %166, %169
  %171 = fmul <8 x float> %167, %133
  %172 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %171
  %173 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %133, <8 x float> %167, <8 x float> %172) #7
  %174 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %136, <8 x float> %167, <8 x float> %173) #7
  %175 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %133, <8 x float> %170, <8 x float> %174) #7
  %176 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %171
  %177 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %172, <8 x float> %176, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %178 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %175
  %179 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %178, <8 x float> %176, <8 x float> %177) #7
  %180 = fmul <8 x float> %176, %179
  %181 = bitcast <8 x i32> %128 to <8 x float>
  %182 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %171, <8 x float> %176, <8 x float> %181) #7
  %183 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %175, <8 x float> %180, <8 x float> %181) #7
  %184 = fadd <8 x float> %182, %183
  %185 = icmp eq <8 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %186 = sext <8 x i1> %185 to <8 x i32>
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %184, <8 x float> %0, <8 x float> %187) #7
  ret <8 x float> %188
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <8 x i32>
  %3 = ashr <8 x i32> %2, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = and <4 x i64> %4, <i64 8589934594, i64 8589934594, i64 8589934594, i64 8589934594>
  %6 = bitcast <8 x float> %0 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = bitcast <4 x i64> %5 to <8 x i32>
  %10 = add <8 x i32> %9, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, i8 17) #7
  %12 = bitcast <4 x i64> %5 to <32 x i8>
  %13 = bitcast <8 x i32> %10 to <32 x i8>
  %14 = bitcast <8 x float> %11 to <32 x i8>
  %15 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %12, <32 x i8> %13, <32 x i8> %14) #7
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %8
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %16, <8 x float> %11) #7
  %18 = fmul <8 x float> %17, %17
  %19 = fmul <8 x float> %18, %18
  %20 = fmul <8 x float> %19, %19
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #7
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %21, <8 x float> %22) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %24, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %23, <8 x float> %26) #7
  %28 = fmul <8 x float> %18, %27
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %28, <8 x float> %17) #7
  %30 = bitcast <32 x i8> %15 to <8 x i32>
  %31 = and <8 x i32> %30, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %32 = icmp ne <8 x i32> %31, zeroinitializer
  %33 = sext <8 x i1> %32 to <8 x i32>
  %34 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %29
  %35 = bitcast <8 x i32> %33 to <8 x float>
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %34, <8 x float> %35) #7
  %37 = and <8 x i32> %30, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %38 = icmp ne <8 x i32> %37, zeroinitializer
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <4 x i64>
  %41 = and <4 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <8 x float> %36 to <4 x i64>
  %43 = xor <4 x i64> %41, %42
  %44 = bitcast <4 x i64> %43 to <8 x float>
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u35avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <8 x i32>
  %7 = ashr <8 x i32> %6, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -4294967298, i64 -4294967298, i64 -4294967298, i64 -4294967298>
  %10 = bitcast <8 x float> %1 to <4 x i64>
  %11 = and <4 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = bitcast <4 x i64> %9 to <8 x i32>
  %14 = add <8 x i32> %13, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %12, <8 x float> %5, i8 17) #7
  %16 = bitcast <4 x i64> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %14 to <32 x i8>
  %18 = bitcast <8 x float> %15 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = or <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %21, <8 x float> %15) #7
  %23 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %12, <8 x float> %5) #7
  %24 = fdiv <8 x float> %22, %23
  %25 = fmul <8 x float> %24, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fmul <8 x float> %26, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %28, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #7
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %31, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #7
  %35 = fmul <8 x float> %25, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %35, <8 x float> %24) #7
  %37 = bitcast <32 x i8> %19 to <8 x i32>
  %38 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %36) #7
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = xor <4 x i64> %41, %40
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = fcmp oeq <8 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <4 x i64>
  %47 = fcmp oeq <8 x float> %1, zeroinitializer
  %48 = or <8 x i1> %44, %47
  %49 = sext <8 x i1> %48 to <8 x i32>
  %50 = or <4 x i64> %41, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %51 = and <4 x i64> %50, %46
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %52
  %54 = bitcast <8 x i32> %49 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> %53, <8 x float> %54) #7
  %56 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = or <4 x i64> %41, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %59 = and <4 x i64> %58, %46
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %55, <8 x float> %61, <8 x float> %62) #7
  %64 = fcmp oeq <8 x float> %0, zeroinitializer
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = and <4 x i64> %8, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = bitcast <8 x i32> %65 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %67, <8 x float> %68) #7
  %70 = fcmp uno <8 x float> %0, %1
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = bitcast <8 x float> %69 to <4 x i64>
  %74 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = xor <4 x i64> %74, %73
  %76 = or <4 x i64> %75, %72
  %77 = bitcast <4 x i64> %76 to <8 x float>
  ret <8 x float> %77
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %16 = fmul <8 x float> %9, %11
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %11) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %5) #7
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = xor <4 x i64> %21, %20
  %23 = bitcast <4 x i64> %22 to <8 x float>
  ret <8 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #7
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #7
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %21 = fmul <8 x float> %10, %16
  %22 = fmul <8 x float> %21, %20
  %23 = bitcast <8 x float> %16 to <4 x i64>
  %24 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = xor <4 x i64> %24, %23
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = bitcast <8 x float> %22 to <4 x i64>
  %28 = xor <4 x i64> %24, %27
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fadd <8 x float> %26, %29
  %31 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %30
  %32 = fadd <8 x float> %16, %22
  %33 = fmul <8 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %31, <8 x float> %5) #7
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %38 = and <4 x i64> %36, %37
  %39 = bitcast <8 x float> %34 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fadd <8 x float> %41, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %43 = bitcast <4 x i64> %38 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %42, <8 x float> %43) #7
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atan2f8_u10avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i8 17) #7
  %7 = fmul <8 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %7, <8 x float> %6) #7
  %9 = fmul <8 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %9, <8 x float> %6) #7
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> zeroinitializer, i8 17) #7
  %15 = bitcast <8 x float> %14 to <32 x i8>
  %16 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> zeroinitializer, <32 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <32 x i8> %15) #7
  %17 = bitcast <8 x float> %14 to <4 x i64>
  %18 = and <4 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x float> %8 to <4 x i64>
  %20 = xor <4 x i64> %18, %19
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = bitcast <4 x i64> %18 to <8 x float>
  %23 = bitcast <32 x i8> %16 to <8 x i32>
  %24 = add <8 x i32> %23, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %21, <8 x float> %13, i8 17) #7
  %26 = bitcast <8 x i32> %24 to <32 x i8>
  %27 = bitcast <8 x float> %25 to <32 x i8>
  %28 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %26, <32 x i8> %27) #7
  %29 = xor <4 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <4 x i64> %29 to <8 x float>
  %32 = bitcast <4 x i64> %30 to <8 x float>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %25) #7
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %32, <8 x float> %25) #7
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %21, <8 x float> %13, <8 x float> %25) #7
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> zeroinitializer, <8 x float> %25) #7
  %37 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %38 = fmul <8 x float> %33, %37
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> %33, <8 x float> %39) #7
  %41 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %35
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %37, <8 x float> %42) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %37, <8 x float> %40) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %44, <8 x float> %45) #7
  %47 = fmul <8 x float> %38, %38
  %48 = fadd <8 x float> %38, %38
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %46, <8 x float> %50) #7
  %52 = fadd <8 x float> %47, %51
  %53 = fsub <8 x float> %47, %52
  %54 = fadd <8 x float> %51, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %52, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %52, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %52, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %52, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %52, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %52, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %52, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #7
  %62 = fmul <8 x float> %52, %61
  %63 = fadd <8 x float> %62, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %64 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %63
  %65 = fadd <8 x float> %62, %64
  %66 = fmul <8 x float> %52, %63
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %63, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %63, <8 x float> %68) #7
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %65, <8 x float> %69) #7
  %71 = fadd <8 x float> %66, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %72 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %73 = fadd <8 x float> %66, %72
  %74 = fadd <8 x float> %70, %73
  %75 = fmul <8 x float> %38, %71
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %71, <8 x float> %76) #7
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %71, <8 x float> %77) #7
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %74, <8 x float> %78) #7
  %80 = bitcast <32 x i8> %28 to <8 x i32>
  %81 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %80) #7
  %82 = fmul <8 x float> %81, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %81, <8 x float> %83) #7
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %81, <8 x float> %84) #7
  %86 = fadd <8 x float> %75, %82
  %87 = fsub <8 x float> %82, %86
  %88 = fadd <8 x float> %75, %87
  %89 = fadd <8 x float> %85, %88
  %90 = fadd <8 x float> %79, %89
  %91 = fadd <8 x float> %86, %90
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = and <4 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = xor <4 x i64> %93, %92
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = and <4 x i64> %19, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fcmp oeq <8 x float> %97, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %99 = sext <8 x i1> %98 to <8 x i32>
  %100 = bitcast <8 x i32> %99 to <4 x i64>
  %101 = fcmp oeq <8 x float> %8, zeroinitializer
  %102 = or <8 x i1> %98, %101
  %103 = sext <8 x i1> %102 to <8 x i32>
  %104 = or <4 x i64> %93, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %105 = and <4 x i64> %104, %100
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %106
  %108 = bitcast <8 x i32> %103 to <8 x float>
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %95, <8 x float> %107, <8 x float> %108) #7
  %110 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %111 = sext <8 x i1> %110 to <8 x i32>
  %112 = or <4 x i64> %93, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %113 = and <4 x i64> %112, %100
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %114
  %116 = bitcast <8 x i32> %111 to <8 x float>
  %117 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %115, <8 x float> %116) #7
  %118 = fcmp oeq <8 x float> %10, zeroinitializer
  %119 = sext <8 x i1> %118 to <8 x i32>
  %120 = bitcast <8 x float> %8 to <8 x i32>
  %121 = ashr <8 x i32> %120, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = and <4 x i64> %122, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = bitcast <8 x i32> %119 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %117, <8 x float> %124, <8 x float> %125) #7
  %127 = fcmp uno <8 x float> %10, %8
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = bitcast <8 x float> %126 to <4 x i64>
  %131 = and <4 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = xor <4 x i64> %131, %130
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  ret <8 x float> %134
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #7
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #7
  %14 = fadd <8 x float> %9, %11
  %15 = fsub <8 x float> %14, %9
  %16 = fsub <8 x float> %14, %15
  %17 = fsub <8 x float> %9, %16
  %18 = fsub <8 x float> %11, %15
  %19 = fadd <8 x float> %18, %17
  %20 = fadd <8 x float> %13, %19
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %14
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %21, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %24, <8 x float> %28) #7
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %4, <8 x float> %5) #7
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> zeroinitializer, <8 x float> %5) #7
  %34 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %43 = fmul <8 x float> %9, %37
  %44 = fmul <8 x float> %43, %42
  %45 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %37
  %46 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %47 = fsub <8 x float> %46, %37
  %48 = fadd <8 x float> %47, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %45, %44
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %51, %44
  %53 = fadd <8 x float> %49, %52
  %54 = fadd <8 x float> %37, %44
  %55 = fadd <8 x float> %50, %53
  %56 = fmul <8 x float> %55, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %5) #7
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = xor <4 x i64> %59, %58
  %61 = bitcast <4 x i64> %60 to <8 x float>
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acosf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #7
  %12 = fmul <8 x float> %11, %11
  %13 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> %13) #7
  %15 = fadd <8 x float> %10, %12
  %16 = fsub <8 x float> %15, %10
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %10, %17
  %19 = fsub <8 x float> %12, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %14, %20
  %22 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %25 = fmul <8 x float> %22, %24
  %26 = fmul <8 x float> %22, %15
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %22, <8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %29) #7
  %31 = fmul <8 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fmul <8 x float> %30, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %4, <8 x float> %5) #7
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %5) #7
  %35 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> zeroinitializer, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %44 = fmul <8 x float> %10, %38
  %45 = fmul <8 x float> %44, %43
  %46 = bitcast <8 x float> %38 to <4 x i64>
  %47 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %45 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fadd <8 x float> %49, %52
  %54 = fsub <8 x float> %49, %53
  %55 = fadd <8 x float> %54, %52
  %56 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %57 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %56
  %58 = fsub <8 x float> %57, %53
  %59 = fadd <8 x float> %58, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %60 = fsub <8 x float> %59, %55
  %61 = fadd <8 x float> %38, %45
  %62 = fsub <8 x float> %38, %61
  %63 = fadd <8 x float> %45, %62
  %64 = fadd <8 x float> %39, %63
  %65 = fmul <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %66 = fmul <8 x float> %64, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %56, <8 x float> %5) #7
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> %60, <8 x float> %5) #7
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %72 = and <4 x i64> %70, %71
  %73 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %67
  %74 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %73
  %75 = fsub <8 x float> %74, %67
  %76 = fadd <8 x float> %75, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %77 = fsub <8 x float> %76, %68
  %78 = bitcast <4 x i64> %72 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %73, <8 x float> %78) #7
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %78) #7
  %81 = fadd <8 x float> %79, %80
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, i8 17) #7
  %6 = bitcast <8 x float> %5 to <32 x i8>
  %7 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> zeroinitializer, <32 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <32 x i8> %6) #7
  %8 = bitcast <8 x float> %5 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %10 = or <4 x i64> %9, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = bitcast <4 x i64> %9 to <8 x float>
  %13 = bitcast <32 x i8> %7 to <8 x i32>
  %14 = add <8 x i32> %13, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %4, i8 17) #7
  %16 = bitcast <8 x i32> %14 to <32 x i8>
  %17 = bitcast <8 x float> %15 to <32 x i8>
  %18 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %7, <32 x i8> %16, <32 x i8> %17) #7
  %19 = xor <4 x i64> %9, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %20 = xor <4 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <4 x i64> %19 to <8 x float>
  %22 = bitcast <4 x i64> %20 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %21, <8 x float> %15) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %22, <8 x float> %15) #7
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %15) #7
  %26 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #7
  %27 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %28 = fmul <8 x float> %23, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %23, <8 x float> %29) #7
  %31 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %27, <8 x float> %32) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %34, <8 x float> %35) #7
  %37 = fmul <8 x float> %28, %28
  %38 = fadd <8 x float> %28, %28
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %28, <8 x float> %39) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %36, <8 x float> %40) #7
  %42 = fadd <8 x float> %37, %41
  %43 = fsub <8 x float> %37, %42
  %44 = fadd <8 x float> %41, %43
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %42, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %42, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %42, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #7
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %42, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #7
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %42, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %42, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %42, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #7
  %52 = fmul <8 x float> %42, %51
  %53 = fadd <8 x float> %52, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %54 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %53
  %55 = fadd <8 x float> %52, %54
  %56 = fmul <8 x float> %42, %53
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %53, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %55, <8 x float> %59) #7
  %61 = fadd <8 x float> %56, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %62 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %63 = fadd <8 x float> %56, %62
  %64 = fadd <8 x float> %60, %63
  %65 = fmul <8 x float> %28, %61
  %66 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %65
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %61, <8 x float> %66) #7
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %61, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %64, <8 x float> %68) #7
  %70 = bitcast <32 x i8> %18 to <8 x i32>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %70) #7
  %72 = fmul <8 x float> %71, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %71, <8 x float> %73) #7
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %71, <8 x float> %74) #7
  %76 = fadd <8 x float> %65, %72
  %77 = fsub <8 x float> %72, %76
  %78 = fadd <8 x float> %65, %77
  %79 = fadd <8 x float> %75, %78
  %80 = fadd <8 x float> %69, %79
  %81 = fadd <8 x float> %76, %80
  %82 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %83 = sext <8 x i1> %82 to <8 x i32>
  %84 = bitcast <8 x i32> %83 to <8 x float>
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %81, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %84) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = xor <4 x i64> %87, %86
  %89 = bitcast <4 x i64> %88 to <8 x float>
  ret <8 x float> %89
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fdiv <8 x float> %20, %21
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %23, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %23, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %23, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %23, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #7
  %28 = bitcast <32 x i8> %19 to <8 x i32>
  %29 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %28) #7
  %30 = fmul <8 x float> %29, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %27, <8 x float> %30) #7
  %32 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %33 = sext <8 x i1> %32 to <8 x i32>
  %34 = bitcast <8 x i32> %33 to <8 x float>
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %37 = bitcast <8 x float> %36 to <4 x i64>
  %38 = fcmp uno <8 x float> %4, zeroinitializer
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <4 x i64>
  %41 = or <4 x i64> %37, %40
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %42) #7
  %44 = fcmp oeq <8 x float> %4, zeroinitializer
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %46) #7
  ret <8 x float> %47
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %4, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %4, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %6, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %12 = fmul <8 x float> %6, %6
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %11, <8 x float> %6) #7
  %14 = fadd <8 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = shl <8 x i32> %15, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %17 = add <8 x i32> %16, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = fmul <8 x float> %14, %18
  %20 = sub <8 x i32> %3, %15
  %21 = shl <8 x i32> %20, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %22 = add <8 x i32> %21, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = fmul <8 x float> %19, %23
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = bitcast <8 x float> %24 to <4 x i64>
  %28 = xor <4 x i64> %26, <i64 -1, i64 -1, i64 -1, i64 -1>
  %29 = and <4 x i64> %27, %28
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #7
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %31) #7
  ret <8 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %6 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = bitcast <8 x float> %5 to <32 x i8>
  %11 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %10) #7
  %12 = and <8 x i32> %9, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = bitcast <32 x i8> %11 to <8 x i32>
  %14 = sub <8 x i32> %12, %13
  %15 = add <8 x i32> %14, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = xor <8 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = ashr <8 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <8 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <8 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = fmul <8 x float> %20, %0
  %22 = sub <8 x i32> %16, %17
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #7
  %28 = fadd <8 x float> %27, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %29 = fmul <8 x float> %28, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #7
  %32 = fmul <8 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fsub <8 x float> %28, %32
  %34 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %33) #7
  %35 = icmp eq <8 x i32> %34, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %37) #7
  %39 = icmp eq <8 x i32> %34, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %41) #7
  %43 = add <8 x i32> %30, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %44 = ashr <8 x i32> %43, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %45 = shl <8 x i32> %44, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %46 = add <8 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <8 x i32> %46 to <8 x float>
  %48 = fmul <8 x float> %42, %47
  %49 = sub <8 x i32> %43, %44
  %50 = shl <8 x i32> %49, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %51 = add <8 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <8 x i32> %51 to <8 x float>
  %53 = fmul <8 x float> %48, %52
  %54 = bitcast <8 x float> %53 to <4 x i64>
  %55 = bitcast <8 x float> %26 to <4 x i64>
  %56 = and <4 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = xor <4 x i64> %56, %54
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = and <4 x i64> %55, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %60, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %60, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #7
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %60, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #7
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %60, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #7
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %60, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #7
  %66 = fmul <8 x float> %65, %60
  %67 = fmul <8 x float> %65, %66
  %68 = fmul <8 x float> %67, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %65, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #7
  %70 = fmul <8 x float> %69, %68
  %71 = fsub <8 x float> %67, %70
  %72 = fmul <8 x float> %71, %58
  ret <8 x float> %72
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cbrtf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %6 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = bitcast <8 x float> %5 to <32 x i8>
  %11 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %10) #7
  %12 = and <8 x i32> %9, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = bitcast <32 x i8> %11 to <8 x i32>
  %14 = sub <8 x i32> %12, %13
  %15 = add <8 x i32> %14, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = xor <8 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = ashr <8 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <8 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <8 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = fmul <8 x float> %20, %0
  %22 = sub <8 x i32> %16, %17
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #7
  %28 = fadd <8 x float> %27, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %29 = fmul <8 x float> %28, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #7
  %32 = fmul <8 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fsub <8 x float> %28, %32
  %34 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %33) #7
  %35 = icmp eq <8 x i32> %34, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <8 x float> %37) #7
  %40 = icmp eq <8 x i32> %34, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %42) #7
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %39, <8 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <8 x float> %42) #7
  %45 = bitcast <8 x float> %43 to <4 x i64>
  %46 = bitcast <8 x float> %26 to <4 x i64>
  %47 = and <4 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %45
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %44 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = and <4 x i64> %46, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %54, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %54, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %54, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #7
  %60 = fmul <8 x float> %59, %59
  %61 = fmul <8 x float> %60, %60
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %61, <8 x float> %59) #7
  %64 = fmul <8 x float> %63, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %65 = fsub <8 x float> %59, %64
  %66 = fmul <8 x float> %65, %65
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %65, <8 x float> %67) #7
  %69 = fmul <8 x float> %66, %66
  %70 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %66, <8 x float> %70) #7
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %66, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %68, <8 x float> %72) #7
  %74 = fmul <8 x float> %69, %54
  %75 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %74
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %54, <8 x float> %75) #7
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %54, <8 x float> %76) #7
  %78 = bitcast <8 x float> %65 to <4 x i64>
  %79 = xor <4 x i64> %78, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fadd <8 x float> %74, %80
  %82 = fsub <8 x float> %81, %74
  %83 = fsub <8 x float> %81, %82
  %84 = fsub <8 x float> %74, %83
  %85 = fsub <8 x float> %80, %82
  %86 = fadd <8 x float> %85, %84
  %87 = fadd <8 x float> %77, %86
  %88 = fadd <8 x float> %81, %87
  %89 = fmul <8 x float> %88, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %90 = fmul <8 x float> %65, %89
  %91 = fadd <8 x float> %66, %90
  %92 = fsub <8 x float> %91, %66
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %66, %93
  %95 = fsub <8 x float> %90, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %68, %96
  %98 = fmul <8 x float> %91, %54
  %99 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %98
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %54, <8 x float> %99) #7
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %54, <8 x float> %100) #7
  %102 = fmul <8 x float> %98, %49
  %103 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %102
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %49, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %49, <8 x float> %104) #7
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %52, <8 x float> %105) #7
  %107 = fadd <8 x float> %106, %102
  %108 = add <8 x i32> %30, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %109 = ashr <8 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %110 = shl <8 x i32> %109, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %111 = add <8 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <8 x i32> %111 to <8 x float>
  %113 = fmul <8 x float> %107, %112
  %114 = sub <8 x i32> %108, %109
  %115 = shl <8 x i32> %114, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %116 = add <8 x i32> %115, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %117 = bitcast <8 x i32> %116 to <8 x float>
  %118 = fmul <8 x float> %113, %117
  %119 = fcmp oeq <8 x float> %54, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = and <4 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = or <4 x i64> %121, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = bitcast <8 x i32> %120 to <8 x float>
  %125 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %123, <8 x float> %124) #7
  %126 = fcmp oeq <8 x float> %54, zeroinitializer
  %127 = sext <8 x i1> %126 to <8 x i32>
  %128 = bitcast <4 x i64> %121 to <8 x float>
  %129 = bitcast <8 x i32> %127 to <8 x float>
  %130 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %125, <8 x float> %128, <8 x float> %129) #7
  ret <8 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_logf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = bitcast <32 x i8> %19 to <8 x i32>
  %21 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %20) #7
  %22 = fmul <8 x float> %21, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %21, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %21, <8 x float> %24) #7
  %26 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <8 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = fadd <8 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %36 = fsub <8 x float> %14, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %32
  %39 = fmul <8 x float> %26, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %26, <8 x float> %40) #7
  %42 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %38, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %44 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %38, <8 x float> %43) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %38, <8 x float> %41) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %45, <8 x float> %46) #7
  %48 = fmul <8 x float> %39, %39
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %48, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %48, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #7
  %51 = fmul <8 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %52 = fmul <8 x float> %47, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %53 = fadd <8 x float> %22, %51
  %54 = fsub <8 x float> %22, %53
  %55 = fadd <8 x float> %51, %54
  %56 = fadd <8 x float> %25, %55
  %57 = fadd <8 x float> %52, %56
  %58 = fmul <8 x float> %39, %48
  %59 = fmul <8 x float> %50, %58
  %60 = fadd <8 x float> %53, %59
  %61 = fsub <8 x float> %53, %60
  %62 = fadd <8 x float> %59, %61
  %63 = fadd <8 x float> %62, %57
  %64 = fadd <8 x float> %60, %63
  %65 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = bitcast <8 x i32> %66 to <8 x float>
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = fcmp uno <8 x float> %4, zeroinitializer
  %72 = sext <8 x i1> %71 to <8 x i32>
  %73 = bitcast <8 x i32> %72 to <4 x i64>
  %74 = or <4 x i64> %70, %73
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %75) #7
  %77 = fcmp oeq <8 x float> %4, zeroinitializer
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = bitcast <8 x i32> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %79) #7
  ret <8 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_powf8_u10avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #7
  %4 = fcmp oeq <8 x float> %3, %1
  %5 = sext <8 x i1> %4 to <8 x i32>
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = bitcast <8 x float> %1 to <4 x i64>
  %8 = and <4 x i64> %7, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %9 = bitcast <4 x i64> %8 to <8 x float>
  %10 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #7
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = or <4 x i64> %6, %11
  %13 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #7
  %14 = and <8 x i32> %13, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %15 = icmp ne <8 x i32> %14, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <4 x i64>
  %18 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %9, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #7
  %19 = bitcast <8 x float> %18 to <4 x i64>
  %20 = and <4 x i64> %12, %19
  %21 = and <4 x i64> %20, %17
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %26 = fmul <8 x float> %24, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %24, <8 x float> %26, <8 x float> %25) #7
  %28 = fmul <8 x float> %27, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %29 = bitcast <8 x float> %28 to <8 x i32>
  %30 = lshr <8 x i32> %29, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %31 = and <8 x i32> %30, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %32 = add nsw <8 x i32> %31, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %33 = shl nuw nsw <8 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %34 = bitcast <8 x float> %27 to <8 x i32>
  %35 = add <8 x i32> %34, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %36 = sub <8 x i32> %35, %33
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = add nsw <8 x i32> %31, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %39 = bitcast <8 x i32> %32 to <32 x i8>
  %40 = bitcast <8 x i32> %38 to <32 x i8>
  %41 = bitcast <8 x float> %25 to <32 x i8>
  %42 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %39, <32 x i8> %40, <32 x i8> %41) #7
  %43 = fadd <8 x float> %37, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %44 = fadd <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %45
  %47 = fsub <8 x float> %37, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %37, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %50 = fadd <8 x float> %49, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %51
  %53 = fsub <8 x float> %37, %50
  %54 = fadd <8 x float> %53, %52
  %55 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %56 = fmul <8 x float> %43, %55
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %43, <8 x float> %57) #7
  %59 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %55, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %55, <8 x float> %60) #7
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %55, <8 x float> %58) #7
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %62, <8 x float> %63) #7
  %65 = fmul <8 x float> %56, %56
  %66 = fadd <8 x float> %56, %56
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %65
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %56, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %64, <8 x float> %68) #7
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>, <8 x float> %65, <8 x float> <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>) #7
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %65, <8 x float> <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>) #7
  %72 = bitcast <32 x i8> %42 to <8 x i32>
  %73 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %72) #7
  %74 = fmul <8 x float> %73, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %75 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %74
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %73, <8 x float> %75) #7
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %73, <8 x float> %76) #7
  %78 = fmul <8 x float> %56, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %79 = fmul <8 x float> %64, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %80 = fadd <8 x float> %78, %74
  %81 = fsub <8 x float> %74, %80
  %82 = fadd <8 x float> %78, %81
  %83 = fadd <8 x float> %77, %82
  %84 = fadd <8 x float> %79, %83
  %85 = fmul <8 x float> %56, %65
  %86 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %85
  %87 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %56, <8 x float> %86) #7
  %88 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %56, <8 x float> %87) #7
  %89 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %64, <8 x float> %88) #7
  %90 = fmul <8 x float> %71, %65
  %91 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %90
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %71, <8 x float> %91) #7
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %71, <8 x float> %92) #7
  %94 = fadd <8 x float> %90, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %95 = fsub <8 x float> %94, %90
  %96 = fsub <8 x float> %94, %95
  %97 = fsub <8 x float> %90, %96
  %98 = fsub <8 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %95
  %99 = fadd <8 x float> %98, %97
  %100 = fadd <8 x float> %93, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %101 = fadd <8 x float> %99, %100
  %102 = fmul <8 x float> %85, %94
  %103 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %102
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %85, <8 x float> %94, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %94, <8 x float> %104) #7
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %85, <8 x float> %101, <8 x float> %105) #7
  %107 = fadd <8 x float> %80, %102
  %108 = fsub <8 x float> %80, %107
  %109 = fadd <8 x float> %102, %108
  %110 = fadd <8 x float> %84, %109
  %111 = fadd <8 x float> %110, %106
  %112 = fmul <8 x float> %107, %1
  %113 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %112
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> %1, <8 x float> %113) #7
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %1, <8 x float> %114) #7
  %116 = fadd <8 x float> %112, %115
  %117 = fmul <8 x float> %116, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %118 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %117) #7
  %119 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %118) #7
  %120 = fmul <8 x float> %119, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %121 = fadd <8 x float> %112, %120
  %122 = fsub <8 x float> %121, %112
  %123 = fsub <8 x float> %121, %122
  %124 = fsub <8 x float> %112, %123
  %125 = fsub <8 x float> %120, %122
  %126 = fadd <8 x float> %125, %124
  %127 = fadd <8 x float> %115, %126
  %128 = fmul <8 x float> %119, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %129 = fadd <8 x float> %128, %121
  %130 = fsub <8 x float> %129, %121
  %131 = fsub <8 x float> %129, %130
  %132 = fsub <8 x float> %121, %131
  %133 = fsub <8 x float> %128, %130
  %134 = fadd <8 x float> %133, %132
  %135 = fadd <8 x float> %134, %127
  %136 = fadd <8 x float> %129, %135
  %137 = fsub <8 x float> %129, %136
  %138 = fadd <8 x float> %135, %137
  %139 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>, <8 x float> %136, <8 x float> <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>) #7
  %140 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %139, <8 x float> %136, <8 x float> <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>) #7
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %136, <8 x float> <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>) #7
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %141, <8 x float> %136, <8 x float> <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>) #7
  %143 = fmul <8 x float> %136, %136
  %144 = fadd <8 x float> %136, %136
  %145 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %143
  %146 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %136, <8 x float> %136, <8 x float> %145) #7
  %147 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %144, <8 x float> %138, <8 x float> %146) #7
  %148 = fmul <8 x float> %142, %143
  %149 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %148
  %150 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %143, <8 x float> %142, <8 x float> %149) #7
  %151 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %147, <8 x float> %142, <8 x float> %150) #7
  %152 = fadd <8 x float> %136, %148
  %153 = fsub <8 x float> %136, %152
  %154 = fadd <8 x float> %148, %153
  %155 = fadd <8 x float> %138, %154
  %156 = fadd <8 x float> %151, %155
  %157 = fadd <8 x float> %152, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %158 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %157
  %159 = fadd <8 x float> %152, %158
  %160 = fadd <8 x float> %159, %156
  %161 = fadd <8 x float> %157, %160
  %162 = ashr <8 x i32> %118, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %163 = add <8 x i32> %162, %118
  %164 = ashr <8 x i32> %163, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %165 = sub nsw <8 x i32> %164, %162
  %166 = shl nsw <8 x i32> %165, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %167 = shl <8 x i32> %165, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %168 = sub <8 x i32> %118, %167
  %169 = add nsw <8 x i32> %166, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %170 = icmp sgt <8 x i32> %165, <i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8>
  %171 = select <8 x i1> %170, <8 x i32> %169, <8 x i32> zeroinitializer
  %172 = bitcast <8 x i32> %171 to <4 x i64>
  %173 = icmp sgt <8 x i32> %171, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %174 = sext <8 x i1> %173 to <8 x i32>
  %175 = bitcast <8 x i32> %174 to <4 x i64>
  %176 = xor <4 x i64> %175, <i64 -1, i64 -1, i64 -1, i64 -1>
  %177 = and <4 x i64> %176, %172
  %178 = and <4 x i64> %175, <i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735>
  %179 = or <4 x i64> %178, %177
  %180 = bitcast <4 x i64> %179 to <8 x i32>
  %181 = shl <8 x i32> %180, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %182 = bitcast <8 x i32> %181 to <8 x float>
  %183 = fmul <8 x float> %161, %182
  %184 = fmul <8 x float> %183, %182
  %185 = fmul <8 x float> %184, %182
  %186 = fmul <8 x float> %185, %182
  %187 = shl <8 x i32> %168, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %188 = add <8 x i32> %187, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %189 = bitcast <8 x i32> %188 to <8 x float>
  %190 = fmul <8 x float> %186, %189
  %191 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %112, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %192 = bitcast <8 x float> %191 to <4 x i64>
  %193 = bitcast <8 x float> %190 to <4 x i64>
  %194 = xor <4 x i64> %192, <i64 -1, i64 -1, i64 -1, i64 -1>
  %195 = and <4 x i64> %193, %194
  %196 = bitcast <4 x i64> %195 to <8 x float>
  %197 = fcmp uno <8 x float> %196, zeroinitializer
  %198 = sext <8 x i1> %197 to <8 x i32>
  %199 = bitcast <8 x i32> %198 to <8 x float>
  %200 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %196, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %199) #7
  %201 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 30) #7
  %202 = bitcast <4 x i64> %21 to <8 x float>
  %203 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %202) #7
  %204 = bitcast <4 x i64> %12 to <8 x float>
  %205 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %203, <8 x float> %204) #7
  %206 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %205, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %201) #7
  %207 = fmul <8 x float> %200, %206
  %208 = fadd <8 x float> %24, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %209 = bitcast <8 x float> %208 to <4 x i64>
  %210 = and <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %211 = xor <4 x i64> %210, %209
  %212 = bitcast <4 x i64> %211 to <8 x float>
  %213 = fcmp oeq <8 x float> %9, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %214 = sext <8 x i1> %213 to <8 x i32>
  %215 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %212, <8 x float> zeroinitializer, i8 17) #7
  %216 = bitcast <8 x float> %215 to <4 x i64>
  %217 = fcmp oeq <8 x float> %212, zeroinitializer
  %218 = sext <8 x i1> %217 to <8 x i32>
  %219 = bitcast <8 x i32> %218 to <8 x float>
  %220 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %219) #7
  %221 = bitcast <8 x float> %220 to <4 x i64>
  %222 = xor <4 x i64> %216, <i64 -1, i64 -1, i64 -1, i64 -1>
  %223 = and <4 x i64> %221, %222
  %224 = bitcast <4 x i64> %223 to <8 x float>
  %225 = bitcast <8 x i32> %214 to <8 x float>
  %226 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %207, <8 x float> %224, <8 x float> %225) #7
  %227 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %228 = fcmp oeq <8 x float> %0, zeroinitializer
  %229 = sext <8 x i1> %228 to <8 x i32>
  %230 = or <8 x i1> %227, %228
  %231 = sext <8 x i1> %230 to <8 x i32>
  %232 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %233 = or <4 x i64> %232, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %234 = bitcast <4 x i64> %233 to <8 x float>
  %235 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %234, <8 x float> %202) #7
  %236 = xor <4 x i64> %7, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %237 = bitcast <4 x i64> %236 to <8 x float>
  %238 = bitcast <8 x i32> %229 to <8 x float>
  %239 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %237, <8 x float> %238) #7
  %240 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %239, <8 x float> zeroinitializer, i8 17) #7
  %241 = bitcast <8 x float> %240 to <4 x i64>
  %242 = and <4 x i64> %241, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %243 = xor <4 x i64> %242, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %244 = bitcast <4 x i64> %243 to <8 x float>
  %245 = fmul <8 x float> %235, %244
  %246 = bitcast <8 x i32> %231 to <8 x float>
  %247 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %226, <8 x float> %245, <8 x float> %246) #7
  %248 = fcmp uno <8 x float> %1, %0
  %249 = sext <8 x i1> %248 to <8 x i32>
  %250 = bitcast <8 x i32> %249 to <4 x i64>
  %251 = bitcast <8 x float> %247 to <4 x i64>
  %252 = or <4 x i64> %251, %250
  %253 = bitcast <4 x i64> %252 to <8 x float>
  %254 = fcmp oeq <8 x float> %1, zeroinitializer
  %255 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %256 = or <8 x i1> %254, %255
  %257 = sext <8 x i1> %256 to <8 x i32>
  %258 = bitcast <8 x i32> %257 to <8 x float>
  %259 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %253, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %258) #7
  ret <8 x float> %259
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fastpowf8_u3500avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %7 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %7, <8 x float> %6) #7
  %9 = fmul <8 x float> %8, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %10 = bitcast <8 x float> %9 to <8 x i32>
  %11 = lshr <8 x i32> %10, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %12 = and <8 x i32> %11, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = add nsw <8 x i32> %12, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %14 = shl nuw nsw <8 x i32> %12, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = bitcast <8 x float> %8 to <8 x i32>
  %16 = add <8 x i32> %15, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %17 = sub <8 x i32> %16, %14
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = add nsw <8 x i32> %12, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %20 = bitcast <8 x i32> %13 to <32 x i8>
  %21 = bitcast <8 x i32> %19 to <32 x i8>
  %22 = bitcast <8 x float> %6 to <32 x i8>
  %23 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %20, <32 x i8> %21, <32 x i8> %22) #7
  %24 = fadd <8 x float> %18, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %25 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = fdiv <8 x float> %24, %25
  %27 = fmul <8 x float> %26, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %27, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %27, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %27, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %27, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #7
  %32 = bitcast <32 x i8> %23 to <8 x i32>
  %33 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %32) #7
  %34 = fmul <8 x float> %33, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %31, <8 x float> %34) #7
  %36 = fmul <8 x float> %35, %1
  %37 = fmul <8 x float> %36, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %38 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %36) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %41, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %41, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %41, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %41, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %41, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %47 = fmul <8 x float> %41, %41
  %48 = fadd <8 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %46, <8 x float> %48) #7
  %50 = ashr <8 x i32> %38, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %51 = shl <8 x i32> %50, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %52 = add <8 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <8 x i32> %52 to <8 x float>
  %54 = fmul <8 x float> %49, %53
  %55 = sub <8 x i32> %38, %50
  %56 = shl <8 x i32> %55, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %57 = add <8 x i32> %56, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %58 = bitcast <8 x i32> %57 to <8 x float>
  %59 = fmul <8 x float> %54, %58
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %36, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %61 = bitcast <8 x float> %60 to <4 x i64>
  %62 = bitcast <8 x float> %59 to <4 x i64>
  %63 = xor <4 x i64> %61, <i64 -1, i64 -1, i64 -1, i64 -1>
  %64 = and <4 x i64> %62, %63
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #7
  %67 = fcmp oeq <8 x float> %66, %1
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = bitcast <8 x float> %1 to <4 x i64>
  %71 = and <4 x i64> %70, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %72, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #7
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = or <4 x i64> %69, %74
  %76 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #7
  %77 = and <8 x i32> %76, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %78 = icmp ne <8 x i32> %77, zeroinitializer
  %79 = sext <8 x i1> %78 to <8 x i32>
  %80 = bitcast <8 x i32> %79 to <4 x i64>
  %81 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %72, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #7
  %82 = bitcast <8 x float> %81 to <4 x i64>
  %83 = bitcast <8 x float> %0 to <8 x i32>
  %84 = ashr <8 x i32> %83, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %85 = bitcast <8 x i32> %84 to <4 x i64>
  %86 = and <4 x i64> %75, %85
  %87 = and <4 x i64> %86, %82
  %88 = and <4 x i64> %87, %80
  %89 = xor <4 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = bitcast <4 x i64> %88 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %90, <8 x float> %91) #7
  %93 = fcmp oeq <8 x float> %0, zeroinitializer
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = bitcast <8 x i32> %94 to <8 x float>
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %92, <8 x float> zeroinitializer, <8 x float> %95) #7
  %97 = fcmp oeq <8 x float> %1, zeroinitializer
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = bitcast <8 x i32> %98 to <8 x float>
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %99) #7
  ret <8 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = fsub <8 x float> %92, %94
  %101 = fsub <8 x float> %92, %100
  %102 = fsub <8 x float> %101, %94
  %103 = fadd <8 x float> %102, %93
  %104 = fsub <8 x float> %103, %99
  %105 = fadd <8 x float> %100, %104
  %106 = fmul <8 x float> %105, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = fcmp uno <8 x float> %106, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %108
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %113) #7
  %115 = bitcast <8 x float> %114 to <4 x i64>
  %116 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %117 = xor <4 x i64> %116, %115
  %118 = fcmp uno <8 x float> %0, zeroinitializer
  %119 = sext <8 x i1> %118 to <8 x i32>
  %120 = bitcast <8 x i32> %119 to <4 x i64>
  %121 = or <4 x i64> %117, %120
  %122 = bitcast <4 x i64> %121 to <8 x float>
  ret <8 x float> %122
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = fadd <8 x float> %94, %92
  %101 = fsub <8 x float> %92, %100
  %102 = fadd <8 x float> %94, %101
  %103 = fadd <8 x float> %102, %93
  %104 = fadd <8 x float> %99, %103
  %105 = fadd <8 x float> %100, %104
  %106 = fmul <8 x float> %105, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = fcmp uno <8 x float> %106, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %108
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %113) #7
  %115 = fcmp uno <8 x float> %0, zeroinitializer
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = bitcast <8 x float> %114 to <4 x i64>
  %119 = or <4 x i64> %118, %117
  %120 = bitcast <4 x i64> %119 to <8 x float>
  ret <8 x float> %120
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = bitcast <8 x float> %94 to <4 x i64>
  %101 = xor <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %99 to <4 x i64>
  %103 = xor <4 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <4 x i64> %101 to <8 x float>
  %105 = bitcast <4 x i64> %103 to <8 x float>
  %106 = fadd <8 x float> %92, %104
  %107 = fsub <8 x float> %92, %106
  %108 = fadd <8 x float> %107, %104
  %109 = fadd <8 x float> %108, %93
  %110 = fadd <8 x float> %109, %105
  %111 = fadd <8 x float> %94, %92
  %112 = fsub <8 x float> %92, %111
  %113 = fadd <8 x float> %94, %112
  %114 = fadd <8 x float> %113, %93
  %115 = fadd <8 x float> %99, %114
  %116 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %111
  %117 = fmul <8 x float> %116, %106
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %117
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %106, <8 x float> %118) #7
  %120 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %111
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %120, <8 x float> %116, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %122 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %115
  %123 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %122, <8 x float> %116, <8 x float> %121) #7
  %124 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %116, <8 x float> %119) #7
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %123, <8 x float> %124) #7
  %126 = fadd <8 x float> %125, %117
  %127 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #7
  %128 = bitcast <8 x float> %127 to <4 x i64>
  %129 = fcmp uno <8 x float> %126, zeroinitializer
  %130 = sext <8 x i1> %129 to <8 x i32>
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = or <4 x i64> %131, %128
  %133 = bitcast <4 x i64> %132 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %133) #7
  %135 = bitcast <8 x float> %134 to <4 x i64>
  %136 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %137 = xor <4 x i64> %136, %135
  %138 = fcmp uno <8 x float> %0, zeroinitializer
  %139 = sext <8 x i1> %138 to <8 x i32>
  %140 = bitcast <8 x i32> %139 to <4 x i64>
  %141 = or <4 x i64> %137, %140
  %142 = bitcast <4 x i64> %141 to <8 x float>
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinhf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #7
  %10 = fmul <8 x float> %9, %9
  %11 = fmul <8 x float> %10, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %13, <8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %12, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %16, <8 x float> %9) #7
  %18 = icmp eq <8 x i32> %6, zeroinitializer
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = fadd <8 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <8 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %22 = shl <8 x i32> %21, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %23 = add <8 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <8 x i32> %23 to <8 x float>
  %25 = fmul <8 x float> %20, %24
  %26 = sub <8 x i32> %6, %21
  %27 = shl <8 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <8 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <8 x i32> %28 to <8 x float>
  %30 = fmul <8 x float> %25, %29
  %31 = fadd <8 x float> %30, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %32 = bitcast <8 x i32> %19 to <8 x float>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %17, <8 x float> %32) #7
  %34 = fadd <8 x float> %33, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %35 = fadd <8 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fdiv <8 x float> %34, %35
  %37 = fmul <8 x float> %33, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %38 = fmul <8 x float> %37, %36
  %39 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #7
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = fcmp uno <8 x float> %38, zeroinitializer
  %42 = sext <8 x i1> %41 to <8 x i32>
  %43 = bitcast <8 x i32> %42 to <4 x i64>
  %44 = or <4 x i64> %43, %40
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %45) #7
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = xor <4 x i64> %48, %47
  %50 = fcmp uno <8 x float> %0, zeroinitializer
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <4 x i64>
  %53 = or <4 x i64> %49, %52
  %54 = bitcast <4 x i64> %53 to <8 x float>
  ret <8 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_coshf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %9, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %15 = fmul <8 x float> %9, %9
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %14, <8 x float> %9) #7
  %17 = fadd <8 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = ashr <8 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %19 = shl <8 x i32> %18, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %20 = add <8 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = fmul <8 x float> %17, %21
  %23 = sub <8 x i32> %6, %18
  %24 = shl <8 x i32> %23, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %25 = add <8 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <8 x i32> %25 to <8 x float>
  %27 = fmul <8 x float> %22, %26
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = bitcast <8 x float> %27 to <4 x i64>
  %31 = xor <4 x i64> %29, <i64 -1, i64 -1, i64 -1, i64 -1>
  %32 = and <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #7
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %34) #7
  %36 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %35
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %35, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #7
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = fcmp uno <8 x float> %37, zeroinitializer
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = or <4 x i64> %42, %39
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %37, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %44) #7
  %46 = fcmp uno <8 x float> %0, zeroinitializer
  %47 = sext <8 x i1> %46 to <8 x i32>
  %48 = bitcast <8 x i32> %47 to <4 x i64>
  %49 = bitcast <8 x float> %45 to <4 x i64>
  %50 = or <4 x i64> %49, %48
  %51 = bitcast <4 x i64> %50 to <8 x float>
  ret <8 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_tanhf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %9) #7
  %11 = fmul <8 x float> %10, %10
  %12 = fmul <8 x float> %11, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %14, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %17, <8 x float> %10) #7
  %19 = icmp eq <8 x i32> %7, zeroinitializer
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = sub <8 x i32> %7, %22
  %28 = shl <8 x i32> %27, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %29 = add <8 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = bitcast <8 x i32> %20 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> %18, <8 x float> %33) #7
  %35 = fadd <8 x float> %34, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %36 = fdiv <8 x float> %34, %35
  %37 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #7
  %38 = bitcast <8 x float> %37 to <4 x i64>
  %39 = fcmp uno <8 x float> %36, zeroinitializer
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = or <4 x i64> %41, %38
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %43) #7
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = xor <4 x i64> %46, %45
  %48 = fcmp uno <8 x float> %0, zeroinitializer
  %49 = sext <8 x i1> %48 to <8 x i32>
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = or <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  ret <8 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_asinhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #7
  %6 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %7 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %0
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %9 = fmul <8 x float> %6, %8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %9, <8 x float> %5) #7
  %12 = fmul <8 x float> %10, %10
  %13 = fadd <8 x float> %10, %10
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %11, <8 x float> %15) #7
  %17 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = fsub <8 x float> %17, %12
  %19 = fsub <8 x float> %17, %18
  %20 = fsub <8 x float> %12, %19
  %21 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %18
  %22 = fadd <8 x float> %21, %20
  %23 = fadd <8 x float> %16, %22
  %24 = fadd <8 x float> %17, %23
  %25 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %24) #7
  %26 = fmul <8 x float> %25, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %25, <8 x float> %27) #7
  %29 = fadd <8 x float> %17, %26
  %30 = fsub <8 x float> %29, %17
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %17, %31
  %33 = fsub <8 x float> %26, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, %23
  %36 = fadd <8 x float> %35, %34
  %37 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %40 = fmul <8 x float> %37, %39
  %41 = fmul <8 x float> %37, %29
  %42 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %41
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %37, <8 x float> %42) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %37, <8 x float> %43) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %40, <8 x float> %44) #7
  %46 = fmul <8 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = fmul <8 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fmul <8 x float> %46, %4
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %48
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %4, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %48, <8 x float> %5) #7
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %47, <8 x float> %51, <8 x float> %5) #7
  %54 = fadd <8 x float> %52, %0
  %55 = fsub <8 x float> %54, %52
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %52, %56
  %58 = fsub <8 x float> %0, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = fadd <8 x float> %54, %60
  %62 = fsub <8 x float> %54, %61
  %63 = fadd <8 x float> %60, %62
  %64 = fmul <8 x float> %61, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %65 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %64, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %66 = fmul <8 x float> %64, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> %66, <8 x float> %65) #7
  %68 = bitcast <8 x float> %67 to <8 x i32>
  %69 = lshr <8 x i32> %68, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %70 = bitcast <8 x float> %65 to <32 x i8>
  %71 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %70) #7
  %72 = and <8 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = bitcast <32 x i8> %71 to <8 x i32>
  %74 = sub <8 x i32> %72, %73
  %75 = shl <8 x i32> %74, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %76 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %75
  %77 = bitcast <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %61, %77
  %79 = fmul <8 x float> %63, %77
  %80 = fadd <8 x float> %78, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %81 = fsub <8 x float> %80, %78
  %82 = fsub <8 x float> %80, %81
  %83 = fsub <8 x float> %78, %82
  %84 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %81
  %85 = fadd <8 x float> %84, %83
  %86 = fadd <8 x float> %79, %85
  %87 = fadd <8 x float> %78, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = fsub <8 x float> %87, %78
  %89 = fsub <8 x float> %87, %88
  %90 = fsub <8 x float> %78, %89
  %91 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %88
  %92 = fadd <8 x float> %91, %90
  %93 = fadd <8 x float> %79, %92
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %87
  %95 = fmul <8 x float> %80, %94
  %96 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %95
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %94, <8 x float> %80, <8 x float> %96) #7
  %98 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %87
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %100, <8 x float> %94, <8 x float> %99) #7
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %86, <8 x float> %94, <8 x float> %97) #7
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %101, <8 x float> %102) #7
  %104 = fmul <8 x float> %95, %95
  %105 = fadd <8 x float> %95, %95
  %106 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %95, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %103, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %104, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> %104, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %104, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %112 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %74) #7
  %113 = fmul <8 x float> %112, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %114 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %112, <8 x float> %114) #7
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %112, <8 x float> %115) #7
  %117 = fmul <8 x float> %95, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %118 = fmul <8 x float> %103, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %119 = fadd <8 x float> %117, %113
  %120 = fsub <8 x float> %113, %119
  %121 = fadd <8 x float> %117, %120
  %122 = fadd <8 x float> %116, %121
  %123 = fadd <8 x float> %118, %122
  %124 = fmul <8 x float> %95, %104
  %125 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %124
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %95, <8 x float> %125) #7
  %127 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %95, <8 x float> %126) #7
  %128 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %103, <8 x float> %127) #7
  %129 = fmul <8 x float> %111, %124
  %130 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %129
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %124, <8 x float> %111, <8 x float> %130) #7
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %111, <8 x float> %131) #7
  %133 = fadd <8 x float> %119, %129
  %134 = fsub <8 x float> %119, %133
  %135 = fadd <8 x float> %129, %134
  %136 = fadd <8 x float> %135, %123
  %137 = fadd <8 x float> %136, %132
  %138 = fadd <8 x float> %133, %137
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = fcmp uno <8 x float> %138, zeroinitializer
  %142 = sext <8 x i1> %141 to <8 x i32>
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = or <4 x i64> %143, %140
  %145 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %146 = or <4 x i64> %145, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %147 = bitcast <4 x i64> %146 to <8 x float>
  %148 = bitcast <4 x i64> %144 to <8 x float>
  %149 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %138, <8 x float> %147, <8 x float> %148) #7
  %150 = fcmp uno <8 x float> %0, zeroinitializer
  %151 = sext <8 x i1> %150 to <8 x i32>
  %152 = bitcast <8 x i32> %151 to <4 x i64>
  %153 = bitcast <8 x float> %149 to <4 x i64>
  %154 = or <4 x i64> %153, %152
  %155 = bitcast <4 x i64> %154 to <8 x float>
  %156 = bitcast <8 x float> %0 to <8 x i32>
  %157 = icmp eq <8 x i32> %156, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %158 = sext <8 x i1> %157 to <8 x i32>
  %159 = bitcast <8 x i32> %158 to <8 x float>
  %160 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %155, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %159) #7
  ret <8 x float> %160
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_acoshf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <8 x float> %2, %0
  %4 = fsub <8 x float> %2, %3
  %5 = fsub <8 x float> %0, %4
  %6 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <8 x float> %6, %5
  %8 = fadd <8 x float> %2, %7
  %9 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %8) #7
  %10 = fmul <8 x float> %9, %9
  %11 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %9, <8 x float> %11) #7
  %13 = fadd <8 x float> %2, %10
  %14 = fsub <8 x float> %13, %2
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %2, %15
  %17 = fsub <8 x float> %10, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %7, %12
  %20 = fadd <8 x float> %19, %18
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %9
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %13
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %21, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %24, <8 x float> %28) #7
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fadd <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = fsub <8 x float> %32, %0
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %0, %34
  %36 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %32, %37
  %39 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %38) #7
  %40 = fmul <8 x float> %39, %39
  %41 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %40
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %39, <8 x float> %41) #7
  %43 = fadd <8 x float> %32, %40
  %44 = fsub <8 x float> %43, %32
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> %32, %45
  %47 = fsub <8 x float> %40, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %37, %42
  %50 = fadd <8 x float> %49, %48
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %52 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %51, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %54 = fmul <8 x float> %51, %53
  %55 = fmul <8 x float> %51, %43
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %51, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %51, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %54, <8 x float> %58) #7
  %60 = fmul <8 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %59, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %62 = fmul <8 x float> %30, %60
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %60, <8 x float> %63) #7
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %60, <8 x float> %64) #7
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %61, <8 x float> %65) #7
  %67 = fadd <8 x float> %62, %0
  %68 = fsub <8 x float> %67, %62
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %62, %69
  %71 = fsub <8 x float> %0, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %72
  %74 = fmul <8 x float> %67, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %75 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %74, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %76 = fmul <8 x float> %74, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> %76, <8 x float> %75) #7
  %78 = bitcast <8 x float> %77 to <8 x i32>
  %79 = lshr <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = bitcast <8 x float> %75 to <32 x i8>
  %81 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %80) #7
  %82 = and <8 x i32> %79, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = bitcast <32 x i8> %81 to <8 x i32>
  %84 = sub <8 x i32> %82, %83
  %85 = shl <8 x i32> %84, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %86 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %85
  %87 = bitcast <8 x i32> %86 to <8 x float>
  %88 = fmul <8 x float> %67, %87
  %89 = fmul <8 x float> %73, %87
  %90 = fadd <8 x float> %88, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %91 = fsub <8 x float> %90, %88
  %92 = fsub <8 x float> %90, %91
  %93 = fsub <8 x float> %88, %92
  %94 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %91
  %95 = fadd <8 x float> %94, %93
  %96 = fadd <8 x float> %89, %95
  %97 = fadd <8 x float> %88, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %98 = fsub <8 x float> %97, %88
  %99 = fsub <8 x float> %97, %98
  %100 = fsub <8 x float> %88, %99
  %101 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %98
  %102 = fadd <8 x float> %101, %100
  %103 = fadd <8 x float> %89, %102
  %104 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %97
  %105 = fmul <8 x float> %90, %104
  %106 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %105
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %90, <8 x float> %106) #7
  %108 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %97
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %104, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %110 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %103
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %104, <8 x float> %109) #7
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %104, <8 x float> %107) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %111, <8 x float> %112) #7
  %114 = fmul <8 x float> %105, %105
  %115 = fadd <8 x float> %105, %105
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %105, <8 x float> %116) #7
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %113, <8 x float> %117) #7
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %114, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %120 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %119, <8 x float> %114, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %120, <8 x float> %114, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %122 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %84) #7
  %123 = fmul <8 x float> %122, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %124 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %123
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %122, <8 x float> %124) #7
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %122, <8 x float> %125) #7
  %127 = fmul <8 x float> %105, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %128 = fmul <8 x float> %113, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %129 = fadd <8 x float> %127, %123
  %130 = fsub <8 x float> %123, %129
  %131 = fadd <8 x float> %127, %130
  %132 = fadd <8 x float> %126, %131
  %133 = fadd <8 x float> %128, %132
  %134 = fmul <8 x float> %105, %114
  %135 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %134
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %105, <8 x float> %135) #7
  %137 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %105, <8 x float> %136) #7
  %138 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %113, <8 x float> %137) #7
  %139 = fmul <8 x float> %121, %134
  %140 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %139
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %134, <8 x float> %121, <8 x float> %140) #7
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %121, <8 x float> %141) #7
  %143 = fadd <8 x float> %129, %139
  %144 = fsub <8 x float> %129, %143
  %145 = fadd <8 x float> %139, %144
  %146 = fadd <8 x float> %145, %133
  %147 = fadd <8 x float> %146, %142
  %148 = fadd <8 x float> %143, %147
  %149 = bitcast <8 x float> %0 to <4 x i64>
  %150 = and <4 x i64> %149, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %151 = bitcast <4 x i64> %150 to <8 x float>
  %152 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %151, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #7
  %153 = bitcast <8 x float> %152 to <4 x i64>
  %154 = fcmp uno <8 x float> %148, zeroinitializer
  %155 = sext <8 x i1> %154 to <8 x i32>
  %156 = bitcast <8 x i32> %155 to <4 x i64>
  %157 = or <4 x i64> %156, %153
  %158 = bitcast <4 x i64> %157 to <8 x float>
  %159 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %148, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %158) #7
  %160 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %161 = sext <8 x i1> %160 to <8 x i32>
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <8 x float> %159 to <4 x i64>
  %164 = xor <4 x i64> %162, <i64 -1, i64 -1, i64 -1, i64 -1>
  %165 = and <4 x i64> %163, %164
  %166 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #7
  %167 = bitcast <8 x float> %166 to <4 x i64>
  %168 = fcmp uno <8 x float> %0, zeroinitializer
  %169 = sext <8 x i1> %168 to <8 x i32>
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = or <4 x i64> %167, %170
  %172 = or <4 x i64> %171, %165
  %173 = bitcast <4 x i64> %172 to <8 x float>
  ret <8 x float> %173
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_atanhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <8 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <8 x float> %5, %6
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <8 x float> %4, %6
  %10 = fadd <8 x float> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = fmul <8 x float> %5, %19
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %5, <8 x float> %21) #7
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %18
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %19, <8 x float> %24) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %19, <8 x float> %22) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %26, <8 x float> %27) #7
  %29 = fmul <8 x float> %20, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %29, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %31 = fmul <8 x float> %29, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %31, <8 x float> %30) #7
  %33 = bitcast <8 x float> %32 to <8 x i32>
  %34 = lshr <8 x i32> %33, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %35 = bitcast <8 x float> %30 to <32 x i8>
  %36 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %35) #7
  %37 = and <8 x i32> %34, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = bitcast <32 x i8> %36 to <8 x i32>
  %39 = sub <8 x i32> %37, %38
  %40 = shl <8 x i32> %39, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %41 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %40
  %42 = bitcast <8 x i32> %41 to <8 x float>
  %43 = fmul <8 x float> %20, %42
  %44 = fmul <8 x float> %28, %42
  %45 = fadd <8 x float> %43, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %46 = fsub <8 x float> %45, %43
  %47 = fsub <8 x float> %45, %46
  %48 = fsub <8 x float> %43, %47
  %49 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %46
  %50 = fadd <8 x float> %49, %48
  %51 = fadd <8 x float> %44, %50
  %52 = fadd <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %53 = fsub <8 x float> %52, %43
  %54 = fsub <8 x float> %52, %53
  %55 = fsub <8 x float> %43, %54
  %56 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %53
  %57 = fadd <8 x float> %56, %55
  %58 = fadd <8 x float> %44, %57
  %59 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %52
  %60 = fmul <8 x float> %45, %59
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %45, <8 x float> %61) #7
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %59, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %58
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %59, <8 x float> %64) #7
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %59, <8 x float> %62) #7
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %66, <8 x float> %67) #7
  %69 = fmul <8 x float> %60, %60
  %70 = fadd <8 x float> %60, %60
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %60, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %68, <8 x float> %72) #7
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %69, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %69, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %69, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %77 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %39) #7
  %78 = fmul <8 x float> %77, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %79 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %78
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %77, <8 x float> %79) #7
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %77, <8 x float> %80) #7
  %82 = fmul <8 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %83 = fmul <8 x float> %68, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fadd <8 x float> %82, %78
  %85 = fsub <8 x float> %78, %84
  %86 = fadd <8 x float> %82, %85
  %87 = fadd <8 x float> %81, %86
  %88 = fadd <8 x float> %83, %87
  %89 = fmul <8 x float> %60, %69
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %60, <8 x float> %90) #7
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %60, <8 x float> %91) #7
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %68, <8 x float> %92) #7
  %94 = fmul <8 x float> %76, %89
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %94
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %76, <8 x float> %95) #7
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %93, <8 x float> %76, <8 x float> %96) #7
  %98 = fadd <8 x float> %84, %94
  %99 = fsub <8 x float> %84, %98
  %100 = fadd <8 x float> %94, %99
  %101 = fadd <8 x float> %100, %88
  %102 = fadd <8 x float> %101, %97
  %103 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #7
  %104 = bitcast <8 x float> %103 to <4 x i64>
  %105 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = sext <8 x i1> %105 to <8 x i32>
  %107 = fadd <8 x float> %98, %102
  %108 = fmul <8 x float> %107, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %109 = bitcast <8 x i32> %106 to <8 x float>
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %109) #7
  %111 = bitcast <8 x float> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %104
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %115 = fcmp uno <8 x float> %113, zeroinitializer
  %116 = or <8 x i1> %115, %114
  %117 = sext <8 x i1> %116 to <8 x i32>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = or <4 x i64> %112, %118
  %120 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <4 x i64> %119, %120
  %122 = fcmp uno <8 x float> %0, zeroinitializer
  %123 = sext <8 x i1> %122 to <8 x i32>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = or <4 x i64> %121, %124
  %126 = bitcast <4 x i64> %125 to <8 x float>
  ret <8 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = fsub <8 x float> %0, %2
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %4, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %5, <8 x float> %4, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %4, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %4, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %11 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = shl <8 x i32> %11, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %13 = add <8 x i32> %12, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = fmul <8 x float> %10, %14
  %16 = sub <8 x i32> %3, %11
  %17 = shl <8 x i32> %16, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %18 = add <8 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = bitcast <8 x i32> %18 to <8 x float>
  %20 = fmul <8 x float> %15, %19
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = bitcast <8 x float> %22 to <4 x i64>
  %26 = xor <4 x i64> %24, <i64 -1, i64 -1, i64 -1, i64 -1>
  %27 = and <4 x i64> %26, %25
  %28 = bitcast <4 x i64> %27 to <8 x float>
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp2f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = fsub <8 x float> %0, %2
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %4, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %5, <8 x float> %4, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %4, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %4, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %11 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = shl <8 x i32> %11, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %13 = add <8 x i32> %12, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = fmul <8 x float> %10, %14
  %16 = sub <8 x i32> %3, %11
  %17 = shl <8 x i32> %16, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %18 = add <8 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = bitcast <8 x i32> %18 to <8 x float>
  %20 = fmul <8 x float> %15, %19
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = bitcast <8 x float> %22 to <4 x i64>
  %26 = xor <4 x i64> %24, <i64 -1, i64 -1, i64 -1, i64 -1>
  %27 = and <4 x i64> %26, %25
  %28 = bitcast <4 x i64> %27 to <8 x float>
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>, <8 x float> %6, <8 x float> <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>) #7
  %12 = fmul <8 x float> %6, %11
  %13 = fadd <8 x float> %12, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %14 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %13
  %15 = fadd <8 x float> %12, %14
  %16 = fadd <8 x float> %15, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %17 = fmul <8 x float> %6, %13
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %6, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %6, <8 x float> %19) #7
  %21 = fadd <8 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = fadd <8 x float> %17, %22
  %24 = fadd <8 x float> %20, %23
  %25 = fadd <8 x float> %21, %24
  %26 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %27 = shl <8 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <8 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <8 x i32> %28 to <8 x float>
  %30 = fmul <8 x float> %25, %29
  %31 = sub <8 x i32> %4, %26
  %32 = shl <8 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = add <8 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <8 x i32> %33 to <8 x float>
  %35 = fmul <8 x float> %30, %34
  %36 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #7
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = bitcast <8 x float> %37 to <4 x i64>
  %41 = xor <4 x i64> %39, <i64 -1, i64 -1, i64 -1, i64 -1>
  %42 = and <4 x i64> %41, %40
  %43 = bitcast <4 x i64> %42 to <8 x float>
  ret <8 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_exp10f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>, <8 x float> %6, <8 x float> <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %13 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %14 = shl <8 x i32> %13, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = add <8 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = bitcast <8 x i32> %15 to <8 x float>
  %17 = fmul <8 x float> %12, %16
  %18 = sub <8 x i32> %4, %13
  %19 = shl <8 x i32> %18, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %20 = add <8 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = fmul <8 x float> %17, %21
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #7
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = bitcast <8 x float> %24 to <4 x i64>
  %28 = xor <4 x i64> %26, <i64 -1, i64 -1, i64 -1, i64 -1>
  %29 = and <4 x i64> %28, %27
  %30 = bitcast <4 x i64> %29 to <8 x float>
  ret <8 x float> %30
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_expm1f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, zeroinitializer
  %3 = fmul <8 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %4) #7
  %6 = fmul <8 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <8 x float> %6, %0
  %8 = fsub <8 x float> %7, %0
  %9 = fsub <8 x float> %7, %8
  %10 = fsub <8 x float> %0, %9
  %11 = fsub <8 x float> %6, %8
  %12 = fadd <8 x float> %11, %10
  %13 = fadd <8 x float> %12, zeroinitializer
  %14 = fmul <8 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <8 x float> %14, %7
  %16 = fsub <8 x float> %15, %7
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %7, %17
  %19 = fsub <8 x float> %14, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %20, %13
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %15, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %15, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %15, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %25 = fmul <8 x float> %15, %24
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %24, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %24, <8 x float> %27) #7
  %29 = fadd <8 x float> %25, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %30 = fsub <8 x float> %29, %25
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %25, %31
  %33 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, %34
  %36 = fmul <8 x float> %15, %29
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %29, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %29, <8 x float> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %35, <8 x float> %39) #7
  %41 = fadd <8 x float> %36, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %42 = fsub <8 x float> %41, %36
  %43 = fsub <8 x float> %41, %42
  %44 = fsub <8 x float> %36, %43
  %45 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %42
  %46 = fadd <8 x float> %45, %44
  %47 = fadd <8 x float> %40, %46
  %48 = fmul <8 x float> %15, %15
  %49 = fadd <8 x float> %15, %15
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %48
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %15, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %21, <8 x float> %51) #7
  %53 = fmul <8 x float> %48, %41
  %54 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %41, <8 x float> %54) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %41, <8 x float> %55) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %47, <8 x float> %56) #7
  %58 = fadd <8 x float> %15, %53
  %59 = fsub <8 x float> %58, %15
  %60 = fsub <8 x float> %58, %59
  %61 = fsub <8 x float> %15, %60
  %62 = fsub <8 x float> %53, %59
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %21, %57
  %65 = fadd <8 x float> %63, %64
  %66 = fadd <8 x float> %58, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %67 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %66
  %68 = fadd <8 x float> %58, %67
  %69 = fadd <8 x float> %68, %65
  %70 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = shl <8 x i32> %70, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %72 = add <8 x i32> %71, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %73 = bitcast <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %66, %73
  %75 = sub <8 x i32> %4, %70
  %76 = shl <8 x i32> %75, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %77 = add <8 x i32> %76, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = fmul <8 x float> %74, %78
  %80 = fmul <8 x float> %69, %73
  %81 = fmul <8 x float> %80, %78
  %82 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = bitcast <8 x float> %79 to <4 x i64>
  %85 = xor <4 x i64> %83, <i64 -1, i64 -1, i64 -1, i64 -1>
  %86 = and <4 x i64> %85, %84
  %87 = bitcast <8 x float> %81 to <4 x i64>
  %88 = and <4 x i64> %87, %85
  %89 = bitcast <4 x i64> %86 to <8 x float>
  %90 = bitcast <4 x i64> %88 to <8 x float>
  %91 = fadd <8 x float> %89, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = fsub <8 x float> %91, %89
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %89, %93
  %95 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %96, %90
  %98 = fadd <8 x float> %91, %97
  %99 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i8 30) #7
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %98, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %99) #7
  %101 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i8 17) #7
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %101) #7
  %103 = bitcast <8 x float> %0 to <8 x i32>
  %104 = icmp eq <8 x i32> %103, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %105 = sext <8 x i1> %104 to <8 x i32>
  %106 = bitcast <8 x i32> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %106) #7
  ret <8 x float> %107
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log10f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> %20, %21
  %23 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %22
  %24 = fsub <8 x float> %14, %21
  %25 = fadd <8 x float> %24, %23
  %26 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %26
  %33 = fmul <8 x float> %20, %32
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %33
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %20, <8 x float> %34) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %32, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %32, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %32, <8 x float> %35) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %39, <8 x float> %40) #7
  %42 = fmul <8 x float> %33, %33
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>, <8 x float> %42, <8 x float> <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>) #7
  %45 = bitcast <32 x i8> %19 to <8 x i32>
  %46 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %45) #7
  %47 = fmul <8 x float> %46, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %48 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>, <8 x float> %46, <8 x float> %48) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>, <8 x float> %46, <8 x float> %49) #7
  %51 = fmul <8 x float> %33, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %52 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %52) #7
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>, <8 x float> %54) #7
  %56 = fadd <8 x float> %47, %51
  %57 = fsub <8 x float> %47, %56
  %58 = fadd <8 x float> %51, %57
  %59 = fadd <8 x float> %50, %58
  %60 = fadd <8 x float> %55, %59
  %61 = fmul <8 x float> %33, %42
  %62 = fmul <8 x float> %44, %61
  %63 = fadd <8 x float> %56, %62
  %64 = fsub <8 x float> %56, %63
  %65 = fadd <8 x float> %62, %64
  %66 = fadd <8 x float> %65, %60
  %67 = fadd <8 x float> %63, %66
  %68 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %69 = sext <8 x i1> %68 to <8 x i32>
  %70 = bitcast <8 x i32> %69 to <8 x float>
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %70) #7
  %72 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = fcmp uno <8 x float> %4, zeroinitializer
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = or <4 x i64> %73, %76
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %71, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %78) #7
  %80 = fcmp oeq <8 x float> %4, zeroinitializer
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %79, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %82) #7
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> %20, %21
  %23 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %22
  %24 = fsub <8 x float> %14, %21
  %25 = fadd <8 x float> %24, %23
  %26 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %26
  %33 = fmul <8 x float> %20, %32
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %33
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %20, <8 x float> %34) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %32, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %32, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %32, <8 x float> %35) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %39, <8 x float> %40) #7
  %42 = fmul <8 x float> %33, %33
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>, <8 x float> %42, <8 x float> <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>) #7
  %45 = bitcast <32 x i8> %19 to <8 x i32>
  %46 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %45) #7
  %47 = fmul <8 x float> %33, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %48 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %48) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>, <8 x float> %50) #7
  %52 = fadd <8 x float> %46, %47
  %53 = fsub <8 x float> %52, %46
  %54 = fsub <8 x float> %52, %53
  %55 = fsub <8 x float> %46, %54
  %56 = fsub <8 x float> %47, %53
  %57 = fadd <8 x float> %56, %55
  %58 = fadd <8 x float> %51, %57
  %59 = fmul <8 x float> %33, %42
  %60 = fmul <8 x float> %44, %59
  %61 = fadd <8 x float> %52, %60
  %62 = fsub <8 x float> %61, %52
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %52, %63
  %65 = fsub <8 x float> %60, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %58, %66
  %68 = fadd <8 x float> %61, %67
  %69 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %4, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %79) #7
  %81 = fcmp oeq <8 x float> %4, zeroinitializer
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %83) #7
  ret <8 x float> %84
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log2f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fdiv <8 x float> %20, %21
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>, <8 x float> %23, <8 x float> <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %23, <8 x float> <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>) #7
  %26 = fmul <8 x float> %22, %23
  %27 = bitcast <32 x i8> %19 to <8 x i32>
  %28 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %25, <8 x float> %29) #7
  %31 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %32 = sext <8 x i1> %31 to <8 x i32>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = fcmp uno <8 x float> %4, zeroinitializer
  %38 = sext <8 x i1> %37 to <8 x i32>
  %39 = bitcast <8 x i32> %38 to <4 x i64>
  %40 = or <4 x i64> %36, %39
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %41) #7
  %43 = fcmp oeq <8 x float> %4, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %45) #7
  ret <8 x float> %46
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_log1pf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %4 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %4, <8 x float> %3) #7
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <8 x i32>
  %8 = lshr <8 x i32> %7, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %9 = and <8 x i32> %8, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %10 = add nsw <8 x i32> %9, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %11 = shl nuw nsw <8 x i32> %9, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %12 = sub nsw <8 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %11
  %13 = bitcast <8 x i32> %12 to <8 x float>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %13, <8 x float> %14) #7
  %16 = add nsw <8 x i32> %9, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %17 = bitcast <8 x i32> %10 to <32 x i8>
  %18 = bitcast <8 x i32> %16 to <32 x i8>
  %19 = bitcast <8 x float> %3 to <32 x i8>
  %20 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %17, <32 x i8> %18, <32 x i8> %19) #7
  %21 = bitcast <32 x i8> %20 to <8 x i32>
  %22 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %21) #7
  %23 = fmul <8 x float> %22, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %23
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %22, <8 x float> %24) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %22, <8 x float> %25) #7
  %27 = fadd <8 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %28 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %27
  %29 = fadd <8 x float> %15, %28
  %30 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %31 = fmul <8 x float> %15, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %15, <8 x float> %32) #7
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %27
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %30, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %29
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %30, <8 x float> %35) #7
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %30, <8 x float> %33) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %37, <8 x float> %38) #7
  %40 = fmul <8 x float> %31, %31
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %40, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %40, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #7
  %43 = fmul <8 x float> %31, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fmul <8 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %45 = fadd <8 x float> %23, %43
  %46 = fsub <8 x float> %23, %45
  %47 = fadd <8 x float> %43, %46
  %48 = fadd <8 x float> %26, %47
  %49 = fadd <8 x float> %48, %44
  %50 = fmul <8 x float> %31, %40
  %51 = fmul <8 x float> %50, %42
  %52 = fadd <8 x float> %45, %51
  %53 = fsub <8 x float> %45, %52
  %54 = fadd <8 x float> %51, %53
  %55 = fadd <8 x float> %49, %54
  %56 = fadd <8 x float> %52, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #7
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #7
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = bitcast <8 x float> %58 to <4 x i64>
  %62 = or <4 x i64> %60, %61
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <8 x float>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %66) #7
  %68 = bitcast <8 x float> %0 to <8 x i32>
  %69 = icmp eq <8 x i32> %68, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %71) #7
  ret <8 x float> %72
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_fabsf8_avx2(<8 x float>) local_unnamed_addr #2 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_copysignf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #2 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaxf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #7
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #7
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fminf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #7
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #7
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fdimf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #7
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #7
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_truncf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_floorf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #7
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #7
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_ceilf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #7
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #7
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #7
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #7
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_roundf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #7
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #7
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #7
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #7
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #7
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_rintf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmaf8_avx2(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #0 {
  %4 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %1, <8 x float> %2) #7
  ret <8 x float> %4
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_u05avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %3 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %2) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>, i8 17) #7
  %5 = fmul <8 x float> %3, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %6 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> %5, <8 x float> %4) #7
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000, float 0x3DA0000000000000>, <8 x float> %4) #7
  %8 = bitcast <8 x float> %6 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = sub nsw <8 x i32> <i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007, i32 1597463007>, %9
  %11 = bitcast <8 x i32> %10 to <8 x float>
  %12 = fmul <8 x float> %6, %11
  %13 = fmul <8 x float> %11, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %13, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %15, <8 x float> %12) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %15, <8 x float> %13) #7
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %16
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %19, <8 x float> %16) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %19, <8 x float> %17) #7
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #7
  %24 = fadd <8 x float> %21, %21
  %25 = fmul <8 x float> %24, %23
  %26 = fmul <8 x float> %6, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %6, <8 x float> %27) #7
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %26, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %28, <8 x float> %30) #7
  %32 = fmul <8 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %31, <8 x float> %28) #7
  %34 = fadd <8 x float> %26, %33
  %35 = fmul <8 x float> %7, %34
  %36 = fcmp oeq <8 x float> %6, zeroinitializer
  %37 = fcmp oeq <8 x float> %6, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %38 = or <8 x i1> %37, %36
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <8 x float>
  %41 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %6, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %6, <8 x float> zeroinitializer, i8 17) #7
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %42) #7
  ret <8 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sqrtf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %0) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u05avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #7
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %12 = fmul <8 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %12, <8 x float> %11) #7
  %14 = fmul <8 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %14, <8 x float> %11) #7
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fmul <8 x float> %13, %16
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %13, <8 x float> %18) #7
  %20 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %15
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %16, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %16, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %19) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %22, <8 x float> %23) #7
  %25 = fmul <8 x float> %17, %17
  %26 = fadd <8 x float> %17, %17
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %17, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %24, <8 x float> %28) #7
  %30 = fadd <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <8 x float> %30, %25
  %32 = fsub <8 x float> %30, %31
  %33 = fsub <8 x float> %25, %32
  %34 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <8 x float> %34, %33
  %36 = fadd <8 x float> %29, %35
  %37 = fadd <8 x float> %30, %36
  %38 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %37) #7
  %39 = fmul <8 x float> %38, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %40) #7
  %42 = fadd <8 x float> %30, %39
  %43 = fsub <8 x float> %42, %30
  %44 = fsub <8 x float> %42, %43
  %45 = fsub <8 x float> %30, %44
  %46 = fsub <8 x float> %39, %43
  %47 = fadd <8 x float> %46, %45
  %48 = fadd <8 x float> %41, %36
  %49 = fadd <8 x float> %48, %47
  %50 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %53 = fmul <8 x float> %50, %52
  %54 = fmul <8 x float> %50, %42
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %50, <8 x float> %55) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %50, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #7
  %59 = fmul <8 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %60 = fmul <8 x float> %58, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %10, %59
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %10, <8 x float> %62) #7
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %10, <8 x float> %63) #7
  %65 = fadd <8 x float> %61, %64
  %66 = fcmp uno <8 x float> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %68) #7
  %70 = fcmp oeq <8 x float> %9, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %10, <8 x float> %72) #7
  %74 = fcmp uno <8 x float> %8, %5
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %73, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %76) #7
  %78 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %79 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = or <8 x i1> %79, %78
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %82) #7
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_hypotf8_u35avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #7
  %11 = fdiv <8 x float> %9, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %13 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %12) #7
  %14 = fmul <8 x float> %10, %13
  %15 = fcmp oeq <8 x float> %9, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %10, <8 x float> %17) #7
  %19 = fcmp uno <8 x float> %8, %5
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %21) #7
  %23 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %24 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = or <8 x i1> %24, %23
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <8 x float>
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %27) #7
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_nextafterf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #7
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = bitcast <8 x float> %9 to <8 x i32>
  %12 = ashr <8 x i32> %11, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = xor <4 x i64> %13, %15
  %17 = xor <8 x i32> %11, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %18 = sub <8 x i32> zeroinitializer, %17
  %19 = bitcast <8 x float> %9 to <32 x i8>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = bitcast <4 x i64> %16 to <32 x i8>
  %22 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %19, <32 x i8> %20, <32 x i8> %21) #7
  %23 = fcmp une <8 x float> %9, %1
  %24 = sext <8 x i1> %23 to <8 x i32>
  %25 = bitcast <32 x i8> %22 to <8 x i32>
  %26 = add <8 x i32> %25, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %27 = bitcast <8 x i32> %26 to <32 x i8>
  %28 = bitcast <8 x i32> %24 to <32 x i8>
  %29 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %22, <32 x i8> %27, <32 x i8> %28) #7
  %30 = bitcast <32 x i8> %29 to <8 x i32>
  %31 = xor <8 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = sub <8 x i32> zeroinitializer, %31
  %33 = bitcast <8 x i32> %32 to <32 x i8>
  %34 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %29, <32 x i8> %33, <32 x i8> %21) #7
  %35 = bitcast <32 x i8> %34 to <8 x float>
  %36 = fcmp oeq <8 x float> %35, zeroinitializer
  %37 = fcmp une <8 x float> %9, zeroinitializer
  %38 = and <8 x i1> %36, %37
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = bitcast <8 x i32> %39 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %41, <8 x float> %42) #7
  %44 = fcmp oeq <8 x float> %9, zeroinitializer
  %45 = fcmp oeq <8 x float> %1, zeroinitializer
  %46 = and <8 x i1> %44, %45
  %47 = sext <8 x i1> %46 to <8 x i32>
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> %1, <8 x float> %48) #7
  %50 = fcmp uno <8 x float> %9, %1
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <8 x float>
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %52) #7
  ret <8 x float> %53
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_frfrexpf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #7
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: norecurse nounwind readnone uwtable
define <4 x i64> @Sleef_expfrexpf8_avx2(<8 x float>) local_unnamed_addr #2 {
  ret <4 x i64> zeroinitializer
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_fmodf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #7
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #7
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <8 x i32>
  %16 = add <8 x i32> %15, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = fcmp oeq <8 x float> %14, zeroinitializer
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %17, <8 x float> zeroinitializer, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %23 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %24 = bitcast <8 x float> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <4 x i64> %25 to <8 x float>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %74, %27 ]
  %29 = phi <8 x float> [ zeroinitializer, %2 ], [ %66, %27 ]
  %30 = phi <8 x float> [ %11, %2 ], [ %64, %27 ]
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = fcmp oeq <8 x float> %30, zeroinitializer
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #7
  %38 = fmul <8 x float> %21, %37
  %39 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %38, i32 11) #7
  %40 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %22, <8 x float> %30, i8 30) #7
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %13, i8 29) #7
  %43 = bitcast <8 x float> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %39, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %45) #7
  %47 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %23, <8 x float> %30, i8 30) #7
  %48 = bitcast <8 x float> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %51, i32 11) #7
  %53 = fmul <8 x float> %52, %26
  %54 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %26, <8 x float> %54) #7
  %56 = fadd <8 x float> %30, %53
  %57 = fsub <8 x float> %56, %30
  %58 = fsub <8 x float> %56, %57
  %59 = fsub <8 x float> %30, %58
  %60 = fsub <8 x float> %53, %57
  %61 = fadd <8 x float> %60, %59
  %62 = fadd <8 x float> %29, %55
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %56, %63
  %65 = fsub <8 x float> %56, %64
  %66 = fadd <8 x float> %63, %65
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %64, <8 x float> %13, i8 17) #7
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = and <2 x i64> %70, %69
  %72 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %71, <2 x i64> <i64 -1, i64 -1>) #7
  %73 = icmp eq i32 %72, 0
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp ult i32 %74, 8
  %76 = and i1 %73, %75
  br i1 %76, label %27, label %77

; <label>:77:                                     ; preds = %27
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #7
  %79 = fadd <8 x float> %64, %66
  %80 = fmul <8 x float> %78, %79
  %81 = fcmp oeq <8 x float> %79, %13
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> zeroinitializer, <8 x float> %83) #7
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #7
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> %0, <8 x float> %89) #7
  %91 = fcmp oeq <8 x float> %13, zeroinitializer
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %93) #7
  ret <8 x float> %94
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_remainderf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #7
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #7
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #7
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #7
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  br label %21

; <label>:21:                                     ; preds = %2, %51
  %22 = phi i32 [ 0, %2 ], [ %90, %51 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %75, %51 ]
  %24 = phi <8 x float> [ zeroinitializer, %2 ], [ %89, %51 ]
  %25 = phi <8 x float> [ %11, %2 ], [ %87, %51 ]
  %26 = fmul <8 x float> %15, %25
  %27 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %26, i32 8) #7
  %28 = bitcast <8 x float> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %16, i8 17) #7
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %31) #7
  %33 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %17, i8 17) #7
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = fcmp oeq <8 x float> %17, %30
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %39 = and <4 x i64> %37, %38
  %40 = or <4 x i64> %39, %34
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %41) #7
  %43 = fcmp oeq <8 x float> %42, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = and <2 x i64> %47, %46
  %49 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %48, <2 x i64> <i64 -1, i64 -1>) #7
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %92

; <label>:51:                                     ; preds = %21
  %52 = fmul <8 x float> %42, %20
  %53 = bitcast <8 x float> %52 to <4 x i64>
  %54 = and <4 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fcmp oeq <8 x float> %55, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = and <4 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <4 x i64> %58, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fadd <8 x float> %42, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> %61, <8 x float> %62) #7
  %64 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %63) #7
  %65 = and <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = icmp ne <8 x i32> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = bitcast <8 x float> %63 to <4 x i64>
  %70 = and <4 x i64> %69, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %71, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #7
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = and <4 x i64> %68, %73
  %75 = xor <4 x i64> %74, %23
  %76 = fmul <8 x float> %63, %20
  %77 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %76
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %20, <8 x float> %77) #7
  %79 = fadd <8 x float> %25, %76
  %80 = fsub <8 x float> %79, %25
  %81 = fsub <8 x float> %79, %80
  %82 = fsub <8 x float> %25, %81
  %83 = fsub <8 x float> %76, %80
  %84 = fadd <8 x float> %83, %82
  %85 = fadd <8 x float> %24, %78
  %86 = fadd <8 x float> %85, %84
  %87 = fadd <8 x float> %79, %86
  %88 = fsub <8 x float> %79, %87
  %89 = fadd <8 x float> %86, %88
  %90 = add nuw nsw i32 %22, 1
  %91 = icmp ult i32 %90, 8
  br i1 %91, label %21, label %92

; <label>:92:                                     ; preds = %21, %51
  %93 = phi <8 x float> [ %25, %21 ], [ %87, %51 ]
  %94 = phi <8 x float> [ %24, %21 ], [ %89, %51 ]
  %95 = fadd <8 x float> %93, %94
  %96 = fmul <8 x float> %14, %95
  %97 = bitcast <8 x float> %96 to <4 x i64>
  %98 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %99 = xor <4 x i64> %98, %97
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %104 = sext <8 x i1> %103 to <8 x i32>
  %105 = bitcast <8 x i32> %104 to <8 x float>
  %106 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %105) #7
  %107 = bitcast <8 x i32> %102 to <8 x float>
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> %106, <8 x float> %107) #7
  %109 = fcmp oeq <8 x float> %13, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %111) #7
  ret <8 x float> %112
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_sinpif8_u05avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = lshr <8 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <8 x i32> %5, %3
  %7 = and <8 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <8 x i32> %7, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = and <8 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fsub <8 x float> %2, %11
  %13 = fmul <8 x float> %12, %12
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %12, <8 x float> %14) #7
  %16 = bitcast <8 x i32> %9 to <8 x float>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %16) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %13, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %16) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %13, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, %21
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %16) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %16) #7
  %25 = fadd <8 x float> %22, %23
  %26 = fsub <8 x float> %25, %22
  %27 = fsub <8 x float> %25, %26
  %28 = fsub <8 x float> %22, %27
  %29 = fsub <8 x float> %23, %26
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %24, %30
  %32 = fmul <8 x float> %13, %25
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %25, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %35) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %16) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %16) #7
  %39 = fadd <8 x float> %32, %37
  %40 = fsub <8 x float> %39, %32
  %41 = fsub <8 x float> %39, %40
  %42 = fsub <8 x float> %32, %41
  %43 = fsub <8 x float> %37, %40
  %44 = fadd <8 x float> %43, %42
  %45 = fadd <8 x float> %36, %38
  %46 = fadd <8 x float> %45, %44
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %15, <8 x float> %16) #7
  %49 = fmul <8 x float> %39, %47
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %47, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %47, <8 x float> %51) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %48, <8 x float> %52) #7
  %54 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fsub <8 x float> %54, %49
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %49, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> %54, <8 x float> %16) #7
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> %60, <8 x float> %16) #7
  %63 = and <8 x i32> %6, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %64 = icmp ne <8 x i32> %63, zeroinitializer
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = and <4 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <8 x float> %61 to <4 x i64>
  %69 = xor <4 x i64> %67, %68
  %70 = bitcast <8 x float> %62 to <4 x i64>
  %71 = xor <4 x i64> %67, %70
  %72 = bitcast <4 x i64> %69 to <8 x float>
  %73 = bitcast <4 x i64> %71 to <8 x float>
  %74 = fadd <8 x float> %72, %73
  %75 = bitcast <8 x float> %0 to <8 x i32>
  %76 = icmp eq <8 x i32> %75, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %78) #7
  %80 = bitcast <8 x float> %0 to <4 x i64>
  %81 = and <4 x i64> %80, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %82, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #7
  %84 = bitcast <8 x float> %83 to <4 x i64>
  %85 = bitcast <8 x float> %79 to <4 x i64>
  %86 = xor <4 x i64> %84, <i64 -1, i64 -1, i64 -1, i64 -1>
  %87 = and <4 x i64> %86, %85
  %88 = fcmp oeq <8 x float> %82, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %89 = sext <8 x i1> %88 to <8 x i32>
  %90 = bitcast <8 x i32> %89 to <4 x i64>
  %91 = or <4 x i64> %87, %90
  %92 = bitcast <4 x i64> %91 to <8 x float>
  ret <8 x float> %92
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_cospif8_u05avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = lshr <8 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <8 x i32> %5, %3
  %7 = and <8 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <8 x i32> %7, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = and <8 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fsub <8 x float> %2, %11
  %13 = fmul <8 x float> %12, %12
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %12, <8 x float> %14) #7
  %16 = bitcast <8 x i32> %9 to <8 x float>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %16) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %13, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %16) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %13, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, %21
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %16) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %16) #7
  %25 = fadd <8 x float> %22, %23
  %26 = fsub <8 x float> %25, %22
  %27 = fsub <8 x float> %25, %26
  %28 = fsub <8 x float> %22, %27
  %29 = fsub <8 x float> %23, %26
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %24, %30
  %32 = fmul <8 x float> %13, %25
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %25, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %35) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %16) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %16) #7
  %39 = fadd <8 x float> %32, %37
  %40 = fsub <8 x float> %39, %32
  %41 = fsub <8 x float> %39, %40
  %42 = fsub <8 x float> %32, %41
  %43 = fsub <8 x float> %37, %40
  %44 = fadd <8 x float> %43, %42
  %45 = fadd <8 x float> %36, %38
  %46 = fadd <8 x float> %45, %44
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %15, <8 x float> %16) #7
  %49 = fmul <8 x float> %39, %47
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %47, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %47, <8 x float> %51) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %48, <8 x float> %52) #7
  %54 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fsub <8 x float> %54, %49
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %49, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> %54, <8 x float> %16) #7
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> %60, <8 x float> %16) #7
  %63 = add <8 x i32> %10, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %64 = and <8 x i32> %63, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %65 = icmp ne <8 x i32> %64, zeroinitializer
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = bitcast <8 x i32> %66 to <4 x i64>
  %68 = and <4 x i64> %67, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = bitcast <8 x float> %61 to <4 x i64>
  %70 = xor <4 x i64> %68, %69
  %71 = bitcast <8 x float> %62 to <4 x i64>
  %72 = xor <4 x i64> %68, %71
  %73 = bitcast <4 x i64> %70 to <8 x float>
  %74 = bitcast <4 x i64> %72 to <8 x float>
  %75 = fadd <8 x float> %73, %74
  %76 = bitcast <8 x float> %0 to <4 x i64>
  %77 = and <4 x i64> %76, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %78, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #7
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #7
  %81 = fcmp oeq <8 x float> %78, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <4 x i64>
  %84 = bitcast <8 x float> %80 to <4 x i64>
  %85 = or <4 x i64> %84, %83
  %86 = bitcast <4 x i64> %85 to <8 x float>
  ret <8 x float> %86
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_tgammaf8_u10avx2(<8 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <8 x float>, <8 x float>* %6, align 32
  %8 = fadd <8 x float> %5, %7
  %9 = fmul <8 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %9) #7
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %5, %12
  %14 = fsub <8 x float> %13, %5
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %5, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %7, %18
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #7
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #7
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #7
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #7
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #7
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = ashr <8 x i32> %10, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = shl <8 x i32> %76, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %78 = add <8 x i32> %77, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %79 = bitcast <8 x i32> %78 to <8 x float>
  %80 = fmul <8 x float> %72, %79
  %81 = sub <8 x i32> %10, %76
  %82 = shl <8 x i32> %81, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %83 = add <8 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <8 x i32> %83 to <8 x float>
  %85 = fmul <8 x float> %80, %84
  %86 = fmul <8 x float> %75, %79
  %87 = fmul <8 x float> %86, %84
  %88 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %89 = bitcast <8 x float> %88 to <4 x i64>
  %90 = bitcast <8 x float> %85 to <4 x i64>
  %91 = xor <4 x i64> %89, <i64 -1, i64 -1, i64 -1, i64 -1>
  %92 = and <4 x i64> %91, %90
  %93 = bitcast <8 x float> %87 to <4 x i64>
  %94 = and <4 x i64> %93, %91
  %95 = bitcast <4 x i64> %92 to <8 x float>
  %96 = bitcast <4 x i64> %94 to <8 x float>
  %97 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %98 = load <8 x float>, <8 x float>* %97, align 32
  %99 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %100 = load <8 x float>, <8 x float>* %99, align 32
  %101 = fmul <8 x float> %98, %95
  %102 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %101
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %98, <8 x float> %102) #7
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %98, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %100, <8 x float> %104) #7
  %106 = fadd <8 x float> %101, %105
  %107 = fcmp oeq <8 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %108 = sext <8 x i1> %107 to <8 x i32>
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %111 = bitcast <8 x float> %110 to <4 x i64>
  %112 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  %113 = fcmp oeq <8 x float> %112, %0
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = bitcast <8 x i32> %114 to <4 x i64>
  %116 = and <4 x i64> %115, %111
  %117 = bitcast <8 x float> %0 to <4 x i64>
  %118 = and <4 x i64> %117, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = fcmp oeq <8 x float> %119, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %121 = fcmp uno <8 x float> %0, zeroinitializer
  %122 = or <8 x i1> %120, %121
  %123 = sext <8 x i1> %122 to <8 x i32>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %126 = and <4 x i64> %111, %125
  %127 = fcmp uno <8 x float> %106, zeroinitializer
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = and <4 x i64> %126, %129
  %131 = or <4 x i64> %130, %109
  %132 = or <4 x i64> %131, %116
  %133 = bitcast <4 x i64> %132 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %133) #7
  %135 = fcmp oeq <8 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %136 = sext <8 x i1> %135 to <8 x i32>
  %137 = bitcast <8 x i32> %136 to <4 x i64>
  %138 = or <4 x i64> %125, %137
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i8 29) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = and <4 x i64> %138, %140
  %142 = fcmp oeq <8 x float> %0, zeroinitializer
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i8 30) #7
  %146 = bitcast <8 x float> %145 to <4 x i64>
  %147 = or <4 x i64> %146, %144
  %148 = fcmp uno <8 x float> %134, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = or <4 x i64> %147, %150
  %152 = and <4 x i64> %141, %151
  %153 = and <4 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %154 = or <4 x i64> %153, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %155 = bitcast <4 x i64> %154 to <8 x float>
  %156 = bitcast <4 x i64> %152 to <8 x float>
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> %155, <8 x float> %156) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <8 x float> %157
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <8 x float>) unnamed_addr #3 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>, i8 17) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = xor <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fadd <8 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %12 = fadd <8 x float> %11, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = fsub <8 x float> %11, %12
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = fsub <8 x float> %10, %12
  %16 = fadd <8 x float> %15, %14
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %11, <8 x float> %7) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %7) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %17, <8 x float> zeroinitializer, <8 x float> %6) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> zeroinitializer, <8 x float> %6) #7
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %19, i8 18) #7
  %22 = bitcast <8 x float> %21 to <4 x i64>
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>, i8 18) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = and <4 x i64> %24, %22
  %26 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>, <8 x float> %19, i8 18) #7
  %27 = bitcast <8 x float> %26 to <4 x i64>
  %28 = fadd <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = fsub <8 x float> %28, %19
  %30 = fsub <8 x float> %28, %29
  %31 = fsub <8 x float> %19, %30
  %32 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29
  %33 = fadd <8 x float> %32, %31
  %34 = fadd <8 x float> %20, %33
  %35 = fmul <8 x float> %19, %28
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %35
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %19, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %19, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %20, <8 x float> %38) #7
  %40 = fadd <8 x float> %35, %39
  %41 = fsub <8 x float> %35, %40
  %42 = fadd <8 x float> %39, %41
  %43 = fadd <8 x float> %19, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fsub <8 x float> %43, %19
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> %19, %45
  %47 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %20, %48
  %50 = fmul <8 x float> %43, %40
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %50
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %40, <8 x float> %51) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %40, <8 x float> %52) #7
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> %53) #7
  %55 = fadd <8 x float> %50, %54
  %56 = fsub <8 x float> %50, %55
  %57 = fadd <8 x float> %54, %56
  %58 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %19, <8 x float> <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>, i8 18) #7
  %59 = bitcast <8 x float> %58 to <4 x i64>
  %60 = and <4 x i64> %59, %27
  %61 = bitcast <4 x i64> %60 to <8 x float>
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %55, <8 x float> %61) #7
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %57, <8 x float> %61) #7
  %64 = fadd <8 x float> %19, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %65 = fsub <8 x float> %64, %19
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %19, %66
  %68 = fsub <8 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %20, %69
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> %64, <8 x float> %61) #7
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %70, <8 x float> %61) #7
  %73 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %74 = bitcast <4 x i64> %25 to <8 x float>
  %75 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %74) #7
  %76 = fadd <8 x float> %71, %75
  %77 = fsub <8 x float> %76, %71
  %78 = fsub <8 x float> %76, %77
  %79 = fsub <8 x float> %71, %78
  %80 = fsub <8 x float> %75, %77
  %81 = fadd <8 x float> %80, %79
  %82 = fadd <8 x float> %72, %81
  %83 = fadd <8 x float> %76, %82
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> %73, <8 x float> %26) #7
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000>, <8 x float> <float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000>, <8 x float> %74) #7
  %86 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %85, <8 x float> <float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000>, <8 x float> %26) #7
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000>, <8 x float> <float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000>, <8 x float> %74) #7
  %88 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %87, <8 x float> <float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000>, <8 x float> %26) #7
  %89 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %86, <8 x float> %84, <8 x float> %88) #7
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000>, <8 x float> <float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000>, <8 x float> %74) #7
  %91 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000>, <8 x float> %26) #7
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %84, <8 x float> %91) #7
  %93 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000>, <8 x float> <float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000>, <8 x float> %74) #7
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %93, <8 x float> <float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000>, <8 x float> %26) #7
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %92, <8 x float> %84, <8 x float> %94) #7
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000>, <8 x float> <float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000>, <8 x float> %74) #7
  %97 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000>, <8 x float> %26) #7
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %84, <8 x float> %97) #7
  %99 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000>, <8 x float> <float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000>, <8 x float> %74) #7
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %99, <8 x float> <float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000>, <8 x float> %26) #7
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %84, <8 x float> %100) #7
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000>, <8 x float> <float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000>, <8 x float> %74) #7
  %103 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> <float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000>, <8 x float> %26) #7
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %84, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000>, <8 x float> <float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000>, <8 x float> %74) #7
  %106 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %105, <8 x float> <float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000>, <8 x float> %26) #7
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %84, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000>, <8 x float> <float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000>, <8 x float> %74) #7
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>, <8 x float> %26) #7
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %107, <8 x float> %84, <8 x float> %109) #7
  %111 = fadd <8 x float> %71, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %112 = fsub <8 x float> %111, %71
  %113 = fsub <8 x float> %111, %112
  %114 = fsub <8 x float> %71, %113
  %115 = fsub <8 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %112
  %116 = fadd <8 x float> %115, %114
  %117 = fadd <8 x float> %72, %116
  %118 = fmul <8 x float> %71, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %119 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %118, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %120 = fmul <8 x float> %118, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %121 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %120, <8 x float> %119) #7
  %122 = bitcast <8 x float> %121 to <8 x i32>
  %123 = lshr <8 x i32> %122, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %124 = bitcast <8 x float> %119 to <32 x i8>
  %125 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %124) #7
  %126 = and <8 x i32> %123, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = bitcast <32 x i8> %125 to <8 x i32>
  %128 = sub <8 x i32> %126, %127
  %129 = shl <8 x i32> %128, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %130 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %129
  %131 = bitcast <8 x i32> %130 to <8 x float>
  %132 = fmul <8 x float> %71, %131
  %133 = fmul <8 x float> %72, %131
  %134 = fadd <8 x float> %132, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %135 = fsub <8 x float> %134, %132
  %136 = fsub <8 x float> %134, %135
  %137 = fsub <8 x float> %132, %136
  %138 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %135
  %139 = fadd <8 x float> %138, %137
  %140 = fadd <8 x float> %133, %139
  %141 = fadd <8 x float> %132, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %142 = fsub <8 x float> %141, %132
  %143 = fsub <8 x float> %141, %142
  %144 = fsub <8 x float> %132, %143
  %145 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %142
  %146 = fadd <8 x float> %145, %144
  %147 = fadd <8 x float> %133, %146
  %148 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %141
  %149 = fmul <8 x float> %134, %148
  %150 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %149
  %151 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %148, <8 x float> %134, <8 x float> %150) #7
  %152 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %141
  %153 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %152, <8 x float> %148, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %154 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %147
  %155 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %154, <8 x float> %148, <8 x float> %153) #7
  %156 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %140, <8 x float> %148, <8 x float> %151) #7
  %157 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %149, <8 x float> %155, <8 x float> %156) #7
  %158 = fmul <8 x float> %149, %149
  %159 = fadd <8 x float> %149, %149
  %160 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %158
  %161 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %149, <8 x float> %149, <8 x float> %160) #7
  %162 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %159, <8 x float> %157, <8 x float> %161) #7
  %163 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %158, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %164 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %163, <8 x float> %158, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %164, <8 x float> %158, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %166 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %128) #7
  %167 = fmul <8 x float> %166, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %168 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %167
  %169 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %166, <8 x float> %168) #7
  %170 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %166, <8 x float> %169) #7
  %171 = fmul <8 x float> %149, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %172 = fmul <8 x float> %157, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %173 = fadd <8 x float> %171, %167
  %174 = fsub <8 x float> %167, %173
  %175 = fadd <8 x float> %171, %174
  %176 = fadd <8 x float> %170, %175
  %177 = fadd <8 x float> %172, %176
  %178 = fmul <8 x float> %149, %158
  %179 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %178
  %180 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %149, <8 x float> %179) #7
  %181 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %149, <8 x float> %180) #7
  %182 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %157, <8 x float> %181) #7
  %183 = fmul <8 x float> %165, %178
  %184 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %183
  %185 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %178, <8 x float> %165, <8 x float> %184) #7
  %186 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %182, <8 x float> %165, <8 x float> %185) #7
  %187 = fadd <8 x float> %173, %183
  %188 = fsub <8 x float> %173, %187
  %189 = fadd <8 x float> %183, %188
  %190 = fadd <8 x float> %189, %177
  %191 = fadd <8 x float> %190, %186
  %192 = fmul <8 x float> %111, %187
  %193 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %192
  %194 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %187, <8 x float> %193) #7
  %195 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %187, <8 x float> %194) #7
  %196 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %111, <8 x float> %191, <8 x float> %195) #7
  %197 = bitcast <8 x float> %71 to <4 x i64>
  %198 = xor <4 x i64> %197, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %199 = bitcast <8 x float> %72 to <4 x i64>
  %200 = xor <4 x i64> %199, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %201 = bitcast <4 x i64> %198 to <8 x float>
  %202 = bitcast <4 x i64> %200 to <8 x float>
  %203 = fadd <8 x float> %192, %201
  %204 = fsub <8 x float> %203, %192
  %205 = fsub <8 x float> %203, %204
  %206 = fsub <8 x float> %192, %205
  %207 = fsub <8 x float> %201, %204
  %208 = fadd <8 x float> %207, %206
  %209 = fadd <8 x float> %196, %202
  %210 = fadd <8 x float> %208, %209
  %211 = fadd <8 x float> %203, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %212 = fsub <8 x float> %211, %203
  %213 = fsub <8 x float> %211, %212
  %214 = fsub <8 x float> %203, %213
  %215 = fsub <8 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %212
  %216 = fadd <8 x float> %215, %214
  %217 = fadd <8 x float> %210, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %218 = fadd <8 x float> %216, %217
  %219 = fmul <8 x float> %84, %110
  %220 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %219
  %221 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %84, <8 x float> %220) #7
  %222 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000>, <8 x float> <float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000>, <8 x float> %74) #7
  %223 = fadd <8 x float> %219, %222
  %224 = fsub <8 x float> %223, %219
  %225 = fsub <8 x float> %223, %224
  %226 = fsub <8 x float> %219, %225
  %227 = fsub <8 x float> %222, %224
  %228 = fadd <8 x float> %227, %226
  %229 = fadd <8 x float> %221, %228
  %230 = fmul <8 x float> %84, %223
  %231 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %230
  %232 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %223, <8 x float> %84, <8 x float> %231) #7
  %233 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %229, <8 x float> %84, <8 x float> %232) #7
  %234 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000>, <8 x float> <float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000>, <8 x float> %74) #7
  %235 = fadd <8 x float> %230, %234
  %236 = fsub <8 x float> %235, %230
  %237 = fsub <8 x float> %235, %236
  %238 = fsub <8 x float> %230, %237
  %239 = fsub <8 x float> %234, %236
  %240 = fadd <8 x float> %239, %238
  %241 = fadd <8 x float> %233, %240
  %242 = fmul <8 x float> %84, %235
  %243 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %242
  %244 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %235, <8 x float> %84, <8 x float> %243) #7
  %245 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %241, <8 x float> %84, <8 x float> %244) #7
  %246 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000>, <8 x float> <float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000>, <8 x float> %74) #7
  %247 = fadd <8 x float> %242, %246
  %248 = fsub <8 x float> %247, %242
  %249 = fsub <8 x float> %247, %248
  %250 = fsub <8 x float> %242, %249
  %251 = fsub <8 x float> %246, %248
  %252 = fadd <8 x float> %251, %250
  %253 = fadd <8 x float> %245, %252
  %254 = fmul <8 x float> %84, %247
  %255 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %254
  %256 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %247, <8 x float> %84, <8 x float> %255) #7
  %257 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %253, <8 x float> %84, <8 x float> %256) #7
  %258 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %254, <8 x float> %211, <8 x float> %26) #7
  %259 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %257, <8 x float> %218, <8 x float> %26) #7
  %260 = fadd <8 x float> %219, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %261 = fsub <8 x float> %260, %219
  %262 = fsub <8 x float> %260, %261
  %263 = fsub <8 x float> %219, %262
  %264 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %261
  %265 = fadd <8 x float> %264, %263
  %266 = fadd <8 x float> %265, %221
  %267 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %260, <8 x float> %26) #7
  %268 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %266, <8 x float> %26) #7
  %269 = bitcast <8 x float> %258 to <4 x i64>
  %270 = xor <4 x i64> %269, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %271 = bitcast <8 x float> %259 to <4 x i64>
  %272 = xor <4 x i64> %271, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %273 = bitcast <4 x i64> %270 to <8 x float>
  %274 = bitcast <4 x i64> %272 to <8 x float>
  %275 = fadd <8 x float> %273, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %276 = fadd <8 x float> %275, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %277 = fsub <8 x float> %275, %276
  %278 = fsub <8 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %277
  %279 = fsub <8 x float> %273, %276
  %280 = fadd <8 x float> %279, %278
  %281 = fadd <8 x float> %274, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %282 = fadd <8 x float> %281, %280
  %283 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %258, <8 x float> %275, <8 x float> %7) #7
  %284 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %259, <8 x float> %282, <8 x float> %7) #7
  %285 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %283, <8 x float> <float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000>, <8 x float> %6) #7
  %286 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %284, <8 x float> <float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000>, <8 x float> %6) #7
  %287 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %267, <8 x float> %62, <8 x float> %7) #7
  %288 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %268, <8 x float> %63, <8 x float> %7) #7
  %289 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %287, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %6) #7
  %290 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %288, <8 x float> zeroinitializer, <8 x float> %6) #7
  %291 = xor <4 x i64> %8, <i64 -1, i64 -1, i64 -1, i64 -1>
  %292 = shufflevector <4 x i64> %291, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %293 = shufflevector <4 x i64> %291, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %294 = and <2 x i64> %293, %292
  %295 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %294, <2 x i64> <i64 -1, i64 -1>) #7
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %380

; <label>:297:                                    ; preds = %2
  %298 = fmul <8 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %299 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %298) #7
  %300 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %299) #7
  %301 = fmul <8 x float> %300, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %302 = fsub <8 x float> %1, %301
  %303 = fmul <8 x float> %302, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %304 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %303) #7
  %305 = lshr <8 x i32> %304, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %306 = xor <8 x i32> %305, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %307 = add <8 x i32> %306, %304
  %308 = and <8 x i32> %307, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %309 = icmp ne <8 x i32> %308, zeroinitializer
  %310 = sext <8 x i1> %309 to <8 x i32>
  %311 = and <8 x i32> %307, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %312 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %311) #7
  %313 = fsub <8 x float> %303, %312
  %314 = fmul <8 x float> %313, %313
  %315 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %314
  %316 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %313, <8 x float> %313, <8 x float> %315) #7
  %317 = bitcast <8 x i32> %310 to <8 x float>
  %318 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %317) #7
  %319 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %317) #7
  %320 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %318, <8 x float> %314, <8 x float> %319) #7
  %321 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %317) #7
  %322 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %320, <8 x float> %314, <8 x float> %321) #7
  %323 = fmul <8 x float> %314, %322
  %324 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %317) #7
  %325 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %317) #7
  %326 = fadd <8 x float> %323, %324
  %327 = fsub <8 x float> %326, %323
  %328 = fsub <8 x float> %326, %327
  %329 = fsub <8 x float> %323, %328
  %330 = fsub <8 x float> %324, %327
  %331 = fadd <8 x float> %330, %329
  %332 = fadd <8 x float> %325, %331
  %333 = fmul <8 x float> %314, %326
  %334 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %333
  %335 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %314, <8 x float> %326, <8 x float> %334) #7
  %336 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %316, <8 x float> %326, <8 x float> %335) #7
  %337 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %314, <8 x float> %332, <8 x float> %336) #7
  %338 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %317) #7
  %339 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %317) #7
  %340 = fadd <8 x float> %333, %338
  %341 = fsub <8 x float> %340, %333
  %342 = fsub <8 x float> %340, %341
  %343 = fsub <8 x float> %333, %342
  %344 = fsub <8 x float> %338, %341
  %345 = fadd <8 x float> %344, %343
  %346 = fadd <8 x float> %337, %339
  %347 = fadd <8 x float> %346, %345
  %348 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %313, <8 x float> %314, <8 x float> %317) #7
  %349 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %316, <8 x float> %317) #7
  %350 = fmul <8 x float> %340, %348
  %351 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %350
  %352 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %340, <8 x float> %348, <8 x float> %351) #7
  %353 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %347, <8 x float> %348, <8 x float> %352) #7
  %354 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %340, <8 x float> %349, <8 x float> %353) #7
  %355 = fadd <8 x float> %350, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %356 = fsub <8 x float> %355, %350
  %357 = fsub <8 x float> %355, %356
  %358 = fsub <8 x float> %350, %357
  %359 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %356
  %360 = fadd <8 x float> %359, %358
  %361 = fadd <8 x float> %354, %360
  %362 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %350, <8 x float> %355, <8 x float> %317) #7
  %363 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %354, <8 x float> %361, <8 x float> %317) #7
  %364 = and <8 x i32> %307, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %365 = icmp ne <8 x i32> %364, zeroinitializer
  %366 = sext <8 x i1> %365 to <8 x i32>
  %367 = bitcast <8 x i32> %366 to <4 x i64>
  %368 = and <4 x i64> %367, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %369 = bitcast <8 x float> %362 to <4 x i64>
  %370 = xor <4 x i64> %368, %369
  %371 = bitcast <8 x float> %363 to <4 x i64>
  %372 = xor <4 x i64> %368, %371
  %373 = bitcast <4 x i64> %370 to <8 x float>
  %374 = bitcast <4 x i64> %372 to <8 x float>
  %375 = fmul <8 x float> %267, %373
  %376 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %375
  %377 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %267, <8 x float> %373, <8 x float> %376) #7
  %378 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %268, <8 x float> %373, <8 x float> %377) #7
  %379 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %267, <8 x float> %374, <8 x float> %378) #7
  br label %380

; <label>:380:                                    ; preds = %2, %297
  %381 = phi <8 x float> [ %375, %297 ], [ %71, %2 ]
  %382 = phi <8 x float> [ %379, %297 ], [ %72, %2 ]
  %383 = fmul <8 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %384 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> %381, <8 x float> %7) #7
  %385 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %382, <8 x float> %7) #7
  %386 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %384, <8 x float> %383, <8 x float> %6) #7
  %387 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %385, <8 x float> zeroinitializer, <8 x float> %6) #7
  %388 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %386
  %389 = fmul <8 x float> %289, %388
  %390 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %389
  %391 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %388, <8 x float> %289, <8 x float> %390) #7
  %392 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %386
  %393 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %392, <8 x float> %388, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %394 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %387
  %395 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %394, <8 x float> %388, <8 x float> %393) #7
  %396 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %290, <8 x float> %388, <8 x float> %391) #7
  %397 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %389, <8 x float> %395, <8 x float> %396) #7
  %398 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 0
  store <8 x float> %285, <8 x float>* %398, align 32
  %399 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  store <8 x float> %286, <8 x float>* %399, align 32
  %400 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <8 x float> %389, <8 x float>* %400, align 32
  %401 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <8 x float> %397, <8 x float>* %401, align 32
  ret void
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_lgammaf8_u10avx2(<8 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <8 x float>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <8 x float>
  %14 = bitcast <4 x i64> %12 to <8 x float>
  %15 = fmul <8 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %17 = fmul <8 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %17, <8 x float> %16) #7
  %19 = bitcast <8 x float> %18 to <8 x i32>
  %20 = lshr <8 x i32> %19, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %21 = bitcast <8 x float> %16 to <32 x i8>
  %22 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %21) #7
  %23 = and <8 x i32> %20, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %24 = bitcast <32 x i8> %22 to <8 x i32>
  %25 = sub <8 x i32> %23, %24
  %26 = shl <8 x i32> %25, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %27 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %26
  %28 = bitcast <8 x i32> %27 to <8 x float>
  %29 = fmul <8 x float> %13, %28
  %30 = fmul <8 x float> %14, %28
  %31 = fadd <8 x float> %29, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %32 = fsub <8 x float> %31, %29
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %29, %33
  %35 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %30, %36
  %38 = fadd <8 x float> %29, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %39 = fsub <8 x float> %38, %29
  %40 = fsub <8 x float> %38, %39
  %41 = fsub <8 x float> %29, %40
  %42 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %30, %43
  %45 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %46 = fmul <8 x float> %31, %45
  %47 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %46
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %31, <8 x float> %47) #7
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %45, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %44
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %45, <8 x float> %50) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> %45, <8 x float> %48) #7
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %52, <8 x float> %53) #7
  %55 = fmul <8 x float> %46, %46
  %56 = fadd <8 x float> %46, %46
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %46, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %55, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %55, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %55, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %63 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %25) #7
  %64 = fmul <8 x float> %63, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %63, <8 x float> %65) #7
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %63, <8 x float> %66) #7
  %68 = fmul <8 x float> %46, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %69 = fmul <8 x float> %54, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %70 = fadd <8 x float> %68, %64
  %71 = fsub <8 x float> %64, %70
  %72 = fadd <8 x float> %68, %71
  %73 = fadd <8 x float> %67, %72
  %74 = fadd <8 x float> %69, %73
  %75 = fmul <8 x float> %46, %55
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %46, <8 x float> %76) #7
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %46, <8 x float> %77) #7
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> %78) #7
  %80 = fmul <8 x float> %62, %75
  %81 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %62, <8 x float> %81) #7
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %62, <8 x float> %82) #7
  %84 = fadd <8 x float> %70, %80
  %85 = fsub <8 x float> %70, %84
  %86 = fadd <8 x float> %80, %85
  %87 = fadd <8 x float> %86, %74
  %88 = fadd <8 x float> %87, %83
  %89 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %90 = load <8 x float>, <8 x float>* %89, align 32
  %91 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %92 = load <8 x float>, <8 x float>* %91, align 32
  %93 = fadd <8 x float> %84, %90
  %94 = fsub <8 x float> %93, %90
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %90, %95
  %97 = fsub <8 x float> %84, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %88, %92
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %93, %100
  %102 = bitcast <8 x float> %0 to <4 x i64>
  %103 = and <4 x i64> %102, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %104 = bitcast <4 x i64> %103 to <8 x float>
  %105 = fcmp oeq <8 x float> %104, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %106 = sext <8 x i1> %105 to <8 x i32>
  %107 = bitcast <8 x i32> %106 to <4 x i64>
  %108 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 18) #7
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  %111 = fcmp oeq <8 x float> %110, %0
  %112 = sext <8 x i1> %111 to <8 x i32>
  %113 = bitcast <8 x i32> %112 to <4 x i64>
  %114 = and <4 x i64> %113, %109
  %115 = fcmp uno <8 x float> %0, zeroinitializer
  %116 = or <8 x i1> %105, %115
  %117 = sext <8 x i1> %116 to <8 x i32>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -1, i64 -1, i64 -1, i64 -1>
  %120 = fcmp uno <8 x float> %101, zeroinitializer
  %121 = sext <8 x i1> %120 to <8 x i32>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = and <4 x i64> %122, %119
  %124 = or <4 x i64> %114, %107
  %125 = or <4 x i64> %124, %123
  %126 = bitcast <4 x i64> %125 to <8 x float>
  %127 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %101, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %126) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <8 x float> %127
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erff8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>, i8 17) #7
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>, i8 17) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i8 17) #7
  %8 = fmul <8 x float> %4, %4
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %8, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>, <8 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <8 x float> %6) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <8 x float> %5) #7
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>, <8 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <8 x float> %6) #7
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <8 x float> %5) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>, <8 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <8 x float> %6) #7
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <8 x float> %5) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>, <8 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <8 x float> %6) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <8 x float> %5) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %9, <8 x float> %19) #7
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>, <8 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <8 x float> %6) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %21, <8 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <8 x float> %5) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %9, <8 x float> %22) #7
  %24 = fmul <8 x float> %9, %23
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %24
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %9, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>, <8 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <8 x float> %6) #7
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>, <8 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <8 x float> %6) #7
  %29 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <8 x float> %5) #7
  %30 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %28, <8 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <8 x float> %5) #7
  %31 = fadd <8 x float> %24, %29
  %32 = fsub <8 x float> %31, %24
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %24, %33
  %35 = fsub <8 x float> %29, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %26, %30
  %38 = fadd <8 x float> %37, %36
  %39 = fmul <8 x float> %9, %31
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %9, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %9, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>, <8 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <8 x float> %6) #7
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>, <8 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <8 x float> %6) #7
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <8 x float> %5) #7
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <8 x float> %5) #7
  %47 = fadd <8 x float> %39, %45
  %48 = fsub <8 x float> %47, %39
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %39, %49
  %51 = fsub <8 x float> %45, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %42, %46
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %47, %4
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %4, <8 x float> %57) #7
  %59 = fadd <8 x float> %55, %58
  %60 = fmul <8 x float> %59, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %61 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %60) #7
  %62 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #7
  %63 = fmul <8 x float> %62, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %64 = fadd <8 x float> %55, %63
  %65 = fsub <8 x float> %64, %55
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %55, %66
  %68 = fsub <8 x float> %63, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %58, %69
  %71 = fmul <8 x float> %62, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %72 = fadd <8 x float> %71, %64
  %73 = fsub <8 x float> %72, %64
  %74 = fsub <8 x float> %72, %73
  %75 = fsub <8 x float> %64, %74
  %76 = fsub <8 x float> %71, %73
  %77 = fadd <8 x float> %76, %75
  %78 = fadd <8 x float> %77, %70
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %72, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %72, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %80, <8 x float> %72, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %82 = fmul <8 x float> %72, %81
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %81, <8 x float> %83) #7
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %81, <8 x float> %84) #7
  %86 = fadd <8 x float> %82, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %87 = fsub <8 x float> %86, %82
  %88 = fsub <8 x float> %86, %87
  %89 = fsub <8 x float> %82, %88
  %90 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %87
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %85, %91
  %93 = fmul <8 x float> %72, %86
  %94 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %86, <8 x float> %94) #7
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %86, <8 x float> %95) #7
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %92, <8 x float> %96) #7
  %98 = fadd <8 x float> %93, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %99 = fsub <8 x float> %98, %93
  %100 = fsub <8 x float> %98, %99
  %101 = fsub <8 x float> %93, %100
  %102 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %99
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %97, %103
  %105 = fmul <8 x float> %72, %72
  %106 = fadd <8 x float> %72, %72
  %107 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %105
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %72, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> %78, <8 x float> %108) #7
  %110 = fmul <8 x float> %105, %98
  %111 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %110
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %98, <8 x float> %111) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> %98, <8 x float> %112) #7
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %104, <8 x float> %113) #7
  %115 = fadd <8 x float> %72, %110
  %116 = fsub <8 x float> %115, %72
  %117 = fsub <8 x float> %115, %116
  %118 = fsub <8 x float> %72, %117
  %119 = fsub <8 x float> %110, %116
  %120 = fadd <8 x float> %119, %118
  %121 = fadd <8 x float> %78, %114
  %122 = fadd <8 x float> %120, %121
  %123 = fadd <8 x float> %115, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %124 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %123
  %125 = fadd <8 x float> %115, %124
  %126 = fadd <8 x float> %125, %122
  %127 = ashr <8 x i32> %61, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = shl <8 x i32> %127, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %129 = add <8 x i32> %128, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %130 = bitcast <8 x i32> %129 to <8 x float>
  %131 = fmul <8 x float> %123, %130
  %132 = sub <8 x i32> %61, %127
  %133 = shl <8 x i32> %132, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %134 = add <8 x i32> %133, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %135 = bitcast <8 x i32> %134 to <8 x float>
  %136 = fmul <8 x float> %131, %135
  %137 = fmul <8 x float> %126, %130
  %138 = fmul <8 x float> %137, %135
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %55, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = bitcast <8 x float> %136 to <4 x i64>
  %142 = xor <4 x i64> %140, <i64 -1, i64 -1, i64 -1, i64 -1>
  %143 = and <4 x i64> %142, %141
  %144 = bitcast <8 x float> %138 to <4 x i64>
  %145 = and <4 x i64> %144, %142
  %146 = xor <4 x i64> %143, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = xor <4 x i64> %145, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %148 = bitcast <4 x i64> %146 to <8 x float>
  %149 = bitcast <4 x i64> %147 to <8 x float>
  %150 = fadd <8 x float> %148, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %151 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %150
  %152 = fadd <8 x float> %151, %148
  %153 = fadd <8 x float> %152, %149
  %154 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %150, <8 x float> %55, <8 x float> %5) #7
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %153, <8 x float> %58, <8 x float> %5) #7
  %156 = fadd <8 x float> %154, %155
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %156, <8 x float> %7) #7
  %158 = bitcast <8 x float> %157 to <4 x i64>
  %159 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %160 = xor <4 x i64> %159, %158
  %161 = bitcast <4 x i64> %160 to <8 x float>
  %162 = fcmp uno <8 x float> %4, zeroinitializer
  %163 = sext <8 x i1> %162 to <8 x i32>
  %164 = bitcast <8 x i32> %163 to <8 x float>
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %161, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %164) #7
  ret <8 x float> %165
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_erfcf8_u15avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #7
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>, i8 17) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>, i8 17) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>, i8 17) #7
  %9 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %9
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %10) #7
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %4
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %9, <8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %9, <8 x float> %11) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %14, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> %6) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %16, <8 x float> zeroinitializer, <8 x float> %6) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000>, <8 x float> <float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000>, <8 x float> %7) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> <float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000>, <8 x float> %6) #7
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000>, <8 x float> %5) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000>, <8 x float> <float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000>, <8 x float> %7) #7
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000>, <8 x float> %6) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %23, <8 x float> <float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000>, <8 x float> %5) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %17, <8 x float> %24) #7
  %26 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000>, <8 x float> <float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000>, <8 x float> %7) #7
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %26, <8 x float> <float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000>, <8 x float> %6) #7
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000>, <8 x float> %5) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %17, <8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000>, <8 x float> <float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000>, <8 x float> %7) #7
  %31 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000>, <8 x float> %6) #7
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> <float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000>, <8 x float> %5) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %17, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000>, <8 x float> <float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000>, <8 x float> %7) #7
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> <float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000>, <8 x float> %6) #7
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000>, <8 x float> %5) #7
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %17, <8 x float> %36) #7
  %38 = fmul <8 x float> %17, %37
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %37, <8 x float> %39) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %37, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000>, <8 x float> <float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000>, <8 x float> %7) #7
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000>, <8 x float> <float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000>, <8 x float> %7) #7
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> <float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000>, <8 x float> %6) #7
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000>, <8 x float> %6) #7
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> <float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000>, <8 x float> %5) #7
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %45, <8 x float> <float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000>, <8 x float> %5) #7
  %48 = fadd <8 x float> %38, %46
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %48, %49
  %51 = fsub <8 x float> %38, %50
  %52 = fsub <8 x float> %46, %49
  %53 = fadd <8 x float> %52, %51
  %54 = fadd <8 x float> %41, %47
  %55 = fadd <8 x float> %54, %53
  %56 = fmul <8 x float> %17, %48
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %17, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %17, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %18, <8 x float> %59) #7
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000>, <8 x float> <float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000>, <8 x float> %7) #7
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000>, <8 x float> <float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000>, <8 x float> %7) #7
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %61, <8 x float> <float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000>, <8 x float> %6) #7
  %64 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %62, <8 x float> <float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000>, <8 x float> %6) #7
  %65 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000>, <8 x float> %5) #7
  %66 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000>, <8 x float> %5) #7
  %67 = fadd <8 x float> %56, %65
  %68 = fsub <8 x float> %67, %56
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %56, %69
  %71 = fsub <8 x float> %65, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %60, %66
  %74 = fadd <8 x float> %73, %72
  %75 = fmul <8 x float> %17, %67
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %17, <8 x float> %76) #7
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %17, <8 x float> %77) #7
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %18, <8 x float> %78) #7
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000>, <8 x float> <float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000>, <8 x float> %7) #7
  %81 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000>, <8 x float> <float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000>, <8 x float> %7) #7
  %82 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000>, <8 x float> %6) #7
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %81, <8 x float> <float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000>, <8 x float> %6) #7
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> <float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000>, <8 x float> %5) #7
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %83, <8 x float> <float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000>, <8 x float> %5) #7
  %86 = fadd <8 x float> %75, %84
  %87 = fsub <8 x float> %86, %75
  %88 = fsub <8 x float> %86, %87
  %89 = fsub <8 x float> %75, %88
  %90 = fsub <8 x float> %84, %87
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %79, %85
  %93 = fadd <8 x float> %92, %91
  %94 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %95, <8 x float> %86, <8 x float> %6) #7
  %97 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %93, <8 x float> %6) #7
  %98 = fmul <8 x float> %96, %4
  %99 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %98
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %4, <8 x float> %99) #7
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %4, <8 x float> %100) #7
  %102 = fadd <8 x float> %86, %98
  %103 = fsub <8 x float> %102, %98
  %104 = fsub <8 x float> %102, %103
  %105 = fsub <8 x float> %98, %104
  %106 = fsub <8 x float> %86, %103
  %107 = fadd <8 x float> %106, %105
  %108 = fadd <8 x float> %101, %93
  %109 = fadd <8 x float> %108, %107
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> %98, <8 x float> %6) #7
  %111 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %101, <8 x float> %6) #7
  %112 = fadd <8 x float> %110, %111
  %113 = fmul <8 x float> %112, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %114 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %113) #7
  %115 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %114) #7
  %116 = fmul <8 x float> %115, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %117 = fadd <8 x float> %110, %116
  %118 = fsub <8 x float> %117, %110
  %119 = fsub <8 x float> %117, %118
  %120 = fsub <8 x float> %110, %119
  %121 = fsub <8 x float> %116, %118
  %122 = fadd <8 x float> %121, %120
  %123 = fadd <8 x float> %111, %122
  %124 = fmul <8 x float> %115, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %125 = fadd <8 x float> %124, %117
  %126 = fsub <8 x float> %125, %117
  %127 = fsub <8 x float> %125, %126
  %128 = fsub <8 x float> %117, %127
  %129 = fsub <8 x float> %124, %126
  %130 = fadd <8 x float> %129, %128
  %131 = fadd <8 x float> %130, %123
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %125, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %133 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %132, <8 x float> %125, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %134 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %133, <8 x float> %125, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %135 = fmul <8 x float> %125, %134
  %136 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %135
  %137 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %134, <8 x float> %136) #7
  %138 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %134, <8 x float> %137) #7
  %139 = fadd <8 x float> %135, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %140 = fsub <8 x float> %139, %135
  %141 = fsub <8 x float> %139, %140
  %142 = fsub <8 x float> %135, %141
  %143 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %140
  %144 = fadd <8 x float> %143, %142
  %145 = fadd <8 x float> %138, %144
  %146 = fmul <8 x float> %125, %139
  %147 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %146
  %148 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %139, <8 x float> %147) #7
  %149 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %131, <8 x float> %139, <8 x float> %148) #7
  %150 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %145, <8 x float> %149) #7
  %151 = fadd <8 x float> %146, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %152 = fsub <8 x float> %151, %146
  %153 = fsub <8 x float> %151, %152
  %154 = fsub <8 x float> %146, %153
  %155 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %152
  %156 = fadd <8 x float> %155, %154
  %157 = fadd <8 x float> %150, %156
  %158 = fmul <8 x float> %125, %125
  %159 = fadd <8 x float> %125, %125
  %160 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %158
  %161 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %125, <8 x float> %125, <8 x float> %160) #7
  %162 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %159, <8 x float> %131, <8 x float> %161) #7
  %163 = fmul <8 x float> %158, %151
  %164 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %163
  %165 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %151, <8 x float> %164) #7
  %166 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %162, <8 x float> %151, <8 x float> %165) #7
  %167 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %158, <8 x float> %157, <8 x float> %166) #7
  %168 = fadd <8 x float> %125, %163
  %169 = fsub <8 x float> %168, %125
  %170 = fsub <8 x float> %168, %169
  %171 = fsub <8 x float> %125, %170
  %172 = fsub <8 x float> %163, %169
  %173 = fadd <8 x float> %172, %171
  %174 = fadd <8 x float> %131, %167
  %175 = fadd <8 x float> %173, %174
  %176 = fadd <8 x float> %168, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %177 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %176
  %178 = fadd <8 x float> %168, %177
  %179 = fadd <8 x float> %178, %175
  %180 = ashr <8 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %181 = shl <8 x i32> %180, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %182 = add <8 x i32> %181, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %183 = bitcast <8 x i32> %182 to <8 x float>
  %184 = fmul <8 x float> %176, %183
  %185 = sub <8 x i32> %114, %180
  %186 = shl <8 x i32> %185, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %187 = add <8 x i32> %186, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %188 = bitcast <8 x i32> %187 to <8 x float>
  %189 = fmul <8 x float> %184, %188
  %190 = fmul <8 x float> %179, %183
  %191 = fmul <8 x float> %190, %188
  %192 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %110, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %193 = bitcast <8 x float> %192 to <4 x i64>
  %194 = bitcast <8 x float> %189 to <4 x i64>
  %195 = xor <4 x i64> %193, <i64 -1, i64 -1, i64 -1, i64 -1>
  %196 = and <4 x i64> %195, %194
  %197 = bitcast <8 x float> %191 to <4 x i64>
  %198 = and <4 x i64> %197, %195
  %199 = bitcast <4 x i64> %196 to <8 x float>
  %200 = bitcast <4 x i64> %198 to <8 x float>
  %201 = fmul <8 x float> %17, %199
  %202 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %201
  %203 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %199, <8 x float> %17, <8 x float> %202) #7
  %204 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %200, <8 x float> %17, <8 x float> %203) #7
  %205 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %199, <8 x float> %18, <8 x float> %204) #7
  %206 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %201, <8 x float> %199, <8 x float> %6) #7
  %207 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %205, <8 x float> %200, <8 x float> %6) #7
  %208 = fadd <8 x float> %206, %207
  %209 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %208, <8 x float> %8) #7
  %210 = bitcast <8 x float> %0 to <8 x i32>
  %211 = ashr <8 x i32> %210, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %212 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %209
  %213 = bitcast <8 x i32> %211 to <8 x float>
  %214 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %209, <8 x float> %212, <8 x float> %213) #7
  %215 = fcmp uno <8 x float> %0, zeroinitializer
  %216 = sext <8 x i1> %215 to <8 x i32>
  %217 = bitcast <8 x i32> %216 to <8 x float>
  %218 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %214, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %217) #7
  ret <8 x float> %218
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospif8_u05avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #7
  %5 = lshr <8 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <8 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <8 x i32> %6, %4
  %8 = and <8 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %8) #7
  %10 = fsub <8 x float> %3, %9
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> %11, <8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %11, <8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>) #7
  %16 = fmul <8 x float> %11, %15
  %17 = fadd <8 x float> %16, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %18 = fsub <8 x float> %17, %16
  %19 = fsub <8 x float> %17, %18
  %20 = fsub <8 x float> %16, %19
  %21 = fsub <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %18
  %22 = fadd <8 x float> %21, %20
  %23 = fadd <8 x float> %22, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %24 = fmul <8 x float> %11, %17
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %24
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %17, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %17, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %23, <8 x float> %27) #7
  %29 = fadd <8 x float> %24, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %30 = fsub <8 x float> %29, %24
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %24, %31
  %33 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %36 = fadd <8 x float> %35, %34
  %37 = fmul <8 x float> %10, %29
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %10, <8 x float> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %10, <8 x float> %39) #7
  %41 = fadd <8 x float> %37, %40
  %42 = bitcast <8 x float> %1 to <8 x i32>
  %43 = icmp eq <8 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %41, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %45) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %11, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>) #7
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %11, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>) #7
  %49 = fmul <8 x float> %11, %48
  %50 = fadd <8 x float> %49, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %51 = fsub <8 x float> %50, %49
  %52 = fsub <8 x float> %50, %51
  %53 = fsub <8 x float> %49, %52
  %54 = fsub <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %51
  %55 = fadd <8 x float> %54, %53
  %56 = fadd <8 x float> %55, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %57 = fmul <8 x float> %11, %50
  %58 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %57
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %50, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %50, <8 x float> %59) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %56, <8 x float> %60) #7
  %62 = fadd <8 x float> %57, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %63 = fsub <8 x float> %62, %57
  %64 = fsub <8 x float> %62, %63
  %65 = fsub <8 x float> %57, %64
  %66 = fsub <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %63
  %67 = fadd <8 x float> %66, %65
  %68 = fadd <8 x float> %61, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %69 = fadd <8 x float> %68, %67
  %70 = fmul <8 x float> %11, %62
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %70
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %11, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %11, <8 x float> %72) #7
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %13, <8 x float> %73) #7
  %75 = fadd <8 x float> %70, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %76 = fsub <8 x float> %75, %70
  %77 = fsub <8 x float> %75, %76
  %78 = fsub <8 x float> %70, %77
  %79 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %76
  %80 = fadd <8 x float> %79, %78
  %81 = fadd <8 x float> %74, %80
  %82 = fadd <8 x float> %75, %81
  %83 = and <8 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %84 = icmp eq <8 x i32> %83, zeroinitializer
  %85 = sext <8 x i1> %84 to <8 x i32>
  %86 = bitcast <8 x i32> %85 to <8 x float>
  %87 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %82, <8 x float> %46, <8 x float> %86) #7
  %88 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %82, <8 x float> %86) #7
  %89 = and <8 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %90 = icmp ne <8 x i32> %89, zeroinitializer
  %91 = sext <8 x i1> %90 to <8 x i32>
  %92 = bitcast <8 x i32> %91 to <4 x i64>
  %93 = and <4 x i64> %92, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = bitcast <8 x float> %87 to <4 x i64>
  %95 = xor <4 x i64> %93, %94
  %96 = add <8 x i32> %8, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %97 = and <8 x i32> %96, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %98 = icmp ne <8 x i32> %97, zeroinitializer
  %99 = sext <8 x i1> %98 to <8 x i32>
  %100 = bitcast <8 x i32> %99 to <4 x i64>
  %101 = and <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %88 to <4 x i64>
  %103 = xor <4 x i64> %101, %102
  %104 = bitcast <8 x float> %1 to <4 x i64>
  %105 = and <4 x i64> %104, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %106, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = xor <4 x i64> %108, <i64 -1, i64 -1, i64 -1, i64 -1>
  %110 = and <4 x i64> %95, %109
  %111 = and <4 x i64> %103, %109
  %112 = fcmp oeq <8 x float> %106, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %113 = sext <8 x i1> %112 to <8 x i32>
  %114 = bitcast <8 x i32> %113 to <4 x i64>
  %115 = or <4 x i64> %110, %114
  %116 = or <4 x i64> %111, %114
  %117 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %115, <4 x i64>* %117, align 32, !alias.scope !27
  %118 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %119 = bitcast <8 x float>* %118 to <4 x i64>*
  store <4 x i64> %116, <4 x i64>* %119, align 32, !alias.scope !27
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_sincospif8_u35avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = fmul <8 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %3) #7
  %5 = lshr <8 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <8 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <8 x i32> %6, %4
  %8 = and <8 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %8) #7
  %10 = fsub <8 x float> %3, %9
  %11 = fmul <8 x float> %10, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>, <8 x float> %11, <8 x float> <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %11, <8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %11, <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>) #7
  %15 = fmul <8 x float> %10, %14
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>, <8 x float> %11, <8 x float> <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %11, <8 x float> <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %11, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %20 = and <8 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %21 = icmp eq <8 x i32> %20, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %19, <8 x float> %15, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %19, <8 x float> %23) #7
  %26 = and <8 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %27 = icmp ne <8 x i32> %26, zeroinitializer
  %28 = sext <8 x i1> %27 to <8 x i32>
  %29 = bitcast <8 x i32> %28 to <4 x i64>
  %30 = and <4 x i64> %29, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <8 x float> %24 to <4 x i64>
  %32 = xor <4 x i64> %30, %31
  %33 = add <8 x i32> %8, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %34 = and <8 x i32> %33, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %35 = icmp ne <8 x i32> %34, zeroinitializer
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = and <4 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <8 x float> %25 to <4 x i64>
  %40 = xor <4 x i64> %38, %39
  %41 = bitcast <8 x float> %1 to <4 x i64>
  %42 = and <4 x i64> %41, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %43, <8 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i8 30) #7
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = xor <4 x i64> %45, <i64 -1, i64 -1, i64 -1, i64 -1>
  %47 = and <4 x i64> %32, %46
  %48 = and <4 x i64> %40, %46
  %49 = fcmp oeq <8 x float> %43, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %50 = sext <8 x i1> %49 to <8 x i32>
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = or <4 x i64> %47, %51
  %53 = or <4 x i64> %48, %51
  %54 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %52, <4 x i64>* %54, align 32, !alias.scope !30
  %55 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %56 = bitcast <8 x float>* %55 to <4 x i64>*
  store <4 x i64> %53, <4 x i64>* %56, align 32, !alias.scope !30
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_finz_modff8_avx2(%struct.vfloat2* noalias nocapture sret, <8 x float>) local_unnamed_addr #3 {
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = fsub <8 x float> %1, %4
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 30) #7
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> zeroinitializer, <8 x float> %9) #7
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %14 = or <4 x i64> %12, %13
  %15 = fsub <8 x float> %1, %10
  %16 = bitcast <8 x float> %15 to <4 x i64>
  %17 = and <4 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = or <4 x i64> %17, %13
  %19 = bitcast %struct.vfloat2* %0 to <4 x i64>*
  store <4 x i64> %14, <4 x i64>* %19, align 32, !alias.scope !33
  %20 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %21 = bitcast <8 x float>* %20 to <4 x i64>*
  store <4 x i64> %18, <4 x i64>* %21, align 32, !alias.scope !33
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <8 x i32>
  %3 = ashr <8 x i32> %2, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %4 = bitcast <8 x i32> %3 to <4 x i64>
  %5 = and <4 x i64> %4, <i64 8589934594, i64 8589934594, i64 8589934594, i64 8589934594>
  %6 = bitcast <8 x float> %0 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = bitcast <4 x i64> %5 to <8 x i32>
  %10 = add <8 x i32> %9, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, i8 17) #7
  %12 = bitcast <4 x i64> %5 to <32 x i8>
  %13 = bitcast <8 x i32> %10 to <32 x i8>
  %14 = bitcast <8 x float> %11 to <32 x i8>
  %15 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %12, <32 x i8> %13, <32 x i8> %14) #7
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %8
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %16, <8 x float> %11) #7
  %18 = fmul <8 x float> %17, %17
  %19 = fmul <8 x float> %18, %18
  %20 = fmul <8 x float> %19, %19
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #7
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %21, <8 x float> %22) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %24, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %23, <8 x float> %26) #7
  %28 = fmul <8 x float> %18, %27
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %28, <8 x float> %17) #7
  %30 = bitcast <32 x i8> %15 to <8 x i32>
  %31 = and <8 x i32> %30, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %32 = icmp ne <8 x i32> %31, zeroinitializer
  %33 = sext <8 x i1> %32 to <8 x i32>
  %34 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %29
  %35 = bitcast <8 x i32> %33 to <8 x float>
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %34, <8 x float> %35) #7
  %37 = and <8 x i32> %30, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %38 = icmp ne <8 x i32> %37, zeroinitializer
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <4 x i64>
  %41 = and <4 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <8 x float> %36 to <4 x i64>
  %43 = xor <4 x i64> %41, %42
  %44 = bitcast <4 x i64> %43 to <8 x float>
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atan2f8_u35avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <8 x i32>
  %7 = ashr <8 x i32> %6, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -4294967298, i64 -4294967298, i64 -4294967298, i64 -4294967298>
  %10 = bitcast <8 x float> %1 to <4 x i64>
  %11 = and <4 x i64> %10, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = bitcast <4 x i64> %9 to <8 x i32>
  %14 = add <8 x i32> %13, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %12, <8 x float> %5, i8 17) #7
  %16 = bitcast <4 x i64> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %14 to <32 x i8>
  %18 = bitcast <8 x float> %15 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = or <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %21, <8 x float> %15) #7
  %23 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %12, <8 x float> %5) #7
  %24 = fdiv <8 x float> %22, %23
  %25 = fmul <8 x float> %24, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fmul <8 x float> %26, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>, <8 x float> <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>, <8 x float> <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %28, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>, <8 x float> <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>) #7
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>, <8 x float> <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>) #7
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %31, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #7
  %35 = fmul <8 x float> %25, %34
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %35, <8 x float> %24) #7
  %37 = bitcast <32 x i8> %19 to <8 x i32>
  %38 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %36) #7
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = xor <4 x i64> %41, %40
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = fcmp oeq <8 x float> %12, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <4 x i64>
  %47 = fcmp oeq <8 x float> %1, zeroinitializer
  %48 = or <8 x i1> %44, %47
  %49 = sext <8 x i1> %48 to <8 x i32>
  %50 = or <4 x i64> %41, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %51 = and <4 x i64> %50, %46
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %52
  %54 = bitcast <8 x i32> %49 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> %53, <8 x float> %54) #7
  %56 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = or <4 x i64> %41, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %59 = and <4 x i64> %58, %46
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %55, <8 x float> %61, <8 x float> %62) #7
  %64 = fcmp oeq <8 x float> %0, zeroinitializer
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = and <4 x i64> %8, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %67 = bitcast <4 x i64> %66 to <8 x float>
  %68 = bitcast <8 x i32> %65 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> %67, <8 x float> %68) #7
  %70 = fcmp uno <8 x float> %0, %1
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <4 x i64>
  %73 = bitcast <8 x float> %69 to <4 x i64>
  %74 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %75 = xor <4 x i64> %74, %73
  %76 = or <4 x i64> %75, %72
  %77 = bitcast <4 x i64> %76 to <8 x float>
  ret <8 x float> %77
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %4, <8 x float> %5) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %16 = fmul <8 x float> %9, %11
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %16, <8 x float> %11) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> %17, <8 x float> %5) #7
  %20 = bitcast <8 x float> %19 to <4 x i64>
  %21 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = xor <4 x i64> %21, %20
  %23 = bitcast <4 x i64> %22 to <8 x float>
  ret <8 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acosf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #7
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %5) #7
  %13 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = sext <8 x i1> %13 to <8 x i32>
  %15 = bitcast <8 x i32> %14 to <8 x float>
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %21 = fmul <8 x float> %10, %16
  %22 = fmul <8 x float> %21, %20
  %23 = bitcast <8 x float> %16 to <4 x i64>
  %24 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %25 = xor <4 x i64> %24, %23
  %26 = bitcast <4 x i64> %25 to <8 x float>
  %27 = bitcast <8 x float> %22 to <4 x i64>
  %28 = xor <4 x i64> %24, %27
  %29 = bitcast <4 x i64> %28 to <8 x float>
  %30 = fadd <8 x float> %26, %29
  %31 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %30
  %32 = fadd <8 x float> %16, %22
  %33 = fmul <8 x float> %32, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> %31, <8 x float> %5) #7
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %38 = and <4 x i64> %36, %37
  %39 = bitcast <8 x float> %34 to <4 x i64>
  %40 = xor <4 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = fadd <8 x float> %41, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %43 = bitcast <4 x i64> %38 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> %42, <8 x float> %43) #7
  ret <8 x float> %44
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atan2f8_u10avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %1 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i8 17) #7
  %7 = fmul <8 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %1, <8 x float> %7, <8 x float> %6) #7
  %9 = fmul <8 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %9, <8 x float> %6) #7
  %11 = bitcast <8 x float> %10 to <4 x i64>
  %12 = and <4 x i64> %11, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> zeroinitializer, i8 17) #7
  %15 = bitcast <8 x float> %14 to <32 x i8>
  %16 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> zeroinitializer, <32 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <32 x i8> %15) #7
  %17 = bitcast <8 x float> %14 to <4 x i64>
  %18 = and <4 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x float> %8 to <4 x i64>
  %20 = xor <4 x i64> %18, %19
  %21 = bitcast <4 x i64> %20 to <8 x float>
  %22 = bitcast <4 x i64> %18 to <8 x float>
  %23 = bitcast <32 x i8> %16 to <8 x i32>
  %24 = add <8 x i32> %23, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %21, <8 x float> %13, i8 17) #7
  %26 = bitcast <8 x i32> %24 to <32 x i8>
  %27 = bitcast <8 x float> %25 to <32 x i8>
  %28 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %26, <32 x i8> %27) #7
  %29 = xor <4 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <4 x i64> %29 to <8 x float>
  %32 = bitcast <4 x i64> %30 to <8 x float>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %25) #7
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %32, <8 x float> %25) #7
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %21, <8 x float> %13, <8 x float> %25) #7
  %36 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> zeroinitializer, <8 x float> %25) #7
  %37 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %38 = fmul <8 x float> %33, %37
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> %33, <8 x float> %39) #7
  %41 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %35
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %37, <8 x float> %42) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %37, <8 x float> %40) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %44, <8 x float> %45) #7
  %47 = fmul <8 x float> %38, %38
  %48 = fadd <8 x float> %38, %38
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %46, <8 x float> %50) #7
  %52 = fadd <8 x float> %47, %51
  %53 = fsub <8 x float> %47, %52
  %54 = fadd <8 x float> %51, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %52, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %52, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %52, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %52, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %52, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %52, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %52, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #7
  %62 = fmul <8 x float> %52, %61
  %63 = fadd <8 x float> %62, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %64 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %63
  %65 = fadd <8 x float> %62, %64
  %66 = fmul <8 x float> %52, %63
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %63, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %63, <8 x float> %68) #7
  %70 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %65, <8 x float> %69) #7
  %71 = fadd <8 x float> %66, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %72 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %71
  %73 = fadd <8 x float> %66, %72
  %74 = fadd <8 x float> %70, %73
  %75 = fmul <8 x float> %38, %71
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %71, <8 x float> %76) #7
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %71, <8 x float> %77) #7
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %74, <8 x float> %78) #7
  %80 = bitcast <32 x i8> %28 to <8 x i32>
  %81 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %80) #7
  %82 = fmul <8 x float> %81, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %81, <8 x float> %83) #7
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %81, <8 x float> %84) #7
  %86 = fadd <8 x float> %75, %82
  %87 = fsub <8 x float> %82, %86
  %88 = fadd <8 x float> %75, %87
  %89 = fadd <8 x float> %85, %88
  %90 = fadd <8 x float> %79, %89
  %91 = fadd <8 x float> %86, %90
  %92 = bitcast <8 x float> %91 to <4 x i64>
  %93 = and <4 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = xor <4 x i64> %93, %92
  %95 = bitcast <4 x i64> %94 to <8 x float>
  %96 = and <4 x i64> %19, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %97 = bitcast <4 x i64> %96 to <8 x float>
  %98 = fcmp oeq <8 x float> %97, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %99 = sext <8 x i1> %98 to <8 x i32>
  %100 = bitcast <8 x i32> %99 to <4 x i64>
  %101 = fcmp oeq <8 x float> %8, zeroinitializer
  %102 = or <8 x i1> %98, %101
  %103 = sext <8 x i1> %102 to <8 x i32>
  %104 = or <4 x i64> %93, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %105 = and <4 x i64> %104, %100
  %106 = bitcast <4 x i64> %105 to <8 x float>
  %107 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %106
  %108 = bitcast <8 x i32> %103 to <8 x float>
  %109 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %95, <8 x float> %107, <8 x float> %108) #7
  %110 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %111 = sext <8 x i1> %110 to <8 x i32>
  %112 = or <4 x i64> %93, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %113 = and <4 x i64> %112, %100
  %114 = bitcast <4 x i64> %113 to <8 x float>
  %115 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %114
  %116 = bitcast <8 x i32> %111 to <8 x float>
  %117 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %109, <8 x float> %115, <8 x float> %116) #7
  %118 = fcmp oeq <8 x float> %10, zeroinitializer
  %119 = sext <8 x i1> %118 to <8 x i32>
  %120 = bitcast <8 x float> %8 to <8 x i32>
  %121 = ashr <8 x i32> %120, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = and <4 x i64> %122, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %124 = bitcast <4 x i64> %123 to <8 x float>
  %125 = bitcast <8 x i32> %119 to <8 x float>
  %126 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %117, <8 x float> %124, <8 x float> %125) #7
  %127 = fcmp uno <8 x float> %10, %8
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = bitcast <8 x float> %126 to <4 x i64>
  %131 = and <4 x i64> %11, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = xor <4 x i64> %131, %130
  %133 = or <4 x i64> %132, %129
  %134 = bitcast <4 x i64> %133 to <8 x float>
  ret <8 x float> %134
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = fmul <8 x float> %0, %0
  %7 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <8 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %9) #7
  %11 = fmul <8 x float> %10, %10
  %12 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %12) #7
  %14 = fadd <8 x float> %9, %11
  %15 = fsub <8 x float> %14, %9
  %16 = fsub <8 x float> %14, %15
  %17 = fsub <8 x float> %9, %16
  %18 = fsub <8 x float> %11, %15
  %19 = fadd <8 x float> %18, %17
  %20 = fadd <8 x float> %13, %19
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %10
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %14
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %21, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %24, <8 x float> %28) #7
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> %4, <8 x float> %5) #7
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> zeroinitializer, <8 x float> %5) #7
  %34 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %9, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %9, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %9, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %9, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %43 = fmul <8 x float> %9, %37
  %44 = fmul <8 x float> %43, %42
  %45 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %37
  %46 = fsub <8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %45
  %47 = fsub <8 x float> %46, %37
  %48 = fadd <8 x float> %47, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %49 = fsub <8 x float> %48, %38
  %50 = fsub <8 x float> %45, %44
  %51 = fsub <8 x float> %45, %50
  %52 = fsub <8 x float> %51, %44
  %53 = fadd <8 x float> %49, %52
  %54 = fadd <8 x float> %37, %44
  %55 = fadd <8 x float> %50, %53
  %56 = fmul <8 x float> %55, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %57 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %5) #7
  %58 = bitcast <8 x float> %57 to <4 x i64>
  %59 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = xor <4 x i64> %59, %58
  %61 = bitcast <4 x i64> %60 to <8 x float>
  ret <8 x float> %61
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acosf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i8 17) #7
  %6 = bitcast <8 x float> %5 to <4 x i64>
  %7 = fmul <8 x float> %0, %0
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %9 = fmul <8 x float> %8, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %7, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %10) #7
  %12 = fmul <8 x float> %11, %11
  %13 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> %13) #7
  %15 = fadd <8 x float> %10, %12
  %16 = fsub <8 x float> %15, %10
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %10, %17
  %19 = fsub <8 x float> %12, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %14, %20
  %22 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %11
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %25 = fmul <8 x float> %22, %24
  %26 = fmul <8 x float> %22, %15
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %22, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %22, <8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %29) #7
  %31 = fmul <8 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fmul <8 x float> %30, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %4, <8 x float> %5) #7
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %5) #7
  %35 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> zeroinitializer, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>, <8 x float> %10, <8 x float> <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %40, <8 x float> %10, <8 x float> <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %10, <8 x float> <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %10, <8 x float> <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>) #7
  %44 = fmul <8 x float> %10, %38
  %45 = fmul <8 x float> %44, %43
  %46 = bitcast <8 x float> %38 to <4 x i64>
  %47 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %46
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %45 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = fadd <8 x float> %49, %52
  %54 = fsub <8 x float> %49, %53
  %55 = fadd <8 x float> %54, %52
  %56 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %57 = fsub <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %56
  %58 = fsub <8 x float> %57, %53
  %59 = fadd <8 x float> %58, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %60 = fsub <8 x float> %59, %55
  %61 = fadd <8 x float> %38, %45
  %62 = fsub <8 x float> %38, %61
  %63 = fadd <8 x float> %45, %62
  %64 = fadd <8 x float> %39, %63
  %65 = fmul <8 x float> %61, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %66 = fmul <8 x float> %64, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %56, <8 x float> %5) #7
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %66, <8 x float> %60, <8 x float> %5) #7
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = xor <4 x i64> %6, <i64 -1, i64 -1, i64 -1, i64 -1>
  %72 = and <4 x i64> %70, %71
  %73 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %67
  %74 = fsub <8 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %73
  %75 = fsub <8 x float> %74, %67
  %76 = fadd <8 x float> %75, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %77 = fsub <8 x float> %76, %68
  %78 = bitcast <4 x i64> %72 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> %73, <8 x float> %78) #7
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> %77, <8 x float> %78) #7
  %81 = fadd <8 x float> %79, %80
  ret <8 x float> %81
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, i8 17) #7
  %6 = bitcast <8 x float> %5 to <32 x i8>
  %7 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> zeroinitializer, <32 x i8> <i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1, i8 -2, i8 -1, i8 -1, i8 -1>, <32 x i8> %6) #7
  %8 = bitcast <8 x float> %5 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %10 = or <4 x i64> %9, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = bitcast <4 x i64> %9 to <8 x float>
  %13 = bitcast <32 x i8> %7 to <8 x i32>
  %14 = add <8 x i32> %13, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %4, i8 17) #7
  %16 = bitcast <8 x i32> %14 to <32 x i8>
  %17 = bitcast <8 x float> %15 to <32 x i8>
  %18 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %7, <32 x i8> %16, <32 x i8> %17) #7
  %19 = xor <4 x i64> %9, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %20 = xor <4 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = bitcast <4 x i64> %19 to <8 x float>
  %22 = bitcast <4 x i64> %20 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %21, <8 x float> %15) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %22, <8 x float> %15) #7
  %25 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %4, <8 x float> %15) #7
  %26 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> zeroinitializer, <8 x float> %15) #7
  %27 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %28 = fmul <8 x float> %23, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %23, <8 x float> %29) #7
  %31 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %32 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %27, <8 x float> %32) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %34, <8 x float> %35) #7
  %37 = fmul <8 x float> %28, %28
  %38 = fadd <8 x float> %28, %28
  %39 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %28, <8 x float> %39) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %36, <8 x float> %40) #7
  %42 = fadd <8 x float> %37, %41
  %43 = fsub <8 x float> %37, %42
  %44 = fadd <8 x float> %41, %43
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>, <8 x float> %42, <8 x float> <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %42, <8 x float> <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %42, <8 x float> <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>) #7
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %42, <8 x float> <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>) #7
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %42, <8 x float> <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %42, <8 x float> <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %42, <8 x float> <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>) #7
  %52 = fmul <8 x float> %42, %51
  %53 = fadd <8 x float> %52, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %54 = fsub <8 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %53
  %55 = fadd <8 x float> %52, %54
  %56 = fmul <8 x float> %42, %53
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %53, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %55, <8 x float> %59) #7
  %61 = fadd <8 x float> %56, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %62 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %61
  %63 = fadd <8 x float> %56, %62
  %64 = fadd <8 x float> %60, %63
  %65 = fmul <8 x float> %28, %61
  %66 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %65
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %61, <8 x float> %66) #7
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %61, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %64, <8 x float> %68) #7
  %70 = bitcast <32 x i8> %18 to <8 x i32>
  %71 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %70) #7
  %72 = fmul <8 x float> %71, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %73 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %72
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %71, <8 x float> %73) #7
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>, <8 x float> %71, <8 x float> %74) #7
  %76 = fadd <8 x float> %65, %72
  %77 = fsub <8 x float> %72, %76
  %78 = fadd <8 x float> %65, %77
  %79 = fadd <8 x float> %75, %78
  %80 = fadd <8 x float> %69, %79
  %81 = fadd <8 x float> %76, %80
  %82 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %83 = sext <8 x i1> %82 to <8 x i32>
  %84 = bitcast <8 x i32> %83 to <8 x float>
  %85 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %81, <8 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <8 x float> %84) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %88 = xor <4 x i64> %87, %86
  %89 = bitcast <4 x i64> %88 to <8 x float>
  ret <8 x float> %89
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_logf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fdiv <8 x float> %20, %21
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %23, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %23, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %23, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %23, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #7
  %28 = bitcast <32 x i8> %19 to <8 x i32>
  %29 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %28) #7
  %30 = fmul <8 x float> %29, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %27, <8 x float> %30) #7
  %32 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %33 = sext <8 x i1> %32 to <8 x i32>
  %34 = bitcast <8 x i32> %33 to <8 x float>
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %37 = bitcast <8 x float> %36 to <4 x i64>
  %38 = fcmp uno <8 x float> %4, zeroinitializer
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = bitcast <8 x i32> %39 to <4 x i64>
  %41 = or <4 x i64> %37, %40
  %42 = bitcast <4 x i64> %41 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %42) #7
  %44 = fcmp oeq <8 x float> %4, zeroinitializer
  %45 = sext <8 x i1> %44 to <8 x i32>
  %46 = bitcast <8 x i32> %45 to <8 x float>
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %46) #7
  ret <8 x float> %47
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_expf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %4, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %4, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %6, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %12 = fmul <8 x float> %6, %6
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %11, <8 x float> %6) #7
  %14 = fadd <8 x float> %13, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = shl <8 x i32> %15, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %17 = add <8 x i32> %16, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = fmul <8 x float> %14, %18
  %20 = sub <8 x i32> %3, %15
  %21 = shl <8 x i32> %20, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %22 = add <8 x i32> %21, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = fmul <8 x float> %19, %23
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = bitcast <8 x float> %24 to <4 x i64>
  %28 = xor <4 x i64> %26, <i64 -1, i64 -1, i64 -1, i64 -1>
  %29 = and <4 x i64> %27, %28
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %0, i8 17) #7
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %31) #7
  ret <8 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cbrtf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %6 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = bitcast <8 x float> %5 to <32 x i8>
  %11 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %10) #7
  %12 = and <8 x i32> %9, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = bitcast <32 x i8> %11 to <8 x i32>
  %14 = sub <8 x i32> %12, %13
  %15 = add <8 x i32> %14, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = xor <8 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = ashr <8 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <8 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <8 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = fmul <8 x float> %20, %0
  %22 = sub <8 x i32> %16, %17
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #7
  %28 = fadd <8 x float> %27, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %29 = fmul <8 x float> %28, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #7
  %32 = fmul <8 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fsub <8 x float> %28, %32
  %34 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %33) #7
  %35 = icmp eq <8 x i32> %34, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %37) #7
  %39 = icmp eq <8 x i32> %34, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %41) #7
  %43 = add <8 x i32> %30, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %44 = ashr <8 x i32> %43, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %45 = shl <8 x i32> %44, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %46 = add <8 x i32> %45, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %47 = bitcast <8 x i32> %46 to <8 x float>
  %48 = fmul <8 x float> %42, %47
  %49 = sub <8 x i32> %43, %44
  %50 = shl <8 x i32> %49, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %51 = add <8 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <8 x i32> %51 to <8 x float>
  %53 = fmul <8 x float> %48, %52
  %54 = bitcast <8 x float> %53 to <4 x i64>
  %55 = bitcast <8 x float> %26 to <4 x i64>
  %56 = and <4 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = xor <4 x i64> %56, %54
  %58 = bitcast <4 x i64> %57 to <8 x float>
  %59 = and <4 x i64> %55, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %60, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %60, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #7
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %60, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #7
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %60, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #7
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %64, <8 x float> %60, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #7
  %66 = fmul <8 x float> %65, %60
  %67 = fmul <8 x float> %65, %66
  %68 = fmul <8 x float> %67, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %69 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %67, <8 x float> %65, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>) #7
  %70 = fmul <8 x float> %69, %68
  %71 = fsub <8 x float> %67, %70
  %72 = fmul <8 x float> %71, %58
  ret <8 x float> %72
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cbrtf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %6 = fmul <8 x float> %4, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <8 x i32>
  %9 = lshr <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = bitcast <8 x float> %5 to <32 x i8>
  %11 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %10) #7
  %12 = and <8 x i32> %9, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = bitcast <32 x i8> %11 to <8 x i32>
  %14 = sub <8 x i32> %12, %13
  %15 = add <8 x i32> %14, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %16 = xor <8 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = ashr <8 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <8 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <8 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = fmul <8 x float> %20, %0
  %22 = sub <8 x i32> %16, %17
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %15) #7
  %28 = fadd <8 x float> %27, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %29 = fmul <8 x float> %28, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %30) #7
  %32 = fmul <8 x float> %31, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %33 = fsub <8 x float> %28, %32
  %34 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %33) #7
  %35 = icmp eq <8 x i32> %34, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <8 x float> %37) #7
  %40 = icmp eq <8 x i32> %34, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <8 x float> %42) #7
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %39, <8 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <8 x float> %42) #7
  %45 = bitcast <8 x float> %43 to <4 x i64>
  %46 = bitcast <8 x float> %26 to <4 x i64>
  %47 = and <4 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = xor <4 x i64> %47, %45
  %49 = bitcast <4 x i64> %48 to <8 x float>
  %50 = bitcast <8 x float> %44 to <4 x i64>
  %51 = xor <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  %53 = and <4 x i64> %46, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %54 = bitcast <4 x i64> %53 to <8 x float>
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>, <8 x float> %54, <8 x float> <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %57, <8 x float> %54, <8 x float> <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %54, <8 x float> <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>) #7
  %60 = fmul <8 x float> %59, %59
  %61 = fmul <8 x float> %60, %60
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %62, <8 x float> %61, <8 x float> %59) #7
  %64 = fmul <8 x float> %63, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %65 = fsub <8 x float> %59, %64
  %66 = fmul <8 x float> %65, %65
  %67 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %66
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %65, <8 x float> %67) #7
  %69 = fmul <8 x float> %66, %66
  %70 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %71 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %66, <8 x float> %70) #7
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %68, <8 x float> %66, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %66, <8 x float> %68, <8 x float> %72) #7
  %74 = fmul <8 x float> %69, %54
  %75 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %74
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %54, <8 x float> %75) #7
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %54, <8 x float> %76) #7
  %78 = bitcast <8 x float> %65 to <4 x i64>
  %79 = xor <4 x i64> %78, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %80 = bitcast <4 x i64> %79 to <8 x float>
  %81 = fadd <8 x float> %74, %80
  %82 = fsub <8 x float> %81, %74
  %83 = fsub <8 x float> %81, %82
  %84 = fsub <8 x float> %74, %83
  %85 = fsub <8 x float> %80, %82
  %86 = fadd <8 x float> %85, %84
  %87 = fadd <8 x float> %77, %86
  %88 = fadd <8 x float> %81, %87
  %89 = fmul <8 x float> %88, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %90 = fmul <8 x float> %65, %89
  %91 = fadd <8 x float> %66, %90
  %92 = fsub <8 x float> %91, %66
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %66, %93
  %95 = fsub <8 x float> %90, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %68, %96
  %98 = fmul <8 x float> %91, %54
  %99 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %98
  %100 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %91, <8 x float> %54, <8 x float> %99) #7
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %54, <8 x float> %100) #7
  %102 = fmul <8 x float> %98, %49
  %103 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %102
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %49, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %101, <8 x float> %49, <8 x float> %104) #7
  %106 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %52, <8 x float> %105) #7
  %107 = fadd <8 x float> %106, %102
  %108 = add <8 x i32> %30, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %109 = ashr <8 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %110 = shl <8 x i32> %109, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %111 = add <8 x i32> %110, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %112 = bitcast <8 x i32> %111 to <8 x float>
  %113 = fmul <8 x float> %107, %112
  %114 = sub <8 x i32> %108, %109
  %115 = shl <8 x i32> %114, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %116 = add <8 x i32> %115, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %117 = bitcast <8 x i32> %116 to <8 x float>
  %118 = fmul <8 x float> %113, %117
  %119 = fcmp oeq <8 x float> %54, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %120 = sext <8 x i1> %119 to <8 x i32>
  %121 = and <4 x i64> %48, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = or <4 x i64> %121, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %123 = bitcast <4 x i64> %122 to <8 x float>
  %124 = bitcast <8 x i32> %120 to <8 x float>
  %125 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %118, <8 x float> %123, <8 x float> %124) #7
  %126 = fcmp oeq <8 x float> %54, zeroinitializer
  %127 = sext <8 x i1> %126 to <8 x i32>
  %128 = bitcast <4 x i64> %121 to <8 x float>
  %129 = bitcast <8 x i32> %127 to <8 x float>
  %130 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %125, <8 x float> %128, <8 x float> %129) #7
  ret <8 x float> %130
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_logf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = bitcast <32 x i8> %19 to <8 x i32>
  %21 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %20) #7
  %22 = fmul <8 x float> %21, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %21, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %21, <8 x float> %24) #7
  %26 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <8 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = fadd <8 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %36 = fsub <8 x float> %14, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %32
  %39 = fmul <8 x float> %26, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %26, <8 x float> %40) #7
  %42 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %38, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %44 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %37
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %38, <8 x float> %43) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %38, <8 x float> %41) #7
  %47 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %45, <8 x float> %46) #7
  %48 = fmul <8 x float> %39, %39
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %48, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %48, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #7
  %51 = fmul <8 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %52 = fmul <8 x float> %47, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %53 = fadd <8 x float> %22, %51
  %54 = fsub <8 x float> %22, %53
  %55 = fadd <8 x float> %51, %54
  %56 = fadd <8 x float> %25, %55
  %57 = fadd <8 x float> %52, %56
  %58 = fmul <8 x float> %39, %48
  %59 = fmul <8 x float> %50, %58
  %60 = fadd <8 x float> %53, %59
  %61 = fsub <8 x float> %53, %60
  %62 = fadd <8 x float> %59, %61
  %63 = fadd <8 x float> %62, %57
  %64 = fadd <8 x float> %60, %63
  %65 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = bitcast <8 x i32> %66 to <8 x float>
  %68 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %67) #7
  %69 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %70 = bitcast <8 x float> %69 to <4 x i64>
  %71 = fcmp uno <8 x float> %4, zeroinitializer
  %72 = sext <8 x i1> %71 to <8 x i32>
  %73 = bitcast <8 x i32> %72 to <4 x i64>
  %74 = or <4 x i64> %70, %73
  %75 = bitcast <4 x i64> %74 to <8 x float>
  %76 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %75) #7
  %77 = fcmp oeq <8 x float> %4, zeroinitializer
  %78 = sext <8 x i1> %77 to <8 x i32>
  %79 = bitcast <8 x i32> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %76, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %79) #7
  ret <8 x float> %80
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_powf8_u10avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = tail call <8 x float> @Sleef_powf8_u10avx2(<8 x float> %0, <8 x float> %1)
  ret <8 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = fsub <8 x float> %92, %94
  %101 = fsub <8 x float> %92, %100
  %102 = fsub <8 x float> %101, %94
  %103 = fadd <8 x float> %102, %93
  %104 = fsub <8 x float> %103, %99
  %105 = fadd <8 x float> %100, %104
  %106 = fmul <8 x float> %105, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = fcmp uno <8 x float> %106, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %108
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %113) #7
  %115 = bitcast <8 x float> %114 to <4 x i64>
  %116 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %117 = xor <4 x i64> %116, %115
  %118 = fcmp uno <8 x float> %0, zeroinitializer
  %119 = sext <8 x i1> %118 to <8 x i32>
  %120 = bitcast <8 x i32> %119 to <4 x i64>
  %121 = or <4 x i64> %117, %120
  %122 = bitcast <4 x i64> %121 to <8 x float>
  ret <8 x float> %122
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_coshf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = fadd <8 x float> %94, %92
  %101 = fsub <8 x float> %92, %100
  %102 = fadd <8 x float> %94, %101
  %103 = fadd <8 x float> %102, %93
  %104 = fadd <8 x float> %99, %103
  %105 = fadd <8 x float> %100, %104
  %106 = fmul <8 x float> %105, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %107 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i8 30) #7
  %108 = bitcast <8 x float> %107 to <4 x i64>
  %109 = fcmp uno <8 x float> %106, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %108
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %113) #7
  %115 = fcmp uno <8 x float> %0, zeroinitializer
  %116 = sext <8 x i1> %115 to <8 x i32>
  %117 = bitcast <8 x i32> %116 to <4 x i64>
  %118 = bitcast <8 x float> %114 to <4 x i64>
  %119 = or <4 x i64> %118, %117
  %120 = bitcast <4 x i64> %119 to <8 x float>
  ret <8 x float> %120
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_tanhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, zeroinitializer
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = fmul <8 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <8 x float> %9, %4
  %11 = fsub <8 x float> %10, %4
  %12 = fsub <8 x float> %10, %11
  %13 = fsub <8 x float> %4, %12
  %14 = fsub <8 x float> %9, %11
  %15 = fadd <8 x float> %14, %13
  %16 = fadd <8 x float> %15, zeroinitializer
  %17 = fmul <8 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <8 x float> %17, %10
  %19 = fsub <8 x float> %18, %10
  %20 = fsub <8 x float> %18, %19
  %21 = fsub <8 x float> %10, %20
  %22 = fsub <8 x float> %17, %19
  %23 = fadd <8 x float> %22, %21
  %24 = fadd <8 x float> %23, %16
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %18, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %18, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %18, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %28 = fmul <8 x float> %18, %27
  %29 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %28
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %27, <8 x float> %29) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %27, <8 x float> %30) #7
  %32 = fadd <8 x float> %28, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %33 = fsub <8 x float> %32, %28
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %28, %34
  %36 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %31, %37
  %39 = fmul <8 x float> %18, %32
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %32, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %32, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %38, <8 x float> %42) #7
  %44 = fadd <8 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fsub <8 x float> %44, %39
  %46 = fsub <8 x float> %44, %45
  %47 = fsub <8 x float> %39, %46
  %48 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %45
  %49 = fadd <8 x float> %48, %47
  %50 = fadd <8 x float> %43, %49
  %51 = fmul <8 x float> %18, %18
  %52 = fadd <8 x float> %18, %18
  %53 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %18, <8 x float> %18, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %24, <8 x float> %54) #7
  %56 = fmul <8 x float> %51, %44
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %56
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %44, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %44, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> %59) #7
  %61 = fadd <8 x float> %18, %56
  %62 = fsub <8 x float> %61, %18
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %18, %63
  %65 = fsub <8 x float> %56, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %24, %60
  %68 = fadd <8 x float> %66, %67
  %69 = fadd <8 x float> %61, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %70 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %69
  %71 = fadd <8 x float> %61, %70
  %72 = fadd <8 x float> %71, %68
  %73 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = shl <8 x i32> %73, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %75 = add <8 x i32> %74, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %69, %76
  %78 = sub <8 x i32> %7, %73
  %79 = shl <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = add <8 x i32> %79, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %81 = bitcast <8 x i32> %80 to <8 x float>
  %82 = fmul <8 x float> %77, %81
  %83 = fmul <8 x float> %72, %76
  %84 = fmul <8 x float> %83, %81
  %85 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %86 = bitcast <8 x float> %85 to <4 x i64>
  %87 = bitcast <8 x float> %82 to <4 x i64>
  %88 = xor <4 x i64> %86, <i64 -1, i64 -1, i64 -1, i64 -1>
  %89 = and <4 x i64> %88, %87
  %90 = bitcast <8 x float> %84 to <4 x i64>
  %91 = and <4 x i64> %90, %88
  %92 = bitcast <4 x i64> %89 to <8 x float>
  %93 = bitcast <4 x i64> %91 to <8 x float>
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %92
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %92
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %97 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %98 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %97, <8 x float> %94, <8 x float> %96) #7
  %99 = fmul <8 x float> %98, %94
  %100 = bitcast <8 x float> %94 to <4 x i64>
  %101 = xor <4 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x float> %99 to <4 x i64>
  %103 = xor <4 x i64> %102, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = bitcast <4 x i64> %101 to <8 x float>
  %105 = bitcast <4 x i64> %103 to <8 x float>
  %106 = fadd <8 x float> %92, %104
  %107 = fsub <8 x float> %92, %106
  %108 = fadd <8 x float> %107, %104
  %109 = fadd <8 x float> %108, %93
  %110 = fadd <8 x float> %109, %105
  %111 = fadd <8 x float> %94, %92
  %112 = fsub <8 x float> %92, %111
  %113 = fadd <8 x float> %94, %112
  %114 = fadd <8 x float> %113, %93
  %115 = fadd <8 x float> %99, %114
  %116 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %111
  %117 = fmul <8 x float> %116, %106
  %118 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %117
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %116, <8 x float> %106, <8 x float> %118) #7
  %120 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %111
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %120, <8 x float> %116, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %122 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %115
  %123 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %122, <8 x float> %116, <8 x float> %121) #7
  %124 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %116, <8 x float> %119) #7
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %117, <8 x float> %123, <8 x float> %124) #7
  %126 = fadd <8 x float> %125, %117
  %127 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #7
  %128 = bitcast <8 x float> %127 to <4 x i64>
  %129 = fcmp uno <8 x float> %126, zeroinitializer
  %130 = sext <8 x i1> %129 to <8 x i32>
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = or <4 x i64> %131, %128
  %133 = bitcast <4 x i64> %132 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %126, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %133) #7
  %135 = bitcast <8 x float> %134 to <4 x i64>
  %136 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %137 = xor <4 x i64> %136, %135
  %138 = fcmp uno <8 x float> %0, zeroinitializer
  %139 = sext <8 x i1> %138 to <8 x i32>
  %140 = bitcast <8 x i32> %139 to <4 x i64>
  %141 = or <4 x i64> %137, %140
  %142 = bitcast <4 x i64> %141 to <8 x float>
  ret <8 x float> %142
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinhf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #7
  %10 = fmul <8 x float> %9, %9
  %11 = fmul <8 x float> %10, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %13, <8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %12, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %16, <8 x float> %9) #7
  %18 = icmp eq <8 x i32> %6, zeroinitializer
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = fadd <8 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <8 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %22 = shl <8 x i32> %21, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %23 = add <8 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <8 x i32> %23 to <8 x float>
  %25 = fmul <8 x float> %20, %24
  %26 = sub <8 x i32> %6, %21
  %27 = shl <8 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <8 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <8 x i32> %28 to <8 x float>
  %30 = fmul <8 x float> %25, %29
  %31 = fadd <8 x float> %30, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %32 = bitcast <8 x i32> %19 to <8 x float>
  %33 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %31, <8 x float> %17, <8 x float> %32) #7
  %34 = fadd <8 x float> %33, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %35 = fadd <8 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fdiv <8 x float> %34, %35
  %37 = fmul <8 x float> %33, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %38 = fmul <8 x float> %37, %36
  %39 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #7
  %40 = bitcast <8 x float> %39 to <4 x i64>
  %41 = fcmp uno <8 x float> %38, zeroinitializer
  %42 = sext <8 x i1> %41 to <8 x i32>
  %43 = bitcast <8 x i32> %42 to <4 x i64>
  %44 = or <4 x i64> %43, %40
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %38, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %45) #7
  %47 = bitcast <8 x float> %46 to <4 x i64>
  %48 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = xor <4 x i64> %48, %47
  %50 = fcmp uno <8 x float> %0, zeroinitializer
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <4 x i64>
  %53 = or <4 x i64> %49, %52
  %54 = bitcast <4 x i64> %53 to <8 x float>
  ret <8 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_coshf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %6) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %4) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %9, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %9, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %9, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %9, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %15 = fmul <8 x float> %9, %9
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %14, <8 x float> %9) #7
  %17 = fadd <8 x float> %16, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = ashr <8 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %19 = shl <8 x i32> %18, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %20 = add <8 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = fmul <8 x float> %17, %21
  %23 = sub <8 x i32> %6, %18
  %24 = shl <8 x i32> %23, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %25 = add <8 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <8 x i32> %25 to <8 x float>
  %27 = fmul <8 x float> %22, %26
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = bitcast <8 x float> %27 to <4 x i64>
  %31 = xor <4 x i64> %29, <i64 -1, i64 -1, i64 -1, i64 -1>
  %32 = and <4 x i64> %30, %31
  %33 = bitcast <4 x i64> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <8 x float> %4, i8 17) #7
  %35 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %34) #7
  %36 = fdiv <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %35
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <8 x float> %35, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i8 30) #7
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = fcmp uno <8 x float> %37, zeroinitializer
  %41 = sext <8 x i1> %40 to <8 x i32>
  %42 = bitcast <8 x i32> %41 to <4 x i64>
  %43 = or <4 x i64> %42, %39
  %44 = bitcast <4 x i64> %43 to <8 x float>
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %37, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %44) #7
  %46 = fcmp uno <8 x float> %0, zeroinitializer
  %47 = sext <8 x i1> %46 to <8 x i32>
  %48 = bitcast <8 x i32> %47 to <4 x i64>
  %49 = bitcast <8 x float> %45 to <4 x i64>
  %50 = or <4 x i64> %49, %48
  %51 = bitcast <4 x i64> %50 to <8 x float>
  ret <8 x float> %51
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_tanhf8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fmul <8 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <8 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %6) #7
  %8 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %7) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %9) #7
  %11 = fmul <8 x float> %10, %10
  %12 = fmul <8 x float> %11, %11
  %13 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %14, <8 x float> %15) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %17, <8 x float> %10) #7
  %19 = icmp eq <8 x i32> %7, zeroinitializer
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = ashr <8 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %23 = shl <8 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <8 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = fmul <8 x float> %21, %25
  %27 = sub <8 x i32> %7, %22
  %28 = shl <8 x i32> %27, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %29 = add <8 x i32> %28, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = bitcast <8 x i32> %20 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> %18, <8 x float> %33) #7
  %35 = fadd <8 x float> %34, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %36 = fdiv <8 x float> %34, %35
  %37 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i8 30) #7
  %38 = bitcast <8 x float> %37 to <4 x i64>
  %39 = fcmp uno <8 x float> %36, zeroinitializer
  %40 = sext <8 x i1> %39 to <8 x i32>
  %41 = bitcast <8 x i32> %40 to <4 x i64>
  %42 = or <4 x i64> %41, %38
  %43 = bitcast <4 x i64> %42 to <8 x float>
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %43) #7
  %45 = bitcast <8 x float> %44 to <4 x i64>
  %46 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = xor <4 x i64> %46, %45
  %48 = fcmp uno <8 x float> %0, zeroinitializer
  %49 = sext <8 x i1> %48 to <8 x i32>
  %50 = bitcast <8 x i32> %49 to <4 x i64>
  %51 = or <4 x i64> %47, %50
  %52 = bitcast <4 x i64> %51 to <8 x float>
  ret <8 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_asinhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #7
  %6 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %7 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %0
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %9 = fmul <8 x float> %6, %8
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %9, <8 x float> %5) #7
  %12 = fmul <8 x float> %10, %10
  %13 = fadd <8 x float> %10, %10
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %12
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %10, <8 x float> %14) #7
  %16 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %11, <8 x float> %15) #7
  %17 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = fsub <8 x float> %17, %12
  %19 = fsub <8 x float> %17, %18
  %20 = fsub <8 x float> %12, %19
  %21 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %18
  %22 = fadd <8 x float> %21, %20
  %23 = fadd <8 x float> %16, %22
  %24 = fadd <8 x float> %17, %23
  %25 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %24) #7
  %26 = fmul <8 x float> %25, %25
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %25, <8 x float> %27) #7
  %29 = fadd <8 x float> %17, %26
  %30 = fsub <8 x float> %29, %17
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %17, %31
  %33 = fsub <8 x float> %26, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, %23
  %36 = fadd <8 x float> %35, %34
  %37 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %25
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %37, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %40 = fmul <8 x float> %37, %39
  %41 = fmul <8 x float> %37, %29
  %42 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %41
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %37, <8 x float> %42) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %37, <8 x float> %43) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %40, <8 x float> %44) #7
  %46 = fmul <8 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = fmul <8 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fmul <8 x float> %46, %4
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %48
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %4, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> %48, <8 x float> %5) #7
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %47, <8 x float> %51, <8 x float> %5) #7
  %54 = fadd <8 x float> %52, %0
  %55 = fsub <8 x float> %54, %52
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %52, %56
  %58 = fsub <8 x float> %0, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = fadd <8 x float> %54, %60
  %62 = fsub <8 x float> %54, %61
  %63 = fadd <8 x float> %60, %62
  %64 = fmul <8 x float> %61, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %65 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %64, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %66 = fmul <8 x float> %64, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %64, <8 x float> %66, <8 x float> %65) #7
  %68 = bitcast <8 x float> %67 to <8 x i32>
  %69 = lshr <8 x i32> %68, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %70 = bitcast <8 x float> %65 to <32 x i8>
  %71 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %70) #7
  %72 = and <8 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = bitcast <32 x i8> %71 to <8 x i32>
  %74 = sub <8 x i32> %72, %73
  %75 = shl <8 x i32> %74, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %76 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %75
  %77 = bitcast <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %61, %77
  %79 = fmul <8 x float> %63, %77
  %80 = fadd <8 x float> %78, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %81 = fsub <8 x float> %80, %78
  %82 = fsub <8 x float> %80, %81
  %83 = fsub <8 x float> %78, %82
  %84 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %81
  %85 = fadd <8 x float> %84, %83
  %86 = fadd <8 x float> %79, %85
  %87 = fadd <8 x float> %78, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = fsub <8 x float> %87, %78
  %89 = fsub <8 x float> %87, %88
  %90 = fsub <8 x float> %78, %89
  %91 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %88
  %92 = fadd <8 x float> %91, %90
  %93 = fadd <8 x float> %79, %92
  %94 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %87
  %95 = fmul <8 x float> %80, %94
  %96 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %95
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %94, <8 x float> %80, <8 x float> %96) #7
  %98 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %87
  %99 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %98, <8 x float> %94, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %100 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %101 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %100, <8 x float> %94, <8 x float> %99) #7
  %102 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %86, <8 x float> %94, <8 x float> %97) #7
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %101, <8 x float> %102) #7
  %104 = fmul <8 x float> %95, %95
  %105 = fadd <8 x float> %95, %95
  %106 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %104
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %95, <8 x float> %106) #7
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %103, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %104, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %110 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> %104, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %104, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %112 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %74) #7
  %113 = fmul <8 x float> %112, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %114 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %113
  %115 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %112, <8 x float> %114) #7
  %116 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %112, <8 x float> %115) #7
  %117 = fmul <8 x float> %95, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %118 = fmul <8 x float> %103, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %119 = fadd <8 x float> %117, %113
  %120 = fsub <8 x float> %113, %119
  %121 = fadd <8 x float> %117, %120
  %122 = fadd <8 x float> %116, %121
  %123 = fadd <8 x float> %118, %122
  %124 = fmul <8 x float> %95, %104
  %125 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %124
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %95, <8 x float> %125) #7
  %127 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %95, <8 x float> %126) #7
  %128 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %103, <8 x float> %127) #7
  %129 = fmul <8 x float> %111, %124
  %130 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %129
  %131 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %124, <8 x float> %111, <8 x float> %130) #7
  %132 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %128, <8 x float> %111, <8 x float> %131) #7
  %133 = fadd <8 x float> %119, %129
  %134 = fsub <8 x float> %119, %133
  %135 = fadd <8 x float> %129, %134
  %136 = fadd <8 x float> %135, %123
  %137 = fadd <8 x float> %136, %132
  %138 = fadd <8 x float> %133, %137
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = fcmp uno <8 x float> %138, zeroinitializer
  %142 = sext <8 x i1> %141 to <8 x i32>
  %143 = bitcast <8 x i32> %142 to <4 x i64>
  %144 = or <4 x i64> %143, %140
  %145 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %146 = or <4 x i64> %145, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %147 = bitcast <4 x i64> %146 to <8 x float>
  %148 = bitcast <4 x i64> %144 to <8 x float>
  %149 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %138, <8 x float> %147, <8 x float> %148) #7
  %150 = fcmp uno <8 x float> %0, zeroinitializer
  %151 = sext <8 x i1> %150 to <8 x i32>
  %152 = bitcast <8 x i32> %151 to <4 x i64>
  %153 = bitcast <8 x float> %149 to <4 x i64>
  %154 = or <4 x i64> %153, %152
  %155 = bitcast <4 x i64> %154 to <8 x float>
  %156 = bitcast <8 x float> %0 to <8 x i32>
  %157 = icmp eq <8 x i32> %156, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %158 = sext <8 x i1> %157 to <8 x i32>
  %159 = bitcast <8 x i32> %158 to <8 x float>
  %160 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %155, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %159) #7
  ret <8 x float> %160
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_acoshf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <8 x float> %2, %0
  %4 = fsub <8 x float> %2, %3
  %5 = fsub <8 x float> %0, %4
  %6 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <8 x float> %6, %5
  %8 = fadd <8 x float> %2, %7
  %9 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %8) #7
  %10 = fmul <8 x float> %9, %9
  %11 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %9, <8 x float> %11) #7
  %13 = fadd <8 x float> %2, %10
  %14 = fsub <8 x float> %13, %2
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %2, %15
  %17 = fsub <8 x float> %10, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %7, %12
  %20 = fadd <8 x float> %19, %18
  %21 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %22 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %9
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %21, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %24 = fmul <8 x float> %21, %23
  %25 = fmul <8 x float> %21, %13
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %21, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %21, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %24, <8 x float> %28) #7
  %30 = fmul <8 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %31 = fmul <8 x float> %29, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %32 = fadd <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = fsub <8 x float> %32, %0
  %34 = fsub <8 x float> %32, %33
  %35 = fsub <8 x float> %0, %34
  %36 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %33
  %37 = fadd <8 x float> %36, %35
  %38 = fadd <8 x float> %32, %37
  %39 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %38) #7
  %40 = fmul <8 x float> %39, %39
  %41 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %40
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %39, <8 x float> %41) #7
  %43 = fadd <8 x float> %32, %40
  %44 = fsub <8 x float> %43, %32
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> %32, %45
  %47 = fsub <8 x float> %40, %44
  %48 = fadd <8 x float> %47, %46
  %49 = fadd <8 x float> %37, %42
  %50 = fadd <8 x float> %49, %48
  %51 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %52 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %51, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %54 = fmul <8 x float> %51, %53
  %55 = fmul <8 x float> %51, %43
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %51, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %50, <8 x float> %51, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %54, <8 x float> %58) #7
  %60 = fmul <8 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %59, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %62 = fmul <8 x float> %30, %60
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %62
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %60, <8 x float> %63) #7
  %65 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %60, <8 x float> %64) #7
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %61, <8 x float> %65) #7
  %67 = fadd <8 x float> %62, %0
  %68 = fsub <8 x float> %67, %62
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> %62, %69
  %71 = fsub <8 x float> %0, %68
  %72 = fadd <8 x float> %71, %70
  %73 = fadd <8 x float> %66, %72
  %74 = fmul <8 x float> %67, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %75 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %74, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %76 = fmul <8 x float> %74, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> %76, <8 x float> %75) #7
  %78 = bitcast <8 x float> %77 to <8 x i32>
  %79 = lshr <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = bitcast <8 x float> %75 to <32 x i8>
  %81 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %80) #7
  %82 = and <8 x i32> %79, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = bitcast <32 x i8> %81 to <8 x i32>
  %84 = sub <8 x i32> %82, %83
  %85 = shl <8 x i32> %84, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %86 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %85
  %87 = bitcast <8 x i32> %86 to <8 x float>
  %88 = fmul <8 x float> %67, %87
  %89 = fmul <8 x float> %73, %87
  %90 = fadd <8 x float> %88, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %91 = fsub <8 x float> %90, %88
  %92 = fsub <8 x float> %90, %91
  %93 = fsub <8 x float> %88, %92
  %94 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %91
  %95 = fadd <8 x float> %94, %93
  %96 = fadd <8 x float> %89, %95
  %97 = fadd <8 x float> %88, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %98 = fsub <8 x float> %97, %88
  %99 = fsub <8 x float> %97, %98
  %100 = fsub <8 x float> %88, %99
  %101 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %98
  %102 = fadd <8 x float> %101, %100
  %103 = fadd <8 x float> %89, %102
  %104 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %97
  %105 = fmul <8 x float> %90, %104
  %106 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %105
  %107 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %104, <8 x float> %90, <8 x float> %106) #7
  %108 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %97
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %108, <8 x float> %104, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %110 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %103
  %111 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %110, <8 x float> %104, <8 x float> %109) #7
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %104, <8 x float> %107) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %111, <8 x float> %112) #7
  %114 = fmul <8 x float> %105, %105
  %115 = fadd <8 x float> %105, %105
  %116 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %114
  %117 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %105, <8 x float> %116) #7
  %118 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %115, <8 x float> %113, <8 x float> %117) #7
  %119 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %114, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %120 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %119, <8 x float> %114, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %121 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %120, <8 x float> %114, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %122 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %84) #7
  %123 = fmul <8 x float> %122, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %124 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %123
  %125 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %122, <8 x float> %124) #7
  %126 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %122, <8 x float> %125) #7
  %127 = fmul <8 x float> %105, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %128 = fmul <8 x float> %113, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %129 = fadd <8 x float> %127, %123
  %130 = fsub <8 x float> %123, %129
  %131 = fadd <8 x float> %127, %130
  %132 = fadd <8 x float> %126, %131
  %133 = fadd <8 x float> %128, %132
  %134 = fmul <8 x float> %105, %114
  %135 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %134
  %136 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %105, <8 x float> %135) #7
  %137 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %118, <8 x float> %105, <8 x float> %136) #7
  %138 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %114, <8 x float> %113, <8 x float> %137) #7
  %139 = fmul <8 x float> %121, %134
  %140 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %139
  %141 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %134, <8 x float> %121, <8 x float> %140) #7
  %142 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %138, <8 x float> %121, <8 x float> %141) #7
  %143 = fadd <8 x float> %129, %139
  %144 = fsub <8 x float> %129, %143
  %145 = fadd <8 x float> %139, %144
  %146 = fadd <8 x float> %145, %133
  %147 = fadd <8 x float> %146, %142
  %148 = fadd <8 x float> %143, %147
  %149 = bitcast <8 x float> %0 to <4 x i64>
  %150 = and <4 x i64> %149, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %151 = bitcast <4 x i64> %150 to <8 x float>
  %152 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %151, <8 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i8 30) #7
  %153 = bitcast <8 x float> %152 to <4 x i64>
  %154 = fcmp uno <8 x float> %148, zeroinitializer
  %155 = sext <8 x i1> %154 to <8 x i32>
  %156 = bitcast <8 x i32> %155 to <4 x i64>
  %157 = or <4 x i64> %156, %153
  %158 = bitcast <4 x i64> %157 to <8 x float>
  %159 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %148, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %158) #7
  %160 = fcmp oeq <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %161 = sext <8 x i1> %160 to <8 x i32>
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <8 x float> %159 to <4 x i64>
  %164 = xor <4 x i64> %162, <i64 -1, i64 -1, i64 -1, i64 -1>
  %165 = and <4 x i64> %163, %164
  %166 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 17) #7
  %167 = bitcast <8 x float> %166 to <4 x i64>
  %168 = fcmp uno <8 x float> %0, zeroinitializer
  %169 = sext <8 x i1> %168 to <8 x i32>
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = or <4 x i64> %167, %170
  %172 = or <4 x i64> %171, %165
  %173 = bitcast <4 x i64> %172 to <8 x float>
  ret <8 x float> %173
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_atanhf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <8 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <8 x float> %5, %6
  %8 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <8 x float> %4, %6
  %10 = fadd <8 x float> %9, %8
  %11 = or <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <4 x i64> %11 to <8 x float>
  %13 = fadd <8 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = fmul <8 x float> %5, %19
  %21 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %20
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %5, <8 x float> %21) #7
  %23 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %18
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %19, <8 x float> %24) #7
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %19, <8 x float> %22) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %26, <8 x float> %27) #7
  %29 = fmul <8 x float> %20, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %30 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %29, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %31 = fmul <8 x float> %29, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %29, <8 x float> %31, <8 x float> %30) #7
  %33 = bitcast <8 x float> %32 to <8 x i32>
  %34 = lshr <8 x i32> %33, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %35 = bitcast <8 x float> %30 to <32 x i8>
  %36 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %35) #7
  %37 = and <8 x i32> %34, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %38 = bitcast <32 x i8> %36 to <8 x i32>
  %39 = sub <8 x i32> %37, %38
  %40 = shl <8 x i32> %39, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %41 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %40
  %42 = bitcast <8 x i32> %41 to <8 x float>
  %43 = fmul <8 x float> %20, %42
  %44 = fmul <8 x float> %28, %42
  %45 = fadd <8 x float> %43, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %46 = fsub <8 x float> %45, %43
  %47 = fsub <8 x float> %45, %46
  %48 = fsub <8 x float> %43, %47
  %49 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %46
  %50 = fadd <8 x float> %49, %48
  %51 = fadd <8 x float> %44, %50
  %52 = fadd <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %53 = fsub <8 x float> %52, %43
  %54 = fsub <8 x float> %52, %53
  %55 = fsub <8 x float> %43, %54
  %56 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %53
  %57 = fadd <8 x float> %56, %55
  %58 = fadd <8 x float> %44, %57
  %59 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %52
  %60 = fmul <8 x float> %45, %59
  %61 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %60
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %45, <8 x float> %61) #7
  %63 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %52
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %59, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %58
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %65, <8 x float> %59, <8 x float> %64) #7
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %59, <8 x float> %62) #7
  %68 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %66, <8 x float> %67) #7
  %69 = fmul <8 x float> %60, %60
  %70 = fadd <8 x float> %60, %60
  %71 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %69
  %72 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %60, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %70, <8 x float> %68, <8 x float> %72) #7
  %74 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %69, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %75 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %74, <8 x float> %69, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %76 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %69, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %77 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %39) #7
  %78 = fmul <8 x float> %77, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %79 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %78
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %77, <8 x float> %79) #7
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %77, <8 x float> %80) #7
  %82 = fmul <8 x float> %60, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %83 = fmul <8 x float> %68, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fadd <8 x float> %82, %78
  %85 = fsub <8 x float> %78, %84
  %86 = fadd <8 x float> %82, %85
  %87 = fadd <8 x float> %81, %86
  %88 = fadd <8 x float> %83, %87
  %89 = fmul <8 x float> %60, %69
  %90 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %89
  %91 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %60, <8 x float> %90) #7
  %92 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %73, <8 x float> %60, <8 x float> %91) #7
  %93 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %69, <8 x float> %68, <8 x float> %92) #7
  %94 = fmul <8 x float> %76, %89
  %95 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %94
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %89, <8 x float> %76, <8 x float> %95) #7
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %93, <8 x float> %76, <8 x float> %96) #7
  %98 = fadd <8 x float> %84, %94
  %99 = fsub <8 x float> %84, %98
  %100 = fadd <8 x float> %94, %99
  %101 = fadd <8 x float> %100, %88
  %102 = fadd <8 x float> %101, %97
  %103 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i8 30) #7
  %104 = bitcast <8 x float> %103 to <4 x i64>
  %105 = fcmp oeq <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %106 = sext <8 x i1> %105 to <8 x i32>
  %107 = fadd <8 x float> %98, %102
  %108 = fmul <8 x float> %107, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %109 = bitcast <8 x i32> %106 to <8 x float>
  %110 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %109) #7
  %111 = bitcast <8 x float> %110 to <4 x i64>
  %112 = or <4 x i64> %111, %104
  %113 = bitcast <4 x i64> %112 to <8 x float>
  %114 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %115 = fcmp uno <8 x float> %113, zeroinitializer
  %116 = or <8 x i1> %115, %114
  %117 = sext <8 x i1> %116 to <8 x i32>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = or <4 x i64> %112, %118
  %120 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = xor <4 x i64> %119, %120
  %122 = fcmp uno <8 x float> %0, zeroinitializer
  %123 = sext <8 x i1> %122 to <8 x i32>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = or <4 x i64> %121, %124
  %126 = bitcast <4 x i64> %125 to <8 x float>
  ret <8 x float> %126
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp2f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = fsub <8 x float> %0, %2
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %4, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %5, <8 x float> %4, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %4, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %4, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %11 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = shl <8 x i32> %11, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %13 = add <8 x i32> %12, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = fmul <8 x float> %10, %14
  %16 = sub <8 x i32> %3, %11
  %17 = shl <8 x i32> %16, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %18 = add <8 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = bitcast <8 x i32> %18 to <8 x float>
  %20 = fmul <8 x float> %15, %19
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = bitcast <8 x float> %22 to <4 x i64>
  %26 = xor <4 x i64> %24, <i64 -1, i64 -1, i64 -1, i64 -1>
  %27 = and <4 x i64> %26, %25
  %28 = bitcast <4 x i64> %27 to <8 x float>
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp2f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  %3 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2) #7
  %4 = fsub <8 x float> %0, %2
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>, <8 x float> %4, <8 x float> <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %5, <8 x float> %4, <8 x float> <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %4, <8 x float> <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %4, <8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %11 = ashr <8 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = shl <8 x i32> %11, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %13 = add <8 x i32> %12, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = fmul <8 x float> %10, %14
  %16 = sub <8 x i32> %3, %11
  %17 = shl <8 x i32> %16, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %18 = add <8 x i32> %17, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %19 = bitcast <8 x i32> %18 to <8 x float>
  %20 = fmul <8 x float> %15, %19
  %21 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i8 29) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i8 17) #7
  %24 = bitcast <8 x float> %23 to <4 x i64>
  %25 = bitcast <8 x float> %22 to <4 x i64>
  %26 = xor <4 x i64> %24, <i64 -1, i64 -1, i64 -1, i64 -1>
  %27 = and <4 x i64> %26, %25
  %28 = bitcast <4 x i64> %27 to <8 x float>
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp10f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>, <8 x float> %6, <8 x float> <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>) #7
  %12 = fmul <8 x float> %6, %11
  %13 = fadd <8 x float> %12, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %14 = fsub <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %13
  %15 = fadd <8 x float> %12, %14
  %16 = fadd <8 x float> %15, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %17 = fmul <8 x float> %6, %13
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %6, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %6, <8 x float> %19) #7
  %21 = fadd <8 x float> %17, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = fadd <8 x float> %17, %22
  %24 = fadd <8 x float> %20, %23
  %25 = fadd <8 x float> %21, %24
  %26 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %27 = shl <8 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <8 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <8 x i32> %28 to <8 x float>
  %30 = fmul <8 x float> %25, %29
  %31 = sub <8 x i32> %4, %26
  %32 = shl <8 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = add <8 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <8 x i32> %33 to <8 x float>
  %35 = fmul <8 x float> %30, %34
  %36 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %36) #7
  %38 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #7
  %39 = bitcast <8 x float> %38 to <4 x i64>
  %40 = bitcast <8 x float> %37 to <4 x i64>
  %41 = xor <4 x i64> %39, <i64 -1, i64 -1, i64 -1, i64 -1>
  %42 = and <4 x i64> %41, %40
  %43 = bitcast <4 x i64> %42 to <8 x float>
  ret <8 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_exp10f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %2, i32 8) #7
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>, <8 x float> %0) #7
  %6 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %3, <8 x float> <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>, <8 x float> %5) #7
  %7 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>, <8 x float> %6, <8 x float> <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>) #7
  %8 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %7, <8 x float> %6, <8 x float> <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>) #7
  %9 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %8, <8 x float> %6, <8 x float> <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>) #7
  %10 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %9, <8 x float> %6, <8 x float> <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>) #7
  %11 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %10, <8 x float> %6, <8 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>) #7
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %13 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %14 = shl <8 x i32> %13, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = add <8 x i32> %14, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %16 = bitcast <8 x i32> %15 to <8 x float>
  %17 = fmul <8 x float> %12, %16
  %18 = sub <8 x i32> %4, %13
  %19 = shl <8 x i32> %18, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %20 = add <8 x i32> %19, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = fmul <8 x float> %17, %21
  %23 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i8 30) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %23) #7
  %25 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i8 17) #7
  %26 = bitcast <8 x float> %25 to <4 x i64>
  %27 = bitcast <8 x float> %24 to <4 x i64>
  %28 = xor <4 x i64> %26, <i64 -1, i64 -1, i64 -1, i64 -1>
  %29 = and <4 x i64> %28, %27
  %30 = bitcast <4 x i64> %29 to <8 x float>
  ret <8 x float> %30
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_expm1f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, zeroinitializer
  %3 = fmul <8 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %3) #7
  %5 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %4) #7
  %6 = fmul <8 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <8 x float> %6, %0
  %8 = fsub <8 x float> %7, %0
  %9 = fsub <8 x float> %7, %8
  %10 = fsub <8 x float> %0, %9
  %11 = fsub <8 x float> %6, %8
  %12 = fadd <8 x float> %11, %10
  %13 = fadd <8 x float> %12, zeroinitializer
  %14 = fmul <8 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <8 x float> %14, %7
  %16 = fsub <8 x float> %15, %7
  %17 = fsub <8 x float> %15, %16
  %18 = fsub <8 x float> %7, %17
  %19 = fsub <8 x float> %14, %16
  %20 = fadd <8 x float> %19, %18
  %21 = fadd <8 x float> %20, %13
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %15, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> %15, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %15, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %25 = fmul <8 x float> %15, %24
  %26 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %27 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %24, <8 x float> %26) #7
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %24, <8 x float> %27) #7
  %29 = fadd <8 x float> %25, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %30 = fsub <8 x float> %29, %25
  %31 = fsub <8 x float> %29, %30
  %32 = fsub <8 x float> %25, %31
  %33 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %30
  %34 = fadd <8 x float> %33, %32
  %35 = fadd <8 x float> %28, %34
  %36 = fmul <8 x float> %15, %29
  %37 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %36
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %29, <8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %29, <8 x float> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %35, <8 x float> %39) #7
  %41 = fadd <8 x float> %36, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %42 = fsub <8 x float> %41, %36
  %43 = fsub <8 x float> %41, %42
  %44 = fsub <8 x float> %36, %43
  %45 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %42
  %46 = fadd <8 x float> %45, %44
  %47 = fadd <8 x float> %40, %46
  %48 = fmul <8 x float> %15, %15
  %49 = fadd <8 x float> %15, %15
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %48
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %15, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %21, <8 x float> %51) #7
  %53 = fmul <8 x float> %48, %41
  %54 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %41, <8 x float> %54) #7
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %41, <8 x float> %55) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %48, <8 x float> %47, <8 x float> %56) #7
  %58 = fadd <8 x float> %15, %53
  %59 = fsub <8 x float> %58, %15
  %60 = fsub <8 x float> %58, %59
  %61 = fsub <8 x float> %15, %60
  %62 = fsub <8 x float> %53, %59
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %21, %57
  %65 = fadd <8 x float> %63, %64
  %66 = fadd <8 x float> %58, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %67 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %66
  %68 = fadd <8 x float> %58, %67
  %69 = fadd <8 x float> %68, %65
  %70 = ashr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = shl <8 x i32> %70, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %72 = add <8 x i32> %71, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %73 = bitcast <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %66, %73
  %75 = sub <8 x i32> %4, %70
  %76 = shl <8 x i32> %75, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %77 = add <8 x i32> %76, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = fmul <8 x float> %74, %78
  %80 = fmul <8 x float> %69, %73
  %81 = fmul <8 x float> %80, %78
  %82 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %83 = bitcast <8 x float> %82 to <4 x i64>
  %84 = bitcast <8 x float> %79 to <4 x i64>
  %85 = xor <4 x i64> %83, <i64 -1, i64 -1, i64 -1, i64 -1>
  %86 = and <4 x i64> %85, %84
  %87 = bitcast <8 x float> %81 to <4 x i64>
  %88 = and <4 x i64> %87, %85
  %89 = bitcast <4 x i64> %86 to <8 x float>
  %90 = bitcast <4 x i64> %88 to <8 x float>
  %91 = fadd <8 x float> %89, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %92 = fsub <8 x float> %91, %89
  %93 = fsub <8 x float> %91, %92
  %94 = fsub <8 x float> %89, %93
  %95 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %92
  %96 = fadd <8 x float> %95, %94
  %97 = fadd <8 x float> %96, %90
  %98 = fadd <8 x float> %91, %97
  %99 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i8 30) #7
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %98, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %99) #7
  %101 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i8 17) #7
  %102 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %101) #7
  %103 = bitcast <8 x float> %0 to <8 x i32>
  %104 = icmp eq <8 x i32> %103, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %105 = sext <8 x i1> %104 to <8 x i32>
  %106 = bitcast <8 x i32> %105 to <8 x float>
  %107 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %102, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %106) #7
  ret <8 x float> %107
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log10f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> %20, %21
  %23 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %22
  %24 = fsub <8 x float> %14, %21
  %25 = fadd <8 x float> %24, %23
  %26 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %26
  %33 = fmul <8 x float> %20, %32
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %33
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %20, <8 x float> %34) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %32, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %32, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %32, <8 x float> %35) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %39, <8 x float> %40) #7
  %42 = fmul <8 x float> %33, %33
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>, <8 x float> %42, <8 x float> <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>) #7
  %45 = bitcast <32 x i8> %19 to <8 x i32>
  %46 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %45) #7
  %47 = fmul <8 x float> %46, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %48 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>, <8 x float> %46, <8 x float> %48) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>, <8 x float> %46, <8 x float> %49) #7
  %51 = fmul <8 x float> %33, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %52 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %51
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %52) #7
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>, <8 x float> %53) #7
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>, <8 x float> %54) #7
  %56 = fadd <8 x float> %47, %51
  %57 = fsub <8 x float> %47, %56
  %58 = fadd <8 x float> %51, %57
  %59 = fadd <8 x float> %50, %58
  %60 = fadd <8 x float> %55, %59
  %61 = fmul <8 x float> %33, %42
  %62 = fmul <8 x float> %44, %61
  %63 = fadd <8 x float> %56, %62
  %64 = fsub <8 x float> %56, %63
  %65 = fadd <8 x float> %62, %64
  %66 = fadd <8 x float> %65, %60
  %67 = fadd <8 x float> %63, %66
  %68 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %69 = sext <8 x i1> %68 to <8 x i32>
  %70 = bitcast <8 x i32> %69 to <8 x float>
  %71 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %70) #7
  %72 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = fcmp uno <8 x float> %4, zeroinitializer
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  %77 = or <4 x i64> %73, %76
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %71, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %78) #7
  %80 = fcmp oeq <8 x float> %4, zeroinitializer
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %79, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %82) #7
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log2f8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub <8 x float> %20, %21
  %23 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %22
  %24 = fsub <8 x float> %14, %21
  %25 = fadd <8 x float> %24, %23
  %26 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fsub <8 x float> %26, %27
  %29 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %30 = fsub <8 x float> %14, %27
  %31 = fadd <8 x float> %30, %29
  %32 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %26
  %33 = fmul <8 x float> %20, %32
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %33
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %32, <8 x float> %20, <8 x float> %34) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %26
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %32, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %38 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %32, <8 x float> %37) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %25, <8 x float> %32, <8 x float> %35) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> %39, <8 x float> %40) #7
  %42 = fmul <8 x float> %33, %33
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>, <8 x float> %42, <8 x float> <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %42, <8 x float> <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>) #7
  %45 = bitcast <32 x i8> %19 to <8 x i32>
  %46 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %45) #7
  %47 = fmul <8 x float> %33, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %48 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %47
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %48) #7
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %49) #7
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %33, <8 x float> <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>, <8 x float> %50) #7
  %52 = fadd <8 x float> %46, %47
  %53 = fsub <8 x float> %52, %46
  %54 = fsub <8 x float> %52, %53
  %55 = fsub <8 x float> %46, %54
  %56 = fsub <8 x float> %47, %53
  %57 = fadd <8 x float> %56, %55
  %58 = fadd <8 x float> %51, %57
  %59 = fmul <8 x float> %33, %42
  %60 = fmul <8 x float> %44, %59
  %61 = fadd <8 x float> %52, %60
  %62 = fsub <8 x float> %61, %52
  %63 = fsub <8 x float> %61, %62
  %64 = fsub <8 x float> %52, %63
  %65 = fsub <8 x float> %60, %62
  %66 = fadd <8 x float> %65, %64
  %67 = fadd <8 x float> %58, %66
  %68 = fadd <8 x float> %61, %67
  %69 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %68, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %71) #7
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = fcmp uno <8 x float> %4, zeroinitializer
  %76 = sext <8 x i1> %75 to <8 x i32>
  %77 = bitcast <8 x i32> %76 to <4 x i64>
  %78 = or <4 x i64> %74, %77
  %79 = bitcast <4 x i64> %78 to <8 x float>
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %72, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %79) #7
  %81 = fcmp oeq <8 x float> %4, zeroinitializer
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %83) #7
  ret <8 x float> %84
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log2f8_u35avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %3 = fmul <8 x float> %0, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %4 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %3, <8 x float> %2) #7
  %5 = fmul <8 x float> %4, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %6 = bitcast <8 x float> %5 to <8 x i32>
  %7 = lshr <8 x i32> %6, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %8 = and <8 x i32> %7, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %9 = add nsw <8 x i32> %8, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %10 = shl nuw nsw <8 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = bitcast <8 x float> %4 to <8 x i32>
  %12 = add <8 x i32> %11, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %13 = sub <8 x i32> %12, %10
  %14 = bitcast <8 x i32> %13 to <8 x float>
  %15 = add nsw <8 x i32> %8, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %16 = bitcast <8 x i32> %9 to <32 x i8>
  %17 = bitcast <8 x i32> %15 to <32 x i8>
  %18 = bitcast <8 x float> %2 to <32 x i8>
  %19 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %16, <32 x i8> %17, <32 x i8> %18) #7
  %20 = fadd <8 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %21 = fadd <8 x float> %14, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fdiv <8 x float> %20, %21
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>, <8 x float> %23, <8 x float> <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>) #7
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %24, <8 x float> %23, <8 x float> <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>) #7
  %26 = fmul <8 x float> %22, %23
  %27 = bitcast <32 x i8> %19 to <8 x i32>
  %28 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %22, <8 x float> <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>, <8 x float> %28) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %25, <8 x float> %29) #7
  %31 = fcmp oeq <8 x float> %4, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %32 = sext <8 x i1> %31 to <8 x i32>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %30, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %36 = bitcast <8 x float> %35 to <4 x i64>
  %37 = fcmp uno <8 x float> %4, zeroinitializer
  %38 = sext <8 x i1> %37 to <8 x i32>
  %39 = bitcast <8 x i32> %38 to <4 x i64>
  %40 = or <4 x i64> %36, %39
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %34, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %41) #7
  %43 = fcmp oeq <8 x float> %4, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %45) #7
  ret <8 x float> %46
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_log1pf8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %4 = fmul <8 x float> %2, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %5 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %4, <8 x float> %3) #7
  %6 = fmul <8 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = bitcast <8 x float> %6 to <8 x i32>
  %8 = lshr <8 x i32> %7, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %9 = and <8 x i32> %8, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %10 = add nsw <8 x i32> %9, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %11 = shl nuw nsw <8 x i32> %9, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %12 = sub nsw <8 x i32> <i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432, i32 2130706432>, %11
  %13 = bitcast <8 x i32> %12 to <8 x float>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %13, <8 x float> %14) #7
  %16 = add nsw <8 x i32> %9, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %17 = bitcast <8 x i32> %10 to <32 x i8>
  %18 = bitcast <8 x i32> %16 to <32 x i8>
  %19 = bitcast <8 x float> %3 to <32 x i8>
  %20 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %17, <32 x i8> %18, <32 x i8> %19) #7
  %21 = bitcast <32 x i8> %20 to <8 x i32>
  %22 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %21) #7
  %23 = fmul <8 x float> %22, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %23
  %25 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %22, <8 x float> %24) #7
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %22, <8 x float> %25) #7
  %27 = fadd <8 x float> %15, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %28 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %27
  %29 = fadd <8 x float> %15, %28
  %30 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %31 = fmul <8 x float> %15, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %15, <8 x float> %32) #7
  %34 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %27
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %34, <8 x float> %30, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %36 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %29
  %37 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %36, <8 x float> %30, <8 x float> %35) #7
  %38 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %30, <8 x float> %33) #7
  %39 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %37, <8 x float> %38) #7
  %40 = fmul <8 x float> %31, %31
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>, <8 x float> %40, <8 x float> <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %41, <8 x float> %40, <8 x float> <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>) #7
  %43 = fmul <8 x float> %31, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %44 = fmul <8 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %45 = fadd <8 x float> %23, %43
  %46 = fsub <8 x float> %23, %45
  %47 = fadd <8 x float> %43, %46
  %48 = fadd <8 x float> %26, %47
  %49 = fadd <8 x float> %48, %44
  %50 = fmul <8 x float> %31, %40
  %51 = fmul <8 x float> %50, %42
  %52 = fadd <8 x float> %45, %51
  %53 = fsub <8 x float> %45, %52
  %54 = fadd <8 x float> %51, %53
  %55 = fadd <8 x float> %49, %54
  %56 = fadd <8 x float> %52, %55
  %57 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i8 30) #7
  %58 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %56, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <8 x float> %0, i8 30) #7
  %60 = bitcast <8 x float> %59 to <4 x i64>
  %61 = bitcast <8 x float> %58 to <4 x i64>
  %62 = or <4 x i64> %60, %61
  %63 = bitcast <4 x i64> %62 to <8 x float>
  %64 = fcmp oeq <8 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <8 x float>
  %67 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %63, <8 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <8 x float> %66) #7
  %68 = bitcast <8 x float> %0 to <8 x i32>
  %69 = icmp eq <8 x i32> %68, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %70 = sext <8 x i1> %69 to <8 x i32>
  %71 = bitcast <8 x i32> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %67, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %71) #7
  ret <8 x float> %72
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_finz_fabsf8_avx2(<8 x float>) local_unnamed_addr #2 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  ret <8 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x float> @Sleef_finz_copysignf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #2 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <4 x i64> %6, %4
  %8 = bitcast <4 x i64> %7 to <8 x float>
  ret <8 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmaxf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %0, <8 x float> %1) #7
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #7
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fminf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp uno <8 x float> %1, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %0, <8 x float> %1) #7
  %6 = bitcast <8 x i32> %4 to <8 x float>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %0, <8 x float> %6) #7
  ret <8 x float> %7
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fdimf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fsub <8 x float> %0, %1
  %4 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %3, <8 x float> zeroinitializer, i8 17) #7
  %5 = bitcast <8 x float> %4 to <4 x i64>
  %6 = fcmp oeq <8 x float> %0, %1
  %7 = sext <8 x i1> %6 to <8 x i32>
  %8 = bitcast <8 x i32> %7 to <4 x i64>
  %9 = or <4 x i64> %5, %8
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %3, <8 x float> zeroinitializer, <8 x float> %10) #7
  ret <8 x float> %11
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_truncf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_floorf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #7
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #7
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 17) #7
  %6 = fadd <8 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_ceilf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %0) #7
  %3 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %2) #7
  %4 = fsub <8 x float> %0, %3
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> zeroinitializer, i8 18) #7
  %6 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %6, <8 x float> %4, <8 x float> %5) #7
  %8 = bitcast <8 x float> %0 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %10 = bitcast <4 x i64> %9 to <8 x float>
  %11 = fcmp oeq <8 x float> %10, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %12 = sext <8 x i1> %11 to <8 x i32>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = or <4 x i64> %15, %13
  %17 = fsub <8 x float> %0, %7
  %18 = bitcast <8 x float> %17 to <4 x i64>
  %19 = and <4 x i64> %18, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %20 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %21 = or <4 x i64> %19, %20
  %22 = bitcast <4 x i64> %21 to <8 x float>
  %23 = bitcast <4 x i64> %16 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> %0, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_roundf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fadd <8 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %3) #7
  %5 = fsub <8 x float> %2, %4
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %2, <8 x float> zeroinitializer, i8 18) #7
  %7 = bitcast <8 x float> %6 to <4 x i64>
  %8 = fcmp oeq <8 x float> %5, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = bitcast <8 x i32> %9 to <4 x i64>
  %11 = and <4 x i64> %10, %7
  %12 = fadd <8 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = bitcast <4 x i64> %11 to <8 x float>
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %2, <8 x float> %12, <8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> zeroinitializer, i8 17) #7
  %16 = fadd <8 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %16, <8 x float> %15) #7
  %18 = fcmp oeq <8 x float> %0, <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> zeroinitializer, <8 x float> %20) #7
  %22 = bitcast <8 x float> %0 to <4 x i64>
  %23 = and <4 x i64> %22, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %24 = bitcast <4 x i64> %23 to <8 x float>
  %25 = fcmp oeq <8 x float> %24, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <4 x i64>
  %28 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %24, <8 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i8 29) #7
  %29 = bitcast <8 x float> %28 to <4 x i64>
  %30 = or <4 x i64> %29, %27
  %31 = fsub <8 x float> %21, %17
  %32 = bitcast <8 x float> %31 to <4 x i64>
  %33 = and <4 x i64> %32, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %34 = and <4 x i64> %22, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = or <4 x i64> %33, %34
  %36 = bitcast <4 x i64> %35 to <8 x float>
  %37 = bitcast <4 x i64> %30 to <8 x float>
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %36, <8 x float> %0, <8 x float> %37) #7
  ret <8 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_rintf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 8) #7
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmaf8_avx2(<8 x float>, <8 x float>, <8 x float>) local_unnamed_addr #0 {
  %4 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %0, <8 x float> %1, <8 x float> %2) #7
  ret <8 x float> %4
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_hypotf8_u05avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #7
  %11 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %10, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %12 = fmul <8 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %9, <8 x float> %12, <8 x float> %11) #7
  %14 = fmul <8 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> %14, <8 x float> %11) #7
  %16 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fmul <8 x float> %13, %16
  %18 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %17
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %16, <8 x float> %13, <8 x float> %18) #7
  %20 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %15
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %16, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %22 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %16, <8 x float> %21) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> zeroinitializer, <8 x float> %16, <8 x float> %19) #7
  %24 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %22, <8 x float> %23) #7
  %25 = fmul <8 x float> %17, %17
  %26 = fadd <8 x float> %17, %17
  %27 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %25
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %17, <8 x float> %27) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %24, <8 x float> %28) #7
  %30 = fadd <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <8 x float> %30, %25
  %32 = fsub <8 x float> %30, %31
  %33 = fsub <8 x float> %25, %32
  %34 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <8 x float> %34, %33
  %36 = fadd <8 x float> %29, %35
  %37 = fadd <8 x float> %30, %36
  %38 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %37) #7
  %39 = fmul <8 x float> %38, %38
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %38, <8 x float> %40) #7
  %42 = fadd <8 x float> %30, %39
  %43 = fsub <8 x float> %42, %30
  %44 = fsub <8 x float> %42, %43
  %45 = fsub <8 x float> %30, %44
  %46 = fsub <8 x float> %39, %43
  %47 = fadd <8 x float> %46, %45
  %48 = fadd <8 x float> %41, %36
  %49 = fadd <8 x float> %48, %47
  %50 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %50, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %53 = fmul <8 x float> %50, %52
  %54 = fmul <8 x float> %50, %42
  %55 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %56 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %50, <8 x float> %55) #7
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %50, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %53, <8 x float> %57) #7
  %59 = fmul <8 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %60 = fmul <8 x float> %58, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %61 = fmul <8 x float> %10, %59
  %62 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %61
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %10, <8 x float> %62) #7
  %64 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %10, <8 x float> %63) #7
  %65 = fadd <8 x float> %61, %64
  %66 = fcmp uno <8 x float> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <8 x float>
  %69 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %68) #7
  %70 = fcmp oeq <8 x float> %9, zeroinitializer
  %71 = sext <8 x i1> %70 to <8 x i32>
  %72 = bitcast <8 x i32> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %69, <8 x float> %10, <8 x float> %72) #7
  %74 = fcmp uno <8 x float> %8, %5
  %75 = sext <8 x i1> %74 to <8 x i32>
  %76 = bitcast <8 x i32> %75 to <8 x float>
  %77 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %73, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %76) #7
  %78 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %79 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %80 = or <8 x i1> %79, %78
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %77, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %82) #7
  ret <8 x float> %83
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_hypotf8_u35avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %8) #7
  %10 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %8) #7
  %11 = fdiv <8 x float> %9, %10
  %12 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %13 = tail call <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float> %12) #7
  %14 = fmul <8 x float> %10, %13
  %15 = fcmp oeq <8 x float> %9, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i32>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %14, <8 x float> %10, <8 x float> %17) #7
  %19 = fcmp uno <8 x float> %8, %5
  %20 = sext <8 x i1> %19 to <8 x i32>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %21) #7
  %23 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %24 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = or <8 x i1> %24, %23
  %26 = sext <8 x i1> %25 to <8 x i32>
  %27 = bitcast <8 x i32> %26 to <8 x float>
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %22, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %27) #7
  ret <8 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_nextafterf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = fcmp oeq <8 x float> %0, zeroinitializer
  %4 = sext <8 x i1> %3 to <8 x i32>
  %5 = bitcast <8 x float> %1 to <4 x i64>
  %6 = and <4 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = bitcast <4 x i64> %6 to <8 x float>
  %8 = bitcast <8 x i32> %4 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %7, <8 x float> %8) #7
  %10 = bitcast <8 x float> %9 to <4 x i64>
  %11 = bitcast <8 x float> %9 to <8 x i32>
  %12 = ashr <8 x i32> %11, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %13 = bitcast <8 x i32> %12 to <4 x i64>
  %14 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %1, <8 x float> %9, i8 29) #7
  %15 = bitcast <8 x float> %14 to <4 x i64>
  %16 = xor <4 x i64> %13, %15
  %17 = xor <8 x i32> %11, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %18 = sub <8 x i32> zeroinitializer, %17
  %19 = bitcast <8 x float> %9 to <32 x i8>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = bitcast <4 x i64> %16 to <32 x i8>
  %22 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %19, <32 x i8> %20, <32 x i8> %21) #7
  %23 = fcmp une <8 x float> %9, %1
  %24 = sext <8 x i1> %23 to <8 x i32>
  %25 = bitcast <32 x i8> %22 to <8 x i32>
  %26 = add <8 x i32> %25, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %27 = bitcast <8 x i32> %26 to <32 x i8>
  %28 = bitcast <8 x i32> %24 to <32 x i8>
  %29 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %22, <32 x i8> %27, <32 x i8> %28) #7
  %30 = bitcast <32 x i8> %29 to <8 x i32>
  %31 = xor <8 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = sub <8 x i32> zeroinitializer, %31
  %33 = bitcast <8 x i32> %32 to <32 x i8>
  %34 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %29, <32 x i8> %33, <32 x i8> %21) #7
  %35 = bitcast <32 x i8> %34 to <8 x float>
  %36 = fcmp oeq <8 x float> %35, zeroinitializer
  %37 = fcmp une <8 x float> %9, zeroinitializer
  %38 = and <8 x i1> %36, %37
  %39 = sext <8 x i1> %38 to <8 x i32>
  %40 = and <4 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = bitcast <8 x i32> %39 to <8 x float>
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %35, <8 x float> %41, <8 x float> %42) #7
  %44 = fcmp oeq <8 x float> %9, zeroinitializer
  %45 = fcmp oeq <8 x float> %1, zeroinitializer
  %46 = and <8 x i1> %44, %45
  %47 = sext <8 x i1> %46 to <8 x i32>
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> %1, <8 x float> %48) #7
  %50 = fcmp uno <8 x float> %9, %1
  %51 = sext <8 x i1> %50 to <8 x i32>
  %52 = bitcast <8 x i32> %51 to <8 x float>
  %53 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %52) #7
  ret <8 x float> %53
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_frfrexpf8_avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %6 = fmul <8 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> %6, <8 x float> %5) #7
  %8 = bitcast <8 x float> %7 to <4 x i64>
  %9 = and <4 x i64> %8, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %10 = or <4 x i64> %9, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %11 = bitcast <4 x i64> %10 to <8 x float>
  %12 = and <4 x i64> %8, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %13 = bitcast <4 x i64> %12 to <8 x float>
  %14 = fcmp oeq <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = sext <8 x i1> %14 to <8 x i32>
  %16 = and <4 x i64> %8, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <4 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <4 x i64> %17 to <8 x float>
  %19 = bitcast <8 x i32> %15 to <8 x float>
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %11, <8 x float> %18, <8 x float> %19) #7
  %21 = fcmp oeq <8 x float> %7, zeroinitializer
  %22 = sext <8 x i1> %21 to <8 x i32>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %20, <8 x float> %7, <8 x float> %23) #7
  ret <8 x float> %24
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fmodf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #7
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #7
  %14 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %15 = bitcast <8 x float> %14 to <8 x i32>
  %16 = add <8 x i32> %15, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = fcmp oeq <8 x float> %14, zeroinitializer
  %19 = sext <8 x i1> %18 to <8 x i32>
  %20 = bitcast <8 x i32> %19 to <8 x float>
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %17, <8 x float> zeroinitializer, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %23 = fmul <8 x float> %13, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %24 = bitcast <8 x float> %13 to <4 x i64>
  %25 = xor <4 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <4 x i64> %25 to <8 x float>
  br label %27

; <label>:27:                                     ; preds = %27, %2
  %28 = phi i32 [ 0, %2 ], [ %74, %27 ]
  %29 = phi <8 x float> [ zeroinitializer, %2 ], [ %66, %27 ]
  %30 = phi <8 x float> [ %11, %2 ], [ %64, %27 ]
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = fcmp oeq <8 x float> %30, zeroinitializer
  %35 = sext <8 x i1> %34 to <8 x i32>
  %36 = bitcast <8 x i32> %35 to <8 x float>
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %33, <8 x float> zeroinitializer, <8 x float> %36) #7
  %38 = fmul <8 x float> %21, %37
  %39 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %38, i32 11) #7
  %40 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %22, <8 x float> %30, i8 30) #7
  %41 = bitcast <8 x float> %40 to <4 x i64>
  %42 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %13, i8 29) #7
  %43 = bitcast <8 x float> %42 to <4 x i64>
  %44 = and <4 x i64> %43, %41
  %45 = bitcast <4 x i64> %44 to <8 x float>
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %39, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <8 x float> %45) #7
  %47 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %23, <8 x float> %30, i8 30) #7
  %48 = bitcast <8 x float> %47 to <4 x i64>
  %49 = and <4 x i64> %48, %43
  %50 = bitcast <4 x i64> %49 to <8 x float>
  %51 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %46, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %51, i32 11) #7
  %53 = fmul <8 x float> %52, %26
  %54 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %53
  %55 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %52, <8 x float> %26, <8 x float> %54) #7
  %56 = fadd <8 x float> %30, %53
  %57 = fsub <8 x float> %56, %30
  %58 = fsub <8 x float> %56, %57
  %59 = fsub <8 x float> %30, %58
  %60 = fsub <8 x float> %53, %57
  %61 = fadd <8 x float> %60, %59
  %62 = fadd <8 x float> %29, %55
  %63 = fadd <8 x float> %62, %61
  %64 = fadd <8 x float> %56, %63
  %65 = fsub <8 x float> %56, %64
  %66 = fadd <8 x float> %63, %65
  %67 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %64, <8 x float> %13, i8 17) #7
  %68 = bitcast <8 x float> %67 to <4 x i64>
  %69 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %70 = shufflevector <4 x i64> %68, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %71 = and <2 x i64> %70, %69
  %72 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %71, <2 x i64> <i64 -1, i64 -1>) #7
  %73 = icmp eq i32 %72, 0
  %74 = add nuw nsw i32 %28, 1
  %75 = icmp ult i32 %74, 8
  %76 = and i1 %75, %73
  br i1 %76, label %27, label %77

; <label>:77:                                     ; preds = %27
  %78 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #7
  %79 = fadd <8 x float> %64, %66
  %80 = fmul <8 x float> %79, %78
  %81 = fcmp oeq <8 x float> %79, %13
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <8 x float>
  %84 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %80, <8 x float> zeroinitializer, <8 x float> %83) #7
  %85 = bitcast <8 x float> %84 to <4 x i64>
  %86 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = xor <4 x i64> %86, %85
  %88 = bitcast <4 x i64> %87 to <8 x float>
  %89 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %11, <8 x float> %13, i8 17) #7
  %90 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %88, <8 x float> %0, <8 x float> %89) #7
  %91 = fcmp oeq <8 x float> %13, zeroinitializer
  %92 = sext <8 x i1> %91 to <8 x i32>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %90, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %93) #7
  ret <8 x float> %94
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_remainderf8_avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = bitcast <8 x float> %1 to <4 x i64>
  %7 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <4 x i64> %7 to <8 x float>
  %9 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %8, <8 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i8 17) #7
  %10 = fmul <8 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %10, <8 x float> %9) #7
  %12 = fmul <8 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %8, <8 x float> %12, <8 x float> %9) #7
  %14 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <8 x float> %9) #7
  %15 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %16 = fmul <8 x float> %13, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %17 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = bitcast <8 x float> %13 to <4 x i64>
  %19 = xor <4 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <4 x i64> %19 to <8 x float>
  br label %21

; <label>:21:                                     ; preds = %51, %2
  %22 = phi i32 [ 0, %2 ], [ %90, %51 ]
  %23 = phi <4 x i64> [ zeroinitializer, %2 ], [ %75, %51 ]
  %24 = phi <8 x float> [ zeroinitializer, %2 ], [ %89, %51 ]
  %25 = phi <8 x float> [ %11, %2 ], [ %87, %51 ]
  %26 = fmul <8 x float> %15, %25
  %27 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %26, i32 8) #7
  %28 = bitcast <8 x float> %25 to <4 x i64>
  %29 = and <4 x i64> %28, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %30 = bitcast <4 x i64> %29 to <8 x float>
  %31 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %16, i8 17) #7
  %32 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %31) #7
  %33 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %30, <8 x float> %17, i8 17) #7
  %34 = bitcast <8 x float> %33 to <4 x i64>
  %35 = fcmp oeq <8 x float> %17, %30
  %36 = sext <8 x i1> %35 to <8 x i32>
  %37 = bitcast <8 x i32> %36 to <4 x i64>
  %38 = xor <4 x i64> %23, <i64 -1, i64 -1, i64 -1, i64 -1>
  %39 = and <4 x i64> %37, %38
  %40 = or <4 x i64> %39, %34
  %41 = bitcast <4 x i64> %40 to <8 x float>
  %42 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %32, <8 x float> zeroinitializer, <8 x float> %41) #7
  %43 = fcmp oeq <8 x float> %42, zeroinitializer
  %44 = sext <8 x i1> %43 to <8 x i32>
  %45 = bitcast <8 x i32> %44 to <4 x i64>
  %46 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %47 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %48 = and <2 x i64> %47, %46
  %49 = tail call i32 @llvm.x86.sse41.ptestc(<2 x i64> %48, <2 x i64> <i64 -1, i64 -1>) #7
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %92

; <label>:51:                                     ; preds = %21
  %52 = fmul <8 x float> %42, %20
  %53 = bitcast <8 x float> %52 to <4 x i64>
  %54 = and <4 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <4 x i64> %54 to <8 x float>
  %56 = fcmp oeq <8 x float> %55, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %57 = sext <8 x i1> %56 to <8 x i32>
  %58 = and <4 x i64> %28, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = xor <4 x i64> %58, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %60 = bitcast <4 x i64> %59 to <8 x float>
  %61 = fadd <8 x float> %42, %60
  %62 = bitcast <8 x i32> %57 to <8 x float>
  %63 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %42, <8 x float> %61, <8 x float> %62) #7
  %64 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %63) #7
  %65 = and <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = icmp ne <8 x i32> %65, zeroinitializer
  %67 = sext <8 x i1> %66 to <8 x i32>
  %68 = bitcast <8 x i32> %67 to <4 x i64>
  %69 = bitcast <8 x float> %63 to <4 x i64>
  %70 = and <4 x i64> %69, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %71 = bitcast <4 x i64> %70 to <8 x float>
  %72 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %71, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #7
  %73 = bitcast <8 x float> %72 to <4 x i64>
  %74 = and <4 x i64> %68, %73
  %75 = xor <4 x i64> %74, %23
  %76 = fmul <8 x float> %63, %20
  %77 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %76
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %63, <8 x float> %20, <8 x float> %77) #7
  %79 = fadd <8 x float> %25, %76
  %80 = fsub <8 x float> %79, %25
  %81 = fsub <8 x float> %79, %80
  %82 = fsub <8 x float> %25, %81
  %83 = fsub <8 x float> %76, %80
  %84 = fadd <8 x float> %83, %82
  %85 = fadd <8 x float> %24, %78
  %86 = fadd <8 x float> %85, %84
  %87 = fadd <8 x float> %79, %86
  %88 = fsub <8 x float> %79, %87
  %89 = fadd <8 x float> %86, %88
  %90 = add nuw nsw i32 %22, 1
  %91 = icmp ult i32 %90, 8
  br i1 %91, label %21, label %92

; <label>:92:                                     ; preds = %21, %51
  %93 = phi <8 x float> [ %25, %21 ], [ %87, %51 ]
  %94 = phi <8 x float> [ %24, %21 ], [ %89, %51 ]
  %95 = fadd <8 x float> %93, %94
  %96 = fmul <8 x float> %14, %95
  %97 = bitcast <8 x float> %96 to <4 x i64>
  %98 = and <4 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %99 = xor <4 x i64> %98, %97
  %100 = bitcast <4 x i64> %99 to <8 x float>
  %101 = fcmp oeq <8 x float> %8, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %102 = sext <8 x i1> %101 to <8 x i32>
  %103 = fcmp oeq <8 x float> %5, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %104 = sext <8 x i1> %103 to <8 x i32>
  %105 = bitcast <8 x i32> %104 to <8 x float>
  %106 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %0, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %105) #7
  %107 = bitcast <8 x i32> %102 to <8 x float>
  %108 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %100, <8 x float> %106, <8 x float> %107) #7
  %109 = fcmp oeq <8 x float> %13, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i32>
  %111 = bitcast <8 x i32> %110 to <8 x float>
  %112 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %108, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %111) #7
  ret <8 x float> %112
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_sinpif8_u05avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = lshr <8 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <8 x i32> %5, %3
  %7 = and <8 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <8 x i32> %7, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = and <8 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fsub <8 x float> %2, %11
  %13 = fmul <8 x float> %12, %12
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %12, <8 x float> %14) #7
  %16 = bitcast <8 x i32> %9 to <8 x float>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %16) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %13, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %16) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %13, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, %21
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %16) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %16) #7
  %25 = fadd <8 x float> %22, %23
  %26 = fsub <8 x float> %25, %22
  %27 = fsub <8 x float> %25, %26
  %28 = fsub <8 x float> %22, %27
  %29 = fsub <8 x float> %23, %26
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %24, %30
  %32 = fmul <8 x float> %13, %25
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %25, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %35) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %16) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %16) #7
  %39 = fadd <8 x float> %32, %37
  %40 = fsub <8 x float> %39, %32
  %41 = fsub <8 x float> %39, %40
  %42 = fsub <8 x float> %32, %41
  %43 = fsub <8 x float> %37, %40
  %44 = fadd <8 x float> %43, %42
  %45 = fadd <8 x float> %36, %38
  %46 = fadd <8 x float> %45, %44
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %15, <8 x float> %16) #7
  %49 = fmul <8 x float> %39, %47
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %47, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %47, <8 x float> %51) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %48, <8 x float> %52) #7
  %54 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fsub <8 x float> %54, %49
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %49, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> %54, <8 x float> %16) #7
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> %60, <8 x float> %16) #7
  %63 = and <8 x i32> %6, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %64 = icmp ne <8 x i32> %63, zeroinitializer
  %65 = sext <8 x i1> %64 to <8 x i32>
  %66 = bitcast <8 x i32> %65 to <4 x i64>
  %67 = and <4 x i64> %66, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %68 = bitcast <8 x float> %61 to <4 x i64>
  %69 = xor <4 x i64> %67, %68
  %70 = bitcast <8 x float> %62 to <4 x i64>
  %71 = xor <4 x i64> %67, %70
  %72 = bitcast <4 x i64> %69 to <8 x float>
  %73 = bitcast <4 x i64> %71 to <8 x float>
  %74 = fadd <8 x float> %72, %73
  %75 = bitcast <8 x float> %0 to <8 x i32>
  %76 = icmp eq <8 x i32> %75, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = sext <8 x i1> %76 to <8 x i32>
  %78 = bitcast <8 x i32> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %74, <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <8 x float> %78) #7
  %80 = bitcast <8 x float> %0 to <4 x i64>
  %81 = and <4 x i64> %80, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %82 = bitcast <4 x i64> %81 to <8 x float>
  %83 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %82, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #7
  %84 = bitcast <8 x float> %83 to <4 x i64>
  %85 = bitcast <8 x float> %79 to <4 x i64>
  %86 = xor <4 x i64> %84, <i64 -1, i64 -1, i64 -1, i64 -1>
  %87 = and <4 x i64> %86, %85
  %88 = fcmp oeq <8 x float> %82, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %89 = sext <8 x i1> %88 to <8 x i32>
  %90 = bitcast <8 x i32> %89 to <4 x i64>
  %91 = or <4 x i64> %87, %90
  %92 = bitcast <4 x i64> %91 to <8 x float>
  ret <8 x float> %92
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_cospif8_u05avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = fmul <8 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %2) #7
  %4 = lshr <8 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <8 x i32> %5, %3
  %7 = and <8 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <8 x i32> %7, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i32>
  %10 = and <8 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fsub <8 x float> %2, %11
  %13 = fmul <8 x float> %12, %12
  %14 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %13
  %15 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %12, <8 x float> %12, <8 x float> %14) #7
  %16 = bitcast <8 x i32> %9 to <8 x float>
  %17 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>, <8 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>, <8 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <8 x float> %16) #7
  %19 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %13, <8 x float> %18) #7
  %20 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>, <8 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <8 x float> %16) #7
  %21 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %19, <8 x float> %13, <8 x float> %20) #7
  %22 = fmul <8 x float> %13, %21
  %23 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, <8 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <8 x float> %16) #7
  %24 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>, <8 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <8 x float> %16) #7
  %25 = fadd <8 x float> %22, %23
  %26 = fsub <8 x float> %25, %22
  %27 = fsub <8 x float> %25, %26
  %28 = fsub <8 x float> %22, %27
  %29 = fsub <8 x float> %23, %26
  %30 = fadd <8 x float> %29, %28
  %31 = fadd <8 x float> %24, %30
  %32 = fmul <8 x float> %13, %25
  %33 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %32
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %25, <8 x float> %33) #7
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %15, <8 x float> %25, <8 x float> %34) #7
  %36 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %13, <8 x float> %31, <8 x float> %35) #7
  %37 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, <8 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <8 x float> %16) #7
  %38 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>, <8 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <8 x float> %16) #7
  %39 = fadd <8 x float> %32, %37
  %40 = fsub <8 x float> %39, %32
  %41 = fsub <8 x float> %39, %40
  %42 = fsub <8 x float> %32, %41
  %43 = fsub <8 x float> %37, %40
  %44 = fadd <8 x float> %43, %42
  %45 = fadd <8 x float> %36, %38
  %46 = fadd <8 x float> %45, %44
  %47 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> %13, <8 x float> %16) #7
  %48 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> zeroinitializer, <8 x float> %15, <8 x float> %16) #7
  %49 = fmul <8 x float> %39, %47
  %50 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %49
  %51 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %47, <8 x float> %50) #7
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %47, <8 x float> %51) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> %48, <8 x float> %52) #7
  %54 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %55 = fsub <8 x float> %54, %49
  %56 = fsub <8 x float> %54, %55
  %57 = fsub <8 x float> %49, %56
  %58 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %55
  %59 = fadd <8 x float> %58, %57
  %60 = fadd <8 x float> %53, %59
  %61 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %49, <8 x float> %54, <8 x float> %16) #7
  %62 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %53, <8 x float> %60, <8 x float> %16) #7
  %63 = add <8 x i32> %10, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %64 = and <8 x i32> %63, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %65 = icmp ne <8 x i32> %64, zeroinitializer
  %66 = sext <8 x i1> %65 to <8 x i32>
  %67 = bitcast <8 x i32> %66 to <4 x i64>
  %68 = and <4 x i64> %67, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = bitcast <8 x float> %61 to <4 x i64>
  %70 = xor <4 x i64> %68, %69
  %71 = bitcast <8 x float> %62 to <4 x i64>
  %72 = xor <4 x i64> %68, %71
  %73 = bitcast <4 x i64> %70 to <8 x float>
  %74 = bitcast <4 x i64> %72 to <8 x float>
  %75 = fadd <8 x float> %73, %74
  %76 = bitcast <8 x float> %0 to <4 x i64>
  %77 = and <4 x i64> %76, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %78 = bitcast <4 x i64> %77 to <8 x float>
  %79 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %78, <8 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i8 30) #7
  %80 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %75, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %79) #7
  %81 = fcmp oeq <8 x float> %78, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %82 = sext <8 x i1> %81 to <8 x i32>
  %83 = bitcast <8 x i32> %82 to <4 x i64>
  %84 = bitcast <8 x float> %80 to <4 x i64>
  %85 = or <4 x i64> %84, %83
  %86 = bitcast <4 x i64> %85 to <8 x float>
  ret <8 x float> %86
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_finz_tgammaf8_u10avx2(<8 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0) #7
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <8 x float>, <8 x float>* %4, align 32
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <8 x float>, <8 x float>* %6, align 32
  %8 = fadd <8 x float> %5, %7
  %9 = fmul <8 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %9) #7
  %11 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %10) #7
  %12 = fmul <8 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <8 x float> %5, %12
  %14 = fsub <8 x float> %13, %5
  %15 = fsub <8 x float> %13, %14
  %16 = fsub <8 x float> %5, %15
  %17 = fsub <8 x float> %12, %14
  %18 = fadd <8 x float> %17, %16
  %19 = fadd <8 x float> %7, %18
  %20 = fmul <8 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <8 x float> %20, %13
  %22 = fsub <8 x float> %21, %13
  %23 = fsub <8 x float> %21, %22
  %24 = fsub <8 x float> %13, %23
  %25 = fsub <8 x float> %20, %22
  %26 = fadd <8 x float> %25, %24
  %27 = fadd <8 x float> %26, %19
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %21, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %21, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %21, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %31 = fmul <8 x float> %21, %30
  %32 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %31
  %33 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %30, <8 x float> %32) #7
  %34 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %30, <8 x float> %33) #7
  %35 = fadd <8 x float> %31, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %36 = fsub <8 x float> %35, %31
  %37 = fsub <8 x float> %35, %36
  %38 = fsub <8 x float> %31, %37
  %39 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %36
  %40 = fadd <8 x float> %39, %38
  %41 = fadd <8 x float> %34, %40
  %42 = fmul <8 x float> %21, %35
  %43 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %42
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %35, <8 x float> %43) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %27, <8 x float> %35, <8 x float> %44) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %41, <8 x float> %45) #7
  %47 = fadd <8 x float> %42, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fsub <8 x float> %47, %42
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %42, %49
  %51 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %46, %52
  %54 = fmul <8 x float> %21, %21
  %55 = fadd <8 x float> %21, %21
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %54
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %21, <8 x float> %21, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %27, <8 x float> %57) #7
  %59 = fmul <8 x float> %54, %47
  %60 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %59
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %47, <8 x float> %60) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %58, <8 x float> %47, <8 x float> %61) #7
  %63 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %53, <8 x float> %62) #7
  %64 = fadd <8 x float> %21, %59
  %65 = fsub <8 x float> %64, %21
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %21, %66
  %68 = fsub <8 x float> %59, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %27, %63
  %71 = fadd <8 x float> %69, %70
  %72 = fadd <8 x float> %64, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %73 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %72
  %74 = fadd <8 x float> %64, %73
  %75 = fadd <8 x float> %74, %71
  %76 = ashr <8 x i32> %10, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = shl <8 x i32> %76, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %78 = add <8 x i32> %77, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %79 = bitcast <8 x i32> %78 to <8 x float>
  %80 = fmul <8 x float> %72, %79
  %81 = sub <8 x i32> %10, %76
  %82 = shl <8 x i32> %81, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %83 = add <8 x i32> %82, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %84 = bitcast <8 x i32> %83 to <8 x float>
  %85 = fmul <8 x float> %80, %84
  %86 = fmul <8 x float> %75, %79
  %87 = fmul <8 x float> %86, %84
  %88 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %89 = bitcast <8 x float> %88 to <4 x i64>
  %90 = bitcast <8 x float> %85 to <4 x i64>
  %91 = xor <4 x i64> %89, <i64 -1, i64 -1, i64 -1, i64 -1>
  %92 = and <4 x i64> %91, %90
  %93 = bitcast <8 x float> %87 to <4 x i64>
  %94 = and <4 x i64> %93, %91
  %95 = bitcast <4 x i64> %92 to <8 x float>
  %96 = bitcast <4 x i64> %94 to <8 x float>
  %97 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %98 = load <8 x float>, <8 x float>* %97, align 32
  %99 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %100 = load <8 x float>, <8 x float>* %99, align 32
  %101 = fmul <8 x float> %98, %95
  %102 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %101
  %103 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %98, <8 x float> %102) #7
  %104 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %96, <8 x float> %98, <8 x float> %103) #7
  %105 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %95, <8 x float> %100, <8 x float> %104) #7
  %106 = fadd <8 x float> %101, %105
  %107 = fcmp oeq <8 x float> %0, <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>
  %108 = sext <8 x i1> %107 to <8 x i32>
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 17) #7
  %111 = bitcast <8 x float> %110 to <4 x i64>
  %112 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  %113 = fcmp oeq <8 x float> %112, %0
  %114 = sext <8 x i1> %113 to <8 x i32>
  %115 = bitcast <8 x i32> %114 to <4 x i64>
  %116 = and <4 x i64> %115, %111
  %117 = bitcast <8 x float> %0 to <4 x i64>
  %118 = and <4 x i64> %117, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %119 = bitcast <4 x i64> %118 to <8 x float>
  %120 = fcmp oeq <8 x float> %119, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %121 = fcmp uno <8 x float> %0, zeroinitializer
  %122 = or <8 x i1> %120, %121
  %123 = sext <8 x i1> %122 to <8 x i32>
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = xor <4 x i64> %124, <i64 -1, i64 -1, i64 -1, i64 -1>
  %126 = and <4 x i64> %111, %125
  %127 = fcmp uno <8 x float> %106, zeroinitializer
  %128 = sext <8 x i1> %127 to <8 x i32>
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = and <4 x i64> %126, %129
  %131 = or <4 x i64> %130, %109
  %132 = or <4 x i64> %131, %116
  %133 = bitcast <4 x i64> %132 to <8 x float>
  %134 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %106, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %133) #7
  %135 = fcmp oeq <8 x float> %0, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %136 = sext <8 x i1> %135 to <8 x i32>
  %137 = bitcast <8 x i32> %136 to <4 x i64>
  %138 = or <4 x i64> %125, %137
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i8 29) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = and <4 x i64> %138, %140
  %142 = fcmp oeq <8 x float> %0, zeroinitializer
  %143 = sext <8 x i1> %142 to <8 x i32>
  %144 = bitcast <8 x i32> %143 to <4 x i64>
  %145 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i8 30) #7
  %146 = bitcast <8 x float> %145 to <4 x i64>
  %147 = or <4 x i64> %146, %144
  %148 = fcmp uno <8 x float> %134, zeroinitializer
  %149 = sext <8 x i1> %148 to <8 x i32>
  %150 = bitcast <8 x i32> %149 to <4 x i64>
  %151 = or <4 x i64> %147, %150
  %152 = and <4 x i64> %141, %151
  %153 = and <4 x i64> %117, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %154 = or <4 x i64> %153, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %155 = bitcast <4 x i64> %154 to <8 x float>
  %156 = bitcast <4 x i64> %152 to <8 x float>
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %134, <8 x float> %155, <8 x float> %156) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <8 x float> %157
}

; Function Attrs: nounwind uwtable
define <8 x float> @Sleef_finz_lgammaf8_u10avx2(<8 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 32
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <8 x float> %0) #7
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <4 x i64>*
  %6 = load <4 x i64>, <4 x i64>* %5, align 32
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <8 x float>* %7 to <4 x i64>*
  %9 = load <4 x i64>, <4 x i64>* %8, align 32
  %10 = and <4 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <4 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <4 x i64> %11, %9
  %13 = bitcast <4 x i64> %10 to <8 x float>
  %14 = bitcast <4 x i64> %12 to <8 x float>
  %15 = fmul <8 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %15, <8 x float> <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>, i8 17) #7
  %17 = fmul <8 x float> %15, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> %17, <8 x float> %16) #7
  %19 = bitcast <8 x float> %18 to <8 x i32>
  %20 = lshr <8 x i32> %19, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %21 = bitcast <8 x float> %16 to <32 x i8>
  %22 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> <i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0, i8 127, i8 0, i8 0, i8 0>, <32 x i8> <i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0, i8 -65, i8 0, i8 0, i8 0>, <32 x i8> %21) #7
  %23 = and <8 x i32> %20, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %24 = bitcast <32 x i8> %22 to <8 x i32>
  %25 = sub <8 x i32> %23, %24
  %26 = shl <8 x i32> %25, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %27 = sub <8 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %26
  %28 = bitcast <8 x i32> %27 to <8 x float>
  %29 = fmul <8 x float> %13, %28
  %30 = fmul <8 x float> %14, %28
  %31 = fadd <8 x float> %29, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %32 = fsub <8 x float> %31, %29
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %29, %33
  %35 = fsub <8 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %30, %36
  %38 = fadd <8 x float> %29, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %39 = fsub <8 x float> %38, %29
  %40 = fsub <8 x float> %38, %39
  %41 = fsub <8 x float> %29, %40
  %42 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %43 = fadd <8 x float> %42, %41
  %44 = fadd <8 x float> %30, %43
  %45 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38
  %46 = fmul <8 x float> %31, %45
  %47 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %46
  %48 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %31, <8 x float> %47) #7
  %49 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %38
  %50 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %49, <8 x float> %45, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #7
  %51 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %44
  %52 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %51, <8 x float> %45, <8 x float> %50) #7
  %53 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %37, <8 x float> %45, <8 x float> %48) #7
  %54 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %52, <8 x float> %53) #7
  %55 = fmul <8 x float> %46, %46
  %56 = fadd <8 x float> %46, %46
  %57 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %46, <8 x float> %46, <8 x float> %57) #7
  %59 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %56, <8 x float> %54, <8 x float> %58) #7
  %60 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %55, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %61 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %60, <8 x float> %55, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %62 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %61, <8 x float> %55, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %63 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %25) #7
  %64 = fmul <8 x float> %63, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %65 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %64
  %66 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>, <8 x float> %63, <8 x float> %65) #7
  %67 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>, <8 x float> %63, <8 x float> %66) #7
  %68 = fmul <8 x float> %46, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %69 = fmul <8 x float> %54, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %70 = fadd <8 x float> %68, %64
  %71 = fsub <8 x float> %64, %70
  %72 = fadd <8 x float> %68, %71
  %73 = fadd <8 x float> %67, %72
  %74 = fadd <8 x float> %69, %73
  %75 = fmul <8 x float> %46, %55
  %76 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %75
  %77 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %46, <8 x float> %76) #7
  %78 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %59, <8 x float> %46, <8 x float> %77) #7
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %55, <8 x float> %54, <8 x float> %78) #7
  %80 = fmul <8 x float> %62, %75
  %81 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %80
  %82 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %75, <8 x float> %62, <8 x float> %81) #7
  %83 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %62, <8 x float> %82) #7
  %84 = fadd <8 x float> %70, %80
  %85 = fsub <8 x float> %70, %84
  %86 = fadd <8 x float> %80, %85
  %87 = fadd <8 x float> %86, %74
  %88 = fadd <8 x float> %87, %83
  %89 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %90 = load <8 x float>, <8 x float>* %89, align 32
  %91 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %92 = load <8 x float>, <8 x float>* %91, align 32
  %93 = fadd <8 x float> %84, %90
  %94 = fsub <8 x float> %93, %90
  %95 = fsub <8 x float> %93, %94
  %96 = fsub <8 x float> %90, %95
  %97 = fsub <8 x float> %84, %94
  %98 = fadd <8 x float> %97, %96
  %99 = fadd <8 x float> %88, %92
  %100 = fadd <8 x float> %99, %98
  %101 = fadd <8 x float> %93, %100
  %102 = bitcast <8 x float> %0 to <4 x i64>
  %103 = and <4 x i64> %102, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %104 = bitcast <4 x i64> %103 to <8 x float>
  %105 = fcmp oeq <8 x float> %104, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %106 = sext <8 x i1> %105 to <8 x i32>
  %107 = bitcast <8 x i32> %106 to <4 x i64>
  %108 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %0, <8 x float> zeroinitializer, i8 18) #7
  %109 = bitcast <8 x float> %108 to <4 x i64>
  %110 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %0, i32 11) #7
  %111 = fcmp oeq <8 x float> %110, %0
  %112 = sext <8 x i1> %111 to <8 x i32>
  %113 = bitcast <8 x i32> %112 to <4 x i64>
  %114 = and <4 x i64> %113, %109
  %115 = fcmp uno <8 x float> %0, zeroinitializer
  %116 = or <8 x i1> %105, %115
  %117 = sext <8 x i1> %116 to <8 x i32>
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = xor <4 x i64> %118, <i64 -1, i64 -1, i64 -1, i64 -1>
  %120 = fcmp uno <8 x float> %101, zeroinitializer
  %121 = sext <8 x i1> %120 to <8 x i32>
  %122 = bitcast <8 x i32> %121 to <4 x i64>
  %123 = and <4 x i64> %122, %119
  %124 = or <4 x i64> %114, %107
  %125 = or <4 x i64> %124, %123
  %126 = bitcast <4 x i64> %125 to <8 x float>
  %127 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %101, <8 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <8 x float> %126) #7
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %3) #7
  ret <8 x float> %127
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_erff8_u10avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = bitcast <8 x float> %0 to <4 x i64>
  %3 = and <4 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <4 x i64> %3 to <8 x float>
  %5 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>, i8 17) #7
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>, i8 17) #7
  %7 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %4, <8 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i8 17) #7
  %8 = fmul <8 x float> %4, %4
  %9 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %4, <8 x float> %8, <8 x float> %5) #7
  %10 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>, <8 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <8 x float> %6) #7
  %11 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %10, <8 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <8 x float> %5) #7
  %12 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>, <8 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <8 x float> %6) #7
  %13 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %12, <8 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <8 x float> %5) #7
  %14 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %11, <8 x float> %9, <8 x float> %13) #7
  %15 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>, <8 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <8 x float> %6) #7
  %16 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %15, <8 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <8 x float> %5) #7
  %17 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %14, <8 x float> %9, <8 x float> %16) #7
  %18 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>, <8 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <8 x float> %6) #7
  %19 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %18, <8 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <8 x float> %5) #7
  %20 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %17, <8 x float> %9, <8 x float> %19) #7
  %21 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>, <8 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <8 x float> %6) #7
  %22 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %21, <8 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <8 x float> %5) #7
  %23 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %20, <8 x float> %9, <8 x float> %22) #7
  %24 = fmul <8 x float> %9, %23
  %25 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %24
  %26 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %23, <8 x float> %9, <8 x float> %25) #7
  %27 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>, <8 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <8 x float> %6) #7
  %28 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>, <8 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <8 x float> %6) #7
  %29 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %27, <8 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <8 x float> %5) #7
  %30 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %28, <8 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <8 x float> %5) #7
  %31 = fadd <8 x float> %24, %29
  %32 = fsub <8 x float> %31, %24
  %33 = fsub <8 x float> %31, %32
  %34 = fsub <8 x float> %24, %33
  %35 = fsub <8 x float> %29, %32
  %36 = fadd <8 x float> %35, %34
  %37 = fadd <8 x float> %26, %30
  %38 = fadd <8 x float> %37, %36
  %39 = fmul <8 x float> %9, %31
  %40 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %39
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %31, <8 x float> %9, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %38, <8 x float> %9, <8 x float> %41) #7
  %43 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>, <8 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <8 x float> %6) #7
  %44 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>, <8 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <8 x float> %6) #7
  %45 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %43, <8 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <8 x float> %5) #7
  %46 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %44, <8 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <8 x float> %5) #7
  %47 = fadd <8 x float> %39, %45
  %48 = fsub <8 x float> %47, %39
  %49 = fsub <8 x float> %47, %48
  %50 = fsub <8 x float> %39, %49
  %51 = fsub <8 x float> %45, %48
  %52 = fadd <8 x float> %51, %50
  %53 = fadd <8 x float> %42, %46
  %54 = fadd <8 x float> %53, %52
  %55 = fmul <8 x float> %47, %4
  %56 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %55
  %57 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %4, <8 x float> %56) #7
  %58 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %54, <8 x float> %4, <8 x float> %57) #7
  %59 = fadd <8 x float> %55, %58
  %60 = fmul <8 x float> %59, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %61 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %60) #7
  %62 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %61) #7
  %63 = fmul <8 x float> %62, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %64 = fadd <8 x float> %55, %63
  %65 = fsub <8 x float> %64, %55
  %66 = fsub <8 x float> %64, %65
  %67 = fsub <8 x float> %55, %66
  %68 = fsub <8 x float> %63, %65
  %69 = fadd <8 x float> %68, %67
  %70 = fadd <8 x float> %58, %69
  %71 = fmul <8 x float> %62, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %72 = fadd <8 x float> %71, %64
  %73 = fsub <8 x float> %72, %64
  %74 = fsub <8 x float> %72, %73
  %75 = fsub <8 x float> %64, %74
  %76 = fsub <8 x float> %71, %73
  %77 = fadd <8 x float> %76, %75
  %78 = fadd <8 x float> %77, %70
  %79 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>, <8 x float> %72, <8 x float> <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>) #7
  %80 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %79, <8 x float> %72, <8 x float> <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>) #7
  %81 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %80, <8 x float> %72, <8 x float> <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>) #7
  %82 = fmul <8 x float> %72, %81
  %83 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %82
  %84 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %81, <8 x float> %83) #7
  %85 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %81, <8 x float> %84) #7
  %86 = fadd <8 x float> %82, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %87 = fsub <8 x float> %86, %82
  %88 = fsub <8 x float> %86, %87
  %89 = fsub <8 x float> %82, %88
  %90 = fsub <8 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %87
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %85, %91
  %93 = fmul <8 x float> %72, %86
  %94 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %93
  %95 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %86, <8 x float> %94) #7
  %96 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %78, <8 x float> %86, <8 x float> %95) #7
  %97 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %92, <8 x float> %96) #7
  %98 = fadd <8 x float> %93, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %99 = fsub <8 x float> %98, %93
  %100 = fsub <8 x float> %98, %99
  %101 = fsub <8 x float> %93, %100
  %102 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %99
  %103 = fadd <8 x float> %102, %101
  %104 = fadd <8 x float> %97, %103
  %105 = fmul <8 x float> %72, %72
  %106 = fadd <8 x float> %72, %72
  %107 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %105
  %108 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %72, <8 x float> %72, <8 x float> %107) #7
  %109 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %106, <8 x float> %78, <8 x float> %108) #7
  %110 = fmul <8 x float> %105, %98
  %111 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %110
  %112 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %98, <8 x float> %111) #7
  %113 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %109, <8 x float> %98, <8 x float> %112) #7
  %114 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %105, <8 x float> %104, <8 x float> %113) #7
  %115 = fadd <8 x float> %72, %110
  %116 = fsub <8 x float> %115, %72
  %117 = fsub <8 x float> %115, %116
  %118 = fsub <8 x float> %72, %117
  %119 = fsub <8 x float> %110, %116
  %120 = fadd <8 x float> %119, %118
  %121 = fadd <8 x float> %78, %114
  %122 = fadd <8 x float> %120, %121
  %123 = fadd <8 x float> %115, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %124 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %123
  %125 = fadd <8 x float> %115, %124
  %126 = fadd <8 x float> %125, %122
  %127 = ashr <8 x i32> %61, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = shl <8 x i32> %127, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %129 = add <8 x i32> %128, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %130 = bitcast <8 x i32> %129 to <8 x float>
  %131 = fmul <8 x float> %123, %130
  %132 = sub <8 x i32> %61, %127
  %133 = shl <8 x i32> %132, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %134 = add <8 x i32> %133, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %135 = bitcast <8 x i32> %134 to <8 x float>
  %136 = fmul <8 x float> %131, %135
  %137 = fmul <8 x float> %126, %130
  %138 = fmul <8 x float> %137, %135
  %139 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %55, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %140 = bitcast <8 x float> %139 to <4 x i64>
  %141 = bitcast <8 x float> %136 to <4 x i64>
  %142 = xor <4 x i64> %140, <i64 -1, i64 -1, i64 -1, i64 -1>
  %143 = and <4 x i64> %142, %141
  %144 = bitcast <8 x float> %138 to <4 x i64>
  %145 = and <4 x i64> %144, %142
  %146 = xor <4 x i64> %143, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = xor <4 x i64> %145, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %148 = bitcast <4 x i64> %146 to <8 x float>
  %149 = bitcast <4 x i64> %147 to <8 x float>
  %150 = fadd <8 x float> %148, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %151 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %150
  %152 = fadd <8 x float> %151, %148
  %153 = fadd <8 x float> %152, %149
  %154 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %150, <8 x float> %55, <8 x float> %5) #7
  %155 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %153, <8 x float> %58, <8 x float> %5) #7
  %156 = fadd <8 x float> %154, %155
  %157 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %156, <8 x float> %7) #7
  %158 = bitcast <8 x float> %157 to <4 x i64>
  %159 = and <4 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %160 = xor <4 x i64> %159, %158
  %161 = bitcast <4 x i64> %160 to <8 x float>
  %162 = fcmp uno <8 x float> %4, zeroinitializer
  %163 = sext <8 x i1> %162 to <8 x i32>
  %164 = bitcast <8 x i32> %163 to <8 x float>
  %165 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %161, <8 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <8 x float> %164) #7
  ret <8 x float> %165
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_erfcf8_u15avx2(<8 x float>) local_unnamed_addr #0 {
  %2 = tail call <8 x float> @Sleef_erfcf8_u15avx2(<8 x float> %0)
  ret <8 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <8 x float> @Sleef_finz_fastpowf8_u3500avx2(<8 x float>, <8 x float>) local_unnamed_addr #0 {
  %3 = bitcast <8 x float> %0 to <4 x i64>
  %4 = and <4 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <4 x i64> %4 to <8 x float>
  %6 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %5, <8 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i8 17) #7
  %7 = fmul <8 x float> %5, <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>
  %8 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %5, <8 x float> %7, <8 x float> %6) #7
  %9 = fmul <8 x float> %8, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %10 = bitcast <8 x float> %9 to <8 x i32>
  %11 = lshr <8 x i32> %10, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %12 = and <8 x i32> %11, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %13 = add nsw <8 x i32> %12, <i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127, i32 -127>
  %14 = shl nuw nsw <8 x i32> %12, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %15 = bitcast <8 x float> %8 to <8 x i32>
  %16 = add <8 x i32> %15, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %17 = sub <8 x i32> %16, %14
  %18 = bitcast <8 x i32> %17 to <8 x float>
  %19 = add nsw <8 x i32> %12, <i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191, i32 -191>
  %20 = bitcast <8 x i32> %13 to <32 x i8>
  %21 = bitcast <8 x i32> %19 to <32 x i8>
  %22 = bitcast <8 x float> %6 to <32 x i8>
  %23 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %20, <32 x i8> %21, <32 x i8> %22) #7
  %24 = fadd <8 x float> %18, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %25 = fadd <8 x float> %18, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = fdiv <8 x float> %24, %25
  %27 = fmul <8 x float> %26, %26
  %28 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>, <8 x float> %27, <8 x float> <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>) #7
  %29 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %28, <8 x float> %27, <8 x float> <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>) #7
  %30 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %29, <8 x float> %27, <8 x float> <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>) #7
  %31 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %30, <8 x float> %27, <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>) #7
  %32 = bitcast <32 x i8> %23 to <8 x i32>
  %33 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %32) #7
  %34 = fmul <8 x float> %33, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %35 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %26, <8 x float> %31, <8 x float> %34) #7
  %36 = fmul <8 x float> %35, %1
  %37 = fmul <8 x float> %36, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %38 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %37) #7
  %39 = tail call <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32> %38) #7
  %40 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>, <8 x float> %36) #7
  %41 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %39, <8 x float> <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>, <8 x float> %40) #7
  %42 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>, <8 x float> %41, <8 x float> <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>) #7
  %43 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %42, <8 x float> %41, <8 x float> <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>) #7
  %44 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %43, <8 x float> %41, <8 x float> <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>) #7
  %45 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %44, <8 x float> %41, <8 x float> <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>) #7
  %46 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %45, <8 x float> %41, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #7
  %47 = fmul <8 x float> %41, %41
  %48 = fadd <8 x float> %41, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = tail call <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float> %47, <8 x float> %46, <8 x float> %48) #7
  %50 = ashr <8 x i32> %38, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %51 = shl <8 x i32> %50, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %52 = add <8 x i32> %51, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %53 = bitcast <8 x i32> %52 to <8 x float>
  %54 = fmul <8 x float> %49, %53
  %55 = sub <8 x i32> %38, %50
  %56 = shl <8 x i32> %55, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %57 = add <8 x i32> %56, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %58 = bitcast <8 x i32> %57 to <8 x float>
  %59 = fmul <8 x float> %54, %58
  %60 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %36, <8 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i8 17) #7
  %61 = bitcast <8 x float> %60 to <4 x i64>
  %62 = bitcast <8 x float> %59 to <4 x i64>
  %63 = xor <4 x i64> %61, <i64 -1, i64 -1, i64 -1, i64 -1>
  %64 = and <4 x i64> %62, %63
  %65 = bitcast <4 x i64> %64 to <8 x float>
  %66 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1, i32 11) #7
  %67 = fcmp oeq <8 x float> %66, %1
  %68 = sext <8 x i1> %67 to <8 x i32>
  %69 = bitcast <8 x i32> %68 to <4 x i64>
  %70 = bitcast <8 x float> %1 to <4 x i64>
  %71 = and <4 x i64> %70, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %72 = bitcast <4 x i64> %71 to <8 x float>
  %73 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %72, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 30) #7
  %74 = bitcast <8 x float> %73 to <4 x i64>
  %75 = or <4 x i64> %69, %74
  %76 = tail call <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float> %1) #7
  %77 = and <8 x i32> %76, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %78 = icmp ne <8 x i32> %77, zeroinitializer
  %79 = sext <8 x i1> %78 to <8 x i32>
  %80 = bitcast <8 x i32> %79 to <4 x i64>
  %81 = tail call <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float> %72, <8 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i8 17) #7
  %82 = bitcast <8 x float> %81 to <4 x i64>
  %83 = bitcast <8 x float> %0 to <8 x i32>
  %84 = ashr <8 x i32> %83, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %85 = bitcast <8 x i32> %84 to <4 x i64>
  %86 = and <4 x i64> %75, %85
  %87 = and <4 x i64> %86, %82
  %88 = and <4 x i64> %87, %80
  %89 = xor <4 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <4 x i64> %89 to <8 x float>
  %91 = bitcast <4 x i64> %88 to <8 x float>
  %92 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %65, <8 x float> %90, <8 x float> %91) #7
  %93 = fcmp oeq <8 x float> %0, zeroinitializer
  %94 = sext <8 x i1> %93 to <8 x i32>
  %95 = bitcast <8 x i32> %94 to <8 x float>
  %96 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %92, <8 x float> zeroinitializer, <8 x float> %95) #7
  %97 = fcmp oeq <8 x float> %1, zeroinitializer
  %98 = sext <8 x i1> %97 to <8 x i32>
  %99 = bitcast <8 x i32> %98 to <8 x float>
  %100 = tail call <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float> %96, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %99) #7
  ret <8 x float> %100
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf8_avx2(i32) local_unnamed_addr #3 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %18

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 7, i32 0) #7
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !36
  %10 = and i32 %9, 32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %18, label %12

; <label>:12:                                     ; preds = %5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 1, i32 0) #7
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %14 = load i32, i32* %13, align 8, !tbaa !36
  %15 = and i32 %14, 4096
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 0, i32 3
  br label %18

; <label>:18:                                     ; preds = %12, %5, %1
  %19 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %17, %12 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf8_avx2(i32) local_unnamed_addr #2 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8>, <32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestc(<2 x i64>, <2 x i64>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cmp.ps.256(<8 x float>, <8 x float>, i8) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.cvtdq2.ps.256(<8 x i32>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.fma.vfmadd.ps.256(<8 x float>, <8 x float>, <8 x float>) #4

; Function Attrs: argmemonly nounwind readonly
declare <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float>, i8*, <8 x i32>, <8 x float>, i8) #5

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.blendv.ps.256(<8 x float>, <8 x float>, <8 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32) #4

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvtt.ps2dq.256(<8 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.sqrt.ps.256(<8 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #4

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #6

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { argmemonly nounwind readonly }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"rempif: argument 0"}
!5 = distinct !{!5, !"rempif"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"rempif: argument 0"}
!8 = distinct !{!8, !"rempif"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"rempif: argument 0"}
!11 = distinct !{!11, !"rempif"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"rempif: argument 0"}
!14 = distinct !{!14, !"rempif"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"rempif: argument 0"}
!17 = distinct !{!17, !"rempif"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"rempif: argument 0"}
!20 = distinct !{!20, !"rempif"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"rempif: argument 0"}
!23 = distinct !{!23, !"rempif"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"rempif: argument 0"}
!26 = distinct !{!26, !"rempif"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"Sleef_sincospif8_u05avx2: argument 0"}
!29 = distinct !{!29, !"Sleef_sincospif8_u05avx2"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"Sleef_sincospif8_u35avx2: argument 0"}
!32 = distinct !{!32, !"Sleef_sincospif8_u35avx2"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"Sleef_modff8_avx2: argument 0"}
!35 = distinct !{!35, !"Sleef_modff8_avx2"}
!36 = !{!37, !37, i64 0}
!37 = !{!"int", !38, i64 0}
!38 = !{!"omnipotent char", !39, i64 0}
!39 = !{!"Simple C/C++ TBAA"}
