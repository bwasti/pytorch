; ModuleID = '/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c'
source_filename = "/home/bwasti/pytorch/sleef/src/libm/sleefsimdsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.vfloat2 = type { <16 x float>, <16 x float> }
%struct.df2 = type { %struct.vfloat2, %struct.vfloat2 }

@.str = private unnamed_addr constant [13 x i8] c"AVX512FNOFMA\00", align 1
@rempitabsp = external constant [0 x float], align 4

; Function Attrs: nounwind readnone uwtable
define <8 x i64> @Sleef_ilogbf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %8 = bitcast i16 %7 to <16 x i1>
  %9 = select <16 x i1> %8, <16 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <16 x i32> %6
  %10 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %11 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %12 = or i16 %11, %10
  %13 = bitcast i16 %12 to <16 x i1>
  %14 = select <16 x i1> %13, <16 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <16 x i32> %9
  %15 = bitcast <16 x i32> %14 to <8 x i64>
  ret <8 x i64> %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone uwtable
define <16 x float> @Sleef_ldexpf16_avx512fnofma(<16 x float>, <8 x i64>) local_unnamed_addr #2 {
  %3 = bitcast <8 x i64> %1 to <16 x i32>
  %4 = ashr <16 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = add <16 x i32> %4, %3
  %6 = ashr <16 x i32> %5, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %7 = sub nsw <16 x i32> %6, %4
  %8 = shl nsw <16 x i32> %7, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %9 = shl <16 x i32> %7, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %10 = sub <16 x i32> %3, %9
  %11 = add nsw <16 x i32> %8, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %12 = icmp sgt <16 x i32> %7, <i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8>
  %13 = select <16 x i1> %12, <16 x i32> %11, <16 x i32> zeroinitializer
  %14 = bitcast <16 x i32> %13 to <8 x i64>
  %15 = icmp sgt <16 x i32> %13, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %16 = sext <16 x i1> %15 to <16 x i32>
  %17 = bitcast <16 x i32> %16 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1>
  %19 = and <8 x i64> %18, %14
  %20 = and <8 x i64> %17, <i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735>
  %21 = or <8 x i64> %20, %19
  %22 = bitcast <8 x i64> %21 to <16 x i32>
  %23 = shl <16 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = bitcast <16 x i32> %23 to <16 x float>
  %25 = fmul <16 x float> %24, %0
  %26 = fmul <16 x float> %25, %24
  %27 = fmul <16 x float> %26, %24
  %28 = fmul <16 x float> %27, %24
  %29 = shl <16 x i32> %10, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <16 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = fmul <16 x float> %28, %31
  ret <16 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sinf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %17, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %9 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %8, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %10, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %12 = fadd <16 x float> %11, %0
  %13 = fmul <16 x float> %10, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %14 = fadd <16 x float> %13, %12
  %15 = fmul <16 x float> %10, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %16 = fadd <16 x float> %15, %14
  br label %206

; <label>:17:                                     ; preds = %1
  %18 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i32 17, i16 -1, i32 4) #7
  %19 = icmp eq i16 %18, -1
  br i1 %19, label %20, label %32, !prof !2

; <label>:20:                                     ; preds = %17
  %21 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %22 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %21, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %22, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %24 = fmul <16 x float> %23, <float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000, float 0xC009200000000000>
  %25 = fadd <16 x float> %24, %0
  %26 = fmul <16 x float> %23, <float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000, float 0xBF4FB00000000000>
  %27 = fadd <16 x float> %26, %25
  %28 = fmul <16 x float> %23, <float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000, float 0xBEA5100000000000>
  %29 = fadd <16 x float> %28, %27
  %30 = fmul <16 x float> %23, <float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000, float 0xBDE0B46120000000>
  %31 = fadd <16 x float> %30, %29
  br label %206

; <label>:32:                                     ; preds = %17
  %33 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %34 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %33, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %35 = ashr <16 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = xor <16 x i32> %35, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %37 = and <16 x i32> %34, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %38 = and <16 x i32> %37, %36
  %39 = add nsw <16 x i32> %38, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %40 = icmp ugt <16 x i32> %38, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %41 = select <16 x i1> %40, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %42 = bitcast <16 x float> %0 to <16 x i32>
  %43 = add <16 x i32> %41, %42
  %44 = bitcast <16 x i32> %43 to <16 x float>
  %45 = ashr <16 x i32> %39, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %46 = xor <16 x i32> %45, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %47 = and <16 x i32> %46, %39
  %48 = shl <16 x i32> %47, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %49 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !3
  %50 = bitcast <16 x i32> %43 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %44, %52
  %54 = bitcast <16 x float> %49 to <8 x i64>
  %55 = and <8 x i64> %54, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <8 x i64> %55 to <16 x float>
  %57 = fsub <16 x float> %49, %56
  %58 = fmul <16 x float> %49, %44
  %59 = bitcast <16 x float> %58 to <8 x i64>
  %60 = xor <8 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <8 x i64> %60 to <16 x float>
  %62 = fmul <16 x float> %56, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %53, %56
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %57, %52
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %57, %53
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %58, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %71 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %70, i32 8, <16 x float> %70, i16 -1, i32 4) #7
  %72 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %58, i32 8, <16 x float> %58, i16 -1, i32 4) #7
  %73 = fmul <16 x float> %72, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %74 = fsub <16 x float> %71, %73
  %75 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %74, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %76 = fmul <16 x float> %71, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %77 = fsub <16 x float> %58, %76
  %78 = fadd <16 x float> %77, %69
  %79 = fsub <16 x float> %77, %78
  %80 = fadd <16 x float> %69, %79
  %81 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !3
  %82 = bitcast <16 x float> %81 to <8 x i64>
  %83 = and <8 x i64> %82, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %84 = bitcast <8 x i64> %83 to <16 x float>
  %85 = fsub <16 x float> %81, %84
  %86 = fmul <16 x float> %81, %44
  %87 = bitcast <16 x float> %86 to <8 x i64>
  %88 = xor <8 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %89 = bitcast <8 x i64> %88 to <16 x float>
  %90 = fmul <16 x float> %84, %52
  %91 = fadd <16 x float> %90, %89
  %92 = fmul <16 x float> %53, %84
  %93 = fadd <16 x float> %92, %91
  %94 = fmul <16 x float> %85, %52
  %95 = fadd <16 x float> %94, %93
  %96 = fmul <16 x float> %85, %53
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %86, %78
  %99 = fsub <16 x float> %98, %78
  %100 = fsub <16 x float> %98, %99
  %101 = fsub <16 x float> %78, %100
  %102 = fsub <16 x float> %86, %99
  %103 = fadd <16 x float> %102, %101
  %104 = fadd <16 x float> %97, %80
  %105 = fadd <16 x float> %104, %103
  %106 = fmul <16 x float> %98, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %107 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %106, i32 8, <16 x float> %106, i16 -1, i32 4) #7
  %108 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %98, i32 8, <16 x float> %98, i16 -1, i32 4) #7
  %109 = fmul <16 x float> %108, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %110 = fsub <16 x float> %107, %109
  %111 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %110, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %112 = fmul <16 x float> %107, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %113 = fsub <16 x float> %98, %112
  %114 = add <16 x i32> %111, %75
  %115 = fadd <16 x float> %113, %105
  %116 = fsub <16 x float> %113, %115
  %117 = fadd <16 x float> %105, %116
  %118 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !3
  %119 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !3
  %120 = bitcast <16 x float> %118 to <8 x i64>
  %121 = and <8 x i64> %120, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fsub <16 x float> %118, %122
  %124 = fmul <16 x float> %118, %44
  %125 = bitcast <16 x float> %124 to <8 x i64>
  %126 = xor <8 x i64> %125, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %127 = bitcast <8 x i64> %126 to <16 x float>
  %128 = fmul <16 x float> %52, %122
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %123, %52
  %131 = fadd <16 x float> %130, %129
  %132 = fmul <16 x float> %53, %122
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %53, %123
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %119, %44
  %137 = fadd <16 x float> %136, %135
  %138 = fadd <16 x float> %124, %115
  %139 = fsub <16 x float> %138, %115
  %140 = fsub <16 x float> %138, %139
  %141 = fsub <16 x float> %115, %140
  %142 = fsub <16 x float> %124, %139
  %143 = fadd <16 x float> %142, %141
  %144 = fadd <16 x float> %137, %117
  %145 = fadd <16 x float> %144, %143
  %146 = fadd <16 x float> %138, %145
  %147 = fsub <16 x float> %138, %146
  %148 = fadd <16 x float> %145, %147
  %149 = bitcast <16 x float> %146 to <8 x i64>
  %150 = and <8 x i64> %149, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fsub <16 x float> %146, %151
  %153 = fmul <16 x float> %146, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %154 = bitcast <16 x float> %153 to <8 x i64>
  %155 = xor <8 x i64> %154, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fmul <16 x float> %151, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %152, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %151, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %162 = fadd <16 x float> %161, %160
  %163 = fmul <16 x float> %152, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %146, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %148, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %168 = fadd <16 x float> %167, %166
  %169 = and <8 x i64> %50, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %172 = bitcast i16 %171 to <16 x i1>
  %173 = select <16 x i1> %172, <16 x float> %44, <16 x float> %153
  %174 = select <16 x i1> %172, <16 x float> zeroinitializer, <16 x float> %168
  %175 = shl <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %176 = and <16 x i32> %175, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %173, <16 x float> zeroinitializer, i32 30, i16 -1, i32 4) #7
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = select <16 x i1> %178, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %180 = add nuw nsw <16 x i32> %179, %176
  %181 = lshr <16 x i32> %180, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %182 = and <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %183 = icmp ne <16 x i32> %182, zeroinitializer
  %184 = bitcast <16 x float> %173 to <8 x i64>
  %185 = and <8 x i64> %184, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %186 = xor <8 x i64> %185, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %187 = bitcast <8 x i64> %186 to <16 x float>
  %188 = or <8 x i64> %185, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %189 = bitcast <8 x i64> %188 to <16 x float>
  %190 = fadd <16 x float> %173, %187
  %191 = fsub <16 x float> %190, %173
  %192 = fsub <16 x float> %190, %191
  %193 = fsub <16 x float> %173, %192
  %194 = fsub <16 x float> %187, %191
  %195 = fadd <16 x float> %194, %193
  %196 = fadd <16 x float> %174, %189
  %197 = fadd <16 x float> %195, %196
  %198 = select <16 x i1> %183, <16 x float> %190, <16 x float> %173
  %199 = select <16 x i1> %183, <16 x float> %197, <16 x float> %174
  %200 = fadd <16 x float> %198, %199
  %201 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %202 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %203 = or i16 %202, %201
  %204 = bitcast i16 %203 to <16 x i1>
  %205 = select <16 x i1> %204, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %200
  br label %206

; <label>:206:                                    ; preds = %20, %32, %7
  %207 = phi <16 x i32> [ %9, %7 ], [ %22, %20 ], [ %181, %32 ]
  %208 = phi <16 x float> [ %16, %7 ], [ %31, %20 ], [ %205, %32 ]
  %209 = fmul <16 x float> %208, %208
  %210 = shl <16 x i32> %207, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %211 = bitcast <16 x i32> %210 to <8 x i64>
  %212 = bitcast <16 x float> %208 to <8 x i64>
  %213 = xor <8 x i64> %212, %211
  %214 = bitcast <8 x i64> %213 to <16 x float>
  %215 = fmul <16 x float> %209, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %216 = fadd <16 x float> %215, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %217 = fmul <16 x float> %209, %216
  %218 = fadd <16 x float> %217, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %219 = fmul <16 x float> %209, %218
  %220 = fadd <16 x float> %219, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %221 = fmul <16 x float> %220, %214
  %222 = fmul <16 x float> %209, %221
  %223 = fadd <16 x float> %222, %214
  %224 = bitcast <16 x float> %0 to <16 x i32>
  %225 = icmp eq <16 x i32> %224, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %226 = select <16 x i1> %225, <16 x float> %0, <16 x float> %223
  ret <16 x float> %226
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cosf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %20, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %9 = fadd <16 x float> %8, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %9, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = shl <16 x i32> %10, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = or <16 x i32> %11, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %13 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %12, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %14 = fmul <16 x float> %13, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %15 = fadd <16 x float> %14, %0
  %16 = fmul <16 x float> %13, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %17 = fadd <16 x float> %16, %15
  %18 = fmul <16 x float> %13, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %19 = fadd <16 x float> %18, %17
  br label %213

; <label>:20:                                     ; preds = %1
  %21 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i32 17, i16 -1, i32 4) #7
  %22 = icmp eq i16 %21, -1
  br i1 %22, label %23, label %38, !prof !2

; <label>:23:                                     ; preds = %20
  %24 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %25 = fadd <16 x float> %24, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %26 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %25, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %27 = shl <16 x i32> %26, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %28 = or <16 x i32> %27, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %29 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %28, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %30 = fmul <16 x float> %29, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %31 = fadd <16 x float> %30, %0
  %32 = fmul <16 x float> %29, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %33 = fadd <16 x float> %32, %31
  %34 = fmul <16 x float> %29, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %35 = fadd <16 x float> %34, %33
  %36 = fmul <16 x float> %29, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %37 = fadd <16 x float> %36, %35
  br label %213

; <label>:38:                                     ; preds = %20
  %39 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %40 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %39, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %41 = ashr <16 x i32> %40, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %42 = xor <16 x i32> %41, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %43 = and <16 x i32> %40, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %44 = and <16 x i32> %43, %42
  %45 = add nsw <16 x i32> %44, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %46 = icmp ugt <16 x i32> %44, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %47 = select <16 x i1> %46, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %48 = bitcast <16 x float> %0 to <16 x i32>
  %49 = add <16 x i32> %47, %48
  %50 = bitcast <16 x i32> %49 to <16 x float>
  %51 = ashr <16 x i32> %45, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %52 = xor <16 x i32> %51, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %53 = and <16 x i32> %52, %45
  %54 = shl <16 x i32> %53, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %55 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %54, i16 -1, i32 4) #7, !noalias !6
  %56 = bitcast <16 x i32> %49 to <8 x i64>
  %57 = and <8 x i64> %56, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %58 = bitcast <8 x i64> %57 to <16 x float>
  %59 = fsub <16 x float> %50, %58
  %60 = bitcast <16 x float> %55 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fsub <16 x float> %55, %62
  %64 = fmul <16 x float> %55, %50
  %65 = bitcast <16 x float> %64 to <8 x i64>
  %66 = xor <8 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <8 x i64> %66 to <16 x float>
  %68 = fmul <16 x float> %62, %58
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %59, %62
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %63, %58
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %63, %59
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %64, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %77 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %76, i32 8, <16 x float> %76, i16 -1, i32 4) #7
  %78 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %64, i32 8, <16 x float> %64, i16 -1, i32 4) #7
  %79 = fmul <16 x float> %78, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %80 = fsub <16 x float> %77, %79
  %81 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %80, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %82 = fmul <16 x float> %77, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %83 = fsub <16 x float> %64, %82
  %84 = fadd <16 x float> %83, %75
  %85 = fsub <16 x float> %83, %84
  %86 = fadd <16 x float> %75, %85
  %87 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %54, i16 -1, i32 4) #7, !noalias !6
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = and <8 x i64> %88, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fsub <16 x float> %87, %90
  %92 = fmul <16 x float> %87, %50
  %93 = bitcast <16 x float> %92 to <8 x i64>
  %94 = xor <8 x i64> %93, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %95 = bitcast <8 x i64> %94 to <16 x float>
  %96 = fmul <16 x float> %90, %58
  %97 = fadd <16 x float> %96, %95
  %98 = fmul <16 x float> %59, %90
  %99 = fadd <16 x float> %98, %97
  %100 = fmul <16 x float> %91, %58
  %101 = fadd <16 x float> %100, %99
  %102 = fmul <16 x float> %91, %59
  %103 = fadd <16 x float> %102, %101
  %104 = fadd <16 x float> %92, %84
  %105 = fsub <16 x float> %104, %84
  %106 = fsub <16 x float> %104, %105
  %107 = fsub <16 x float> %84, %106
  %108 = fsub <16 x float> %92, %105
  %109 = fadd <16 x float> %108, %107
  %110 = fadd <16 x float> %103, %86
  %111 = fadd <16 x float> %110, %109
  %112 = fmul <16 x float> %104, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %113 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %112, i32 8, <16 x float> %112, i16 -1, i32 4) #7
  %114 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %104, i32 8, <16 x float> %104, i16 -1, i32 4) #7
  %115 = fmul <16 x float> %114, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %116 = fsub <16 x float> %113, %115
  %117 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %116, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %118 = fmul <16 x float> %113, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %119 = fsub <16 x float> %104, %118
  %120 = add <16 x i32> %117, %81
  %121 = fadd <16 x float> %119, %111
  %122 = fsub <16 x float> %119, %121
  %123 = fadd <16 x float> %111, %122
  %124 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %54, i16 -1, i32 4) #7, !noalias !6
  %125 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %54, i16 -1, i32 4) #7, !noalias !6
  %126 = bitcast <16 x float> %124 to <8 x i64>
  %127 = and <8 x i64> %126, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %128 = bitcast <8 x i64> %127 to <16 x float>
  %129 = fsub <16 x float> %124, %128
  %130 = fmul <16 x float> %124, %50
  %131 = bitcast <16 x float> %130 to <8 x i64>
  %132 = xor <8 x i64> %131, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %133 = bitcast <8 x i64> %132 to <16 x float>
  %134 = fmul <16 x float> %58, %128
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %129, %58
  %137 = fadd <16 x float> %136, %135
  %138 = fmul <16 x float> %59, %128
  %139 = fadd <16 x float> %138, %137
  %140 = fmul <16 x float> %59, %129
  %141 = fadd <16 x float> %140, %139
  %142 = fmul <16 x float> %125, %50
  %143 = fadd <16 x float> %142, %141
  %144 = fadd <16 x float> %130, %121
  %145 = fsub <16 x float> %144, %121
  %146 = fsub <16 x float> %144, %145
  %147 = fsub <16 x float> %121, %146
  %148 = fsub <16 x float> %130, %145
  %149 = fadd <16 x float> %148, %147
  %150 = fadd <16 x float> %143, %123
  %151 = fadd <16 x float> %150, %149
  %152 = fadd <16 x float> %144, %151
  %153 = fsub <16 x float> %144, %152
  %154 = fadd <16 x float> %151, %153
  %155 = bitcast <16 x float> %152 to <8 x i64>
  %156 = and <8 x i64> %155, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fsub <16 x float> %152, %157
  %159 = fmul <16 x float> %152, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %160 = bitcast <16 x float> %159 to <8 x i64>
  %161 = xor <8 x i64> %160, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %162 = bitcast <8 x i64> %161 to <16 x float>
  %163 = fmul <16 x float> %157, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %158, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %157, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %168 = fadd <16 x float> %167, %166
  %169 = fmul <16 x float> %158, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %170 = fadd <16 x float> %169, %168
  %171 = fmul <16 x float> %152, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %172 = fadd <16 x float> %171, %170
  %173 = fmul <16 x float> %154, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %174 = fadd <16 x float> %173, %172
  %175 = and <8 x i64> %56, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %176 = bitcast <8 x i64> %175 to <16 x float>
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %176, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = select <16 x i1> %178, <16 x float> %50, <16 x float> %159
  %180 = select <16 x i1> %178, <16 x float> zeroinitializer, <16 x float> %174
  %181 = shl <16 x i32> %120, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %182 = and <16 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %179, <16 x float> zeroinitializer, i32 30, i16 -1, i32 4) #7
  %184 = bitcast i16 %183 to <16 x i1>
  %185 = select <16 x i1> %184, <16 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %186 = add nuw nsw <16 x i32> %185, %182
  %187 = lshr <16 x i32> %186, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %188 = and <16 x i32> %120, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %189 = icmp eq <16 x i32> %188, zeroinitializer
  %190 = select <16 x i1> %184, <16 x float> zeroinitializer, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %191 = bitcast <16 x float> %190 to <8 x i64>
  %192 = and <8 x i64> %191, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %193 = xor <8 x i64> %192, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %194 = bitcast <8 x i64> %193 to <16 x float>
  %195 = or <8 x i64> %192, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %196 = bitcast <8 x i64> %195 to <16 x float>
  %197 = fadd <16 x float> %179, %194
  %198 = fsub <16 x float> %197, %179
  %199 = fsub <16 x float> %197, %198
  %200 = fsub <16 x float> %179, %199
  %201 = fsub <16 x float> %194, %198
  %202 = fadd <16 x float> %201, %200
  %203 = fadd <16 x float> %180, %196
  %204 = fadd <16 x float> %202, %203
  %205 = select <16 x i1> %189, <16 x float> %197, <16 x float> %179
  %206 = select <16 x i1> %189, <16 x float> %204, <16 x float> %180
  %207 = fadd <16 x float> %205, %206
  %208 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %209 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %210 = or i16 %209, %208
  %211 = bitcast i16 %210 to <16 x i1>
  %212 = select <16 x i1> %211, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %207
  br label %213

; <label>:213:                                    ; preds = %23, %38, %7
  %214 = phi <16 x i32> [ %12, %7 ], [ %28, %23 ], [ %187, %38 ]
  %215 = phi <16 x float> [ %19, %7 ], [ %37, %23 ], [ %212, %38 ]
  %216 = fmul <16 x float> %215, %215
  %217 = shl <16 x i32> %214, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %218 = bitcast <16 x i32> %217 to <8 x i64>
  %219 = and <8 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %220 = bitcast <16 x float> %215 to <8 x i64>
  %221 = xor <8 x i64> %220, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %222 = xor <8 x i64> %221, %219
  %223 = bitcast <8 x i64> %222 to <16 x float>
  %224 = fmul <16 x float> %216, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %225 = fadd <16 x float> %224, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %226 = fmul <16 x float> %216, %225
  %227 = fadd <16 x float> %226, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %228 = fmul <16 x float> %216, %227
  %229 = fadd <16 x float> %228, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %230 = fmul <16 x float> %229, %223
  %231 = fmul <16 x float> %216, %230
  %232 = fadd <16 x float> %231, %223
  ret <16 x float> %232
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_tanf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01, float 6.250000e+01>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %17, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %9 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %8, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %10, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %12 = fadd <16 x float> %11, %0
  %13 = fmul <16 x float> %10, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %14 = fadd <16 x float> %13, %12
  %15 = fmul <16 x float> %10, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %16 = fadd <16 x float> %15, %14
  br label %183

; <label>:17:                                     ; preds = %1
  %18 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i32 17, i16 -1, i32 4) #7
  %19 = icmp eq i16 %18, -1
  br i1 %19, label %20, label %32, !prof !2

; <label>:20:                                     ; preds = %17
  %21 = fmul <16 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %22 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %21, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %22, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %24 = fmul <16 x float> %23, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %25 = fadd <16 x float> %24, %0
  %26 = fmul <16 x float> %23, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %27 = fadd <16 x float> %26, %25
  %28 = fmul <16 x float> %23, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %29 = fadd <16 x float> %28, %27
  %30 = fmul <16 x float> %23, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %31 = fadd <16 x float> %30, %29
  br label %183

; <label>:32:                                     ; preds = %17
  %33 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %34 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %33, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %35 = ashr <16 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %36 = xor <16 x i32> %35, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %37 = and <16 x i32> %34, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %38 = and <16 x i32> %37, %36
  %39 = add nsw <16 x i32> %38, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %40 = icmp ugt <16 x i32> %38, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %41 = select <16 x i1> %40, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %42 = bitcast <16 x float> %0 to <16 x i32>
  %43 = add <16 x i32> %41, %42
  %44 = bitcast <16 x i32> %43 to <16 x float>
  %45 = ashr <16 x i32> %39, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %46 = xor <16 x i32> %45, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %47 = and <16 x i32> %46, %39
  %48 = shl <16 x i32> %47, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %49 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !9
  %50 = bitcast <16 x i32> %43 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %44, %52
  %54 = bitcast <16 x float> %49 to <8 x i64>
  %55 = and <8 x i64> %54, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %56 = bitcast <8 x i64> %55 to <16 x float>
  %57 = fsub <16 x float> %49, %56
  %58 = fmul <16 x float> %49, %44
  %59 = bitcast <16 x float> %58 to <8 x i64>
  %60 = xor <8 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <8 x i64> %60 to <16 x float>
  %62 = fmul <16 x float> %56, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %53, %56
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %57, %52
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %57, %53
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %58, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %71 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %70, i32 8, <16 x float> %70, i16 -1, i32 4) #7
  %72 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %58, i32 8, <16 x float> %58, i16 -1, i32 4) #7
  %73 = fmul <16 x float> %72, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %74 = fsub <16 x float> %71, %73
  %75 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %74, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %76 = fmul <16 x float> %71, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %77 = fsub <16 x float> %58, %76
  %78 = fadd <16 x float> %77, %69
  %79 = fsub <16 x float> %77, %78
  %80 = fadd <16 x float> %69, %79
  %81 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !9
  %82 = bitcast <16 x float> %81 to <8 x i64>
  %83 = and <8 x i64> %82, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %84 = bitcast <8 x i64> %83 to <16 x float>
  %85 = fsub <16 x float> %81, %84
  %86 = fmul <16 x float> %81, %44
  %87 = bitcast <16 x float> %86 to <8 x i64>
  %88 = xor <8 x i64> %87, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %89 = bitcast <8 x i64> %88 to <16 x float>
  %90 = fmul <16 x float> %84, %52
  %91 = fadd <16 x float> %90, %89
  %92 = fmul <16 x float> %53, %84
  %93 = fadd <16 x float> %92, %91
  %94 = fmul <16 x float> %85, %52
  %95 = fadd <16 x float> %94, %93
  %96 = fmul <16 x float> %85, %53
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %86, %78
  %99 = fsub <16 x float> %98, %78
  %100 = fsub <16 x float> %98, %99
  %101 = fsub <16 x float> %78, %100
  %102 = fsub <16 x float> %86, %99
  %103 = fadd <16 x float> %102, %101
  %104 = fadd <16 x float> %97, %80
  %105 = fadd <16 x float> %104, %103
  %106 = fmul <16 x float> %98, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %107 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %106, i32 8, <16 x float> %106, i16 -1, i32 4) #7
  %108 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %98, i32 8, <16 x float> %98, i16 -1, i32 4) #7
  %109 = fmul <16 x float> %108, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %110 = fsub <16 x float> %107, %109
  %111 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %110, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %112 = fmul <16 x float> %107, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %113 = fsub <16 x float> %98, %112
  %114 = add <16 x i32> %111, %75
  %115 = fadd <16 x float> %113, %105
  %116 = fsub <16 x float> %113, %115
  %117 = fadd <16 x float> %105, %116
  %118 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !9
  %119 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %48, i16 -1, i32 4) #7, !noalias !9
  %120 = bitcast <16 x float> %118 to <8 x i64>
  %121 = and <8 x i64> %120, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fsub <16 x float> %118, %122
  %124 = fmul <16 x float> %118, %44
  %125 = bitcast <16 x float> %124 to <8 x i64>
  %126 = xor <8 x i64> %125, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %127 = bitcast <8 x i64> %126 to <16 x float>
  %128 = fmul <16 x float> %52, %122
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %123, %52
  %131 = fadd <16 x float> %130, %129
  %132 = fmul <16 x float> %53, %122
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %53, %123
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %119, %44
  %137 = fadd <16 x float> %136, %135
  %138 = fadd <16 x float> %124, %115
  %139 = fsub <16 x float> %138, %115
  %140 = fsub <16 x float> %138, %139
  %141 = fsub <16 x float> %115, %140
  %142 = fsub <16 x float> %124, %139
  %143 = fadd <16 x float> %142, %141
  %144 = fadd <16 x float> %137, %117
  %145 = fadd <16 x float> %144, %143
  %146 = fadd <16 x float> %138, %145
  %147 = fsub <16 x float> %138, %146
  %148 = fadd <16 x float> %145, %147
  %149 = bitcast <16 x float> %146 to <8 x i64>
  %150 = and <8 x i64> %149, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fsub <16 x float> %146, %151
  %153 = fmul <16 x float> %146, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %154 = bitcast <16 x float> %153 to <8 x i64>
  %155 = xor <8 x i64> %154, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fmul <16 x float> %151, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %152, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %151, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %162 = fadd <16 x float> %161, %160
  %163 = fmul <16 x float> %152, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %146, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %148, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %168 = fadd <16 x float> %167, %166
  %169 = and <8 x i64> %50, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %172 = bitcast i16 %171 to <16 x i1>
  %173 = select <16 x i1> %172, <16 x float> %44, <16 x float> %153
  %174 = select <16 x i1> %172, <16 x float> zeroinitializer, <16 x float> %168
  %175 = fadd <16 x float> %173, %174
  %176 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %178 = or i16 %177, %176
  %179 = bitcast i16 %178 to <16 x i1>
  %180 = select <16 x i1> %179, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %175
  %181 = icmp eq <16 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %182 = select <16 x i1> %181, <16 x float> %0, <16 x float> %180
  br label %183

; <label>:183:                                    ; preds = %20, %32, %7
  %184 = phi <16 x float> [ %16, %7 ], [ %31, %20 ], [ %182, %32 ]
  %185 = phi <16 x i32> [ %9, %7 ], [ %22, %20 ], [ %114, %32 ]
  %186 = fmul <16 x float> %184, %184
  %187 = and <16 x i32> %185, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %188 = icmp eq <16 x i32> %187, zeroinitializer
  %189 = shl <16 x i32> %185, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %190 = bitcast <16 x i32> %189 to <8 x i64>
  %191 = bitcast <16 x float> %184 to <8 x i64>
  %192 = xor <8 x i64> %190, %191
  %193 = bitcast <8 x i64> %192 to <16 x float>
  %194 = fmul <16 x float> %186, %186
  %195 = fmul <16 x float> %194, %194
  %196 = fmul <16 x float> %186, <float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000, float 0x3F82FD7040000000>
  %197 = fadd <16 x float> %196, <float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000, float 0x3F6B323AE0000000>
  %198 = fmul <16 x float> %186, <float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000, float 0x3F98E20C80000000>
  %199 = fadd <16 x float> %198, <float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000, float 0x3FAB5DBCA0000000>
  %200 = fmul <16 x float> %186, <float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000, float 0x3FC112B1C0000000>
  %201 = fadd <16 x float> %200, <float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000, float 0x3FD5554F20000000>
  %202 = fmul <16 x float> %194, %199
  %203 = fadd <16 x float> %201, %202
  %204 = fmul <16 x float> %195, %197
  %205 = fadd <16 x float> %204, %203
  %206 = fmul <16 x float> %205, %193
  %207 = fmul <16 x float> %186, %206
  %208 = fadd <16 x float> %207, %193
  %209 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %208
  %210 = select <16 x i1> %188, <16 x float> %208, <16 x float> %209
  ret <16 x float> %210
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sinf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %26, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %8, i32 8, <16 x float> %8, i16 -1, i32 4) #7
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %9, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %9, <float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000, float 0xC00921C000000000>
  %12 = fadd <16 x float> %11, %0
  %13 = fmul <16 x float> %9, <float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000, float 0xBF1DAA0000000000>
  %14 = fadd <16 x float> %13, %12
  %15 = fsub <16 x float> %14, %12
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> %12, %16
  %18 = fsub <16 x float> %13, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %9, <float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000, float 0xBE210B4620000000>
  %21 = fadd <16 x float> %20, %14
  %22 = fsub <16 x float> %14, %21
  %23 = fadd <16 x float> %20, %22
  %24 = fadd <16 x float> %23, %19
  %25 = bitcast <16 x float> %0 to <16 x i32>
  br label %202

; <label>:26:                                     ; preds = %1
  %27 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %28 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %27, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %29 = ashr <16 x i32> %28, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %30 = xor <16 x i32> %29, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %31 = and <16 x i32> %28, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %32 = and <16 x i32> %31, %30
  %33 = add nsw <16 x i32> %32, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %34 = icmp ugt <16 x i32> %32, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %35 = select <16 x i1> %34, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %36 = bitcast <16 x float> %0 to <16 x i32>
  %37 = add <16 x i32> %35, %36
  %38 = bitcast <16 x i32> %37 to <16 x float>
  %39 = ashr <16 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %40 = xor <16 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <16 x i32> %40, %33
  %42 = shl <16 x i32> %41, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %43 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !12
  %44 = bitcast <16 x i32> %37 to <8 x i64>
  %45 = and <8 x i64> %44, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %46 = bitcast <8 x i64> %45 to <16 x float>
  %47 = fsub <16 x float> %38, %46
  %48 = bitcast <16 x float> %43 to <8 x i64>
  %49 = and <8 x i64> %48, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <8 x i64> %49 to <16 x float>
  %51 = fsub <16 x float> %43, %50
  %52 = fmul <16 x float> %43, %38
  %53 = bitcast <16 x float> %52 to <8 x i64>
  %54 = xor <8 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <8 x i64> %54 to <16 x float>
  %56 = fmul <16 x float> %50, %46
  %57 = fadd <16 x float> %56, %55
  %58 = fmul <16 x float> %47, %50
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %51, %46
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %51, %47
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %52, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %65 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %64, i32 8, <16 x float> %64, i16 -1, i32 4) #7
  %66 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %52, i32 8, <16 x float> %52, i16 -1, i32 4) #7
  %67 = fmul <16 x float> %66, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %68 = fsub <16 x float> %65, %67
  %69 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %68, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %70 = fmul <16 x float> %65, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %71 = fsub <16 x float> %52, %70
  %72 = fadd <16 x float> %71, %63
  %73 = fsub <16 x float> %71, %72
  %74 = fadd <16 x float> %63, %73
  %75 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !12
  %76 = bitcast <16 x float> %75 to <8 x i64>
  %77 = and <8 x i64> %76, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <8 x i64> %77 to <16 x float>
  %79 = fsub <16 x float> %75, %78
  %80 = fmul <16 x float> %75, %38
  %81 = bitcast <16 x float> %80 to <8 x i64>
  %82 = xor <8 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <8 x i64> %82 to <16 x float>
  %84 = fmul <16 x float> %78, %46
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %47, %78
  %87 = fadd <16 x float> %86, %85
  %88 = fmul <16 x float> %79, %46
  %89 = fadd <16 x float> %88, %87
  %90 = fmul <16 x float> %79, %47
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %80, %72
  %93 = fsub <16 x float> %92, %72
  %94 = fsub <16 x float> %92, %93
  %95 = fsub <16 x float> %72, %94
  %96 = fsub <16 x float> %80, %93
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %91, %74
  %99 = fadd <16 x float> %98, %97
  %100 = fmul <16 x float> %92, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %101 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %100, i32 8, <16 x float> %100, i16 -1, i32 4) #7
  %102 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %92, i32 8, <16 x float> %92, i16 -1, i32 4) #7
  %103 = fmul <16 x float> %102, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %104 = fsub <16 x float> %101, %103
  %105 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %104, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %106 = fmul <16 x float> %101, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %107 = fsub <16 x float> %92, %106
  %108 = add <16 x i32> %105, %69
  %109 = fadd <16 x float> %107, %99
  %110 = fsub <16 x float> %107, %109
  %111 = fadd <16 x float> %99, %110
  %112 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !12
  %113 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !12
  %114 = bitcast <16 x float> %112 to <8 x i64>
  %115 = and <8 x i64> %114, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %116 = bitcast <8 x i64> %115 to <16 x float>
  %117 = fsub <16 x float> %112, %116
  %118 = fmul <16 x float> %112, %38
  %119 = bitcast <16 x float> %118 to <8 x i64>
  %120 = xor <8 x i64> %119, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <8 x i64> %120 to <16 x float>
  %122 = fmul <16 x float> %46, %116
  %123 = fadd <16 x float> %122, %121
  %124 = fmul <16 x float> %117, %46
  %125 = fadd <16 x float> %124, %123
  %126 = fmul <16 x float> %47, %116
  %127 = fadd <16 x float> %126, %125
  %128 = fmul <16 x float> %47, %117
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %113, %38
  %131 = fadd <16 x float> %130, %129
  %132 = fadd <16 x float> %118, %109
  %133 = fsub <16 x float> %132, %109
  %134 = fsub <16 x float> %132, %133
  %135 = fsub <16 x float> %109, %134
  %136 = fsub <16 x float> %118, %133
  %137 = fadd <16 x float> %136, %135
  %138 = fadd <16 x float> %131, %111
  %139 = fadd <16 x float> %138, %137
  %140 = fadd <16 x float> %132, %139
  %141 = fsub <16 x float> %132, %140
  %142 = fadd <16 x float> %139, %141
  %143 = bitcast <16 x float> %140 to <8 x i64>
  %144 = and <8 x i64> %143, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %145 = bitcast <8 x i64> %144 to <16 x float>
  %146 = fsub <16 x float> %140, %145
  %147 = fmul <16 x float> %140, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %148 = bitcast <16 x float> %147 to <8 x i64>
  %149 = xor <8 x i64> %148, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %150 = bitcast <8 x i64> %149 to <16 x float>
  %151 = fmul <16 x float> %145, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %152 = fadd <16 x float> %151, %150
  %153 = fmul <16 x float> %146, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %154 = fadd <16 x float> %153, %152
  %155 = fmul <16 x float> %145, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %156 = fadd <16 x float> %155, %154
  %157 = fmul <16 x float> %146, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %140, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %142, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %162 = fadd <16 x float> %161, %160
  %163 = and <8 x i64> %44, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %164 = bitcast <8 x i64> %163 to <16 x float>
  %165 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %164, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %166 = bitcast i16 %165 to <16 x i1>
  %167 = select <16 x i1> %166, <16 x float> %38, <16 x float> %147
  %168 = select <16 x i1> %166, <16 x float> zeroinitializer, <16 x float> %162
  %169 = shl <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %170 = and <16 x i32> %169, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %167, <16 x float> zeroinitializer, i32 30, i16 -1, i32 4) #7
  %172 = bitcast i16 %171 to <16 x i1>
  %173 = select <16 x i1> %172, <16 x i32> <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %174 = add nuw nsw <16 x i32> %173, %170
  %175 = lshr <16 x i32> %174, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %176 = and <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %177 = icmp ne <16 x i32> %176, zeroinitializer
  %178 = bitcast <16 x float> %167 to <8 x i64>
  %179 = and <8 x i64> %178, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %180 = xor <8 x i64> %179, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %181 = bitcast <8 x i64> %180 to <16 x float>
  %182 = or <8 x i64> %179, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %183 = bitcast <8 x i64> %182 to <16 x float>
  %184 = fadd <16 x float> %167, %181
  %185 = fsub <16 x float> %184, %167
  %186 = fsub <16 x float> %184, %185
  %187 = fsub <16 x float> %167, %186
  %188 = fsub <16 x float> %181, %185
  %189 = fadd <16 x float> %188, %187
  %190 = fadd <16 x float> %168, %183
  %191 = fadd <16 x float> %189, %190
  %192 = select <16 x i1> %177, <16 x float> %184, <16 x float> %167
  %193 = select <16 x i1> %177, <16 x float> %191, <16 x float> %168
  %194 = fadd <16 x float> %192, %193
  %195 = fsub <16 x float> %192, %194
  %196 = fadd <16 x float> %193, %195
  %197 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %198 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %199 = or i16 %198, %197
  %200 = bitcast i16 %199 to <16 x i1>
  %201 = select <16 x i1> %200, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %194
  br label %202

; <label>:202:                                    ; preds = %26, %7
  %203 = phi <16 x i32> [ %36, %26 ], [ %25, %7 ]
  %204 = phi <16 x float> [ %201, %26 ], [ %21, %7 ]
  %205 = phi <16 x float> [ %196, %26 ], [ %24, %7 ]
  %206 = phi <16 x i32> [ %175, %26 ], [ %10, %7 ]
  %207 = bitcast <16 x float> %204 to <8 x i64>
  %208 = and <8 x i64> %207, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %209 = bitcast <8 x i64> %208 to <16 x float>
  %210 = fsub <16 x float> %204, %209
  %211 = fmul <16 x float> %204, %204
  %212 = bitcast <16 x float> %211 to <8 x i64>
  %213 = xor <8 x i64> %212, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %214 = bitcast <8 x i64> %213 to <16 x float>
  %215 = fmul <16 x float> %209, %209
  %216 = fadd <16 x float> %215, %214
  %217 = fadd <16 x float> %209, %209
  %218 = fmul <16 x float> %217, %210
  %219 = fadd <16 x float> %218, %216
  %220 = fmul <16 x float> %210, %210
  %221 = fadd <16 x float> %220, %219
  %222 = fadd <16 x float> %205, %205
  %223 = fmul <16 x float> %204, %222
  %224 = fadd <16 x float> %223, %221
  %225 = fmul <16 x float> %211, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %226 = fadd <16 x float> %225, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %227 = fmul <16 x float> %211, %226
  %228 = fadd <16 x float> %227, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %229 = fmul <16 x float> %211, %228
  %230 = fadd <16 x float> %229, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %231 = fsub <16 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %230
  %232 = fadd <16 x float> %229, %231
  %233 = bitcast <16 x float> %230 to <8 x i64>
  %234 = and <8 x i64> %233, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %235 = bitcast <8 x i64> %234 to <16 x float>
  %236 = fsub <16 x float> %230, %235
  %237 = and <8 x i64> %212, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %238 = bitcast <8 x i64> %237 to <16 x float>
  %239 = fsub <16 x float> %211, %238
  %240 = fmul <16 x float> %211, %230
  %241 = bitcast <16 x float> %240 to <8 x i64>
  %242 = xor <8 x i64> %241, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = bitcast <8 x i64> %242 to <16 x float>
  %244 = fmul <16 x float> %238, %235
  %245 = fadd <16 x float> %244, %243
  %246 = fmul <16 x float> %236, %238
  %247 = fadd <16 x float> %246, %245
  %248 = fmul <16 x float> %239, %235
  %249 = fadd <16 x float> %248, %247
  %250 = fmul <16 x float> %239, %236
  %251 = fadd <16 x float> %250, %249
  %252 = fmul <16 x float> %230, %224
  %253 = fadd <16 x float> %252, %251
  %254 = fmul <16 x float> %211, %232
  %255 = fadd <16 x float> %254, %253
  %256 = fadd <16 x float> %240, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %257 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %256
  %258 = fadd <16 x float> %240, %257
  %259 = fadd <16 x float> %258, %255
  %260 = bitcast <16 x float> %256 to <8 x i64>
  %261 = and <8 x i64> %260, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %262 = bitcast <8 x i64> %261 to <16 x float>
  %263 = fsub <16 x float> %256, %262
  %264 = fmul <16 x float> %205, %262
  %265 = fmul <16 x float> %259, %209
  %266 = fmul <16 x float> %210, %263
  %267 = fmul <16 x float> %263, %209
  %268 = fmul <16 x float> %210, %262
  %269 = fmul <16 x float> %209, %262
  %270 = fadd <16 x float> %264, %265
  %271 = fadd <16 x float> %266, %270
  %272 = fadd <16 x float> %267, %271
  %273 = fadd <16 x float> %268, %272
  %274 = fadd <16 x float> %269, %273
  %275 = shl <16 x i32> %206, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %276 = bitcast <16 x i32> %275 to <8 x i64>
  %277 = bitcast <16 x float> %274 to <8 x i64>
  %278 = xor <8 x i64> %277, %276
  %279 = bitcast <8 x i64> %278 to <16 x float>
  %280 = icmp eq <16 x i32> %203, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %281 = select <16 x i1> %280, <16 x float> %0, <16 x float> %279
  ret <16 x float> %281
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cosf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %37, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %9 = fadd <16 x float> %8, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %9, i32 8, <16 x float> %9, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %10, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %12 = fadd <16 x float> %11, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %12, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %14 = fmul <16 x float> %12, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %15 = fadd <16 x float> %14, %0
  %16 = fsub <16 x float> %15, %0
  %17 = fsub <16 x float> %15, %16
  %18 = fsub <16 x float> %0, %17
  %19 = fsub <16 x float> %14, %16
  %20 = fadd <16 x float> %19, %18
  %21 = fmul <16 x float> %12, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %22 = fadd <16 x float> %21, %15
  %23 = fsub <16 x float> %22, %15
  %24 = fsub <16 x float> %22, %23
  %25 = fsub <16 x float> %15, %24
  %26 = fsub <16 x float> %21, %23
  %27 = fadd <16 x float> %26, %25
  %28 = fadd <16 x float> %20, %27
  %29 = fmul <16 x float> %12, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %30 = fadd <16 x float> %29, %22
  %31 = fsub <16 x float> %30, %22
  %32 = fsub <16 x float> %30, %31
  %33 = fsub <16 x float> %22, %32
  %34 = fsub <16 x float> %29, %31
  %35 = fadd <16 x float> %34, %33
  %36 = fadd <16 x float> %35, %28
  br label %214

; <label>:37:                                     ; preds = %1
  %38 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %39 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %38, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %40 = ashr <16 x i32> %39, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %41 = xor <16 x i32> %40, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %42 = and <16 x i32> %39, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %43 = and <16 x i32> %42, %41
  %44 = add nsw <16 x i32> %43, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %45 = icmp ugt <16 x i32> %43, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %46 = select <16 x i1> %45, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %47 = bitcast <16 x float> %0 to <16 x i32>
  %48 = add <16 x i32> %46, %47
  %49 = bitcast <16 x i32> %48 to <16 x float>
  %50 = ashr <16 x i32> %44, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %51 = xor <16 x i32> %50, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %52 = and <16 x i32> %51, %44
  %53 = shl <16 x i32> %52, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %54 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %53, i16 -1, i32 4) #7, !noalias !15
  %55 = bitcast <16 x i32> %48 to <8 x i64>
  %56 = and <8 x i64> %55, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fsub <16 x float> %49, %57
  %59 = bitcast <16 x float> %54 to <8 x i64>
  %60 = and <8 x i64> %59, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <8 x i64> %60 to <16 x float>
  %62 = fsub <16 x float> %54, %61
  %63 = fmul <16 x float> %54, %49
  %64 = bitcast <16 x float> %63 to <8 x i64>
  %65 = xor <8 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %66 = bitcast <8 x i64> %65 to <16 x float>
  %67 = fmul <16 x float> %61, %57
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %58, %61
  %70 = fadd <16 x float> %69, %68
  %71 = fmul <16 x float> %62, %57
  %72 = fadd <16 x float> %71, %70
  %73 = fmul <16 x float> %62, %58
  %74 = fadd <16 x float> %73, %72
  %75 = fmul <16 x float> %63, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %76 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %75, i32 8, <16 x float> %75, i16 -1, i32 4) #7
  %77 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %63, i32 8, <16 x float> %63, i16 -1, i32 4) #7
  %78 = fmul <16 x float> %77, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %79 = fsub <16 x float> %76, %78
  %80 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %79, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %81 = fmul <16 x float> %76, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %82 = fsub <16 x float> %63, %81
  %83 = fadd <16 x float> %82, %74
  %84 = fsub <16 x float> %82, %83
  %85 = fadd <16 x float> %74, %84
  %86 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %53, i16 -1, i32 4) #7, !noalias !15
  %87 = bitcast <16 x float> %86 to <8 x i64>
  %88 = and <8 x i64> %87, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %89 = bitcast <8 x i64> %88 to <16 x float>
  %90 = fsub <16 x float> %86, %89
  %91 = fmul <16 x float> %86, %49
  %92 = bitcast <16 x float> %91 to <8 x i64>
  %93 = xor <8 x i64> %92, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %94 = bitcast <8 x i64> %93 to <16 x float>
  %95 = fmul <16 x float> %89, %57
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %58, %89
  %98 = fadd <16 x float> %97, %96
  %99 = fmul <16 x float> %90, %57
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %90, %58
  %102 = fadd <16 x float> %101, %100
  %103 = fadd <16 x float> %91, %83
  %104 = fsub <16 x float> %103, %83
  %105 = fsub <16 x float> %103, %104
  %106 = fsub <16 x float> %83, %105
  %107 = fsub <16 x float> %91, %104
  %108 = fadd <16 x float> %107, %106
  %109 = fadd <16 x float> %102, %85
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %103, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %112 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %111, i32 8, <16 x float> %111, i16 -1, i32 4) #7
  %113 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %103, i32 8, <16 x float> %103, i16 -1, i32 4) #7
  %114 = fmul <16 x float> %113, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %115 = fsub <16 x float> %112, %114
  %116 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %115, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %117 = fmul <16 x float> %112, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %118 = fsub <16 x float> %103, %117
  %119 = add <16 x i32> %116, %80
  %120 = fadd <16 x float> %118, %110
  %121 = fsub <16 x float> %118, %120
  %122 = fadd <16 x float> %110, %121
  %123 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %53, i16 -1, i32 4) #7, !noalias !15
  %124 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %53, i16 -1, i32 4) #7, !noalias !15
  %125 = bitcast <16 x float> %123 to <8 x i64>
  %126 = and <8 x i64> %125, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %127 = bitcast <8 x i64> %126 to <16 x float>
  %128 = fsub <16 x float> %123, %127
  %129 = fmul <16 x float> %123, %49
  %130 = bitcast <16 x float> %129 to <8 x i64>
  %131 = xor <8 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <8 x i64> %131 to <16 x float>
  %133 = fmul <16 x float> %57, %127
  %134 = fadd <16 x float> %133, %132
  %135 = fmul <16 x float> %128, %57
  %136 = fadd <16 x float> %135, %134
  %137 = fmul <16 x float> %58, %127
  %138 = fadd <16 x float> %137, %136
  %139 = fmul <16 x float> %58, %128
  %140 = fadd <16 x float> %139, %138
  %141 = fmul <16 x float> %124, %49
  %142 = fadd <16 x float> %141, %140
  %143 = fadd <16 x float> %129, %120
  %144 = fsub <16 x float> %143, %120
  %145 = fsub <16 x float> %143, %144
  %146 = fsub <16 x float> %120, %145
  %147 = fsub <16 x float> %129, %144
  %148 = fadd <16 x float> %147, %146
  %149 = fadd <16 x float> %142, %122
  %150 = fadd <16 x float> %149, %148
  %151 = fadd <16 x float> %143, %150
  %152 = fsub <16 x float> %143, %151
  %153 = fadd <16 x float> %150, %152
  %154 = bitcast <16 x float> %151 to <8 x i64>
  %155 = and <8 x i64> %154, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fsub <16 x float> %151, %156
  %158 = fmul <16 x float> %151, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %159 = bitcast <16 x float> %158 to <8 x i64>
  %160 = xor <8 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = bitcast <8 x i64> %160 to <16 x float>
  %162 = fmul <16 x float> %156, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %157, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %156, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %167 = fadd <16 x float> %166, %165
  %168 = fmul <16 x float> %157, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %169 = fadd <16 x float> %168, %167
  %170 = fmul <16 x float> %151, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %171 = fadd <16 x float> %170, %169
  %172 = fmul <16 x float> %153, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %173 = fadd <16 x float> %172, %171
  %174 = and <8 x i64> %55, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %175 = bitcast <8 x i64> %174 to <16 x float>
  %176 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %175, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %177 = bitcast i16 %176 to <16 x i1>
  %178 = select <16 x i1> %177, <16 x float> %49, <16 x float> %158
  %179 = select <16 x i1> %177, <16 x float> zeroinitializer, <16 x float> %173
  %180 = shl <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %181 = and <16 x i32> %180, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %182 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %178, <16 x float> zeroinitializer, i32 30, i16 -1, i32 4) #7
  %183 = bitcast i16 %182 to <16 x i1>
  %184 = select <16 x i1> %183, <16 x i32> <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>, <16 x i32> <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %185 = add nuw nsw <16 x i32> %184, %181
  %186 = lshr <16 x i32> %185, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %187 = and <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %188 = icmp eq <16 x i32> %187, zeroinitializer
  %189 = select <16 x i1> %183, <16 x float> zeroinitializer, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %190 = bitcast <16 x float> %189 to <8 x i64>
  %191 = and <8 x i64> %190, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %192 = xor <8 x i64> %191, <i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469, i64 -4627149705656594469>
  %193 = bitcast <8 x i64> %192 to <16 x float>
  %194 = or <8 x i64> %191, <i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790, i64 3691752325685951790>
  %195 = bitcast <8 x i64> %194 to <16 x float>
  %196 = fadd <16 x float> %178, %193
  %197 = fsub <16 x float> %196, %178
  %198 = fsub <16 x float> %196, %197
  %199 = fsub <16 x float> %178, %198
  %200 = fsub <16 x float> %193, %197
  %201 = fadd <16 x float> %200, %199
  %202 = fadd <16 x float> %179, %195
  %203 = fadd <16 x float> %201, %202
  %204 = select <16 x i1> %188, <16 x float> %196, <16 x float> %178
  %205 = select <16 x i1> %188, <16 x float> %203, <16 x float> %179
  %206 = fadd <16 x float> %204, %205
  %207 = fsub <16 x float> %204, %206
  %208 = fadd <16 x float> %205, %207
  %209 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %210 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %211 = or i16 %210, %209
  %212 = bitcast i16 %211 to <16 x i1>
  %213 = select <16 x i1> %212, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %206
  br label %214

; <label>:214:                                    ; preds = %37, %7
  %215 = phi <16 x float> [ %213, %37 ], [ %30, %7 ]
  %216 = phi <16 x float> [ %208, %37 ], [ %36, %7 ]
  %217 = phi <16 x i32> [ %186, %37 ], [ %13, %7 ]
  %218 = bitcast <16 x float> %215 to <8 x i64>
  %219 = and <8 x i64> %218, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %220 = bitcast <8 x i64> %219 to <16 x float>
  %221 = fsub <16 x float> %215, %220
  %222 = fmul <16 x float> %215, %215
  %223 = bitcast <16 x float> %222 to <8 x i64>
  %224 = xor <8 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <8 x i64> %224 to <16 x float>
  %226 = fmul <16 x float> %220, %220
  %227 = fadd <16 x float> %226, %225
  %228 = fadd <16 x float> %220, %220
  %229 = fmul <16 x float> %228, %221
  %230 = fadd <16 x float> %229, %227
  %231 = fmul <16 x float> %221, %221
  %232 = fadd <16 x float> %231, %230
  %233 = fadd <16 x float> %216, %216
  %234 = fmul <16 x float> %215, %233
  %235 = fadd <16 x float> %234, %232
  %236 = fmul <16 x float> %222, <float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000, float 0x3EC5E150E0000000>
  %237 = fadd <16 x float> %236, <float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000, float 0xBF29F75D60000000>
  %238 = fmul <16 x float> %222, %237
  %239 = fadd <16 x float> %238, <float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000, float 0x3F8110EEE0000000>
  %240 = fmul <16 x float> %222, %239
  %241 = fadd <16 x float> %240, <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>
  %242 = fsub <16 x float> <float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000, float 0xBFC55554C0000000>, %241
  %243 = fadd <16 x float> %240, %242
  %244 = bitcast <16 x float> %241 to <8 x i64>
  %245 = and <8 x i64> %244, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %246 = bitcast <8 x i64> %245 to <16 x float>
  %247 = fsub <16 x float> %241, %246
  %248 = and <8 x i64> %223, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %249 = bitcast <8 x i64> %248 to <16 x float>
  %250 = fsub <16 x float> %222, %249
  %251 = fmul <16 x float> %222, %241
  %252 = bitcast <16 x float> %251 to <8 x i64>
  %253 = xor <8 x i64> %252, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %254 = bitcast <8 x i64> %253 to <16 x float>
  %255 = fmul <16 x float> %249, %246
  %256 = fadd <16 x float> %255, %254
  %257 = fmul <16 x float> %247, %249
  %258 = fadd <16 x float> %257, %256
  %259 = fmul <16 x float> %250, %246
  %260 = fadd <16 x float> %259, %258
  %261 = fmul <16 x float> %250, %247
  %262 = fadd <16 x float> %261, %260
  %263 = fmul <16 x float> %241, %235
  %264 = fadd <16 x float> %263, %262
  %265 = fmul <16 x float> %222, %243
  %266 = fadd <16 x float> %265, %264
  %267 = fadd <16 x float> %251, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %268 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %267
  %269 = fadd <16 x float> %251, %268
  %270 = fadd <16 x float> %269, %266
  %271 = bitcast <16 x float> %267 to <8 x i64>
  %272 = and <8 x i64> %271, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %273 = bitcast <8 x i64> %272 to <16 x float>
  %274 = fsub <16 x float> %267, %273
  %275 = fmul <16 x float> %216, %273
  %276 = fmul <16 x float> %270, %220
  %277 = fmul <16 x float> %221, %274
  %278 = fmul <16 x float> %274, %220
  %279 = fmul <16 x float> %221, %273
  %280 = fmul <16 x float> %220, %273
  %281 = fadd <16 x float> %275, %276
  %282 = fadd <16 x float> %277, %281
  %283 = fadd <16 x float> %278, %282
  %284 = fadd <16 x float> %279, %283
  %285 = fadd <16 x float> %280, %284
  %286 = shl <16 x i32> %217, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %287 = bitcast <16 x i32> %286 to <8 x i64>
  %288 = and <8 x i64> %287, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %289 = xor <8 x i64> %288, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %290 = bitcast <16 x float> %285 to <8 x i64>
  %291 = xor <8 x i64> %289, %290
  %292 = bitcast <8 x i64> %291 to <16 x float>
  ret <16 x float> %292
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fastsinf16_u3500avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2, i32 8, <16 x float> %2, i16 -1, i32 4) #7
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %3, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %6, %6
  %8 = fmul <16 x float> %7, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %9 = fadd <16 x float> %8, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %10 = fmul <16 x float> %7, %9
  %11 = fadd <16 x float> %10, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %12 = fmul <16 x float> %6, %7
  %13 = fmul <16 x float> %12, %11
  %14 = fadd <16 x float> %6, %13
  %15 = shl <16 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %16 = bitcast <16 x i32> %15 to <8 x i64>
  %17 = bitcast <16 x float> %14 to <8 x i64>
  %18 = xor <8 x i64> %17, %16
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = bitcast <16 x float> %0 to <8 x i64>
  %21 = and <8 x i64> %20, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %22, <16 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i32 17, i16 -1, i32 4) #7
  %24 = icmp eq i16 %23, -1
  br i1 %24, label %29, label %25, !prof !2

; <label>:25:                                     ; preds = %1
  %26 = tail call <16 x float> @Sleef_sinf16_u35avx512fnofma(<16 x float> %0)
  %27 = bitcast i16 %23 to <16 x i1>
  %28 = select <16 x i1> %27, <16 x float> %19, <16 x float> %26
  br label %29

; <label>:29:                                     ; preds = %1, %25
  %30 = phi <16 x float> [ %28, %25 ], [ %19, %1 ]
  ret <16 x float> %30
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fastcosf16_u3500avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000, float 0x3FD45F3060000000>
  %3 = fadd <16 x float> %2, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %3, i32 8, <16 x float> %3, i16 -1, i32 4) #7
  %5 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %6 = fadd <16 x float> %0, <float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000, float 0xBFF921FB60000000>
  %7 = fmul <16 x float> %4, <float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000, float 0xC00921FB60000000>
  %8 = fadd <16 x float> %6, %7
  %9 = fmul <16 x float> %8, %8
  %10 = fmul <16 x float> %9, <float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000, float 0xBF28AA1960000000>
  %11 = fadd <16 x float> %10, <float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000, float 0x3F810BE9A0000000>
  %12 = fmul <16 x float> %9, %11
  %13 = fadd <16 x float> %12, <float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000, float 0xBFC5554880000000>
  %14 = fmul <16 x float> %8, %9
  %15 = fmul <16 x float> %14, %13
  %16 = fadd <16 x float> %8, %15
  %17 = shl <16 x i32> %5, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %18 = bitcast <16 x i32> %17 to <8 x i64>
  %19 = xor <8 x i64> %18, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %20 = bitcast <16 x float> %16 to <8 x i64>
  %21 = xor <8 x i64> %19, %20
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = bitcast <16 x float> %0 to <8 x i64>
  %24 = and <8 x i64> %23, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %25 = bitcast <8 x i64> %24 to <16 x float>
  %26 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %25, <16 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, i32 17, i16 -1, i32 4) #7
  %27 = icmp eq i16 %26, -1
  br i1 %27, label %32, label %28, !prof !2

; <label>:28:                                     ; preds = %1
  %29 = tail call <16 x float> @Sleef_cosf16_u35avx512fnofma(<16 x float> %0)
  %30 = bitcast i16 %26 to <16 x i1>
  %31 = select <16 x i1> %30, <16 x float> %22, <16 x float> %29
  br label %32

; <label>:32:                                     ; preds = %1, %28
  %33 = phi <16 x float> [ %31, %28 ], [ %22, %1 ]
  ret <16 x float> %33
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf16_u35avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = bitcast <16 x float> %1 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %7 = icmp eq i16 %6, -1
  br i1 %7, label %8, label %18, !prof !2

; <label>:8:                                      ; preds = %2
  %9 = fmul <16 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %9, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = fmul <16 x float> %11, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %13 = fadd <16 x float> %12, %1
  %14 = fmul <16 x float> %11, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %15 = fadd <16 x float> %14, %13
  %16 = fmul <16 x float> %11, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %17 = fadd <16 x float> %16, %15
  br label %182

; <label>:18:                                     ; preds = %2
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04, float 3.900000e+04>, i32 17, i16 -1, i32 4) #7
  %20 = icmp eq i16 %19, -1
  br i1 %20, label %21, label %33, !prof !2

; <label>:21:                                     ; preds = %18
  %22 = fmul <16 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %23 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %22, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %24 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %23, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %25 = fmul <16 x float> %24, <float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000, float 0xBFF9200000000000>
  %26 = fadd <16 x float> %25, %1
  %27 = fmul <16 x float> %24, <float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000, float 0xBF3FB00000000000>
  %28 = fadd <16 x float> %27, %26
  %29 = fmul <16 x float> %24, <float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000, float 0xBE95100000000000>
  %30 = fadd <16 x float> %29, %28
  %31 = fmul <16 x float> %24, <float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000, float 0xBDD0B46120000000>
  %32 = fadd <16 x float> %31, %30
  br label %182

; <label>:33:                                     ; preds = %18
  %34 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %35 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %34, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %36 = ashr <16 x i32> %35, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %37 = xor <16 x i32> %36, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %38 = and <16 x i32> %35, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %39 = and <16 x i32> %38, %37
  %40 = add nsw <16 x i32> %39, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %41 = icmp ugt <16 x i32> %39, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %42 = select <16 x i1> %41, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %43 = bitcast <16 x float> %1 to <16 x i32>
  %44 = add <16 x i32> %42, %43
  %45 = bitcast <16 x i32> %44 to <16 x float>
  %46 = ashr <16 x i32> %40, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %47 = xor <16 x i32> %46, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %48 = and <16 x i32> %47, %40
  %49 = shl <16 x i32> %48, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %50 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %49, i16 -1, i32 4) #7, !noalias !18
  %51 = bitcast <16 x i32> %44 to <8 x i64>
  %52 = and <8 x i64> %51, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %53 = bitcast <8 x i64> %52 to <16 x float>
  %54 = fsub <16 x float> %45, %53
  %55 = bitcast <16 x float> %50 to <8 x i64>
  %56 = and <8 x i64> %55, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fsub <16 x float> %50, %57
  %59 = fmul <16 x float> %50, %45
  %60 = bitcast <16 x float> %59 to <8 x i64>
  %61 = xor <8 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fmul <16 x float> %57, %53
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %54, %57
  %66 = fadd <16 x float> %65, %64
  %67 = fmul <16 x float> %58, %53
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %58, %54
  %70 = fadd <16 x float> %69, %68
  %71 = fmul <16 x float> %59, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %72 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %71, i32 8, <16 x float> %71, i16 -1, i32 4) #7
  %73 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %59, i32 8, <16 x float> %59, i16 -1, i32 4) #7
  %74 = fmul <16 x float> %73, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %75 = fsub <16 x float> %72, %74
  %76 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %75, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %77 = fmul <16 x float> %72, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %78 = fsub <16 x float> %59, %77
  %79 = fadd <16 x float> %78, %70
  %80 = fsub <16 x float> %78, %79
  %81 = fadd <16 x float> %70, %80
  %82 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %49, i16 -1, i32 4) #7, !noalias !18
  %83 = bitcast <16 x float> %82 to <8 x i64>
  %84 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fsub <16 x float> %82, %85
  %87 = fmul <16 x float> %82, %45
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %85, %53
  %92 = fadd <16 x float> %91, %90
  %93 = fmul <16 x float> %54, %85
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %86, %53
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %86, %54
  %98 = fadd <16 x float> %97, %96
  %99 = fadd <16 x float> %87, %79
  %100 = fsub <16 x float> %99, %79
  %101 = fsub <16 x float> %99, %100
  %102 = fsub <16 x float> %79, %101
  %103 = fsub <16 x float> %87, %100
  %104 = fadd <16 x float> %103, %102
  %105 = fadd <16 x float> %98, %81
  %106 = fadd <16 x float> %105, %104
  %107 = fmul <16 x float> %99, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %108 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %107, i32 8, <16 x float> %107, i16 -1, i32 4) #7
  %109 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %99, i32 8, <16 x float> %99, i16 -1, i32 4) #7
  %110 = fmul <16 x float> %109, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %111 = fsub <16 x float> %108, %110
  %112 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %111, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %113 = fmul <16 x float> %108, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %114 = fsub <16 x float> %99, %113
  %115 = add <16 x i32> %112, %76
  %116 = fadd <16 x float> %114, %106
  %117 = fsub <16 x float> %114, %116
  %118 = fadd <16 x float> %106, %117
  %119 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %49, i16 -1, i32 4) #7, !noalias !18
  %120 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %49, i16 -1, i32 4) #7, !noalias !18
  %121 = bitcast <16 x float> %119 to <8 x i64>
  %122 = and <8 x i64> %121, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %123 = bitcast <8 x i64> %122 to <16 x float>
  %124 = fsub <16 x float> %119, %123
  %125 = fmul <16 x float> %119, %45
  %126 = bitcast <16 x float> %125 to <8 x i64>
  %127 = xor <8 x i64> %126, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %128 = bitcast <8 x i64> %127 to <16 x float>
  %129 = fmul <16 x float> %53, %123
  %130 = fadd <16 x float> %129, %128
  %131 = fmul <16 x float> %124, %53
  %132 = fadd <16 x float> %131, %130
  %133 = fmul <16 x float> %54, %123
  %134 = fadd <16 x float> %133, %132
  %135 = fmul <16 x float> %54, %124
  %136 = fadd <16 x float> %135, %134
  %137 = fmul <16 x float> %120, %45
  %138 = fadd <16 x float> %137, %136
  %139 = fadd <16 x float> %125, %116
  %140 = fsub <16 x float> %139, %116
  %141 = fsub <16 x float> %139, %140
  %142 = fsub <16 x float> %116, %141
  %143 = fsub <16 x float> %125, %140
  %144 = fadd <16 x float> %143, %142
  %145 = fadd <16 x float> %138, %118
  %146 = fadd <16 x float> %145, %144
  %147 = fadd <16 x float> %139, %146
  %148 = fsub <16 x float> %139, %147
  %149 = fadd <16 x float> %146, %148
  %150 = bitcast <16 x float> %147 to <8 x i64>
  %151 = and <8 x i64> %150, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fsub <16 x float> %147, %152
  %154 = fmul <16 x float> %147, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %155 = bitcast <16 x float> %154 to <8 x i64>
  %156 = xor <8 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %152, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %153, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %152, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %153, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %147, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %167 = fadd <16 x float> %166, %165
  %168 = fmul <16 x float> %149, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %169 = fadd <16 x float> %168, %167
  %170 = and <8 x i64> %51, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %171 = bitcast <8 x i64> %170 to <16 x float>
  %172 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %171, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %173 = bitcast i16 %172 to <16 x i1>
  %174 = select <16 x i1> %173, <16 x float> %45, <16 x float> %154
  %175 = select <16 x i1> %173, <16 x float> zeroinitializer, <16 x float> %169
  %176 = fadd <16 x float> %174, %175
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %178 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %179 = or i16 %178, %177
  %180 = bitcast i16 %179 to <16 x i1>
  %181 = select <16 x i1> %180, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %176
  br label %182

; <label>:182:                                    ; preds = %21, %33, %8
  %183 = phi <16 x float> [ %17, %8 ], [ %32, %21 ], [ %181, %33 ]
  %184 = phi <16 x i32> [ %10, %8 ], [ %23, %21 ], [ %115, %33 ]
  %185 = fmul <16 x float> %183, %183
  %186 = fmul <16 x float> %185, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %187 = fadd <16 x float> %186, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %188 = fmul <16 x float> %185, %187
  %189 = fadd <16 x float> %188, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %190 = fmul <16 x float> %185, %189
  %191 = fmul <16 x float> %183, %190
  %192 = fadd <16 x float> %183, %191
  %193 = bitcast <16 x float> %1 to <16 x i32>
  %194 = icmp eq <16 x i32> %193, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %195 = select <16 x i1> %194, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %192
  %196 = fmul <16 x float> %185, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %197 = fadd <16 x float> %196, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %198 = fmul <16 x float> %185, %197
  %199 = fadd <16 x float> %198, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %200 = fmul <16 x float> %185, %199
  %201 = fadd <16 x float> %200, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %202 = fmul <16 x float> %185, %201
  %203 = fadd <16 x float> %202, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %204 = fmul <16 x float> %185, %203
  %205 = fadd <16 x float> %204, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %206 = and <16 x i32> %184, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %207 = icmp eq <16 x i32> %206, zeroinitializer
  %208 = select <16 x i1> %207, <16 x float> %195, <16 x float> %205
  %209 = select <16 x i1> %207, <16 x float> %205, <16 x float> %195
  %210 = shl <16 x i32> %184, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %211 = bitcast <16 x i32> %210 to <8 x i64>
  %212 = and <8 x i64> %211, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %213 = bitcast <16 x float> %208 to <8 x i64>
  %214 = xor <8 x i64> %212, %213
  %215 = add <16 x i32> %210, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %216 = bitcast <16 x i32> %215 to <8 x i64>
  %217 = and <8 x i64> %216, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %218 = bitcast <16 x float> %209 to <8 x i64>
  %219 = xor <8 x i64> %217, %218
  %220 = bitcast %struct.vfloat2* %0 to <8 x i64>*
  store <8 x i64> %214, <8 x i64>* %220, align 64
  %221 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %222 = bitcast <16 x float>* %221 to <8 x i64>*
  store <8 x i64> %219, <8 x i64>* %222, align 64
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincosf16_u10avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = bitcast <16 x float> %1 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %7 = icmp eq i16 %6, -1
  br i1 %7, label %8, label %27, !prof !2

; <label>:8:                                      ; preds = %2
  %9 = fmul <16 x float> %1, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %9, i32 8, <16 x float> %9, i16 -1, i32 4) #7
  %11 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %10, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %12 = fmul <16 x float> %10, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %13 = fadd <16 x float> %12, %1
  %14 = fmul <16 x float> %10, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %15 = fadd <16 x float> %14, %13
  %16 = fsub <16 x float> %15, %13
  %17 = fsub <16 x float> %15, %16
  %18 = fsub <16 x float> %13, %17
  %19 = fsub <16 x float> %14, %16
  %20 = fadd <16 x float> %19, %18
  %21 = fmul <16 x float> %10, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %22 = fadd <16 x float> %21, %15
  %23 = fsub <16 x float> %15, %22
  %24 = fadd <16 x float> %21, %23
  %25 = fadd <16 x float> %24, %20
  %26 = bitcast <16 x float> %1 to <16 x i32>
  br label %175

; <label>:27:                                     ; preds = %2
  %28 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %29 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %28, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %30 = ashr <16 x i32> %29, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %31 = xor <16 x i32> %30, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %32 = and <16 x i32> %29, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %33 = and <16 x i32> %32, %31
  %34 = add nsw <16 x i32> %33, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %35 = icmp ugt <16 x i32> %33, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %36 = select <16 x i1> %35, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %37 = bitcast <16 x float> %1 to <16 x i32>
  %38 = add <16 x i32> %36, %37
  %39 = bitcast <16 x i32> %38 to <16 x float>
  %40 = ashr <16 x i32> %34, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %41 = xor <16 x i32> %40, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %42 = and <16 x i32> %41, %34
  %43 = shl <16 x i32> %42, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %44 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %43, i16 -1, i32 4) #7, !noalias !21
  %45 = bitcast <16 x i32> %38 to <8 x i64>
  %46 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fsub <16 x float> %39, %47
  %49 = bitcast <16 x float> %44 to <8 x i64>
  %50 = and <8 x i64> %49, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <8 x i64> %50 to <16 x float>
  %52 = fsub <16 x float> %44, %51
  %53 = fmul <16 x float> %44, %39
  %54 = bitcast <16 x float> %53 to <8 x i64>
  %55 = xor <8 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <8 x i64> %55 to <16 x float>
  %57 = fmul <16 x float> %51, %47
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %48, %51
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %52, %47
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %52, %48
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %53, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %66 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %65, i32 8, <16 x float> %65, i16 -1, i32 4) #7
  %67 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %53, i32 8, <16 x float> %53, i16 -1, i32 4) #7
  %68 = fmul <16 x float> %67, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %69 = fsub <16 x float> %66, %68
  %70 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %69, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %71 = fmul <16 x float> %66, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %72 = fsub <16 x float> %53, %71
  %73 = fadd <16 x float> %72, %64
  %74 = fsub <16 x float> %72, %73
  %75 = fadd <16 x float> %64, %74
  %76 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %43, i16 -1, i32 4) #7, !noalias !21
  %77 = bitcast <16 x float> %76 to <8 x i64>
  %78 = and <8 x i64> %77, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <8 x i64> %78 to <16 x float>
  %80 = fsub <16 x float> %76, %79
  %81 = fmul <16 x float> %76, %39
  %82 = bitcast <16 x float> %81 to <8 x i64>
  %83 = xor <8 x i64> %82, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = bitcast <8 x i64> %83 to <16 x float>
  %85 = fmul <16 x float> %79, %47
  %86 = fadd <16 x float> %85, %84
  %87 = fmul <16 x float> %48, %79
  %88 = fadd <16 x float> %87, %86
  %89 = fmul <16 x float> %80, %47
  %90 = fadd <16 x float> %89, %88
  %91 = fmul <16 x float> %80, %48
  %92 = fadd <16 x float> %91, %90
  %93 = fadd <16 x float> %81, %73
  %94 = fsub <16 x float> %93, %73
  %95 = fsub <16 x float> %93, %94
  %96 = fsub <16 x float> %73, %95
  %97 = fsub <16 x float> %81, %94
  %98 = fadd <16 x float> %97, %96
  %99 = fadd <16 x float> %92, %75
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %93, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %102 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %101, i32 8, <16 x float> %101, i16 -1, i32 4) #7
  %103 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %93, i32 8, <16 x float> %93, i16 -1, i32 4) #7
  %104 = fmul <16 x float> %103, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %105 = fsub <16 x float> %102, %104
  %106 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %105, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %107 = fmul <16 x float> %102, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %108 = fsub <16 x float> %93, %107
  %109 = add <16 x i32> %106, %70
  %110 = fadd <16 x float> %108, %100
  %111 = fsub <16 x float> %108, %110
  %112 = fadd <16 x float> %100, %111
  %113 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %43, i16 -1, i32 4) #7, !noalias !21
  %114 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %43, i16 -1, i32 4) #7, !noalias !21
  %115 = bitcast <16 x float> %113 to <8 x i64>
  %116 = and <8 x i64> %115, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %117 = bitcast <8 x i64> %116 to <16 x float>
  %118 = fsub <16 x float> %113, %117
  %119 = fmul <16 x float> %113, %39
  %120 = bitcast <16 x float> %119 to <8 x i64>
  %121 = xor <8 x i64> %120, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fmul <16 x float> %47, %117
  %124 = fadd <16 x float> %123, %122
  %125 = fmul <16 x float> %118, %47
  %126 = fadd <16 x float> %125, %124
  %127 = fmul <16 x float> %48, %117
  %128 = fadd <16 x float> %127, %126
  %129 = fmul <16 x float> %48, %118
  %130 = fadd <16 x float> %129, %128
  %131 = fmul <16 x float> %114, %39
  %132 = fadd <16 x float> %131, %130
  %133 = fadd <16 x float> %119, %110
  %134 = fsub <16 x float> %133, %110
  %135 = fsub <16 x float> %133, %134
  %136 = fsub <16 x float> %110, %135
  %137 = fsub <16 x float> %119, %134
  %138 = fadd <16 x float> %137, %136
  %139 = fadd <16 x float> %132, %112
  %140 = fadd <16 x float> %139, %138
  %141 = fadd <16 x float> %133, %140
  %142 = fsub <16 x float> %133, %141
  %143 = fadd <16 x float> %140, %142
  %144 = bitcast <16 x float> %141 to <8 x i64>
  %145 = and <8 x i64> %144, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <8 x i64> %145 to <16 x float>
  %147 = fsub <16 x float> %141, %146
  %148 = fmul <16 x float> %141, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %149 = bitcast <16 x float> %148 to <8 x i64>
  %150 = xor <8 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fmul <16 x float> %146, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %153 = fadd <16 x float> %152, %151
  %154 = fmul <16 x float> %147, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %155 = fadd <16 x float> %154, %153
  %156 = fmul <16 x float> %146, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %157 = fadd <16 x float> %156, %155
  %158 = fmul <16 x float> %147, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %141, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %143, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %163 = fadd <16 x float> %162, %161
  %164 = and <8 x i64> %45, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %165 = bitcast <8 x i64> %164 to <16 x float>
  %166 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %165, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %167 = bitcast i16 %166 to <16 x i1>
  %168 = select <16 x i1> %167, <16 x float> %39, <16 x float> %148
  %169 = select <16 x i1> %167, <16 x float> zeroinitializer, <16 x float> %163
  %170 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %172 = or i16 %171, %170
  %173 = bitcast i16 %172 to <16 x i1>
  %174 = select <16 x i1> %173, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %168
  br label %175

; <label>:175:                                    ; preds = %27, %8
  %176 = phi <16 x i32> [ %37, %27 ], [ %26, %8 ]
  %177 = phi <16 x float> [ %174, %27 ], [ %22, %8 ]
  %178 = phi <16 x float> [ %169, %27 ], [ %25, %8 ]
  %179 = phi <16 x i32> [ %109, %27 ], [ %11, %8 ]
  %180 = bitcast <16 x float> %177 to <8 x i64>
  %181 = and <8 x i64> %180, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %182 = bitcast <8 x i64> %181 to <16 x float>
  %183 = fsub <16 x float> %177, %182
  %184 = fmul <16 x float> %178, %182
  %185 = fmul <16 x float> %183, %183
  %186 = fmul <16 x float> %183, %182
  %187 = fadd <16 x float> %186, %186
  %188 = fmul <16 x float> %182, %182
  %189 = fadd <16 x float> %184, %184
  %190 = fadd <16 x float> %189, %185
  %191 = fadd <16 x float> %190, %187
  %192 = fadd <16 x float> %188, %191
  %193 = fmul <16 x float> %192, <float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000, float 0xBF2994CB60000000>
  %194 = fadd <16 x float> %193, <float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000, float 0x3F81107340000000>
  %195 = fmul <16 x float> %192, %194
  %196 = fadd <16 x float> %195, <float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000, float 0xBFC5555440000000>
  %197 = fmul <16 x float> %177, %192
  %198 = fmul <16 x float> %197, %196
  %199 = fadd <16 x float> %177, %198
  %200 = fsub <16 x float> %177, %199
  %201 = fadd <16 x float> %198, %200
  %202 = fadd <16 x float> %178, %201
  %203 = fadd <16 x float> %199, %202
  %204 = icmp eq <16 x i32> %176, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %205 = select <16 x i1> %204, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %203
  %206 = fmul <16 x float> %192, <float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000, float 0xBE923DB120000000>
  %207 = fadd <16 x float> %206, <float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000, float 0x3EFA00F160000000>
  %208 = fmul <16 x float> %192, %207
  %209 = fadd <16 x float> %208, <float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000, float 0xBF56C16B00000000>
  %210 = fmul <16 x float> %192, %209
  %211 = fadd <16 x float> %210, <float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000, float 0x3FA5555540000000>
  %212 = fmul <16 x float> %192, %211
  %213 = fadd <16 x float> %212, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %214 = bitcast <16 x float> %192 to <8 x i64>
  %215 = and <8 x i64> %214, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %216 = bitcast <8 x i64> %215 to <16 x float>
  %217 = fsub <16 x float> %192, %216
  %218 = bitcast <16 x float> %213 to <8 x i64>
  %219 = and <8 x i64> %218, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %220 = bitcast <8 x i64> %219 to <16 x float>
  %221 = fsub <16 x float> %213, %220
  %222 = fmul <16 x float> %192, %213
  %223 = bitcast <16 x float> %222 to <8 x i64>
  %224 = xor <8 x i64> %223, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = bitcast <8 x i64> %224 to <16 x float>
  %226 = fmul <16 x float> %216, %220
  %227 = fadd <16 x float> %226, %225
  %228 = fmul <16 x float> %217, %220
  %229 = fadd <16 x float> %228, %227
  %230 = fmul <16 x float> %221, %216
  %231 = fadd <16 x float> %230, %229
  %232 = fmul <16 x float> %217, %221
  %233 = fadd <16 x float> %232, %231
  %234 = fadd <16 x float> %222, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %235 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %234
  %236 = fadd <16 x float> %222, %235
  %237 = fadd <16 x float> %236, %233
  %238 = fadd <16 x float> %234, %237
  %239 = and <16 x i32> %179, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %240 = icmp eq <16 x i32> %239, zeroinitializer
  %241 = select <16 x i1> %240, <16 x float> %205, <16 x float> %238
  %242 = select <16 x i1> %240, <16 x float> %238, <16 x float> %205
  %243 = shl <16 x i32> %179, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %244 = bitcast <16 x i32> %243 to <8 x i64>
  %245 = and <8 x i64> %244, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %246 = bitcast <16 x float> %241 to <8 x i64>
  %247 = xor <8 x i64> %245, %246
  %248 = add <16 x i32> %243, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %249 = bitcast <16 x i32> %248 to <8 x i64>
  %250 = and <8 x i64> %249, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %251 = bitcast <16 x float> %242 to <8 x i64>
  %252 = xor <8 x i64> %250, %251
  %253 = bitcast %struct.vfloat2* %0 to <8 x i64>*
  store <8 x i64> %247, <8 x i64>* %253, align 64
  %254 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %255 = bitcast <16 x float>* %254 to <8 x i64>*
  store <8 x i64> %252, <8 x i64>* %255, align 64
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif16_u05avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = fmul <16 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = lshr <16 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <16 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <16 x i32> %6, %4
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = fsub <16 x float> %3, %9
  %11 = fmul <16 x float> %10, %10
  %12 = bitcast <16 x float> %10 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %10, %14
  %16 = bitcast <16 x float> %11 to <8 x i64>
  %17 = xor <8 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = bitcast <8 x i64> %17 to <16 x float>
  %19 = fmul <16 x float> %14, %14
  %20 = fadd <16 x float> %19, %18
  %21 = fmul <16 x float> %15, %14
  %22 = fadd <16 x float> %21, %20
  %23 = fadd <16 x float> %21, %22
  %24 = fmul <16 x float> %15, %15
  %25 = fadd <16 x float> %24, %23
  %26 = fmul <16 x float> %11, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %27 = fadd <16 x float> %26, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %28 = fmul <16 x float> %11, %27
  %29 = fadd <16 x float> %28, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %30 = fmul <16 x float> %11, %29
  %31 = fadd <16 x float> %30, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %32 = fsub <16 x float> %31, %30
  %33 = fsub <16 x float> %31, %32
  %34 = fsub <16 x float> %30, %33
  %35 = fsub <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %32
  %36 = fadd <16 x float> %35, %34
  %37 = fadd <16 x float> %36, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %38 = and <8 x i64> %16, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %11, %39
  %41 = bitcast <16 x float> %31 to <8 x i64>
  %42 = and <8 x i64> %41, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = fsub <16 x float> %31, %43
  %45 = fmul <16 x float> %11, %31
  %46 = bitcast <16 x float> %45 to <8 x i64>
  %47 = xor <8 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %39, %43
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %40, %43
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %44, %39
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %40, %44
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %11, %37
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %31, %25
  %60 = fadd <16 x float> %59, %58
  %61 = fadd <16 x float> %45, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %62 = fsub <16 x float> %61, %45
  %63 = fsub <16 x float> %61, %62
  %64 = fsub <16 x float> %45, %63
  %65 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %62
  %66 = fadd <16 x float> %65, %64
  %67 = fadd <16 x float> %60, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %68 = fadd <16 x float> %66, %67
  %69 = bitcast <16 x float> %61 to <8 x i64>
  %70 = and <8 x i64> %69, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <8 x i64> %70 to <16 x float>
  %72 = fsub <16 x float> %61, %71
  %73 = fmul <16 x float> %10, %61
  %74 = bitcast <16 x float> %73 to <8 x i64>
  %75 = xor <8 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <8 x i64> %75 to <16 x float>
  %77 = fmul <16 x float> %14, %71
  %78 = fadd <16 x float> %77, %76
  %79 = fmul <16 x float> %72, %14
  %80 = fadd <16 x float> %79, %78
  %81 = fmul <16 x float> %15, %71
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %15, %72
  %84 = fadd <16 x float> %83, %82
  %85 = fmul <16 x float> %10, %68
  %86 = fadd <16 x float> %84, %85
  %87 = fadd <16 x float> %73, %86
  %88 = bitcast <16 x float> %1 to <16 x i32>
  %89 = icmp eq <16 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = select <16 x i1> %89, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %87
  %91 = fmul <16 x float> %11, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %92 = fadd <16 x float> %91, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %93 = fmul <16 x float> %11, %92
  %94 = fadd <16 x float> %93, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %95 = fmul <16 x float> %11, %94
  %96 = fadd <16 x float> %95, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %97 = fsub <16 x float> %96, %95
  %98 = fsub <16 x float> %96, %97
  %99 = fsub <16 x float> %95, %98
  %100 = fsub <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %97
  %101 = fadd <16 x float> %100, %99
  %102 = fadd <16 x float> %101, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %103 = bitcast <16 x float> %96 to <8 x i64>
  %104 = and <8 x i64> %103, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <8 x i64> %104 to <16 x float>
  %106 = fsub <16 x float> %96, %105
  %107 = fmul <16 x float> %11, %96
  %108 = bitcast <16 x float> %107 to <8 x i64>
  %109 = xor <8 x i64> %108, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %110 = bitcast <8 x i64> %109 to <16 x float>
  %111 = fmul <16 x float> %39, %105
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %40, %105
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %106, %39
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %40, %106
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %11, %102
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %96, %25
  %122 = fadd <16 x float> %121, %120
  %123 = fadd <16 x float> %107, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %124 = fsub <16 x float> %123, %107
  %125 = fsub <16 x float> %123, %124
  %126 = fsub <16 x float> %107, %125
  %127 = fsub <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %124
  %128 = fadd <16 x float> %127, %126
  %129 = fadd <16 x float> %122, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %130 = fadd <16 x float> %128, %129
  %131 = bitcast <16 x float> %123 to <8 x i64>
  %132 = and <8 x i64> %131, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %133 = bitcast <8 x i64> %132 to <16 x float>
  %134 = fsub <16 x float> %123, %133
  %135 = fmul <16 x float> %11, %123
  %136 = bitcast <16 x float> %135 to <8 x i64>
  %137 = xor <8 x i64> %136, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = bitcast <8 x i64> %137 to <16 x float>
  %139 = fmul <16 x float> %39, %133
  %140 = fadd <16 x float> %139, %138
  %141 = fmul <16 x float> %134, %39
  %142 = fadd <16 x float> %141, %140
  %143 = fmul <16 x float> %40, %133
  %144 = fadd <16 x float> %143, %142
  %145 = fmul <16 x float> %40, %134
  %146 = fadd <16 x float> %145, %144
  %147 = fmul <16 x float> %25, %123
  %148 = fadd <16 x float> %147, %146
  %149 = fmul <16 x float> %11, %130
  %150 = fadd <16 x float> %148, %149
  %151 = fadd <16 x float> %135, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %152 = fsub <16 x float> %151, %135
  %153 = fsub <16 x float> %151, %152
  %154 = fsub <16 x float> %135, %153
  %155 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %152
  %156 = fadd <16 x float> %155, %154
  %157 = fadd <16 x float> %156, %150
  %158 = fadd <16 x float> %151, %157
  %159 = and <16 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %160 = icmp eq <16 x i32> %159, zeroinitializer
  %161 = select <16 x i1> %160, <16 x float> %90, <16 x float> %158
  %162 = select <16 x i1> %160, <16 x float> %158, <16 x float> %90
  %163 = shl <16 x i32> %7, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %164 = and <16 x i32> %163, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %165 = shl <16 x i32> %8, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %166 = add <16 x i32> %165, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %167 = and <16 x i32> %166, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %168 = bitcast <16 x float> %1 to <8 x i64>
  %169 = and <8 x i64> %168, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i32 30, i16 -1, i32 4) #7
  %172 = bitcast <16 x float> %161 to <16 x i32>
  %173 = xor <16 x i32> %164, %172
  %174 = bitcast i16 %171 to <16 x i1>
  %175 = bitcast <16 x float> %162 to <16 x i32>
  %176 = xor <16 x i32> %167, %175
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = bitcast <16 x i32> %173 to <16 x float>
  %180 = select <16 x i1> %174, <16 x float> zeroinitializer, <16 x float> %179
  %181 = select <16 x i1> %178, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %180
  %182 = bitcast <16 x i32> %176 to <16 x float>
  %183 = select <16 x i1> %174, <16 x float> zeroinitializer, <16 x float> %182
  %184 = select <16 x i1> %178, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %183
  %185 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 0
  store <16 x float> %181, <16 x float>* %185, align 64
  %186 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  store <16 x float> %184, <16 x float>* %186, align 64
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_sincospif16_u35avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = fmul <16 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = lshr <16 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <16 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <16 x i32> %6, %4
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = fsub <16 x float> %3, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <16 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <16 x float> %11, %15
  %17 = fadd <16 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <16 x float> %10, %17
  %19 = fmul <16 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <16 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <16 x float> %11, %20
  %22 = fadd <16 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <16 x float> %11, %22
  %24 = fadd <16 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <16 x float> %11, %24
  %26 = fadd <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <16 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <16 x i32> %27, zeroinitializer
  %29 = select <16 x i1> %28, <16 x float> %18, <16 x float> %26
  %30 = select <16 x i1> %28, <16 x float> %26, <16 x float> %18
  %31 = shl <16 x i32> %7, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %32 = and <16 x i32> %31, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %33 = shl <16 x i32> %8, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %34 = add <16 x i32> %33, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %35 = and <16 x i32> %34, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %36 = bitcast <16 x float> %1 to <8 x i64>
  %37 = and <8 x i64> %36, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %38 = bitcast <8 x i64> %37 to <16 x float>
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %38, <16 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i32 30, i16 -1, i32 4) #7
  %40 = bitcast <16 x float> %29 to <16 x i32>
  %41 = xor <16 x i32> %32, %40
  %42 = bitcast i16 %39 to <16 x i1>
  %43 = bitcast <16 x float> %30 to <16 x i32>
  %44 = xor <16 x i32> %35, %43
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %38, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %46 = bitcast i16 %45 to <16 x i1>
  %47 = bitcast <16 x i32> %41 to <16 x float>
  %48 = select <16 x i1> %42, <16 x float> zeroinitializer, <16 x float> %47
  %49 = select <16 x i1> %46, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %48
  %50 = bitcast <16 x i32> %44 to <16 x float>
  %51 = select <16 x i1> %42, <16 x float> zeroinitializer, <16 x float> %50
  %52 = select <16 x i1> %46, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %51
  %53 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 0
  store <16 x float> %49, <16 x float>* %53, align 64
  %54 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  store <16 x float> %52, <16 x float>* %54, align 64
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_modff16_avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %1, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fsub <16 x float> %1, %4
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 30, i16 -1, i32 4) #7
  %10 = bitcast i16 %9 to <16 x i1>
  %11 = select <16 x i1> %10, <16 x float> zeroinitializer, <16 x float> %5
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = and <8 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = or <8 x i64> %13, %14
  %16 = fsub <16 x float> %1, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = and <8 x i64> %17, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %19 = or <8 x i64> %18, %14
  %20 = bitcast %struct.vfloat2* %0 to <8 x i64>*
  store <8 x i64> %15, <8 x i64>* %20, align 64
  %21 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %22 = bitcast <16 x float>* %21 to <8 x i64>*
  store <8 x i64> %19, <8 x i64>* %22, align 64
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_tanf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02, float 1.250000e+02>, i32 17, i16 -1, i32 4) #7
  %6 = icmp eq i16 %5, -1
  br i1 %6, label %7, label %26, !prof !2

; <label>:7:                                      ; preds = %1
  %8 = fmul <16 x float> %0, <float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000, float 0x3FE45F3060000000>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %8, i32 8, <16 x float> %8, i16 -1, i32 4) #7
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %9, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %9, <float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000, float 0xBFF921C000000000>
  %12 = fadd <16 x float> %11, %0
  %13 = fmul <16 x float> %9, <float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000, float 0xBF0DAA0000000000>
  %14 = fadd <16 x float> %13, %12
  %15 = fsub <16 x float> %14, %12
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> %12, %16
  %18 = fsub <16 x float> %13, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %9, <float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000, float 0xBE110B4620000000>
  %21 = fadd <16 x float> %20, %14
  %22 = fsub <16 x float> %14, %21
  %23 = fadd <16 x float> %20, %22
  %24 = fadd <16 x float> %23, %19
  %25 = bitcast <16 x float> %0 to <16 x i32>
  br label %175

; <label>:26:                                     ; preds = %1
  %27 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %28 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %27, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %29 = ashr <16 x i32> %28, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %30 = xor <16 x i32> %29, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %31 = and <16 x i32> %28, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %32 = and <16 x i32> %31, %30
  %33 = add nsw <16 x i32> %32, <i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25, i32 -25>
  %34 = icmp ugt <16 x i32> %32, <i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90, i32 90>
  %35 = select <16 x i1> %34, <16 x i32> <i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912, i32 -536870912>, <16 x i32> zeroinitializer
  %36 = bitcast <16 x float> %0 to <16 x i32>
  %37 = add <16 x i32> %35, %36
  %38 = bitcast <16 x i32> %37 to <16 x float>
  %39 = ashr <16 x i32> %33, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %40 = xor <16 x i32> %39, <i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823, i32 1073741823>
  %41 = and <16 x i32> %40, %33
  %42 = shl <16 x i32> %41, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %43 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast ([0 x float]* @rempitabsp to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !24
  %44 = bitcast <16 x i32> %37 to <8 x i64>
  %45 = and <8 x i64> %44, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %46 = bitcast <8 x i64> %45 to <16 x float>
  %47 = fsub <16 x float> %38, %46
  %48 = bitcast <16 x float> %43 to <8 x i64>
  %49 = and <8 x i64> %48, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %50 = bitcast <8 x i64> %49 to <16 x float>
  %51 = fsub <16 x float> %43, %50
  %52 = fmul <16 x float> %43, %38
  %53 = bitcast <16 x float> %52 to <8 x i64>
  %54 = xor <8 x i64> %53, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %55 = bitcast <8 x i64> %54 to <16 x float>
  %56 = fmul <16 x float> %50, %46
  %57 = fadd <16 x float> %56, %55
  %58 = fmul <16 x float> %47, %50
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %51, %46
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %51, %47
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %52, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %65 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %64, i32 8, <16 x float> %64, i16 -1, i32 4) #7
  %66 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %52, i32 8, <16 x float> %52, i16 -1, i32 4) #7
  %67 = fmul <16 x float> %66, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %68 = fsub <16 x float> %65, %67
  %69 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %68, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %70 = fmul <16 x float> %65, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %71 = fsub <16 x float> %52, %70
  %72 = fadd <16 x float> %71, %63
  %73 = fsub <16 x float> %71, %72
  %74 = fadd <16 x float> %63, %73
  %75 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 1) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !24
  %76 = bitcast <16 x float> %75 to <8 x i64>
  %77 = and <8 x i64> %76, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %78 = bitcast <8 x i64> %77 to <16 x float>
  %79 = fsub <16 x float> %75, %78
  %80 = fmul <16 x float> %75, %38
  %81 = bitcast <16 x float> %80 to <8 x i64>
  %82 = xor <8 x i64> %81, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %83 = bitcast <8 x i64> %82 to <16 x float>
  %84 = fmul <16 x float> %78, %46
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %47, %78
  %87 = fadd <16 x float> %86, %85
  %88 = fmul <16 x float> %79, %46
  %89 = fadd <16 x float> %88, %87
  %90 = fmul <16 x float> %79, %47
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %80, %72
  %93 = fsub <16 x float> %92, %72
  %94 = fsub <16 x float> %92, %93
  %95 = fsub <16 x float> %72, %94
  %96 = fsub <16 x float> %80, %93
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %91, %74
  %99 = fadd <16 x float> %98, %97
  %100 = fmul <16 x float> %92, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %101 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %100, i32 8, <16 x float> %100, i16 -1, i32 4) #7
  %102 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %92, i32 8, <16 x float> %92, i16 -1, i32 4) #7
  %103 = fmul <16 x float> %102, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %104 = fsub <16 x float> %101, %103
  %105 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %104, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %106 = fmul <16 x float> %101, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %107 = fsub <16 x float> %92, %106
  %108 = add <16 x i32> %105, %69
  %109 = fadd <16 x float> %107, %99
  %110 = fsub <16 x float> %107, %109
  %111 = fadd <16 x float> %99, %110
  %112 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 2) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !24
  %113 = tail call <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float> zeroinitializer, i8* bitcast (float* getelementptr inbounds ([0 x float], [0 x float]* @rempitabsp, i64 0, i64 3) to i8*), <16 x i32> %42, i16 -1, i32 4) #7, !noalias !24
  %114 = bitcast <16 x float> %112 to <8 x i64>
  %115 = and <8 x i64> %114, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %116 = bitcast <8 x i64> %115 to <16 x float>
  %117 = fsub <16 x float> %112, %116
  %118 = fmul <16 x float> %112, %38
  %119 = bitcast <16 x float> %118 to <8 x i64>
  %120 = xor <8 x i64> %119, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %121 = bitcast <8 x i64> %120 to <16 x float>
  %122 = fmul <16 x float> %46, %116
  %123 = fadd <16 x float> %122, %121
  %124 = fmul <16 x float> %117, %46
  %125 = fadd <16 x float> %124, %123
  %126 = fmul <16 x float> %47, %116
  %127 = fadd <16 x float> %126, %125
  %128 = fmul <16 x float> %47, %117
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %113, %38
  %131 = fadd <16 x float> %130, %129
  %132 = fadd <16 x float> %118, %109
  %133 = fsub <16 x float> %132, %109
  %134 = fsub <16 x float> %132, %133
  %135 = fsub <16 x float> %109, %134
  %136 = fsub <16 x float> %118, %133
  %137 = fadd <16 x float> %136, %135
  %138 = fadd <16 x float> %131, %111
  %139 = fadd <16 x float> %138, %137
  %140 = fadd <16 x float> %132, %139
  %141 = fsub <16 x float> %132, %140
  %142 = fadd <16 x float> %139, %141
  %143 = bitcast <16 x float> %140 to <8 x i64>
  %144 = and <8 x i64> %143, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %145 = bitcast <8 x i64> %144 to <16 x float>
  %146 = fsub <16 x float> %140, %145
  %147 = fmul <16 x float> %140, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %148 = bitcast <16 x float> %147 to <8 x i64>
  %149 = xor <8 x i64> %148, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %150 = bitcast <8 x i64> %149 to <16 x float>
  %151 = fmul <16 x float> %145, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %152 = fadd <16 x float> %151, %150
  %153 = fmul <16 x float> %146, <float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00, float 6.281250e+00>
  %154 = fadd <16 x float> %153, %152
  %155 = fmul <16 x float> %145, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %156 = fadd <16 x float> %155, %154
  %157 = fmul <16 x float> %146, <float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000, float 0x3F5FB60000000000>
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %140, <float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000, float 0xBE8777A5C0000000>
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %142, <float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000, float 0x401921FB60000000>
  %162 = fadd <16 x float> %161, %160
  %163 = and <8 x i64> %44, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %164 = bitcast <8 x i64> %163 to <16 x float>
  %165 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %164, <16 x float> <float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000, float 0x3FE6666660000000>, i32 17, i16 -1, i32 4) #7
  %166 = bitcast i16 %165 to <16 x i1>
  %167 = select <16 x i1> %166, <16 x float> %38, <16 x float> %147
  %168 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %169 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %170 = or i16 %169, %168
  %171 = bitcast i16 %170 to <16 x i1>
  %172 = select <16 x i1> %171, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %167
  %173 = select <16 x i1> %166, <16 x float> zeroinitializer, <16 x float> %162
  %174 = select <16 x i1> %171, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %173
  br label %175

; <label>:175:                                    ; preds = %26, %7
  %176 = phi <16 x i32> [ %36, %26 ], [ %25, %7 ]
  %177 = phi <16 x float> [ %172, %26 ], [ %21, %7 ]
  %178 = phi <16 x float> [ %174, %26 ], [ %24, %7 ]
  %179 = phi <16 x i32> [ %108, %26 ], [ %10, %7 ]
  %180 = and <16 x i32> %179, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %181 = icmp ne <16 x i32> %180, zeroinitializer
  %182 = shl <16 x i32> %179, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %183 = bitcast <16 x i32> %182 to <8 x i64>
  %184 = bitcast <16 x float> %177 to <8 x i64>
  %185 = xor <8 x i64> %183, %184
  %186 = bitcast <8 x i64> %185 to <16 x float>
  %187 = bitcast <16 x float> %178 to <8 x i64>
  %188 = xor <8 x i64> %183, %187
  %189 = bitcast <8 x i64> %188 to <16 x float>
  %190 = and <8 x i64> %185, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %191 = bitcast <8 x i64> %190 to <16 x float>
  %192 = fsub <16 x float> %186, %191
  %193 = fmul <16 x float> %186, %186
  %194 = bitcast <16 x float> %193 to <8 x i64>
  %195 = xor <8 x i64> %194, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %196 = bitcast <8 x i64> %195 to <16 x float>
  %197 = fmul <16 x float> %191, %191
  %198 = fadd <16 x float> %197, %196
  %199 = fadd <16 x float> %191, %191
  %200 = fmul <16 x float> %199, %192
  %201 = fadd <16 x float> %200, %198
  %202 = fmul <16 x float> %192, %192
  %203 = fadd <16 x float> %202, %201
  %204 = fadd <16 x float> %189, %189
  %205 = fmul <16 x float> %204, %186
  %206 = fadd <16 x float> %205, %203
  %207 = fadd <16 x float> %193, %206
  %208 = fsub <16 x float> %193, %207
  %209 = fadd <16 x float> %206, %208
  %210 = fmul <16 x float> %207, <float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000, float 0x3F724B52A0000000>
  %211 = fadd <16 x float> %210, <float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000, float 0xBF15FFC9C0000000>
  %212 = fmul <16 x float> %207, %211
  %213 = fadd <16 x float> %212, <float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000, float 0x3F86744100000000>
  %214 = fmul <16 x float> %207, %213
  %215 = fadd <16 x float> %214, <float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000, float 0x3F95BEE5E0000000>
  %216 = fmul <16 x float> %207, %215
  %217 = fadd <16 x float> %216, <float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000, float 0x3FABAEE500000000>
  %218 = fmul <16 x float> %207, %217
  %219 = fadd <16 x float> %218, <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>
  %220 = fsub <16 x float> <float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000, float 0x3FC110D0C0000000>, %219
  %221 = fadd <16 x float> %218, %220
  %222 = bitcast <16 x float> %207 to <8 x i64>
  %223 = and <8 x i64> %222, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %224 = bitcast <8 x i64> %223 to <16 x float>
  %225 = fsub <16 x float> %207, %224
  %226 = bitcast <16 x float> %219 to <8 x i64>
  %227 = and <8 x i64> %226, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %228 = bitcast <8 x i64> %227 to <16 x float>
  %229 = fsub <16 x float> %219, %228
  %230 = fmul <16 x float> %207, %219
  %231 = bitcast <16 x float> %230 to <8 x i64>
  %232 = xor <8 x i64> %231, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %233 = bitcast <8 x i64> %232 to <16 x float>
  %234 = fmul <16 x float> %224, %228
  %235 = fadd <16 x float> %234, %233
  %236 = fmul <16 x float> %225, %228
  %237 = fadd <16 x float> %236, %235
  %238 = fmul <16 x float> %229, %224
  %239 = fadd <16 x float> %238, %237
  %240 = fmul <16 x float> %225, %229
  %241 = fadd <16 x float> %240, %239
  %242 = fmul <16 x float> %207, %221
  %243 = fadd <16 x float> %242, %241
  %244 = fmul <16 x float> %209, %219
  %245 = fadd <16 x float> %244, %243
  %246 = fadd <16 x float> %230, <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>
  %247 = fsub <16 x float> <float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000, float 0x3FD5555680000000>, %246
  %248 = fadd <16 x float> %230, %247
  %249 = fadd <16 x float> %248, %245
  %250 = bitcast <16 x float> %246 to <8 x i64>
  %251 = and <8 x i64> %250, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %252 = bitcast <8 x i64> %251 to <16 x float>
  %253 = fsub <16 x float> %246, %252
  %254 = fmul <16 x float> %207, %246
  %255 = bitcast <16 x float> %254 to <8 x i64>
  %256 = xor <8 x i64> %255, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %257 = bitcast <8 x i64> %256 to <16 x float>
  %258 = fmul <16 x float> %224, %252
  %259 = fadd <16 x float> %258, %257
  %260 = fmul <16 x float> %253, %224
  %261 = fadd <16 x float> %260, %259
  %262 = fmul <16 x float> %225, %252
  %263 = fadd <16 x float> %262, %261
  %264 = fmul <16 x float> %225, %253
  %265 = fadd <16 x float> %264, %263
  %266 = fmul <16 x float> %209, %246
  %267 = fadd <16 x float> %266, %265
  %268 = fmul <16 x float> %207, %249
  %269 = fadd <16 x float> %267, %268
  %270 = fadd <16 x float> %254, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %271 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %270
  %272 = fadd <16 x float> %254, %271
  %273 = fadd <16 x float> %272, %269
  %274 = bitcast <16 x float> %270 to <8 x i64>
  %275 = and <8 x i64> %274, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %276 = bitcast <8 x i64> %275 to <16 x float>
  %277 = fsub <16 x float> %270, %276
  %278 = fmul <16 x float> %270, %186
  %279 = bitcast <16 x float> %278 to <8 x i64>
  %280 = xor <8 x i64> %279, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %281 = bitcast <8 x i64> %280 to <16 x float>
  %282 = fmul <16 x float> %191, %276
  %283 = fadd <16 x float> %282, %281
  %284 = fmul <16 x float> %192, %276
  %285 = fadd <16 x float> %284, %283
  %286 = fmul <16 x float> %277, %191
  %287 = fadd <16 x float> %286, %285
  %288 = fmul <16 x float> %192, %277
  %289 = fadd <16 x float> %288, %287
  %290 = fmul <16 x float> %273, %186
  %291 = fadd <16 x float> %289, %290
  %292 = fmul <16 x float> %270, %189
  %293 = fadd <16 x float> %292, %291
  %294 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %278
  %295 = and <8 x i64> %279, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %296 = bitcast <8 x i64> %295 to <16 x float>
  %297 = fsub <16 x float> %278, %296
  %298 = bitcast <16 x float> %294 to <8 x i64>
  %299 = and <8 x i64> %298, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %300 = bitcast <8 x i64> %299 to <16 x float>
  %301 = fsub <16 x float> %294, %300
  %302 = fmul <16 x float> %296, %300
  %303 = fadd <16 x float> %302, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %304 = fmul <16 x float> %301, %296
  %305 = fadd <16 x float> %304, %303
  %306 = fmul <16 x float> %297, %300
  %307 = fadd <16 x float> %306, %305
  %308 = fmul <16 x float> %297, %301
  %309 = fadd <16 x float> %308, %307
  %310 = fmul <16 x float> %294, %293
  %311 = fadd <16 x float> %309, %310
  %312 = xor <8 x i64> %298, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %313 = bitcast <8 x i64> %312 to <16 x float>
  %314 = fmul <16 x float> %311, %313
  %315 = select <16 x i1> %181, <16 x float> %294, <16 x float> %278
  %316 = select <16 x i1> %181, <16 x float> %314, <16 x float> %293
  %317 = fadd <16 x float> %315, %316
  %318 = icmp eq <16 x i32> %176, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %319 = select <16 x i1> %318, <16 x float> %0, <16 x float> %317
  ret <16 x float> %319
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_atanf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = select <16 x i1> %6, <16 x float> %7, <16 x float> %4
  %9 = fmul <16 x float> %8, %8
  %10 = fmul <16 x float> %9, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %9, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %13 = fadd <16 x float> %12, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %14 = fmul <16 x float> %9, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %15 = fadd <16 x float> %14, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %16 = fmul <16 x float> %10, %13
  %17 = fadd <16 x float> %15, %16
  %18 = fmul <16 x float> %9, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %19 = fadd <16 x float> %18, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %20 = fmul <16 x float> %9, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %21 = fadd <16 x float> %20, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %22 = fmul <16 x float> %10, %19
  %23 = fadd <16 x float> %21, %22
  %24 = fmul <16 x float> %11, %17
  %25 = fadd <16 x float> %23, %24
  %26 = fmul <16 x float> %9, %25
  %27 = fmul <16 x float> %8, %26
  %28 = fadd <16 x float> %8, %27
  %29 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %28
  %30 = select <16 x i1> %6, <16 x float> %29, <16 x float> %28
  %31 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %32 = bitcast <16 x float> %30 to <8 x i64>
  %33 = xor <8 x i64> %31, %32
  %34 = bitcast <8 x i64> %33 to <16 x float>
  ret <16 x float> %34
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_atan2f16_u35avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <16 x i32>
  %7 = ashr <16 x i32> %6, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = bitcast <16 x float> %1 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = or <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> %5, i32 17, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x i32> %12, <16 x i32> %8
  %16 = or <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = select <16 x i1> %14, <16 x float> %17, <16 x float> %5
  %19 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %11, <16 x float> %5, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %20 = fdiv <16 x float> %18, %19
  %21 = fmul <16 x float> %20, %20
  %22 = fmul <16 x float> %21, %21
  %23 = fmul <16 x float> %22, %22
  %24 = fmul <16 x float> %21, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %25 = fadd <16 x float> %24, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %26 = fmul <16 x float> %21, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %27 = fadd <16 x float> %26, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %28 = fmul <16 x float> %22, %25
  %29 = fadd <16 x float> %27, %28
  %30 = fmul <16 x float> %21, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %31 = fadd <16 x float> %30, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %32 = fmul <16 x float> %21, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %33 = fadd <16 x float> %32, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %34 = fmul <16 x float> %22, %31
  %35 = fadd <16 x float> %33, %34
  %36 = fmul <16 x float> %23, %29
  %37 = fadd <16 x float> %35, %36
  %38 = fmul <16 x float> %21, %37
  %39 = fmul <16 x float> %20, %38
  %40 = fadd <16 x float> %20, %39
  %41 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %15, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %42 = fmul <16 x float> %41, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %43 = fadd <16 x float> %42, %40
  %44 = bitcast <16 x float> %43 to <8 x i64>
  %45 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = xor <8 x i64> %45, %44
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %50 = or i16 %49, %48
  %51 = or <8 x i64> %45, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %52 = bitcast i16 %48 to <16 x i1>
  %53 = bitcast <8 x i64> %51 to <16 x float>
  %54 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %55 = select <16 x i1> %52, <16 x float> %54, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %56 = bitcast i16 %50 to <16 x i1>
  %57 = select <16 x i1> %56, <16 x float> %55, <16 x float> %47
  %58 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %59 = or <8 x i64> %45, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %60
  %62 = select <16 x i1> %52, <16 x float> %61, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %63 = bitcast i16 %58 to <16 x i1>
  %64 = select <16 x i1> %63, <16 x float> %62, <16 x float> %57
  %65 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %66 = bitcast <16 x i32> %7 to <8 x i64>
  %67 = and <8 x i64> %66, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = bitcast i16 %65 to <16 x i1>
  %70 = select <16 x i1> %69, <16 x float> %68, <16 x float> %64
  %71 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %72 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %73 = or i16 %72, %71
  %74 = bitcast <16 x float> %70 to <8 x i64>
  %75 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = xor <8 x i64> %75, %74
  %77 = bitcast i16 %73 to <16 x i1>
  %78 = bitcast <8 x i64> %76 to <16 x float>
  %79 = select <16 x i1> %77, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %78
  ret <16 x float> %79
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_asinf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = select <16 x i1> %9, <16 x float> %4, <16 x float> %11
  %13 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %14 = fadd <16 x float> %13, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %15 = fmul <16 x float> %10, %14
  %16 = fadd <16 x float> %15, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %17 = fmul <16 x float> %10, %16
  %18 = fadd <16 x float> %17, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %19 = fmul <16 x float> %10, %18
  %20 = fadd <16 x float> %19, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %21 = fmul <16 x float> %12, %10
  %22 = fmul <16 x float> %21, %20
  %23 = fadd <16 x float> %12, %22
  %24 = fmul <16 x float> %23, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %25 = fadd <16 x float> %24, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %26 = select <16 x i1> %9, <16 x float> %23, <16 x float> %25
  %27 = bitcast <16 x float> %26 to <8 x i64>
  %28 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = xor <8 x i64> %28, %27
  %30 = bitcast <8 x i64> %29 to <16 x float>
  ret <16 x float> %30
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_acosf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = select <16 x i1> %9, <16 x float> %4, <16 x float> %11
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x float> zeroinitializer, <16 x float> %12
  %16 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %17 = fadd <16 x float> %16, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %18 = fmul <16 x float> %10, %17
  %19 = fadd <16 x float> %18, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %20 = fmul <16 x float> %10, %19
  %21 = fadd <16 x float> %20, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %22 = fmul <16 x float> %10, %21
  %23 = fadd <16 x float> %22, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %24 = fmul <16 x float> %10, %15
  %25 = fmul <16 x float> %24, %23
  %26 = bitcast <16 x float> %15 to <8 x i64>
  %27 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = xor <8 x i64> %27, %26
  %29 = bitcast <8 x i64> %28 to <16 x float>
  %30 = bitcast <16 x float> %25 to <8 x i64>
  %31 = xor <8 x i64> %27, %30
  %32 = bitcast <8 x i64> %31 to <16 x float>
  %33 = fadd <16 x float> %29, %32
  %34 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %33
  %35 = fadd <16 x float> %15, %25
  %36 = fmul <16 x float> %35, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %37 = select <16 x i1> %9, <16 x float> %34, <16 x float> %36
  %38 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %39 = bitcast i16 %38 to <16 x i1>
  %40 = xor <16 x i1> %9, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %41 = and <16 x i1> %39, %40
  %42 = bitcast <16 x float> %37 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fadd <16 x float> %44, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %46 = select <16 x i1> %41, <16 x float> %45, <16 x float> %37
  ret <16 x float> %46
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_atan2f16_u10avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %1 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000, float 0x37F0000080000000>, i32 17, i16 -1, i32 4) #7
  %7 = fmul <16 x float> %1, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %8 = bitcast i16 %6 to <16 x i1>
  %9 = select <16 x i1> %8, <16 x float> %7, <16 x float> %1
  %10 = fmul <16 x float> %0, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %11 = select <16 x i1> %8, <16 x float> %10, <16 x float> %0
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %16 = bitcast i16 %15 to <16 x i1>
  %17 = select <16 x i1> %16, <16 x i32> <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>, <16 x i32> zeroinitializer
  %18 = select <16 x i1> %16, <16 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <16 x i32> zeroinitializer
  %19 = bitcast <16 x i32> %18 to <8 x i64>
  %20 = bitcast <16 x float> %9 to <8 x i64>
  %21 = xor <8 x i64> %19, %20
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = bitcast <16 x i32> %18 to <16 x float>
  %24 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %22, <16 x float> %14, i32 17, i16 -1, i32 4) #7
  %25 = bitcast i16 %24 to <16 x i1>
  %26 = zext <16 x i1> %25 to <16 x i32>
  %27 = or <16 x i32> %17, %26
  %28 = xor <8 x i64> %21, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = xor <8 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %30 = bitcast <8 x i64> %28 to <16 x float>
  %31 = bitcast <8 x i64> %29 to <16 x float>
  %32 = select <16 x i1> %25, <16 x float> %30, <16 x float> %14
  %33 = select <16 x i1> %25, <16 x float> %31, <16 x float> zeroinitializer
  %34 = select <16 x i1> %25, <16 x float> %14, <16 x float> %22
  %35 = select <16 x i1> %25, <16 x float> zeroinitializer, <16 x float> %23
  %36 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %37 = bitcast <16 x float> %34 to <8 x i64>
  %38 = and <8 x i64> %37, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %34, %39
  %41 = bitcast <16 x float> %36 to <8 x i64>
  %42 = and <8 x i64> %41, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = fsub <16 x float> %36, %43
  %45 = bitcast <16 x float> %32 to <8 x i64>
  %46 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fsub <16 x float> %32, %47
  %49 = fmul <16 x float> %36, %32
  %50 = fmul <16 x float> %39, %43
  %51 = fadd <16 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <16 x float> %44, %39
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %40, %43
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %40, %44
  %57 = fadd <16 x float> %56, %55
  %58 = bitcast <16 x float> %57 to <8 x i64>
  %59 = xor <8 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = bitcast <16 x float> %49 to <8 x i64>
  %62 = xor <8 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <8 x i64> %62 to <16 x float>
  %64 = fmul <16 x float> %47, %43
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %44, %47
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %48, %43
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %48, %44
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %49, %60
  %73 = fadd <16 x float> %71, %72
  %74 = fmul <16 x float> %35, %49
  %75 = fsub <16 x float> %33, %74
  %76 = fmul <16 x float> %36, %75
  %77 = fadd <16 x float> %76, %73
  %78 = and <8 x i64> %61, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %79 = bitcast <8 x i64> %78 to <16 x float>
  %80 = fsub <16 x float> %49, %79
  %81 = fmul <16 x float> %49, %49
  %82 = bitcast <16 x float> %81 to <8 x i64>
  %83 = xor <8 x i64> %82, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %84 = bitcast <8 x i64> %83 to <16 x float>
  %85 = fmul <16 x float> %79, %79
  %86 = fadd <16 x float> %85, %84
  %87 = fadd <16 x float> %79, %79
  %88 = fmul <16 x float> %87, %80
  %89 = fadd <16 x float> %88, %86
  %90 = fmul <16 x float> %80, %80
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %77, %77
  %93 = fmul <16 x float> %49, %92
  %94 = fadd <16 x float> %91, %93
  %95 = fadd <16 x float> %81, %94
  %96 = fsub <16 x float> %81, %95
  %97 = fadd <16 x float> %94, %96
  %98 = fmul <16 x float> %95, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %99 = fadd <16 x float> %98, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %100 = fmul <16 x float> %95, %99
  %101 = fadd <16 x float> %100, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %102 = fmul <16 x float> %95, %101
  %103 = fadd <16 x float> %102, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %104 = fmul <16 x float> %95, %103
  %105 = fadd <16 x float> %104, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %106 = fmul <16 x float> %95, %105
  %107 = fadd <16 x float> %106, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %108 = fmul <16 x float> %95, %107
  %109 = fadd <16 x float> %108, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %110 = fmul <16 x float> %95, %109
  %111 = fadd <16 x float> %110, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %112 = fmul <16 x float> %95, %111
  %113 = fadd <16 x float> %112, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %114 = fsub <16 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %113
  %115 = fadd <16 x float> %112, %114
  %116 = bitcast <16 x float> %95 to <8 x i64>
  %117 = and <8 x i64> %116, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %118 = bitcast <8 x i64> %117 to <16 x float>
  %119 = fsub <16 x float> %95, %118
  %120 = bitcast <16 x float> %113 to <8 x i64>
  %121 = and <8 x i64> %120, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fsub <16 x float> %113, %122
  %124 = fmul <16 x float> %95, %113
  %125 = bitcast <16 x float> %124 to <8 x i64>
  %126 = xor <8 x i64> %125, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %127 = bitcast <8 x i64> %126 to <16 x float>
  %128 = fmul <16 x float> %118, %122
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %119, %122
  %131 = fadd <16 x float> %130, %129
  %132 = fmul <16 x float> %123, %118
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %119, %123
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %95, %115
  %137 = fadd <16 x float> %136, %135
  %138 = fmul <16 x float> %97, %113
  %139 = fadd <16 x float> %138, %137
  %140 = fadd <16 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %141 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %140
  %142 = fadd <16 x float> %124, %141
  %143 = fadd <16 x float> %142, %139
  %144 = bitcast <16 x float> %140 to <8 x i64>
  %145 = and <8 x i64> %144, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <8 x i64> %145 to <16 x float>
  %147 = fsub <16 x float> %140, %146
  %148 = fmul <16 x float> %49, %140
  %149 = bitcast <16 x float> %148 to <8 x i64>
  %150 = xor <8 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fmul <16 x float> %79, %146
  %153 = fadd <16 x float> %152, %151
  %154 = fmul <16 x float> %80, %146
  %155 = fadd <16 x float> %154, %153
  %156 = fmul <16 x float> %147, %79
  %157 = fadd <16 x float> %156, %155
  %158 = fmul <16 x float> %80, %147
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %49, %143
  %161 = fadd <16 x float> %159, %160
  %162 = fmul <16 x float> %77, %140
  %163 = fadd <16 x float> %162, %161
  %164 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %27, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %165 = bitcast <16 x float> %164 to <8 x i64>
  %166 = and <8 x i64> %165, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %167 = bitcast <8 x i64> %166 to <16 x float>
  %168 = fsub <16 x float> %164, %167
  %169 = fmul <16 x float> %164, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %170 = bitcast <16 x float> %169 to <8 x i64>
  %171 = xor <8 x i64> %170, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <8 x i64> %171 to <16 x float>
  %173 = fmul <16 x float> %167, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %174 = fadd <16 x float> %173, %172
  %175 = fmul <16 x float> %167, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %176 = fadd <16 x float> %175, %174
  %177 = fmul <16 x float> %168, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %178 = fadd <16 x float> %177, %176
  %179 = fmul <16 x float> %168, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %180 = fadd <16 x float> %179, %178
  %181 = fmul <16 x float> %164, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %182 = fadd <16 x float> %181, %180
  %183 = fadd <16 x float> %169, %148
  %184 = fsub <16 x float> %169, %183
  %185 = fadd <16 x float> %148, %184
  %186 = fadd <16 x float> %182, %185
  %187 = fadd <16 x float> %186, %163
  %188 = fadd <16 x float> %183, %187
  %189 = bitcast <16 x float> %188 to <8 x i64>
  %190 = and <8 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %191 = xor <8 x i64> %190, %189
  %192 = bitcast <8 x i64> %191 to <16 x float>
  %193 = and <8 x i64> %20, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %194 = bitcast <8 x i64> %193 to <16 x float>
  %195 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %194, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %196 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %197 = or i16 %196, %195
  %198 = or <8 x i64> %190, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %199 = bitcast i16 %195 to <16 x i1>
  %200 = bitcast <8 x i64> %198 to <16 x float>
  %201 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %200
  %202 = select <16 x i1> %199, <16 x float> %201, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %203 = bitcast i16 %197 to <16 x i1>
  %204 = select <16 x i1> %203, <16 x float> %202, <16 x float> %192
  %205 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %206 = or <8 x i64> %190, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %207 = bitcast <8 x i64> %206 to <16 x float>
  %208 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %207
  %209 = select <16 x i1> %199, <16 x float> %208, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %210 = bitcast i16 %205 to <16 x i1>
  %211 = select <16 x i1> %210, <16 x float> %209, <16 x float> %204
  %212 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %213 = bitcast <16 x float> %9 to <16 x i32>
  %214 = ashr <16 x i32> %213, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %215 = bitcast <16 x i32> %214 to <8 x i64>
  %216 = and <8 x i64> %215, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %217 = bitcast <8 x i64> %216 to <16 x float>
  %218 = bitcast i16 %212 to <16 x i1>
  %219 = select <16 x i1> %218, <16 x float> %217, <16 x float> %211
  %220 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> %9, i32 4, i16 -1, i32 4) #7
  %221 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> %11, i32 4, i16 -1, i32 4) #7
  %222 = or i16 %221, %220
  %223 = bitcast <16 x float> %219 to <8 x i64>
  %224 = and <8 x i64> %12, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %225 = xor <8 x i64> %224, %223
  %226 = bitcast i16 %222 to <16 x i1>
  %227 = bitcast <8 x i64> %225 to <16 x float>
  %228 = select <16 x i1> %226, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %227
  ret <16 x float> %228
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_asinf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %11, %14
  %16 = fmul <16 x float> %11, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %14, %14
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %15, %14
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %15, %15
  %26 = fadd <16 x float> %25, %24
  %27 = fadd <16 x float> %16, %10
  %28 = fsub <16 x float> %27, %10
  %29 = fsub <16 x float> %27, %28
  %30 = fsub <16 x float> %10, %29
  %31 = fsub <16 x float> %16, %28
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %32, %26
  %34 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %35 = bitcast <16 x float> %34 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %34, %37
  %39 = fmul <16 x float> %14, %37
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %38, %14
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %15, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %15, %38
  %46 = fadd <16 x float> %45, %44
  %47 = xor <8 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %46, %48
  %50 = bitcast <16 x float> %27 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %27, %52
  %54 = fmul <16 x float> %34, %27
  %55 = bitcast <16 x float> %54 to <8 x i64>
  %56 = xor <8 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fmul <16 x float> %37, %52
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %53, %37
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %38, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %38, %53
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %27, %49
  %67 = fadd <16 x float> %65, %66
  %68 = fmul <16 x float> %34, %33
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fmul <16 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = select <16 x i1> %9, <16 x float> %4, <16 x float> %70
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %74 = bitcast i16 %73 to <16 x i1>
  %75 = select <16 x i1> %74, <16 x float> zeroinitializer, <16 x float> %72
  %76 = or i16 %73, %5
  %77 = bitcast i16 %76 to <16 x i1>
  %78 = select <16 x i1> %77, <16 x float> zeroinitializer, <16 x float> %71
  %79 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %80 = fadd <16 x float> %79, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %81 = fmul <16 x float> %10, %80
  %82 = fadd <16 x float> %81, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %83 = fmul <16 x float> %10, %82
  %84 = fadd <16 x float> %83, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %85 = fmul <16 x float> %10, %84
  %86 = fadd <16 x float> %85, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %87 = fmul <16 x float> %10, %75
  %88 = fmul <16 x float> %87, %86
  %89 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %75
  %90 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %89
  %91 = fsub <16 x float> %90, %75
  %92 = fadd <16 x float> %91, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %93 = fsub <16 x float> %92, %78
  %94 = fsub <16 x float> %89, %88
  %95 = fsub <16 x float> %89, %94
  %96 = fsub <16 x float> %95, %88
  %97 = fadd <16 x float> %96, %93
  %98 = fadd <16 x float> %75, %88
  %99 = fadd <16 x float> %94, %97
  %100 = fmul <16 x float> %99, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %101 = select <16 x i1> %9, <16 x float> %98, <16 x float> %100
  %102 = bitcast <16 x float> %101 to <8 x i64>
  %103 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = xor <8 x i64> %103, %102
  %105 = bitcast <8 x i64> %104 to <16 x float>
  ret <16 x float> %105
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_acosf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %11, %14
  %16 = fmul <16 x float> %11, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %14, %14
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %15, %14
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %15, %15
  %26 = fadd <16 x float> %25, %24
  %27 = fadd <16 x float> %16, %10
  %28 = fsub <16 x float> %27, %10
  %29 = fsub <16 x float> %27, %28
  %30 = fsub <16 x float> %10, %29
  %31 = fsub <16 x float> %16, %28
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %32, %26
  %34 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %35 = bitcast <16 x float> %34 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %34, %37
  %39 = fmul <16 x float> %14, %37
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %38, %14
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %15, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %15, %38
  %46 = fadd <16 x float> %45, %44
  %47 = xor <8 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %46, %48
  %50 = bitcast <16 x float> %27 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %27, %52
  %54 = fmul <16 x float> %34, %27
  %55 = bitcast <16 x float> %54 to <8 x i64>
  %56 = xor <8 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fmul <16 x float> %37, %52
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %53, %37
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %38, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %38, %53
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %27, %49
  %67 = fadd <16 x float> %65, %66
  %68 = fmul <16 x float> %34, %33
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fmul <16 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = select <16 x i1> %9, <16 x float> %4, <16 x float> %70
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %74 = bitcast i16 %73 to <16 x i1>
  %75 = select <16 x i1> %74, <16 x float> zeroinitializer, <16 x float> %72
  %76 = or i16 %73, %5
  %77 = bitcast i16 %76 to <16 x i1>
  %78 = select <16 x i1> %77, <16 x float> zeroinitializer, <16 x float> %71
  %79 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %80 = fadd <16 x float> %79, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %81 = fmul <16 x float> %10, %80
  %82 = fadd <16 x float> %81, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %83 = fmul <16 x float> %10, %82
  %84 = fadd <16 x float> %83, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %85 = fmul <16 x float> %10, %84
  %86 = fadd <16 x float> %85, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %87 = fmul <16 x float> %10, %75
  %88 = fmul <16 x float> %87, %86
  %89 = bitcast <16 x float> %75 to <8 x i64>
  %90 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %91 = xor <8 x i64> %90, %89
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = bitcast <16 x float> %88 to <8 x i64>
  %94 = xor <8 x i64> %90, %93
  %95 = bitcast <8 x i64> %94 to <16 x float>
  %96 = fadd <16 x float> %92, %95
  %97 = fsub <16 x float> %92, %96
  %98 = fadd <16 x float> %97, %95
  %99 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %96
  %100 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %99
  %101 = fsub <16 x float> %100, %96
  %102 = fadd <16 x float> %101, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %103 = fsub <16 x float> %102, %98
  %104 = fadd <16 x float> %75, %88
  %105 = fsub <16 x float> %75, %104
  %106 = fadd <16 x float> %88, %105
  %107 = fadd <16 x float> %106, %78
  %108 = fmul <16 x float> %104, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %109 = fmul <16 x float> %107, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %110 = select <16 x i1> %9, <16 x float> %99, <16 x float> %108
  %111 = select <16 x i1> %9, <16 x float> %103, <16 x float> %109
  %112 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %113 = bitcast i16 %112 to <16 x i1>
  %114 = xor <16 x i1> %9, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %115 = and <16 x i1> %113, %114
  %116 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %110
  %117 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %116
  %118 = fsub <16 x float> %117, %110
  %119 = fadd <16 x float> %118, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %120 = fsub <16 x float> %119, %111
  %121 = select <16 x i1> %115, <16 x float> %116, <16 x float> %110
  %122 = select <16 x i1> %115, <16 x float> %120, <16 x float> %111
  %123 = fadd <16 x float> %121, %122
  ret <16 x float> %123
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_atanf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = select <16 x i1> %6, <16 x i32> <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>, <16 x i32> zeroinitializer
  %8 = select <16 x i1> %6, <16 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <16 x i32> zeroinitializer
  %9 = bitcast <16 x i32> %8 to <8 x i64>
  %10 = xor <8 x i64> %9, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = bitcast <16 x i32> %8 to <16 x float>
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = zext <16 x i1> %14 to <16 x i32>
  %16 = or <16 x i32> %7, %15
  %17 = xor <8 x i64> %9, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %18 = xor <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %17 to <16 x float>
  %20 = bitcast <8 x i64> %18 to <16 x float>
  %21 = select <16 x i1> %14, <16 x float> %19, <16 x float> %4
  %22 = select <16 x i1> %14, <16 x float> %20, <16 x float> zeroinitializer
  %23 = select <16 x i1> %14, <16 x float> %4, <16 x float> %11
  %24 = select <16 x i1> %14, <16 x float> zeroinitializer, <16 x float> %12
  %25 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %23
  %26 = bitcast <16 x float> %23 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %23, %28
  %30 = bitcast <16 x float> %25 to <8 x i64>
  %31 = and <8 x i64> %30, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %32 = bitcast <8 x i64> %31 to <16 x float>
  %33 = fsub <16 x float> %25, %32
  %34 = bitcast <16 x float> %21 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %21, %36
  %38 = fmul <16 x float> %21, %25
  %39 = fmul <16 x float> %28, %32
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %33, %28
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %29, %32
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %29, %33
  %46 = fadd <16 x float> %45, %44
  %47 = bitcast <16 x float> %46 to <8 x i64>
  %48 = xor <8 x i64> %47, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = bitcast <16 x float> %38 to <8 x i64>
  %51 = xor <8 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fmul <16 x float> %36, %32
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %33, %36
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %37, %32
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %37, %33
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %38, %49
  %62 = fadd <16 x float> %60, %61
  %63 = fmul <16 x float> %24, %38
  %64 = fsub <16 x float> %22, %63
  %65 = fmul <16 x float> %25, %64
  %66 = fadd <16 x float> %65, %62
  %67 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = fsub <16 x float> %38, %68
  %70 = fmul <16 x float> %38, %38
  %71 = bitcast <16 x float> %70 to <8 x i64>
  %72 = xor <8 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x i64> %72 to <16 x float>
  %74 = fmul <16 x float> %68, %68
  %75 = fadd <16 x float> %74, %73
  %76 = fadd <16 x float> %68, %68
  %77 = fmul <16 x float> %76, %69
  %78 = fadd <16 x float> %77, %75
  %79 = fmul <16 x float> %69, %69
  %80 = fadd <16 x float> %79, %78
  %81 = fadd <16 x float> %66, %66
  %82 = fmul <16 x float> %38, %81
  %83 = fadd <16 x float> %80, %82
  %84 = fadd <16 x float> %70, %83
  %85 = fsub <16 x float> %70, %84
  %86 = fadd <16 x float> %83, %85
  %87 = fmul <16 x float> %84, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %88 = fadd <16 x float> %87, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %89 = fmul <16 x float> %84, %88
  %90 = fadd <16 x float> %89, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %91 = fmul <16 x float> %84, %90
  %92 = fadd <16 x float> %91, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %93 = fmul <16 x float> %84, %92
  %94 = fadd <16 x float> %93, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %95 = fmul <16 x float> %84, %94
  %96 = fadd <16 x float> %95, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %97 = fmul <16 x float> %84, %96
  %98 = fadd <16 x float> %97, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %99 = fmul <16 x float> %84, %98
  %100 = fadd <16 x float> %99, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %101 = fmul <16 x float> %84, %100
  %102 = fadd <16 x float> %101, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %103 = fsub <16 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %102
  %104 = fadd <16 x float> %101, %103
  %105 = bitcast <16 x float> %84 to <8 x i64>
  %106 = and <8 x i64> %105, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <8 x i64> %106 to <16 x float>
  %108 = fsub <16 x float> %84, %107
  %109 = bitcast <16 x float> %102 to <8 x i64>
  %110 = and <8 x i64> %109, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fsub <16 x float> %102, %111
  %113 = fmul <16 x float> %84, %102
  %114 = bitcast <16 x float> %113 to <8 x i64>
  %115 = xor <8 x i64> %114, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <8 x i64> %115 to <16 x float>
  %117 = fmul <16 x float> %107, %111
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %108, %111
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %112, %107
  %122 = fadd <16 x float> %121, %120
  %123 = fmul <16 x float> %108, %112
  %124 = fadd <16 x float> %123, %122
  %125 = fmul <16 x float> %84, %104
  %126 = fadd <16 x float> %125, %124
  %127 = fmul <16 x float> %86, %102
  %128 = fadd <16 x float> %127, %126
  %129 = fadd <16 x float> %113, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <16 x float> %113, %130
  %132 = fadd <16 x float> %131, %128
  %133 = bitcast <16 x float> %129 to <8 x i64>
  %134 = and <8 x i64> %133, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %135 = bitcast <8 x i64> %134 to <16 x float>
  %136 = fsub <16 x float> %129, %135
  %137 = fmul <16 x float> %38, %129
  %138 = bitcast <16 x float> %137 to <8 x i64>
  %139 = xor <8 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <8 x i64> %139 to <16 x float>
  %141 = fmul <16 x float> %68, %135
  %142 = fadd <16 x float> %141, %140
  %143 = fmul <16 x float> %69, %135
  %144 = fadd <16 x float> %143, %142
  %145 = fmul <16 x float> %136, %68
  %146 = fadd <16 x float> %145, %144
  %147 = fmul <16 x float> %69, %136
  %148 = fadd <16 x float> %147, %146
  %149 = fmul <16 x float> %38, %132
  %150 = fadd <16 x float> %148, %149
  %151 = fmul <16 x float> %66, %129
  %152 = fadd <16 x float> %151, %150
  %153 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %16, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %154 = bitcast <16 x float> %153 to <8 x i64>
  %155 = and <8 x i64> %154, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fsub <16 x float> %153, %156
  %158 = fmul <16 x float> %153, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %159 = bitcast <16 x float> %158 to <8 x i64>
  %160 = xor <8 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = bitcast <8 x i64> %160 to <16 x float>
  %162 = fmul <16 x float> %156, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %156, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %157, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %167 = fadd <16 x float> %166, %165
  %168 = fmul <16 x float> %157, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %169 = fadd <16 x float> %168, %167
  %170 = fmul <16 x float> %153, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %171 = fadd <16 x float> %170, %169
  %172 = fadd <16 x float> %158, %137
  %173 = fsub <16 x float> %158, %172
  %174 = fadd <16 x float> %137, %173
  %175 = fadd <16 x float> %171, %174
  %176 = fadd <16 x float> %175, %152
  %177 = fadd <16 x float> %172, %176
  %178 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %179 = bitcast i16 %178 to <16 x i1>
  %180 = select <16 x i1> %179, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <16 x float> %177
  %181 = bitcast <16 x float> %180 to <8 x i64>
  %182 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %183 = xor <8 x i64> %182, %181
  %184 = bitcast <8 x i64> %183 to <16 x float>
  ret <16 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_logf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %7 = fadd <16 x float> %6, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %8 = fadd <16 x float> %6, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9 = fdiv <16 x float> %7, %8
  %10 = fmul <16 x float> %9, %9
  %11 = fmul <16 x float> %10, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %12 = fadd <16 x float> %11, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %13 = fmul <16 x float> %10, %12
  %14 = fadd <16 x float> %13, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %15 = fmul <16 x float> %10, %14
  %16 = fadd <16 x float> %15, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %17 = fmul <16 x float> %10, %16
  %18 = fadd <16 x float> %17, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %19 = fmul <16 x float> %3, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %20 = select <16 x i1> %5, <16 x float> <float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000>, <16 x float> %19
  %21 = fmul <16 x float> %9, %18
  %22 = fadd <16 x float> %20, %21
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %22, <16 x float> %0, <16 x i32> <i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880>, i32 0, i16 -1, i32 4)
  ret <16 x float> %23
}

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float>, <16 x float>, <16 x i32>, i32, i16, i32) #4

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_expf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <16 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <16 x float> %8, %8
  %20 = fmul <16 x float> %19, %18
  %21 = fadd <16 x float> %8, %20
  %22 = fadd <16 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %24 = shl <16 x i32> %23, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %25 = add <16 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <16 x i32> %25 to <16 x float>
  %27 = fmul <16 x float> %22, %26
  %28 = sub <16 x i32> %3, %23
  %29 = shl <16 x i32> %28, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <16 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = fmul <16 x float> %27, %31
  %33 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %34 = bitcast i16 %33 to <16 x i1>
  %35 = select <16 x i1> %34, <16 x float> zeroinitializer, <16 x float> %32
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <16 x float> %0, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %35
  ret <16 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sqrtf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cbrtf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = add <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %8 = xor <16 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %9 = ashr <16 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = shl <16 x i32> %9, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = add <16 x i32> %10, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = bitcast <16 x i32> %11 to <16 x float>
  %13 = fmul <16 x float> %12, %0
  %14 = sub <16 x i32> %8, %9
  %15 = shl <16 x i32> %14, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %16 = add <16 x i32> %15, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %17 = bitcast <16 x i32> %16 to <16 x float>
  %18 = fmul <16 x float> %13, %17
  %19 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %20 = fadd <16 x float> %19, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %21 = fmul <16 x float> %20, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %22 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %21, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %22, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %24 = fmul <16 x float> %23, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %25 = fsub <16 x float> %20, %24
  %26 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %25, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %27 = icmp eq <16 x i32> %26, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %28 = select <16 x i1> %27, <16 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = icmp eq <16 x i32> %26, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %30 = select <16 x i1> %29, <16 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <16 x float> %28
  %31 = add <16 x i32> %22, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %32 = ashr <16 x i32> %31, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %33 = shl <16 x i32> %32, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %34 = add <16 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <16 x i32> %34 to <16 x float>
  %36 = fmul <16 x float> %30, %35
  %37 = sub <16 x i32> %31, %32
  %38 = shl <16 x i32> %37, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %39 = add <16 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <16 x i32> %39 to <16 x float>
  %41 = fmul <16 x float> %36, %40
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = bitcast <16 x float> %18 to <8 x i64>
  %44 = and <8 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = xor <8 x i64> %44, %42
  %46 = bitcast <8 x i64> %45 to <16 x float>
  %47 = and <8 x i64> %43, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %48, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %50 = fadd <16 x float> %49, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %51 = fmul <16 x float> %50, %48
  %52 = fadd <16 x float> %51, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %53 = fmul <16 x float> %52, %48
  %54 = fadd <16 x float> %53, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %55 = fmul <16 x float> %54, %48
  %56 = fadd <16 x float> %55, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %57 = fmul <16 x float> %56, %48
  %58 = fadd <16 x float> %57, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %59 = fmul <16 x float> %58, %48
  %60 = fmul <16 x float> %58, %59
  %61 = fmul <16 x float> %60, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %62 = fmul <16 x float> %58, %60
  %63 = fadd <16 x float> %62, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %64 = fmul <16 x float> %61, %63
  %65 = fsub <16 x float> %60, %64
  %66 = fmul <16 x float> %65, %46
  %67 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %68 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = or <8 x i64> %68, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %70 = bitcast <8 x i64> %69 to <16 x float>
  %71 = bitcast i16 %67 to <16 x i1>
  %72 = select <16 x i1> %71, <16 x float> %70, <16 x float> %66
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %74 = bitcast <8 x i64> %68 to <16 x float>
  %75 = bitcast i16 %73 to <16 x i1>
  %76 = select <16 x i1> %75, <16 x float> %74, <16 x float> %72
  ret <16 x float> %76
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cbrtf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = add <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %8 = xor <16 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %9 = ashr <16 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = shl <16 x i32> %9, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = add <16 x i32> %10, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = bitcast <16 x i32> %11 to <16 x float>
  %13 = fmul <16 x float> %12, %0
  %14 = sub <16 x i32> %8, %9
  %15 = shl <16 x i32> %14, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %16 = add <16 x i32> %15, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %17 = bitcast <16 x i32> %16 to <16 x float>
  %18 = fmul <16 x float> %13, %17
  %19 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %20 = fadd <16 x float> %19, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %21 = fmul <16 x float> %20, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %22 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %21, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %22, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %24 = fmul <16 x float> %23, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %25 = fsub <16 x float> %20, %24
  %26 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %25, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %27 = icmp eq <16 x i32> %26, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %28 = select <16 x i1> %27, <16 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = select <16 x i1> %27, <16 x float> <float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000, float 0xBE59CA35E0000000>, <16 x float> zeroinitializer
  %30 = icmp eq <16 x i32> %26, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %31 = select <16 x i1> %30, <16 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <16 x float> %28
  %32 = select <16 x i1> %30, <16 x float> <float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000, float 0x3E54F5B900000000>, <16 x float> %29
  %33 = bitcast <16 x float> %31 to <8 x i64>
  %34 = bitcast <16 x float> %18 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %36 = xor <8 x i64> %35, %33
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = bitcast <16 x float> %32 to <8 x i64>
  %39 = xor <8 x i64> %35, %38
  %40 = bitcast <8 x i64> %39 to <16 x float>
  %41 = and <8 x i64> %34, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %42 = bitcast <8 x i64> %41 to <16 x float>
  %43 = fmul <16 x float> %42, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %44 = fadd <16 x float> %43, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %45 = fmul <16 x float> %44, %42
  %46 = fadd <16 x float> %45, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %47 = fmul <16 x float> %46, %42
  %48 = fadd <16 x float> %47, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %49 = fmul <16 x float> %48, %42
  %50 = fadd <16 x float> %49, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %51 = fmul <16 x float> %50, %42
  %52 = fadd <16 x float> %51, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %53 = fmul <16 x float> %52, %52
  %54 = fmul <16 x float> %53, %53
  %55 = fmul <16 x float> %54, %42
  %56 = fsub <16 x float> %52, %55
  %57 = fmul <16 x float> %56, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %58 = fsub <16 x float> %52, %57
  %59 = bitcast <16 x float> %58 to <8 x i64>
  %60 = and <8 x i64> %59, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %61 = bitcast <8 x i64> %60 to <16 x float>
  %62 = fsub <16 x float> %58, %61
  %63 = fmul <16 x float> %58, %58
  %64 = bitcast <16 x float> %63 to <8 x i64>
  %65 = xor <8 x i64> %64, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %66 = bitcast <8 x i64> %65 to <16 x float>
  %67 = fmul <16 x float> %61, %61
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %62, %61
  %70 = fadd <16 x float> %69, %68
  %71 = fadd <16 x float> %69, %70
  %72 = fmul <16 x float> %62, %62
  %73 = fadd <16 x float> %72, %71
  %74 = and <8 x i64> %64, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %75 = bitcast <8 x i64> %74 to <16 x float>
  %76 = fsub <16 x float> %63, %75
  %77 = fmul <16 x float> %63, %63
  %78 = bitcast <16 x float> %77 to <8 x i64>
  %79 = xor <8 x i64> %78, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %80 = bitcast <8 x i64> %79 to <16 x float>
  %81 = fmul <16 x float> %75, %75
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %76, %75
  %84 = fadd <16 x float> %83, %82
  %85 = fadd <16 x float> %83, %84
  %86 = fmul <16 x float> %76, %76
  %87 = fadd <16 x float> %86, %85
  %88 = fmul <16 x float> %63, %73
  %89 = fadd <16 x float> %88, %87
  %90 = fadd <16 x float> %88, %89
  %91 = and <8 x i64> %78, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = fsub <16 x float> %77, %92
  %94 = and <8 x i64> %34, <i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944>
  %95 = bitcast <8 x i64> %94 to <16 x float>
  %96 = fsub <16 x float> %42, %95
  %97 = fmul <16 x float> %77, %42
  %98 = bitcast <16 x float> %97 to <8 x i64>
  %99 = xor <8 x i64> %98, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %100 = bitcast <8 x i64> %99 to <16 x float>
  %101 = fmul <16 x float> %95, %92
  %102 = fadd <16 x float> %101, %100
  %103 = fmul <16 x float> %93, %95
  %104 = fadd <16 x float> %103, %102
  %105 = fmul <16 x float> %96, %92
  %106 = fadd <16 x float> %105, %104
  %107 = fmul <16 x float> %96, %93
  %108 = fadd <16 x float> %107, %106
  %109 = fmul <16 x float> %90, %42
  %110 = fadd <16 x float> %108, %109
  %111 = xor <8 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %112 = bitcast <8 x i64> %111 to <16 x float>
  %113 = fadd <16 x float> %97, %112
  %114 = fsub <16 x float> %113, %97
  %115 = fsub <16 x float> %113, %114
  %116 = fsub <16 x float> %97, %115
  %117 = fsub <16 x float> %112, %114
  %118 = fadd <16 x float> %117, %116
  %119 = fadd <16 x float> %118, %110
  %120 = fadd <16 x float> %113, %119
  %121 = fmul <16 x float> %120, <float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000, float 0xBFE5555560000000>
  %122 = fmul <16 x float> %58, %121
  %123 = fadd <16 x float> %63, %122
  %124 = fsub <16 x float> %123, %63
  %125 = fsub <16 x float> %123, %124
  %126 = fsub <16 x float> %63, %125
  %127 = fsub <16 x float> %122, %124
  %128 = fadd <16 x float> %127, %126
  %129 = fadd <16 x float> %73, %128
  %130 = bitcast <16 x float> %123 to <8 x i64>
  %131 = and <8 x i64> %130, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %132 = bitcast <8 x i64> %131 to <16 x float>
  %133 = fsub <16 x float> %123, %132
  %134 = fmul <16 x float> %123, %42
  %135 = bitcast <16 x float> %134 to <8 x i64>
  %136 = xor <8 x i64> %135, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %137 = bitcast <8 x i64> %136 to <16 x float>
  %138 = fmul <16 x float> %95, %132
  %139 = fadd <16 x float> %138, %137
  %140 = fmul <16 x float> %133, %95
  %141 = fadd <16 x float> %140, %139
  %142 = fmul <16 x float> %96, %132
  %143 = fadd <16 x float> %142, %141
  %144 = fmul <16 x float> %96, %133
  %145 = fadd <16 x float> %144, %143
  %146 = fmul <16 x float> %129, %42
  %147 = fadd <16 x float> %146, %145
  %148 = and <8 x i64> %135, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %149 = bitcast <8 x i64> %148 to <16 x float>
  %150 = fsub <16 x float> %134, %149
  %151 = and <8 x i64> %36, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fsub <16 x float> %37, %152
  %154 = fmul <16 x float> %134, %37
  %155 = bitcast <16 x float> %154 to <8 x i64>
  %156 = xor <8 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %152, %149
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %150, %152
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %153, %149
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %153, %150
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %134, %40
  %167 = fadd <16 x float> %166, %165
  %168 = fmul <16 x float> %147, %37
  %169 = fadd <16 x float> %168, %167
  %170 = fadd <16 x float> %154, %169
  %171 = add <16 x i32> %22, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %172 = ashr <16 x i32> %171, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %173 = shl <16 x i32> %172, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %174 = add <16 x i32> %173, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %175 = bitcast <16 x i32> %174 to <16 x float>
  %176 = fmul <16 x float> %170, %175
  %177 = sub <16 x i32> %171, %172
  %178 = shl <16 x i32> %177, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %179 = add <16 x i32> %178, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %180 = bitcast <16 x i32> %179 to <16 x float>
  %181 = fmul <16 x float> %176, %180
  %182 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %42, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %183 = and <8 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %184 = or <8 x i64> %183, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %185 = bitcast <8 x i64> %184 to <16 x float>
  %186 = bitcast i16 %182 to <16 x i1>
  %187 = select <16 x i1> %186, <16 x float> %185, <16 x float> %181
  %188 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %42, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %189 = bitcast <8 x i64> %183 to <16 x float>
  %190 = bitcast i16 %188 to <16 x i1>
  %191 = select <16 x i1> %190, <16 x float> %189, <16 x float> %187
  %192 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %193 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %194 = or <8 x i64> %193, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %195 = bitcast <8 x i64> %194 to <16 x float>
  %196 = bitcast i16 %192 to <16 x i1>
  %197 = select <16 x i1> %196, <16 x float> %195, <16 x float> %191
  %198 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %199 = bitcast <8 x i64> %193 to <16 x float>
  %200 = bitcast i16 %198 to <16 x i1>
  %201 = select <16 x i1> %200, <16 x float> %199, <16 x float> %197
  ret <16 x float> %201
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_logf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = bitcast <16 x float> %6 to <8 x i64>
  %9 = and <8 x i64> %8, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %10 = bitcast <8 x i64> %9 to <16 x float>
  %11 = fsub <16 x float> %6, %10
  %12 = fmul <16 x float> %6, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %13 = bitcast <16 x float> %12 to <8 x i64>
  %14 = xor <8 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fmul <16 x float> %10, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %17 = fadd <16 x float> %16, %15
  %18 = fmul <16 x float> %10, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %11, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %11, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %23 = fadd <16 x float> %22, %21
  %24 = fmul <16 x float> %6, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %25 = fadd <16 x float> %24, %23
  %26 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <16 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fsub <16 x float> %26, %27
  %29 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %28
  %30 = fsub <16 x float> %7, %27
  %31 = fadd <16 x float> %30, %29
  %32 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = fadd <16 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <16 x float> %32, %33
  %35 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %36 = fsub <16 x float> %7, %33
  %37 = fadd <16 x float> %36, %35
  %38 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %32
  %39 = bitcast <16 x float> %32 to <8 x i64>
  %40 = and <8 x i64> %39, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = fsub <16 x float> %32, %41
  %43 = bitcast <16 x float> %38 to <8 x i64>
  %44 = and <8 x i64> %43, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %38, %45
  %47 = bitcast <16 x float> %26 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %26, %49
  %51 = fmul <16 x float> %26, %38
  %52 = fmul <16 x float> %41, %45
  %53 = fadd <16 x float> %52, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fmul <16 x float> %46, %41
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %42, %45
  %57 = fadd <16 x float> %56, %55
  %58 = fmul <16 x float> %42, %46
  %59 = fadd <16 x float> %58, %57
  %60 = bitcast <16 x float> %59 to <8 x i64>
  %61 = xor <8 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = bitcast <16 x float> %51 to <8 x i64>
  %64 = xor <8 x i64> %63, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fmul <16 x float> %49, %45
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %46, %49
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %50, %45
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %50, %46
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %51, %62
  %75 = fadd <16 x float> %73, %74
  %76 = fmul <16 x float> %51, %37
  %77 = fsub <16 x float> %31, %76
  %78 = fmul <16 x float> %38, %77
  %79 = fadd <16 x float> %78, %75
  %80 = fmul <16 x float> %51, %51
  %81 = fmul <16 x float> %80, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %82 = fadd <16 x float> %81, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %83 = fmul <16 x float> %80, %82
  %84 = fadd <16 x float> %83, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %85 = fmul <16 x float> %51, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %86 = fmul <16 x float> %79, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %87 = fadd <16 x float> %12, %85
  %88 = fsub <16 x float> %12, %87
  %89 = fadd <16 x float> %85, %88
  %90 = fadd <16 x float> %89, %25
  %91 = fadd <16 x float> %90, %86
  %92 = fmul <16 x float> %51, %80
  %93 = fmul <16 x float> %92, %84
  %94 = fadd <16 x float> %87, %93
  %95 = fsub <16 x float> %87, %94
  %96 = fadd <16 x float> %93, %95
  %97 = fadd <16 x float> %96, %91
  %98 = fadd <16 x float> %94, %97
  %99 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %98, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4)
  ret <16 x float> %99
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_powf16_u10avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1, i32 11, <16 x float> %1, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> %1, i32 0, i16 -1, i32 4) #7
  %5 = bitcast <16 x float> %1 to <8 x i64>
  %6 = and <8 x i64> %5, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %7 = bitcast <8 x i64> %6 to <16 x float>
  %8 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %7, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 30, i16 -1, i32 4) #7
  %9 = or i16 %8, %4
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %1, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = and <16 x i32> %10, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %12 = icmp ne <16 x i32> %11, zeroinitializer
  %13 = bitcast <16 x i1> %12 to i16
  %14 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %7, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 17, i16 -1, i32 4) #7
  %15 = and i16 %14, %9
  %16 = and i16 %15, %13
  %17 = bitcast <16 x float> %0 to <8 x i64>
  %18 = and <8 x i64> %17, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %19, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %21 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %20, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %22 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %23 = bitcast i16 %22 to <16 x i1>
  %24 = select <16 x i1> %23, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %21
  %25 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %19, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %26 = fadd <16 x float> %25, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <16 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fsub <16 x float> %26, %27
  %29 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %28
  %30 = fsub <16 x float> %25, %27
  %31 = fadd <16 x float> %30, %29
  %32 = fadd <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = fadd <16 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <16 x float> %32, %33
  %35 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %36 = fsub <16 x float> %25, %33
  %37 = fadd <16 x float> %36, %35
  %38 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %32
  %39 = bitcast <16 x float> %32 to <8 x i64>
  %40 = and <8 x i64> %39, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = fsub <16 x float> %32, %41
  %43 = bitcast <16 x float> %38 to <8 x i64>
  %44 = and <8 x i64> %43, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %38, %45
  %47 = bitcast <16 x float> %26 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %26, %49
  %51 = fmul <16 x float> %26, %38
  %52 = fmul <16 x float> %41, %45
  %53 = fadd <16 x float> %52, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fmul <16 x float> %46, %41
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %42, %45
  %57 = fadd <16 x float> %56, %55
  %58 = fmul <16 x float> %42, %46
  %59 = fadd <16 x float> %58, %57
  %60 = bitcast <16 x float> %59 to <8 x i64>
  %61 = xor <8 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = bitcast <16 x float> %51 to <8 x i64>
  %64 = xor <8 x i64> %63, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fmul <16 x float> %49, %45
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %46, %49
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %50, %45
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %50, %46
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %51, %62
  %75 = fadd <16 x float> %73, %74
  %76 = fmul <16 x float> %51, %37
  %77 = fsub <16 x float> %31, %76
  %78 = fmul <16 x float> %38, %77
  %79 = fadd <16 x float> %78, %75
  %80 = and <8 x i64> %63, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %51, %81
  %83 = fmul <16 x float> %51, %51
  %84 = bitcast <16 x float> %83 to <8 x i64>
  %85 = xor <8 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <8 x i64> %85 to <16 x float>
  %87 = fmul <16 x float> %81, %81
  %88 = fadd <16 x float> %87, %86
  %89 = fadd <16 x float> %81, %81
  %90 = fmul <16 x float> %89, %82
  %91 = fadd <16 x float> %90, %88
  %92 = fmul <16 x float> %82, %82
  %93 = fadd <16 x float> %92, %91
  %94 = fadd <16 x float> %79, %79
  %95 = fmul <16 x float> %51, %94
  %96 = fadd <16 x float> %93, %95
  %97 = fmul <16 x float> %83, <float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000, float 0x3FCEC2D140000000>
  %98 = fadd <16 x float> %97, <float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000, float 0x3FD23F4940000000>
  %99 = fmul <16 x float> %83, %98
  %100 = fadd <16 x float> %99, <float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000, float 0x3FD999BB20000000>
  %101 = bitcast <16 x float> %24 to <8 x i64>
  %102 = and <8 x i64> %101, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <8 x i64> %102 to <16 x float>
  %104 = fsub <16 x float> %24, %103
  %105 = fmul <16 x float> %24, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %106 = bitcast <16 x float> %105 to <8 x i64>
  %107 = xor <8 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <8 x i64> %107 to <16 x float>
  %109 = fmul <16 x float> %103, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %103, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %104, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %104, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %24, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %51, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %120 = fmul <16 x float> %79, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %121 = fadd <16 x float> %105, %119
  %122 = fsub <16 x float> %105, %121
  %123 = fadd <16 x float> %119, %122
  %124 = fadd <16 x float> %123, %118
  %125 = fadd <16 x float> %124, %120
  %126 = and <8 x i64> %84, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %127 = bitcast <8 x i64> %126 to <16 x float>
  %128 = fsub <16 x float> %83, %127
  %129 = fmul <16 x float> %51, %83
  %130 = bitcast <16 x float> %129 to <8 x i64>
  %131 = xor <8 x i64> %130, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %132 = bitcast <8 x i64> %131 to <16 x float>
  %133 = fmul <16 x float> %81, %127
  %134 = fadd <16 x float> %133, %132
  %135 = fmul <16 x float> %128, %81
  %136 = fadd <16 x float> %135, %134
  %137 = fmul <16 x float> %82, %127
  %138 = fadd <16 x float> %137, %136
  %139 = fmul <16 x float> %82, %128
  %140 = fadd <16 x float> %139, %138
  %141 = fmul <16 x float> %83, %79
  %142 = fadd <16 x float> %140, %141
  %143 = fmul <16 x float> %51, %96
  %144 = fadd <16 x float> %142, %143
  %145 = bitcast <16 x float> %100 to <8 x i64>
  %146 = and <8 x i64> %145, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %147 = bitcast <8 x i64> %146 to <16 x float>
  %148 = fsub <16 x float> %100, %147
  %149 = fmul <16 x float> %83, %100
  %150 = bitcast <16 x float> %149 to <8 x i64>
  %151 = xor <8 x i64> %150, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fmul <16 x float> %127, %147
  %154 = fadd <16 x float> %153, %152
  %155 = fmul <16 x float> %128, %147
  %156 = fadd <16 x float> %155, %154
  %157 = fmul <16 x float> %148, %127
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %128, %148
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %100, %96
  %162 = fadd <16 x float> %160, %161
  %163 = fadd <16 x float> %149, <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>
  %164 = fsub <16 x float> %163, %149
  %165 = fsub <16 x float> %163, %164
  %166 = fsub <16 x float> %149, %165
  %167 = fsub <16 x float> <float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000, float 0x3FE5555540000000>, %164
  %168 = fadd <16 x float> %167, %166
  %169 = fadd <16 x float> %162, <float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000, float 0x3E2FB67060000000>
  %170 = fadd <16 x float> %168, %169
  %171 = and <8 x i64> %130, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %172 = bitcast <8 x i64> %171 to <16 x float>
  %173 = fsub <16 x float> %129, %172
  %174 = bitcast <16 x float> %163 to <8 x i64>
  %175 = and <8 x i64> %174, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %176 = bitcast <8 x i64> %175 to <16 x float>
  %177 = fsub <16 x float> %163, %176
  %178 = fmul <16 x float> %129, %163
  %179 = bitcast <16 x float> %178 to <8 x i64>
  %180 = xor <8 x i64> %179, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %181 = bitcast <8 x i64> %180 to <16 x float>
  %182 = fmul <16 x float> %172, %176
  %183 = fadd <16 x float> %182, %181
  %184 = fmul <16 x float> %173, %176
  %185 = fadd <16 x float> %184, %183
  %186 = fmul <16 x float> %177, %172
  %187 = fadd <16 x float> %186, %185
  %188 = fmul <16 x float> %173, %177
  %189 = fadd <16 x float> %188, %187
  %190 = fmul <16 x float> %129, %170
  %191 = fadd <16 x float> %189, %190
  %192 = fmul <16 x float> %163, %144
  %193 = fadd <16 x float> %192, %191
  %194 = fadd <16 x float> %121, %178
  %195 = fsub <16 x float> %121, %194
  %196 = fadd <16 x float> %178, %195
  %197 = fadd <16 x float> %196, %125
  %198 = fadd <16 x float> %197, %193
  %199 = bitcast <16 x float> %194 to <8 x i64>
  %200 = and <8 x i64> %199, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %201 = bitcast <8 x i64> %200 to <16 x float>
  %202 = fsub <16 x float> %194, %201
  %203 = and <8 x i64> %5, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %204 = bitcast <8 x i64> %203 to <16 x float>
  %205 = fsub <16 x float> %1, %204
  %206 = fmul <16 x float> %194, %1
  %207 = bitcast <16 x float> %206 to <8 x i64>
  %208 = xor <8 x i64> %207, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %209 = bitcast <8 x i64> %208 to <16 x float>
  %210 = fmul <16 x float> %204, %201
  %211 = fadd <16 x float> %210, %209
  %212 = fmul <16 x float> %202, %204
  %213 = fadd <16 x float> %212, %211
  %214 = fmul <16 x float> %205, %201
  %215 = fadd <16 x float> %214, %213
  %216 = fmul <16 x float> %205, %202
  %217 = fadd <16 x float> %216, %215
  %218 = fmul <16 x float> %198, %1
  %219 = fadd <16 x float> %217, %218
  %220 = fadd <16 x float> %206, %219
  %221 = fmul <16 x float> %220, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %222 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %221, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %223 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %222, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %224 = fmul <16 x float> %223, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %225 = fadd <16 x float> %224, %206
  %226 = fsub <16 x float> %225, %206
  %227 = fsub <16 x float> %225, %226
  %228 = fsub <16 x float> %206, %227
  %229 = fsub <16 x float> %224, %226
  %230 = fadd <16 x float> %229, %228
  %231 = fadd <16 x float> %230, %219
  %232 = fmul <16 x float> %223, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %233 = fadd <16 x float> %232, %225
  %234 = fsub <16 x float> %233, %225
  %235 = fsub <16 x float> %233, %234
  %236 = fsub <16 x float> %225, %235
  %237 = fsub <16 x float> %232, %234
  %238 = fadd <16 x float> %237, %236
  %239 = fadd <16 x float> %238, %231
  %240 = fadd <16 x float> %233, %239
  %241 = fsub <16 x float> %233, %240
  %242 = fadd <16 x float> %239, %241
  %243 = fmul <16 x float> %240, <float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000, float 0x3F5655DEC0000000>
  %244 = fadd <16 x float> %243, <float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000, float 0x3F81222D60000000>
  %245 = fmul <16 x float> %240, %244
  %246 = fadd <16 x float> %245, <float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000, float 0x3FA555E980000000>
  %247 = fmul <16 x float> %240, %246
  %248 = fadd <16 x float> %247, <float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000, float 0x3FC5554BC0000000>
  %249 = fmul <16 x float> %240, %248
  %250 = fadd <16 x float> %249, <float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000, float 0x3FDFFFFF60000000>
  %251 = bitcast <16 x float> %240 to <8 x i64>
  %252 = and <8 x i64> %251, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %253 = bitcast <8 x i64> %252 to <16 x float>
  %254 = fsub <16 x float> %240, %253
  %255 = fmul <16 x float> %240, %240
  %256 = bitcast <16 x float> %255 to <8 x i64>
  %257 = xor <8 x i64> %256, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %258 = bitcast <8 x i64> %257 to <16 x float>
  %259 = fmul <16 x float> %253, %253
  %260 = fadd <16 x float> %259, %258
  %261 = fadd <16 x float> %253, %253
  %262 = fmul <16 x float> %261, %254
  %263 = fadd <16 x float> %262, %260
  %264 = fmul <16 x float> %254, %254
  %265 = fadd <16 x float> %264, %263
  %266 = fadd <16 x float> %242, %242
  %267 = fmul <16 x float> %240, %266
  %268 = fadd <16 x float> %267, %265
  %269 = and <8 x i64> %256, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %270 = bitcast <8 x i64> %269 to <16 x float>
  %271 = fsub <16 x float> %255, %270
  %272 = bitcast <16 x float> %250 to <8 x i64>
  %273 = and <8 x i64> %272, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %274 = bitcast <8 x i64> %273 to <16 x float>
  %275 = fsub <16 x float> %250, %274
  %276 = fmul <16 x float> %255, %250
  %277 = bitcast <16 x float> %276 to <8 x i64>
  %278 = xor <8 x i64> %277, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %279 = bitcast <8 x i64> %278 to <16 x float>
  %280 = fmul <16 x float> %270, %274
  %281 = fadd <16 x float> %280, %279
  %282 = fmul <16 x float> %271, %274
  %283 = fadd <16 x float> %282, %281
  %284 = fmul <16 x float> %275, %270
  %285 = fadd <16 x float> %284, %283
  %286 = fmul <16 x float> %271, %275
  %287 = fadd <16 x float> %286, %285
  %288 = fmul <16 x float> %268, %250
  %289 = fadd <16 x float> %288, %287
  %290 = fadd <16 x float> %240, %276
  %291 = fsub <16 x float> %240, %290
  %292 = fadd <16 x float> %276, %291
  %293 = fadd <16 x float> %242, %292
  %294 = fadd <16 x float> %293, %289
  %295 = fadd <16 x float> %290, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %296 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %295
  %297 = fadd <16 x float> %290, %296
  %298 = fadd <16 x float> %297, %294
  %299 = fadd <16 x float> %295, %298
  %300 = ashr <16 x i32> %222, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %301 = add <16 x i32> %300, %222
  %302 = ashr <16 x i32> %301, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %303 = sub nsw <16 x i32> %302, %300
  %304 = shl nsw <16 x i32> %303, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %305 = shl <16 x i32> %303, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %306 = sub <16 x i32> %222, %305
  %307 = add nsw <16 x i32> %304, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %308 = icmp sgt <16 x i32> %303, <i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8, i32 -8>
  %309 = select <16 x i1> %308, <16 x i32> %307, <16 x i32> zeroinitializer
  %310 = bitcast <16 x i32> %309 to <8 x i64>
  %311 = icmp sgt <16 x i32> %309, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %312 = sext <16 x i1> %311 to <16 x i32>
  %313 = bitcast <16 x i32> %312 to <8 x i64>
  %314 = xor <8 x i64> %313, <i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1>
  %315 = and <8 x i64> %314, %310
  %316 = and <8 x i64> %313, <i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735, i64 1095216660735>
  %317 = or <8 x i64> %316, %315
  %318 = bitcast <8 x i64> %317 to <16 x i32>
  %319 = shl <16 x i32> %318, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %320 = bitcast <16 x i32> %319 to <16 x float>
  %321 = fmul <16 x float> %299, %320
  %322 = fmul <16 x float> %321, %320
  %323 = fmul <16 x float> %322, %320
  %324 = fmul <16 x float> %323, %320
  %325 = shl <16 x i32> %306, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %326 = add <16 x i32> %325, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %327 = bitcast <16 x i32> %326 to <16 x float>
  %328 = fmul <16 x float> %324, %327
  %329 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %206, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %330 = bitcast i16 %329 to <16 x i1>
  %331 = select <16 x i1> %330, <16 x float> zeroinitializer, <16 x float> %328
  %332 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %331, <16 x float> %331, i32 4, i16 -1, i32 4) #7
  %333 = bitcast i16 %332 to <16 x i1>
  %334 = select <16 x i1> %333, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %331
  %335 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 30, i16 -1, i32 4) #7
  %336 = bitcast i16 %16 to <16 x i1>
  %337 = select <16 x i1> %336, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %338 = bitcast i16 %9 to <16 x i1>
  %339 = select <16 x i1> %338, <16 x float> %337, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>
  %340 = bitcast i16 %335 to <16 x i1>
  %341 = select <16 x i1> %340, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %339
  %342 = fmul <16 x float> %341, %334
  %343 = fadd <16 x float> %19, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %344 = bitcast <16 x float> %343 to <8 x i64>
  %345 = and <8 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %346 = xor <8 x i64> %345, %344
  %347 = bitcast <8 x i64> %346 to <16 x float>
  %348 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %7, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %349 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %347, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %350 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %347, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %351 = bitcast i16 %350 to <16 x i1>
  %352 = bitcast i16 %349 to <16 x i1>
  %353 = select <16 x i1> %351, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %354 = select <16 x i1> %352, <16 x float> zeroinitializer, <16 x float> %353
  %355 = bitcast i16 %348 to <16 x i1>
  %356 = select <16 x i1> %355, <16 x float> %354, <16 x float> %342
  %357 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %19, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %358 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %359 = or i16 %358, %357
  %360 = and <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %361 = or <8 x i64> %360, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %362 = bitcast <8 x i64> %361 to <16 x float>
  %363 = select <16 x i1> %336, <16 x float> %362, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %364 = xor <8 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %365 = bitcast <8 x i64> %364 to <16 x float>
  %366 = bitcast i16 %358 to <16 x i1>
  %367 = select <16 x i1> %366, <16 x float> %365, <16 x float> %1
  %368 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %367, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %369 = bitcast i16 %368 to <16 x i1>
  %370 = select <16 x i1> %369, <16 x float> zeroinitializer, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %371 = fmul <16 x float> %363, %370
  %372 = bitcast i16 %359 to <16 x i1>
  %373 = select <16 x i1> %372, <16 x float> %371, <16 x float> %356
  %374 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %375 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %376 = or i16 %375, %374
  %377 = bitcast i16 %376 to <16 x i1>
  %378 = select <16 x i1> %377, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %373
  %379 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %380 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %381 = or i16 %380, %379
  %382 = bitcast i16 %381 to <16 x i1>
  %383 = select <16 x i1> %382, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %378
  ret <16 x float> %383
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fastpowf16_u3500avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = fmul <16 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %7, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %9 = bitcast i16 %8 to <16 x i1>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %5, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fadd <16 x float> %10, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %12 = fadd <16 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = fdiv <16 x float> %11, %12
  %14 = fmul <16 x float> %13, %13
  %15 = fmul <16 x float> %14, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %16 = fadd <16 x float> %15, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %17 = fmul <16 x float> %14, %16
  %18 = fadd <16 x float> %17, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %19 = fmul <16 x float> %14, %18
  %20 = fadd <16 x float> %19, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %21 = fmul <16 x float> %14, %20
  %22 = fadd <16 x float> %21, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %23 = fmul <16 x float> %7, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = select <16 x i1> %9, <16 x float> <float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000>, <16 x float> %23
  %25 = fmul <16 x float> %13, %22
  %26 = fadd <16 x float> %24, %25
  %27 = fmul <16 x float> %26, %1
  %28 = fmul <16 x float> %27, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %29 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %28, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %30 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %29, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %31 = fmul <16 x float> %30, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %32 = fadd <16 x float> %31, %27
  %33 = fmul <16 x float> %30, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %34 = fadd <16 x float> %33, %32
  %35 = fmul <16 x float> %34, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %36 = fadd <16 x float> %35, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %37 = fmul <16 x float> %34, %36
  %38 = fadd <16 x float> %37, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %39 = fmul <16 x float> %34, %38
  %40 = fadd <16 x float> %39, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %41 = fmul <16 x float> %34, %40
  %42 = fadd <16 x float> %41, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %43 = fmul <16 x float> %34, %42
  %44 = fadd <16 x float> %43, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fmul <16 x float> %34, %34
  %46 = fadd <16 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fmul <16 x float> %45, %44
  %48 = fadd <16 x float> %46, %47
  %49 = ashr <16 x i32> %29, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %50 = shl <16 x i32> %49, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %51 = add <16 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <16 x i32> %51 to <16 x float>
  %53 = fmul <16 x float> %48, %52
  %54 = sub <16 x i32> %29, %49
  %55 = shl <16 x i32> %54, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %56 = add <16 x i32> %55, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %57 = bitcast <16 x i32> %56 to <16 x float>
  %58 = fmul <16 x float> %53, %57
  %59 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %27, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %60 = bitcast i16 %59 to <16 x i1>
  %61 = select <16 x i1> %60, <16 x float> zeroinitializer, <16 x float> %58
  %62 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1, i32 11, <16 x float> %1, i16 -1, i32 4) #7
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %62, <16 x float> %1, i32 0, i16 -1, i32 4) #7
  %64 = bitcast <16 x float> %1 to <8 x i64>
  %65 = and <8 x i64> %64, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %66 = bitcast <8 x i64> %65 to <16 x float>
  %67 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %66, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 30, i16 -1, i32 4) #7
  %68 = or i16 %67, %63
  %69 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %1, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %70 = and <16 x i32> %69, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = icmp ne <16 x i32> %70, zeroinitializer
  %72 = bitcast <16 x i1> %71 to i16
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %66, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 17, i16 -1, i32 4) #7
  %74 = bitcast <16 x float> %0 to <16 x i32>
  %75 = icmp slt <16 x i32> %74, zeroinitializer
  %76 = bitcast <16 x i1> %75 to i16
  %77 = and i16 %68, %76
  %78 = and i16 %77, %73
  %79 = and i16 %78, %72
  %80 = bitcast <16 x float> %61 to <8 x i64>
  %81 = xor <8 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <8 x i64> %81 to <16 x float>
  %83 = bitcast i16 %79 to <16 x i1>
  %84 = select <16 x i1> %83, <16 x float> %82, <16 x float> %61
  %85 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %86 = bitcast i16 %85 to <16 x i1>
  %87 = select <16 x i1> %86, <16 x float> zeroinitializer, <16 x float> %84
  %88 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %89 = bitcast i16 %88 to <16 x i1>
  %90 = select <16 x i1> %89, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %87
  ret <16 x float> %90
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sinhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fadd <16 x float> %4, zeroinitializer
  %6 = fmul <16 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %6, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %9 = fmul <16 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <16 x float> %9, %4
  %11 = fsub <16 x float> %10, %4
  %12 = fsub <16 x float> %10, %11
  %13 = fsub <16 x float> %4, %12
  %14 = fsub <16 x float> %9, %11
  %15 = fadd <16 x float> %14, %13
  %16 = fadd <16 x float> %15, zeroinitializer
  %17 = fmul <16 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <16 x float> %17, %10
  %19 = fsub <16 x float> %18, %10
  %20 = fsub <16 x float> %18, %19
  %21 = fsub <16 x float> %10, %20
  %22 = fsub <16 x float> %17, %19
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %23, %16
  %25 = fmul <16 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <16 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <16 x float> %18, %26
  %28 = fadd <16 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <16 x float> %18, %28
  %30 = fadd <16 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <16 x float> %18 to <8 x i64>
  %32 = and <8 x i64> %31, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <8 x i64> %32 to <16 x float>
  %34 = fsub <16 x float> %18, %33
  %35 = bitcast <16 x float> %30 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %30, %37
  %39 = fmul <16 x float> %18, %30
  %40 = bitcast <16 x float> %39 to <8 x i64>
  %41 = xor <8 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <8 x i64> %41 to <16 x float>
  %43 = fmul <16 x float> %33, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %34, %37
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %38, %33
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %34, %38
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %24, %30
  %52 = fadd <16 x float> %51, %50
  %53 = fadd <16 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <16 x float> %53, %39
  %55 = fsub <16 x float> %53, %54
  %56 = fsub <16 x float> %39, %55
  %57 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <16 x float> %57, %56
  %59 = fadd <16 x float> %58, %52
  %60 = bitcast <16 x float> %53 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fsub <16 x float> %53, %62
  %64 = fmul <16 x float> %18, %53
  %65 = bitcast <16 x float> %64 to <8 x i64>
  %66 = xor <8 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <8 x i64> %66 to <16 x float>
  %68 = fmul <16 x float> %33, %62
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %34, %62
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %63, %33
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %34, %63
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %18, %59
  %77 = fadd <16 x float> %75, %76
  %78 = fmul <16 x float> %24, %53
  %79 = fadd <16 x float> %78, %77
  %80 = fadd <16 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <16 x float> %80, %64
  %82 = fsub <16 x float> %80, %81
  %83 = fsub <16 x float> %64, %82
  %84 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <16 x float> %84, %83
  %86 = fadd <16 x float> %85, %79
  %87 = fmul <16 x float> %18, %18
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %33, %33
  %92 = fadd <16 x float> %91, %90
  %93 = fadd <16 x float> %33, %33
  %94 = fmul <16 x float> %93, %34
  %95 = fadd <16 x float> %94, %92
  %96 = fmul <16 x float> %34, %34
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %24, %24
  %99 = fmul <16 x float> %18, %98
  %100 = fadd <16 x float> %99, %97
  %101 = and <8 x i64> %88, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <8 x i64> %101 to <16 x float>
  %103 = fsub <16 x float> %87, %102
  %104 = bitcast <16 x float> %80 to <8 x i64>
  %105 = and <8 x i64> %104, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <8 x i64> %105 to <16 x float>
  %107 = fsub <16 x float> %80, %106
  %108 = fmul <16 x float> %87, %80
  %109 = bitcast <16 x float> %108 to <8 x i64>
  %110 = xor <8 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fmul <16 x float> %102, %106
  %113 = fadd <16 x float> %112, %111
  %114 = fmul <16 x float> %103, %106
  %115 = fadd <16 x float> %114, %113
  %116 = fmul <16 x float> %107, %102
  %117 = fadd <16 x float> %116, %115
  %118 = fmul <16 x float> %103, %107
  %119 = fadd <16 x float> %118, %117
  %120 = fmul <16 x float> %87, %86
  %121 = fadd <16 x float> %119, %120
  %122 = fmul <16 x float> %100, %80
  %123 = fadd <16 x float> %122, %121
  %124 = fadd <16 x float> %18, %108
  %125 = fsub <16 x float> %124, %18
  %126 = fsub <16 x float> %124, %125
  %127 = fsub <16 x float> %18, %126
  %128 = fsub <16 x float> %108, %125
  %129 = fadd <16 x float> %128, %127
  %130 = fadd <16 x float> %24, %123
  %131 = fadd <16 x float> %129, %130
  %132 = fadd <16 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <16 x float> %124, %133
  %135 = fadd <16 x float> %134, %131
  %136 = ashr <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %137 = shl <16 x i32> %136, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %138 = add <16 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <16 x i32> %138 to <16 x float>
  %140 = fmul <16 x float> %132, %139
  %141 = sub <16 x i32> %7, %136
  %142 = shl <16 x i32> %141, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %143 = add <16 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <16 x i32> %143 to <16 x float>
  %145 = fmul <16 x float> %140, %144
  %146 = fmul <16 x float> %135, %139
  %147 = fmul <16 x float> %146, %144
  %148 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %149 = bitcast i16 %148 to <16 x i1>
  %150 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %145
  %151 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %147
  %152 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %150
  %153 = bitcast <16 x float> %150 to <8 x i64>
  %154 = and <8 x i64> %153, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %155 = bitcast <8 x i64> %154 to <16 x float>
  %156 = fsub <16 x float> %150, %155
  %157 = bitcast <16 x float> %152 to <8 x i64>
  %158 = and <8 x i64> %157, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %159 = bitcast <8 x i64> %158 to <16 x float>
  %160 = fsub <16 x float> %152, %159
  %161 = fmul <16 x float> %155, %159
  %162 = fadd <16 x float> %161, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %163 = fmul <16 x float> %160, %155
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %156, %159
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %156, %160
  %168 = fadd <16 x float> %167, %166
  %169 = fmul <16 x float> %152, %151
  %170 = fadd <16 x float> %168, %169
  %171 = xor <8 x i64> %157, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <8 x i64> %171 to <16 x float>
  %173 = fmul <16 x float> %170, %172
  %174 = fsub <16 x float> %150, %152
  %175 = fsub <16 x float> %150, %174
  %176 = fsub <16 x float> %175, %152
  %177 = fadd <16 x float> %176, %151
  %178 = fsub <16 x float> %177, %173
  %179 = fadd <16 x float> %174, %178
  %180 = fmul <16 x float> %179, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %181 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i32 30, i16 -1, i32 4) #7
  %182 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %180, <16 x float> %180, i32 4, i16 -1, i32 4) #7
  %183 = or i16 %182, %181
  %184 = bitcast i16 %183 to <16 x i1>
  %185 = select <16 x i1> %184, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %180
  %186 = bitcast <16 x float> %185 to <8 x i64>
  %187 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %188 = xor <8 x i64> %187, %186
  %189 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %190 = bitcast i16 %189 to <16 x i1>
  %191 = bitcast <8 x i64> %188 to <16 x float>
  %192 = select <16 x i1> %190, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %191
  ret <16 x float> %192
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_coshf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fadd <16 x float> %4, zeroinitializer
  %6 = fmul <16 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %6, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %9 = fmul <16 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <16 x float> %9, %4
  %11 = fsub <16 x float> %10, %4
  %12 = fsub <16 x float> %10, %11
  %13 = fsub <16 x float> %4, %12
  %14 = fsub <16 x float> %9, %11
  %15 = fadd <16 x float> %14, %13
  %16 = fadd <16 x float> %15, zeroinitializer
  %17 = fmul <16 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <16 x float> %17, %10
  %19 = fsub <16 x float> %18, %10
  %20 = fsub <16 x float> %18, %19
  %21 = fsub <16 x float> %10, %20
  %22 = fsub <16 x float> %17, %19
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %23, %16
  %25 = fmul <16 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <16 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <16 x float> %18, %26
  %28 = fadd <16 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <16 x float> %18, %28
  %30 = fadd <16 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <16 x float> %18 to <8 x i64>
  %32 = and <8 x i64> %31, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <8 x i64> %32 to <16 x float>
  %34 = fsub <16 x float> %18, %33
  %35 = bitcast <16 x float> %30 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %30, %37
  %39 = fmul <16 x float> %18, %30
  %40 = bitcast <16 x float> %39 to <8 x i64>
  %41 = xor <8 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <8 x i64> %41 to <16 x float>
  %43 = fmul <16 x float> %33, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %34, %37
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %38, %33
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %34, %38
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %24, %30
  %52 = fadd <16 x float> %51, %50
  %53 = fadd <16 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <16 x float> %53, %39
  %55 = fsub <16 x float> %53, %54
  %56 = fsub <16 x float> %39, %55
  %57 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <16 x float> %57, %56
  %59 = fadd <16 x float> %58, %52
  %60 = bitcast <16 x float> %53 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fsub <16 x float> %53, %62
  %64 = fmul <16 x float> %18, %53
  %65 = bitcast <16 x float> %64 to <8 x i64>
  %66 = xor <8 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <8 x i64> %66 to <16 x float>
  %68 = fmul <16 x float> %33, %62
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %34, %62
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %63, %33
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %34, %63
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %18, %59
  %77 = fadd <16 x float> %75, %76
  %78 = fmul <16 x float> %24, %53
  %79 = fadd <16 x float> %78, %77
  %80 = fadd <16 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <16 x float> %80, %64
  %82 = fsub <16 x float> %80, %81
  %83 = fsub <16 x float> %64, %82
  %84 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <16 x float> %84, %83
  %86 = fadd <16 x float> %85, %79
  %87 = fmul <16 x float> %18, %18
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %33, %33
  %92 = fadd <16 x float> %91, %90
  %93 = fadd <16 x float> %33, %33
  %94 = fmul <16 x float> %93, %34
  %95 = fadd <16 x float> %94, %92
  %96 = fmul <16 x float> %34, %34
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %24, %24
  %99 = fmul <16 x float> %18, %98
  %100 = fadd <16 x float> %99, %97
  %101 = and <8 x i64> %88, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <8 x i64> %101 to <16 x float>
  %103 = fsub <16 x float> %87, %102
  %104 = bitcast <16 x float> %80 to <8 x i64>
  %105 = and <8 x i64> %104, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <8 x i64> %105 to <16 x float>
  %107 = fsub <16 x float> %80, %106
  %108 = fmul <16 x float> %87, %80
  %109 = bitcast <16 x float> %108 to <8 x i64>
  %110 = xor <8 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fmul <16 x float> %102, %106
  %113 = fadd <16 x float> %112, %111
  %114 = fmul <16 x float> %103, %106
  %115 = fadd <16 x float> %114, %113
  %116 = fmul <16 x float> %107, %102
  %117 = fadd <16 x float> %116, %115
  %118 = fmul <16 x float> %103, %107
  %119 = fadd <16 x float> %118, %117
  %120 = fmul <16 x float> %87, %86
  %121 = fadd <16 x float> %119, %120
  %122 = fmul <16 x float> %100, %80
  %123 = fadd <16 x float> %122, %121
  %124 = fadd <16 x float> %18, %108
  %125 = fsub <16 x float> %124, %18
  %126 = fsub <16 x float> %124, %125
  %127 = fsub <16 x float> %18, %126
  %128 = fsub <16 x float> %108, %125
  %129 = fadd <16 x float> %128, %127
  %130 = fadd <16 x float> %24, %123
  %131 = fadd <16 x float> %129, %130
  %132 = fadd <16 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <16 x float> %124, %133
  %135 = fadd <16 x float> %134, %131
  %136 = ashr <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %137 = shl <16 x i32> %136, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %138 = add <16 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <16 x i32> %138 to <16 x float>
  %140 = fmul <16 x float> %132, %139
  %141 = sub <16 x i32> %7, %136
  %142 = shl <16 x i32> %141, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %143 = add <16 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <16 x i32> %143 to <16 x float>
  %145 = fmul <16 x float> %140, %144
  %146 = fmul <16 x float> %135, %139
  %147 = fmul <16 x float> %146, %144
  %148 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %149 = bitcast i16 %148 to <16 x i1>
  %150 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %145
  %151 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %147
  %152 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %150
  %153 = bitcast <16 x float> %150 to <8 x i64>
  %154 = and <8 x i64> %153, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %155 = bitcast <8 x i64> %154 to <16 x float>
  %156 = fsub <16 x float> %150, %155
  %157 = bitcast <16 x float> %152 to <8 x i64>
  %158 = and <8 x i64> %157, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %159 = bitcast <8 x i64> %158 to <16 x float>
  %160 = fsub <16 x float> %152, %159
  %161 = fmul <16 x float> %155, %159
  %162 = fadd <16 x float> %161, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %163 = fmul <16 x float> %160, %155
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %156, %159
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %156, %160
  %168 = fadd <16 x float> %167, %166
  %169 = fmul <16 x float> %152, %151
  %170 = fadd <16 x float> %168, %169
  %171 = xor <8 x i64> %157, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <8 x i64> %171 to <16 x float>
  %173 = fmul <16 x float> %170, %172
  %174 = fadd <16 x float> %150, %152
  %175 = fsub <16 x float> %150, %174
  %176 = fadd <16 x float> %152, %175
  %177 = fadd <16 x float> %176, %151
  %178 = fadd <16 x float> %177, %173
  %179 = fadd <16 x float> %174, %178
  %180 = fmul <16 x float> %179, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %181 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01, float 8.900000e+01>, i32 30, i16 -1, i32 4) #7
  %182 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %180, <16 x float> %180, i32 4, i16 -1, i32 4) #7
  %183 = or i16 %182, %181
  %184 = bitcast i16 %183 to <16 x i1>
  %185 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %186 = bitcast i16 %185 to <16 x i1>
  %187 = select <16 x i1> %184, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %180
  %188 = select <16 x i1> %186, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %187
  ret <16 x float> %188
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_tanhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fadd <16 x float> %4, zeroinitializer
  %6 = fmul <16 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %6, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %9 = fmul <16 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <16 x float> %9, %4
  %11 = fsub <16 x float> %10, %4
  %12 = fsub <16 x float> %10, %11
  %13 = fsub <16 x float> %4, %12
  %14 = fsub <16 x float> %9, %11
  %15 = fadd <16 x float> %14, %13
  %16 = fadd <16 x float> %15, zeroinitializer
  %17 = fmul <16 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %18 = fadd <16 x float> %17, %10
  %19 = fsub <16 x float> %18, %10
  %20 = fsub <16 x float> %18, %19
  %21 = fsub <16 x float> %10, %20
  %22 = fsub <16 x float> %17, %19
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %23, %16
  %25 = fmul <16 x float> %18, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %26 = fadd <16 x float> %25, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %27 = fmul <16 x float> %18, %26
  %28 = fadd <16 x float> %27, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %29 = fmul <16 x float> %18, %28
  %30 = fadd <16 x float> %29, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %31 = bitcast <16 x float> %18 to <8 x i64>
  %32 = and <8 x i64> %31, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <8 x i64> %32 to <16 x float>
  %34 = fsub <16 x float> %18, %33
  %35 = bitcast <16 x float> %30 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %30, %37
  %39 = fmul <16 x float> %18, %30
  %40 = bitcast <16 x float> %39 to <8 x i64>
  %41 = xor <8 x i64> %40, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %42 = bitcast <8 x i64> %41 to <16 x float>
  %43 = fmul <16 x float> %33, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %34, %37
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %38, %33
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %34, %38
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %24, %30
  %52 = fadd <16 x float> %51, %50
  %53 = fadd <16 x float> %39, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %54 = fsub <16 x float> %53, %39
  %55 = fsub <16 x float> %53, %54
  %56 = fsub <16 x float> %39, %55
  %57 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %54
  %58 = fadd <16 x float> %57, %56
  %59 = fadd <16 x float> %58, %52
  %60 = bitcast <16 x float> %53 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fsub <16 x float> %53, %62
  %64 = fmul <16 x float> %18, %53
  %65 = bitcast <16 x float> %64 to <8 x i64>
  %66 = xor <8 x i64> %65, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %67 = bitcast <8 x i64> %66 to <16 x float>
  %68 = fmul <16 x float> %33, %62
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %34, %62
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %63, %33
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %34, %63
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %18, %59
  %77 = fadd <16 x float> %75, %76
  %78 = fmul <16 x float> %24, %53
  %79 = fadd <16 x float> %78, %77
  %80 = fadd <16 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %81 = fsub <16 x float> %80, %64
  %82 = fsub <16 x float> %80, %81
  %83 = fsub <16 x float> %64, %82
  %84 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %81
  %85 = fadd <16 x float> %84, %83
  %86 = fadd <16 x float> %85, %79
  %87 = fmul <16 x float> %18, %18
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %33, %33
  %92 = fadd <16 x float> %91, %90
  %93 = fadd <16 x float> %33, %33
  %94 = fmul <16 x float> %93, %34
  %95 = fadd <16 x float> %94, %92
  %96 = fmul <16 x float> %34, %34
  %97 = fadd <16 x float> %96, %95
  %98 = fadd <16 x float> %24, %24
  %99 = fmul <16 x float> %18, %98
  %100 = fadd <16 x float> %99, %97
  %101 = and <8 x i64> %88, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %102 = bitcast <8 x i64> %101 to <16 x float>
  %103 = fsub <16 x float> %87, %102
  %104 = bitcast <16 x float> %80 to <8 x i64>
  %105 = and <8 x i64> %104, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %106 = bitcast <8 x i64> %105 to <16 x float>
  %107 = fsub <16 x float> %80, %106
  %108 = fmul <16 x float> %87, %80
  %109 = bitcast <16 x float> %108 to <8 x i64>
  %110 = xor <8 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fmul <16 x float> %102, %106
  %113 = fadd <16 x float> %112, %111
  %114 = fmul <16 x float> %103, %106
  %115 = fadd <16 x float> %114, %113
  %116 = fmul <16 x float> %107, %102
  %117 = fadd <16 x float> %116, %115
  %118 = fmul <16 x float> %103, %107
  %119 = fadd <16 x float> %118, %117
  %120 = fmul <16 x float> %87, %86
  %121 = fadd <16 x float> %119, %120
  %122 = fmul <16 x float> %100, %80
  %123 = fadd <16 x float> %122, %121
  %124 = fadd <16 x float> %18, %108
  %125 = fsub <16 x float> %124, %18
  %126 = fsub <16 x float> %124, %125
  %127 = fsub <16 x float> %18, %126
  %128 = fsub <16 x float> %108, %125
  %129 = fadd <16 x float> %128, %127
  %130 = fadd <16 x float> %24, %123
  %131 = fadd <16 x float> %129, %130
  %132 = fadd <16 x float> %124, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %133 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %132
  %134 = fadd <16 x float> %124, %133
  %135 = fadd <16 x float> %134, %131
  %136 = ashr <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %137 = shl <16 x i32> %136, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %138 = add <16 x i32> %137, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %139 = bitcast <16 x i32> %138 to <16 x float>
  %140 = fmul <16 x float> %132, %139
  %141 = sub <16 x i32> %7, %136
  %142 = shl <16 x i32> %141, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %143 = add <16 x i32> %142, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %144 = bitcast <16 x i32> %143 to <16 x float>
  %145 = fmul <16 x float> %140, %144
  %146 = fmul <16 x float> %135, %139
  %147 = fmul <16 x float> %146, %144
  %148 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %149 = bitcast i16 %148 to <16 x i1>
  %150 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %145
  %151 = select <16 x i1> %149, <16 x float> zeroinitializer, <16 x float> %147
  %152 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %150
  %153 = bitcast <16 x float> %150 to <8 x i64>
  %154 = and <8 x i64> %153, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %155 = bitcast <8 x i64> %154 to <16 x float>
  %156 = fsub <16 x float> %150, %155
  %157 = bitcast <16 x float> %152 to <8 x i64>
  %158 = and <8 x i64> %157, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %159 = bitcast <8 x i64> %158 to <16 x float>
  %160 = fsub <16 x float> %152, %159
  %161 = fmul <16 x float> %155, %159
  %162 = fadd <16 x float> %161, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %163 = fmul <16 x float> %160, %155
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %156, %159
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %156, %160
  %168 = fadd <16 x float> %167, %166
  %169 = fmul <16 x float> %152, %151
  %170 = fadd <16 x float> %168, %169
  %171 = xor <8 x i64> %157, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %172 = bitcast <8 x i64> %171 to <16 x float>
  %173 = fmul <16 x float> %170, %172
  %174 = bitcast <16 x float> %173 to <8 x i64>
  %175 = xor <8 x i64> %174, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %176 = bitcast <8 x i64> %175 to <16 x float>
  %177 = fadd <16 x float> %150, %172
  %178 = fsub <16 x float> %150, %177
  %179 = fadd <16 x float> %178, %172
  %180 = fadd <16 x float> %179, %151
  %181 = fadd <16 x float> %180, %176
  %182 = fadd <16 x float> %150, %152
  %183 = fsub <16 x float> %150, %182
  %184 = fadd <16 x float> %152, %183
  %185 = fadd <16 x float> %184, %151
  %186 = fadd <16 x float> %185, %173
  %187 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %182
  %188 = bitcast <16 x float> %182 to <8 x i64>
  %189 = and <8 x i64> %188, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %190 = bitcast <8 x i64> %189 to <16 x float>
  %191 = fsub <16 x float> %182, %190
  %192 = bitcast <16 x float> %187 to <8 x i64>
  %193 = and <8 x i64> %192, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %194 = bitcast <8 x i64> %193 to <16 x float>
  %195 = fsub <16 x float> %187, %194
  %196 = bitcast <16 x float> %177 to <8 x i64>
  %197 = and <8 x i64> %196, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %198 = bitcast <8 x i64> %197 to <16 x float>
  %199 = fsub <16 x float> %177, %198
  %200 = fmul <16 x float> %187, %177
  %201 = fmul <16 x float> %190, %194
  %202 = fadd <16 x float> %201, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %203 = fmul <16 x float> %195, %190
  %204 = fadd <16 x float> %203, %202
  %205 = fmul <16 x float> %191, %194
  %206 = fadd <16 x float> %205, %204
  %207 = fmul <16 x float> %191, %195
  %208 = fadd <16 x float> %207, %206
  %209 = bitcast <16 x float> %208 to <8 x i64>
  %210 = xor <8 x i64> %209, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %211 = bitcast <8 x i64> %210 to <16 x float>
  %212 = bitcast <16 x float> %200 to <8 x i64>
  %213 = xor <8 x i64> %212, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %214 = bitcast <8 x i64> %213 to <16 x float>
  %215 = fmul <16 x float> %194, %198
  %216 = fadd <16 x float> %215, %214
  %217 = fmul <16 x float> %195, %198
  %218 = fadd <16 x float> %217, %216
  %219 = fmul <16 x float> %199, %194
  %220 = fadd <16 x float> %219, %218
  %221 = fmul <16 x float> %195, %199
  %222 = fadd <16 x float> %221, %220
  %223 = fmul <16 x float> %200, %211
  %224 = fadd <16 x float> %222, %223
  %225 = fmul <16 x float> %200, %186
  %226 = fsub <16 x float> %181, %225
  %227 = fmul <16 x float> %187, %226
  %228 = fadd <16 x float> %224, %227
  %229 = fadd <16 x float> %200, %228
  %230 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i32 30, i16 -1, i32 4) #7
  %231 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %229, <16 x float> %229, i32 4, i16 -1, i32 4) #7
  %232 = or i16 %231, %230
  %233 = bitcast i16 %232 to <16 x i1>
  %234 = select <16 x i1> %233, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %229
  %235 = bitcast <16 x float> %234 to <8 x i64>
  %236 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %237 = xor <8 x i64> %236, %235
  %238 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %239 = bitcast i16 %238 to <16 x i1>
  %240 = bitcast <8 x i64> %237 to <16 x float>
  %241 = select <16 x i1> %239, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %240
  ret <16 x float> %241
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sinhf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fmul <16 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <16 x float> %8, %4
  %10 = fmul <16 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <16 x float> %10, %9
  %12 = fmul <16 x float> %11, %11
  %13 = fmul <16 x float> %12, %12
  %14 = fmul <16 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <16 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <16 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <16 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <16 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <16 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <16 x float> %12, %17
  %21 = fadd <16 x float> %19, %20
  %22 = fmul <16 x float> %13, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fmul <16 x float> %12, %23
  %25 = fadd <16 x float> %11, %24
  %26 = icmp eq <16 x i32> %6, zeroinitializer
  %27 = fadd <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = ashr <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %29 = shl <16 x i32> %28, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <16 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = fmul <16 x float> %27, %31
  %33 = sub <16 x i32> %6, %28
  %34 = shl <16 x i32> %33, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %35 = add <16 x i32> %34, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %36 = bitcast <16 x i32> %35 to <16 x float>
  %37 = fmul <16 x float> %32, %36
  %38 = fadd <16 x float> %37, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %39 = select <16 x i1> %26, <16 x float> %25, <16 x float> %38
  %40 = fadd <16 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %41 = fadd <16 x float> %39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fdiv <16 x float> %40, %41
  %43 = fmul <16 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fmul <16 x float> %43, %42
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i32 30, i16 -1, i32 4) #7
  %46 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %44, <16 x float> %44, i32 4, i16 -1, i32 4) #7
  %47 = or i16 %46, %45
  %48 = bitcast i16 %47 to <16 x i1>
  %49 = select <16 x i1> %48, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %44
  %50 = bitcast <16 x float> %49 to <8 x i64>
  %51 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = xor <8 x i64> %51, %50
  %53 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %54 = bitcast i16 %53 to <16 x i1>
  %55 = bitcast <8 x i64> %52 to <16 x float>
  %56 = select <16 x i1> %54, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %55
  ret <16 x float> %56
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_coshf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fmul <16 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <16 x float> %8, %4
  %10 = fmul <16 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <16 x float> %10, %9
  %12 = fmul <16 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <16 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <16 x float> %11, %15
  %17 = fadd <16 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <16 x float> %11, %17
  %19 = fadd <16 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <16 x float> %11, %19
  %21 = fadd <16 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <16 x float> %11, %11
  %23 = fmul <16 x float> %22, %21
  %24 = fadd <16 x float> %11, %23
  %25 = fadd <16 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %27 = shl <16 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <16 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <16 x i32> %28 to <16 x float>
  %30 = fmul <16 x float> %25, %29
  %31 = sub <16 x i32> %6, %26
  %32 = shl <16 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = add <16 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <16 x i32> %33 to <16 x float>
  %35 = fmul <16 x float> %30, %34
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> zeroinitializer, <16 x float> %35
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %40 = bitcast i16 %39 to <16 x i1>
  %41 = select <16 x i1> %40, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %38
  %42 = fdiv <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %41
  %43 = fmul <16 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fadd <16 x float> %43, %42
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i32 30, i16 -1, i32 4) #7
  %46 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %44, <16 x float> %44, i32 4, i16 -1, i32 4) #7
  %47 = or i16 %46, %45
  %48 = bitcast i16 %47 to <16 x i1>
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %50 = bitcast i16 %49 to <16 x i1>
  %51 = select <16 x i1> %48, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %44
  %52 = select <16 x i1> %50, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %51
  ret <16 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_tanhf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <16 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %6, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %9 = fmul <16 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <16 x float> %5, %9
  %11 = fmul <16 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <16 x float> %11, %10
  %13 = fmul <16 x float> %12, %12
  %14 = fmul <16 x float> %13, %13
  %15 = fmul <16 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <16 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <16 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <16 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <16 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <16 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <16 x float> %13, %18
  %22 = fadd <16 x float> %20, %21
  %23 = fmul <16 x float> %14, %16
  %24 = fadd <16 x float> %23, %22
  %25 = fmul <16 x float> %13, %24
  %26 = fadd <16 x float> %12, %25
  %27 = icmp eq <16 x i32> %7, zeroinitializer
  %28 = fadd <16 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %30 = shl <16 x i32> %29, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %31 = add <16 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <16 x i32> %31 to <16 x float>
  %33 = fmul <16 x float> %28, %32
  %34 = sub <16 x i32> %7, %29
  %35 = shl <16 x i32> %34, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %36 = add <16 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <16 x i32> %36 to <16 x float>
  %38 = fmul <16 x float> %33, %37
  %39 = fadd <16 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = select <16 x i1> %27, <16 x float> %26, <16 x float> %39
  %41 = fadd <16 x float> %40, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %42 = fdiv <16 x float> %40, %41
  %43 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i32 30, i16 -1, i32 4) #7
  %44 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %42, <16 x float> %42, i32 4, i16 -1, i32 4) #7
  %45 = or i16 %44, %43
  %46 = bitcast i16 %45 to <16 x i1>
  %47 = select <16 x i1> %46, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %42
  %48 = bitcast <16 x float> %47 to <8 x i64>
  %49 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = xor <8 x i64> %49, %48
  %51 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %52 = bitcast i16 %51 to <16 x i1>
  %53 = bitcast <8 x i64> %50 to <16 x float>
  %54 = select <16 x i1> %52, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %53
  ret <16 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_asinhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 30, i16 -1, i32 4) #7
  %6 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %0
  %7 = and <8 x i64> %2, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = fsub <16 x float> %0, %8
  %10 = bitcast <16 x float> %6 to <8 x i64>
  %11 = and <8 x i64> %10, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %12 = bitcast <8 x i64> %11 to <16 x float>
  %13 = fsub <16 x float> %6, %12
  %14 = fmul <16 x float> %8, %12
  %15 = fadd <16 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %16 = fmul <16 x float> %13, %8
  %17 = fadd <16 x float> %16, %15
  %18 = fmul <16 x float> %9, %12
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %9, %13
  %21 = fadd <16 x float> %20, %19
  %22 = xor <8 x i64> %10, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %23 = bitcast <8 x i64> %22 to <16 x float>
  %24 = fmul <16 x float> %21, %23
  %25 = bitcast i16 %5 to <16 x i1>
  %26 = select <16 x i1> %25, <16 x float> %6, <16 x float> %4
  %27 = select <16 x i1> %25, <16 x float> %24, <16 x float> zeroinitializer
  %28 = bitcast <16 x float> %26 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %26, %30
  %32 = fmul <16 x float> %26, %26
  %33 = bitcast <16 x float> %32 to <8 x i64>
  %34 = xor <8 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = fmul <16 x float> %30, %30
  %37 = fadd <16 x float> %36, %35
  %38 = fadd <16 x float> %30, %30
  %39 = fmul <16 x float> %38, %31
  %40 = fadd <16 x float> %39, %37
  %41 = fmul <16 x float> %31, %31
  %42 = fadd <16 x float> %41, %40
  %43 = fadd <16 x float> %27, %27
  %44 = fmul <16 x float> %26, %43
  %45 = fadd <16 x float> %44, %42
  %46 = fadd <16 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fsub <16 x float> %46, %32
  %48 = fsub <16 x float> %46, %47
  %49 = fsub <16 x float> %32, %48
  %50 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %51 = fadd <16 x float> %50, %49
  %52 = fadd <16 x float> %51, %45
  %53 = fadd <16 x float> %46, %52
  %54 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %53, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %55 = bitcast <16 x float> %54 to <8 x i64>
  %56 = and <8 x i64> %55, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fsub <16 x float> %54, %57
  %59 = fmul <16 x float> %54, %54
  %60 = bitcast <16 x float> %59 to <8 x i64>
  %61 = xor <8 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = fmul <16 x float> %57, %57
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %58, %57
  %66 = fadd <16 x float> %65, %64
  %67 = fadd <16 x float> %65, %66
  %68 = fmul <16 x float> %58, %58
  %69 = fadd <16 x float> %68, %67
  %70 = fadd <16 x float> %59, %46
  %71 = fsub <16 x float> %70, %46
  %72 = fsub <16 x float> %70, %71
  %73 = fsub <16 x float> %46, %72
  %74 = fsub <16 x float> %59, %71
  %75 = fadd <16 x float> %74, %73
  %76 = fadd <16 x float> %69, %52
  %77 = fadd <16 x float> %75, %76
  %78 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %54
  %79 = bitcast <16 x float> %78 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %78, %81
  %83 = fmul <16 x float> %57, %81
  %84 = fadd <16 x float> %83, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %85 = fmul <16 x float> %82, %57
  %86 = fadd <16 x float> %85, %84
  %87 = fmul <16 x float> %58, %81
  %88 = fadd <16 x float> %87, %86
  %89 = fmul <16 x float> %58, %82
  %90 = fadd <16 x float> %89, %88
  %91 = xor <8 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = fmul <16 x float> %90, %92
  %94 = bitcast <16 x float> %70 to <8 x i64>
  %95 = and <8 x i64> %94, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %96 = bitcast <8 x i64> %95 to <16 x float>
  %97 = fsub <16 x float> %70, %96
  %98 = fmul <16 x float> %78, %70
  %99 = bitcast <16 x float> %98 to <8 x i64>
  %100 = xor <8 x i64> %99, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %101 = bitcast <8 x i64> %100 to <16 x float>
  %102 = fmul <16 x float> %81, %96
  %103 = fadd <16 x float> %102, %101
  %104 = fmul <16 x float> %97, %81
  %105 = fadd <16 x float> %104, %103
  %106 = fmul <16 x float> %82, %96
  %107 = fadd <16 x float> %106, %105
  %108 = fmul <16 x float> %82, %97
  %109 = fadd <16 x float> %108, %107
  %110 = fmul <16 x float> %70, %93
  %111 = fadd <16 x float> %110, %109
  %112 = fmul <16 x float> %78, %77
  %113 = fadd <16 x float> %112, %111
  %114 = fmul <16 x float> %98, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %115 = fmul <16 x float> %113, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %116 = bitcast <16 x float> %114 to <8 x i64>
  %117 = and <8 x i64> %116, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %118 = bitcast <8 x i64> %117 to <16 x float>
  %119 = fsub <16 x float> %114, %118
  %120 = and <8 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944>
  %121 = bitcast <8 x i64> %120 to <16 x float>
  %122 = fsub <16 x float> %4, %121
  %123 = fmul <16 x float> %114, %4
  %124 = bitcast <16 x float> %123 to <8 x i64>
  %125 = xor <8 x i64> %124, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = fmul <16 x float> %121, %118
  %128 = fadd <16 x float> %127, %126
  %129 = fmul <16 x float> %119, %121
  %130 = fadd <16 x float> %129, %128
  %131 = fmul <16 x float> %122, %118
  %132 = fadd <16 x float> %131, %130
  %133 = fmul <16 x float> %122, %119
  %134 = fadd <16 x float> %133, %132
  %135 = fmul <16 x float> %115, %4
  %136 = fadd <16 x float> %134, %135
  %137 = select <16 x i1> %25, <16 x float> %123, <16 x float> %114
  %138 = select <16 x i1> %25, <16 x float> %136, <16 x float> %115
  %139 = fadd <16 x float> %137, %0
  %140 = fsub <16 x float> %139, %137
  %141 = fsub <16 x float> %139, %140
  %142 = fsub <16 x float> %137, %141
  %143 = fsub <16 x float> %0, %140
  %144 = fadd <16 x float> %143, %142
  %145 = fadd <16 x float> %144, %138
  %146 = fadd <16 x float> %139, %145
  %147 = fsub <16 x float> %139, %146
  %148 = fadd <16 x float> %145, %147
  %149 = fmul <16 x float> %146, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %150 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %149, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %151 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %150, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %152 = shl <16 x i32> %151, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %153 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %152
  %154 = bitcast <16 x i32> %153 to <16 x float>
  %155 = fmul <16 x float> %146, %154
  %156 = fmul <16 x float> %148, %154
  %157 = fadd <16 x float> %155, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %158 = fsub <16 x float> %157, %155
  %159 = fsub <16 x float> %157, %158
  %160 = fsub <16 x float> %155, %159
  %161 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %158
  %162 = fadd <16 x float> %161, %160
  %163 = fadd <16 x float> %156, %162
  %164 = fadd <16 x float> %155, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %165 = fsub <16 x float> %164, %155
  %166 = fsub <16 x float> %164, %165
  %167 = fsub <16 x float> %155, %166
  %168 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %165
  %169 = fadd <16 x float> %168, %167
  %170 = fadd <16 x float> %156, %169
  %171 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %164
  %172 = bitcast <16 x float> %164 to <8 x i64>
  %173 = and <8 x i64> %172, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %174 = bitcast <8 x i64> %173 to <16 x float>
  %175 = fsub <16 x float> %164, %174
  %176 = bitcast <16 x float> %171 to <8 x i64>
  %177 = and <8 x i64> %176, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %178 = bitcast <8 x i64> %177 to <16 x float>
  %179 = fsub <16 x float> %171, %178
  %180 = bitcast <16 x float> %157 to <8 x i64>
  %181 = and <8 x i64> %180, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %182 = bitcast <8 x i64> %181 to <16 x float>
  %183 = fsub <16 x float> %157, %182
  %184 = fmul <16 x float> %157, %171
  %185 = fmul <16 x float> %174, %178
  %186 = fadd <16 x float> %185, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %187 = fmul <16 x float> %179, %174
  %188 = fadd <16 x float> %187, %186
  %189 = fmul <16 x float> %175, %178
  %190 = fadd <16 x float> %189, %188
  %191 = fmul <16 x float> %175, %179
  %192 = fadd <16 x float> %191, %190
  %193 = bitcast <16 x float> %192 to <8 x i64>
  %194 = xor <8 x i64> %193, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %195 = bitcast <8 x i64> %194 to <16 x float>
  %196 = bitcast <16 x float> %184 to <8 x i64>
  %197 = xor <8 x i64> %196, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = bitcast <8 x i64> %197 to <16 x float>
  %199 = fmul <16 x float> %182, %178
  %200 = fadd <16 x float> %199, %198
  %201 = fmul <16 x float> %179, %182
  %202 = fadd <16 x float> %201, %200
  %203 = fmul <16 x float> %183, %178
  %204 = fadd <16 x float> %203, %202
  %205 = fmul <16 x float> %183, %179
  %206 = fadd <16 x float> %205, %204
  %207 = fmul <16 x float> %184, %195
  %208 = fadd <16 x float> %206, %207
  %209 = fmul <16 x float> %184, %170
  %210 = fsub <16 x float> %163, %209
  %211 = fmul <16 x float> %171, %210
  %212 = fadd <16 x float> %211, %208
  %213 = and <8 x i64> %196, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %214 = bitcast <8 x i64> %213 to <16 x float>
  %215 = fsub <16 x float> %184, %214
  %216 = fmul <16 x float> %184, %184
  %217 = bitcast <16 x float> %216 to <8 x i64>
  %218 = xor <8 x i64> %217, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %219 = bitcast <8 x i64> %218 to <16 x float>
  %220 = fmul <16 x float> %214, %214
  %221 = fadd <16 x float> %220, %219
  %222 = fadd <16 x float> %214, %214
  %223 = fmul <16 x float> %222, %215
  %224 = fadd <16 x float> %223, %221
  %225 = fmul <16 x float> %215, %215
  %226 = fadd <16 x float> %225, %224
  %227 = fadd <16 x float> %212, %212
  %228 = fmul <16 x float> %184, %227
  %229 = fadd <16 x float> %226, %228
  %230 = fmul <16 x float> %216, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %231 = fadd <16 x float> %230, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %232 = fmul <16 x float> %216, %231
  %233 = fadd <16 x float> %232, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %234 = fmul <16 x float> %216, %233
  %235 = fadd <16 x float> %234, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %236 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %151, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %237 = bitcast <16 x float> %236 to <8 x i64>
  %238 = and <8 x i64> %237, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %239 = bitcast <8 x i64> %238 to <16 x float>
  %240 = fsub <16 x float> %236, %239
  %241 = fmul <16 x float> %236, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %242 = bitcast <16 x float> %241 to <8 x i64>
  %243 = xor <8 x i64> %242, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %244 = bitcast <8 x i64> %243 to <16 x float>
  %245 = fmul <16 x float> %239, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %246 = fadd <16 x float> %245, %244
  %247 = fmul <16 x float> %239, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %248 = fadd <16 x float> %247, %246
  %249 = fmul <16 x float> %240, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %250 = fadd <16 x float> %249, %248
  %251 = fmul <16 x float> %240, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %252 = fadd <16 x float> %251, %250
  %253 = fmul <16 x float> %236, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %254 = fadd <16 x float> %253, %252
  %255 = fmul <16 x float> %184, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %256 = fmul <16 x float> %212, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %257 = fadd <16 x float> %241, %255
  %258 = fsub <16 x float> %241, %257
  %259 = fadd <16 x float> %255, %258
  %260 = fadd <16 x float> %254, %259
  %261 = fadd <16 x float> %260, %256
  %262 = and <8 x i64> %217, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %263 = bitcast <8 x i64> %262 to <16 x float>
  %264 = fsub <16 x float> %216, %263
  %265 = fmul <16 x float> %184, %216
  %266 = bitcast <16 x float> %265 to <8 x i64>
  %267 = xor <8 x i64> %266, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %268 = bitcast <8 x i64> %267 to <16 x float>
  %269 = fmul <16 x float> %214, %263
  %270 = fadd <16 x float> %269, %268
  %271 = fmul <16 x float> %264, %214
  %272 = fadd <16 x float> %271, %270
  %273 = fmul <16 x float> %215, %263
  %274 = fadd <16 x float> %273, %272
  %275 = fmul <16 x float> %215, %264
  %276 = fadd <16 x float> %275, %274
  %277 = fmul <16 x float> %216, %212
  %278 = fadd <16 x float> %276, %277
  %279 = fmul <16 x float> %184, %229
  %280 = fadd <16 x float> %278, %279
  %281 = and <8 x i64> %266, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %282 = bitcast <8 x i64> %281 to <16 x float>
  %283 = fsub <16 x float> %265, %282
  %284 = bitcast <16 x float> %235 to <8 x i64>
  %285 = and <8 x i64> %284, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %286 = bitcast <8 x i64> %285 to <16 x float>
  %287 = fsub <16 x float> %235, %286
  %288 = fmul <16 x float> %265, %235
  %289 = bitcast <16 x float> %288 to <8 x i64>
  %290 = xor <8 x i64> %289, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %291 = bitcast <8 x i64> %290 to <16 x float>
  %292 = fmul <16 x float> %282, %286
  %293 = fadd <16 x float> %292, %291
  %294 = fmul <16 x float> %283, %286
  %295 = fadd <16 x float> %294, %293
  %296 = fmul <16 x float> %287, %282
  %297 = fadd <16 x float> %296, %295
  %298 = fmul <16 x float> %283, %287
  %299 = fadd <16 x float> %298, %297
  %300 = fmul <16 x float> %235, %280
  %301 = fadd <16 x float> %299, %300
  %302 = fadd <16 x float> %257, %288
  %303 = fsub <16 x float> %257, %302
  %304 = fadd <16 x float> %288, %303
  %305 = fadd <16 x float> %304, %261
  %306 = fadd <16 x float> %305, %301
  %307 = fadd <16 x float> %302, %306
  %308 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i32 30, i16 -1, i32 4) #7
  %309 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %307, <16 x float> %307, i32 4, i16 -1, i32 4) #7
  %310 = or i16 %309, %308
  %311 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %312 = or <8 x i64> %311, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %313 = bitcast <8 x i64> %312 to <16 x float>
  %314 = bitcast i16 %310 to <16 x i1>
  %315 = select <16 x i1> %314, <16 x float> %313, <16 x float> %307
  %316 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %317 = bitcast i16 %316 to <16 x i1>
  %318 = select <16 x i1> %317, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %315
  %319 = bitcast <16 x float> %0 to <16 x i32>
  %320 = icmp eq <16 x i32> %319, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %321 = select <16 x i1> %320, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %318
  ret <16 x float> %321
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_acoshf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fsub <16 x float> %2, %0
  %4 = fsub <16 x float> %2, %3
  %5 = fsub <16 x float> %0, %4
  %6 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %3
  %7 = fadd <16 x float> %6, %5
  %8 = fadd <16 x float> %2, %7
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = bitcast <16 x float> %9 to <8 x i64>
  %11 = and <8 x i64> %10, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %12 = bitcast <8 x i64> %11 to <16 x float>
  %13 = fsub <16 x float> %9, %12
  %14 = fmul <16 x float> %9, %9
  %15 = bitcast <16 x float> %14 to <8 x i64>
  %16 = xor <8 x i64> %15, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = fmul <16 x float> %12, %12
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %13, %12
  %21 = fadd <16 x float> %20, %19
  %22 = fadd <16 x float> %20, %21
  %23 = fmul <16 x float> %13, %13
  %24 = fadd <16 x float> %23, %22
  %25 = fadd <16 x float> %2, %14
  %26 = fsub <16 x float> %25, %2
  %27 = fsub <16 x float> %25, %26
  %28 = fsub <16 x float> %2, %27
  %29 = fsub <16 x float> %14, %26
  %30 = fadd <16 x float> %29, %28
  %31 = fadd <16 x float> %7, %24
  %32 = fadd <16 x float> %30, %31
  %33 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %9
  %34 = bitcast <16 x float> %33 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %33, %36
  %38 = fmul <16 x float> %12, %36
  %39 = fadd <16 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = fmul <16 x float> %37, %12
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %13, %36
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %13, %37
  %45 = fadd <16 x float> %44, %43
  %46 = xor <8 x i64> %34, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fmul <16 x float> %45, %47
  %49 = bitcast <16 x float> %25 to <8 x i64>
  %50 = and <8 x i64> %49, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %51 = bitcast <8 x i64> %50 to <16 x float>
  %52 = fsub <16 x float> %25, %51
  %53 = fmul <16 x float> %33, %25
  %54 = bitcast <16 x float> %53 to <8 x i64>
  %55 = xor <8 x i64> %54, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %56 = bitcast <8 x i64> %55 to <16 x float>
  %57 = fmul <16 x float> %36, %51
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %52, %36
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %37, %51
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %37, %52
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %25, %48
  %66 = fadd <16 x float> %64, %65
  %67 = fmul <16 x float> %33, %32
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %53, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %70 = fmul <16 x float> %68, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fadd <16 x float> %0, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %72 = fsub <16 x float> %71, %0
  %73 = fsub <16 x float> %71, %72
  %74 = fsub <16 x float> %0, %73
  %75 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %72
  %76 = fadd <16 x float> %75, %74
  %77 = fadd <16 x float> %71, %76
  %78 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %77, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %79 = bitcast <16 x float> %78 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %78, %81
  %83 = fmul <16 x float> %78, %78
  %84 = bitcast <16 x float> %83 to <8 x i64>
  %85 = xor <8 x i64> %84, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %86 = bitcast <8 x i64> %85 to <16 x float>
  %87 = fmul <16 x float> %81, %81
  %88 = fadd <16 x float> %87, %86
  %89 = fmul <16 x float> %82, %81
  %90 = fadd <16 x float> %89, %88
  %91 = fadd <16 x float> %89, %90
  %92 = fmul <16 x float> %82, %82
  %93 = fadd <16 x float> %92, %91
  %94 = fadd <16 x float> %71, %83
  %95 = fsub <16 x float> %94, %71
  %96 = fsub <16 x float> %94, %95
  %97 = fsub <16 x float> %71, %96
  %98 = fsub <16 x float> %83, %95
  %99 = fadd <16 x float> %98, %97
  %100 = fadd <16 x float> %76, %93
  %101 = fadd <16 x float> %99, %100
  %102 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %78
  %103 = bitcast <16 x float> %102 to <8 x i64>
  %104 = and <8 x i64> %103, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <8 x i64> %104 to <16 x float>
  %106 = fsub <16 x float> %102, %105
  %107 = fmul <16 x float> %81, %105
  %108 = fadd <16 x float> %107, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %109 = fmul <16 x float> %106, %81
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %82, %105
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %82, %106
  %114 = fadd <16 x float> %113, %112
  %115 = xor <8 x i64> %103, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <8 x i64> %115 to <16 x float>
  %117 = fmul <16 x float> %114, %116
  %118 = bitcast <16 x float> %94 to <8 x i64>
  %119 = and <8 x i64> %118, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %120 = bitcast <8 x i64> %119 to <16 x float>
  %121 = fsub <16 x float> %94, %120
  %122 = fmul <16 x float> %102, %94
  %123 = bitcast <16 x float> %122 to <8 x i64>
  %124 = xor <8 x i64> %123, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %125 = bitcast <8 x i64> %124 to <16 x float>
  %126 = fmul <16 x float> %105, %120
  %127 = fadd <16 x float> %126, %125
  %128 = fmul <16 x float> %121, %105
  %129 = fadd <16 x float> %128, %127
  %130 = fmul <16 x float> %106, %120
  %131 = fadd <16 x float> %130, %129
  %132 = fmul <16 x float> %106, %121
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %94, %117
  %135 = fadd <16 x float> %133, %134
  %136 = fmul <16 x float> %102, %101
  %137 = fadd <16 x float> %136, %135
  %138 = fmul <16 x float> %122, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %139 = fmul <16 x float> %137, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %140 = bitcast <16 x float> %69 to <8 x i64>
  %141 = and <8 x i64> %140, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <8 x i64> %141 to <16 x float>
  %143 = fsub <16 x float> %69, %142
  %144 = bitcast <16 x float> %138 to <8 x i64>
  %145 = and <8 x i64> %144, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %146 = bitcast <8 x i64> %145 to <16 x float>
  %147 = fsub <16 x float> %138, %146
  %148 = fmul <16 x float> %69, %138
  %149 = bitcast <16 x float> %148 to <8 x i64>
  %150 = xor <8 x i64> %149, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fmul <16 x float> %142, %146
  %153 = fadd <16 x float> %152, %151
  %154 = fmul <16 x float> %143, %146
  %155 = fadd <16 x float> %154, %153
  %156 = fmul <16 x float> %147, %142
  %157 = fadd <16 x float> %156, %155
  %158 = fmul <16 x float> %143, %147
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %69, %139
  %161 = fadd <16 x float> %159, %160
  %162 = fmul <16 x float> %138, %70
  %163 = fadd <16 x float> %162, %161
  %164 = fadd <16 x float> %148, %0
  %165 = fsub <16 x float> %164, %148
  %166 = fsub <16 x float> %164, %165
  %167 = fsub <16 x float> %148, %166
  %168 = fsub <16 x float> %0, %165
  %169 = fadd <16 x float> %168, %167
  %170 = fadd <16 x float> %169, %163
  %171 = fmul <16 x float> %164, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %172 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %171, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %173 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %172, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %174 = shl <16 x i32> %173, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %175 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %174
  %176 = bitcast <16 x i32> %175 to <16 x float>
  %177 = fmul <16 x float> %164, %176
  %178 = fmul <16 x float> %170, %176
  %179 = fadd <16 x float> %177, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %180 = fsub <16 x float> %179, %177
  %181 = fsub <16 x float> %179, %180
  %182 = fsub <16 x float> %177, %181
  %183 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %180
  %184 = fadd <16 x float> %183, %182
  %185 = fadd <16 x float> %184, %178
  %186 = fadd <16 x float> %177, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %187 = fsub <16 x float> %186, %177
  %188 = fsub <16 x float> %186, %187
  %189 = fsub <16 x float> %177, %188
  %190 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %187
  %191 = fadd <16 x float> %190, %189
  %192 = fadd <16 x float> %191, %178
  %193 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %186
  %194 = bitcast <16 x float> %186 to <8 x i64>
  %195 = and <8 x i64> %194, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %196 = bitcast <8 x i64> %195 to <16 x float>
  %197 = fsub <16 x float> %186, %196
  %198 = bitcast <16 x float> %193 to <8 x i64>
  %199 = and <8 x i64> %198, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %200 = bitcast <8 x i64> %199 to <16 x float>
  %201 = fsub <16 x float> %193, %200
  %202 = bitcast <16 x float> %179 to <8 x i64>
  %203 = and <8 x i64> %202, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %204 = bitcast <8 x i64> %203 to <16 x float>
  %205 = fsub <16 x float> %179, %204
  %206 = fmul <16 x float> %179, %193
  %207 = fmul <16 x float> %196, %200
  %208 = fadd <16 x float> %207, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %209 = fmul <16 x float> %201, %196
  %210 = fadd <16 x float> %209, %208
  %211 = fmul <16 x float> %197, %200
  %212 = fadd <16 x float> %211, %210
  %213 = fmul <16 x float> %197, %201
  %214 = fadd <16 x float> %213, %212
  %215 = bitcast <16 x float> %214 to <8 x i64>
  %216 = xor <8 x i64> %215, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %217 = bitcast <8 x i64> %216 to <16 x float>
  %218 = bitcast <16 x float> %206 to <8 x i64>
  %219 = xor <8 x i64> %218, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %220 = bitcast <8 x i64> %219 to <16 x float>
  %221 = fmul <16 x float> %204, %200
  %222 = fadd <16 x float> %221, %220
  %223 = fmul <16 x float> %201, %204
  %224 = fadd <16 x float> %223, %222
  %225 = fmul <16 x float> %205, %200
  %226 = fadd <16 x float> %225, %224
  %227 = fmul <16 x float> %205, %201
  %228 = fadd <16 x float> %227, %226
  %229 = fmul <16 x float> %206, %217
  %230 = fadd <16 x float> %228, %229
  %231 = fmul <16 x float> %206, %192
  %232 = fsub <16 x float> %185, %231
  %233 = fmul <16 x float> %193, %232
  %234 = fadd <16 x float> %230, %233
  %235 = and <8 x i64> %218, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %236 = bitcast <8 x i64> %235 to <16 x float>
  %237 = fsub <16 x float> %206, %236
  %238 = fmul <16 x float> %206, %206
  %239 = bitcast <16 x float> %238 to <8 x i64>
  %240 = xor <8 x i64> %239, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %241 = bitcast <8 x i64> %240 to <16 x float>
  %242 = fmul <16 x float> %236, %236
  %243 = fadd <16 x float> %242, %241
  %244 = fadd <16 x float> %236, %236
  %245 = fmul <16 x float> %244, %237
  %246 = fadd <16 x float> %245, %243
  %247 = fmul <16 x float> %237, %237
  %248 = fadd <16 x float> %247, %246
  %249 = fadd <16 x float> %234, %234
  %250 = fmul <16 x float> %206, %249
  %251 = fadd <16 x float> %248, %250
  %252 = fmul <16 x float> %238, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %253 = fadd <16 x float> %252, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %254 = fmul <16 x float> %238, %253
  %255 = fadd <16 x float> %254, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %256 = fmul <16 x float> %238, %255
  %257 = fadd <16 x float> %256, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %258 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %173, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %259 = bitcast <16 x float> %258 to <8 x i64>
  %260 = and <8 x i64> %259, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %261 = bitcast <8 x i64> %260 to <16 x float>
  %262 = fsub <16 x float> %258, %261
  %263 = fmul <16 x float> %258, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %264 = bitcast <16 x float> %263 to <8 x i64>
  %265 = xor <8 x i64> %264, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %266 = bitcast <8 x i64> %265 to <16 x float>
  %267 = fmul <16 x float> %261, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %268 = fadd <16 x float> %267, %266
  %269 = fmul <16 x float> %261, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %270 = fadd <16 x float> %269, %268
  %271 = fmul <16 x float> %262, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %272 = fadd <16 x float> %271, %270
  %273 = fmul <16 x float> %262, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %274 = fadd <16 x float> %273, %272
  %275 = fmul <16 x float> %258, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %276 = fadd <16 x float> %275, %274
  %277 = fmul <16 x float> %206, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %278 = fmul <16 x float> %234, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %279 = fadd <16 x float> %263, %277
  %280 = fsub <16 x float> %263, %279
  %281 = fadd <16 x float> %277, %280
  %282 = fadd <16 x float> %276, %281
  %283 = fadd <16 x float> %282, %278
  %284 = and <8 x i64> %239, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %285 = bitcast <8 x i64> %284 to <16 x float>
  %286 = fsub <16 x float> %238, %285
  %287 = fmul <16 x float> %206, %238
  %288 = bitcast <16 x float> %287 to <8 x i64>
  %289 = xor <8 x i64> %288, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %290 = bitcast <8 x i64> %289 to <16 x float>
  %291 = fmul <16 x float> %236, %285
  %292 = fadd <16 x float> %291, %290
  %293 = fmul <16 x float> %286, %236
  %294 = fadd <16 x float> %293, %292
  %295 = fmul <16 x float> %237, %285
  %296 = fadd <16 x float> %295, %294
  %297 = fmul <16 x float> %237, %286
  %298 = fadd <16 x float> %297, %296
  %299 = fmul <16 x float> %238, %234
  %300 = fadd <16 x float> %298, %299
  %301 = fmul <16 x float> %206, %251
  %302 = fadd <16 x float> %300, %301
  %303 = and <8 x i64> %288, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %304 = bitcast <8 x i64> %303 to <16 x float>
  %305 = fsub <16 x float> %287, %304
  %306 = bitcast <16 x float> %257 to <8 x i64>
  %307 = and <8 x i64> %306, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %308 = bitcast <8 x i64> %307 to <16 x float>
  %309 = fsub <16 x float> %257, %308
  %310 = fmul <16 x float> %287, %257
  %311 = bitcast <16 x float> %310 to <8 x i64>
  %312 = xor <8 x i64> %311, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %313 = bitcast <8 x i64> %312 to <16 x float>
  %314 = fmul <16 x float> %304, %308
  %315 = fadd <16 x float> %314, %313
  %316 = fmul <16 x float> %305, %308
  %317 = fadd <16 x float> %316, %315
  %318 = fmul <16 x float> %309, %304
  %319 = fadd <16 x float> %318, %317
  %320 = fmul <16 x float> %305, %309
  %321 = fadd <16 x float> %320, %319
  %322 = fmul <16 x float> %257, %302
  %323 = fadd <16 x float> %321, %322
  %324 = fadd <16 x float> %279, %310
  %325 = fsub <16 x float> %279, %324
  %326 = fadd <16 x float> %310, %325
  %327 = fadd <16 x float> %326, %283
  %328 = fadd <16 x float> %327, %323
  %329 = fadd <16 x float> %324, %328
  %330 = bitcast <16 x float> %0 to <8 x i64>
  %331 = and <8 x i64> %330, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %332 = bitcast <8 x i64> %331 to <16 x float>
  %333 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %332, <16 x float> <float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000, float 0x43EFFFFFE0000000>, i32 30, i16 -1, i32 4) #7
  %334 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %329, <16 x float> %329, i32 4, i16 -1, i32 4) #7
  %335 = or i16 %334, %333
  %336 = bitcast i16 %335 to <16 x i1>
  %337 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %338 = bitcast i16 %337 to <16 x i1>
  %339 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 17, i16 -1, i32 4) #7
  %340 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %341 = or i16 %340, %339
  %342 = bitcast i16 %341 to <16 x i1>
  %343 = select <16 x i1> %336, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %329
  %344 = select <16 x i1> %338, <16 x float> zeroinitializer, <16 x float> %343
  %345 = select <16 x i1> %342, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %344
  ret <16 x float> %345
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_atanhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fadd <16 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %6 = fadd <16 x float> %5, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = fsub <16 x float> %5, %6
  %8 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %9 = fsub <16 x float> %4, %6
  %10 = fadd <16 x float> %9, %8
  %11 = or <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = bitcast <8 x i64> %11 to <16 x float>
  %13 = fadd <16 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = fadd <16 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <16 x float> %13, %14
  %16 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %17 = fsub <16 x float> %12, %14
  %18 = fadd <16 x float> %17, %16
  %19 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %13
  %20 = bitcast <16 x float> %13 to <8 x i64>
  %21 = and <8 x i64> %20, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = fsub <16 x float> %13, %22
  %24 = bitcast <16 x float> %19 to <8 x i64>
  %25 = and <8 x i64> %24, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = fsub <16 x float> %19, %26
  %28 = bitcast <16 x float> %5 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %5, %30
  %32 = fmul <16 x float> %5, %19
  %33 = fmul <16 x float> %22, %26
  %34 = fadd <16 x float> %33, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %35 = fmul <16 x float> %27, %22
  %36 = fadd <16 x float> %35, %34
  %37 = fmul <16 x float> %23, %26
  %38 = fadd <16 x float> %37, %36
  %39 = fmul <16 x float> %23, %27
  %40 = fadd <16 x float> %39, %38
  %41 = bitcast <16 x float> %40 to <8 x i64>
  %42 = xor <8 x i64> %41, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = bitcast <16 x float> %32 to <8 x i64>
  %45 = xor <8 x i64> %44, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = bitcast <8 x i64> %45 to <16 x float>
  %47 = fmul <16 x float> %30, %26
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %27, %30
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %31, %26
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %31, %27
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %32, %43
  %56 = fadd <16 x float> %54, %55
  %57 = fmul <16 x float> %32, %18
  %58 = fsub <16 x float> %10, %57
  %59 = fmul <16 x float> %19, %58
  %60 = fadd <16 x float> %59, %56
  %61 = fmul <16 x float> %32, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %62 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %61, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %63 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %62, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %64 = shl <16 x i32> %63, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %65 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %64
  %66 = bitcast <16 x i32> %65 to <16 x float>
  %67 = fmul <16 x float> %32, %66
  %68 = fmul <16 x float> %60, %66
  %69 = fadd <16 x float> %67, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %70 = fsub <16 x float> %69, %67
  %71 = fsub <16 x float> %69, %70
  %72 = fsub <16 x float> %67, %71
  %73 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %70
  %74 = fadd <16 x float> %73, %72
  %75 = fadd <16 x float> %68, %74
  %76 = fadd <16 x float> %67, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %77 = fsub <16 x float> %76, %67
  %78 = fsub <16 x float> %76, %77
  %79 = fsub <16 x float> %67, %78
  %80 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %77
  %81 = fadd <16 x float> %80, %79
  %82 = fadd <16 x float> %68, %81
  %83 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %76
  %84 = bitcast <16 x float> %76 to <8 x i64>
  %85 = and <8 x i64> %84, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %86 = bitcast <8 x i64> %85 to <16 x float>
  %87 = fsub <16 x float> %76, %86
  %88 = bitcast <16 x float> %83 to <8 x i64>
  %89 = and <8 x i64> %88, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fsub <16 x float> %83, %90
  %92 = bitcast <16 x float> %69 to <8 x i64>
  %93 = and <8 x i64> %92, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %94 = bitcast <8 x i64> %93 to <16 x float>
  %95 = fsub <16 x float> %69, %94
  %96 = fmul <16 x float> %69, %83
  %97 = fmul <16 x float> %86, %90
  %98 = fadd <16 x float> %97, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %99 = fmul <16 x float> %91, %86
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %87, %90
  %102 = fadd <16 x float> %101, %100
  %103 = fmul <16 x float> %87, %91
  %104 = fadd <16 x float> %103, %102
  %105 = bitcast <16 x float> %104 to <8 x i64>
  %106 = xor <8 x i64> %105, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %107 = bitcast <8 x i64> %106 to <16 x float>
  %108 = bitcast <16 x float> %96 to <8 x i64>
  %109 = xor <8 x i64> %108, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %110 = bitcast <8 x i64> %109 to <16 x float>
  %111 = fmul <16 x float> %94, %90
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %91, %94
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %95, %90
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %95, %91
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %96, %107
  %120 = fadd <16 x float> %118, %119
  %121 = fmul <16 x float> %96, %82
  %122 = fsub <16 x float> %75, %121
  %123 = fmul <16 x float> %83, %122
  %124 = fadd <16 x float> %123, %120
  %125 = and <8 x i64> %108, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = fsub <16 x float> %96, %126
  %128 = fmul <16 x float> %96, %96
  %129 = bitcast <16 x float> %128 to <8 x i64>
  %130 = xor <8 x i64> %129, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %131 = bitcast <8 x i64> %130 to <16 x float>
  %132 = fmul <16 x float> %126, %126
  %133 = fadd <16 x float> %132, %131
  %134 = fadd <16 x float> %126, %126
  %135 = fmul <16 x float> %134, %127
  %136 = fadd <16 x float> %135, %133
  %137 = fmul <16 x float> %127, %127
  %138 = fadd <16 x float> %137, %136
  %139 = fadd <16 x float> %124, %124
  %140 = fmul <16 x float> %96, %139
  %141 = fadd <16 x float> %138, %140
  %142 = fmul <16 x float> %128, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %143 = fadd <16 x float> %142, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %144 = fmul <16 x float> %128, %143
  %145 = fadd <16 x float> %144, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %146 = fmul <16 x float> %128, %145
  %147 = fadd <16 x float> %146, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %148 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %63, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %149 = bitcast <16 x float> %148 to <8 x i64>
  %150 = and <8 x i64> %149, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %151 = bitcast <8 x i64> %150 to <16 x float>
  %152 = fsub <16 x float> %148, %151
  %153 = fmul <16 x float> %148, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %154 = bitcast <16 x float> %153 to <8 x i64>
  %155 = xor <8 x i64> %154, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fmul <16 x float> %151, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %151, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %160 = fadd <16 x float> %159, %158
  %161 = fmul <16 x float> %152, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %162 = fadd <16 x float> %161, %160
  %163 = fmul <16 x float> %152, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %164 = fadd <16 x float> %163, %162
  %165 = fmul <16 x float> %148, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %166 = fadd <16 x float> %165, %164
  %167 = fmul <16 x float> %96, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %168 = fmul <16 x float> %124, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %169 = fadd <16 x float> %153, %167
  %170 = fsub <16 x float> %153, %169
  %171 = fadd <16 x float> %167, %170
  %172 = fadd <16 x float> %166, %171
  %173 = fadd <16 x float> %172, %168
  %174 = and <8 x i64> %129, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %175 = bitcast <8 x i64> %174 to <16 x float>
  %176 = fsub <16 x float> %128, %175
  %177 = fmul <16 x float> %96, %128
  %178 = bitcast <16 x float> %177 to <8 x i64>
  %179 = xor <8 x i64> %178, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %180 = bitcast <8 x i64> %179 to <16 x float>
  %181 = fmul <16 x float> %126, %175
  %182 = fadd <16 x float> %181, %180
  %183 = fmul <16 x float> %176, %126
  %184 = fadd <16 x float> %183, %182
  %185 = fmul <16 x float> %127, %175
  %186 = fadd <16 x float> %185, %184
  %187 = fmul <16 x float> %127, %176
  %188 = fadd <16 x float> %187, %186
  %189 = fmul <16 x float> %128, %124
  %190 = fadd <16 x float> %188, %189
  %191 = fmul <16 x float> %96, %141
  %192 = fadd <16 x float> %190, %191
  %193 = and <8 x i64> %178, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %194 = bitcast <8 x i64> %193 to <16 x float>
  %195 = fsub <16 x float> %177, %194
  %196 = bitcast <16 x float> %147 to <8 x i64>
  %197 = and <8 x i64> %196, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %198 = bitcast <8 x i64> %197 to <16 x float>
  %199 = fsub <16 x float> %147, %198
  %200 = fmul <16 x float> %177, %147
  %201 = bitcast <16 x float> %200 to <8 x i64>
  %202 = xor <8 x i64> %201, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %203 = bitcast <8 x i64> %202 to <16 x float>
  %204 = fmul <16 x float> %194, %198
  %205 = fadd <16 x float> %204, %203
  %206 = fmul <16 x float> %195, %198
  %207 = fadd <16 x float> %206, %205
  %208 = fmul <16 x float> %199, %194
  %209 = fadd <16 x float> %208, %207
  %210 = fmul <16 x float> %195, %199
  %211 = fadd <16 x float> %210, %209
  %212 = fmul <16 x float> %147, %192
  %213 = fadd <16 x float> %211, %212
  %214 = fadd <16 x float> %169, %200
  %215 = fsub <16 x float> %169, %214
  %216 = fadd <16 x float> %200, %215
  %217 = fadd <16 x float> %216, %173
  %218 = fadd <16 x float> %217, %213
  %219 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 30, i16 -1, i32 4) #7
  %220 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %221 = fadd <16 x float> %214, %218
  %222 = fmul <16 x float> %221, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %223 = bitcast i16 %220 to <16 x i1>
  %224 = bitcast <16 x float> %222 to <16 x i32>
  %225 = select <16 x i1> %223, <16 x i32> <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>, <16 x i32> %224
  %226 = bitcast i16 %219 to <16 x i1>
  %227 = select <16 x i1> %226, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> %225
  %228 = bitcast <16 x i32> %227 to <16 x float>
  %229 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %230 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %228, <16 x float> %228, i32 4, i16 -1, i32 4) #7
  %231 = or i16 %230, %229
  %232 = bitcast i16 %231 to <16 x i1>
  %233 = select <16 x i1> %232, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> %227
  %234 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %235 = bitcast <16 x float> %0 to <16 x i32>
  %236 = and <16 x i32> %235, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %237 = xor <16 x i32> %233, %236
  %238 = bitcast i16 %234 to <16 x i1>
  %239 = bitcast <16 x i32> %237 to <16 x float>
  %240 = select <16 x i1> %238, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %239
  ret <16 x float> %240
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_exp2f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %2
  %5 = fmul <16 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <16 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <16 x float> %4, %6
  %8 = fadd <16 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <16 x float> %4, %8
  %10 = fadd <16 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <16 x float> %4, %10
  %12 = fadd <16 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <16 x float> %4, %12
  %14 = fadd <16 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = bitcast <16 x float> %14 to <8 x i64>
  %16 = and <8 x i64> %15, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = fsub <16 x float> %14, %17
  %19 = bitcast <16 x float> %4 to <8 x i64>
  %20 = and <8 x i64> %19, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <8 x i64> %20 to <16 x float>
  %22 = fsub <16 x float> %4, %21
  %23 = fmul <16 x float> %4, %14
  %24 = bitcast <16 x float> %23 to <8 x i64>
  %25 = xor <8 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = fmul <16 x float> %21, %17
  %28 = fadd <16 x float> %27, %26
  %29 = fmul <16 x float> %18, %21
  %30 = fadd <16 x float> %29, %28
  %31 = fmul <16 x float> %22, %17
  %32 = fadd <16 x float> %31, %30
  %33 = fmul <16 x float> %22, %18
  %34 = fadd <16 x float> %33, %32
  %35 = fadd <16 x float> %23, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %37 = fadd <16 x float> %23, %36
  %38 = fadd <16 x float> %37, %34
  %39 = fadd <16 x float> %35, %38
  %40 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %41 = shl <16 x i32> %40, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %42 = add <16 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = bitcast <16 x i32> %42 to <16 x float>
  %44 = fmul <16 x float> %39, %43
  %45 = sub <16 x i32> %3, %40
  %46 = shl <16 x i32> %45, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %47 = add <16 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <16 x i32> %47 to <16 x float>
  %49 = fmul <16 x float> %44, %48
  %50 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i32 29, i16 -1, i32 4) #7
  %51 = bitcast i16 %50 to <16 x i1>
  %52 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i32 17, i16 -1, i32 4) #7
  %53 = bitcast i16 %52 to <16 x i1>
  %54 = select <16 x i1> %51, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %49
  %55 = select <16 x i1> %53, <16 x float> zeroinitializer, <16 x float> %54
  ret <16 x float> %55
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_exp2f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %2
  %5 = fmul <16 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <16 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <16 x float> %4, %6
  %8 = fadd <16 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <16 x float> %4, %8
  %10 = fadd <16 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <16 x float> %4, %10
  %12 = fadd <16 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <16 x float> %4, %12
  %14 = fadd <16 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = fmul <16 x float> %4, %14
  %16 = fadd <16 x float> %15, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <16 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <16 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <16 x i32> %19 to <16 x float>
  %21 = fmul <16 x float> %16, %20
  %22 = sub <16 x i32> %3, %17
  %23 = shl <16 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <16 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <16 x i32> %24 to <16 x float>
  %26 = fmul <16 x float> %21, %25
  %27 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i32 29, i16 -1, i32 4) #7
  %28 = bitcast i16 %27 to <16 x i1>
  %29 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i32 17, i16 -1, i32 4) #7
  %30 = bitcast i16 %29 to <16 x i1>
  %31 = select <16 x i1> %28, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %26
  %32 = select <16 x i1> %30, <16 x float> zeroinitializer, <16 x float> %31
  ret <16 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_exp10f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2, i32 8, <16 x float> %2, i16 -1, i32 4) #7
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %10 = fadd <16 x float> %9, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %19 = fmul <16 x float> %8, %18
  %20 = fadd <16 x float> %19, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %21 = fsub <16 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %20
  %22 = fadd <16 x float> %19, %21
  %23 = fadd <16 x float> %22, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %24 = bitcast <16 x float> %20 to <8 x i64>
  %25 = and <8 x i64> %24, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = fsub <16 x float> %20, %26
  %28 = bitcast <16 x float> %8 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %8, %30
  %32 = fmul <16 x float> %8, %20
  %33 = bitcast <16 x float> %32 to <8 x i64>
  %34 = xor <8 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = fmul <16 x float> %30, %26
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %27, %30
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %31, %26
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %31, %27
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %8, %23
  %45 = fadd <16 x float> %44, %43
  %46 = fadd <16 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46
  %48 = fadd <16 x float> %32, %47
  %49 = fadd <16 x float> %48, %45
  %50 = fadd <16 x float> %46, %49
  %51 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %52 = shl <16 x i32> %51, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %53 = add <16 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <16 x i32> %53 to <16 x float>
  %55 = fmul <16 x float> %50, %54
  %56 = sub <16 x i32> %4, %51
  %57 = shl <16 x i32> %56, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %58 = add <16 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = bitcast <16 x i32> %58 to <16 x float>
  %60 = fmul <16 x float> %55, %59
  %61 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i32 30, i16 -1, i32 4) #7
  %62 = bitcast i16 %61 to <16 x i1>
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i32 17, i16 -1, i32 4) #7
  %64 = bitcast i16 %63 to <16 x i1>
  %65 = select <16 x i1> %62, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %60
  %66 = select <16 x i1> %64, <16 x float> zeroinitializer, <16 x float> %65
  ret <16 x float> %66
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_exp10f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2, i32 8, <16 x float> %2, i16 -1, i32 4) #7
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %10 = fadd <16 x float> %9, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %19 = fmul <16 x float> %8, %18
  %20 = fadd <16 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %22 = shl <16 x i32> %21, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %23 = add <16 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <16 x i32> %23 to <16 x float>
  %25 = fmul <16 x float> %20, %24
  %26 = sub <16 x i32> %4, %21
  %27 = shl <16 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <16 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <16 x i32> %28 to <16 x float>
  %30 = fmul <16 x float> %25, %29
  %31 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i32 30, i16 -1, i32 4) #7
  %32 = bitcast i16 %31 to <16 x i1>
  %33 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i32 17, i16 -1, i32 4) #7
  %34 = bitcast i16 %33 to <16 x i1>
  %35 = select <16 x i1> %32, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %30
  %36 = select <16 x i1> %34, <16 x float> zeroinitializer, <16 x float> %35
  ret <16 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_expm1f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, zeroinitializer
  %3 = fmul <16 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <16 x float> %6, %0
  %8 = fsub <16 x float> %7, %0
  %9 = fsub <16 x float> %7, %8
  %10 = fsub <16 x float> %0, %9
  %11 = fsub <16 x float> %6, %8
  %12 = fadd <16 x float> %11, %10
  %13 = fadd <16 x float> %12, zeroinitializer
  %14 = fmul <16 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <16 x float> %14, %7
  %16 = fsub <16 x float> %15, %7
  %17 = fsub <16 x float> %15, %16
  %18 = fsub <16 x float> %7, %17
  %19 = fsub <16 x float> %14, %16
  %20 = fadd <16 x float> %19, %18
  %21 = fadd <16 x float> %20, %13
  %22 = fmul <16 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <16 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <16 x float> %15, %23
  %25 = fadd <16 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <16 x float> %15, %25
  %27 = fadd <16 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <16 x float> %15 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %15, %30
  %32 = bitcast <16 x float> %27 to <8 x i64>
  %33 = and <8 x i64> %32, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <8 x i64> %33 to <16 x float>
  %35 = fsub <16 x float> %27, %34
  %36 = fmul <16 x float> %15, %27
  %37 = bitcast <16 x float> %36 to <8 x i64>
  %38 = xor <8 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fmul <16 x float> %30, %34
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %31, %34
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %35, %30
  %45 = fadd <16 x float> %44, %43
  %46 = fmul <16 x float> %31, %35
  %47 = fadd <16 x float> %46, %45
  %48 = fmul <16 x float> %21, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fadd <16 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <16 x float> %50, %36
  %52 = fsub <16 x float> %50, %51
  %53 = fsub <16 x float> %36, %52
  %54 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <16 x float> %54, %53
  %56 = fadd <16 x float> %55, %49
  %57 = bitcast <16 x float> %50 to <8 x i64>
  %58 = and <8 x i64> %57, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fsub <16 x float> %50, %59
  %61 = fmul <16 x float> %15, %50
  %62 = bitcast <16 x float> %61 to <8 x i64>
  %63 = xor <8 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <8 x i64> %63 to <16 x float>
  %65 = fmul <16 x float> %30, %59
  %66 = fadd <16 x float> %65, %64
  %67 = fmul <16 x float> %31, %59
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %60, %30
  %70 = fadd <16 x float> %69, %68
  %71 = fmul <16 x float> %31, %60
  %72 = fadd <16 x float> %71, %70
  %73 = fmul <16 x float> %15, %56
  %74 = fadd <16 x float> %72, %73
  %75 = fmul <16 x float> %21, %50
  %76 = fadd <16 x float> %75, %74
  %77 = fadd <16 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <16 x float> %77, %61
  %79 = fsub <16 x float> %77, %78
  %80 = fsub <16 x float> %61, %79
  %81 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <16 x float> %81, %80
  %83 = fadd <16 x float> %82, %76
  %84 = fmul <16 x float> %15, %15
  %85 = bitcast <16 x float> %84 to <8 x i64>
  %86 = xor <8 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <8 x i64> %86 to <16 x float>
  %88 = fmul <16 x float> %30, %30
  %89 = fadd <16 x float> %88, %87
  %90 = fadd <16 x float> %30, %30
  %91 = fmul <16 x float> %90, %31
  %92 = fadd <16 x float> %91, %89
  %93 = fmul <16 x float> %31, %31
  %94 = fadd <16 x float> %93, %92
  %95 = fadd <16 x float> %21, %21
  %96 = fmul <16 x float> %15, %95
  %97 = fadd <16 x float> %96, %94
  %98 = and <8 x i64> %85, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <8 x i64> %98 to <16 x float>
  %100 = fsub <16 x float> %84, %99
  %101 = bitcast <16 x float> %77 to <8 x i64>
  %102 = and <8 x i64> %101, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <8 x i64> %102 to <16 x float>
  %104 = fsub <16 x float> %77, %103
  %105 = fmul <16 x float> %84, %77
  %106 = bitcast <16 x float> %105 to <8 x i64>
  %107 = xor <8 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <8 x i64> %107 to <16 x float>
  %109 = fmul <16 x float> %99, %103
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %100, %103
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %104, %99
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %100, %104
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %84, %83
  %118 = fadd <16 x float> %116, %117
  %119 = fmul <16 x float> %97, %77
  %120 = fadd <16 x float> %119, %118
  %121 = fadd <16 x float> %15, %105
  %122 = fsub <16 x float> %121, %15
  %123 = fsub <16 x float> %121, %122
  %124 = fsub <16 x float> %15, %123
  %125 = fsub <16 x float> %105, %122
  %126 = fadd <16 x float> %125, %124
  %127 = fadd <16 x float> %21, %120
  %128 = fadd <16 x float> %126, %127
  %129 = fadd <16 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <16 x float> %121, %130
  %132 = fadd <16 x float> %131, %128
  %133 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %134 = shl <16 x i32> %133, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %135 = add <16 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <16 x i32> %135 to <16 x float>
  %137 = fmul <16 x float> %129, %136
  %138 = sub <16 x i32> %4, %133
  %139 = shl <16 x i32> %138, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %140 = add <16 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <16 x i32> %140 to <16 x float>
  %142 = fmul <16 x float> %137, %141
  %143 = fmul <16 x float> %132, %136
  %144 = fmul <16 x float> %143, %141
  %145 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %146 = bitcast i16 %145 to <16 x i1>
  %147 = select <16 x i1> %146, <16 x float> zeroinitializer, <16 x float> %142
  %148 = select <16 x i1> %146, <16 x float> zeroinitializer, <16 x float> %144
  %149 = fadd <16 x float> %147, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %150 = fsub <16 x float> %149, %147
  %151 = fsub <16 x float> %149, %150
  %152 = fsub <16 x float> %147, %151
  %153 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %150
  %154 = fadd <16 x float> %153, %152
  %155 = fadd <16 x float> %154, %148
  %156 = fadd <16 x float> %149, %155
  %157 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i32 30, i16 -1, i32 4) #7
  %158 = bitcast i16 %157 to <16 x i1>
  %159 = select <16 x i1> %158, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %156
  %160 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i32 17, i16 -1, i32 4) #7
  %161 = bitcast i16 %160 to <16 x i1>
  %162 = select <16 x i1> %161, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> %159
  %163 = bitcast <16 x float> %0 to <16 x i32>
  %164 = icmp eq <16 x i32> %163, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %165 = select <16 x i1> %164, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %162
  ret <16 x float> %165
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_log10f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fsub <16 x float> %8, %9
  %11 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %10
  %12 = fsub <16 x float> %7, %9
  %13 = fadd <16 x float> %12, %11
  %14 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = fadd <16 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = fsub <16 x float> %7, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %21 = bitcast <16 x float> %14 to <8 x i64>
  %22 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <8 x i64> %22 to <16 x float>
  %24 = fsub <16 x float> %14, %23
  %25 = bitcast <16 x float> %20 to <8 x i64>
  %26 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <8 x i64> %26 to <16 x float>
  %28 = fsub <16 x float> %20, %27
  %29 = bitcast <16 x float> %8 to <8 x i64>
  %30 = and <8 x i64> %29, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = fsub <16 x float> %8, %31
  %33 = fmul <16 x float> %8, %20
  %34 = fmul <16 x float> %23, %27
  %35 = fadd <16 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <16 x float> %28, %23
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %24, %27
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %24, %28
  %41 = fadd <16 x float> %40, %39
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = bitcast <16 x float> %33 to <8 x i64>
  %46 = xor <8 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fmul <16 x float> %31, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fmul <16 x float> %28, %31
  %51 = fadd <16 x float> %50, %49
  %52 = fmul <16 x float> %32, %27
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %32, %28
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %33, %44
  %57 = fadd <16 x float> %55, %56
  %58 = fmul <16 x float> %33, %19
  %59 = fsub <16 x float> %13, %58
  %60 = fmul <16 x float> %20, %59
  %61 = fadd <16 x float> %60, %57
  %62 = fmul <16 x float> %33, %33
  %63 = fmul <16 x float> %62, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %64 = fadd <16 x float> %63, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %65 = fmul <16 x float> %62, %64
  %66 = fadd <16 x float> %65, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %67 = bitcast <16 x float> %6 to <8 x i64>
  %68 = and <8 x i64> %67, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = fsub <16 x float> %6, %69
  %71 = fmul <16 x float> %6, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %72 = bitcast <16 x float> %71 to <8 x i64>
  %73 = xor <8 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <8 x i64> %73 to <16 x float>
  %75 = fmul <16 x float> %69, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %76 = fadd <16 x float> %75, %74
  %77 = fmul <16 x float> %69, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %78 = fadd <16 x float> %77, %76
  %79 = fmul <16 x float> %70, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %80 = fadd <16 x float> %79, %78
  %81 = fmul <16 x float> %70, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %6, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %84 = fadd <16 x float> %83, %82
  %85 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %86 = bitcast <8 x i64> %85 to <16 x float>
  %87 = fsub <16 x float> %33, %86
  %88 = fmul <16 x float> %33, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %89 = bitcast <16 x float> %88 to <8 x i64>
  %90 = xor <8 x i64> %89, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %91 = bitcast <8 x i64> %90 to <16 x float>
  %92 = fmul <16 x float> %86, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %93 = fadd <16 x float> %92, %91
  %94 = fmul <16 x float> %87, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %95 = fadd <16 x float> %94, %93
  %96 = fmul <16 x float> %86, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %97 = fadd <16 x float> %96, %95
  %98 = fmul <16 x float> %87, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %99 = fadd <16 x float> %98, %97
  %100 = fmul <16 x float> %33, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %101 = fadd <16 x float> %100, %99
  %102 = fmul <16 x float> %61, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %103 = fadd <16 x float> %101, %102
  %104 = fadd <16 x float> %71, %88
  %105 = fsub <16 x float> %71, %104
  %106 = fadd <16 x float> %88, %105
  %107 = fadd <16 x float> %106, %84
  %108 = fadd <16 x float> %107, %103
  %109 = fmul <16 x float> %33, %62
  %110 = fmul <16 x float> %109, %66
  %111 = fadd <16 x float> %104, %110
  %112 = fsub <16 x float> %104, %111
  %113 = fadd <16 x float> %110, %112
  %114 = fadd <16 x float> %113, %108
  %115 = fadd <16 x float> %111, %114
  %116 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %115, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4)
  ret <16 x float> %116
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_log2f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fsub <16 x float> %8, %9
  %11 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %10
  %12 = fsub <16 x float> %7, %9
  %13 = fadd <16 x float> %12, %11
  %14 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = fadd <16 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = fsub <16 x float> %7, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %21 = bitcast <16 x float> %14 to <8 x i64>
  %22 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <8 x i64> %22 to <16 x float>
  %24 = fsub <16 x float> %14, %23
  %25 = bitcast <16 x float> %20 to <8 x i64>
  %26 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <8 x i64> %26 to <16 x float>
  %28 = fsub <16 x float> %20, %27
  %29 = bitcast <16 x float> %8 to <8 x i64>
  %30 = and <8 x i64> %29, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = fsub <16 x float> %8, %31
  %33 = fmul <16 x float> %8, %20
  %34 = fmul <16 x float> %23, %27
  %35 = fadd <16 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <16 x float> %28, %23
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %24, %27
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %24, %28
  %41 = fadd <16 x float> %40, %39
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = bitcast <16 x float> %33 to <8 x i64>
  %46 = xor <8 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fmul <16 x float> %31, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fmul <16 x float> %28, %31
  %51 = fadd <16 x float> %50, %49
  %52 = fmul <16 x float> %32, %27
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %32, %28
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %33, %44
  %57 = fadd <16 x float> %55, %56
  %58 = fmul <16 x float> %33, %19
  %59 = fsub <16 x float> %13, %58
  %60 = fmul <16 x float> %20, %59
  %61 = fadd <16 x float> %60, %57
  %62 = fmul <16 x float> %33, %33
  %63 = fmul <16 x float> %62, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %64 = fadd <16 x float> %63, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %65 = fmul <16 x float> %62, %64
  %66 = fadd <16 x float> %65, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %67 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = fsub <16 x float> %33, %68
  %70 = fmul <16 x float> %33, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %71 = bitcast <16 x float> %70 to <8 x i64>
  %72 = xor <8 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x i64> %72 to <16 x float>
  %74 = fmul <16 x float> %68, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %69, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %77 = fadd <16 x float> %76, %75
  %78 = fmul <16 x float> %68, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %79 = fadd <16 x float> %78, %77
  %80 = fmul <16 x float> %69, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %81 = fadd <16 x float> %80, %79
  %82 = fmul <16 x float> %33, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %61, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %85 = fadd <16 x float> %83, %84
  %86 = fadd <16 x float> %6, %70
  %87 = fsub <16 x float> %86, %6
  %88 = fsub <16 x float> %86, %87
  %89 = fsub <16 x float> %6, %88
  %90 = fsub <16 x float> %70, %87
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %91, %85
  %93 = fmul <16 x float> %33, %62
  %94 = fmul <16 x float> %93, %66
  %95 = fadd <16 x float> %86, %94
  %96 = fsub <16 x float> %95, %86
  %97 = fsub <16 x float> %95, %96
  %98 = fsub <16 x float> %86, %97
  %99 = fsub <16 x float> %94, %96
  %100 = fadd <16 x float> %99, %98
  %101 = fadd <16 x float> %100, %92
  %102 = fadd <16 x float> %95, %101
  %103 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %102, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4)
  ret <16 x float> %103
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_log2f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fdiv <16 x float> %8, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %11, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %13 = fadd <16 x float> %12, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %16 = fmul <16 x float> %10, %11
  %17 = fmul <16 x float> %10, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %18 = fadd <16 x float> %6, %17
  %19 = fmul <16 x float> %16, %15
  %20 = fadd <16 x float> %18, %19
  %21 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %20, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4)
  ret <16 x float> %21
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_log1pf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fmul <16 x float> %2, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = select <16 x i1> %6, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %4
  %8 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %7, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %9 = shl <16 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %9
  %11 = bitcast <16 x i32> %10 to <16 x float>
  %12 = fadd <16 x float> %11, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = fmul <16 x float> %11, %0
  %14 = fadd <16 x float> %13, %12
  %15 = bitcast <16 x float> %7 to <8 x i64>
  %16 = and <8 x i64> %15, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = fsub <16 x float> %7, %17
  %19 = fmul <16 x float> %7, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %20 = bitcast <16 x float> %19 to <8 x i64>
  %21 = xor <8 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = fmul <16 x float> %17, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %24 = fadd <16 x float> %23, %22
  %25 = fmul <16 x float> %17, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %26 = fadd <16 x float> %25, %24
  %27 = fmul <16 x float> %18, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %28 = fadd <16 x float> %27, %26
  %29 = fmul <16 x float> %18, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %30 = fadd <16 x float> %29, %28
  %31 = fmul <16 x float> %7, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %14, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = fsub <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %33
  %35 = fadd <16 x float> %14, %34
  %36 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %33
  %37 = bitcast <16 x float> %33 to <8 x i64>
  %38 = and <8 x i64> %37, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %33, %39
  %41 = bitcast <16 x float> %36 to <8 x i64>
  %42 = and <8 x i64> %41, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = fsub <16 x float> %36, %43
  %45 = bitcast <16 x float> %14 to <8 x i64>
  %46 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fsub <16 x float> %14, %47
  %49 = fmul <16 x float> %14, %36
  %50 = fmul <16 x float> %39, %43
  %51 = fadd <16 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <16 x float> %44, %39
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %40, %43
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %40, %44
  %57 = fadd <16 x float> %56, %55
  %58 = bitcast <16 x float> %57 to <8 x i64>
  %59 = xor <8 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = bitcast <16 x float> %49 to <8 x i64>
  %62 = xor <8 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <8 x i64> %62 to <16 x float>
  %64 = fmul <16 x float> %47, %43
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %44, %47
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %48, %43
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %48, %44
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %49, %60
  %73 = fadd <16 x float> %71, %72
  %74 = fmul <16 x float> %49, %35
  %75 = fsub <16 x float> zeroinitializer, %74
  %76 = fmul <16 x float> %36, %75
  %77 = fadd <16 x float> %76, %73
  %78 = fmul <16 x float> %49, %49
  %79 = fmul <16 x float> %78, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %80 = fadd <16 x float> %79, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %81 = fmul <16 x float> %78, %80
  %82 = fadd <16 x float> %81, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %83 = fmul <16 x float> %49, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fmul <16 x float> %77, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %85 = fadd <16 x float> %19, %83
  %86 = fsub <16 x float> %19, %85
  %87 = fadd <16 x float> %83, %86
  %88 = fadd <16 x float> %32, %87
  %89 = fadd <16 x float> %88, %84
  %90 = fmul <16 x float> %49, %78
  %91 = fmul <16 x float> %90, %82
  %92 = fadd <16 x float> %85, %91
  %93 = fsub <16 x float> %85, %92
  %94 = fadd <16 x float> %91, %93
  %95 = fadd <16 x float> %94, %89
  %96 = fadd <16 x float> %92, %95
  %97 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i32 30, i16 -1, i32 4) #7
  %98 = bitcast i16 %97 to <16 x i1>
  %99 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> %0, i32 30, i16 -1, i32 4) #7
  %100 = bitcast i16 %99 to <16 x i1>
  %101 = select <16 x i1> %98, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %96
  %102 = select <16 x i1> %100, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %101
  %103 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %104 = bitcast i16 %103 to <16 x i1>
  %105 = select <16 x i1> %104, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <16 x float> %102
  %106 = bitcast <16 x float> %0 to <16 x i32>
  %107 = icmp eq <16 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = select <16 x i1> %107, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %105
  ret <16 x float> %108
}

; Function Attrs: norecurse nounwind readnone uwtable
define <16 x float> @Sleef_fabsf16_avx512fnofma(<16 x float>) local_unnamed_addr #2 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  ret <16 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <16 x float> @Sleef_copysignf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #2 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <16 x float> %1 to <8 x i64>
  %6 = and <8 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <8 x i64> %6, %4
  %8 = bitcast <8 x i64> %7 to <16 x float>
  ret <16 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fmaxf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %0, <16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = bitcast i16 %3 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> %0, <16 x float> %4
  ret <16 x float> %6
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fminf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %0, <16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = bitcast i16 %3 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> %0, <16 x float> %4
  ret <16 x float> %6
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fdimf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = fsub <16 x float> %0, %1
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %1, i32 0, i16 -1, i32 4) #7
  %6 = or i16 %5, %4
  %7 = bitcast i16 %6 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> zeroinitializer, <16 x float> %3
  ret <16 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_truncf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 11, <16 x float> %0, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_floorf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %0, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %3
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %6 = fadd <16 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %4
  %9 = bitcast <16 x float> %0 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %14 = or i16 %13, %12
  %15 = fsub <16 x float> %0, %8
  %16 = bitcast <16 x float> %15 to <8 x i64>
  %17 = and <8 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <8 x i64> %17, %18
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = bitcast i16 %14 to <16 x i1>
  %22 = select <16 x i1> %21, <16 x float> %0, <16 x float> %20
  ret <16 x float> %22
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_ceilf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %0, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %3
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i32 18, i16 -1, i32 4) #7
  %6 = fadd <16 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %4, <16 x float> %6
  %9 = bitcast <16 x float> %0 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %14 = or i16 %13, %12
  %15 = fsub <16 x float> %0, %8
  %16 = bitcast <16 x float> %15 to <8 x i64>
  %17 = and <8 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <8 x i64> %17, %18
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = bitcast i16 %14 to <16 x i1>
  %22 = select <16 x i1> %21, <16 x float> %0, <16 x float> %20
  ret <16 x float> %22
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_roundf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fsub <16 x float> %2, %4
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i32 18, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %8 = and i16 %7, %6
  %9 = fadd <16 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %10 = bitcast i16 %8 to <16 x i1>
  %11 = select <16 x i1> %10, <16 x float> %9, <16 x float> %2
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %13 = fadd <16 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = bitcast i16 %12 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x float> %13, <16 x float> %5
  %16 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>, i32 0, i16 -1, i32 4) #7
  %17 = bitcast i16 %16 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x float> zeroinitializer, <16 x float> %11
  %19 = bitcast <16 x float> %0 to <8 x i64>
  %20 = and <8 x i64> %19, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %21 = bitcast <8 x i64> %20 to <16 x float>
  %22 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %23 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %24 = or i16 %23, %22
  %25 = fsub <16 x float> %18, %15
  %26 = bitcast <16 x float> %25 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %28 = and <8 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = or <8 x i64> %27, %28
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = bitcast i16 %24 to <16 x i1>
  %32 = select <16 x i1> %31, <16 x float> %0, <16 x float> %30
  ret <16 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_rintf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fmaf16_avx512fnofma(<16 x float>, <16 x float>, <16 x float>) local_unnamed_addr #0 {
  %4 = fmul <16 x float> %0, %1
  %5 = fadd <16 x float> %4, %2
  %6 = bitcast <16 x float> %5 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %0
  %13 = fmul <16 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %1
  %15 = fmul <16 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %16 = select <16 x i1> %11, <16 x float> %15, <16 x float> %2
  %17 = select <16 x i1> %11, <16 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i32 30, i16 -1, i32 4) #7
  %19 = fmul <16 x float> %12, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %20 = bitcast i16 %18 to <16 x i1>
  %21 = select <16 x i1> %20, <16 x float> %19, <16 x float> %12
  %22 = fmul <16 x float> %14, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %23 = select <16 x i1> %20, <16 x float> %22, <16 x float> %14
  %24 = fmul <16 x float> %16, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %25 = select <16 x i1> %20, <16 x float> %24, <16 x float> %16
  %26 = select <16 x i1> %20, <16 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <16 x float> %17
  %27 = bitcast <16 x float> %21 to <8 x i64>
  %28 = and <8 x i64> %27, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <8 x i64> %28 to <16 x float>
  %30 = fsub <16 x float> %21, %29
  %31 = bitcast <16 x float> %23 to <8 x i64>
  %32 = and <8 x i64> %31, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <8 x i64> %32 to <16 x float>
  %34 = fsub <16 x float> %23, %33
  %35 = fmul <16 x float> %21, %23
  %36 = bitcast <16 x float> %35 to <8 x i64>
  %37 = xor <8 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <8 x i64> %37 to <16 x float>
  %39 = fmul <16 x float> %29, %33
  %40 = fadd <16 x float> %39, %38
  %41 = fmul <16 x float> %30, %33
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %34, %29
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %30, %34
  %46 = fadd <16 x float> %45, %44
  %47 = fadd <16 x float> %25, %35
  %48 = fsub <16 x float> %47, %35
  %49 = fsub <16 x float> %47, %48
  %50 = fsub <16 x float> %35, %49
  %51 = fsub <16 x float> %25, %48
  %52 = fadd <16 x float> %51, %50
  %53 = fadd <16 x float> %52, %46
  %54 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %55 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %56 = or i16 %55, %54
  %57 = fadd <16 x float> %47, %53
  %58 = bitcast i16 %56 to <16 x i1>
  %59 = select <16 x i1> %58, <16 x float> %25, <16 x float> %57
  %60 = bitcast <16 x float> %25 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %62, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %64 = and <8 x i64> %27, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %65, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %67 = bitcast i16 %66 to <16 x i1>
  %68 = bitcast i16 %63 to <16 x i1>
  %69 = xor <16 x i1> %67, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %70 = and <16 x i1> %69, %68
  %71 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> %21, i32 4, i16 -1, i32 4) #7
  %72 = bitcast i16 %71 to <16 x i1>
  %73 = xor <16 x i1> %72, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %74 = and <16 x i1> %70, %73
  %75 = and <8 x i64> %31, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %76 = bitcast <8 x i64> %75 to <16 x float>
  %77 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %76, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %78 = bitcast i16 %77 to <16 x i1>
  %79 = xor <16 x i1> %78, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %80 = and <16 x i1> %74, %79
  %81 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> %23, i32 4, i16 -1, i32 4) #7
  %82 = bitcast i16 %81 to <16 x i1>
  %83 = xor <16 x i1> %82, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %84 = and <16 x i1> %80, %83
  %85 = select <16 x i1> %84, <16 x float> %25, <16 x float> %5
  %86 = bitcast <16 x float> %85 to <8 x i64>
  %87 = and <8 x i64> %86, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %88 = bitcast <8 x i64> %87 to <16 x float>
  %89 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %88, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %90 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %85, <16 x float> %85, i32 4, i16 -1, i32 4) #7
  %91 = or i16 %90, %89
  %92 = fmul <16 x float> %26, %59
  %93 = bitcast i16 %91 to <16 x i1>
  %94 = select <16 x i1> %93, <16 x float> %85, <16 x float> %92
  ret <16 x float> %94
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sqrtf16_u05avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %3 = bitcast i16 %2 to <16 x i1>
  %4 = select <16 x i1> %3, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %0
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000, float 0x3B50000000000000>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %4, <float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000, float 0x4490000000000000>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %4
  %9 = select <16 x i1> %7, <16 x float> <float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000, float 0x3D90000000000000>, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %10 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000, float 0x43F0000000000000>, i32 30, i16 -1, i32 4) #7
  %11 = fmul <16 x float> %8, <float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000, float 0x3BF0000000000000>
  %12 = bitcast i16 %10 to <16 x i1>
  %13 = select <16 x i1> %12, <16 x float> %11, <16 x float> %8
  %14 = select <16 x i1> %12, <16 x float> <float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000>, <16 x float> %9
  %15 = fadd <16 x float> %13, <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>
  %16 = bitcast <16 x float> %15 to <16 x i32>
  %17 = lshr <16 x i32> %16, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = sub nsw <16 x i32> <i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174, i32 1597463174>, %17
  %19 = bitcast <16 x i32> %18 to <16 x float>
  %20 = fmul <16 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <16 x float> %20, %19
  %22 = fmul <16 x float> %21, %19
  %23 = fsub <16 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %22
  %24 = fmul <16 x float> %23, %19
  %25 = fmul <16 x float> %20, %24
  %26 = fmul <16 x float> %24, %25
  %27 = fsub <16 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %26
  %28 = fmul <16 x float> %24, %27
  %29 = fmul <16 x float> %20, %28
  %30 = fmul <16 x float> %28, %29
  %31 = fsub <16 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>, %30
  %32 = fmul <16 x float> %28, %31
  %33 = fmul <16 x float> %13, %32
  %34 = bitcast <16 x float> %33 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %33, %36
  %38 = fmul <16 x float> %33, %33
  %39 = bitcast <16 x float> %38 to <8 x i64>
  %40 = xor <8 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = fmul <16 x float> %36, %36
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %37, %36
  %45 = fadd <16 x float> %44, %43
  %46 = fadd <16 x float> %44, %45
  %47 = fmul <16 x float> %37, %37
  %48 = fadd <16 x float> %47, %46
  %49 = fadd <16 x float> %13, %38
  %50 = fsub <16 x float> %49, %13
  %51 = fsub <16 x float> %49, %50
  %52 = fsub <16 x float> %13, %51
  %53 = fsub <16 x float> %38, %50
  %54 = fadd <16 x float> %53, %52
  %55 = fadd <16 x float> %54, %48
  %56 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %33
  %57 = bitcast <16 x float> %56 to <8 x i64>
  %58 = and <8 x i64> %57, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fsub <16 x float> %56, %59
  %61 = fmul <16 x float> %36, %59
  %62 = fadd <16 x float> %61, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %63 = fmul <16 x float> %60, %36
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %37, %59
  %66 = fadd <16 x float> %65, %64
  %67 = fmul <16 x float> %37, %60
  %68 = fadd <16 x float> %67, %66
  %69 = xor <8 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %70 = bitcast <8 x i64> %69 to <16 x float>
  %71 = fmul <16 x float> %68, %70
  %72 = bitcast <16 x float> %49 to <8 x i64>
  %73 = and <8 x i64> %72, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %74 = bitcast <8 x i64> %73 to <16 x float>
  %75 = fsub <16 x float> %49, %74
  %76 = fmul <16 x float> %56, %49
  %77 = bitcast <16 x float> %76 to <8 x i64>
  %78 = xor <8 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %79 = bitcast <8 x i64> %78 to <16 x float>
  %80 = fmul <16 x float> %59, %74
  %81 = fadd <16 x float> %80, %79
  %82 = fmul <16 x float> %75, %59
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %60, %74
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %60, %75
  %87 = fadd <16 x float> %86, %85
  %88 = fmul <16 x float> %49, %71
  %89 = fadd <16 x float> %87, %88
  %90 = fmul <16 x float> %56, %55
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %76, %91
  %93 = fmul <16 x float> %14, %92
  %94 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %13, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %95 = bitcast i16 %94 to <16 x i1>
  %96 = select <16 x i1> %95, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %93
  %97 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %13, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %98 = bitcast i16 %97 to <16 x i1>
  %99 = select <16 x i1> %98, <16 x float> %13, <16 x float> %96
  ret <16 x float> %99
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sqrtf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_hypotf16_u05avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %10, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %12 = fmul <16 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = bitcast i16 %11 to <16 x i1>
  %14 = select <16 x i1> %13, <16 x float> %12, <16 x float> %9
  %15 = fmul <16 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %16 = select <16 x i1> %13, <16 x float> %15, <16 x float> %10
  %17 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = bitcast <16 x float> %16 to <8 x i64>
  %19 = and <8 x i64> %18, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = fsub <16 x float> %16, %20
  %22 = bitcast <16 x float> %17 to <8 x i64>
  %23 = and <8 x i64> %22, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <8 x i64> %23 to <16 x float>
  %25 = fsub <16 x float> %17, %24
  %26 = bitcast <16 x float> %14 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %14, %28
  %30 = fmul <16 x float> %14, %17
  %31 = fmul <16 x float> %20, %24
  %32 = fadd <16 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = fmul <16 x float> %25, %20
  %34 = fadd <16 x float> %33, %32
  %35 = fmul <16 x float> %21, %24
  %36 = fadd <16 x float> %35, %34
  %37 = fmul <16 x float> %21, %25
  %38 = fadd <16 x float> %37, %36
  %39 = bitcast <16 x float> %38 to <8 x i64>
  %40 = xor <8 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = bitcast <16 x float> %30 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fmul <16 x float> %28, %24
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %25, %28
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %29, %24
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %29, %25
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %30, %41
  %54 = fadd <16 x float> %52, %53
  %55 = fmul <16 x float> %30, zeroinitializer
  %56 = fsub <16 x float> zeroinitializer, %55
  %57 = fmul <16 x float> %17, %56
  %58 = fadd <16 x float> %57, %54
  %59 = and <8 x i64> %42, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = fsub <16 x float> %30, %60
  %62 = fmul <16 x float> %30, %30
  %63 = bitcast <16 x float> %62 to <8 x i64>
  %64 = xor <8 x i64> %63, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fmul <16 x float> %60, %60
  %67 = fadd <16 x float> %66, %65
  %68 = fadd <16 x float> %60, %60
  %69 = fmul <16 x float> %68, %61
  %70 = fadd <16 x float> %69, %67
  %71 = fmul <16 x float> %61, %61
  %72 = fadd <16 x float> %71, %70
  %73 = fadd <16 x float> %58, %58
  %74 = fmul <16 x float> %30, %73
  %75 = fadd <16 x float> %72, %74
  %76 = fadd <16 x float> %62, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %77 = fsub <16 x float> %76, %62
  %78 = fsub <16 x float> %76, %77
  %79 = fsub <16 x float> %62, %78
  %80 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %77
  %81 = fadd <16 x float> %80, %79
  %82 = fadd <16 x float> %81, %75
  %83 = fadd <16 x float> %76, %82
  %84 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %83, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %85 = bitcast <16 x float> %84 to <8 x i64>
  %86 = and <8 x i64> %85, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <8 x i64> %86 to <16 x float>
  %88 = fsub <16 x float> %84, %87
  %89 = fmul <16 x float> %84, %84
  %90 = bitcast <16 x float> %89 to <8 x i64>
  %91 = xor <8 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = fmul <16 x float> %87, %87
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %88, %87
  %96 = fadd <16 x float> %95, %94
  %97 = fadd <16 x float> %95, %96
  %98 = fmul <16 x float> %88, %88
  %99 = fadd <16 x float> %98, %97
  %100 = fadd <16 x float> %89, %76
  %101 = fsub <16 x float> %100, %76
  %102 = fsub <16 x float> %100, %101
  %103 = fsub <16 x float> %76, %102
  %104 = fsub <16 x float> %89, %101
  %105 = fadd <16 x float> %104, %103
  %106 = fadd <16 x float> %99, %82
  %107 = fadd <16 x float> %105, %106
  %108 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %84
  %109 = bitcast <16 x float> %108 to <8 x i64>
  %110 = and <8 x i64> %109, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fsub <16 x float> %108, %111
  %113 = fmul <16 x float> %87, %111
  %114 = fadd <16 x float> %113, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %115 = fmul <16 x float> %112, %87
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %88, %111
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %88, %112
  %120 = fadd <16 x float> %119, %118
  %121 = xor <8 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fmul <16 x float> %120, %122
  %124 = bitcast <16 x float> %100 to <8 x i64>
  %125 = and <8 x i64> %124, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = fsub <16 x float> %100, %126
  %128 = fmul <16 x float> %108, %100
  %129 = bitcast <16 x float> %128 to <8 x i64>
  %130 = xor <8 x i64> %129, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %131 = bitcast <8 x i64> %130 to <16 x float>
  %132 = fmul <16 x float> %111, %126
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %127, %111
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %112, %126
  %137 = fadd <16 x float> %136, %135
  %138 = fmul <16 x float> %112, %127
  %139 = fadd <16 x float> %138, %137
  %140 = fmul <16 x float> %100, %123
  %141 = fadd <16 x float> %140, %139
  %142 = fmul <16 x float> %108, %107
  %143 = fadd <16 x float> %141, %142
  %144 = fmul <16 x float> %128, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %145 = fmul <16 x float> %143, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %146 = bitcast <16 x float> %144 to <8 x i64>
  %147 = and <8 x i64> %146, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %148 = bitcast <8 x i64> %147 to <16 x float>
  %149 = fsub <16 x float> %144, %148
  %150 = bitcast <16 x float> %10 to <8 x i64>
  %151 = and <8 x i64> %150, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fsub <16 x float> %10, %152
  %154 = fmul <16 x float> %10, %144
  %155 = bitcast <16 x float> %154 to <8 x i64>
  %156 = xor <8 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %152, %148
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %149, %152
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %153, %148
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %153, %149
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %10, %145
  %167 = fadd <16 x float> %165, %166
  %168 = fadd <16 x float> %154, %167
  %169 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %168, <16 x float> %168, i32 4, i16 -1, i32 4) #7
  %170 = bitcast i16 %169 to <16 x i1>
  %171 = select <16 x i1> %170, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %168
  %172 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %173 = bitcast i16 %172 to <16 x i1>
  %174 = select <16 x i1> %173, <16 x float> %10, <16 x float> %171
  %175 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> %5, i32 4, i16 -1, i32 4) #7
  %176 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %177 = or i16 %176, %175
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = select <16 x i1> %178, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %174
  %180 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %181 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %182 = or i16 %181, %180
  %183 = bitcast i16 %182 to <16 x i1>
  %184 = select <16 x i1> %183, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %179
  ret <16 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_hypotf16_u35avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fdiv <16 x float> %9, %10
  %12 = fmul <16 x float> %11, %11
  %13 = fadd <16 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %13, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %15 = fmul <16 x float> %10, %14
  %16 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %17 = bitcast i16 %16 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x float> %10, <16 x float> %15
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> %5, i32 4, i16 -1, i32 4) #7
  %20 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %21 = or i16 %20, %19
  %22 = bitcast i16 %21 to <16 x i1>
  %23 = select <16 x i1> %22, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %18
  %24 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %25 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %26 = or i16 %25, %24
  %27 = bitcast i16 %26 to <16 x i1>
  %28 = select <16 x i1> %27, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %23
  ret <16 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_nextafterf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %4 = bitcast <16 x float> %1 to <8 x i64>
  %5 = and <8 x i64> %4, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %6 = bitcast <8 x i64> %5 to <16 x float>
  %7 = bitcast i16 %3 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %0
  %9 = bitcast <16 x float> %8 to <8 x i64>
  %10 = bitcast <16 x float> %8 to <16 x i32>
  %11 = icmp slt <16 x i32> %10, zeroinitializer
  %12 = bitcast <16 x i1> %11 to i16
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %8, i32 29, i16 -1, i32 4) #7
  %14 = xor i16 %13, %12
  %15 = xor <16 x i32> %10, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %16 = sub <16 x i32> zeroinitializer, %15
  %17 = bitcast i16 %14 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x i32> %16, <16 x i32> %10
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %20 = bitcast i16 %19 to <16 x i1>
  %21 = sext <16 x i1> %20 to <16 x i32>
  %22 = add <16 x i32> %18, %21
  %23 = xor <16 x i32> %22, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %24 = sub <16 x i32> zeroinitializer, %23
  %25 = select <16 x i1> %17, <16 x i32> %24, <16 x i32> %22
  %26 = bitcast <16 x i32> %25 to <16 x float>
  %27 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %26, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %28 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 4, i16 -1, i32 4) #7
  %29 = and i16 %28, %27
  %30 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = bitcast i16 %29 to <16 x i1>
  %33 = select <16 x i1> %32, <16 x float> %31, <16 x float> %26
  %34 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %35 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %36 = and i16 %35, %34
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> %1, <16 x float> %33
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %40 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %41 = or i16 %40, %39
  %42 = bitcast i16 %41 to <16 x i1>
  %43 = select <16 x i1> %42, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %38
  ret <16 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_frfrexpf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %0
  %9 = bitcast <16 x float> %8 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %11 = or <8 x i64> %10, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %12 = bitcast <8 x i64> %11 to <16 x float>
  %13 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %16 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <8 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <8 x i64> %17 to <16 x float>
  %19 = bitcast i16 %15 to <16 x i1>
  %20 = select <16 x i1> %19, <16 x float> %18, <16 x float> %12
  %21 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %22 = bitcast i16 %21 to <16 x i1>
  %23 = select <16 x i1> %22, <16 x float> %8, <16 x float> %20
  ret <16 x float> %23
}

; Function Attrs: norecurse nounwind readnone uwtable
define <8 x i64> @Sleef_expfrexpf16_avx512fnofma(<16 x float>) local_unnamed_addr #2 {
  ret <8 x i64> zeroinitializer
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_fmodf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %5
  %13 = fmul <16 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %8
  %15 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %16 = bitcast <16 x float> %15 to <16 x i32>
  %17 = add <16 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %18 = bitcast <16 x i32> %17 to <16 x float>
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %15, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %20 = bitcast i16 %19 to <16 x i1>
  %21 = select <16 x i1> %20, <16 x float> zeroinitializer, <16 x float> %18
  %22 = fmul <16 x float> %14, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %23 = fmul <16 x float> %14, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %24 = bitcast <16 x float> %14 to <8 x i64>
  %25 = xor <8 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %26, %28
  br label %30

; <label>:30:                                     ; preds = %30, %2
  %31 = phi i32 [ 0, %2 ], [ %81, %30 ]
  %32 = phi <16 x float> [ zeroinitializer, %2 ], [ %78, %30 ]
  %33 = phi <16 x float> [ %12, %2 ], [ %76, %30 ]
  %34 = bitcast <16 x float> %33 to <16 x i32>
  %35 = add <16 x i32> %34, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %36 = bitcast <16 x i32> %35 to <16 x float>
  %37 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %33, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %38 = bitcast i16 %37 to <16 x i1>
  %39 = select <16 x i1> %38, <16 x float> zeroinitializer, <16 x float> %36
  %40 = fmul <16 x float> %21, %39
  %41 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %40, i32 11, <16 x float> %40, i16 -1, i32 4) #7
  %42 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %22, <16 x float> %33, i32 30, i16 -1, i32 4) #7
  %43 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %33, <16 x float> %14, i32 29, i16 -1, i32 4) #7
  %44 = and i16 %43, %42
  %45 = bitcast i16 %44 to <16 x i1>
  %46 = select <16 x i1> %45, <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <16 x float> %41
  %47 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> %33, i32 30, i16 -1, i32 4) #7
  %48 = and i16 %47, %43
  %49 = bitcast i16 %48 to <16 x i1>
  %50 = select <16 x i1> %49, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %46
  %51 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %50, i32 11, <16 x float> %50, i16 -1, i32 4) #7
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = and <8 x i64> %52, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fsub <16 x float> %51, %54
  %56 = fmul <16 x float> %51, %26
  %57 = bitcast <16 x float> %56 to <8 x i64>
  %58 = xor <8 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fmul <16 x float> %28, %54
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %55, %28
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %29, %54
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %29, %55
  %67 = fadd <16 x float> %66, %65
  %68 = fadd <16 x float> %33, %56
  %69 = fsub <16 x float> %68, %33
  %70 = fsub <16 x float> %68, %69
  %71 = fsub <16 x float> %33, %70
  %72 = fsub <16 x float> %56, %69
  %73 = fadd <16 x float> %72, %71
  %74 = fadd <16 x float> %32, %67
  %75 = fadd <16 x float> %73, %74
  %76 = fadd <16 x float> %68, %75
  %77 = fsub <16 x float> %68, %76
  %78 = fadd <16 x float> %75, %77
  %79 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %76, <16 x float> %14, i32 17, i16 -1, i32 4) #7
  %80 = icmp ne i16 %79, -1
  %81 = add nuw nsw i32 %31, 1
  %82 = icmp ult i32 %81, 8
  %83 = and i1 %80, %82
  br i1 %83, label %30, label %84

; <label>:84:                                     ; preds = %30
  %85 = select <16 x i1> %11, <16 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fadd <16 x float> %76, %78
  %87 = fmul <16 x float> %85, %86
  %88 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %86, <16 x float> %14, i32 0, i16 -1, i32 4) #7
  %89 = bitcast i16 %88 to <16 x i1>
  %90 = select <16 x i1> %89, <16 x float> zeroinitializer, <16 x float> %87
  %91 = bitcast <16 x float> %90 to <8 x i64>
  %92 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = xor <8 x i64> %92, %91
  %94 = bitcast <8 x i64> %93 to <16 x float>
  %95 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %12, <16 x float> %14, i32 17, i16 -1, i32 4) #7
  %96 = bitcast i16 %95 to <16 x i1>
  %97 = select <16 x i1> %96, <16 x float> %0, <16 x float> %94
  %98 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %99 = bitcast i16 %98 to <16 x i1>
  %100 = select <16 x i1> %99, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %97
  ret <16 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_remainderf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %5
  %13 = fmul <16 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %8
  %15 = select <16 x i1> %11, <16 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %17 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> zeroinitializer, <16 x float> zeroinitializer, i32 4, i16 -1, i32 4) #7
  %18 = fmul <16 x float> %14, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = fmul <16 x float> %14, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = bitcast <16 x float> %14 to <8 x i64>
  %21 = xor <8 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <8 x i64> %23 to <16 x float>
  %25 = fsub <16 x float> %22, %24
  br label %26

; <label>:26:                                     ; preds = %2, %51
  %27 = phi i32 [ 0, %2 ], [ %99, %51 ]
  %28 = phi i16 [ %17, %2 ], [ %72, %51 ]
  %29 = phi <16 x float> [ zeroinitializer, %2 ], [ %98, %51 ]
  %30 = phi <16 x float> [ %12, %2 ], [ %96, %51 ]
  %31 = fmul <16 x float> %16, %30
  %32 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %31, i32 8, <16 x float> %31, i16 -1, i32 4) #7
  %33 = bitcast <16 x float> %30 to <8 x i64>
  %34 = and <8 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %18, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %32
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %19, i32 17, i16 -1, i32 4) #7
  %40 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %19, i32 0, i16 -1, i32 4) #7
  %41 = bitcast i16 %28 to <16 x i1>
  %42 = bitcast i16 %40 to <16 x i1>
  %43 = xor <16 x i1> %41, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %44 = and <16 x i1> %42, %43
  %45 = bitcast <16 x i1> %44 to i16
  %46 = or i16 %39, %45
  %47 = bitcast i16 %46 to <16 x i1>
  %48 = select <16 x i1> %47, <16 x float> zeroinitializer, <16 x float> %38
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %48, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %50 = icmp eq i16 %49, -1
  br i1 %50, label %101, label %51

; <label>:51:                                     ; preds = %26
  %52 = fmul <16 x float> %48, %22
  %53 = bitcast <16 x float> %52 to <8 x i64>
  %54 = and <8 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <8 x i64> %54 to <16 x float>
  %56 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %55, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %57 = and <8 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = xor <8 x i64> %57, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fadd <16 x float> %48, %59
  %61 = bitcast i16 %56 to <16 x i1>
  %62 = select <16 x i1> %61, <16 x float> %60, <16 x float> %48
  %63 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %62, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %64 = and <16 x i32> %63, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %65 = icmp ne <16 x i32> %64, zeroinitializer
  %66 = bitcast <16 x i1> %65 to i16
  %67 = bitcast <16 x float> %62 to <8 x i64>
  %68 = and <8 x i64> %67, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %69, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 17, i16 -1, i32 4) #7
  %71 = and i16 %70, %66
  %72 = xor i16 %71, %28
  %73 = and <8 x i64> %67, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %74 = bitcast <8 x i64> %73 to <16 x float>
  %75 = fsub <16 x float> %62, %74
  %76 = fmul <16 x float> %62, %22
  %77 = bitcast <16 x float> %76 to <8 x i64>
  %78 = xor <8 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %79 = bitcast <8 x i64> %78 to <16 x float>
  %80 = fmul <16 x float> %24, %74
  %81 = fadd <16 x float> %80, %79
  %82 = fmul <16 x float> %75, %24
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %25, %74
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %25, %75
  %87 = fadd <16 x float> %86, %85
  %88 = fadd <16 x float> %30, %76
  %89 = fsub <16 x float> %88, %30
  %90 = fsub <16 x float> %88, %89
  %91 = fsub <16 x float> %30, %90
  %92 = fsub <16 x float> %76, %89
  %93 = fadd <16 x float> %92, %91
  %94 = fadd <16 x float> %29, %87
  %95 = fadd <16 x float> %93, %94
  %96 = fadd <16 x float> %88, %95
  %97 = fsub <16 x float> %88, %96
  %98 = fadd <16 x float> %95, %97
  %99 = add nuw nsw i32 %27, 1
  %100 = icmp ult i32 %99, 8
  br i1 %100, label %26, label %101

; <label>:101:                                    ; preds = %26, %51
  %102 = phi <16 x float> [ %30, %26 ], [ %96, %51 ]
  %103 = phi <16 x float> [ %29, %26 ], [ %98, %51 ]
  %104 = fadd <16 x float> %102, %103
  %105 = fmul <16 x float> %15, %104
  %106 = bitcast <16 x float> %105 to <8 x i64>
  %107 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = xor <8 x i64> %107, %106
  %109 = bitcast <8 x i64> %108 to <16 x float>
  %110 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %111 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %112 = bitcast i16 %111 to <16 x i1>
  %113 = select <16 x i1> %112, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %0
  %114 = bitcast i16 %110 to <16 x i1>
  %115 = select <16 x i1> %114, <16 x float> %113, <16 x float> %109
  %116 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %117 = bitcast i16 %116 to <16 x i1>
  %118 = select <16 x i1> %117, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %115
  ret <16 x float> %118
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_sinpif16_u05avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = lshr <16 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <16 x i32> %5, %3
  %7 = and <16 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <16 x i32> %7, zeroinitializer
  %9 = and <16 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fsub <16 x float> %2, %10
  %12 = fmul <16 x float> %11, %11
  %13 = bitcast <16 x float> %11 to <8 x i64>
  %14 = and <8 x i64> %13, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fsub <16 x float> %11, %15
  %17 = bitcast <16 x float> %12 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %15, %15
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %16, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %16, %16
  %26 = fadd <16 x float> %25, %24
  %27 = select <16 x i1> %8, <16 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <16 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %28 = select <16 x i1> %8, <16 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <16 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %29 = fmul <16 x float> %12, %27
  %30 = fadd <16 x float> %28, %29
  %31 = select <16 x i1> %8, <16 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <16 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %32 = fmul <16 x float> %12, %30
  %33 = fadd <16 x float> %31, %32
  %34 = fmul <16 x float> %12, %33
  %35 = select <16 x i1> %8, <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %36 = select <16 x i1> %8, <16 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <16 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %37 = fadd <16 x float> %35, %34
  %38 = fsub <16 x float> %37, %34
  %39 = fsub <16 x float> %37, %38
  %40 = fsub <16 x float> %34, %39
  %41 = fsub <16 x float> %35, %38
  %42 = fadd <16 x float> %41, %40
  %43 = fadd <16 x float> %36, %42
  %44 = and <8 x i64> %17, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %12, %45
  %47 = bitcast <16 x float> %37 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %37, %49
  %51 = fmul <16 x float> %12, %37
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = xor <8 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fmul <16 x float> %45, %49
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %46, %49
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %50, %45
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %46, %50
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %12, %43
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %26, %37
  %66 = fadd <16 x float> %65, %64
  %67 = select <16 x i1> %8, <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %68 = select <16 x i1> %8, <16 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <16 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %69 = fadd <16 x float> %67, %51
  %70 = fsub <16 x float> %69, %51
  %71 = fsub <16 x float> %69, %70
  %72 = fsub <16 x float> %51, %71
  %73 = fsub <16 x float> %67, %70
  %74 = fadd <16 x float> %73, %72
  %75 = fadd <16 x float> %68, %66
  %76 = fadd <16 x float> %74, %75
  %77 = select <16 x i1> %8, <16 x float> %12, <16 x float> %11
  %78 = select <16 x i1> %8, <16 x float> %26, <16 x float> zeroinitializer
  %79 = bitcast <16 x float> %69 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %69, %81
  %83 = bitcast <16 x float> %77 to <8 x i64>
  %84 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fsub <16 x float> %77, %85
  %87 = fmul <16 x float> %77, %69
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %85, %81
  %92 = fadd <16 x float> %91, %90
  %93 = fmul <16 x float> %82, %85
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %86, %81
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %86, %82
  %98 = fadd <16 x float> %97, %96
  %99 = fmul <16 x float> %78, %69
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %77, %76
  %102 = fadd <16 x float> %100, %101
  %103 = fadd <16 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %104 = fsub <16 x float> %103, %87
  %105 = fsub <16 x float> %103, %104
  %106 = fsub <16 x float> %87, %105
  %107 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %104
  %108 = fadd <16 x float> %107, %106
  %109 = fadd <16 x float> %108, %102
  %110 = select <16 x i1> %8, <16 x float> %103, <16 x float> %87
  %111 = select <16 x i1> %8, <16 x float> %109, <16 x float> %102
  %112 = shl <16 x i32> %6, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %113 = bitcast <16 x i32> %112 to <8 x i64>
  %114 = and <8 x i64> %113, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %115 = bitcast <16 x float> %110 to <8 x i64>
  %116 = xor <8 x i64> %114, %115
  %117 = bitcast <16 x float> %111 to <8 x i64>
  %118 = xor <8 x i64> %114, %117
  %119 = bitcast <8 x i64> %116 to <16 x float>
  %120 = bitcast <8 x i64> %118 to <16 x float>
  %121 = fadd <16 x float> %119, %120
  %122 = bitcast <16 x float> %0 to <16 x i32>
  %123 = icmp eq <16 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = bitcast <16 x float> %0 to <8 x i64>
  %125 = and <8 x i64> %124, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %126, <16 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i32 30, i16 -1, i32 4) #7
  %128 = bitcast i16 %127 to <16 x i1>
  %129 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %126, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %130 = bitcast i16 %129 to <16 x i1>
  %131 = select <16 x i1> %123, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %121
  %132 = select <16 x i1> %128, <16 x float> zeroinitializer, <16 x float> %131
  %133 = select <16 x i1> %130, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %132
  ret <16 x float> %133
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cospif16_u05avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = lshr <16 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <16 x i32> %5, %3
  %7 = and <16 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <16 x i32> %7, zeroinitializer
  %9 = and <16 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fsub <16 x float> %2, %10
  %12 = fmul <16 x float> %11, %11
  %13 = bitcast <16 x float> %11 to <8 x i64>
  %14 = and <8 x i64> %13, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fsub <16 x float> %11, %15
  %17 = bitcast <16 x float> %12 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %15, %15
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %16, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %16, %16
  %26 = fadd <16 x float> %25, %24
  %27 = select <16 x i1> %8, <16 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <16 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %28 = select <16 x i1> %8, <16 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <16 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %29 = fmul <16 x float> %12, %27
  %30 = fadd <16 x float> %28, %29
  %31 = select <16 x i1> %8, <16 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <16 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %32 = fmul <16 x float> %12, %30
  %33 = fadd <16 x float> %31, %32
  %34 = fmul <16 x float> %12, %33
  %35 = select <16 x i1> %8, <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %36 = select <16 x i1> %8, <16 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <16 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %37 = fadd <16 x float> %35, %34
  %38 = fsub <16 x float> %37, %34
  %39 = fsub <16 x float> %37, %38
  %40 = fsub <16 x float> %34, %39
  %41 = fsub <16 x float> %35, %38
  %42 = fadd <16 x float> %41, %40
  %43 = fadd <16 x float> %36, %42
  %44 = and <8 x i64> %17, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %12, %45
  %47 = bitcast <16 x float> %37 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %37, %49
  %51 = fmul <16 x float> %12, %37
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = xor <8 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fmul <16 x float> %45, %49
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %46, %49
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %50, %45
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %46, %50
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %12, %43
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %26, %37
  %66 = fadd <16 x float> %65, %64
  %67 = select <16 x i1> %8, <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %68 = select <16 x i1> %8, <16 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <16 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %69 = fadd <16 x float> %67, %51
  %70 = fsub <16 x float> %69, %51
  %71 = fsub <16 x float> %69, %70
  %72 = fsub <16 x float> %51, %71
  %73 = fsub <16 x float> %67, %70
  %74 = fadd <16 x float> %73, %72
  %75 = fadd <16 x float> %68, %66
  %76 = fadd <16 x float> %74, %75
  %77 = select <16 x i1> %8, <16 x float> %12, <16 x float> %11
  %78 = select <16 x i1> %8, <16 x float> %26, <16 x float> zeroinitializer
  %79 = bitcast <16 x float> %69 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %69, %81
  %83 = bitcast <16 x float> %77 to <8 x i64>
  %84 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fsub <16 x float> %77, %85
  %87 = fmul <16 x float> %77, %69
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %85, %81
  %92 = fadd <16 x float> %91, %90
  %93 = fmul <16 x float> %82, %85
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %86, %81
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %86, %82
  %98 = fadd <16 x float> %97, %96
  %99 = fmul <16 x float> %78, %69
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %77, %76
  %102 = fadd <16 x float> %100, %101
  %103 = fadd <16 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %104 = fsub <16 x float> %103, %87
  %105 = fsub <16 x float> %103, %104
  %106 = fsub <16 x float> %87, %105
  %107 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %104
  %108 = fadd <16 x float> %107, %106
  %109 = fadd <16 x float> %108, %102
  %110 = select <16 x i1> %8, <16 x float> %103, <16 x float> %87
  %111 = select <16 x i1> %8, <16 x float> %109, <16 x float> %102
  %112 = shl <16 x i32> %9, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %113 = add <16 x i32> %112, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %114 = bitcast <16 x i32> %113 to <8 x i64>
  %115 = and <8 x i64> %114, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <16 x float> %110 to <8 x i64>
  %117 = xor <8 x i64> %115, %116
  %118 = bitcast <16 x float> %111 to <8 x i64>
  %119 = xor <8 x i64> %115, %118
  %120 = bitcast <8 x i64> %117 to <16 x float>
  %121 = bitcast <8 x i64> %119 to <16 x float>
  %122 = fadd <16 x float> %120, %121
  %123 = bitcast <16 x float> %0 to <8 x i64>
  %124 = and <8 x i64> %123, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %125 = bitcast <8 x i64> %124 to <16 x float>
  %126 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %125, <16 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i32 30, i16 -1, i32 4) #7
  %127 = bitcast i16 %126 to <16 x i1>
  %128 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %125, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %129 = bitcast i16 %128 to <16 x i1>
  %130 = select <16 x i1> %127, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %122
  %131 = select <16 x i1> %129, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %130
  ret <16 x float> %131
}

; Function Attrs: nounwind uwtable
define <16 x float> @Sleef_tgammaf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 64
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <16 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %5 = load <16 x float>, <16 x float>* %4, align 64
  %6 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %7 = load <16 x float>, <16 x float>* %6, align 64
  %8 = fadd <16 x float> %5, %7
  %9 = fmul <16 x float> %8, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %10 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %9, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = fmul <16 x float> %11, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %13 = fadd <16 x float> %5, %12
  %14 = fsub <16 x float> %13, %5
  %15 = fsub <16 x float> %13, %14
  %16 = fsub <16 x float> %5, %15
  %17 = fsub <16 x float> %12, %14
  %18 = fadd <16 x float> %17, %16
  %19 = fadd <16 x float> %7, %18
  %20 = fmul <16 x float> %11, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %21 = fadd <16 x float> %20, %13
  %22 = fsub <16 x float> %21, %13
  %23 = fsub <16 x float> %21, %22
  %24 = fsub <16 x float> %13, %23
  %25 = fsub <16 x float> %20, %22
  %26 = fadd <16 x float> %25, %24
  %27 = fadd <16 x float> %26, %19
  %28 = fmul <16 x float> %21, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %29 = fadd <16 x float> %28, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %30 = fmul <16 x float> %21, %29
  %31 = fadd <16 x float> %30, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %32 = fmul <16 x float> %21, %31
  %33 = fadd <16 x float> %32, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %34 = bitcast <16 x float> %21 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %21, %36
  %38 = bitcast <16 x float> %33 to <8 x i64>
  %39 = and <8 x i64> %38, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %40 = bitcast <8 x i64> %39 to <16 x float>
  %41 = fsub <16 x float> %33, %40
  %42 = fmul <16 x float> %21, %33
  %43 = bitcast <16 x float> %42 to <8 x i64>
  %44 = xor <8 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fmul <16 x float> %36, %40
  %47 = fadd <16 x float> %46, %45
  %48 = fmul <16 x float> %37, %40
  %49 = fadd <16 x float> %48, %47
  %50 = fmul <16 x float> %41, %36
  %51 = fadd <16 x float> %50, %49
  %52 = fmul <16 x float> %37, %41
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %27, %33
  %55 = fadd <16 x float> %54, %53
  %56 = fadd <16 x float> %42, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %57 = fsub <16 x float> %56, %42
  %58 = fsub <16 x float> %56, %57
  %59 = fsub <16 x float> %42, %58
  %60 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %57
  %61 = fadd <16 x float> %60, %59
  %62 = fadd <16 x float> %61, %55
  %63 = bitcast <16 x float> %56 to <8 x i64>
  %64 = and <8 x i64> %63, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fsub <16 x float> %56, %65
  %67 = fmul <16 x float> %21, %56
  %68 = bitcast <16 x float> %67 to <8 x i64>
  %69 = xor <8 x i64> %68, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %70 = bitcast <8 x i64> %69 to <16 x float>
  %71 = fmul <16 x float> %36, %65
  %72 = fadd <16 x float> %71, %70
  %73 = fmul <16 x float> %37, %65
  %74 = fadd <16 x float> %73, %72
  %75 = fmul <16 x float> %66, %36
  %76 = fadd <16 x float> %75, %74
  %77 = fmul <16 x float> %37, %66
  %78 = fadd <16 x float> %77, %76
  %79 = fmul <16 x float> %21, %62
  %80 = fadd <16 x float> %78, %79
  %81 = fmul <16 x float> %27, %56
  %82 = fadd <16 x float> %81, %80
  %83 = fadd <16 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %84 = fsub <16 x float> %83, %67
  %85 = fsub <16 x float> %83, %84
  %86 = fsub <16 x float> %67, %85
  %87 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %84
  %88 = fadd <16 x float> %87, %86
  %89 = fadd <16 x float> %88, %82
  %90 = fmul <16 x float> %21, %21
  %91 = bitcast <16 x float> %90 to <8 x i64>
  %92 = xor <8 x i64> %91, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = bitcast <8 x i64> %92 to <16 x float>
  %94 = fmul <16 x float> %36, %36
  %95 = fadd <16 x float> %94, %93
  %96 = fadd <16 x float> %36, %36
  %97 = fmul <16 x float> %96, %37
  %98 = fadd <16 x float> %97, %95
  %99 = fmul <16 x float> %37, %37
  %100 = fadd <16 x float> %99, %98
  %101 = fadd <16 x float> %27, %27
  %102 = fmul <16 x float> %21, %101
  %103 = fadd <16 x float> %102, %100
  %104 = and <8 x i64> %91, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <8 x i64> %104 to <16 x float>
  %106 = fsub <16 x float> %90, %105
  %107 = bitcast <16 x float> %83 to <8 x i64>
  %108 = and <8 x i64> %107, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %109 = bitcast <8 x i64> %108 to <16 x float>
  %110 = fsub <16 x float> %83, %109
  %111 = fmul <16 x float> %90, %83
  %112 = bitcast <16 x float> %111 to <8 x i64>
  %113 = xor <8 x i64> %112, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %114 = bitcast <8 x i64> %113 to <16 x float>
  %115 = fmul <16 x float> %105, %109
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %106, %109
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %110, %105
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %106, %110
  %122 = fadd <16 x float> %121, %120
  %123 = fmul <16 x float> %90, %89
  %124 = fadd <16 x float> %122, %123
  %125 = fmul <16 x float> %103, %83
  %126 = fadd <16 x float> %125, %124
  %127 = fadd <16 x float> %21, %111
  %128 = fsub <16 x float> %127, %21
  %129 = fsub <16 x float> %127, %128
  %130 = fsub <16 x float> %21, %129
  %131 = fsub <16 x float> %111, %128
  %132 = fadd <16 x float> %131, %130
  %133 = fadd <16 x float> %27, %126
  %134 = fadd <16 x float> %132, %133
  %135 = fadd <16 x float> %127, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %136 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %135
  %137 = fadd <16 x float> %127, %136
  %138 = fadd <16 x float> %137, %134
  %139 = ashr <16 x i32> %10, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %140 = shl <16 x i32> %139, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %141 = add <16 x i32> %140, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %142 = bitcast <16 x i32> %141 to <16 x float>
  %143 = fmul <16 x float> %135, %142
  %144 = sub <16 x i32> %10, %139
  %145 = shl <16 x i32> %144, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %146 = add <16 x i32> %145, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %147 = bitcast <16 x i32> %146 to <16 x float>
  %148 = fmul <16 x float> %143, %147
  %149 = fmul <16 x float> %138, %142
  %150 = fmul <16 x float> %149, %147
  %151 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %152 = bitcast i16 %151 to <16 x i1>
  %153 = select <16 x i1> %152, <16 x float> zeroinitializer, <16 x float> %148
  %154 = select <16 x i1> %152, <16 x float> zeroinitializer, <16 x float> %150
  %155 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 0
  %156 = load <16 x float>, <16 x float>* %155, align 64
  %157 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %158 = load <16 x float>, <16 x float>* %157, align 64
  %159 = bitcast <16 x float> %153 to <8 x i64>
  %160 = and <8 x i64> %159, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %161 = bitcast <8 x i64> %160 to <16 x float>
  %162 = fsub <16 x float> %153, %161
  %163 = bitcast <16 x float> %156 to <8 x i64>
  %164 = and <8 x i64> %163, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %165 = bitcast <8 x i64> %164 to <16 x float>
  %166 = fsub <16 x float> %156, %165
  %167 = fmul <16 x float> %156, %153
  %168 = bitcast <16 x float> %167 to <8 x i64>
  %169 = xor <8 x i64> %168, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = fmul <16 x float> %165, %161
  %172 = fadd <16 x float> %171, %170
  %173 = fmul <16 x float> %162, %165
  %174 = fadd <16 x float> %173, %172
  %175 = fmul <16 x float> %166, %161
  %176 = fadd <16 x float> %175, %174
  %177 = fmul <16 x float> %166, %162
  %178 = fadd <16 x float> %177, %176
  %179 = fmul <16 x float> %158, %153
  %180 = fadd <16 x float> %179, %178
  %181 = fmul <16 x float> %156, %154
  %182 = fadd <16 x float> %180, %181
  %183 = fadd <16 x float> %167, %182
  %184 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, i32 0, i16 -1, i32 4) #7
  %185 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %186 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 11, <16 x float> %0, i16 -1, i32 4) #7
  %187 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %186, <16 x float> %0, i32 0, i16 -1, i32 4) #7
  %188 = and i16 %187, %185
  %189 = or i16 %188, %184
  %190 = bitcast <16 x float> %0 to <8 x i64>
  %191 = and <8 x i64> %190, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %192 = bitcast <8 x i64> %191 to <16 x float>
  %193 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %192, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %194 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %195 = or i16 %194, %193
  %196 = xor i16 %195, -1
  %197 = and i16 %185, %196
  %198 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %183, <16 x float> %183, i32 4, i16 -1, i32 4) #7
  %199 = and i16 %197, %198
  %200 = or i16 %189, %199
  %201 = bitcast i16 %200 to <16 x i1>
  %202 = select <16 x i1> %201, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %183
  %203 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %204 = or i16 %203, %196
  %205 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000, float 0xB810000000000000>, i32 29, i16 -1, i32 4) #7
  %206 = and i16 %205, %204
  %207 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %208 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01, float 3.600000e+01>, i32 30, i16 -1, i32 4) #7
  %209 = or i16 %208, %207
  %210 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %202, <16 x float> %202, i32 4, i16 -1, i32 4) #7
  %211 = or i16 %209, %210
  %212 = and i16 %206, %211
  %213 = and <8 x i64> %190, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %214 = or <8 x i64> %213, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %215 = bitcast <8 x i64> %214 to <16 x float>
  %216 = bitcast i16 %212 to <16 x i1>
  %217 = select <16 x i1> %216, <16 x float> %215, <16 x float> %202
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3) #7
  ret <16 x float> %217
}

; Function Attrs: nounwind uwtable
define internal fastcc void @gammafk(%struct.df2* noalias nocapture, <16 x float>) unnamed_addr #3 {
  %3 = bitcast <16 x float> %1 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000, float 0x39B4484C00000000>, i32 17, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %8 = xor <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %9 = bitcast <8 x i64> %8 to <16 x float>
  %10 = fadd <16 x float> %9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %11 = fadd <16 x float> %10, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %12 = fsub <16 x float> %10, %11
  %13 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %12
  %14 = fsub <16 x float> %9, %11
  %15 = fadd <16 x float> %14, %13
  %16 = bitcast i16 %7 to <16 x i1>
  %17 = select <16 x i1> %16, <16 x float> %10, <16 x float> %1
  %18 = select <16 x i1> %16, <16 x float> %15, <16 x float> zeroinitializer
  %19 = bitcast i16 %6 to <16 x i1>
  %20 = select <16 x i1> %19, <16 x float> zeroinitializer, <16 x float> %17
  %21 = select <16 x i1> %19, <16 x float> zeroinitializer, <16 x float> %18
  %22 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, <16 x float> %20, i32 18, i16 -1, i32 4) #7
  %23 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %20, <16 x float> <float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000, float 0x3FF3333340000000>, i32 18, i16 -1, i32 4) #7
  %24 = and i16 %23, %22
  %25 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000, float 0x4002666660000000>, <16 x float> %20, i32 18, i16 -1, i32 4) #7
  %26 = fadd <16 x float> %20, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = fsub <16 x float> %26, %20
  %28 = fsub <16 x float> %26, %27
  %29 = fsub <16 x float> %20, %28
  %30 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %27
  %31 = fadd <16 x float> %30, %29
  %32 = fadd <16 x float> %21, %31
  %33 = bitcast <16 x float> %26 to <8 x i64>
  %34 = and <8 x i64> %33, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = fsub <16 x float> %26, %35
  %37 = bitcast <16 x float> %20 to <8 x i64>
  %38 = and <8 x i64> %37, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %20, %39
  %41 = fmul <16 x float> %20, %26
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fmul <16 x float> %39, %35
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %36, %39
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %40, %35
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %40, %36
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %21, %26
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %20, %32
  %56 = fadd <16 x float> %55, %54
  %57 = fadd <16 x float> %41, %56
  %58 = fsub <16 x float> %41, %57
  %59 = fadd <16 x float> %56, %58
  %60 = fadd <16 x float> %20, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %61 = fsub <16 x float> %60, %20
  %62 = fsub <16 x float> %60, %61
  %63 = fsub <16 x float> %20, %62
  %64 = fsub <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %61
  %65 = fadd <16 x float> %64, %63
  %66 = fadd <16 x float> %21, %65
  %67 = bitcast <16 x float> %60 to <8 x i64>
  %68 = and <8 x i64> %67, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = fsub <16 x float> %60, %69
  %71 = bitcast <16 x float> %57 to <8 x i64>
  %72 = and <8 x i64> %71, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %73 = bitcast <8 x i64> %72 to <16 x float>
  %74 = fsub <16 x float> %57, %73
  %75 = fmul <16 x float> %60, %57
  %76 = bitcast <16 x float> %75 to <8 x i64>
  %77 = xor <8 x i64> %76, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %78 = bitcast <8 x i64> %77 to <16 x float>
  %79 = fmul <16 x float> %69, %73
  %80 = fadd <16 x float> %79, %78
  %81 = fmul <16 x float> %70, %73
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %74, %69
  %84 = fadd <16 x float> %83, %82
  %85 = fmul <16 x float> %70, %74
  %86 = fadd <16 x float> %85, %84
  %87 = fmul <16 x float> %60, %59
  %88 = fadd <16 x float> %87, %86
  %89 = fmul <16 x float> %66, %57
  %90 = fadd <16 x float> %89, %88
  %91 = fadd <16 x float> %75, %90
  %92 = fsub <16 x float> %75, %91
  %93 = fadd <16 x float> %90, %92
  %94 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %20, <16 x float> <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>, i32 18, i16 -1, i32 4) #7
  %95 = and i16 %94, %25
  %96 = bitcast i16 %95 to <16 x i1>
  %97 = select <16 x i1> %96, <16 x float> %91, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %98 = select <16 x i1> %96, <16 x float> %93, <16 x float> zeroinitializer
  %99 = fadd <16 x float> %20, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %100 = fsub <16 x float> %99, %20
  %101 = fsub <16 x float> %99, %100
  %102 = fsub <16 x float> %20, %101
  %103 = fsub <16 x float> <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>, %100
  %104 = fadd <16 x float> %103, %102
  %105 = fadd <16 x float> %21, %104
  %106 = select <16 x i1> %96, <16 x float> %99, <16 x float> %20
  %107 = select <16 x i1> %96, <16 x float> %105, <16 x float> %21
  %108 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106
  %109 = bitcast i16 %24 to <16 x i1>
  %110 = select <16 x i1> %109, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %111 = fadd <16 x float> %110, %106
  %112 = fsub <16 x float> %111, %106
  %113 = fsub <16 x float> %111, %112
  %114 = fsub <16 x float> %106, %113
  %115 = fsub <16 x float> %110, %112
  %116 = fadd <16 x float> %115, %114
  %117 = fadd <16 x float> %107, %116
  %118 = fadd <16 x float> %111, %117
  %119 = bitcast i16 %25 to <16 x i1>
  %120 = select <16 x i1> %119, <16 x float> %108, <16 x float> %118
  %121 = select <16 x i1> %109, <16 x float> <float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000, float 0x3FEE314800000000>, <16 x float> <float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000, float 0x3F1CE6AEA0000000>
  %122 = select <16 x i1> %119, <16 x float> <float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000, float 0x3F4B8239C0000000>, <16 x float> %121
  %123 = select <16 x i1> %109, <16 x float> <float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000, float 0x3FEBBE8420000000>, <16 x float> <float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000, float 0x3F156418C0000000>
  %124 = select <16 x i1> %119, <16 x float> <float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000, float 0xBF0B1D75E0000000>, <16 x float> %123
  %125 = fmul <16 x float> %122, %120
  %126 = fadd <16 x float> %124, %125
  %127 = select <16 x i1> %109, <16 x float> <float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000, float 0x3FDEE411C0000000>, <16 x float> <float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000, float 0x3F2408B0C0000000>
  %128 = select <16 x i1> %119, <16 x float> <float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000, float 0xBF436773C0000000>, <16 x float> %127
  %129 = fmul <16 x float> %120, %126
  %130 = fadd <16 x float> %128, %129
  %131 = select <16 x i1> %109, <16 x float> <float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000, float 0xBFB6AB4C40000000>, <16 x float> <float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000, float 0xBF2EDE4CA0000000>
  %132 = select <16 x i1> %119, <16 x float> <float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000, float 0x3F12476040000000>, <16 x float> %131
  %133 = fmul <16 x float> %120, %130
  %134 = fadd <16 x float> %132, %133
  %135 = select <16 x i1> %109, <16 x float> <float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000, float 0x3FB9F43480000000>, <16 x float> <float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000, float 0x3F4042A160000000>
  %136 = select <16 x i1> %119, <16 x float> <float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000, float 0x3F49B0FF60000000>, <16 x float> %135
  %137 = fmul <16 x float> %120, %134
  %138 = fadd <16 x float> %136, %137
  %139 = select <16 x i1> %109, <16 x float> <float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000, float 0xBFC31D9A40000000>, <16 x float> <float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000, float 0xBF538DDA00000000>
  %140 = select <16 x i1> %119, <16 x float> <float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000, float 0xBF2E13CE40000000>, <16 x float> %139
  %141 = fmul <16 x float> %120, %138
  %142 = fadd <16 x float> %140, %141
  %143 = select <16 x i1> %109, <16 x float> <float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000, float 0x3FC5BA65E0000000>, <16 x float> <float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000, float 0x3F67B01FA0000000>
  %144 = select <16 x i1> %119, <16 x float> <float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000, float 0xBF65F72680000000>, <16 x float> %143
  %145 = fmul <16 x float> %120, %142
  %146 = fadd <16 x float> %144, %145
  %147 = select <16 x i1> %109, <16 x float> <float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000, float 0xBFCA8704E0000000>, <16 x float> <float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000, float 0xBF7E403520000000>
  %148 = select <16 x i1> %119, <16 x float> <float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000, float 0x3F6C71C720000000>, <16 x float> %147
  %149 = fmul <16 x float> %120, %146
  %150 = fadd <16 x float> %148, %149
  %151 = select <16 x i1> %109, <16 x float> <float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000, float 0x3FD1514D20000000>, <16 x float> <float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000, float 0x3F95132020000000>
  %152 = select <16 x i1> %119, <16 x float> <float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000, float 0x3FB5555560000000>, <16 x float> %151
  %153 = fmul <16 x float> %120, %150
  %154 = fadd <16 x float> %152, %153
  %155 = fadd <16 x float> %106, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %156 = fsub <16 x float> %155, %106
  %157 = fsub <16 x float> %155, %156
  %158 = fsub <16 x float> %106, %157
  %159 = fsub <16 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, %156
  %160 = fadd <16 x float> %159, %158
  %161 = fadd <16 x float> %107, %160
  %162 = fmul <16 x float> %106, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %163 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %162, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %164 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %163, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %165 = shl <16 x i32> %164, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %166 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %165
  %167 = bitcast <16 x i32> %166 to <16 x float>
  %168 = fmul <16 x float> %106, %167
  %169 = fmul <16 x float> %107, %167
  %170 = fadd <16 x float> %168, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %171 = fsub <16 x float> %170, %168
  %172 = fsub <16 x float> %170, %171
  %173 = fsub <16 x float> %168, %172
  %174 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %171
  %175 = fadd <16 x float> %174, %173
  %176 = fadd <16 x float> %169, %175
  %177 = fadd <16 x float> %168, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %178 = fsub <16 x float> %177, %168
  %179 = fsub <16 x float> %177, %178
  %180 = fsub <16 x float> %168, %179
  %181 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %178
  %182 = fadd <16 x float> %181, %180
  %183 = fadd <16 x float> %169, %182
  %184 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %177
  %185 = bitcast <16 x float> %177 to <8 x i64>
  %186 = and <8 x i64> %185, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %187 = bitcast <8 x i64> %186 to <16 x float>
  %188 = fsub <16 x float> %177, %187
  %189 = bitcast <16 x float> %184 to <8 x i64>
  %190 = and <8 x i64> %189, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %191 = bitcast <8 x i64> %190 to <16 x float>
  %192 = fsub <16 x float> %184, %191
  %193 = bitcast <16 x float> %170 to <8 x i64>
  %194 = and <8 x i64> %193, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %195 = bitcast <8 x i64> %194 to <16 x float>
  %196 = fsub <16 x float> %170, %195
  %197 = fmul <16 x float> %170, %184
  %198 = fmul <16 x float> %187, %191
  %199 = fadd <16 x float> %198, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %200 = fmul <16 x float> %192, %187
  %201 = fadd <16 x float> %200, %199
  %202 = fmul <16 x float> %188, %191
  %203 = fadd <16 x float> %202, %201
  %204 = fmul <16 x float> %188, %192
  %205 = fadd <16 x float> %204, %203
  %206 = bitcast <16 x float> %205 to <8 x i64>
  %207 = xor <8 x i64> %206, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %208 = bitcast <8 x i64> %207 to <16 x float>
  %209 = bitcast <16 x float> %197 to <8 x i64>
  %210 = xor <8 x i64> %209, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %211 = bitcast <8 x i64> %210 to <16 x float>
  %212 = fmul <16 x float> %195, %191
  %213 = fadd <16 x float> %212, %211
  %214 = fmul <16 x float> %192, %195
  %215 = fadd <16 x float> %214, %213
  %216 = fmul <16 x float> %196, %191
  %217 = fadd <16 x float> %216, %215
  %218 = fmul <16 x float> %196, %192
  %219 = fadd <16 x float> %218, %217
  %220 = fmul <16 x float> %197, %208
  %221 = fadd <16 x float> %219, %220
  %222 = fmul <16 x float> %197, %183
  %223 = fsub <16 x float> %176, %222
  %224 = fmul <16 x float> %184, %223
  %225 = fadd <16 x float> %224, %221
  %226 = and <8 x i64> %209, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %227 = bitcast <8 x i64> %226 to <16 x float>
  %228 = fsub <16 x float> %197, %227
  %229 = fmul <16 x float> %197, %197
  %230 = bitcast <16 x float> %229 to <8 x i64>
  %231 = xor <8 x i64> %230, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %232 = bitcast <8 x i64> %231 to <16 x float>
  %233 = fmul <16 x float> %227, %227
  %234 = fadd <16 x float> %233, %232
  %235 = fadd <16 x float> %227, %227
  %236 = fmul <16 x float> %235, %228
  %237 = fadd <16 x float> %236, %234
  %238 = fmul <16 x float> %228, %228
  %239 = fadd <16 x float> %238, %237
  %240 = fadd <16 x float> %225, %225
  %241 = fmul <16 x float> %197, %240
  %242 = fadd <16 x float> %239, %241
  %243 = fmul <16 x float> %229, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %244 = fadd <16 x float> %243, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %245 = fmul <16 x float> %229, %244
  %246 = fadd <16 x float> %245, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %247 = fmul <16 x float> %229, %246
  %248 = fadd <16 x float> %247, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %249 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %164, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %250 = bitcast <16 x float> %249 to <8 x i64>
  %251 = and <8 x i64> %250, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %252 = bitcast <8 x i64> %251 to <16 x float>
  %253 = fsub <16 x float> %249, %252
  %254 = fmul <16 x float> %249, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %255 = bitcast <16 x float> %254 to <8 x i64>
  %256 = xor <8 x i64> %255, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %257 = bitcast <8 x i64> %256 to <16 x float>
  %258 = fmul <16 x float> %252, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %259 = fadd <16 x float> %258, %257
  %260 = fmul <16 x float> %252, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %261 = fadd <16 x float> %260, %259
  %262 = fmul <16 x float> %253, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %263 = fadd <16 x float> %262, %261
  %264 = fmul <16 x float> %253, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %265 = fadd <16 x float> %264, %263
  %266 = fmul <16 x float> %249, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %267 = fadd <16 x float> %266, %265
  %268 = fmul <16 x float> %197, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %269 = fmul <16 x float> %225, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %270 = fadd <16 x float> %254, %268
  %271 = fsub <16 x float> %254, %270
  %272 = fadd <16 x float> %268, %271
  %273 = fadd <16 x float> %267, %272
  %274 = fadd <16 x float> %273, %269
  %275 = and <8 x i64> %230, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %276 = bitcast <8 x i64> %275 to <16 x float>
  %277 = fsub <16 x float> %229, %276
  %278 = fmul <16 x float> %197, %229
  %279 = bitcast <16 x float> %278 to <8 x i64>
  %280 = xor <8 x i64> %279, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %281 = bitcast <8 x i64> %280 to <16 x float>
  %282 = fmul <16 x float> %227, %276
  %283 = fadd <16 x float> %282, %281
  %284 = fmul <16 x float> %277, %227
  %285 = fadd <16 x float> %284, %283
  %286 = fmul <16 x float> %228, %276
  %287 = fadd <16 x float> %286, %285
  %288 = fmul <16 x float> %228, %277
  %289 = fadd <16 x float> %288, %287
  %290 = fmul <16 x float> %229, %225
  %291 = fadd <16 x float> %289, %290
  %292 = fmul <16 x float> %197, %242
  %293 = fadd <16 x float> %291, %292
  %294 = and <8 x i64> %279, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %295 = bitcast <8 x i64> %294 to <16 x float>
  %296 = fsub <16 x float> %278, %295
  %297 = bitcast <16 x float> %248 to <8 x i64>
  %298 = and <8 x i64> %297, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %299 = bitcast <8 x i64> %298 to <16 x float>
  %300 = fsub <16 x float> %248, %299
  %301 = fmul <16 x float> %278, %248
  %302 = bitcast <16 x float> %301 to <8 x i64>
  %303 = xor <8 x i64> %302, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %304 = bitcast <8 x i64> %303 to <16 x float>
  %305 = fmul <16 x float> %295, %299
  %306 = fadd <16 x float> %305, %304
  %307 = fmul <16 x float> %296, %299
  %308 = fadd <16 x float> %307, %306
  %309 = fmul <16 x float> %300, %295
  %310 = fadd <16 x float> %309, %308
  %311 = fmul <16 x float> %296, %300
  %312 = fadd <16 x float> %311, %310
  %313 = fmul <16 x float> %248, %293
  %314 = fadd <16 x float> %312, %313
  %315 = fadd <16 x float> %270, %301
  %316 = fsub <16 x float> %270, %315
  %317 = fadd <16 x float> %301, %316
  %318 = fadd <16 x float> %317, %274
  %319 = fadd <16 x float> %318, %314
  %320 = bitcast <16 x float> %155 to <8 x i64>
  %321 = and <8 x i64> %320, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %322 = bitcast <8 x i64> %321 to <16 x float>
  %323 = fsub <16 x float> %155, %322
  %324 = bitcast <16 x float> %315 to <8 x i64>
  %325 = and <8 x i64> %324, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %326 = bitcast <8 x i64> %325 to <16 x float>
  %327 = fsub <16 x float> %315, %326
  %328 = fmul <16 x float> %155, %315
  %329 = bitcast <16 x float> %328 to <8 x i64>
  %330 = xor <8 x i64> %329, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %331 = bitcast <8 x i64> %330 to <16 x float>
  %332 = fmul <16 x float> %322, %326
  %333 = fadd <16 x float> %332, %331
  %334 = fmul <16 x float> %323, %326
  %335 = fadd <16 x float> %334, %333
  %336 = fmul <16 x float> %327, %322
  %337 = fadd <16 x float> %336, %335
  %338 = fmul <16 x float> %323, %327
  %339 = fadd <16 x float> %338, %337
  %340 = fmul <16 x float> %155, %319
  %341 = fadd <16 x float> %339, %340
  %342 = fmul <16 x float> %161, %315
  %343 = fadd <16 x float> %342, %341
  %344 = bitcast <16 x float> %106 to <8 x i64>
  %345 = xor <8 x i64> %344, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %346 = bitcast <16 x float> %107 to <8 x i64>
  %347 = xor <8 x i64> %346, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %348 = bitcast <8 x i64> %345 to <16 x float>
  %349 = bitcast <8 x i64> %347 to <16 x float>
  %350 = fadd <16 x float> %328, %348
  %351 = fsub <16 x float> %350, %328
  %352 = fsub <16 x float> %350, %351
  %353 = fsub <16 x float> %328, %352
  %354 = fsub <16 x float> %348, %351
  %355 = fadd <16 x float> %354, %353
  %356 = fadd <16 x float> %343, %349
  %357 = fadd <16 x float> %355, %356
  %358 = fadd <16 x float> %350, <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>
  %359 = fsub <16 x float> %358, %350
  %360 = fsub <16 x float> %358, %359
  %361 = fsub <16 x float> %350, %360
  %362 = fsub <16 x float> <float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000, float 0x3FED67F1C0000000>, %359
  %363 = fadd <16 x float> %362, %361
  %364 = fadd <16 x float> %357, <float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000, float 0x3E50C97D60000000>
  %365 = fadd <16 x float> %363, %364
  %366 = bitcast <16 x float> %154 to <8 x i64>
  %367 = and <8 x i64> %366, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %368 = bitcast <8 x i64> %367 to <16 x float>
  %369 = fsub <16 x float> %154, %368
  %370 = bitcast <16 x float> %120 to <8 x i64>
  %371 = and <8 x i64> %370, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %372 = bitcast <8 x i64> %371 to <16 x float>
  %373 = fsub <16 x float> %120, %372
  %374 = fmul <16 x float> %120, %154
  %375 = bitcast <16 x float> %374 to <8 x i64>
  %376 = xor <8 x i64> %375, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %377 = bitcast <8 x i64> %376 to <16 x float>
  %378 = fmul <16 x float> %372, %368
  %379 = fadd <16 x float> %378, %377
  %380 = fmul <16 x float> %369, %372
  %381 = fadd <16 x float> %380, %379
  %382 = fmul <16 x float> %373, %368
  %383 = fadd <16 x float> %382, %381
  %384 = fmul <16 x float> %373, %369
  %385 = fadd <16 x float> %384, %383
  %386 = select <16 x i1> %109, <16 x float> <float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000, float 0xBFD9A4D920000000>, <16 x float> <float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000, float 0xBFB13E0020000000>
  %387 = fadd <16 x float> %386, %374
  %388 = fsub <16 x float> %387, %374
  %389 = fsub <16 x float> %387, %388
  %390 = fsub <16 x float> %374, %389
  %391 = fsub <16 x float> %386, %388
  %392 = fadd <16 x float> %391, %390
  %393 = fadd <16 x float> %392, %385
  %394 = bitcast <16 x float> %387 to <8 x i64>
  %395 = and <8 x i64> %394, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %396 = bitcast <8 x i64> %395 to <16 x float>
  %397 = fsub <16 x float> %387, %396
  %398 = fmul <16 x float> %120, %387
  %399 = bitcast <16 x float> %398 to <8 x i64>
  %400 = xor <8 x i64> %399, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %401 = bitcast <8 x i64> %400 to <16 x float>
  %402 = fmul <16 x float> %372, %396
  %403 = fadd <16 x float> %402, %401
  %404 = fmul <16 x float> %397, %372
  %405 = fadd <16 x float> %404, %403
  %406 = fmul <16 x float> %373, %396
  %407 = fadd <16 x float> %406, %405
  %408 = fmul <16 x float> %373, %397
  %409 = fadd <16 x float> %408, %407
  %410 = fmul <16 x float> %120, %393
  %411 = fadd <16 x float> %410, %409
  %412 = select <16 x i1> %109, <16 x float> <float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000, float 0x3FEA51A640000000>, <16 x float> <float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000, float 0x3FD4A34CC0000000>
  %413 = fadd <16 x float> %412, %398
  %414 = fsub <16 x float> %413, %398
  %415 = fsub <16 x float> %413, %414
  %416 = fsub <16 x float> %398, %415
  %417 = fsub <16 x float> %412, %414
  %418 = fadd <16 x float> %417, %416
  %419 = fadd <16 x float> %418, %411
  %420 = bitcast <16 x float> %413 to <8 x i64>
  %421 = and <8 x i64> %420, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %422 = bitcast <8 x i64> %421 to <16 x float>
  %423 = fsub <16 x float> %413, %422
  %424 = fmul <16 x float> %120, %413
  %425 = bitcast <16 x float> %424 to <8 x i64>
  %426 = xor <8 x i64> %425, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %427 = bitcast <8 x i64> %426 to <16 x float>
  %428 = fmul <16 x float> %372, %422
  %429 = fadd <16 x float> %428, %427
  %430 = fmul <16 x float> %423, %372
  %431 = fadd <16 x float> %430, %429
  %432 = fmul <16 x float> %373, %422
  %433 = fadd <16 x float> %432, %431
  %434 = fmul <16 x float> %373, %423
  %435 = fadd <16 x float> %434, %433
  %436 = fmul <16 x float> %120, %419
  %437 = fadd <16 x float> %435, %436
  %438 = select <16 x i1> %109, <16 x float> <float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000, float 0xBFE2788D00000000>, <16 x float> <float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000, float 0x3FDB0EE600000000>
  %439 = fadd <16 x float> %438, %424
  %440 = fsub <16 x float> %439, %424
  %441 = fsub <16 x float> %439, %440
  %442 = fsub <16 x float> %424, %441
  %443 = fsub <16 x float> %438, %440
  %444 = fadd <16 x float> %443, %442
  %445 = fadd <16 x float> %444, %437
  %446 = bitcast <16 x float> %439 to <8 x i64>
  %447 = and <8 x i64> %446, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %448 = bitcast <8 x i64> %447 to <16 x float>
  %449 = fsub <16 x float> %439, %448
  %450 = fmul <16 x float> %120, %439
  %451 = bitcast <16 x float> %450 to <8 x i64>
  %452 = xor <8 x i64> %451, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %453 = bitcast <8 x i64> %452 to <16 x float>
  %454 = fmul <16 x float> %372, %448
  %455 = fadd <16 x float> %454, %453
  %456 = fmul <16 x float> %449, %372
  %457 = fadd <16 x float> %456, %455
  %458 = fmul <16 x float> %373, %448
  %459 = fadd <16 x float> %458, %457
  %460 = fmul <16 x float> %373, %449
  %461 = fadd <16 x float> %460, %459
  %462 = fmul <16 x float> %120, %445
  %463 = fadd <16 x float> %461, %462
  %464 = select <16 x i1> %119, <16 x float> %358, <16 x float> %450
  %465 = select <16 x i1> %119, <16 x float> %365, <16 x float> %463
  %466 = fadd <16 x float> %374, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %467 = fsub <16 x float> %466, %374
  %468 = fsub <16 x float> %466, %467
  %469 = fsub <16 x float> %374, %468
  %470 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %467
  %471 = fadd <16 x float> %470, %469
  %472 = fadd <16 x float> %471, %385
  %473 = select <16 x i1> %119, <16 x float> %466, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %474 = select <16 x i1> %119, <16 x float> %472, <16 x float> zeroinitializer
  %475 = bitcast <16 x float> %464 to <8 x i64>
  %476 = xor <8 x i64> %475, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %477 = bitcast <16 x float> %465 to <8 x i64>
  %478 = xor <8 x i64> %477, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %479 = bitcast <8 x i64> %476 to <16 x float>
  %480 = bitcast <8 x i64> %478 to <16 x float>
  %481 = fadd <16 x float> %479, <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>
  %482 = fadd <16 x float> %481, <float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000, float 0xBFF250D040000000>
  %483 = fsub <16 x float> %481, %482
  %484 = fsub <16 x float> <float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000, float 0x3FF250D040000000>, %483
  %485 = fsub <16 x float> %479, %482
  %486 = fadd <16 x float> %485, %484
  %487 = fadd <16 x float> %480, <float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000, float 0x3E61CF4380000000>
  %488 = fadd <16 x float> %486, %487
  %489 = select <16 x i1> %16, <16 x float> %481, <16 x float> %464
  %490 = select <16 x i1> %16, <16 x float> %488, <16 x float> %465
  %491 = select <16 x i1> %19, <16 x float> <float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000, float 0x4044CB5EC0000000>, <16 x float> %489
  %492 = select <16 x i1> %19, <16 x float> <float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000, float 0x3EBE152CA0000000>, <16 x float> %490
  %493 = select <16 x i1> %16, <16 x float> %97, <16 x float> %473
  %494 = select <16 x i1> %16, <16 x float> %98, <16 x float> %474
  %495 = select <16 x i1> %19, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %493
  %496 = select <16 x i1> %19, <16 x float> zeroinitializer, <16 x float> %494
  %497 = icmp eq i16 %7, 0
  br i1 %497, label %646, label %498

; <label>:498:                                    ; preds = %2
  %499 = fmul <16 x float> %1, <float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000, float 0x3F30000000000000>
  %500 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %499, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %501 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %500, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %502 = fmul <16 x float> %501, <float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03, float 4.096000e+03>
  %503 = fsub <16 x float> %1, %502
  %504 = fmul <16 x float> %503, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %505 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %504, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %506 = lshr <16 x i32> %505, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %507 = xor <16 x i32> %506, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %508 = add <16 x i32> %507, %505
  %509 = and <16 x i32> %508, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %510 = icmp ne <16 x i32> %509, zeroinitializer
  %511 = and <16 x i32> %508, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %512 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %511, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %513 = fsub <16 x float> %504, %512
  %514 = fmul <16 x float> %513, %513
  %515 = bitcast <16 x float> %513 to <8 x i64>
  %516 = and <8 x i64> %515, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %517 = bitcast <8 x i64> %516 to <16 x float>
  %518 = fsub <16 x float> %513, %517
  %519 = bitcast <16 x float> %514 to <8 x i64>
  %520 = xor <8 x i64> %519, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %521 = bitcast <8 x i64> %520 to <16 x float>
  %522 = fmul <16 x float> %517, %517
  %523 = fadd <16 x float> %522, %521
  %524 = fmul <16 x float> %518, %517
  %525 = fadd <16 x float> %524, %523
  %526 = fadd <16 x float> %524, %525
  %527 = fmul <16 x float> %518, %518
  %528 = fadd <16 x float> %527, %526
  %529 = select <16 x i1> %510, <16 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <16 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %530 = select <16 x i1> %510, <16 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <16 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %531 = fmul <16 x float> %514, %529
  %532 = fadd <16 x float> %530, %531
  %533 = select <16 x i1> %510, <16 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <16 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %534 = fmul <16 x float> %514, %532
  %535 = fadd <16 x float> %533, %534
  %536 = fmul <16 x float> %514, %535
  %537 = select <16 x i1> %510, <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %538 = select <16 x i1> %510, <16 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <16 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %539 = fadd <16 x float> %537, %536
  %540 = fsub <16 x float> %539, %536
  %541 = fsub <16 x float> %539, %540
  %542 = fsub <16 x float> %536, %541
  %543 = fsub <16 x float> %537, %540
  %544 = fadd <16 x float> %543, %542
  %545 = fadd <16 x float> %538, %544
  %546 = and <8 x i64> %519, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %547 = bitcast <8 x i64> %546 to <16 x float>
  %548 = fsub <16 x float> %514, %547
  %549 = bitcast <16 x float> %539 to <8 x i64>
  %550 = and <8 x i64> %549, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %551 = bitcast <8 x i64> %550 to <16 x float>
  %552 = fsub <16 x float> %539, %551
  %553 = fmul <16 x float> %514, %539
  %554 = bitcast <16 x float> %553 to <8 x i64>
  %555 = xor <8 x i64> %554, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %556 = bitcast <8 x i64> %555 to <16 x float>
  %557 = fmul <16 x float> %547, %551
  %558 = fadd <16 x float> %557, %556
  %559 = fmul <16 x float> %548, %551
  %560 = fadd <16 x float> %559, %558
  %561 = fmul <16 x float> %552, %547
  %562 = fadd <16 x float> %561, %560
  %563 = fmul <16 x float> %548, %552
  %564 = fadd <16 x float> %563, %562
  %565 = fmul <16 x float> %514, %545
  %566 = fadd <16 x float> %565, %564
  %567 = fmul <16 x float> %528, %539
  %568 = fadd <16 x float> %567, %566
  %569 = select <16 x i1> %510, <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %570 = select <16 x i1> %510, <16 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <16 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %571 = fadd <16 x float> %569, %553
  %572 = fsub <16 x float> %571, %553
  %573 = fsub <16 x float> %571, %572
  %574 = fsub <16 x float> %553, %573
  %575 = fsub <16 x float> %569, %572
  %576 = fadd <16 x float> %575, %574
  %577 = fadd <16 x float> %570, %568
  %578 = fadd <16 x float> %576, %577
  %579 = select <16 x i1> %510, <16 x float> %514, <16 x float> %513
  %580 = select <16 x i1> %510, <16 x float> %528, <16 x float> zeroinitializer
  %581 = bitcast <16 x float> %571 to <8 x i64>
  %582 = and <8 x i64> %581, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %583 = bitcast <8 x i64> %582 to <16 x float>
  %584 = fsub <16 x float> %571, %583
  %585 = bitcast <16 x float> %579 to <8 x i64>
  %586 = and <8 x i64> %585, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %587 = bitcast <8 x i64> %586 to <16 x float>
  %588 = fsub <16 x float> %579, %587
  %589 = fmul <16 x float> %579, %571
  %590 = bitcast <16 x float> %589 to <8 x i64>
  %591 = xor <8 x i64> %590, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %592 = bitcast <8 x i64> %591 to <16 x float>
  %593 = fmul <16 x float> %587, %583
  %594 = fadd <16 x float> %593, %592
  %595 = fmul <16 x float> %584, %587
  %596 = fadd <16 x float> %595, %594
  %597 = fmul <16 x float> %588, %583
  %598 = fadd <16 x float> %597, %596
  %599 = fmul <16 x float> %588, %584
  %600 = fadd <16 x float> %599, %598
  %601 = fmul <16 x float> %580, %571
  %602 = fadd <16 x float> %601, %600
  %603 = fmul <16 x float> %579, %578
  %604 = fadd <16 x float> %602, %603
  %605 = fadd <16 x float> %589, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %606 = fsub <16 x float> %605, %589
  %607 = fsub <16 x float> %605, %606
  %608 = fsub <16 x float> %589, %607
  %609 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %606
  %610 = fadd <16 x float> %609, %608
  %611 = fadd <16 x float> %610, %604
  %612 = select <16 x i1> %510, <16 x float> %605, <16 x float> %589
  %613 = select <16 x i1> %510, <16 x float> %611, <16 x float> %604
  %614 = shl <16 x i32> %508, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %615 = bitcast <16 x i32> %614 to <8 x i64>
  %616 = and <8 x i64> %615, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %617 = bitcast <16 x float> %612 to <8 x i64>
  %618 = xor <8 x i64> %616, %617
  %619 = bitcast <16 x float> %613 to <8 x i64>
  %620 = xor <8 x i64> %616, %619
  %621 = bitcast <8 x i64> %618 to <16 x float>
  %622 = bitcast <8 x i64> %620 to <16 x float>
  %623 = bitcast <16 x float> %473 to <8 x i64>
  %624 = and <8 x i64> %623, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %625 = bitcast <8 x i64> %624 to <16 x float>
  %626 = fsub <16 x float> %473, %625
  %627 = and <8 x i64> %618, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %628 = bitcast <8 x i64> %627 to <16 x float>
  %629 = fsub <16 x float> %621, %628
  %630 = fmul <16 x float> %473, %621
  %631 = bitcast <16 x float> %630 to <8 x i64>
  %632 = xor <8 x i64> %631, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %633 = bitcast <8 x i64> %632 to <16 x float>
  %634 = fmul <16 x float> %625, %628
  %635 = fadd <16 x float> %634, %633
  %636 = fmul <16 x float> %626, %628
  %637 = fadd <16 x float> %636, %635
  %638 = fmul <16 x float> %629, %625
  %639 = fadd <16 x float> %638, %637
  %640 = fmul <16 x float> %626, %629
  %641 = fadd <16 x float> %640, %639
  %642 = fmul <16 x float> %473, %622
  %643 = fadd <16 x float> %641, %642
  %644 = fmul <16 x float> %474, %621
  %645 = fadd <16 x float> %644, %643
  br label %646

; <label>:646:                                    ; preds = %2, %498
  %647 = phi <16 x float> [ %630, %498 ], [ %106, %2 ]
  %648 = phi <16 x float> [ %645, %498 ], [ %107, %2 ]
  %649 = fmul <16 x float> %1, <float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000, float 0x43B0000000000000>
  %650 = select <16 x i1> %16, <16 x float> %647, <16 x float> %97
  %651 = select <16 x i1> %16, <16 x float> %648, <16 x float> %98
  %652 = select <16 x i1> %19, <16 x float> %649, <16 x float> %650
  %653 = select <16 x i1> %19, <16 x float> zeroinitializer, <16 x float> %651
  %654 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %652
  %655 = bitcast <16 x float> %652 to <8 x i64>
  %656 = and <8 x i64> %655, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %657 = bitcast <8 x i64> %656 to <16 x float>
  %658 = fsub <16 x float> %652, %657
  %659 = bitcast <16 x float> %654 to <8 x i64>
  %660 = and <8 x i64> %659, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %661 = bitcast <8 x i64> %660 to <16 x float>
  %662 = fsub <16 x float> %654, %661
  %663 = bitcast <16 x float> %495 to <8 x i64>
  %664 = and <8 x i64> %663, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %665 = bitcast <8 x i64> %664 to <16 x float>
  %666 = fsub <16 x float> %495, %665
  %667 = fmul <16 x float> %495, %654
  %668 = fmul <16 x float> %657, %661
  %669 = fadd <16 x float> %668, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %670 = fmul <16 x float> %662, %657
  %671 = fadd <16 x float> %670, %669
  %672 = fmul <16 x float> %658, %661
  %673 = fadd <16 x float> %672, %671
  %674 = fmul <16 x float> %658, %662
  %675 = fadd <16 x float> %674, %673
  %676 = bitcast <16 x float> %675 to <8 x i64>
  %677 = xor <8 x i64> %676, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %678 = bitcast <8 x i64> %677 to <16 x float>
  %679 = bitcast <16 x float> %667 to <8 x i64>
  %680 = xor <8 x i64> %679, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %681 = bitcast <8 x i64> %680 to <16 x float>
  %682 = fmul <16 x float> %665, %661
  %683 = fadd <16 x float> %682, %681
  %684 = fmul <16 x float> %662, %665
  %685 = fadd <16 x float> %684, %683
  %686 = fmul <16 x float> %666, %661
  %687 = fadd <16 x float> %686, %685
  %688 = fmul <16 x float> %666, %662
  %689 = fadd <16 x float> %688, %687
  %690 = fmul <16 x float> %667, %678
  %691 = fadd <16 x float> %689, %690
  %692 = fmul <16 x float> %653, %667
  %693 = fsub <16 x float> %496, %692
  %694 = fmul <16 x float> %654, %693
  %695 = fadd <16 x float> %694, %691
  %696 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 0
  store <16 x float> %491, <16 x float>* %696, align 64
  %697 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 0, i32 1
  store <16 x float> %492, <16 x float>* %697, align 64
  %698 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 0
  store <16 x float> %667, <16 x float>* %698, align 64
  %699 = getelementptr inbounds %struct.df2, %struct.df2* %0, i64 0, i32 1, i32 1
  store <16 x float> %695, <16 x float>* %699, align 64
  ret void
}

; Function Attrs: nounwind uwtable
define <16 x float> @Sleef_lgammaf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #3 {
  %2 = alloca %struct.df2, align 64
  %3 = bitcast %struct.df2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3) #7
  call fastcc void @gammafk(%struct.df2* noalias nonnull %2, <16 x float> %0)
  %4 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1
  %5 = bitcast %struct.vfloat2* %4 to <8 x i64>*
  %6 = load <8 x i64>, <8 x i64>* %5, align 64
  %7 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 1, i32 1
  %8 = bitcast <16 x float>* %7 to <8 x i64>*
  %9 = load <8 x i64>, <8 x i64>* %8, align 64
  %10 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = and <8 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %12 = xor <8 x i64> %11, %9
  %13 = bitcast <8 x i64> %10 to <16 x float>
  %14 = bitcast <8 x i64> %12 to <16 x float>
  %15 = fmul <16 x float> %13, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %16 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %15, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %17 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %16, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %18 = shl <16 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %18
  %20 = bitcast <16 x i32> %19 to <16 x float>
  %21 = fmul <16 x float> %13, %20
  %22 = fmul <16 x float> %14, %20
  %23 = fadd <16 x float> %21, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %24 = fsub <16 x float> %23, %21
  %25 = fsub <16 x float> %23, %24
  %26 = fsub <16 x float> %21, %25
  %27 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %24
  %28 = fadd <16 x float> %27, %26
  %29 = fadd <16 x float> %22, %28
  %30 = fadd <16 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %31 = fsub <16 x float> %30, %21
  %32 = fsub <16 x float> %30, %31
  %33 = fsub <16 x float> %21, %32
  %34 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %31
  %35 = fadd <16 x float> %34, %33
  %36 = fadd <16 x float> %22, %35
  %37 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %38 = bitcast <16 x float> %30 to <8 x i64>
  %39 = and <8 x i64> %38, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %40 = bitcast <8 x i64> %39 to <16 x float>
  %41 = fsub <16 x float> %30, %40
  %42 = bitcast <16 x float> %37 to <8 x i64>
  %43 = and <8 x i64> %42, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fsub <16 x float> %37, %44
  %46 = bitcast <16 x float> %23 to <8 x i64>
  %47 = and <8 x i64> %46, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fsub <16 x float> %23, %48
  %50 = fmul <16 x float> %23, %37
  %51 = fmul <16 x float> %40, %44
  %52 = fadd <16 x float> %51, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %53 = fmul <16 x float> %45, %40
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %41, %44
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %41, %45
  %58 = fadd <16 x float> %57, %56
  %59 = bitcast <16 x float> %58 to <8 x i64>
  %60 = xor <8 x i64> %59, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %61 = bitcast <8 x i64> %60 to <16 x float>
  %62 = bitcast <16 x float> %50 to <8 x i64>
  %63 = xor <8 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <8 x i64> %63 to <16 x float>
  %65 = fmul <16 x float> %48, %44
  %66 = fadd <16 x float> %65, %64
  %67 = fmul <16 x float> %45, %48
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %49, %44
  %70 = fadd <16 x float> %69, %68
  %71 = fmul <16 x float> %49, %45
  %72 = fadd <16 x float> %71, %70
  %73 = fmul <16 x float> %50, %61
  %74 = fadd <16 x float> %72, %73
  %75 = fmul <16 x float> %50, %36
  %76 = fsub <16 x float> %29, %75
  %77 = fmul <16 x float> %37, %76
  %78 = fadd <16 x float> %77, %74
  %79 = and <8 x i64> %62, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %80 = bitcast <8 x i64> %79 to <16 x float>
  %81 = fsub <16 x float> %50, %80
  %82 = fmul <16 x float> %50, %50
  %83 = bitcast <16 x float> %82 to <8 x i64>
  %84 = xor <8 x i64> %83, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fmul <16 x float> %80, %80
  %87 = fadd <16 x float> %86, %85
  %88 = fadd <16 x float> %80, %80
  %89 = fmul <16 x float> %88, %81
  %90 = fadd <16 x float> %89, %87
  %91 = fmul <16 x float> %81, %81
  %92 = fadd <16 x float> %91, %90
  %93 = fadd <16 x float> %78, %78
  %94 = fmul <16 x float> %50, %93
  %95 = fadd <16 x float> %92, %94
  %96 = fmul <16 x float> %82, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %97 = fadd <16 x float> %96, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %98 = fmul <16 x float> %82, %97
  %99 = fadd <16 x float> %98, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %100 = fmul <16 x float> %82, %99
  %101 = fadd <16 x float> %100, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %102 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %17, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %103 = bitcast <16 x float> %102 to <8 x i64>
  %104 = and <8 x i64> %103, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <8 x i64> %104 to <16 x float>
  %106 = fsub <16 x float> %102, %105
  %107 = fmul <16 x float> %102, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %108 = bitcast <16 x float> %107 to <8 x i64>
  %109 = xor <8 x i64> %108, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %110 = bitcast <8 x i64> %109 to <16 x float>
  %111 = fmul <16 x float> %105, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %105, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %106, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %106, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %102, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %50, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %122 = fmul <16 x float> %78, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %123 = fadd <16 x float> %107, %121
  %124 = fsub <16 x float> %107, %123
  %125 = fadd <16 x float> %121, %124
  %126 = fadd <16 x float> %120, %125
  %127 = fadd <16 x float> %126, %122
  %128 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %129 = bitcast <8 x i64> %128 to <16 x float>
  %130 = fsub <16 x float> %82, %129
  %131 = fmul <16 x float> %50, %82
  %132 = bitcast <16 x float> %131 to <8 x i64>
  %133 = xor <8 x i64> %132, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %134 = bitcast <8 x i64> %133 to <16 x float>
  %135 = fmul <16 x float> %80, %129
  %136 = fadd <16 x float> %135, %134
  %137 = fmul <16 x float> %130, %80
  %138 = fadd <16 x float> %137, %136
  %139 = fmul <16 x float> %81, %129
  %140 = fadd <16 x float> %139, %138
  %141 = fmul <16 x float> %81, %130
  %142 = fadd <16 x float> %141, %140
  %143 = fmul <16 x float> %82, %78
  %144 = fadd <16 x float> %142, %143
  %145 = fmul <16 x float> %50, %95
  %146 = fadd <16 x float> %144, %145
  %147 = and <8 x i64> %132, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %148 = bitcast <8 x i64> %147 to <16 x float>
  %149 = fsub <16 x float> %131, %148
  %150 = bitcast <16 x float> %101 to <8 x i64>
  %151 = and <8 x i64> %150, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fsub <16 x float> %101, %152
  %154 = fmul <16 x float> %131, %101
  %155 = bitcast <16 x float> %154 to <8 x i64>
  %156 = xor <8 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %148, %152
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %149, %152
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %153, %148
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %149, %153
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %101, %146
  %167 = fadd <16 x float> %165, %166
  %168 = fadd <16 x float> %123, %154
  %169 = fsub <16 x float> %123, %168
  %170 = fadd <16 x float> %154, %169
  %171 = fadd <16 x float> %170, %127
  %172 = fadd <16 x float> %171, %167
  %173 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 0
  %174 = load <16 x float>, <16 x float>* %173, align 64
  %175 = getelementptr inbounds %struct.df2, %struct.df2* %2, i64 0, i32 0, i32 1
  %176 = load <16 x float>, <16 x float>* %175, align 64
  %177 = fadd <16 x float> %174, %168
  %178 = fsub <16 x float> %177, %174
  %179 = fsub <16 x float> %177, %178
  %180 = fsub <16 x float> %174, %179
  %181 = fsub <16 x float> %168, %178
  %182 = fadd <16 x float> %181, %180
  %183 = fadd <16 x float> %176, %172
  %184 = fadd <16 x float> %182, %183
  %185 = fadd <16 x float> %177, %184
  %186 = bitcast <16 x float> %0 to <8 x i64>
  %187 = and <8 x i64> %186, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %188 = bitcast <8 x i64> %187 to <16 x float>
  %189 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %188, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %190 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 18, i16 -1, i32 4) #7
  %191 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 11, <16 x float> %0, i16 -1, i32 4) #7
  %192 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %191, <16 x float> %0, i32 0, i16 -1, i32 4) #7
  %193 = and i16 %192, %190
  %194 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %195 = or i16 %194, %189
  %196 = xor i16 %195, -1
  %197 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %185, <16 x float> %185, i32 4, i16 -1, i32 4) #7
  %198 = and i16 %197, %196
  %199 = or i16 %193, %189
  %200 = or i16 %199, %198
  %201 = bitcast i16 %200 to <16 x i1>
  %202 = select <16 x i1> %201, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %185
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3) #7
  ret <16 x float> %202
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_erff16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000, float 0x3FF19999A0000000>, i32 17, i16 -1, i32 4) #7
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000, float 0x4003333340000000>, i32 17, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, i32 17, i16 -1, i32 4) #7
  %8 = fmul <16 x float> %4, %4
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %8, <16 x float> %4
  %11 = bitcast i16 %6 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> <float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000, float 0xBEF2CC2800000000>, <16 x float> <float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000, float 0xBEE3E9FF00000000>
  %13 = select <16 x i1> %9, <16 x float> <float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000, float 0x3F12958B20000000>, <16 x float> %12
  %14 = select <16 x i1> %11, <16 x float> <float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000, float 0x3F39CE4080000000>, <16 x float> <float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000, float 0x3F30433580000000>
  %15 = select <16 x i1> %9, <16 x float> <float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000, float 0xBF49748820000000>, <16 x float> %14
  %16 = fmul <16 x float> %10, %13
  %17 = fadd <16 x float> %15, %16
  %18 = select <16 x i1> %11, <16 x float> <float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000, float 0xBF702D0440000000>, <16 x float> <float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000, float 0xBF67E7DC40000000>
  %19 = select <16 x i1> %9, <16 x float> <float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000, float 0x3F75221700000000>, <16 x float> %18
  %20 = fmul <16 x float> %10, %17
  %21 = fadd <16 x float> %19, %20
  %22 = select <16 x i1> %11, <16 x float> <float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000, float 0x3F990AAA40000000>, <16 x float> <float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000, float 0x3F951765C0000000>
  %23 = select <16 x i1> %9, <16 x float> <float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000, float 0xBF9B7B5F20000000>, <16 x float> %22
  %24 = fmul <16 x float> %10, %21
  %25 = fadd <16 x float> %23, %24
  %26 = select <16 x i1> %11, <16 x float> <float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000, float 0xBFBB6AE160000000>, <16 x float> <float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000, float 0xBFB9594F20000000>
  %27 = select <16 x i1> %9, <16 x float> <float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000, float 0x3FBCE28B80000000>, <16 x float> %26
  %28 = fmul <16 x float> %10, %25
  %29 = fadd <16 x float> %27, %28
  %30 = bitcast <16 x float> %29 to <8 x i64>
  %31 = and <8 x i64> %30, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %32 = bitcast <8 x i64> %31 to <16 x float>
  %33 = fsub <16 x float> %29, %32
  %34 = bitcast <16 x float> %10 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %10, %36
  %38 = fmul <16 x float> %10, %29
  %39 = bitcast <16 x float> %38 to <8 x i64>
  %40 = xor <8 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = fmul <16 x float> %36, %32
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %33, %36
  %45 = fadd <16 x float> %44, %43
  %46 = fmul <16 x float> %37, %32
  %47 = fadd <16 x float> %46, %45
  %48 = fmul <16 x float> %37, %33
  %49 = fadd <16 x float> %48, %47
  %50 = select <16 x i1> %11, <16 x float> <float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000, float 0xBFE44E8D60000000>, <16 x float> <float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000, float 0xBFE4985B00000000>
  %51 = select <16 x i1> %11, <16 x float> <float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000, float 0xBE42A3F940000000>, <16 x float> <float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000, float 0x3E5F482820000000>
  %52 = select <16 x i1> %9, <16 x float> <float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000, float 0xBFD8127240000000>, <16 x float> %50
  %53 = select <16 x i1> %9, <16 x float> <float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000, float 0xBE309A2820000000>, <16 x float> %51
  %54 = fadd <16 x float> %52, %38
  %55 = fsub <16 x float> %54, %38
  %56 = fsub <16 x float> %54, %55
  %57 = fsub <16 x float> %38, %56
  %58 = fsub <16 x float> %52, %55
  %59 = fadd <16 x float> %58, %57
  %60 = fadd <16 x float> %53, %49
  %61 = fadd <16 x float> %59, %60
  %62 = bitcast <16 x float> %54 to <8 x i64>
  %63 = and <8 x i64> %62, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %64 = bitcast <8 x i64> %63 to <16 x float>
  %65 = fsub <16 x float> %54, %64
  %66 = fmul <16 x float> %10, %54
  %67 = bitcast <16 x float> %66 to <8 x i64>
  %68 = xor <8 x i64> %67, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = fmul <16 x float> %36, %64
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %65, %36
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %37, %64
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %37, %65
  %77 = fadd <16 x float> %76, %75
  %78 = fmul <16 x float> %10, %61
  %79 = fadd <16 x float> %77, %78
  %80 = select <16 x i1> %11, <16 x float> <float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000, float 0xBFF20F8F20000000>, <16 x float> <float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000, float 0xBFF1FE6C20000000>
  %81 = select <16 x i1> %11, <16 x float> <float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000, float 0x3E688F16C0000000>, <16 x float> <float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000, float 0xBE66E4CF00000000>
  %82 = select <16 x i1> %9, <16 x float> <float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000, float 0x3FF20DD740000000>, <16 x float> %80
  %83 = select <16 x i1> %9, <16 x float> <float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000, float 0x3E6CD2F540000000>, <16 x float> %81
  %84 = fadd <16 x float> %82, %66
  %85 = fsub <16 x float> %84, %66
  %86 = fsub <16 x float> %84, %85
  %87 = fsub <16 x float> %66, %86
  %88 = fsub <16 x float> %82, %85
  %89 = fadd <16 x float> %88, %87
  %90 = fadd <16 x float> %83, %79
  %91 = fadd <16 x float> %89, %90
  %92 = bitcast <16 x float> %84 to <8 x i64>
  %93 = and <8 x i64> %92, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %94 = bitcast <8 x i64> %93 to <16 x float>
  %95 = fsub <16 x float> %84, %94
  %96 = and <8 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944>
  %97 = bitcast <8 x i64> %96 to <16 x float>
  %98 = fsub <16 x float> %4, %97
  %99 = fmul <16 x float> %84, %4
  %100 = bitcast <16 x float> %99 to <8 x i64>
  %101 = xor <8 x i64> %100, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %102 = bitcast <8 x i64> %101 to <16 x float>
  %103 = fmul <16 x float> %97, %94
  %104 = fadd <16 x float> %103, %102
  %105 = fmul <16 x float> %95, %97
  %106 = fadd <16 x float> %105, %104
  %107 = fmul <16 x float> %98, %94
  %108 = fadd <16 x float> %107, %106
  %109 = fmul <16 x float> %98, %95
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %91, %4
  %112 = fadd <16 x float> %110, %111
  %113 = fadd <16 x float> %99, %112
  %114 = fmul <16 x float> %113, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %115 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %114, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %116 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %115, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %117 = fmul <16 x float> %116, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %118 = fadd <16 x float> %117, %99
  %119 = fsub <16 x float> %118, %99
  %120 = fsub <16 x float> %118, %119
  %121 = fsub <16 x float> %99, %120
  %122 = fsub <16 x float> %117, %119
  %123 = fadd <16 x float> %122, %121
  %124 = fadd <16 x float> %123, %112
  %125 = fmul <16 x float> %116, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %126 = fadd <16 x float> %125, %118
  %127 = fsub <16 x float> %126, %118
  %128 = fsub <16 x float> %126, %127
  %129 = fsub <16 x float> %118, %128
  %130 = fsub <16 x float> %125, %127
  %131 = fadd <16 x float> %130, %129
  %132 = fadd <16 x float> %131, %124
  %133 = fmul <16 x float> %126, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %134 = fadd <16 x float> %133, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %135 = fmul <16 x float> %126, %134
  %136 = fadd <16 x float> %135, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %137 = fmul <16 x float> %126, %136
  %138 = fadd <16 x float> %137, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %139 = bitcast <16 x float> %126 to <8 x i64>
  %140 = and <8 x i64> %139, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %141 = bitcast <8 x i64> %140 to <16 x float>
  %142 = fsub <16 x float> %126, %141
  %143 = bitcast <16 x float> %138 to <8 x i64>
  %144 = and <8 x i64> %143, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %145 = bitcast <8 x i64> %144 to <16 x float>
  %146 = fsub <16 x float> %138, %145
  %147 = fmul <16 x float> %126, %138
  %148 = bitcast <16 x float> %147 to <8 x i64>
  %149 = xor <8 x i64> %148, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %150 = bitcast <8 x i64> %149 to <16 x float>
  %151 = fmul <16 x float> %141, %145
  %152 = fadd <16 x float> %151, %150
  %153 = fmul <16 x float> %142, %145
  %154 = fadd <16 x float> %153, %152
  %155 = fmul <16 x float> %146, %141
  %156 = fadd <16 x float> %155, %154
  %157 = fmul <16 x float> %142, %146
  %158 = fadd <16 x float> %157, %156
  %159 = fmul <16 x float> %138, %132
  %160 = fadd <16 x float> %159, %158
  %161 = fadd <16 x float> %147, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %162 = fsub <16 x float> %161, %147
  %163 = fsub <16 x float> %161, %162
  %164 = fsub <16 x float> %147, %163
  %165 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %162
  %166 = fadd <16 x float> %165, %164
  %167 = fadd <16 x float> %166, %160
  %168 = bitcast <16 x float> %161 to <8 x i64>
  %169 = and <8 x i64> %168, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = fsub <16 x float> %161, %170
  %172 = fmul <16 x float> %126, %161
  %173 = bitcast <16 x float> %172 to <8 x i64>
  %174 = xor <8 x i64> %173, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <8 x i64> %174 to <16 x float>
  %176 = fmul <16 x float> %141, %170
  %177 = fadd <16 x float> %176, %175
  %178 = fmul <16 x float> %142, %170
  %179 = fadd <16 x float> %178, %177
  %180 = fmul <16 x float> %171, %141
  %181 = fadd <16 x float> %180, %179
  %182 = fmul <16 x float> %142, %171
  %183 = fadd <16 x float> %182, %181
  %184 = fmul <16 x float> %126, %167
  %185 = fadd <16 x float> %183, %184
  %186 = fmul <16 x float> %161, %132
  %187 = fadd <16 x float> %186, %185
  %188 = fadd <16 x float> %172, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %189 = fsub <16 x float> %188, %172
  %190 = fsub <16 x float> %188, %189
  %191 = fsub <16 x float> %172, %190
  %192 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %189
  %193 = fadd <16 x float> %192, %191
  %194 = fadd <16 x float> %193, %187
  %195 = fmul <16 x float> %126, %126
  %196 = bitcast <16 x float> %195 to <8 x i64>
  %197 = xor <8 x i64> %196, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %198 = bitcast <8 x i64> %197 to <16 x float>
  %199 = fmul <16 x float> %141, %141
  %200 = fadd <16 x float> %199, %198
  %201 = fadd <16 x float> %141, %141
  %202 = fmul <16 x float> %201, %142
  %203 = fadd <16 x float> %202, %200
  %204 = fmul <16 x float> %142, %142
  %205 = fadd <16 x float> %204, %203
  %206 = fadd <16 x float> %132, %132
  %207 = fmul <16 x float> %126, %206
  %208 = fadd <16 x float> %205, %207
  %209 = and <8 x i64> %196, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %210 = bitcast <8 x i64> %209 to <16 x float>
  %211 = fsub <16 x float> %195, %210
  %212 = bitcast <16 x float> %188 to <8 x i64>
  %213 = and <8 x i64> %212, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %214 = bitcast <8 x i64> %213 to <16 x float>
  %215 = fsub <16 x float> %188, %214
  %216 = fmul <16 x float> %195, %188
  %217 = bitcast <16 x float> %216 to <8 x i64>
  %218 = xor <8 x i64> %217, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %219 = bitcast <8 x i64> %218 to <16 x float>
  %220 = fmul <16 x float> %210, %214
  %221 = fadd <16 x float> %220, %219
  %222 = fmul <16 x float> %211, %214
  %223 = fadd <16 x float> %222, %221
  %224 = fmul <16 x float> %215, %210
  %225 = fadd <16 x float> %224, %223
  %226 = fmul <16 x float> %211, %215
  %227 = fadd <16 x float> %226, %225
  %228 = fmul <16 x float> %195, %194
  %229 = fadd <16 x float> %227, %228
  %230 = fmul <16 x float> %188, %208
  %231 = fadd <16 x float> %230, %229
  %232 = fadd <16 x float> %126, %216
  %233 = fsub <16 x float> %232, %126
  %234 = fsub <16 x float> %232, %233
  %235 = fsub <16 x float> %126, %234
  %236 = fsub <16 x float> %216, %233
  %237 = fadd <16 x float> %236, %235
  %238 = fadd <16 x float> %132, %231
  %239 = fadd <16 x float> %237, %238
  %240 = fadd <16 x float> %232, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %241 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %240
  %242 = fadd <16 x float> %232, %241
  %243 = fadd <16 x float> %242, %239
  %244 = ashr <16 x i32> %115, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %245 = shl <16 x i32> %244, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %246 = add <16 x i32> %245, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %247 = bitcast <16 x i32> %246 to <16 x float>
  %248 = fmul <16 x float> %240, %247
  %249 = sub <16 x i32> %115, %244
  %250 = shl <16 x i32> %249, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %251 = add <16 x i32> %250, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %252 = bitcast <16 x i32> %251 to <16 x float>
  %253 = fmul <16 x float> %248, %252
  %254 = fmul <16 x float> %243, %247
  %255 = fmul <16 x float> %254, %252
  %256 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %99, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %257 = bitcast i16 %256 to <16 x i1>
  %258 = select <16 x i1> %257, <16 x float> zeroinitializer, <16 x float> %253
  %259 = select <16 x i1> %257, <16 x float> zeroinitializer, <16 x float> %255
  %260 = bitcast <16 x float> %258 to <8 x i64>
  %261 = xor <8 x i64> %260, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %262 = bitcast <16 x float> %259 to <8 x i64>
  %263 = xor <8 x i64> %262, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %264 = bitcast <8 x i64> %261 to <16 x float>
  %265 = bitcast <8 x i64> %263 to <16 x float>
  %266 = fadd <16 x float> %264, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %267 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %266
  %268 = fadd <16 x float> %267, %264
  %269 = fadd <16 x float> %268, %265
  %270 = select <16 x i1> %9, <16 x float> %99, <16 x float> %266
  %271 = select <16 x i1> %9, <16 x float> %112, <16 x float> %269
  %272 = fadd <16 x float> %270, %271
  %273 = bitcast i16 %7 to <16 x i1>
  %274 = select <16 x i1> %273, <16 x float> %272, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %275 = bitcast <16 x float> %274 to <8 x i64>
  %276 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %277 = xor <8 x i64> %276, %275
  %278 = bitcast <8 x i64> %277 to <16 x float>
  %279 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> %4, i32 4, i16 -1, i32 4) #7
  %280 = bitcast i16 %279 to <16 x i1>
  %281 = select <16 x i1> %280, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %278
  ret <16 x float> %281
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_erfcf16_u15avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 17, i16 -1, i32 4) #7
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000, float 0x40019999A0000000>, i32 17, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000, float 0x4011333340000000>, i32 17, i16 -1, i32 4) #7
  %8 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000, float 0x4024333340000000>, i32 17, i16 -1, i32 4) #7
  %9 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %10 = and <8 x i64> %2, <i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944, i64 9223354446816210944>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = fsub <16 x float> %4, %11
  %13 = bitcast <16 x float> %9 to <8 x i64>
  %14 = and <8 x i64> %13, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fsub <16 x float> %9, %15
  %17 = fmul <16 x float> %11, %15
  %18 = fadd <16 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fmul <16 x float> %16, %11
  %20 = fadd <16 x float> %19, %18
  %21 = fmul <16 x float> %12, %15
  %22 = fadd <16 x float> %21, %20
  %23 = fmul <16 x float> %12, %16
  %24 = fadd <16 x float> %23, %22
  %25 = bitcast <16 x float> %24 to <8 x i64>
  %26 = xor <8 x i64> %25, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %27 = bitcast <8 x i64> %26 to <16 x float>
  %28 = xor <8 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = bitcast <8 x i64> %28 to <16 x float>
  %30 = fadd <16 x float> %15, %29
  %31 = fadd <16 x float> %16, %30
  %32 = fmul <16 x float> %15, zeroinitializer
  %33 = fadd <16 x float> %32, %31
  %34 = fmul <16 x float> %16, zeroinitializer
  %35 = fadd <16 x float> %34, %33
  %36 = fmul <16 x float> %9, %27
  %37 = fadd <16 x float> %35, %36
  %38 = fmul <16 x float> %9, zeroinitializer
  %39 = fsub <16 x float> zeroinitializer, %38
  %40 = fmul <16 x float> %9, %39
  %41 = fadd <16 x float> %40, %37
  %42 = bitcast i16 %6 to <16 x i1>
  %43 = select <16 x i1> %42, <16 x float> %4, <16 x float> %9
  %44 = select <16 x i1> %42, <16 x float> zeroinitializer, <16 x float> %41
  %45 = bitcast i16 %7 to <16 x i1>
  %46 = select <16 x i1> %45, <16 x float> <float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000, float 0xBFD8C3CBA0000000>, <16 x float> <float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000, float 0x3FF1D87320000000>
  %47 = select <16 x i1> %42, <16 x float> <float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000, float 0xBEDA28E740000000>, <16 x float> %46
  %48 = bitcast i16 %5 to <16 x i1>
  %49 = select <16 x i1> %48, <16 x float> <float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000, float 0xBF16A4E440000000>, <16 x float> %47
  %50 = select <16 x i1> %45, <16 x float> <float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000, float 0x3FF49BF6E0000000>, <16 x float> <float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000, float 0xBFEE417520000000>
  %51 = select <16 x i1> %42, <16 x float> <float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000, float 0x3F0E2547A0000000>, <16 x float> %50
  %52 = select <16 x i1> %48, <16 x float> <float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000, float 0x3F43A94DE0000000>, <16 x float> %51
  %53 = fmul <16 x float> %43, %49
  %54 = fadd <16 x float> %52, %53
  %55 = select <16 x i1> %45, <16 x float> <float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000, float 0xBFFD11A040000000>, <16 x float> <float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000, float 0xBFD7787020000000>
  %56 = select <16 x i1> %42, <16 x float> <float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000, float 0x3ED92D8340000000>, <16 x float> %55
  %57 = select <16 x i1> %48, <16 x float> <float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000, float 0xBF5B4A77A0000000>, <16 x float> %56
  %58 = fmul <16 x float> %43, %54
  %59 = fadd <16 x float> %57, %58
  %60 = select <16 x i1> %45, <16 x float> <float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000, float 0x3FF3FC85A0000000>, <16 x float> <float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000, float 0x3FE6E5EB60000000>
  %61 = select <16 x i1> %42, <16 x float> <float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000, float 0xBF675B0E80000000>, <16 x float> %60
  %62 = select <16 x i1> %48, <16 x float> <float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000, float 0x3F27878B80000000>, <16 x float> %61
  %63 = fmul <16 x float> %43, %59
  %64 = fadd <16 x float> %62, %63
  %65 = select <16 x i1> %45, <16 x float> <float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000, float 0xBFC10266E0000000>, <16 x float> <float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000, float 0xBF89DD7B20000000>
  %66 = select <16 x i1> %42, <16 x float> <float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000, float 0x3F9725D000000000>, <16 x float> %65
  %67 = select <16 x i1> %48, <16 x float> <float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000, float 0x3F9399B6E0000000>, <16 x float> %66
  %68 = fmul <16 x float> %43, %64
  %69 = fadd <16 x float> %67, %68
  %70 = bitcast <16 x float> %43 to <8 x i64>
  %71 = and <8 x i64> %70, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %72 = bitcast <8 x i64> %71 to <16 x float>
  %73 = fsub <16 x float> %43, %72
  %74 = bitcast <16 x float> %69 to <8 x i64>
  %75 = and <8 x i64> %74, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %76 = bitcast <8 x i64> %75 to <16 x float>
  %77 = fsub <16 x float> %69, %76
  %78 = fmul <16 x float> %43, %69
  %79 = bitcast <16 x float> %78 to <8 x i64>
  %80 = xor <8 x i64> %79, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fmul <16 x float> %72, %76
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %73, %76
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %77, %72
  %87 = fadd <16 x float> %86, %85
  %88 = fmul <16 x float> %73, %77
  %89 = fadd <16 x float> %88, %87
  %90 = fmul <16 x float> %44, %69
  %91 = fadd <16 x float> %90, %89
  %92 = select <16 x i1> %45, <16 x float> <float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000, float 0xBFDEDF12C0000000>, <16 x float> <float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000, float 0xBFDFEEFC60000000>
  %93 = select <16 x i1> %45, <16 x float> <float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000, float 0xBDE35EC900000000>, <16 x float> <float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000, float 0xBE418FFA80000000>
  %94 = select <16 x i1> %42, <16 x float> <float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000, float 0xBFBAF18180000000>, <16 x float> %92
  %95 = select <16 x i1> %42, <16 x float> <float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000, float 0x3E2E1E43A0000000>, <16 x float> %93
  %96 = select <16 x i1> %48, <16 x float> <float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000, float 0xBFBA4F7C60000000>, <16 x float> %94
  %97 = select <16 x i1> %48, <16 x float> <float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000, float 0xBE1CDE0840000000>, <16 x float> %95
  %98 = fadd <16 x float> %96, %78
  %99 = fsub <16 x float> %98, %78
  %100 = fsub <16 x float> %98, %99
  %101 = fsub <16 x float> %78, %100
  %102 = fsub <16 x float> %96, %99
  %103 = fadd <16 x float> %102, %101
  %104 = fadd <16 x float> %97, %91
  %105 = fadd <16 x float> %103, %104
  %106 = bitcast <16 x float> %98 to <8 x i64>
  %107 = and <8 x i64> %106, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %108 = bitcast <8 x i64> %107 to <16 x float>
  %109 = fsub <16 x float> %98, %108
  %110 = fmul <16 x float> %43, %98
  %111 = bitcast <16 x float> %110 to <8 x i64>
  %112 = xor <8 x i64> %111, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %113 = bitcast <8 x i64> %112 to <16 x float>
  %114 = fmul <16 x float> %72, %108
  %115 = fadd <16 x float> %114, %113
  %116 = fmul <16 x float> %109, %72
  %117 = fadd <16 x float> %116, %115
  %118 = fmul <16 x float> %73, %108
  %119 = fadd <16 x float> %118, %117
  %120 = fmul <16 x float> %73, %109
  %121 = fadd <16 x float> %120, %119
  %122 = fmul <16 x float> %44, %98
  %123 = fadd <16 x float> %122, %121
  %124 = fmul <16 x float> %43, %105
  %125 = fadd <16 x float> %123, %124
  %126 = select <16 x i1> %45, <16 x float> <float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000, float 0xBF56074020000000>, <16 x float> <float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000, float 0xBF08B45540000000>
  %127 = select <16 x i1> %45, <16 x float> <float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000, float 0x3DCEFD2820000000>, <16 x float> <float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000, float 0xBD7B31A100000000>
  %128 = select <16 x i1> %42, <16 x float> <float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000, float 0xBFE456E9A0000000>, <16 x float> %126
  %129 = select <16 x i1> %42, <16 x float> <float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000, float 0xBE50C52E80000000>, <16 x float> %127
  %130 = select <16 x i1> %48, <16 x float> <float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000, float 0xBFE45F2FE0000000>, <16 x float> %128
  %131 = select <16 x i1> %48, <16 x float> <float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000, float 0x3E5AE7E1A0000000>, <16 x float> %129
  %132 = fadd <16 x float> %130, %110
  %133 = fsub <16 x float> %132, %110
  %134 = fsub <16 x float> %132, %133
  %135 = fsub <16 x float> %110, %134
  %136 = fsub <16 x float> %130, %133
  %137 = fadd <16 x float> %136, %135
  %138 = fadd <16 x float> %131, %125
  %139 = fadd <16 x float> %137, %138
  %140 = bitcast <16 x float> %132 to <8 x i64>
  %141 = and <8 x i64> %140, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %142 = bitcast <8 x i64> %141 to <16 x float>
  %143 = fsub <16 x float> %132, %142
  %144 = fmul <16 x float> %43, %132
  %145 = bitcast <16 x float> %144 to <8 x i64>
  %146 = xor <8 x i64> %145, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %147 = bitcast <8 x i64> %146 to <16 x float>
  %148 = fmul <16 x float> %72, %142
  %149 = fadd <16 x float> %148, %147
  %150 = fmul <16 x float> %143, %72
  %151 = fadd <16 x float> %150, %149
  %152 = fmul <16 x float> %73, %142
  %153 = fadd <16 x float> %152, %151
  %154 = fmul <16 x float> %73, %143
  %155 = fadd <16 x float> %154, %153
  %156 = fmul <16 x float> %44, %132
  %157 = fadd <16 x float> %156, %155
  %158 = fmul <16 x float> %43, %139
  %159 = fadd <16 x float> %157, %158
  %160 = select <16 x i1> %45, <16 x float> <float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000, float 0xBFE25071A0000000>, <16 x float> <float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000, float 0xBFE250CE60000000>
  %161 = select <16 x i1> %45, <16 x float> <float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000, float 0x3E5A46B5C0000000>, <16 x float> <float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000, float 0x3E20AB5520000000>
  %162 = select <16 x i1> %42, <16 x float> <float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000, float 0xBFF20E94C0000000>, <16 x float> %160
  %163 = select <16 x i1> %42, <16 x float> <float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000, float 0xBE68ACFC60000000>, <16 x float> %161
  %164 = select <16 x i1> %48, <16 x float> <float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000, float 0xBFF20DD760000000>, <16 x float> %162
  %165 = select <16 x i1> %48, <16 x float> <float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000, float 0x3E69AD1700000000>, <16 x float> %163
  %166 = fadd <16 x float> %164, %144
  %167 = fsub <16 x float> %166, %144
  %168 = fsub <16 x float> %166, %167
  %169 = fsub <16 x float> %144, %168
  %170 = fsub <16 x float> %164, %167
  %171 = fadd <16 x float> %170, %169
  %172 = fadd <16 x float> %165, %159
  %173 = fadd <16 x float> %171, %172
  %174 = or <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %175 = bitcast <8 x i64> %174 to <16 x float>
  %176 = select <16 x i1> %42, <16 x float> %166, <16 x float> %175
  %177 = select <16 x i1> %42, <16 x float> %173, <16 x float> zeroinitializer
  %178 = bitcast <16 x float> %176 to <8 x i64>
  %179 = and <8 x i64> %178, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %180 = bitcast <8 x i64> %179 to <16 x float>
  %181 = fsub <16 x float> %176, %180
  %182 = fmul <16 x float> %176, %4
  %183 = bitcast <16 x float> %182 to <8 x i64>
  %184 = xor <8 x i64> %183, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %185 = bitcast <8 x i64> %184 to <16 x float>
  %186 = fmul <16 x float> %11, %180
  %187 = fadd <16 x float> %186, %185
  %188 = fmul <16 x float> %181, %11
  %189 = fadd <16 x float> %188, %187
  %190 = fmul <16 x float> %12, %180
  %191 = fadd <16 x float> %190, %189
  %192 = fmul <16 x float> %12, %181
  %193 = fadd <16 x float> %192, %191
  %194 = fmul <16 x float> %177, %4
  %195 = fadd <16 x float> %193, %194
  %196 = fadd <16 x float> %166, %182
  %197 = fsub <16 x float> %196, %182
  %198 = fsub <16 x float> %196, %197
  %199 = fsub <16 x float> %182, %198
  %200 = fsub <16 x float> %166, %197
  %201 = fadd <16 x float> %200, %199
  %202 = fadd <16 x float> %173, %195
  %203 = fadd <16 x float> %201, %202
  %204 = select <16 x i1> %42, <16 x float> %182, <16 x float> %196
  %205 = select <16 x i1> %42, <16 x float> %195, <16 x float> %203
  %206 = fadd <16 x float> %204, %205
  %207 = fmul <16 x float> %206, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %208 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %207, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %209 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %208, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %210 = fmul <16 x float> %209, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %211 = fadd <16 x float> %210, %204
  %212 = fsub <16 x float> %211, %204
  %213 = fsub <16 x float> %211, %212
  %214 = fsub <16 x float> %204, %213
  %215 = fsub <16 x float> %210, %212
  %216 = fadd <16 x float> %215, %214
  %217 = fadd <16 x float> %216, %205
  %218 = fmul <16 x float> %209, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %219 = fadd <16 x float> %218, %211
  %220 = fsub <16 x float> %219, %211
  %221 = fsub <16 x float> %219, %220
  %222 = fsub <16 x float> %211, %221
  %223 = fsub <16 x float> %218, %220
  %224 = fadd <16 x float> %223, %222
  %225 = fadd <16 x float> %224, %217
  %226 = fmul <16 x float> %219, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %227 = fadd <16 x float> %226, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %228 = fmul <16 x float> %219, %227
  %229 = fadd <16 x float> %228, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %230 = fmul <16 x float> %219, %229
  %231 = fadd <16 x float> %230, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %232 = bitcast <16 x float> %219 to <8 x i64>
  %233 = and <8 x i64> %232, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %234 = bitcast <8 x i64> %233 to <16 x float>
  %235 = fsub <16 x float> %219, %234
  %236 = bitcast <16 x float> %231 to <8 x i64>
  %237 = and <8 x i64> %236, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %238 = bitcast <8 x i64> %237 to <16 x float>
  %239 = fsub <16 x float> %231, %238
  %240 = fmul <16 x float> %219, %231
  %241 = bitcast <16 x float> %240 to <8 x i64>
  %242 = xor <8 x i64> %241, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %243 = bitcast <8 x i64> %242 to <16 x float>
  %244 = fmul <16 x float> %234, %238
  %245 = fadd <16 x float> %244, %243
  %246 = fmul <16 x float> %235, %238
  %247 = fadd <16 x float> %246, %245
  %248 = fmul <16 x float> %239, %234
  %249 = fadd <16 x float> %248, %247
  %250 = fmul <16 x float> %235, %239
  %251 = fadd <16 x float> %250, %249
  %252 = fmul <16 x float> %231, %225
  %253 = fadd <16 x float> %251, %252
  %254 = fadd <16 x float> %240, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %255 = fsub <16 x float> %254, %240
  %256 = fsub <16 x float> %254, %255
  %257 = fsub <16 x float> %240, %256
  %258 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %255
  %259 = fadd <16 x float> %258, %257
  %260 = fadd <16 x float> %259, %253
  %261 = bitcast <16 x float> %254 to <8 x i64>
  %262 = and <8 x i64> %261, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %263 = bitcast <8 x i64> %262 to <16 x float>
  %264 = fsub <16 x float> %254, %263
  %265 = fmul <16 x float> %219, %254
  %266 = bitcast <16 x float> %265 to <8 x i64>
  %267 = xor <8 x i64> %266, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %268 = bitcast <8 x i64> %267 to <16 x float>
  %269 = fmul <16 x float> %234, %263
  %270 = fadd <16 x float> %269, %268
  %271 = fmul <16 x float> %235, %263
  %272 = fadd <16 x float> %271, %270
  %273 = fmul <16 x float> %264, %234
  %274 = fadd <16 x float> %273, %272
  %275 = fmul <16 x float> %235, %264
  %276 = fadd <16 x float> %275, %274
  %277 = fmul <16 x float> %219, %260
  %278 = fadd <16 x float> %276, %277
  %279 = fmul <16 x float> %254, %225
  %280 = fadd <16 x float> %279, %278
  %281 = fadd <16 x float> %265, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %282 = fsub <16 x float> %281, %265
  %283 = fsub <16 x float> %281, %282
  %284 = fsub <16 x float> %265, %283
  %285 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %282
  %286 = fadd <16 x float> %285, %284
  %287 = fadd <16 x float> %286, %280
  %288 = fmul <16 x float> %219, %219
  %289 = bitcast <16 x float> %288 to <8 x i64>
  %290 = xor <8 x i64> %289, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %291 = bitcast <8 x i64> %290 to <16 x float>
  %292 = fmul <16 x float> %234, %234
  %293 = fadd <16 x float> %292, %291
  %294 = fadd <16 x float> %234, %234
  %295 = fmul <16 x float> %294, %235
  %296 = fadd <16 x float> %295, %293
  %297 = fmul <16 x float> %235, %235
  %298 = fadd <16 x float> %297, %296
  %299 = fadd <16 x float> %225, %225
  %300 = fmul <16 x float> %219, %299
  %301 = fadd <16 x float> %298, %300
  %302 = and <8 x i64> %289, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %303 = bitcast <8 x i64> %302 to <16 x float>
  %304 = fsub <16 x float> %288, %303
  %305 = bitcast <16 x float> %281 to <8 x i64>
  %306 = and <8 x i64> %305, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %307 = bitcast <8 x i64> %306 to <16 x float>
  %308 = fsub <16 x float> %281, %307
  %309 = fmul <16 x float> %288, %281
  %310 = bitcast <16 x float> %309 to <8 x i64>
  %311 = xor <8 x i64> %310, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %312 = bitcast <8 x i64> %311 to <16 x float>
  %313 = fmul <16 x float> %303, %307
  %314 = fadd <16 x float> %313, %312
  %315 = fmul <16 x float> %304, %307
  %316 = fadd <16 x float> %315, %314
  %317 = fmul <16 x float> %308, %303
  %318 = fadd <16 x float> %317, %316
  %319 = fmul <16 x float> %304, %308
  %320 = fadd <16 x float> %319, %318
  %321 = fmul <16 x float> %288, %287
  %322 = fadd <16 x float> %320, %321
  %323 = fmul <16 x float> %281, %301
  %324 = fadd <16 x float> %323, %322
  %325 = fadd <16 x float> %219, %309
  %326 = fsub <16 x float> %325, %219
  %327 = fsub <16 x float> %325, %326
  %328 = fsub <16 x float> %219, %327
  %329 = fsub <16 x float> %309, %326
  %330 = fadd <16 x float> %329, %328
  %331 = fadd <16 x float> %225, %324
  %332 = fadd <16 x float> %330, %331
  %333 = fadd <16 x float> %325, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %334 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %333
  %335 = fadd <16 x float> %325, %334
  %336 = fadd <16 x float> %335, %332
  %337 = ashr <16 x i32> %208, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %338 = shl <16 x i32> %337, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %339 = add <16 x i32> %338, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %340 = bitcast <16 x i32> %339 to <16 x float>
  %341 = fmul <16 x float> %333, %340
  %342 = sub <16 x i32> %208, %337
  %343 = shl <16 x i32> %342, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %344 = add <16 x i32> %343, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %345 = bitcast <16 x i32> %344 to <16 x float>
  %346 = fmul <16 x float> %341, %345
  %347 = fmul <16 x float> %336, %340
  %348 = fmul <16 x float> %347, %345
  %349 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %204, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %350 = bitcast i16 %349 to <16 x i1>
  %351 = select <16 x i1> %350, <16 x float> zeroinitializer, <16 x float> %346
  %352 = select <16 x i1> %350, <16 x float> zeroinitializer, <16 x float> %348
  %353 = bitcast <16 x float> %351 to <8 x i64>
  %354 = and <8 x i64> %353, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %355 = bitcast <8 x i64> %354 to <16 x float>
  %356 = fsub <16 x float> %351, %355
  %357 = fmul <16 x float> %43, %351
  %358 = bitcast <16 x float> %357 to <8 x i64>
  %359 = xor <8 x i64> %358, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %360 = bitcast <8 x i64> %359 to <16 x float>
  %361 = fmul <16 x float> %72, %355
  %362 = fadd <16 x float> %361, %360
  %363 = fmul <16 x float> %356, %72
  %364 = fadd <16 x float> %363, %362
  %365 = fmul <16 x float> %73, %355
  %366 = fadd <16 x float> %365, %364
  %367 = fmul <16 x float> %73, %356
  %368 = fadd <16 x float> %367, %366
  %369 = fmul <16 x float> %44, %351
  %370 = fadd <16 x float> %369, %368
  %371 = fmul <16 x float> %43, %352
  %372 = fadd <16 x float> %370, %371
  %373 = select <16 x i1> %42, <16 x float> %351, <16 x float> %357
  %374 = select <16 x i1> %42, <16 x float> %352, <16 x float> %372
  %375 = fadd <16 x float> %373, %374
  %376 = bitcast i16 %8 to <16 x i1>
  %377 = select <16 x i1> %376, <16 x float> %375, <16 x float> zeroinitializer
  %378 = bitcast <16 x float> %0 to <16 x i32>
  %379 = icmp slt <16 x i32> %378, zeroinitializer
  %380 = fsub <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %377
  %381 = select <16 x i1> %379, <16 x float> %380, <16 x float> %377
  %382 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %383 = bitcast i16 %382 to <16 x i1>
  %384 = select <16 x i1> %383, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %381
  ret <16 x float> %384
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif16_u05avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = fmul <16 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = lshr <16 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <16 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <16 x i32> %6, %4
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = fsub <16 x float> %3, %9
  %11 = fmul <16 x float> %10, %10
  %12 = bitcast <16 x float> %10 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %10, %14
  %16 = bitcast <16 x float> %11 to <8 x i64>
  %17 = xor <8 x i64> %16, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %18 = bitcast <8 x i64> %17 to <16 x float>
  %19 = fmul <16 x float> %14, %14
  %20 = fadd <16 x float> %19, %18
  %21 = fmul <16 x float> %15, %14
  %22 = fadd <16 x float> %21, %20
  %23 = fadd <16 x float> %21, %22
  %24 = fmul <16 x float> %15, %15
  %25 = fadd <16 x float> %24, %23
  %26 = fmul <16 x float> %11, <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %27 = fadd <16 x float> %26, <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %28 = fmul <16 x float> %11, %27
  %29 = fadd <16 x float> %28, <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %30 = fmul <16 x float> %11, %29
  %31 = fadd <16 x float> %30, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %32 = fsub <16 x float> %31, %30
  %33 = fsub <16 x float> %31, %32
  %34 = fsub <16 x float> %30, %33
  %35 = fsub <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>, %32
  %36 = fadd <16 x float> %35, %34
  %37 = fadd <16 x float> %36, <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %38 = and <8 x i64> %16, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %11, %39
  %41 = bitcast <16 x float> %31 to <8 x i64>
  %42 = and <8 x i64> %41, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = fsub <16 x float> %31, %43
  %45 = fmul <16 x float> %11, %31
  %46 = bitcast <16 x float> %45 to <8 x i64>
  %47 = xor <8 x i64> %46, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %39, %43
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %40, %43
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %44, %39
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %40, %44
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %11, %37
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %31, %25
  %60 = fadd <16 x float> %59, %58
  %61 = fadd <16 x float> %45, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %62 = fsub <16 x float> %61, %45
  %63 = fsub <16 x float> %61, %62
  %64 = fsub <16 x float> %45, %63
  %65 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %62
  %66 = fadd <16 x float> %65, %64
  %67 = fadd <16 x float> %60, <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %68 = fadd <16 x float> %66, %67
  %69 = bitcast <16 x float> %61 to <8 x i64>
  %70 = and <8 x i64> %69, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %71 = bitcast <8 x i64> %70 to <16 x float>
  %72 = fsub <16 x float> %61, %71
  %73 = fmul <16 x float> %10, %61
  %74 = bitcast <16 x float> %73 to <8 x i64>
  %75 = xor <8 x i64> %74, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = bitcast <8 x i64> %75 to <16 x float>
  %77 = fmul <16 x float> %14, %71
  %78 = fadd <16 x float> %77, %76
  %79 = fmul <16 x float> %72, %14
  %80 = fadd <16 x float> %79, %78
  %81 = fmul <16 x float> %15, %71
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %15, %72
  %84 = fadd <16 x float> %83, %82
  %85 = fmul <16 x float> %10, %68
  %86 = fadd <16 x float> %84, %85
  %87 = fadd <16 x float> %73, %86
  %88 = bitcast <16 x float> %1 to <16 x i32>
  %89 = icmp eq <16 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = select <16 x i1> %89, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %87
  %91 = fmul <16 x float> %11, <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>
  %92 = fadd <16 x float> %91, <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>
  %93 = fmul <16 x float> %11, %92
  %94 = fadd <16 x float> %93, <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>
  %95 = fmul <16 x float> %11, %94
  %96 = fadd <16 x float> %95, <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>
  %97 = fsub <16 x float> %96, %95
  %98 = fsub <16 x float> %96, %97
  %99 = fsub <16 x float> %95, %98
  %100 = fsub <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, %97
  %101 = fadd <16 x float> %100, %99
  %102 = fadd <16 x float> %101, <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>
  %103 = bitcast <16 x float> %96 to <8 x i64>
  %104 = and <8 x i64> %103, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %105 = bitcast <8 x i64> %104 to <16 x float>
  %106 = fsub <16 x float> %96, %105
  %107 = fmul <16 x float> %11, %96
  %108 = bitcast <16 x float> %107 to <8 x i64>
  %109 = xor <8 x i64> %108, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %110 = bitcast <8 x i64> %109 to <16 x float>
  %111 = fmul <16 x float> %39, %105
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %40, %105
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %106, %39
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %40, %106
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %11, %102
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %96, %25
  %122 = fadd <16 x float> %121, %120
  %123 = fadd <16 x float> %107, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %124 = fsub <16 x float> %123, %107
  %125 = fsub <16 x float> %123, %124
  %126 = fsub <16 x float> %107, %125
  %127 = fsub <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, %124
  %128 = fadd <16 x float> %127, %126
  %129 = fadd <16 x float> %122, <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>
  %130 = fadd <16 x float> %128, %129
  %131 = bitcast <16 x float> %123 to <8 x i64>
  %132 = and <8 x i64> %131, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %133 = bitcast <8 x i64> %132 to <16 x float>
  %134 = fsub <16 x float> %123, %133
  %135 = fmul <16 x float> %11, %123
  %136 = bitcast <16 x float> %135 to <8 x i64>
  %137 = xor <8 x i64> %136, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %138 = bitcast <8 x i64> %137 to <16 x float>
  %139 = fmul <16 x float> %39, %133
  %140 = fadd <16 x float> %139, %138
  %141 = fmul <16 x float> %134, %39
  %142 = fadd <16 x float> %141, %140
  %143 = fmul <16 x float> %40, %133
  %144 = fadd <16 x float> %143, %142
  %145 = fmul <16 x float> %40, %134
  %146 = fadd <16 x float> %145, %144
  %147 = fmul <16 x float> %25, %123
  %148 = fadd <16 x float> %147, %146
  %149 = fmul <16 x float> %11, %130
  %150 = fadd <16 x float> %148, %149
  %151 = fadd <16 x float> %135, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %152 = fsub <16 x float> %151, %135
  %153 = fsub <16 x float> %151, %152
  %154 = fsub <16 x float> %135, %153
  %155 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %152
  %156 = fadd <16 x float> %155, %154
  %157 = fadd <16 x float> %156, %150
  %158 = fadd <16 x float> %151, %157
  %159 = and <16 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %160 = icmp eq <16 x i32> %159, zeroinitializer
  %161 = select <16 x i1> %160, <16 x float> %90, <16 x float> %158
  %162 = select <16 x i1> %160, <16 x float> %158, <16 x float> %90
  %163 = shl <16 x i32> %7, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %164 = and <16 x i32> %163, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %165 = shl <16 x i32> %8, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %166 = add <16 x i32> %165, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %167 = and <16 x i32> %166, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %168 = bitcast <16 x float> %1 to <8 x i64>
  %169 = and <8 x i64> %168, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %170 = bitcast <8 x i64> %169 to <16 x float>
  %171 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i32 30, i16 -1, i32 4) #7
  %172 = bitcast <16 x float> %161 to <16 x i32>
  %173 = xor <16 x i32> %164, %172
  %174 = bitcast i16 %171 to <16 x i1>
  %175 = bitcast <16 x float> %162 to <16 x i32>
  %176 = xor <16 x i32> %167, %175
  %177 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %170, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = bitcast <16 x i32> %173 to <16 x float>
  %180 = select <16 x i1> %174, <16 x float> zeroinitializer, <16 x float> %179
  %181 = select <16 x i1> %178, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %180
  %182 = bitcast <16 x i32> %176 to <16 x float>
  %183 = select <16 x i1> %174, <16 x float> zeroinitializer, <16 x float> %182
  %184 = select <16 x i1> %178, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %183
  %185 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 0
  store <16 x float> %181, <16 x float>* %185, align 64, !alias.scope !27
  %186 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  store <16 x float> %184, <16 x float>* %186, align 64, !alias.scope !27
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_sincospif16_u35avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = fmul <16 x float> %1, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = lshr <16 x i32> %4, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %6 = xor <16 x i32> %5, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %7 = add <16 x i32> %6, %4
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = fsub <16 x float> %3, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %11, <float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000, float 0xBF02E11480000000>
  %13 = fadd <16 x float> %12, <float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000, float 0x3F646617E0000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %16 = fmul <16 x float> %11, %15
  %17 = fadd <16 x float> %16, <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %18 = fmul <16 x float> %10, %17
  %19 = fmul <16 x float> %11, <float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000, float 0x3ECDB1B200000000>
  %20 = fadd <16 x float> %19, <float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000, float 0xBF355CA860000000>
  %21 = fmul <16 x float> %11, %20
  %22 = fadd <16 x float> %21, <float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000, float 0x3F903C1D20000000>
  %23 = fmul <16 x float> %11, %22
  %24 = fadd <16 x float> %23, <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>
  %25 = fmul <16 x float> %11, %24
  %26 = fadd <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = and <16 x i32> %7, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %28 = icmp eq <16 x i32> %27, zeroinitializer
  %29 = select <16 x i1> %28, <16 x float> %18, <16 x float> %26
  %30 = select <16 x i1> %28, <16 x float> %26, <16 x float> %18
  %31 = shl <16 x i32> %7, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %32 = and <16 x i32> %31, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %33 = shl <16 x i32> %8, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %34 = add <16 x i32> %33, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %35 = and <16 x i32> %34, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %36 = bitcast <16 x float> %1 to <8 x i64>
  %37 = and <8 x i64> %36, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %38 = bitcast <8 x i64> %37 to <16 x float>
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %38, <16 x float> <float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07, float 1.000000e+07>, i32 30, i16 -1, i32 4) #7
  %40 = bitcast <16 x float> %29 to <16 x i32>
  %41 = xor <16 x i32> %32, %40
  %42 = bitcast i16 %39 to <16 x i1>
  %43 = bitcast <16 x float> %30 to <16 x i32>
  %44 = xor <16 x i32> %35, %43
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %38, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %46 = bitcast i16 %45 to <16 x i1>
  %47 = bitcast <16 x i32> %41 to <16 x float>
  %48 = select <16 x i1> %42, <16 x float> zeroinitializer, <16 x float> %47
  %49 = select <16 x i1> %46, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %48
  %50 = bitcast <16 x i32> %44 to <16 x float>
  %51 = select <16 x i1> %42, <16 x float> zeroinitializer, <16 x float> %50
  %52 = select <16 x i1> %46, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %51
  %53 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 0
  store <16 x float> %49, <16 x float>* %53, align 64, !alias.scope !30
  %54 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  store <16 x float> %52, <16 x float>* %54, align 64, !alias.scope !30
  ret void
}

; Function Attrs: nounwind uwtable
define void @Sleef_cinz_modff16_avx512fnofma(%struct.vfloat2* noalias nocapture sret, <16 x float>) local_unnamed_addr #3 {
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %1, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fsub <16 x float> %1, %4
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 30, i16 -1, i32 4) #7
  %10 = bitcast i16 %9 to <16 x i1>
  %11 = select <16 x i1> %10, <16 x float> zeroinitializer, <16 x float> %5
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = and <8 x i64> %6, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = or <8 x i64> %13, %14
  %16 = fsub <16 x float> %1, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = and <8 x i64> %17, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %19 = or <8 x i64> %18, %14
  %20 = bitcast %struct.vfloat2* %0 to <8 x i64>*
  store <8 x i64> %15, <8 x i64>* %20, align 64, !alias.scope !33
  %21 = getelementptr inbounds %struct.vfloat2, %struct.vfloat2* %0, i64 0, i32 1
  %22 = bitcast <16 x float>* %21 to <8 x i64>*
  store <8 x i64> %19, <8 x i64>* %22, align 64, !alias.scope !33
  ret void
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_atanf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = select <16 x i1> %6, <16 x float> %7, <16 x float> %4
  %9 = fmul <16 x float> %8, %8
  %10 = fmul <16 x float> %9, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %9, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %13 = fadd <16 x float> %12, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %14 = fmul <16 x float> %9, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %15 = fadd <16 x float> %14, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %16 = fmul <16 x float> %10, %13
  %17 = fadd <16 x float> %15, %16
  %18 = fmul <16 x float> %9, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %19 = fadd <16 x float> %18, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %20 = fmul <16 x float> %9, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %21 = fadd <16 x float> %20, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %22 = fmul <16 x float> %10, %19
  %23 = fadd <16 x float> %21, %22
  %24 = fmul <16 x float> %11, %17
  %25 = fadd <16 x float> %23, %24
  %26 = fmul <16 x float> %9, %25
  %27 = fmul <16 x float> %8, %26
  %28 = fadd <16 x float> %8, %27
  %29 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %28
  %30 = select <16 x i1> %6, <16 x float> %29, <16 x float> %28
  %31 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %32 = bitcast <16 x float> %30 to <8 x i64>
  %33 = xor <8 x i64> %31, %32
  %34 = bitcast <8 x i64> %33 to <16 x float>
  ret <16 x float> %34
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_atan2f16_u35avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <16 x i32>
  %7 = ashr <16 x i32> %6, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %8 = and <16 x i32> %7, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %9 = bitcast <16 x float> %1 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = or <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> %5, i32 17, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x i32> %12, <16 x i32> %8
  %16 = or <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = select <16 x i1> %14, <16 x float> %17, <16 x float> %5
  %19 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %11, <16 x float> %5, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %20 = fdiv <16 x float> %18, %19
  %21 = fmul <16 x float> %20, %20
  %22 = fmul <16 x float> %21, %21
  %23 = fmul <16 x float> %22, %22
  %24 = fmul <16 x float> %21, <float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000, float 0x3F672199A0000000>
  %25 = fadd <16 x float> %24, <float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000, float 0xBF905701A0000000>
  %26 = fmul <16 x float> %21, <float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000, float 0x3FA5C336C0000000>
  %27 = fadd <16 x float> %26, <float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000, float 0xBFB32BFF40000000>
  %28 = fmul <16 x float> %22, %25
  %29 = fadd <16 x float> %27, %28
  %30 = fmul <16 x float> %21, <float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000, float 0x3FBB399E40000000>
  %31 = fadd <16 x float> %30, <float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000, float 0xBFC22DF3E0000000>
  %32 = fmul <16 x float> %21, <float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000, float 0x3FC99734E0000000>
  %33 = fadd <16 x float> %32, <float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000, float 0xBFD5554BA0000000>
  %34 = fmul <16 x float> %22, %31
  %35 = fadd <16 x float> %33, %34
  %36 = fmul <16 x float> %23, %29
  %37 = fadd <16 x float> %35, %36
  %38 = fmul <16 x float> %21, %37
  %39 = fmul <16 x float> %20, %38
  %40 = fadd <16 x float> %20, %39
  %41 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %15, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %42 = fmul <16 x float> %41, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %43 = fadd <16 x float> %42, %40
  %44 = bitcast <16 x float> %43 to <8 x i64>
  %45 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %46 = xor <8 x i64> %45, %44
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %50 = or i16 %49, %48
  %51 = or <8 x i64> %45, <i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691, i64 4596222329050697691>
  %52 = bitcast i16 %48 to <16 x i1>
  %53 = bitcast <8 x i64> %51 to <16 x float>
  %54 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %53
  %55 = select <16 x i1> %52, <16 x float> %54, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %56 = bitcast i16 %50 to <16 x i1>
  %57 = select <16 x i1> %56, <16 x float> %55, <16 x float> %47
  %58 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %59 = or <8 x i64> %45, <i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115, i64 4560193532023345115>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %60
  %62 = select <16 x i1> %52, <16 x float> %61, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %63 = bitcast i16 %58 to <16 x i1>
  %64 = select <16 x i1> %63, <16 x float> %62, <16 x float> %57
  %65 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %66 = bitcast <16 x i32> %7 to <8 x i64>
  %67 = and <8 x i64> %66, <i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267, i64 4632251126078050267>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = bitcast i16 %65 to <16 x i1>
  %70 = select <16 x i1> %69, <16 x float> %68, <16 x float> %64
  %71 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %72 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %73 = or i16 %72, %71
  %74 = bitcast <16 x float> %70 to <8 x i64>
  %75 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %76 = xor <8 x i64> %75, %74
  %77 = bitcast i16 %73 to <16 x i1>
  %78 = bitcast <8 x i64> %76 to <16 x float>
  %79 = select <16 x i1> %77, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %78
  ret <16 x float> %79
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_asinf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = select <16 x i1> %9, <16 x float> %4, <16 x float> %11
  %13 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %14 = fadd <16 x float> %13, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %15 = fmul <16 x float> %10, %14
  %16 = fadd <16 x float> %15, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %17 = fmul <16 x float> %10, %16
  %18 = fadd <16 x float> %17, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %19 = fmul <16 x float> %10, %18
  %20 = fadd <16 x float> %19, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %21 = fmul <16 x float> %12, %10
  %22 = fmul <16 x float> %21, %20
  %23 = fadd <16 x float> %12, %22
  %24 = fmul <16 x float> %23, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %25 = fadd <16 x float> %24, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %26 = select <16 x i1> %9, <16 x float> %23, <16 x float> %25
  %27 = bitcast <16 x float> %26 to <8 x i64>
  %28 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = xor <8 x i64> %28, %27
  %30 = bitcast <8 x i64> %29 to <16 x float>
  ret <16 x float> %30
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_acosf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = select <16 x i1> %9, <16 x float> %4, <16 x float> %11
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x float> zeroinitializer, <16 x float> %12
  %16 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %17 = fadd <16 x float> %16, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %18 = fmul <16 x float> %10, %17
  %19 = fadd <16 x float> %18, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %20 = fmul <16 x float> %10, %19
  %21 = fadd <16 x float> %20, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %22 = fmul <16 x float> %10, %21
  %23 = fadd <16 x float> %22, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %24 = fmul <16 x float> %10, %15
  %25 = fmul <16 x float> %24, %23
  %26 = bitcast <16 x float> %15 to <8 x i64>
  %27 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %28 = xor <8 x i64> %27, %26
  %29 = bitcast <8 x i64> %28 to <16 x float>
  %30 = bitcast <16 x float> %25 to <8 x i64>
  %31 = xor <8 x i64> %27, %30
  %32 = bitcast <8 x i64> %31 to <16 x float>
  %33 = fadd <16 x float> %29, %32
  %34 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %33
  %35 = fadd <16 x float> %15, %25
  %36 = fmul <16 x float> %35, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %37 = select <16 x i1> %9, <16 x float> %34, <16 x float> %36
  %38 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %39 = bitcast i16 %38 to <16 x i1>
  %40 = xor <16 x i1> %9, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %41 = and <16 x i1> %39, %40
  %42 = bitcast <16 x float> %37 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fadd <16 x float> %44, <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>
  %46 = select <16 x i1> %41, <16 x float> %45, <16 x float> %37
  ret <16 x float> %46
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_atan2f16_u10avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call <16 x float> @Sleef_atan2f16_u10avx512fnofma(<16 x float> %0, <16 x float> %1)
  ret <16 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_asinf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %11, %14
  %16 = fmul <16 x float> %11, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %14, %14
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %15, %14
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %15, %15
  %26 = fadd <16 x float> %25, %24
  %27 = fadd <16 x float> %16, %10
  %28 = fsub <16 x float> %27, %10
  %29 = fsub <16 x float> %27, %28
  %30 = fsub <16 x float> %10, %29
  %31 = fsub <16 x float> %16, %28
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %32, %26
  %34 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %35 = bitcast <16 x float> %34 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %34, %37
  %39 = fmul <16 x float> %14, %37
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %38, %14
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %15, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %15, %38
  %46 = fadd <16 x float> %45, %44
  %47 = xor <8 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %46, %48
  %50 = bitcast <16 x float> %27 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %27, %52
  %54 = fmul <16 x float> %34, %27
  %55 = bitcast <16 x float> %54 to <8 x i64>
  %56 = xor <8 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fmul <16 x float> %37, %52
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %53, %37
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %38, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %38, %53
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %27, %49
  %67 = fadd <16 x float> %65, %66
  %68 = fmul <16 x float> %34, %33
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fmul <16 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = select <16 x i1> %9, <16 x float> %4, <16 x float> %70
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %74 = bitcast i16 %73 to <16 x i1>
  %75 = select <16 x i1> %74, <16 x float> zeroinitializer, <16 x float> %72
  %76 = or i16 %73, %5
  %77 = bitcast i16 %76 to <16 x i1>
  %78 = select <16 x i1> %77, <16 x float> zeroinitializer, <16 x float> %71
  %79 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %80 = fadd <16 x float> %79, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %81 = fmul <16 x float> %10, %80
  %82 = fadd <16 x float> %81, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %83 = fmul <16 x float> %10, %82
  %84 = fadd <16 x float> %83, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %85 = fmul <16 x float> %10, %84
  %86 = fadd <16 x float> %85, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %87 = fmul <16 x float> %10, %75
  %88 = fmul <16 x float> %87, %86
  %89 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %75
  %90 = fsub <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>, %89
  %91 = fsub <16 x float> %90, %75
  %92 = fadd <16 x float> %91, <float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000, float 0xBE5777A5C0000000>
  %93 = fsub <16 x float> %92, %78
  %94 = fsub <16 x float> %89, %88
  %95 = fsub <16 x float> %89, %94
  %96 = fsub <16 x float> %95, %88
  %97 = fadd <16 x float> %96, %93
  %98 = fadd <16 x float> %75, %88
  %99 = fadd <16 x float> %94, %97
  %100 = fmul <16 x float> %99, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %101 = select <16 x i1> %9, <16 x float> %98, <16 x float> %100
  %102 = bitcast <16 x float> %101 to <8 x i64>
  %103 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %104 = xor <8 x i64> %103, %102
  %105 = bitcast <8 x i64> %104 to <16 x float>
  ret <16 x float> %105
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_acosf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, %0
  %7 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %8 = fmul <16 x float> %7, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %9 = bitcast i16 %5 to <16 x i1>
  %10 = select <16 x i1> %9, <16 x float> %6, <16 x float> %8
  %11 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %10, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %12 = bitcast <16 x float> %11 to <8 x i64>
  %13 = and <8 x i64> %12, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = fsub <16 x float> %11, %14
  %16 = fmul <16 x float> %11, %11
  %17 = bitcast <16 x float> %16 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %14, %14
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %15, %14
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %15, %15
  %26 = fadd <16 x float> %25, %24
  %27 = fadd <16 x float> %16, %10
  %28 = fsub <16 x float> %27, %10
  %29 = fsub <16 x float> %27, %28
  %30 = fsub <16 x float> %10, %29
  %31 = fsub <16 x float> %16, %28
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %32, %26
  %34 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %35 = bitcast <16 x float> %34 to <8 x i64>
  %36 = and <8 x i64> %35, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %37 = bitcast <8 x i64> %36 to <16 x float>
  %38 = fsub <16 x float> %34, %37
  %39 = fmul <16 x float> %14, %37
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %38, %14
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %15, %37
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %15, %38
  %46 = fadd <16 x float> %45, %44
  %47 = xor <8 x i64> %35, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %46, %48
  %50 = bitcast <16 x float> %27 to <8 x i64>
  %51 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fsub <16 x float> %27, %52
  %54 = fmul <16 x float> %34, %27
  %55 = bitcast <16 x float> %54 to <8 x i64>
  %56 = xor <8 x i64> %55, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %57 = bitcast <8 x i64> %56 to <16 x float>
  %58 = fmul <16 x float> %37, %52
  %59 = fadd <16 x float> %58, %57
  %60 = fmul <16 x float> %53, %37
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %38, %52
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %38, %53
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %27, %49
  %67 = fadd <16 x float> %65, %66
  %68 = fmul <16 x float> %34, %33
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %54, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %71 = fmul <16 x float> %69, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %72 = select <16 x i1> %9, <16 x float> %4, <16 x float> %70
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %74 = bitcast i16 %73 to <16 x i1>
  %75 = select <16 x i1> %74, <16 x float> zeroinitializer, <16 x float> %72
  %76 = or i16 %73, %5
  %77 = bitcast i16 %76 to <16 x i1>
  %78 = select <16 x i1> %77, <16 x float> zeroinitializer, <16 x float> %71
  %79 = fmul <16 x float> %10, <float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000, float 0x3FA57DB020000000>
  %80 = fadd <16 x float> %79, <float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000, float 0x3F98D27DC0000000>
  %81 = fmul <16 x float> %10, %80
  %82 = fadd <16 x float> %81, <float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000, float 0x3FA7486640000000>
  %83 = fmul <16 x float> %10, %82
  %84 = fadd <16 x float> %83, <float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000, float 0x3FB32FF140000000>
  %85 = fmul <16 x float> %10, %84
  %86 = fadd <16 x float> %85, <float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000, float 0x3FC5555E40000000>
  %87 = fmul <16 x float> %10, %75
  %88 = fmul <16 x float> %87, %86
  %89 = bitcast <16 x float> %75 to <8 x i64>
  %90 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %91 = xor <8 x i64> %90, %89
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = bitcast <16 x float> %88 to <8 x i64>
  %94 = xor <8 x i64> %90, %93
  %95 = bitcast <8 x i64> %94 to <16 x float>
  %96 = fadd <16 x float> %92, %95
  %97 = fsub <16 x float> %92, %96
  %98 = fadd <16 x float> %97, %95
  %99 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %96
  %100 = fsub <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, %99
  %101 = fsub <16 x float> %100, %96
  %102 = fadd <16 x float> %101, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %103 = fsub <16 x float> %102, %98
  %104 = fadd <16 x float> %75, %88
  %105 = fsub <16 x float> %75, %104
  %106 = fadd <16 x float> %88, %105
  %107 = fadd <16 x float> %106, %78
  %108 = fmul <16 x float> %104, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %109 = fmul <16 x float> %107, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %110 = select <16 x i1> %9, <16 x float> %99, <16 x float> %108
  %111 = select <16 x i1> %9, <16 x float> %103, <16 x float> %109
  %112 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %113 = bitcast i16 %112 to <16 x i1>
  %114 = xor <16 x i1> %9, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %115 = and <16 x i1> %113, %114
  %116 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %110
  %117 = fsub <16 x float> <float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000, float 0x400921FB60000000>, %116
  %118 = fsub <16 x float> %117, %110
  %119 = fadd <16 x float> %118, <float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000, float 0xBE7777A5C0000000>
  %120 = fsub <16 x float> %119, %111
  %121 = select <16 x i1> %115, <16 x float> %116, <16 x float> %110
  %122 = select <16 x i1> %115, <16 x float> %120, <16 x float> %111
  %123 = fadd <16 x float> %121, %122
  ret <16 x float> %123
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_atanf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = select <16 x i1> %6, <16 x i32> <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>, <16 x i32> zeroinitializer
  %8 = select <16 x i1> %6, <16 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <16 x i32> zeroinitializer
  %9 = bitcast <16 x i32> %8 to <8 x i64>
  %10 = xor <8 x i64> %9, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = bitcast <16 x i32> %8 to <16 x float>
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %14 = bitcast i16 %13 to <16 x i1>
  %15 = zext <16 x i1> %14 to <16 x i32>
  %16 = or <16 x i32> %7, %15
  %17 = xor <8 x i64> %9, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %18 = xor <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %17 to <16 x float>
  %20 = bitcast <8 x i64> %18 to <16 x float>
  %21 = select <16 x i1> %14, <16 x float> %19, <16 x float> %4
  %22 = select <16 x i1> %14, <16 x float> %20, <16 x float> zeroinitializer
  %23 = select <16 x i1> %14, <16 x float> %4, <16 x float> %11
  %24 = select <16 x i1> %14, <16 x float> zeroinitializer, <16 x float> %12
  %25 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %23
  %26 = bitcast <16 x float> %23 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %23, %28
  %30 = bitcast <16 x float> %25 to <8 x i64>
  %31 = and <8 x i64> %30, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %32 = bitcast <8 x i64> %31 to <16 x float>
  %33 = fsub <16 x float> %25, %32
  %34 = bitcast <16 x float> %21 to <8 x i64>
  %35 = and <8 x i64> %34, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %36 = bitcast <8 x i64> %35 to <16 x float>
  %37 = fsub <16 x float> %21, %36
  %38 = fmul <16 x float> %21, %25
  %39 = fmul <16 x float> %28, %32
  %40 = fadd <16 x float> %39, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %41 = fmul <16 x float> %33, %28
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %29, %32
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %29, %33
  %46 = fadd <16 x float> %45, %44
  %47 = bitcast <16 x float> %46 to <8 x i64>
  %48 = xor <8 x i64> %47, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = bitcast <16 x float> %38 to <8 x i64>
  %51 = xor <8 x i64> %50, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = bitcast <8 x i64> %51 to <16 x float>
  %53 = fmul <16 x float> %36, %32
  %54 = fadd <16 x float> %53, %52
  %55 = fmul <16 x float> %33, %36
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %37, %32
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %37, %33
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %38, %49
  %62 = fadd <16 x float> %60, %61
  %63 = fmul <16 x float> %24, %38
  %64 = fsub <16 x float> %22, %63
  %65 = fmul <16 x float> %25, %64
  %66 = fadd <16 x float> %65, %62
  %67 = and <8 x i64> %50, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = fsub <16 x float> %38, %68
  %70 = fmul <16 x float> %38, %38
  %71 = bitcast <16 x float> %70 to <8 x i64>
  %72 = xor <8 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x i64> %72 to <16 x float>
  %74 = fmul <16 x float> %68, %68
  %75 = fadd <16 x float> %74, %73
  %76 = fadd <16 x float> %68, %68
  %77 = fmul <16 x float> %76, %69
  %78 = fadd <16 x float> %77, %75
  %79 = fmul <16 x float> %69, %69
  %80 = fadd <16 x float> %79, %78
  %81 = fadd <16 x float> %66, %66
  %82 = fmul <16 x float> %38, %81
  %83 = fadd <16 x float> %80, %82
  %84 = fadd <16 x float> %70, %83
  %85 = fsub <16 x float> %70, %84
  %86 = fadd <16 x float> %83, %85
  %87 = fmul <16 x float> %84, <float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000, float 0xBF5CE6AA20000000>
  %88 = fadd <16 x float> %87, <float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000, float 0x3F86191D60000000>
  %89 = fmul <16 x float> %84, %88
  %90 = fadd <16 x float> %89, <float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000, float 0xBF9FB30CE0000000>
  %91 = fmul <16 x float> %84, %90
  %92 = fadd <16 x float> %91, <float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000, float 0x3FAD8FA3C0000000>
  %93 = fmul <16 x float> %84, %92
  %94 = fadd <16 x float> %93, <float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000, float 0xBFB57A25C0000000>
  %95 = fmul <16 x float> %84, %94
  %96 = fadd <16 x float> %95, <float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000, float 0x3FBC05CDC0000000>
  %97 = fmul <16 x float> %84, %96
  %98 = fadd <16 x float> %97, <float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000, float 0xBFC2419880000000>
  %99 = fmul <16 x float> %84, %98
  %100 = fadd <16 x float> %99, <float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000, float 0x3FC9990CA0000000>
  %101 = fmul <16 x float> %84, %100
  %102 = fadd <16 x float> %101, <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>
  %103 = fsub <16 x float> <float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000, float 0xBFD5555360000000>, %102
  %104 = fadd <16 x float> %101, %103
  %105 = bitcast <16 x float> %84 to <8 x i64>
  %106 = and <8 x i64> %105, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %107 = bitcast <8 x i64> %106 to <16 x float>
  %108 = fsub <16 x float> %84, %107
  %109 = bitcast <16 x float> %102 to <8 x i64>
  %110 = and <8 x i64> %109, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fsub <16 x float> %102, %111
  %113 = fmul <16 x float> %84, %102
  %114 = bitcast <16 x float> %113 to <8 x i64>
  %115 = xor <8 x i64> %114, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <8 x i64> %115 to <16 x float>
  %117 = fmul <16 x float> %107, %111
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %108, %111
  %120 = fadd <16 x float> %119, %118
  %121 = fmul <16 x float> %112, %107
  %122 = fadd <16 x float> %121, %120
  %123 = fmul <16 x float> %108, %112
  %124 = fadd <16 x float> %123, %122
  %125 = fmul <16 x float> %84, %104
  %126 = fadd <16 x float> %125, %124
  %127 = fmul <16 x float> %86, %102
  %128 = fadd <16 x float> %127, %126
  %129 = fadd <16 x float> %113, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <16 x float> %113, %130
  %132 = fadd <16 x float> %131, %128
  %133 = bitcast <16 x float> %129 to <8 x i64>
  %134 = and <8 x i64> %133, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %135 = bitcast <8 x i64> %134 to <16 x float>
  %136 = fsub <16 x float> %129, %135
  %137 = fmul <16 x float> %38, %129
  %138 = bitcast <16 x float> %137 to <8 x i64>
  %139 = xor <8 x i64> %138, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %140 = bitcast <8 x i64> %139 to <16 x float>
  %141 = fmul <16 x float> %68, %135
  %142 = fadd <16 x float> %141, %140
  %143 = fmul <16 x float> %69, %135
  %144 = fadd <16 x float> %143, %142
  %145 = fmul <16 x float> %136, %68
  %146 = fadd <16 x float> %145, %144
  %147 = fmul <16 x float> %69, %136
  %148 = fadd <16 x float> %147, %146
  %149 = fmul <16 x float> %38, %132
  %150 = fadd <16 x float> %148, %149
  %151 = fmul <16 x float> %66, %129
  %152 = fadd <16 x float> %151, %150
  %153 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %16, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %154 = bitcast <16 x float> %153 to <8 x i64>
  %155 = and <8 x i64> %154, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %156 = bitcast <8 x i64> %155 to <16 x float>
  %157 = fsub <16 x float> %153, %156
  %158 = fmul <16 x float> %153, <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>
  %159 = bitcast <16 x float> %158 to <8 x i64>
  %160 = xor <8 x i64> %159, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %161 = bitcast <8 x i64> %160 to <16 x float>
  %162 = fmul <16 x float> %156, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %156, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %157, <float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000, float 0x3FF9200000000000>
  %167 = fadd <16 x float> %166, %165
  %168 = fmul <16 x float> %157, <float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000, float 0x3F3FB60000000000>
  %169 = fadd <16 x float> %168, %167
  %170 = fmul <16 x float> %153, <float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000, float 0xBE6777A5C0000000>
  %171 = fadd <16 x float> %170, %169
  %172 = fadd <16 x float> %158, %137
  %173 = fsub <16 x float> %158, %172
  %174 = fadd <16 x float> %137, %173
  %175 = fadd <16 x float> %171, %174
  %176 = fadd <16 x float> %175, %152
  %177 = fadd <16 x float> %172, %176
  %178 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %179 = bitcast i16 %178 to <16 x i1>
  %180 = select <16 x i1> %179, <16 x float> <float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000, float 0x3FF921FB60000000>, <16 x float> %177
  %181 = bitcast <16 x float> %180 to <8 x i64>
  %182 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %183 = xor <8 x i64> %182, %181
  %184 = bitcast <8 x i64> %183 to <16 x float>
  ret <16 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_logf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %7 = fadd <16 x float> %6, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %8 = fadd <16 x float> %6, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %9 = fdiv <16 x float> %7, %8
  %10 = fmul <16 x float> %9, %9
  %11 = fmul <16 x float> %10, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %12 = fadd <16 x float> %11, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %13 = fmul <16 x float> %10, %12
  %14 = fadd <16 x float> %13, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %15 = fmul <16 x float> %10, %14
  %16 = fadd <16 x float> %15, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %17 = fmul <16 x float> %10, %16
  %18 = fadd <16 x float> %17, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %19 = fmul <16 x float> %3, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %20 = select <16 x i1> %5, <16 x float> <float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000>, <16 x float> %19
  %21 = fmul <16 x float> %9, %18
  %22 = fadd <16 x float> %20, %21
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %22, <16 x float> %0, <16 x i32> <i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880, i32 5242880>, i32 0, i16 -1, i32 4) #7
  ret <16 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_expf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %4, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %4, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %10 = fadd <16 x float> %9, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fmul <16 x float> %8, %8
  %20 = fmul <16 x float> %19, %18
  %21 = fadd <16 x float> %8, %20
  %22 = fadd <16 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %23 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %24 = shl <16 x i32> %23, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %25 = add <16 x i32> %24, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %26 = bitcast <16 x i32> %25 to <16 x float>
  %27 = fmul <16 x float> %22, %26
  %28 = sub <16 x i32> %3, %23
  %29 = shl <16 x i32> %28, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <16 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = fmul <16 x float> %27, %31
  %33 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %34 = bitcast i16 %33 to <16 x i1>
  %35 = select <16 x i1> %34, <16 x float> zeroinitializer, <16 x float> %32
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <16 x float> %0, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %35
  ret <16 x float> %38
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_cbrtf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = add <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %8 = xor <16 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %9 = ashr <16 x i32> %8, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %10 = shl <16 x i32> %9, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %11 = add <16 x i32> %10, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %12 = bitcast <16 x i32> %11 to <16 x float>
  %13 = fmul <16 x float> %12, %0
  %14 = sub <16 x i32> %8, %9
  %15 = shl <16 x i32> %14, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %16 = add <16 x i32> %15, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %17 = bitcast <16 x i32> %16 to <16 x float>
  %18 = fmul <16 x float> %13, %17
  %19 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %20 = fadd <16 x float> %19, <float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03, float 6.144000e+03>
  %21 = fmul <16 x float> %20, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %22 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %21, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %23 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %22, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %24 = fmul <16 x float> %23, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %25 = fsub <16 x float> %20, %24
  %26 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %25, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %27 = icmp eq <16 x i32> %26, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %28 = select <16 x i1> %27, <16 x float> <float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000, float 0x3FF428A300000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = icmp eq <16 x i32> %26, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %30 = select <16 x i1> %29, <16 x float> <float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000, float 0x3FF965FEA0000000>, <16 x float> %28
  %31 = add <16 x i32> %22, <i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048, i32 -2048>
  %32 = ashr <16 x i32> %31, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %33 = shl <16 x i32> %32, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %34 = add <16 x i32> %33, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %35 = bitcast <16 x i32> %34 to <16 x float>
  %36 = fmul <16 x float> %30, %35
  %37 = sub <16 x i32> %31, %32
  %38 = shl <16 x i32> %37, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %39 = add <16 x i32> %38, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %40 = bitcast <16 x i32> %39 to <16 x float>
  %41 = fmul <16 x float> %36, %40
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = bitcast <16 x float> %18 to <8 x i64>
  %44 = and <8 x i64> %43, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %45 = xor <8 x i64> %44, %42
  %46 = bitcast <8 x i64> %45 to <16 x float>
  %47 = and <8 x i64> %43, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %48 = bitcast <8 x i64> %47 to <16 x float>
  %49 = fmul <16 x float> %48, <float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000, float 0xBFE3400420000000>
  %50 = fadd <16 x float> %49, <float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000, float 0x4006912E60000000>
  %51 = fmul <16 x float> %50, %48
  %52 = fadd <16 x float> %51, <float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000, float 0xC01620F460000000>
  %53 = fmul <16 x float> %52, %48
  %54 = fadd <16 x float> %53, <float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000, float 0x401797D220000000>
  %55 = fmul <16 x float> %54, %48
  %56 = fadd <16 x float> %55, <float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000, float 0xC00E79F100000000>
  %57 = fmul <16 x float> %56, %48
  %58 = fadd <16 x float> %57, <float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000, float 0x4001CB0260000000>
  %59 = fmul <16 x float> %58, %48
  %60 = fmul <16 x float> %58, %59
  %61 = fmul <16 x float> %60, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %62 = fmul <16 x float> %58, %60
  %63 = fadd <16 x float> %62, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %64 = fmul <16 x float> %61, %63
  %65 = fsub <16 x float> %60, %64
  %66 = fmul <16 x float> %65, %46
  %67 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %68 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %69 = or <8 x i64> %68, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %70 = bitcast <8 x i64> %69 to <16 x float>
  %71 = bitcast i16 %67 to <16 x i1>
  %72 = select <16 x i1> %71, <16 x float> %70, <16 x float> %66
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %74 = bitcast <8 x i64> %68 to <16 x float>
  %75 = bitcast i16 %73 to <16 x i1>
  %76 = select <16 x i1> %75, <16 x float> %74, <16 x float> %72
  ret <16 x float> %76
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_cbrtf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_cbrtf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_logf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = bitcast <16 x float> %6 to <8 x i64>
  %9 = and <8 x i64> %8, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %10 = bitcast <8 x i64> %9 to <16 x float>
  %11 = fsub <16 x float> %6, %10
  %12 = fmul <16 x float> %6, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %13 = bitcast <16 x float> %12 to <8 x i64>
  %14 = xor <8 x i64> %13, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fmul <16 x float> %10, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %17 = fadd <16 x float> %16, %15
  %18 = fmul <16 x float> %10, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %19 = fadd <16 x float> %18, %17
  %20 = fmul <16 x float> %11, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %11, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %23 = fadd <16 x float> %22, %21
  %24 = fmul <16 x float> %6, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %25 = fadd <16 x float> %24, %23
  %26 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fadd <16 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = fsub <16 x float> %26, %27
  %29 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %28
  %30 = fsub <16 x float> %7, %27
  %31 = fadd <16 x float> %30, %29
  %32 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %33 = fadd <16 x float> %32, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %34 = fsub <16 x float> %32, %33
  %35 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %34
  %36 = fsub <16 x float> %7, %33
  %37 = fadd <16 x float> %36, %35
  %38 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %32
  %39 = bitcast <16 x float> %32 to <8 x i64>
  %40 = and <8 x i64> %39, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = fsub <16 x float> %32, %41
  %43 = bitcast <16 x float> %38 to <8 x i64>
  %44 = and <8 x i64> %43, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %38, %45
  %47 = bitcast <16 x float> %26 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %26, %49
  %51 = fmul <16 x float> %26, %38
  %52 = fmul <16 x float> %41, %45
  %53 = fadd <16 x float> %52, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %54 = fmul <16 x float> %46, %41
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %42, %45
  %57 = fadd <16 x float> %56, %55
  %58 = fmul <16 x float> %42, %46
  %59 = fadd <16 x float> %58, %57
  %60 = bitcast <16 x float> %59 to <8 x i64>
  %61 = xor <8 x i64> %60, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = bitcast <16 x float> %51 to <8 x i64>
  %64 = xor <8 x i64> %63, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fmul <16 x float> %49, %45
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %46, %49
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %50, %45
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %50, %46
  %73 = fadd <16 x float> %72, %71
  %74 = fmul <16 x float> %51, %62
  %75 = fadd <16 x float> %73, %74
  %76 = fmul <16 x float> %51, %37
  %77 = fsub <16 x float> %31, %76
  %78 = fmul <16 x float> %38, %77
  %79 = fadd <16 x float> %78, %75
  %80 = fmul <16 x float> %51, %51
  %81 = fmul <16 x float> %80, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %82 = fadd <16 x float> %81, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %83 = fmul <16 x float> %80, %82
  %84 = fadd <16 x float> %83, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %85 = fmul <16 x float> %51, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %86 = fmul <16 x float> %79, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %87 = fadd <16 x float> %12, %85
  %88 = fsub <16 x float> %12, %87
  %89 = fadd <16 x float> %85, %88
  %90 = fadd <16 x float> %89, %25
  %91 = fadd <16 x float> %90, %86
  %92 = fmul <16 x float> %51, %80
  %93 = fmul <16 x float> %92, %84
  %94 = fadd <16 x float> %87, %93
  %95 = fsub <16 x float> %87, %94
  %96 = fadd <16 x float> %93, %95
  %97 = fadd <16 x float> %96, %91
  %98 = fadd <16 x float> %94, %97
  %99 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %98, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4) #7
  ret <16 x float> %99
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_powf16_u10avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call <16 x float> @Sleef_powf16_u10avx512fnofma(<16 x float> %0, <16 x float> %1)
  ret <16 x float> %3
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_sinhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_sinhf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_coshf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_coshf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_tanhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_tanhf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_sinhf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fmul <16 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <16 x float> %8, %4
  %10 = fmul <16 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <16 x float> %10, %9
  %12 = fmul <16 x float> %11, %11
  %13 = fmul <16 x float> %12, %12
  %14 = fmul <16 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %15 = fadd <16 x float> %14, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %16 = fmul <16 x float> %11, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %17 = fadd <16 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <16 x float> %11, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %19 = fadd <16 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fmul <16 x float> %12, %17
  %21 = fadd <16 x float> %19, %20
  %22 = fmul <16 x float> %13, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fmul <16 x float> %12, %23
  %25 = fadd <16 x float> %11, %24
  %26 = icmp eq <16 x i32> %6, zeroinitializer
  %27 = fadd <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = ashr <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %29 = shl <16 x i32> %28, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %30 = add <16 x i32> %29, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = fmul <16 x float> %27, %31
  %33 = sub <16 x i32> %6, %28
  %34 = shl <16 x i32> %33, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %35 = add <16 x i32> %34, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %36 = bitcast <16 x i32> %35 to <16 x float>
  %37 = fmul <16 x float> %32, %36
  %38 = fadd <16 x float> %37, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %39 = select <16 x i1> %26, <16 x float> %25, <16 x float> %38
  %40 = fadd <16 x float> %39, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %41 = fadd <16 x float> %39, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %42 = fdiv <16 x float> %40, %41
  %43 = fmul <16 x float> %39, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fmul <16 x float> %43, %42
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i32 30, i16 -1, i32 4) #7
  %46 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %44, <16 x float> %44, i32 4, i16 -1, i32 4) #7
  %47 = or i16 %46, %45
  %48 = bitcast i16 %47 to <16 x i1>
  %49 = select <16 x i1> %48, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %44
  %50 = bitcast <16 x float> %49 to <8 x i64>
  %51 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %52 = xor <8 x i64> %51, %50
  %53 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %54 = bitcast i16 %53 to <16 x i1>
  %55 = bitcast <8 x i64> %52 to <16 x float>
  %56 = select <16 x i1> %54, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %55
  ret <16 x float> %56
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_coshf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %6 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %5, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fmul <16 x float> %7, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %9 = fadd <16 x float> %8, %4
  %10 = fmul <16 x float> %7, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %11 = fadd <16 x float> %10, %9
  %12 = fmul <16 x float> %11, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %13 = fadd <16 x float> %12, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %16 = fmul <16 x float> %11, %15
  %17 = fadd <16 x float> %16, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %18 = fmul <16 x float> %11, %17
  %19 = fadd <16 x float> %18, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fmul <16 x float> %11, %19
  %21 = fadd <16 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fmul <16 x float> %11, %11
  %23 = fmul <16 x float> %22, %21
  %24 = fadd <16 x float> %11, %23
  %25 = fadd <16 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %26 = ashr <16 x i32> %6, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %27 = shl <16 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <16 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <16 x i32> %28 to <16 x float>
  %30 = fmul <16 x float> %25, %29
  %31 = sub <16 x i32> %6, %26
  %32 = shl <16 x i32> %31, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %33 = add <16 x i32> %32, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %34 = bitcast <16 x i32> %33 to <16 x float>
  %35 = fmul <16 x float> %30, %34
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> zeroinitializer, <16 x float> %35
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <16 x float> %4, i32 17, i16 -1, i32 4) #7
  %40 = bitcast i16 %39 to <16 x i1>
  %41 = select <16 x i1> %40, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %38
  %42 = fdiv <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %41
  %43 = fmul <16 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %44 = fadd <16 x float> %43, %42
  %45 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01, float 8.800000e+01>, i32 30, i16 -1, i32 4) #7
  %46 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %44, <16 x float> %44, i32 4, i16 -1, i32 4) #7
  %47 = or i16 %46, %45
  %48 = bitcast i16 %47 to <16 x i1>
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %50 = bitcast i16 %49 to <16 x i1>
  %51 = select <16 x i1> %48, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %44
  %52 = select <16 x i1> %50, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %51
  ret <16 x float> %52
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_tanhf16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = fmul <16 x float> %4, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %6 = fmul <16 x float> %5, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %7 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %6, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %7, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %9 = fmul <16 x float> %8, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %10 = fadd <16 x float> %5, %9
  %11 = fmul <16 x float> %8, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %12 = fadd <16 x float> %11, %10
  %13 = fmul <16 x float> %12, %12
  %14 = fmul <16 x float> %13, %13
  %15 = fmul <16 x float> %12, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %16 = fadd <16 x float> %15, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %17 = fmul <16 x float> %12, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %18 = fadd <16 x float> %17, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %19 = fmul <16 x float> %12, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %20 = fadd <16 x float> %19, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = fmul <16 x float> %13, %18
  %22 = fadd <16 x float> %20, %21
  %23 = fmul <16 x float> %14, %16
  %24 = fadd <16 x float> %23, %22
  %25 = fmul <16 x float> %13, %24
  %26 = fadd <16 x float> %12, %25
  %27 = icmp eq <16 x i32> %7, zeroinitializer
  %28 = fadd <16 x float> %26, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %29 = ashr <16 x i32> %7, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %30 = shl <16 x i32> %29, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %31 = add <16 x i32> %30, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %32 = bitcast <16 x i32> %31 to <16 x float>
  %33 = fmul <16 x float> %28, %32
  %34 = sub <16 x i32> %7, %29
  %35 = shl <16 x i32> %34, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %36 = add <16 x i32> %35, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %37 = bitcast <16 x i32> %36 to <16 x float>
  %38 = fmul <16 x float> %33, %37
  %39 = fadd <16 x float> %38, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %40 = select <16 x i1> %27, <16 x float> %26, <16 x float> %39
  %41 = fadd <16 x float> %40, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %42 = fdiv <16 x float> %40, %41
  %43 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000, float 0x4021542460000000>, i32 30, i16 -1, i32 4) #7
  %44 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %42, <16 x float> %42, i32 4, i16 -1, i32 4) #7
  %45 = or i16 %44, %43
  %46 = bitcast i16 %45 to <16 x i1>
  %47 = select <16 x i1> %46, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %42
  %48 = bitcast <16 x float> %47 to <8 x i64>
  %49 = and <8 x i64> %2, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %50 = xor <8 x i64> %49, %48
  %51 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %0, i32 4, i16 -1, i32 4) #7
  %52 = bitcast i16 %51 to <16 x i1>
  %53 = bitcast <8 x i64> %50 to <16 x float>
  %54 = select <16 x i1> %52, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %53
  ret <16 x float> %54
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_asinhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_asinhf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_acoshf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_acoshf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_atanhf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_atanhf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_exp2f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %2
  %5 = fmul <16 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <16 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <16 x float> %4, %6
  %8 = fadd <16 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <16 x float> %4, %8
  %10 = fadd <16 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <16 x float> %4, %10
  %12 = fadd <16 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <16 x float> %4, %12
  %14 = fadd <16 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = bitcast <16 x float> %14 to <8 x i64>
  %16 = and <8 x i64> %15, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = fsub <16 x float> %14, %17
  %19 = bitcast <16 x float> %4 to <8 x i64>
  %20 = and <8 x i64> %19, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %21 = bitcast <8 x i64> %20 to <16 x float>
  %22 = fsub <16 x float> %4, %21
  %23 = fmul <16 x float> %4, %14
  %24 = bitcast <16 x float> %23 to <8 x i64>
  %25 = xor <8 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = fmul <16 x float> %21, %17
  %28 = fadd <16 x float> %27, %26
  %29 = fmul <16 x float> %18, %21
  %30 = fadd <16 x float> %29, %28
  %31 = fmul <16 x float> %22, %17
  %32 = fadd <16 x float> %31, %30
  %33 = fmul <16 x float> %22, %18
  %34 = fadd <16 x float> %33, %32
  %35 = fadd <16 x float> %23, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %35
  %37 = fadd <16 x float> %23, %36
  %38 = fadd <16 x float> %37, %34
  %39 = fadd <16 x float> %35, %38
  %40 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %41 = shl <16 x i32> %40, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %42 = add <16 x i32> %41, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %43 = bitcast <16 x i32> %42 to <16 x float>
  %44 = fmul <16 x float> %39, %43
  %45 = sub <16 x i32> %3, %40
  %46 = shl <16 x i32> %45, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %47 = add <16 x i32> %46, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %48 = bitcast <16 x i32> %47 to <16 x float>
  %49 = fmul <16 x float> %44, %48
  %50 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i32 29, i16 -1, i32 4) #7
  %51 = bitcast i16 %50 to <16 x i1>
  %52 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i32 17, i16 -1, i32 4) #7
  %53 = bitcast i16 %52 to <16 x i1>
  %54 = select <16 x i1> %51, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %49
  %55 = select <16 x i1> %53, <16 x float> zeroinitializer, <16 x float> %54
  ret <16 x float> %55
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_exp2f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %2
  %5 = fmul <16 x float> %4, <float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000, float 0x3F2421B200000000>
  %6 = fadd <16 x float> %5, <float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000, float 0x3F55F14660000000>
  %7 = fmul <16 x float> %4, %6
  %8 = fadd <16 x float> %7, <float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000, float 0x3F83B2CDC0000000>
  %9 = fmul <16 x float> %4, %8
  %10 = fadd <16 x float> %9, <float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000, float 0x3FAC6AF380000000>
  %11 = fmul <16 x float> %4, %10
  %12 = fadd <16 x float> %11, <float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000, float 0x3FCEBFBD80000000>
  %13 = fmul <16 x float> %4, %12
  %14 = fadd <16 x float> %13, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %15 = fmul <16 x float> %4, %14
  %16 = fadd <16 x float> %15, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %17 = ashr <16 x i32> %3, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %18 = shl <16 x i32> %17, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %19 = add <16 x i32> %18, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %20 = bitcast <16 x i32> %19 to <16 x float>
  %21 = fmul <16 x float> %16, %20
  %22 = sub <16 x i32> %3, %17
  %23 = shl <16 x i32> %22, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %24 = add <16 x i32> %23, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %25 = bitcast <16 x i32> %24 to <16 x float>
  %26 = fmul <16 x float> %21, %25
  %27 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, i32 29, i16 -1, i32 4) #7
  %28 = bitcast i16 %27 to <16 x i1>
  %29 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02, float -1.500000e+02>, i32 17, i16 -1, i32 4) #7
  %30 = bitcast i16 %29 to <16 x i1>
  %31 = select <16 x i1> %28, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %26
  %32 = select <16 x i1> %30, <16 x float> zeroinitializer, <16 x float> %31
  ret <16 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_exp10f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2, i32 8, <16 x float> %2, i16 -1, i32 4) #7
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000, float 0x3FB16A1F80000000>
  %10 = fadd <16 x float> %9, <float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000, float 0x3FCA997420000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000, float 0x3FE142AFA0000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000, float 0x3FF2BD6BC0000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000, float 0x40004705A0000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000, float 0x40053524C0000000>
  %19 = fmul <16 x float> %8, %18
  %20 = fadd <16 x float> %19, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %21 = fsub <16 x float> <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>, %20
  %22 = fadd <16 x float> %19, %21
  %23 = fadd <16 x float> %22, <float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000, float 0xBE610586A0000000>
  %24 = bitcast <16 x float> %20 to <8 x i64>
  %25 = and <8 x i64> %24, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = fsub <16 x float> %20, %26
  %28 = bitcast <16 x float> %8 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %8, %30
  %32 = fmul <16 x float> %8, %20
  %33 = bitcast <16 x float> %32 to <8 x i64>
  %34 = xor <8 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = fmul <16 x float> %30, %26
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %27, %30
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %31, %26
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %31, %27
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %8, %23
  %45 = fadd <16 x float> %44, %43
  %46 = fadd <16 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46
  %48 = fadd <16 x float> %32, %47
  %49 = fadd <16 x float> %48, %45
  %50 = fadd <16 x float> %46, %49
  %51 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %52 = shl <16 x i32> %51, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %53 = add <16 x i32> %52, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %54 = bitcast <16 x i32> %53 to <16 x float>
  %55 = fmul <16 x float> %50, %54
  %56 = sub <16 x i32> %4, %51
  %57 = shl <16 x i32> %56, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %58 = add <16 x i32> %57, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %59 = bitcast <16 x i32> %58 to <16 x float>
  %60 = fmul <16 x float> %55, %59
  %61 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i32 30, i16 -1, i32 4) #7
  %62 = bitcast i16 %61 to <16 x i1>
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i32 17, i16 -1, i32 4) #7
  %64 = bitcast i16 %63 to <16 x i1>
  %65 = select <16 x i1> %62, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %60
  %66 = select <16 x i1> %64, <16 x float> zeroinitializer, <16 x float> %65
  ret <16 x float> %66
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_exp10f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000, float 0x400A934F00000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %2, i32 8, <16 x float> %2, i16 -1, i32 4) #7
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = fmul <16 x float> %3, <float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000, float 0xBFD3440000000000>
  %6 = fadd <16 x float> %5, %0
  %7 = fmul <16 x float> %3, <float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000, float 0xBED3509F80000000>
  %8 = fadd <16 x float> %7, %6
  %9 = fmul <16 x float> %8, <float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000, float 0x3FCA6B54E0000000>
  %10 = fadd <16 x float> %9, <float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000, float 0x3FE1565340000000>
  %11 = fmul <16 x float> %8, %10
  %12 = fadd <16 x float> %11, <float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000, float 0x3FF2BD9740000000>
  %13 = fmul <16 x float> %8, %12
  %14 = fadd <16 x float> %13, <float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000, float 0x400046F9C0000000>
  %15 = fmul <16 x float> %8, %14
  %16 = fadd <16 x float> %15, <float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000, float 0x40053524A0000000>
  %17 = fmul <16 x float> %8, %16
  %18 = fadd <16 x float> %17, <float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000, float 0x40026BB1C0000000>
  %19 = fmul <16 x float> %8, %18
  %20 = fadd <16 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %22 = shl <16 x i32> %21, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %23 = add <16 x i32> %22, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %24 = bitcast <16 x i32> %23 to <16 x float>
  %25 = fmul <16 x float> %20, %24
  %26 = sub <16 x i32> %4, %21
  %27 = shl <16 x i32> %26, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %28 = add <16 x i32> %27, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %29 = bitcast <16 x i32> %28 to <16 x float>
  %30 = fmul <16 x float> %25, %29
  %31 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000, float 0x4043441360000000>, i32 30, i16 -1, i32 4) #7
  %32 = bitcast i16 %31 to <16 x i1>
  %33 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01, float -5.000000e+01>, i32 17, i16 -1, i32 4) #7
  %34 = bitcast i16 %33 to <16 x i1>
  %35 = select <16 x i1> %32, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %30
  %36 = select <16 x i1> %34, <16 x float> zeroinitializer, <16 x float> %35
  ret <16 x float> %36
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_expm1f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, zeroinitializer
  %3 = fmul <16 x float> %2, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %4 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %3, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %5 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %4, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %5, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %7 = fadd <16 x float> %6, %0
  %8 = fsub <16 x float> %7, %0
  %9 = fsub <16 x float> %7, %8
  %10 = fsub <16 x float> %0, %9
  %11 = fsub <16 x float> %6, %8
  %12 = fadd <16 x float> %11, %10
  %13 = fadd <16 x float> %12, zeroinitializer
  %14 = fmul <16 x float> %5, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %15 = fadd <16 x float> %14, %7
  %16 = fsub <16 x float> %15, %7
  %17 = fsub <16 x float> %15, %16
  %18 = fsub <16 x float> %7, %17
  %19 = fsub <16 x float> %14, %16
  %20 = fadd <16 x float> %19, %18
  %21 = fadd <16 x float> %20, %13
  %22 = fmul <16 x float> %15, <float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000, float 0x3F29F6FFE0000000>
  %23 = fadd <16 x float> %22, <float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000, float 0x3F56D7EF80000000>
  %24 = fmul <16 x float> %15, %23
  %25 = fadd <16 x float> %24, <float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000, float 0x3F811121A0000000>
  %26 = fmul <16 x float> %15, %25
  %27 = fadd <16 x float> %26, <float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000, float 0x3FA5554B80000000>
  %28 = bitcast <16 x float> %15 to <8 x i64>
  %29 = and <8 x i64> %28, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = fsub <16 x float> %15, %30
  %32 = bitcast <16 x float> %27 to <8 x i64>
  %33 = and <8 x i64> %32, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %34 = bitcast <8 x i64> %33 to <16 x float>
  %35 = fsub <16 x float> %27, %34
  %36 = fmul <16 x float> %15, %27
  %37 = bitcast <16 x float> %36 to <8 x i64>
  %38 = xor <8 x i64> %37, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fmul <16 x float> %30, %34
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %31, %34
  %43 = fadd <16 x float> %42, %41
  %44 = fmul <16 x float> %35, %30
  %45 = fadd <16 x float> %44, %43
  %46 = fmul <16 x float> %31, %35
  %47 = fadd <16 x float> %46, %45
  %48 = fmul <16 x float> %21, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fadd <16 x float> %36, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %51 = fsub <16 x float> %50, %36
  %52 = fsub <16 x float> %50, %51
  %53 = fsub <16 x float> %36, %52
  %54 = fsub <16 x float> <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>, %51
  %55 = fadd <16 x float> %54, %53
  %56 = fadd <16 x float> %55, %49
  %57 = bitcast <16 x float> %50 to <8 x i64>
  %58 = and <8 x i64> %57, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fsub <16 x float> %50, %59
  %61 = fmul <16 x float> %15, %50
  %62 = bitcast <16 x float> %61 to <8 x i64>
  %63 = xor <8 x i64> %62, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %64 = bitcast <8 x i64> %63 to <16 x float>
  %65 = fmul <16 x float> %30, %59
  %66 = fadd <16 x float> %65, %64
  %67 = fmul <16 x float> %31, %59
  %68 = fadd <16 x float> %67, %66
  %69 = fmul <16 x float> %60, %30
  %70 = fadd <16 x float> %69, %68
  %71 = fmul <16 x float> %31, %60
  %72 = fadd <16 x float> %71, %70
  %73 = fmul <16 x float> %15, %56
  %74 = fadd <16 x float> %72, %73
  %75 = fmul <16 x float> %21, %50
  %76 = fadd <16 x float> %75, %74
  %77 = fadd <16 x float> %61, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fsub <16 x float> %77, %61
  %79 = fsub <16 x float> %77, %78
  %80 = fsub <16 x float> %61, %79
  %81 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %78
  %82 = fadd <16 x float> %81, %80
  %83 = fadd <16 x float> %82, %76
  %84 = fmul <16 x float> %15, %15
  %85 = bitcast <16 x float> %84 to <8 x i64>
  %86 = xor <8 x i64> %85, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %87 = bitcast <8 x i64> %86 to <16 x float>
  %88 = fmul <16 x float> %30, %30
  %89 = fadd <16 x float> %88, %87
  %90 = fadd <16 x float> %30, %30
  %91 = fmul <16 x float> %90, %31
  %92 = fadd <16 x float> %91, %89
  %93 = fmul <16 x float> %31, %31
  %94 = fadd <16 x float> %93, %92
  %95 = fadd <16 x float> %21, %21
  %96 = fmul <16 x float> %15, %95
  %97 = fadd <16 x float> %96, %94
  %98 = and <8 x i64> %85, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %99 = bitcast <8 x i64> %98 to <16 x float>
  %100 = fsub <16 x float> %84, %99
  %101 = bitcast <16 x float> %77 to <8 x i64>
  %102 = and <8 x i64> %101, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %103 = bitcast <8 x i64> %102 to <16 x float>
  %104 = fsub <16 x float> %77, %103
  %105 = fmul <16 x float> %84, %77
  %106 = bitcast <16 x float> %105 to <8 x i64>
  %107 = xor <8 x i64> %106, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = bitcast <8 x i64> %107 to <16 x float>
  %109 = fmul <16 x float> %99, %103
  %110 = fadd <16 x float> %109, %108
  %111 = fmul <16 x float> %100, %103
  %112 = fadd <16 x float> %111, %110
  %113 = fmul <16 x float> %104, %99
  %114 = fadd <16 x float> %113, %112
  %115 = fmul <16 x float> %100, %104
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %84, %83
  %118 = fadd <16 x float> %116, %117
  %119 = fmul <16 x float> %97, %77
  %120 = fadd <16 x float> %119, %118
  %121 = fadd <16 x float> %15, %105
  %122 = fsub <16 x float> %121, %15
  %123 = fsub <16 x float> %121, %122
  %124 = fsub <16 x float> %15, %123
  %125 = fsub <16 x float> %105, %122
  %126 = fadd <16 x float> %125, %124
  %127 = fadd <16 x float> %21, %120
  %128 = fadd <16 x float> %126, %127
  %129 = fadd <16 x float> %121, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %130 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %129
  %131 = fadd <16 x float> %121, %130
  %132 = fadd <16 x float> %131, %128
  %133 = ashr <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %134 = shl <16 x i32> %133, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %135 = add <16 x i32> %134, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %136 = bitcast <16 x i32> %135 to <16 x float>
  %137 = fmul <16 x float> %129, %136
  %138 = sub <16 x i32> %4, %133
  %139 = shl <16 x i32> %138, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %140 = add <16 x i32> %139, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %141 = bitcast <16 x i32> %140 to <16 x float>
  %142 = fmul <16 x float> %137, %141
  %143 = fmul <16 x float> %132, %136
  %144 = fmul <16 x float> %143, %141
  %145 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %146 = bitcast i16 %145 to <16 x i1>
  %147 = select <16 x i1> %146, <16 x float> zeroinitializer, <16 x float> %142
  %148 = select <16 x i1> %146, <16 x float> zeroinitializer, <16 x float> %144
  %149 = fadd <16 x float> %147, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %150 = fsub <16 x float> %149, %147
  %151 = fsub <16 x float> %149, %150
  %152 = fsub <16 x float> %147, %151
  %153 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %150
  %154 = fadd <16 x float> %153, %152
  %155 = fadd <16 x float> %154, %148
  %156 = fadd <16 x float> %149, %155
  %157 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000, float 0x40562E42E0000000>, i32 30, i16 -1, i32 4) #7
  %158 = bitcast i16 %157 to <16 x i1>
  %159 = select <16 x i1> %158, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %156
  %160 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000, float 0xC030A2B240000000>, i32 17, i16 -1, i32 4) #7
  %161 = bitcast i16 %160 to <16 x i1>
  %162 = select <16 x i1> %161, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> %159
  %163 = bitcast <16 x float> %0 to <16 x i32>
  %164 = icmp eq <16 x i32> %163, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %165 = select <16 x i1> %164, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %162
  ret <16 x float> %165
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_log10f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fsub <16 x float> %8, %9
  %11 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %10
  %12 = fsub <16 x float> %7, %9
  %13 = fadd <16 x float> %12, %11
  %14 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = fadd <16 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = fsub <16 x float> %7, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %21 = bitcast <16 x float> %14 to <8 x i64>
  %22 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <8 x i64> %22 to <16 x float>
  %24 = fsub <16 x float> %14, %23
  %25 = bitcast <16 x float> %20 to <8 x i64>
  %26 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <8 x i64> %26 to <16 x float>
  %28 = fsub <16 x float> %20, %27
  %29 = bitcast <16 x float> %8 to <8 x i64>
  %30 = and <8 x i64> %29, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = fsub <16 x float> %8, %31
  %33 = fmul <16 x float> %8, %20
  %34 = fmul <16 x float> %23, %27
  %35 = fadd <16 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <16 x float> %28, %23
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %24, %27
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %24, %28
  %41 = fadd <16 x float> %40, %39
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = bitcast <16 x float> %33 to <8 x i64>
  %46 = xor <8 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fmul <16 x float> %31, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fmul <16 x float> %28, %31
  %51 = fadd <16 x float> %50, %49
  %52 = fmul <16 x float> %32, %27
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %32, %28
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %33, %44
  %57 = fadd <16 x float> %55, %56
  %58 = fmul <16 x float> %33, %19
  %59 = fsub <16 x float> %13, %58
  %60 = fmul <16 x float> %20, %59
  %61 = fadd <16 x float> %60, %57
  %62 = fmul <16 x float> %33, %33
  %63 = fmul <16 x float> %62, <float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000, float 0x3FC0D2AA40000000>
  %64 = fadd <16 x float> %63, <float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000, float 0x3FC636DD80000000>
  %65 = fmul <16 x float> %62, %64
  %66 = fadd <16 x float> %65, <float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000, float 0x3FD287ACE0000000>
  %67 = bitcast <16 x float> %6 to <8 x i64>
  %68 = and <8 x i64> %67, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = fsub <16 x float> %6, %69
  %71 = fmul <16 x float> %6, <float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000, float 0x3FD3441360000000>
  %72 = bitcast <16 x float> %71 to <8 x i64>
  %73 = xor <8 x i64> %72, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %74 = bitcast <8 x i64> %73 to <16 x float>
  %75 = fmul <16 x float> %69, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %76 = fadd <16 x float> %75, %74
  %77 = fmul <16 x float> %69, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %78 = fadd <16 x float> %77, %76
  %79 = fmul <16 x float> %70, <float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000, float 0x3FD3440000000000>
  %80 = fadd <16 x float> %79, %78
  %81 = fmul <16 x float> %70, <float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000, float 0x3ED3600000000000>
  %82 = fadd <16 x float> %81, %80
  %83 = fmul <16 x float> %6, <float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000, float 0xBE4EC10C00000000>
  %84 = fadd <16 x float> %83, %82
  %85 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %86 = bitcast <8 x i64> %85 to <16 x float>
  %87 = fsub <16 x float> %33, %86
  %88 = fmul <16 x float> %33, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %89 = bitcast <16 x float> %88 to <8 x i64>
  %90 = xor <8 x i64> %89, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %91 = bitcast <8 x i64> %90 to <16 x float>
  %92 = fmul <16 x float> %86, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %93 = fadd <16 x float> %92, %91
  %94 = fmul <16 x float> %87, <float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000, float 0x3FEBCA0000000000>
  %95 = fadd <16 x float> %94, %93
  %96 = fmul <16 x float> %86, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %97 = fadd <16 x float> %96, %95
  %98 = fmul <16 x float> %87, <float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000, float 0x3F27B20000000000>
  %99 = fadd <16 x float> %98, %97
  %100 = fmul <16 x float> %33, <float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000, float 0xBE574EEEA0000000>
  %101 = fadd <16 x float> %100, %99
  %102 = fmul <16 x float> %61, <float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000, float 0x3FEBCB7B20000000>
  %103 = fadd <16 x float> %101, %102
  %104 = fadd <16 x float> %71, %88
  %105 = fsub <16 x float> %71, %104
  %106 = fadd <16 x float> %88, %105
  %107 = fadd <16 x float> %106, %84
  %108 = fadd <16 x float> %107, %103
  %109 = fmul <16 x float> %33, %62
  %110 = fmul <16 x float> %109, %66
  %111 = fadd <16 x float> %104, %110
  %112 = fsub <16 x float> %104, %111
  %113 = fadd <16 x float> %110, %112
  %114 = fadd <16 x float> %113, %108
  %115 = fadd <16 x float> %111, %114
  %116 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %115, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4) #7
  ret <16 x float> %116
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_log2f16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %8, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fsub <16 x float> %8, %9
  %11 = fsub <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, %10
  %12 = fsub <16 x float> %7, %9
  %13 = fadd <16 x float> %12, %11
  %14 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %15 = fadd <16 x float> %14, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %16 = fsub <16 x float> %14, %15
  %17 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = fsub <16 x float> %7, %15
  %19 = fadd <16 x float> %18, %17
  %20 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %21 = bitcast <16 x float> %14 to <8 x i64>
  %22 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %23 = bitcast <8 x i64> %22 to <16 x float>
  %24 = fsub <16 x float> %14, %23
  %25 = bitcast <16 x float> %20 to <8 x i64>
  %26 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %27 = bitcast <8 x i64> %26 to <16 x float>
  %28 = fsub <16 x float> %20, %27
  %29 = bitcast <16 x float> %8 to <8 x i64>
  %30 = and <8 x i64> %29, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = fsub <16 x float> %8, %31
  %33 = fmul <16 x float> %8, %20
  %34 = fmul <16 x float> %23, %27
  %35 = fadd <16 x float> %34, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %36 = fmul <16 x float> %28, %23
  %37 = fadd <16 x float> %36, %35
  %38 = fmul <16 x float> %24, %27
  %39 = fadd <16 x float> %38, %37
  %40 = fmul <16 x float> %24, %28
  %41 = fadd <16 x float> %40, %39
  %42 = bitcast <16 x float> %41 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = bitcast <16 x float> %33 to <8 x i64>
  %46 = xor <8 x i64> %45, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fmul <16 x float> %31, %27
  %49 = fadd <16 x float> %48, %47
  %50 = fmul <16 x float> %28, %31
  %51 = fadd <16 x float> %50, %49
  %52 = fmul <16 x float> %32, %27
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %32, %28
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %33, %44
  %57 = fadd <16 x float> %55, %56
  %58 = fmul <16 x float> %33, %19
  %59 = fsub <16 x float> %13, %58
  %60 = fmul <16 x float> %20, %59
  %61 = fadd <16 x float> %60, %57
  %62 = fmul <16 x float> %33, %33
  %63 = fmul <16 x float> %62, <float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000, float 0x3FDBFF4360000000>
  %64 = fadd <16 x float> %63, <float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000, float 0x3FE2728420000000>
  %65 = fmul <16 x float> %62, %64
  %66 = fadd <16 x float> %65, <float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000, float 0x3FEEC71380000000>
  %67 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %68 = bitcast <8 x i64> %67 to <16 x float>
  %69 = fsub <16 x float> %33, %68
  %70 = fmul <16 x float> %33, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %71 = bitcast <16 x float> %70 to <8 x i64>
  %72 = xor <8 x i64> %71, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %73 = bitcast <8 x i64> %72 to <16 x float>
  %74 = fmul <16 x float> %68, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %75 = fadd <16 x float> %74, %73
  %76 = fmul <16 x float> %69, <float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000, float 0x4007140000000000>
  %77 = fadd <16 x float> %76, %75
  %78 = fmul <16 x float> %68, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %79 = fadd <16 x float> %78, %77
  %80 = fmul <16 x float> %69, <float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000, float 0x3F44760000000000>
  %81 = fadd <16 x float> %80, %79
  %82 = fmul <16 x float> %33, <float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000, float 0x3E6192FDE0000000>
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %61, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %85 = fadd <16 x float> %83, %84
  %86 = fadd <16 x float> %6, %70
  %87 = fsub <16 x float> %86, %6
  %88 = fsub <16 x float> %86, %87
  %89 = fsub <16 x float> %6, %88
  %90 = fsub <16 x float> %70, %87
  %91 = fadd <16 x float> %90, %89
  %92 = fadd <16 x float> %91, %85
  %93 = fmul <16 x float> %33, %62
  %94 = fmul <16 x float> %93, %66
  %95 = fadd <16 x float> %86, %94
  %96 = fsub <16 x float> %95, %86
  %97 = fsub <16 x float> %95, %96
  %98 = fsub <16 x float> %86, %97
  %99 = fsub <16 x float> %94, %96
  %100 = fadd <16 x float> %99, %98
  %101 = fadd <16 x float> %100, %92
  %102 = fadd <16 x float> %95, %101
  %103 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %102, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4) #7
  ret <16 x float> %103
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_log2f16_u35avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %5 = bitcast i16 %4 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %3
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %0, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = fadd <16 x float> %7, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %9 = fadd <16 x float> %7, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %10 = fdiv <16 x float> %8, %9
  %11 = fmul <16 x float> %10, %10
  %12 = fmul <16 x float> %11, <float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000, float 0x3FDBFE81A0000000>
  %13 = fadd <16 x float> %12, <float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000, float 0x3FE2728F60000000>
  %14 = fmul <16 x float> %11, %13
  %15 = fadd <16 x float> %14, <float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000, float 0x3FEEC715E0000000>
  %16 = fmul <16 x float> %10, %11
  %17 = fmul <16 x float> %10, <float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000, float 0x4007154760000000>
  %18 = fadd <16 x float> %6, %17
  %19 = fmul <16 x float> %16, %15
  %20 = fadd <16 x float> %18, %19
  %21 = tail call <16 x float> @llvm.x86.avx512.mask.fixupimm.ps.512(<16 x float> %20, <16 x float> %0, <16 x i32> <i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944, i32 38994944>, i32 0, i16 -1, i32 4) #7
  ret <16 x float> %21
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_log1pf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %3 = fmul <16 x float> %2, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %6 = bitcast i16 %5 to <16 x i1>
  %7 = select <16 x i1> %6, <16 x float> <float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02, float 1.280000e+02>, <16 x float> %4
  %8 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %7, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %9 = shl <16 x i32> %8, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %10 = sub <16 x i32> <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>, %9
  %11 = bitcast <16 x i32> %10 to <16 x float>
  %12 = fadd <16 x float> %11, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %13 = fmul <16 x float> %11, %0
  %14 = fadd <16 x float> %13, %12
  %15 = bitcast <16 x float> %7 to <8 x i64>
  %16 = and <8 x i64> %15, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %17 = bitcast <8 x i64> %16 to <16 x float>
  %18 = fsub <16 x float> %7, %17
  %19 = fmul <16 x float> %7, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %20 = bitcast <16 x float> %19 to <8 x i64>
  %21 = xor <8 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = fmul <16 x float> %17, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %24 = fadd <16 x float> %23, %22
  %25 = fmul <16 x float> %17, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %26 = fadd <16 x float> %25, %24
  %27 = fmul <16 x float> %18, <float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000, float 0x3FE62E0000000000>
  %28 = fadd <16 x float> %27, %26
  %29 = fmul <16 x float> %18, <float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000, float 0x3F00C00000000000>
  %30 = fadd <16 x float> %29, %28
  %31 = fmul <16 x float> %7, <float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000, float 0xBE205C6100000000>
  %32 = fadd <16 x float> %31, %30
  %33 = fadd <16 x float> %14, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %34 = fsub <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %33
  %35 = fadd <16 x float> %14, %34
  %36 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %33
  %37 = bitcast <16 x float> %33 to <8 x i64>
  %38 = and <8 x i64> %37, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %39 = bitcast <8 x i64> %38 to <16 x float>
  %40 = fsub <16 x float> %33, %39
  %41 = bitcast <16 x float> %36 to <8 x i64>
  %42 = and <8 x i64> %41, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %43 = bitcast <8 x i64> %42 to <16 x float>
  %44 = fsub <16 x float> %36, %43
  %45 = bitcast <16 x float> %14 to <8 x i64>
  %46 = and <8 x i64> %45, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %47 = bitcast <8 x i64> %46 to <16 x float>
  %48 = fsub <16 x float> %14, %47
  %49 = fmul <16 x float> %14, %36
  %50 = fmul <16 x float> %39, %43
  %51 = fadd <16 x float> %50, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %52 = fmul <16 x float> %44, %39
  %53 = fadd <16 x float> %52, %51
  %54 = fmul <16 x float> %40, %43
  %55 = fadd <16 x float> %54, %53
  %56 = fmul <16 x float> %40, %44
  %57 = fadd <16 x float> %56, %55
  %58 = bitcast <16 x float> %57 to <8 x i64>
  %59 = xor <8 x i64> %58, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = bitcast <16 x float> %49 to <8 x i64>
  %62 = xor <8 x i64> %61, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %63 = bitcast <8 x i64> %62 to <16 x float>
  %64 = fmul <16 x float> %47, %43
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %44, %47
  %67 = fadd <16 x float> %66, %65
  %68 = fmul <16 x float> %48, %43
  %69 = fadd <16 x float> %68, %67
  %70 = fmul <16 x float> %48, %44
  %71 = fadd <16 x float> %70, %69
  %72 = fmul <16 x float> %49, %60
  %73 = fadd <16 x float> %71, %72
  %74 = fmul <16 x float> %49, %35
  %75 = fsub <16 x float> zeroinitializer, %74
  %76 = fmul <16 x float> %36, %75
  %77 = fadd <16 x float> %76, %73
  %78 = fmul <16 x float> %49, %49
  %79 = fmul <16 x float> %78, <float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000, float 0x3FD35FEB80000000>
  %80 = fadd <16 x float> %79, <float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000, float 0x3FD9933940000000>
  %81 = fmul <16 x float> %78, %80
  %82 = fadd <16 x float> %81, <float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000, float 0x3FE5555B40000000>
  %83 = fmul <16 x float> %49, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %84 = fmul <16 x float> %77, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %85 = fadd <16 x float> %19, %83
  %86 = fsub <16 x float> %19, %85
  %87 = fadd <16 x float> %83, %86
  %88 = fadd <16 x float> %32, %87
  %89 = fadd <16 x float> %88, %84
  %90 = fmul <16 x float> %49, %78
  %91 = fmul <16 x float> %90, %82
  %92 = fadd <16 x float> %85, %91
  %93 = fsub <16 x float> %85, %92
  %94 = fadd <16 x float> %91, %93
  %95 = fadd <16 x float> %94, %89
  %96 = fadd <16 x float> %92, %95
  %97 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i32 30, i16 -1, i32 4) #7
  %98 = bitcast i16 %97 to <16 x i1>
  %99 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <16 x float> %0, i32 30, i16 -1, i32 4) #7
  %100 = bitcast i16 %99 to <16 x i1>
  %101 = select <16 x i1> %98, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %96
  %102 = select <16 x i1> %100, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %101
  %103 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, i32 0, i16 -1, i32 4) #7
  %104 = bitcast i16 %103 to <16 x i1>
  %105 = select <16 x i1> %104, <16 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <16 x float> %102
  %106 = bitcast <16 x float> %0 to <16 x i32>
  %107 = icmp eq <16 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = select <16 x i1> %107, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %105
  ret <16 x float> %108
}

; Function Attrs: norecurse nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fabsf16_avx512fnofma(<16 x float>) local_unnamed_addr #2 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  ret <16 x float> %4
}

; Function Attrs: norecurse nounwind readnone uwtable
define <16 x float> @Sleef_cinz_copysignf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #2 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <16 x float> %1 to <8 x i64>
  %6 = and <8 x i64> %5, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %7 = or <8 x i64> %6, %4
  %8 = bitcast <8 x i64> %7 to <16 x float>
  ret <16 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fmaxf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %0, <16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = bitcast i16 %3 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> %0, <16 x float> %4
  ret <16 x float> %6
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fminf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %0, <16 x float> %1, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = bitcast i16 %3 to <16 x i1>
  %6 = select <16 x i1> %5, <16 x float> %0, <16 x float> %4
  ret <16 x float> %6
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fdimf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = fsub <16 x float> %0, %1
  %4 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %3, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> %1, i32 0, i16 -1, i32 4) #7
  %6 = or i16 %5, %4
  %7 = bitcast i16 %6 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> zeroinitializer, <16 x float> %3
  ret <16 x float> %8
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_truncf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 11, <16 x float> %0, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_floorf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %0, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %3
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %6 = fadd <16 x float> %4, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %4
  %9 = bitcast <16 x float> %0 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %14 = or i16 %13, %12
  %15 = fsub <16 x float> %0, %8
  %16 = bitcast <16 x float> %15 to <8 x i64>
  %17 = and <8 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <8 x i64> %17, %18
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = bitcast i16 %14 to <16 x i1>
  %22 = select <16 x i1> %21, <16 x float> %0, <16 x float> %20
  ret <16 x float> %22
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_ceilf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %0, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %3 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %2, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %4 = fsub <16 x float> %0, %3
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> zeroinitializer, i32 18, i16 -1, i32 4) #7
  %6 = fadd <16 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %4, <16 x float> %6
  %9 = bitcast <16 x float> %0 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %11 = bitcast <8 x i64> %10 to <16 x float>
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %11, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %14 = or i16 %13, %12
  %15 = fsub <16 x float> %0, %8
  %16 = bitcast <16 x float> %15 to <8 x i64>
  %17 = and <8 x i64> %16, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %18 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = or <8 x i64> %17, %18
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = bitcast i16 %14 to <16 x i1>
  %22 = select <16 x i1> %21, <16 x float> %0, <16 x float> %20
  ret <16 x float> %22
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_roundf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fadd <16 x float> %0, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %3, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %5 = fsub <16 x float> %2, %4
  %6 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %2, <16 x float> zeroinitializer, i32 18, i16 -1, i32 4) #7
  %7 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %8 = and i16 %7, %6
  %9 = fadd <16 x float> %2, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %10 = bitcast i16 %8 to <16 x i1>
  %11 = select <16 x i1> %10, <16 x float> %9, <16 x float> %2
  %12 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> zeroinitializer, i32 17, i16 -1, i32 4) #7
  %13 = fadd <16 x float> %5, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = bitcast i16 %12 to <16 x i1>
  %15 = select <16 x i1> %14, <16 x float> %13, <16 x float> %5
  %16 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> <float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000, float 0x3FDFFFFFE0000000>, i32 0, i16 -1, i32 4) #7
  %17 = bitcast i16 %16 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x float> zeroinitializer, <16 x float> %11
  %19 = bitcast <16 x float> %0 to <8 x i64>
  %20 = and <8 x i64> %19, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %21 = bitcast <8 x i64> %20 to <16 x float>
  %22 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %23 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>, i32 29, i16 -1, i32 4) #7
  %24 = or i16 %23, %22
  %25 = fsub <16 x float> %18, %15
  %26 = bitcast <16 x float> %25 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %28 = and <8 x i64> %19, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %29 = or <8 x i64> %27, %28
  %30 = bitcast <8 x i64> %29 to <16 x float>
  %31 = bitcast i16 %24 to <16 x i1>
  %32 = select <16 x i1> %31, <16 x float> %0, <16 x float> %30
  ret <16 x float> %32
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_rintf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %0, i32 8, <16 x float> %0, i16 -1, i32 4) #7
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fmaf16_avx512fnofma(<16 x float>, <16 x float>, <16 x float>) local_unnamed_addr #0 {
  %4 = fmul <16 x float> %0, %1
  %5 = fadd <16 x float> %4, %2
  %6 = bitcast <16 x float> %5 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000, float 0x380B38FB80000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %0, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %0
  %13 = fmul <16 x float> %1, <float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000, float 0x4310000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %1
  %15 = fmul <16 x float> %2, <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>
  %16 = select <16 x i1> %11, <16 x float> %15, <16 x float> %2
  %17 = select <16 x i1> %11, <16 x float> <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %18 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000, float 0x47D2CED320000000>, i32 30, i16 -1, i32 4) #7
  %19 = fmul <16 x float> %12, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %20 = bitcast i16 %18 to <16 x i1>
  %21 = select <16 x i1> %20, <16 x float> %19, <16 x float> %12
  %22 = fmul <16 x float> %14, <float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000, float 0x3CD0000000000000>
  %23 = select <16 x i1> %20, <16 x float> %22, <16 x float> %14
  %24 = fmul <16 x float> %16, <float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000, float 0x39B0000000000000>
  %25 = select <16 x i1> %20, <16 x float> %24, <16 x float> %16
  %26 = select <16 x i1> %20, <16 x float> <float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000, float 0x4630000000000000>, <16 x float> %17
  %27 = bitcast <16 x float> %21 to <8 x i64>
  %28 = and <8 x i64> %27, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %29 = bitcast <8 x i64> %28 to <16 x float>
  %30 = fsub <16 x float> %21, %29
  %31 = bitcast <16 x float> %23 to <8 x i64>
  %32 = and <8 x i64> %31, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %33 = bitcast <8 x i64> %32 to <16 x float>
  %34 = fsub <16 x float> %23, %33
  %35 = fmul <16 x float> %21, %23
  %36 = bitcast <16 x float> %35 to <8 x i64>
  %37 = xor <8 x i64> %36, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %38 = bitcast <8 x i64> %37 to <16 x float>
  %39 = fmul <16 x float> %29, %33
  %40 = fadd <16 x float> %39, %38
  %41 = fmul <16 x float> %30, %33
  %42 = fadd <16 x float> %41, %40
  %43 = fmul <16 x float> %34, %29
  %44 = fadd <16 x float> %43, %42
  %45 = fmul <16 x float> %30, %34
  %46 = fadd <16 x float> %45, %44
  %47 = fadd <16 x float> %25, %35
  %48 = fsub <16 x float> %47, %35
  %49 = fsub <16 x float> %47, %48
  %50 = fsub <16 x float> %35, %49
  %51 = fsub <16 x float> %25, %48
  %52 = fadd <16 x float> %51, %50
  %53 = fadd <16 x float> %52, %46
  %54 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %55 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %56 = or i16 %55, %54
  %57 = fadd <16 x float> %47, %53
  %58 = bitcast i16 %56 to <16 x i1>
  %59 = select <16 x i1> %58, <16 x float> %25, <16 x float> %57
  %60 = bitcast <16 x float> %25 to <8 x i64>
  %61 = and <8 x i64> %60, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %62 = bitcast <8 x i64> %61 to <16 x float>
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %62, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %64 = and <8 x i64> %27, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %65, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %67 = bitcast i16 %66 to <16 x i1>
  %68 = bitcast i16 %63 to <16 x i1>
  %69 = xor <16 x i1> %67, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %70 = and <16 x i1> %69, %68
  %71 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %21, <16 x float> %21, i32 4, i16 -1, i32 4) #7
  %72 = bitcast i16 %71 to <16 x i1>
  %73 = xor <16 x i1> %72, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %74 = and <16 x i1> %70, %73
  %75 = and <8 x i64> %31, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %76 = bitcast <8 x i64> %75 to <16 x float>
  %77 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %76, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %78 = bitcast i16 %77 to <16 x i1>
  %79 = xor <16 x i1> %78, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %80 = and <16 x i1> %74, %79
  %81 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> %23, i32 4, i16 -1, i32 4) #7
  %82 = bitcast i16 %81 to <16 x i1>
  %83 = xor <16 x i1> %82, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %84 = and <16 x i1> %80, %83
  %85 = select <16 x i1> %84, <16 x float> %25, <16 x float> %5
  %86 = bitcast <16 x float> %85 to <8 x i64>
  %87 = and <8 x i64> %86, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %88 = bitcast <8 x i64> %87 to <16 x float>
  %89 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %88, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %90 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %85, <16 x float> %85, i32 4, i16 -1, i32 4) #7
  %91 = or i16 %90, %89
  %92 = fmul <16 x float> %26, %59
  %93 = bitcast i16 %91 to <16 x i1>
  %94 = select <16 x i1> %93, <16 x float> %85, <16 x float> %92
  ret <16 x float> %94
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_hypotf16_u05avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %10, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %12 = fmul <16 x float> %9, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %13 = bitcast i16 %11 to <16 x i1>
  %14 = select <16 x i1> %13, <16 x float> %12, <16 x float> %9
  %15 = fmul <16 x float> %10, <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>
  %16 = select <16 x i1> %13, <16 x float> %15, <16 x float> %10
  %17 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %16
  %18 = bitcast <16 x float> %16 to <8 x i64>
  %19 = and <8 x i64> %18, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %20 = bitcast <8 x i64> %19 to <16 x float>
  %21 = fsub <16 x float> %16, %20
  %22 = bitcast <16 x float> %17 to <8 x i64>
  %23 = and <8 x i64> %22, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <8 x i64> %23 to <16 x float>
  %25 = fsub <16 x float> %17, %24
  %26 = bitcast <16 x float> %14 to <8 x i64>
  %27 = and <8 x i64> %26, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %14, %28
  %30 = fmul <16 x float> %14, %17
  %31 = fmul <16 x float> %20, %24
  %32 = fadd <16 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = fmul <16 x float> %25, %20
  %34 = fadd <16 x float> %33, %32
  %35 = fmul <16 x float> %21, %24
  %36 = fadd <16 x float> %35, %34
  %37 = fmul <16 x float> %21, %25
  %38 = fadd <16 x float> %37, %36
  %39 = bitcast <16 x float> %38 to <8 x i64>
  %40 = xor <8 x i64> %39, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %41 = bitcast <8 x i64> %40 to <16 x float>
  %42 = bitcast <16 x float> %30 to <8 x i64>
  %43 = xor <8 x i64> %42, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %44 = bitcast <8 x i64> %43 to <16 x float>
  %45 = fmul <16 x float> %28, %24
  %46 = fadd <16 x float> %45, %44
  %47 = fmul <16 x float> %25, %28
  %48 = fadd <16 x float> %47, %46
  %49 = fmul <16 x float> %29, %24
  %50 = fadd <16 x float> %49, %48
  %51 = fmul <16 x float> %29, %25
  %52 = fadd <16 x float> %51, %50
  %53 = fmul <16 x float> %30, %41
  %54 = fadd <16 x float> %52, %53
  %55 = fmul <16 x float> %30, zeroinitializer
  %56 = fsub <16 x float> zeroinitializer, %55
  %57 = fmul <16 x float> %17, %56
  %58 = fadd <16 x float> %57, %54
  %59 = and <8 x i64> %42, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %60 = bitcast <8 x i64> %59 to <16 x float>
  %61 = fsub <16 x float> %30, %60
  %62 = fmul <16 x float> %30, %30
  %63 = bitcast <16 x float> %62 to <8 x i64>
  %64 = xor <8 x i64> %63, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %65 = bitcast <8 x i64> %64 to <16 x float>
  %66 = fmul <16 x float> %60, %60
  %67 = fadd <16 x float> %66, %65
  %68 = fadd <16 x float> %60, %60
  %69 = fmul <16 x float> %68, %61
  %70 = fadd <16 x float> %69, %67
  %71 = fmul <16 x float> %61, %61
  %72 = fadd <16 x float> %71, %70
  %73 = fadd <16 x float> %58, %58
  %74 = fmul <16 x float> %30, %73
  %75 = fadd <16 x float> %72, %74
  %76 = fadd <16 x float> %62, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %77 = fsub <16 x float> %76, %62
  %78 = fsub <16 x float> %76, %77
  %79 = fsub <16 x float> %62, %78
  %80 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %77
  %81 = fadd <16 x float> %80, %79
  %82 = fadd <16 x float> %81, %75
  %83 = fadd <16 x float> %76, %82
  %84 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %83, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %85 = bitcast <16 x float> %84 to <8 x i64>
  %86 = and <8 x i64> %85, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %87 = bitcast <8 x i64> %86 to <16 x float>
  %88 = fsub <16 x float> %84, %87
  %89 = fmul <16 x float> %84, %84
  %90 = bitcast <16 x float> %89 to <8 x i64>
  %91 = xor <8 x i64> %90, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %92 = bitcast <8 x i64> %91 to <16 x float>
  %93 = fmul <16 x float> %87, %87
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %88, %87
  %96 = fadd <16 x float> %95, %94
  %97 = fadd <16 x float> %95, %96
  %98 = fmul <16 x float> %88, %88
  %99 = fadd <16 x float> %98, %97
  %100 = fadd <16 x float> %89, %76
  %101 = fsub <16 x float> %100, %76
  %102 = fsub <16 x float> %100, %101
  %103 = fsub <16 x float> %76, %102
  %104 = fsub <16 x float> %89, %101
  %105 = fadd <16 x float> %104, %103
  %106 = fadd <16 x float> %99, %82
  %107 = fadd <16 x float> %105, %106
  %108 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %84
  %109 = bitcast <16 x float> %108 to <8 x i64>
  %110 = and <8 x i64> %109, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %111 = bitcast <8 x i64> %110 to <16 x float>
  %112 = fsub <16 x float> %108, %111
  %113 = fmul <16 x float> %87, %111
  %114 = fadd <16 x float> %113, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %115 = fmul <16 x float> %112, %87
  %116 = fadd <16 x float> %115, %114
  %117 = fmul <16 x float> %88, %111
  %118 = fadd <16 x float> %117, %116
  %119 = fmul <16 x float> %88, %112
  %120 = fadd <16 x float> %119, %118
  %121 = xor <8 x i64> %109, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %122 = bitcast <8 x i64> %121 to <16 x float>
  %123 = fmul <16 x float> %120, %122
  %124 = bitcast <16 x float> %100 to <8 x i64>
  %125 = and <8 x i64> %124, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = fsub <16 x float> %100, %126
  %128 = fmul <16 x float> %108, %100
  %129 = bitcast <16 x float> %128 to <8 x i64>
  %130 = xor <8 x i64> %129, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %131 = bitcast <8 x i64> %130 to <16 x float>
  %132 = fmul <16 x float> %111, %126
  %133 = fadd <16 x float> %132, %131
  %134 = fmul <16 x float> %127, %111
  %135 = fadd <16 x float> %134, %133
  %136 = fmul <16 x float> %112, %126
  %137 = fadd <16 x float> %136, %135
  %138 = fmul <16 x float> %112, %127
  %139 = fadd <16 x float> %138, %137
  %140 = fmul <16 x float> %100, %123
  %141 = fadd <16 x float> %140, %139
  %142 = fmul <16 x float> %108, %107
  %143 = fadd <16 x float> %141, %142
  %144 = fmul <16 x float> %128, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %145 = fmul <16 x float> %143, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %146 = bitcast <16 x float> %144 to <8 x i64>
  %147 = and <8 x i64> %146, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %148 = bitcast <8 x i64> %147 to <16 x float>
  %149 = fsub <16 x float> %144, %148
  %150 = bitcast <16 x float> %10 to <8 x i64>
  %151 = and <8 x i64> %150, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %152 = bitcast <8 x i64> %151 to <16 x float>
  %153 = fsub <16 x float> %10, %152
  %154 = fmul <16 x float> %10, %144
  %155 = bitcast <16 x float> %154 to <8 x i64>
  %156 = xor <8 x i64> %155, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %157 = bitcast <8 x i64> %156 to <16 x float>
  %158 = fmul <16 x float> %152, %148
  %159 = fadd <16 x float> %158, %157
  %160 = fmul <16 x float> %149, %152
  %161 = fadd <16 x float> %160, %159
  %162 = fmul <16 x float> %153, %148
  %163 = fadd <16 x float> %162, %161
  %164 = fmul <16 x float> %153, %149
  %165 = fadd <16 x float> %164, %163
  %166 = fmul <16 x float> %10, %145
  %167 = fadd <16 x float> %165, %166
  %168 = fadd <16 x float> %154, %167
  %169 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %168, <16 x float> %168, i32 4, i16 -1, i32 4) #7
  %170 = bitcast i16 %169 to <16 x i1>
  %171 = select <16 x i1> %170, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %168
  %172 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %173 = bitcast i16 %172 to <16 x i1>
  %174 = select <16 x i1> %173, <16 x float> %10, <16 x float> %171
  %175 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> %5, i32 4, i16 -1, i32 4) #7
  %176 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %177 = or i16 %176, %175
  %178 = bitcast i16 %177 to <16 x i1>
  %179 = select <16 x i1> %178, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %174
  %180 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %181 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %182 = or i16 %181, %180
  %183 = bitcast i16 %182 to <16 x i1>
  %184 = select <16 x i1> %183, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %179
  ret <16 x float> %184
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_hypotf16_u35avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float> %5, <16 x float> %8, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fdiv <16 x float> %9, %10
  %12 = fmul <16 x float> %11, %11
  %13 = fadd <16 x float> %12, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %14 = tail call <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float> %13, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %15 = fmul <16 x float> %10, %14
  %16 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %9, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %17 = bitcast i16 %16 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x float> %10, <16 x float> %15
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> %5, i32 4, i16 -1, i32 4) #7
  %20 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %21 = or i16 %20, %19
  %22 = bitcast i16 %21 to <16 x i1>
  %23 = select <16 x i1> %22, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %18
  %24 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %25 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %26 = or i16 %25, %24
  %27 = bitcast i16 %26 to <16 x i1>
  %28 = select <16 x i1> %27, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, <16 x float> %23
  ret <16 x float> %28
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_nextafterf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %4 = bitcast <16 x float> %1 to <8 x i64>
  %5 = and <8 x i64> %4, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %6 = bitcast <8 x i64> %5 to <16 x float>
  %7 = bitcast i16 %3 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %0
  %9 = bitcast <16 x float> %8 to <8 x i64>
  %10 = bitcast <16 x float> %8 to <16 x i32>
  %11 = icmp slt <16 x i32> %10, zeroinitializer
  %12 = bitcast <16 x i1> %11 to i16
  %13 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %8, i32 29, i16 -1, i32 4) #7
  %14 = xor i16 %13, %12
  %15 = xor <16 x i32> %10, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %16 = sub <16 x i32> zeroinitializer, %15
  %17 = bitcast i16 %14 to <16 x i1>
  %18 = select <16 x i1> %17, <16 x i32> %16, <16 x i32> %10
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %20 = bitcast i16 %19 to <16 x i1>
  %21 = sext <16 x i1> %20 to <16 x i32>
  %22 = add <16 x i32> %18, %21
  %23 = xor <16 x i32> %22, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %24 = sub <16 x i32> zeroinitializer, %23
  %25 = select <16 x i1> %17, <16 x i32> %24, <16 x i32> %22
  %26 = bitcast <16 x i32> %25 to <16 x float>
  %27 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %26, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %28 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 4, i16 -1, i32 4) #7
  %29 = and i16 %28, %27
  %30 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %31 = bitcast <8 x i64> %30 to <16 x float>
  %32 = bitcast i16 %29 to <16 x i1>
  %33 = select <16 x i1> %32, <16 x float> %31, <16 x float> %26
  %34 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %35 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %36 = and i16 %35, %34
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> %1, <16 x float> %33
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> %8, i32 4, i16 -1, i32 4) #7
  %40 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> %1, i32 4, i16 -1, i32 4) #7
  %41 = or i16 %40, %39
  %42 = bitcast i16 %41 to <16 x i1>
  %43 = select <16 x i1> %42, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %38
  ret <16 x float> %43
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_frfrexpf16_avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = bitcast <16 x float> %0 to <8 x i64>
  %3 = and <8 x i64> %2, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %4 = bitcast <8 x i64> %3 to <16 x float>
  %5 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %4, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %6 = fmul <16 x float> %0, <float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000, float 0x41D0000000000000>
  %7 = bitcast i16 %5 to <16 x i1>
  %8 = select <16 x i1> %7, <16 x float> %6, <16 x float> %0
  %9 = bitcast <16 x float> %8 to <8 x i64>
  %10 = and <8 x i64> %9, <i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881, i64 -9187343241974906881>
  %11 = or <8 x i64> %10, <i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576, i64 4539628425446424576>
  %12 = bitcast <8 x i64> %11 to <16 x float>
  %13 = and <8 x i64> %9, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %14 = bitcast <8 x i64> %13 to <16 x float>
  %15 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %16 = and <8 x i64> %9, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %17 = or <8 x i64> %16, <i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880, i64 9187343241974906880>
  %18 = bitcast <8 x i64> %17 to <16 x float>
  %19 = bitcast i16 %15 to <16 x i1>
  %20 = select <16 x i1> %19, <16 x float> %18, <16 x float> %12
  %21 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %22 = bitcast i16 %21 to <16 x i1>
  %23 = select <16 x i1> %22, <16 x float> %8, <16 x float> %20
  ret <16 x float> %23
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fmodf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000, float 0x3810000000000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %5
  %13 = fmul <16 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %8
  %15 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %16 = bitcast <16 x float> %15 to <16 x i32>
  %17 = add <16 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %18 = bitcast <16 x i32> %17 to <16 x float>
  %19 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %15, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %20 = bitcast i16 %19 to <16 x i1>
  %21 = select <16 x i1> %20, <16 x float> zeroinitializer, <16 x float> %18
  %22 = fmul <16 x float> %14, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %23 = fmul <16 x float> %14, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %24 = bitcast <16 x float> %14 to <8 x i64>
  %25 = xor <8 x i64> %24, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %26 = bitcast <8 x i64> %25 to <16 x float>
  %27 = and <8 x i64> %25, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %28 = bitcast <8 x i64> %27 to <16 x float>
  %29 = fsub <16 x float> %26, %28
  br label %30

; <label>:30:                                     ; preds = %30, %2
  %31 = phi i32 [ 0, %2 ], [ %81, %30 ]
  %32 = phi <16 x float> [ zeroinitializer, %2 ], [ %78, %30 ]
  %33 = phi <16 x float> [ %12, %2 ], [ %76, %30 ]
  %34 = bitcast <16 x float> %33 to <16 x i32>
  %35 = add <16 x i32> %34, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %36 = bitcast <16 x i32> %35 to <16 x float>
  %37 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %33, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %38 = bitcast i16 %37 to <16 x i1>
  %39 = select <16 x i1> %38, <16 x float> zeroinitializer, <16 x float> %36
  %40 = fmul <16 x float> %21, %39
  %41 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %40, i32 11, <16 x float> %40, i16 -1, i32 4) #7
  %42 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %22, <16 x float> %33, i32 30, i16 -1, i32 4) #7
  %43 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %33, <16 x float> %14, i32 29, i16 -1, i32 4) #7
  %44 = and i16 %43, %42
  %45 = bitcast i16 %44 to <16 x i1>
  %46 = select <16 x i1> %45, <16 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <16 x float> %41
  %47 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %23, <16 x float> %33, i32 30, i16 -1, i32 4) #7
  %48 = and i16 %47, %43
  %49 = bitcast i16 %48 to <16 x i1>
  %50 = select <16 x i1> %49, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %46
  %51 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %50, i32 11, <16 x float> %50, i16 -1, i32 4) #7
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = and <8 x i64> %52, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fsub <16 x float> %51, %54
  %56 = fmul <16 x float> %51, %26
  %57 = bitcast <16 x float> %56 to <8 x i64>
  %58 = xor <8 x i64> %57, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fmul <16 x float> %28, %54
  %61 = fadd <16 x float> %60, %59
  %62 = fmul <16 x float> %55, %28
  %63 = fadd <16 x float> %62, %61
  %64 = fmul <16 x float> %29, %54
  %65 = fadd <16 x float> %64, %63
  %66 = fmul <16 x float> %29, %55
  %67 = fadd <16 x float> %66, %65
  %68 = fadd <16 x float> %33, %56
  %69 = fsub <16 x float> %68, %33
  %70 = fsub <16 x float> %68, %69
  %71 = fsub <16 x float> %33, %70
  %72 = fsub <16 x float> %56, %69
  %73 = fadd <16 x float> %72, %71
  %74 = fadd <16 x float> %32, %67
  %75 = fadd <16 x float> %73, %74
  %76 = fadd <16 x float> %68, %75
  %77 = fsub <16 x float> %68, %76
  %78 = fadd <16 x float> %75, %77
  %79 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %76, <16 x float> %14, i32 17, i16 -1, i32 4) #7
  %80 = icmp ne i16 %79, -1
  %81 = add nuw nsw i32 %31, 1
  %82 = icmp ult i32 %81, 8
  %83 = and i1 %82, %80
  br i1 %83, label %30, label %84

; <label>:84:                                     ; preds = %30
  %85 = select <16 x i1> %11, <16 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %86 = fadd <16 x float> %76, %78
  %87 = fmul <16 x float> %85, %86
  %88 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %86, <16 x float> %14, i32 0, i16 -1, i32 4) #7
  %89 = bitcast i16 %88 to <16 x i1>
  %90 = select <16 x i1> %89, <16 x float> zeroinitializer, <16 x float> %87
  %91 = bitcast <16 x float> %90 to <8 x i64>
  %92 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %93 = xor <8 x i64> %92, %91
  %94 = bitcast <8 x i64> %93 to <16 x float>
  %95 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %12, <16 x float> %14, i32 17, i16 -1, i32 4) #7
  %96 = bitcast i16 %95 to <16 x i1>
  %97 = select <16 x i1> %96, <16 x float> %0, <16 x float> %94
  %98 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %99 = bitcast i16 %98 to <16 x i1>
  %100 = select <16 x i1> %99, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %97
  ret <16 x float> %100
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_remainderf16_avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = bitcast <16 x float> %1 to <8 x i64>
  %7 = and <8 x i64> %6, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %8 = bitcast <8 x i64> %7 to <16 x float>
  %9 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000, float 0x3820000000000000>, i32 17, i16 -1, i32 4) #7
  %10 = fmul <16 x float> %5, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %11 = bitcast i16 %9 to <16 x i1>
  %12 = select <16 x i1> %11, <16 x float> %10, <16 x float> %5
  %13 = fmul <16 x float> %8, <float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000, float 0x4180000000000000>
  %14 = select <16 x i1> %11, <16 x float> %13, <16 x float> %8
  %15 = select <16 x i1> %11, <16 x float> <float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000, float 0x3E60000000000000>, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %16 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %14
  %17 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> zeroinitializer, <16 x float> zeroinitializer, i32 4, i16 -1, i32 4) #7
  %18 = fmul <16 x float> %14, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = fmul <16 x float> %14, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = bitcast <16 x float> %14 to <8 x i64>
  %21 = xor <8 x i64> %20, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %22 = bitcast <8 x i64> %21 to <16 x float>
  %23 = and <8 x i64> %21, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %24 = bitcast <8 x i64> %23 to <16 x float>
  %25 = fsub <16 x float> %22, %24
  br label %26

; <label>:26:                                     ; preds = %51, %2
  %27 = phi i32 [ 0, %2 ], [ %99, %51 ]
  %28 = phi i16 [ %17, %2 ], [ %72, %51 ]
  %29 = phi <16 x float> [ zeroinitializer, %2 ], [ %98, %51 ]
  %30 = phi <16 x float> [ %12, %2 ], [ %96, %51 ]
  %31 = fmul <16 x float> %16, %30
  %32 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %31, i32 8, <16 x float> %31, i16 -1, i32 4) #7
  %33 = bitcast <16 x float> %30 to <8 x i64>
  %34 = and <8 x i64> %33, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %35 = bitcast <8 x i64> %34 to <16 x float>
  %36 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %18, i32 17, i16 -1, i32 4) #7
  %37 = bitcast i16 %36 to <16 x i1>
  %38 = select <16 x i1> %37, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %32
  %39 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %19, i32 17, i16 -1, i32 4) #7
  %40 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %35, <16 x float> %19, i32 0, i16 -1, i32 4) #7
  %41 = bitcast i16 %28 to <16 x i1>
  %42 = bitcast i16 %40 to <16 x i1>
  %43 = xor <16 x i1> %41, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %44 = and <16 x i1> %42, %43
  %45 = bitcast <16 x i1> %44 to i16
  %46 = or i16 %39, %45
  %47 = bitcast i16 %46 to <16 x i1>
  %48 = select <16 x i1> %47, <16 x float> zeroinitializer, <16 x float> %38
  %49 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %48, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %50 = icmp eq i16 %49, -1
  br i1 %50, label %101, label %51

; <label>:51:                                     ; preds = %26
  %52 = fmul <16 x float> %48, %22
  %53 = bitcast <16 x float> %52 to <8 x i64>
  %54 = and <8 x i64> %53, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %55 = bitcast <8 x i64> %54 to <16 x float>
  %56 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %55, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %57 = and <8 x i64> %33, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %58 = xor <8 x i64> %57, <i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008, i64 -4647714812233515008>
  %59 = bitcast <8 x i64> %58 to <16 x float>
  %60 = fadd <16 x float> %48, %59
  %61 = bitcast i16 %56 to <16 x i1>
  %62 = select <16 x i1> %61, <16 x float> %60, <16 x float> %48
  %63 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %62, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %64 = and <16 x i32> %63, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %65 = icmp ne <16 x i32> %64, zeroinitializer
  %66 = bitcast <16 x i1> %65 to i16
  %67 = bitcast <16 x float> %62 to <8 x i64>
  %68 = and <8 x i64> %67, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %69 = bitcast <8 x i64> %68 to <16 x float>
  %70 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %69, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 17, i16 -1, i32 4) #7
  %71 = and i16 %70, %66
  %72 = xor i16 %71, %28
  %73 = and <8 x i64> %67, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %74 = bitcast <8 x i64> %73 to <16 x float>
  %75 = fsub <16 x float> %62, %74
  %76 = fmul <16 x float> %62, %22
  %77 = bitcast <16 x float> %76 to <8 x i64>
  %78 = xor <8 x i64> %77, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %79 = bitcast <8 x i64> %78 to <16 x float>
  %80 = fmul <16 x float> %24, %74
  %81 = fadd <16 x float> %80, %79
  %82 = fmul <16 x float> %75, %24
  %83 = fadd <16 x float> %82, %81
  %84 = fmul <16 x float> %25, %74
  %85 = fadd <16 x float> %84, %83
  %86 = fmul <16 x float> %25, %75
  %87 = fadd <16 x float> %86, %85
  %88 = fadd <16 x float> %30, %76
  %89 = fsub <16 x float> %88, %30
  %90 = fsub <16 x float> %88, %89
  %91 = fsub <16 x float> %30, %90
  %92 = fsub <16 x float> %76, %89
  %93 = fadd <16 x float> %92, %91
  %94 = fadd <16 x float> %29, %87
  %95 = fadd <16 x float> %93, %94
  %96 = fadd <16 x float> %88, %95
  %97 = fsub <16 x float> %88, %96
  %98 = fadd <16 x float> %95, %97
  %99 = add nuw nsw i32 %27, 1
  %100 = icmp ult i32 %99, 8
  br i1 %100, label %26, label %101

; <label>:101:                                    ; preds = %26, %51
  %102 = phi <16 x float> [ %30, %26 ], [ %96, %51 ]
  %103 = phi <16 x float> [ %29, %26 ], [ %98, %51 ]
  %104 = fadd <16 x float> %102, %103
  %105 = fmul <16 x float> %15, %104
  %106 = bitcast <16 x float> %105 to <8 x i64>
  %107 = and <8 x i64> %3, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %108 = xor <8 x i64> %107, %106
  %109 = bitcast <8 x i64> %108 to <16 x float>
  %110 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %8, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %111 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %5, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %112 = bitcast i16 %111 to <16 x i1>
  %113 = select <16 x i1> %112, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %0
  %114 = bitcast i16 %110 to <16 x i1>
  %115 = select <16 x i1> %114, <16 x float> %113, <16 x float> %109
  %116 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %14, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %117 = bitcast i16 %116 to <16 x i1>
  %118 = select <16 x i1> %117, <16 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <16 x float> %115
  ret <16 x float> %118
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_sinpif16_u05avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = lshr <16 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <16 x i32> %5, %3
  %7 = and <16 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp ne <16 x i32> %7, zeroinitializer
  %9 = and <16 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fsub <16 x float> %2, %10
  %12 = fmul <16 x float> %11, %11
  %13 = bitcast <16 x float> %11 to <8 x i64>
  %14 = and <8 x i64> %13, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fsub <16 x float> %11, %15
  %17 = bitcast <16 x float> %12 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %15, %15
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %16, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %16, %16
  %26 = fadd <16 x float> %25, %24
  %27 = select <16 x i1> %8, <16 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <16 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %28 = select <16 x i1> %8, <16 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <16 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %29 = fmul <16 x float> %12, %27
  %30 = fadd <16 x float> %28, %29
  %31 = select <16 x i1> %8, <16 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <16 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %32 = fmul <16 x float> %12, %30
  %33 = fadd <16 x float> %31, %32
  %34 = fmul <16 x float> %12, %33
  %35 = select <16 x i1> %8, <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %36 = select <16 x i1> %8, <16 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <16 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %37 = fadd <16 x float> %35, %34
  %38 = fsub <16 x float> %37, %34
  %39 = fsub <16 x float> %37, %38
  %40 = fsub <16 x float> %34, %39
  %41 = fsub <16 x float> %35, %38
  %42 = fadd <16 x float> %41, %40
  %43 = fadd <16 x float> %36, %42
  %44 = and <8 x i64> %17, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %12, %45
  %47 = bitcast <16 x float> %37 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %37, %49
  %51 = fmul <16 x float> %12, %37
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = xor <8 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fmul <16 x float> %45, %49
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %46, %49
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %50, %45
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %46, %50
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %12, %43
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %26, %37
  %66 = fadd <16 x float> %65, %64
  %67 = select <16 x i1> %8, <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %68 = select <16 x i1> %8, <16 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <16 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %69 = fadd <16 x float> %67, %51
  %70 = fsub <16 x float> %69, %51
  %71 = fsub <16 x float> %69, %70
  %72 = fsub <16 x float> %51, %71
  %73 = fsub <16 x float> %67, %70
  %74 = fadd <16 x float> %73, %72
  %75 = fadd <16 x float> %68, %66
  %76 = fadd <16 x float> %74, %75
  %77 = select <16 x i1> %8, <16 x float> %12, <16 x float> %11
  %78 = select <16 x i1> %8, <16 x float> %26, <16 x float> zeroinitializer
  %79 = bitcast <16 x float> %69 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %69, %81
  %83 = bitcast <16 x float> %77 to <8 x i64>
  %84 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fsub <16 x float> %77, %85
  %87 = fmul <16 x float> %77, %69
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %85, %81
  %92 = fadd <16 x float> %91, %90
  %93 = fmul <16 x float> %82, %85
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %86, %81
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %86, %82
  %98 = fadd <16 x float> %97, %96
  %99 = fmul <16 x float> %78, %69
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %77, %76
  %102 = fadd <16 x float> %100, %101
  %103 = fadd <16 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %104 = fsub <16 x float> %103, %87
  %105 = fsub <16 x float> %103, %104
  %106 = fsub <16 x float> %87, %105
  %107 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %104
  %108 = fadd <16 x float> %107, %106
  %109 = fadd <16 x float> %108, %102
  %110 = select <16 x i1> %8, <16 x float> %103, <16 x float> %87
  %111 = select <16 x i1> %8, <16 x float> %109, <16 x float> %102
  %112 = shl <16 x i32> %6, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %113 = bitcast <16 x i32> %112 to <8 x i64>
  %114 = and <8 x i64> %113, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %115 = bitcast <16 x float> %110 to <8 x i64>
  %116 = xor <8 x i64> %114, %115
  %117 = bitcast <16 x float> %111 to <8 x i64>
  %118 = xor <8 x i64> %114, %117
  %119 = bitcast <8 x i64> %116 to <16 x float>
  %120 = bitcast <8 x i64> %118 to <16 x float>
  %121 = fadd <16 x float> %119, %120
  %122 = bitcast <16 x float> %0 to <16 x i32>
  %123 = icmp eq <16 x i32> %122, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %124 = bitcast <16 x float> %0 to <8 x i64>
  %125 = and <8 x i64> %124, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %126 = bitcast <8 x i64> %125 to <16 x float>
  %127 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %126, <16 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i32 30, i16 -1, i32 4) #7
  %128 = bitcast i16 %127 to <16 x i1>
  %129 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %126, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %130 = bitcast i16 %129 to <16 x i1>
  %131 = select <16 x i1> %123, <16 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, <16 x float> %121
  %132 = select <16 x i1> %128, <16 x float> zeroinitializer, <16 x float> %131
  %133 = select <16 x i1> %130, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %132
  ret <16 x float> %133
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_cospif16_u05avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = fmul <16 x float> %0, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %3 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %2, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %4 = lshr <16 x i32> %3, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %5 = xor <16 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %6 = add <16 x i32> %5, %3
  %7 = and <16 x i32> %6, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %8 = icmp eq <16 x i32> %7, zeroinitializer
  %9 = and <16 x i32> %6, <i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %9, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fsub <16 x float> %2, %10
  %12 = fmul <16 x float> %11, %11
  %13 = bitcast <16 x float> %11 to <8 x i64>
  %14 = and <8 x i64> %13, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %15 = bitcast <8 x i64> %14 to <16 x float>
  %16 = fsub <16 x float> %11, %15
  %17 = bitcast <16 x float> %12 to <8 x i64>
  %18 = xor <8 x i64> %17, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %19 = bitcast <8 x i64> %18 to <16 x float>
  %20 = fmul <16 x float> %15, %15
  %21 = fadd <16 x float> %20, %19
  %22 = fmul <16 x float> %16, %15
  %23 = fadd <16 x float> %22, %21
  %24 = fadd <16 x float> %22, %23
  %25 = fmul <16 x float> %16, %16
  %26 = fadd <16 x float> %25, %24
  %27 = select <16 x i1> %8, <16 x float> <float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000, float 0xBE5A193700000000>, <16 x float> <float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000, float 0x3E94C32E20000000>
  %28 = select <16 x i1> %8, <16 x float> <float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000, float 0x3ECE1EB4A0000000>, <16 x float> <float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000, float 0xBF032CC140000000>
  %29 = fmul <16 x float> %12, %27
  %30 = fadd <16 x float> %28, %29
  %31 = select <16 x i1> %8, <16 x float> <float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000, float 0xBF355D3C00000000>, <16 x float> <float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000, float 0x3F6466BBE0000000>
  %32 = fmul <16 x float> %12, %30
  %33 = fadd <16 x float> %31, %32
  %34 = fmul <16 x float> %12, %33
  %35 = select <16 x i1> %8, <16 x float> <float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000, float 0x3F903C1F00000000>, <16 x float> <float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000, float 0xBFB4ABBCE0000000>
  %36 = select <16 x i1> %8, <16 x float> <float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000, float 0x3DFEE1F000000000>, <16 x float> <float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000, float 0xBE16F9CCE0000000>
  %37 = fadd <16 x float> %35, %34
  %38 = fsub <16 x float> %37, %34
  %39 = fsub <16 x float> %37, %38
  %40 = fsub <16 x float> %34, %39
  %41 = fsub <16 x float> %35, %38
  %42 = fadd <16 x float> %41, %40
  %43 = fadd <16 x float> %36, %42
  %44 = and <8 x i64> %17, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %45 = bitcast <8 x i64> %44 to <16 x float>
  %46 = fsub <16 x float> %12, %45
  %47 = bitcast <16 x float> %37 to <8 x i64>
  %48 = and <8 x i64> %47, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %49 = bitcast <8 x i64> %48 to <16 x float>
  %50 = fsub <16 x float> %37, %49
  %51 = fmul <16 x float> %12, %37
  %52 = bitcast <16 x float> %51 to <8 x i64>
  %53 = xor <8 x i64> %52, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %54 = bitcast <8 x i64> %53 to <16 x float>
  %55 = fmul <16 x float> %45, %49
  %56 = fadd <16 x float> %55, %54
  %57 = fmul <16 x float> %46, %49
  %58 = fadd <16 x float> %57, %56
  %59 = fmul <16 x float> %50, %45
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %46, %50
  %62 = fadd <16 x float> %61, %60
  %63 = fmul <16 x float> %12, %43
  %64 = fadd <16 x float> %63, %62
  %65 = fmul <16 x float> %26, %37
  %66 = fadd <16 x float> %65, %64
  %67 = select <16 x i1> %8, <16 x float> <float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000, float 0xBFD3BD3CC0000000>, <16 x float> <float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000, float 0x3FE921FB60000000>
  %68 = select <16 x i1> %8, <16 x float> <float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000, float 0xBE437BD7E0000000>, <16 x float> <float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000, float 0xBE57781980000000>
  %69 = fadd <16 x float> %67, %51
  %70 = fsub <16 x float> %69, %51
  %71 = fsub <16 x float> %69, %70
  %72 = fsub <16 x float> %51, %71
  %73 = fsub <16 x float> %67, %70
  %74 = fadd <16 x float> %73, %72
  %75 = fadd <16 x float> %68, %66
  %76 = fadd <16 x float> %74, %75
  %77 = select <16 x i1> %8, <16 x float> %12, <16 x float> %11
  %78 = select <16 x i1> %8, <16 x float> %26, <16 x float> zeroinitializer
  %79 = bitcast <16 x float> %69 to <8 x i64>
  %80 = and <8 x i64> %79, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %81 = bitcast <8 x i64> %80 to <16 x float>
  %82 = fsub <16 x float> %69, %81
  %83 = bitcast <16 x float> %77 to <8 x i64>
  %84 = and <8 x i64> %83, <i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216, i64 -17587891081216>
  %85 = bitcast <8 x i64> %84 to <16 x float>
  %86 = fsub <16 x float> %77, %85
  %87 = fmul <16 x float> %77, %69
  %88 = bitcast <16 x float> %87 to <8 x i64>
  %89 = xor <8 x i64> %88, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %90 = bitcast <8 x i64> %89 to <16 x float>
  %91 = fmul <16 x float> %85, %81
  %92 = fadd <16 x float> %91, %90
  %93 = fmul <16 x float> %82, %85
  %94 = fadd <16 x float> %93, %92
  %95 = fmul <16 x float> %86, %81
  %96 = fadd <16 x float> %95, %94
  %97 = fmul <16 x float> %86, %82
  %98 = fadd <16 x float> %97, %96
  %99 = fmul <16 x float> %78, %69
  %100 = fadd <16 x float> %99, %98
  %101 = fmul <16 x float> %77, %76
  %102 = fadd <16 x float> %100, %101
  %103 = fadd <16 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %104 = fsub <16 x float> %103, %87
  %105 = fsub <16 x float> %103, %104
  %106 = fsub <16 x float> %87, %105
  %107 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %104
  %108 = fadd <16 x float> %107, %106
  %109 = fadd <16 x float> %108, %102
  %110 = select <16 x i1> %8, <16 x float> %103, <16 x float> %87
  %111 = select <16 x i1> %8, <16 x float> %109, <16 x float> %102
  %112 = shl <16 x i32> %9, <i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29, i32 29>
  %113 = add <16 x i32> %112, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %114 = bitcast <16 x i32> %113 to <8 x i64>
  %115 = and <8 x i64> %114, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %116 = bitcast <16 x float> %110 to <8 x i64>
  %117 = xor <8 x i64> %115, %116
  %118 = bitcast <16 x float> %111 to <8 x i64>
  %119 = xor <8 x i64> %115, %118
  %120 = bitcast <8 x i64> %117 to <16 x float>
  %121 = bitcast <8 x i64> %119 to <16 x float>
  %122 = fadd <16 x float> %120, %121
  %123 = bitcast <16 x float> %0 to <8 x i64>
  %124 = and <8 x i64> %123, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %125 = bitcast <8 x i64> %124 to <16 x float>
  %126 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %125, <16 x float> <float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06, float 8.000000e+06>, i32 30, i16 -1, i32 4) #7
  %127 = bitcast i16 %126 to <16 x i1>
  %128 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %125, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %129 = bitcast i16 %128 to <16 x i1>
  %130 = select <16 x i1> %127, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %122
  %131 = select <16 x i1> %129, <16 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <16 x float> %130
  ret <16 x float> %131
}

; Function Attrs: nounwind uwtable
define <16 x float> @Sleef_cinz_tgammaf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #3 {
  %2 = tail call <16 x float> @Sleef_tgammaf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind uwtable
define <16 x float> @Sleef_cinz_lgammaf16_u10avx512fnofma(<16 x float>) local_unnamed_addr #3 {
  %2 = tail call <16 x float> @Sleef_lgammaf16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_erff16_u10avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_erff16_u10avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_erfcf16_u15avx512fnofma(<16 x float>) local_unnamed_addr #0 {
  %2 = tail call <16 x float> @Sleef_erfcf16_u15avx512fnofma(<16 x float> %0)
  ret <16 x float> %2
}

; Function Attrs: nounwind readnone uwtable
define <16 x float> @Sleef_cinz_fastpowf16_u3500avx512fnofma(<16 x float>, <16 x float>) local_unnamed_addr #0 {
  %3 = bitcast <16 x float> %0 to <8 x i64>
  %4 = and <8 x i64> %3, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %5 = bitcast <8 x i64> %4 to <16 x float>
  %6 = fmul <16 x float> %5, <float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000, float 0x3FF5555560000000>
  %7 = tail call <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float> %6, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %8 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %7, <16 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>, i32 0, i16 -1, i32 4) #7
  %9 = bitcast i16 %8 to <16 x i1>
  %10 = tail call <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float> %5, i32 11, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %11 = fadd <16 x float> %10, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %12 = fadd <16 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %13 = fdiv <16 x float> %11, %12
  %14 = fmul <16 x float> %13, %13
  %15 = fmul <16 x float> %14, <float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000, float 0x3FCEA0D200000000>
  %16 = fadd <16 x float> %15, <float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000, float 0x3FD2406C80000000>
  %17 = fmul <16 x float> %14, %16
  %18 = fadd <16 x float> %17, <float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000, float 0x3FD999B240000000>
  %19 = fmul <16 x float> %14, %18
  %20 = fadd <16 x float> %19, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %21 = fmul <16 x float> %14, %20
  %22 = fadd <16 x float> %21, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %23 = fmul <16 x float> %7, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %24 = select <16 x i1> %9, <16 x float> <float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000, float 0x40562E4300000000>, <16 x float> %23
  %25 = fmul <16 x float> %13, %22
  %26 = fadd <16 x float> %24, %25
  %27 = fmul <16 x float> %26, %1
  %28 = fmul <16 x float> %27, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %29 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %28, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %30 = tail call <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32> %29, <16 x float> zeroinitializer, i16 -1, i32 4) #7
  %31 = fmul <16 x float> %30, <float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000, float 0xBFE62E4000000000>
  %32 = fadd <16 x float> %31, %27
  %33 = fmul <16 x float> %30, <float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000, float 0xBEB7F7D1C0000000>
  %34 = fadd <16 x float> %33, %32
  %35 = fmul <16 x float> %34, <float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000, float 0x3F2A057B40000000>
  %36 = fadd <16 x float> %35, <float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000, float 0x3F56D2D920000000>
  %37 = fmul <16 x float> %34, %36
  %38 = fadd <16 x float> %37, <float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000, float 0x3F811114C0000000>
  %39 = fmul <16 x float> %34, %38
  %40 = fadd <16 x float> %39, <float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000, float 0x3FA5554F40000000>
  %41 = fmul <16 x float> %34, %40
  %42 = fadd <16 x float> %41, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %43 = fmul <16 x float> %34, %42
  %44 = fadd <16 x float> %43, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fmul <16 x float> %34, %34
  %46 = fadd <16 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %47 = fmul <16 x float> %45, %44
  %48 = fadd <16 x float> %46, %47
  %49 = ashr <16 x i32> %29, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %50 = shl <16 x i32> %49, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %51 = add <16 x i32> %50, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %52 = bitcast <16 x i32> %51 to <16 x float>
  %53 = fmul <16 x float> %48, %52
  %54 = sub <16 x i32> %29, %49
  %55 = shl <16 x i32> %54, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %56 = add <16 x i32> %55, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %57 = bitcast <16 x i32> %56 to <16 x float>
  %58 = fmul <16 x float> %53, %57
  %59 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %27, <16 x float> <float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02, float -1.040000e+02>, i32 17, i16 -1, i32 4) #7
  %60 = bitcast i16 %59 to <16 x i1>
  %61 = select <16 x i1> %60, <16 x float> zeroinitializer, <16 x float> %58
  %62 = tail call <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float> %1, i32 11, <16 x float> %1, i16 -1, i32 4) #7
  %63 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %62, <16 x float> %1, i32 0, i16 -1, i32 4) #7
  %64 = bitcast <16 x float> %1 to <8 x i64>
  %65 = and <8 x i64> %64, <i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159, i64 9223372034707292159>
  %66 = bitcast <8 x i64> %65 to <16 x float>
  %67 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %66, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 30, i16 -1, i32 4) #7
  %68 = or i16 %67, %63
  %69 = tail call <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float> %1, <16 x i32> zeroinitializer, i16 -1, i32 4) #7
  %70 = and <16 x i32> %69, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = icmp ne <16 x i32> %70, zeroinitializer
  %72 = bitcast <16 x i1> %71 to i16
  %73 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %66, <16 x float> <float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000, float 0x4170000000000000>, i32 17, i16 -1, i32 4) #7
  %74 = bitcast <16 x float> %0 to <16 x i32>
  %75 = icmp slt <16 x i32> %74, zeroinitializer
  %76 = bitcast <16 x i1> %75 to i16
  %77 = and i16 %68, %76
  %78 = and i16 %77, %73
  %79 = and i16 %78, %72
  %80 = bitcast <16 x float> %61 to <8 x i64>
  %81 = xor <8 x i64> %80, <i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160, i64 -9223372034707292160>
  %82 = bitcast <8 x i64> %81 to <16 x float>
  %83 = bitcast i16 %79 to <16 x i1>
  %84 = select <16 x i1> %83, <16 x float> %82, <16 x float> %61
  %85 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %0, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %86 = bitcast i16 %85 to <16 x i1>
  %87 = select <16 x i1> %86, <16 x float> zeroinitializer, <16 x float> %84
  %88 = tail call i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float> %1, <16 x float> zeroinitializer, i32 0, i16 -1, i32 4) #7
  %89 = bitcast i16 %88 to <16 x i1>
  %90 = select <16 x i1> %89, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %87
  ret <16 x float> %90
}

; Function Attrs: nounwind uwtable
define i32 @Sleef_getIntf16_avx512fnofma(i32) local_unnamed_addr #3 {
  %2 = alloca [4 x i32], align 16
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %5, label %13

; <label>:5:                                      ; preds = %1
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  call void @Sleef_x86CpuID(i32* nonnull %7, i32 7, i32 0) #7
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !36
  %10 = and i32 %9, 65536
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, i32 0, i32 3
  br label %13

; <label>:13:                                     ; preds = %1, %5
  %14 = phi i32 [ %12, %5 ], [ 0, %1 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone uwtable
define i8* @Sleef_getPtrf16_avx512fnofma(i32) local_unnamed_addr #2 {
  %2 = icmp eq i32 %0, 0
  %3 = select i1 %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* null
  ret i8* %3
}

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.getexp.ps.512(<16 x float>, <16 x float>, i16, i32) #4

; Function Attrs: nounwind readnone
declare i16 @llvm.x86.avx512.mask.cmp.ps.512(<16 x float>, <16 x float>, i32, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float>, <16 x i32>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.cvtdq2ps.512(<16 x i32>, <16 x float>, i16, i32) #4

; Function Attrs: argmemonly nounwind readonly
declare <16 x float> @llvm.x86.avx512.gather.dps.512(<16 x float>, i8*, <16 x i32>, i16, i32) #5

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.rndscale.ps.512(<16 x float>, i32, <16 x float>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.x86.avx512.mask.cvttps2dq.512(<16 x float>, <16 x i32>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.sqrt.ps.512(<16 x float>, <16 x float>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.getmant.ps.512(<16 x float>, i32, <16 x float>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.max.ps.512(<16 x float>, <16 x float>, <16 x float>, i16, i32) #4

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.mask.min.ps.512(<16 x float>, <16 x float>, <16 x float>, i16, i32) #4

declare void @Sleef_x86CpuID(i32*, i32, i32) local_unnamed_addr #6

attributes #0 = { nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { argmemonly nounwind readonly }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"rempif: argument 0"}
!5 = distinct !{!5, !"rempif"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"rempif: argument 0"}
!8 = distinct !{!8, !"rempif"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"rempif: argument 0"}
!11 = distinct !{!11, !"rempif"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"rempif: argument 0"}
!14 = distinct !{!14, !"rempif"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"rempif: argument 0"}
!17 = distinct !{!17, !"rempif"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"rempif: argument 0"}
!20 = distinct !{!20, !"rempif"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"rempif: argument 0"}
!23 = distinct !{!23, !"rempif"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"rempif: argument 0"}
!26 = distinct !{!26, !"rempif"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"Sleef_sincospif16_u05avx512fnofma: argument 0"}
!29 = distinct !{!29, !"Sleef_sincospif16_u05avx512fnofma"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"Sleef_sincospif16_u35avx512fnofma: argument 0"}
!32 = distinct !{!32, !"Sleef_sincospif16_u35avx512fnofma"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"Sleef_modff16_avx512fnofma: argument 0"}
!35 = distinct !{!35, !"Sleef_modff16_avx512fnofma"}
!36 = !{!37, !37, i64 0}
!37 = !{!"int", !38, i64 0}
!38 = !{!"omnipotent char", !39, i64 0}
!39 = !{!"Simple C/C++ TBAA"}
